(function () {
  'use strict';

  function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError("Cannot call a class as a function");
    }
  }

  function _defineProperties(target, props) {
    for (var i = 0; i < props.length; i++) {
      var descriptor = props[i];
      descriptor.enumerable = descriptor.enumerable || false;
      descriptor.configurable = true;
      if ("value" in descriptor) descriptor.writable = true;
      Object.defineProperty(target, descriptor.key, descriptor);
    }
  }

  function _createClass(Constructor, protoProps, staticProps) {
    if (protoProps) _defineProperties(Constructor.prototype, protoProps);
    if (staticProps) _defineProperties(Constructor, staticProps);
    return Constructor;
  }

  function _slicedToArray(arr, i) {
    return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest();
  }

  function _arrayWithHoles(arr) {
    if (Array.isArray(arr)) return arr;
  }

  function _iterableToArrayLimit(arr, i) {
    if (typeof Symbol === "undefined" || !(Symbol.iterator in Object(arr))) return;
    var _arr = [];
    var _n = true;
    var _d = false;
    var _e = undefined;

    try {
      for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {
        _arr.push(_s.value);

        if (i && _arr.length === i) break;
      }
    } catch (err) {
      _d = true;
      _e = err;
    } finally {
      try {
        if (!_n && _i["return"] != null) _i["return"]();
      } finally {
        if (_d) throw _e;
      }
    }

    return _arr;
  }

  function _unsupportedIterableToArray(o, minLen) {
    if (!o) return;
    if (typeof o === "string") return _arrayLikeToArray(o, minLen);
    var n = Object.prototype.toString.call(o).slice(8, -1);
    if (n === "Object" && o.constructor) n = o.constructor.name;
    if (n === "Map" || n === "Set") return Array.from(o);
    if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);
  }

  function _arrayLikeToArray(arr, len) {
    if (len == null || len > arr.length) len = arr.length;

    for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];

    return arr2;
  }

  function _nonIterableRest() {
    throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
  }

  function _createForOfIteratorHelper(o, allowArrayLike) {
    var it;

    if (typeof Symbol === "undefined" || o[Symbol.iterator] == null) {
      if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") {
        if (it) o = it;
        var i = 0;

        var F = function () {};

        return {
          s: F,
          n: function () {
            if (i >= o.length) return {
              done: true
            };
            return {
              done: false,
              value: o[i++]
            };
          },
          e: function (e) {
            throw e;
          },
          f: F
        };
      }

      throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
    }

    var normalCompletion = true,
        didErr = false,
        err;
    return {
      s: function () {
        it = o[Symbol.iterator]();
      },
      n: function () {
        var step = it.next();
        normalCompletion = step.done;
        return step;
      },
      e: function (e) {
        didErr = true;
        err = e;
      },
      f: function () {
        try {
          if (!normalCompletion && it.return != null) it.return();
        } finally {
          if (didErr) throw err;
        }
      }
    };
  }

  var commonjsGlobal = typeof globalThis !== 'undefined' ? globalThis : typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : {};

  function unwrapExports (x) {
  	return x && x.__esModule && Object.prototype.hasOwnProperty.call(x, 'default') ? x['default'] : x;
  }

  function createCommonjsModule(fn, module) {
  	return module = { exports: {} }, fn(module, module.exports), module.exports;
  }

  var _global = createCommonjsModule(function (module) {
    // https://github.com/zloirock/core-js/issues/86#issuecomment-115759028
    var global = module.exports = typeof window != 'undefined' && window.Math == Math ? window : typeof self != 'undefined' && self.Math == Math ? self // eslint-disable-next-line no-new-func
    : Function('return this')();
    if (typeof __g == 'number') __g = global; // eslint-disable-line no-undef
  });

  var hasOwnProperty = {}.hasOwnProperty;

  var _has = function _has(it, key) {
    return hasOwnProperty.call(it, key);
  };

  var _fails = function _fails(exec) {
    try {
      return !!exec();
    } catch (e) {
      return true;
    }
  };

  var _descriptors = !_fails(function () {
    return Object.defineProperty({}, 'a', {
      get: function get() {
        return 7;
      }
    }).a != 7;
  });

  var _core = createCommonjsModule(function (module) {
    var core = module.exports = {
      version: '2.6.11'
    };
    if (typeof __e == 'number') __e = core; // eslint-disable-line no-undef
  });
  var _core_1 = _core.version;

  var _isObject = function _isObject(it) {
    return typeof it === 'object' ? it !== null : typeof it === 'function';
  };

  var _anObject = function _anObject(it) {
    if (!_isObject(it)) throw TypeError(it + ' is not an object!');
    return it;
  };

  var document$1 = _global.document; // typeof document.createElement is 'object' in old IE

  var is = _isObject(document$1) && _isObject(document$1.createElement);

  var _domCreate = function _domCreate(it) {
    return is ? document$1.createElement(it) : {};
  };

  var _ie8DomDefine = !_descriptors && !_fails(function () {
    return Object.defineProperty(_domCreate('div'), 'a', {
      get: function get() {
        return 7;
      }
    }).a != 7;
  });

  // instead of the ES6 spec version, we didn't implement @@toPrimitive case
  // and the second argument - flag - preferred type is a string

  var _toPrimitive = function _toPrimitive(it, S) {
    if (!_isObject(it)) return it;
    var fn, val;
    if (S && typeof (fn = it.toString) == 'function' && !_isObject(val = fn.call(it))) return val;
    if (typeof (fn = it.valueOf) == 'function' && !_isObject(val = fn.call(it))) return val;
    if (!S && typeof (fn = it.toString) == 'function' && !_isObject(val = fn.call(it))) return val;
    throw TypeError("Can't convert object to primitive value");
  };

  var dP = Object.defineProperty;
  var f = _descriptors ? Object.defineProperty : function defineProperty(O, P, Attributes) {
    _anObject(O);
    P = _toPrimitive(P, true);
    _anObject(Attributes);
    if (_ie8DomDefine) try {
      return dP(O, P, Attributes);
    } catch (e) {
      /* empty */
    }
    if ('get' in Attributes || 'set' in Attributes) throw TypeError('Accessors not supported!');
    if ('value' in Attributes) O[P] = Attributes.value;
    return O;
  };
  var _objectDp = {
    f: f
  };

  var _propertyDesc = function _propertyDesc(bitmap, value) {
    return {
      enumerable: !(bitmap & 1),
      configurable: !(bitmap & 2),
      writable: !(bitmap & 4),
      value: value
    };
  };

  var _hide = _descriptors ? function (object, key, value) {
    return _objectDp.f(object, key, _propertyDesc(1, value));
  } : function (object, key, value) {
    object[key] = value;
    return object;
  };

  var id = 0;
  var px = Math.random();

  var _uid = function _uid(key) {
    return 'Symbol('.concat(key === undefined ? '' : key, ')_', (++id + px).toString(36));
  };

  var _library = false;

  var _shared = createCommonjsModule(function (module) {
    var SHARED = '__core-js_shared__';
    var store = _global[SHARED] || (_global[SHARED] = {});
    (module.exports = function (key, value) {
      return store[key] || (store[key] = value !== undefined ? value : {});
    })('versions', []).push({
      version: _core.version,
      mode:  'global',
      copyright: 'Â© 2019 Denis Pushkarev (zloirock.ru)'
    });
  });

  var _functionToString = _shared('native-function-to-string', Function.toString);

  var _redefine = createCommonjsModule(function (module) {
    var SRC = _uid('src');
    var TO_STRING = 'toString';
    var TPL = ('' + _functionToString).split(TO_STRING);

    _core.inspectSource = function (it) {
      return _functionToString.call(it);
    };

    (module.exports = function (O, key, val, safe) {
      var isFunction = typeof val == 'function';
      if (isFunction) _has(val, 'name') || _hide(val, 'name', key);
      if (O[key] === val) return;
      if (isFunction) _has(val, SRC) || _hide(val, SRC, O[key] ? '' + O[key] : TPL.join(String(key)));

      if (O === _global) {
        O[key] = val;
      } else if (!safe) {
        delete O[key];
        _hide(O, key, val);
      } else if (O[key]) {
        O[key] = val;
      } else {
        _hide(O, key, val);
      } // add fake Function#toString for correct work wrapped methods / constructors with methods like LoDash isNative

    })(Function.prototype, TO_STRING, function toString() {
      return typeof this == 'function' && this[SRC] || _functionToString.call(this);
    });
  });

  var _aFunction = function _aFunction(it) {
    if (typeof it != 'function') throw TypeError(it + ' is not a function!');
    return it;
  };

  var _ctx = function _ctx(fn, that, length) {
    _aFunction(fn);
    if (that === undefined) return fn;

    switch (length) {
      case 1:
        return function (a) {
          return fn.call(that, a);
        };

      case 2:
        return function (a, b) {
          return fn.call(that, a, b);
        };

      case 3:
        return function (a, b, c) {
          return fn.call(that, a, b, c);
        };
    }

    return function ()
    /* ...args */
    {
      return fn.apply(that, arguments);
    };
  };

  var PROTOTYPE = 'prototype';

  var $export = function $export(type, name, source) {
    var IS_FORCED = type & $export.F;
    var IS_GLOBAL = type & $export.G;
    var IS_STATIC = type & $export.S;
    var IS_PROTO = type & $export.P;
    var IS_BIND = type & $export.B;
    var target = IS_GLOBAL ? _global : IS_STATIC ? _global[name] || (_global[name] = {}) : (_global[name] || {})[PROTOTYPE];
    var exports = IS_GLOBAL ? _core : _core[name] || (_core[name] = {});
    var expProto = exports[PROTOTYPE] || (exports[PROTOTYPE] = {});
    var key, own, out, exp;
    if (IS_GLOBAL) source = name;

    for (key in source) {
      // contains in native
      own = !IS_FORCED && target && target[key] !== undefined; // export native or passed

      out = (own ? target : source)[key]; // bind timers to global for call from export context

      exp = IS_BIND && own ? _ctx(out, _global) : IS_PROTO && typeof out == 'function' ? _ctx(Function.call, out) : out; // extend global

      if (target) _redefine(target, key, out, type & $export.U); // export

      if (exports[key] != out) _hide(exports, key, exp);
      if (IS_PROTO && expProto[key] != out) expProto[key] = out;
    }
  };

  _global.core = _core; // type bitmap

  $export.F = 1; // forced

  $export.G = 2; // global

  $export.S = 4; // static

  $export.P = 8; // proto

  $export.B = 16; // bind

  $export.W = 32; // wrap

  $export.U = 64; // safe

  $export.R = 128; // real proto method for `library`

  var _export = $export;

  var _meta = createCommonjsModule(function (module) {
    var META = _uid('meta');
    var setDesc = _objectDp.f;
    var id = 0;

    var isExtensible = Object.isExtensible || function () {
      return true;
    };

    var FREEZE = !_fails(function () {
      return isExtensible(Object.preventExtensions({}));
    });

    var setMeta = function setMeta(it) {
      setDesc(it, META, {
        value: {
          i: 'O' + ++id,
          // object ID
          w: {} // weak collections IDs

        }
      });
    };

    var fastKey = function fastKey(it, create) {
      // return primitive with prefix
      if (!_isObject(it)) return typeof it == 'symbol' ? it : (typeof it == 'string' ? 'S' : 'P') + it;

      if (!_has(it, META)) {
        // can't set metadata to uncaught frozen object
        if (!isExtensible(it)) return 'F'; // not necessary to add metadata

        if (!create) return 'E'; // add missing metadata

        setMeta(it); // return object ID
      }

      return it[META].i;
    };

    var getWeak = function getWeak(it, create) {
      if (!_has(it, META)) {
        // can't set metadata to uncaught frozen object
        if (!isExtensible(it)) return true; // not necessary to add metadata

        if (!create) return false; // add missing metadata

        setMeta(it); // return hash weak collections IDs
      }

      return it[META].w;
    }; // add metadata on freeze-family methods calling


    var onFreeze = function onFreeze(it) {
      if (FREEZE && meta.NEED && isExtensible(it) && !_has(it, META)) setMeta(it);
      return it;
    };

    var meta = module.exports = {
      KEY: META,
      NEED: false,
      fastKey: fastKey,
      getWeak: getWeak,
      onFreeze: onFreeze
    };
  });
  var _meta_1 = _meta.KEY;
  var _meta_2 = _meta.NEED;
  var _meta_3 = _meta.fastKey;
  var _meta_4 = _meta.getWeak;
  var _meta_5 = _meta.onFreeze;

  var _wks = createCommonjsModule(function (module) {
    var store = _shared('wks');
    var Symbol = _global.Symbol;
    var USE_SYMBOL = typeof Symbol == 'function';

    var $exports = module.exports = function (name) {
      return store[name] || (store[name] = USE_SYMBOL && Symbol[name] || (USE_SYMBOL ? Symbol : _uid)('Symbol.' + name));
    };

    $exports.store = store;
  });

  var def = _objectDp.f;
  var TAG = _wks('toStringTag');

  var _setToStringTag = function _setToStringTag(it, tag, stat) {
    if (it && !_has(it = stat ? it : it.prototype, TAG)) def(it, TAG, {
      configurable: true,
      value: tag
    });
  };

  var f$1 = _wks;
  var _wksExt = {
    f: f$1
  };

  var defineProperty = _objectDp.f;

  var _wksDefine = function _wksDefine(name) {
    var $Symbol = _core.Symbol || (_core.Symbol =  _global.Symbol || {});
    if (name.charAt(0) != '_' && !(name in $Symbol)) defineProperty($Symbol, name, {
      value: _wksExt.f(name)
    });
  };

  var toString = {}.toString;

  var _cof = function _cof(it) {
    return toString.call(it).slice(8, -1);
  };

  // eslint-disable-next-line no-prototype-builtins

  var _iobject = Object('z').propertyIsEnumerable(0) ? Object : function (it) {
    return _cof(it) == 'String' ? it.split('') : Object(it);
  };

  // 7.2.1 RequireObjectCoercible(argument)
  var _defined = function _defined(it) {
    if (it == undefined) throw TypeError("Can't call method on  " + it);
    return it;
  };

  var _toIobject = function _toIobject(it) {
    return _iobject(_defined(it));
  };

  // 7.1.4 ToInteger
  var ceil = Math.ceil;
  var floor = Math.floor;

  var _toInteger = function _toInteger(it) {
    return isNaN(it = +it) ? 0 : (it > 0 ? floor : ceil)(it);
  };

  var min = Math.min;

  var _toLength = function _toLength(it) {
    return it > 0 ? min(_toInteger(it), 0x1fffffffffffff) : 0; // pow(2, 53) - 1 == 9007199254740991
  };

  var max = Math.max;
  var min$1 = Math.min;

  var _toAbsoluteIndex = function _toAbsoluteIndex(index, length) {
    index = _toInteger(index);
    return index < 0 ? max(index + length, 0) : min$1(index, length);
  };

  // true  -> Array#includes

  var _arrayIncludes = function _arrayIncludes(IS_INCLUDES) {
    return function ($this, el, fromIndex) {
      var O = _toIobject($this);
      var length = _toLength(O.length);
      var index = _toAbsoluteIndex(fromIndex, length);
      var value; // Array#includes uses SameValueZero equality algorithm
      // eslint-disable-next-line no-self-compare

      if (IS_INCLUDES && el != el) while (length > index) {
        value = O[index++]; // eslint-disable-next-line no-self-compare

        if (value != value) return true; // Array#indexOf ignores holes, Array#includes - not
      } else for (; length > index; index++) {
        if (IS_INCLUDES || index in O) {
          if (O[index] === el) return IS_INCLUDES || index || 0;
        }
      }
      return !IS_INCLUDES && -1;
    };
  };

  var shared = _shared('keys');

  var _sharedKey = function _sharedKey(key) {
    return shared[key] || (shared[key] = _uid(key));
  };

  var arrayIndexOf = _arrayIncludes(false);
  var IE_PROTO = _sharedKey('IE_PROTO');

  var _objectKeysInternal = function _objectKeysInternal(object, names) {
    var O = _toIobject(object);
    var i = 0;
    var result = [];
    var key;

    for (key in O) {
      if (key != IE_PROTO) _has(O, key) && result.push(key);
    } // Don't enum bug & hidden keys


    while (names.length > i) {
      if (_has(O, key = names[i++])) {
        ~arrayIndexOf(result, key) || result.push(key);
      }
    }

    return result;
  };

  // IE 8- don't enum bug keys
  var _enumBugKeys = 'constructor,hasOwnProperty,isPrototypeOf,propertyIsEnumerable,toLocaleString,toString,valueOf'.split(',');

  var _objectKeys = Object.keys || function keys(O) {
    return _objectKeysInternal(O, _enumBugKeys);
  };

  var f$2 = Object.getOwnPropertySymbols;
  var _objectGops = {
    f: f$2
  };

  var f$3 = {}.propertyIsEnumerable;
  var _objectPie = {
    f: f$3
  };

  var _enumKeys = function _enumKeys(it) {
    var result = _objectKeys(it);
    var getSymbols = _objectGops.f;

    if (getSymbols) {
      var symbols = getSymbols(it);
      var isEnum = _objectPie.f;
      var i = 0;
      var key;

      while (symbols.length > i) {
        if (isEnum.call(it, key = symbols[i++])) result.push(key);
      }
    }

    return result;
  };

  var _isArray = Array.isArray || function isArray(arg) {
    return _cof(arg) == 'Array';
  };

  var _toObject = function _toObject(it) {
    return Object(_defined(it));
  };

  var _objectDps = _descriptors ? Object.defineProperties : function defineProperties(O, Properties) {
    _anObject(O);
    var keys = _objectKeys(Properties);
    var length = keys.length;
    var i = 0;
    var P;

    while (length > i) {
      _objectDp.f(O, P = keys[i++], Properties[P]);
    }

    return O;
  };

  var document$2 = _global.document;

  var _html = document$2 && document$2.documentElement;

  var IE_PROTO$1 = _sharedKey('IE_PROTO');

  var Empty = function Empty() {
    /* empty */
  };

  var PROTOTYPE$1 = 'prototype'; // Create object with fake `null` prototype: use iframe Object with cleared prototype

  var _createDict = function createDict() {
    // Thrash, waste and sodomy: IE GC bug
    var iframe = _domCreate('iframe');
    var i = _enumBugKeys.length;
    var lt = '<';
    var gt = '>';
    var iframeDocument;
    iframe.style.display = 'none';
    _html.appendChild(iframe);
    iframe.src = 'javascript:'; // eslint-disable-line no-script-url
    // createDict = iframe.contentWindow.Object;
    // html.removeChild(iframe);

    iframeDocument = iframe.contentWindow.document;
    iframeDocument.open();
    iframeDocument.write(lt + 'script' + gt + 'document.F=Object' + lt + '/script' + gt);
    iframeDocument.close();
    _createDict = iframeDocument.F;

    while (i--) {
      delete _createDict[PROTOTYPE$1][_enumBugKeys[i]];
    }

    return _createDict();
  };

  var _objectCreate = Object.create || function create(O, Properties) {
    var result;

    if (O !== null) {
      Empty[PROTOTYPE$1] = _anObject(O);
      result = new Empty();
      Empty[PROTOTYPE$1] = null; // add "__proto__" for Object.getPrototypeOf polyfill

      result[IE_PROTO$1] = O;
    } else result = _createDict();

    return Properties === undefined ? result : _objectDps(result, Properties);
  };

  var hiddenKeys = _enumBugKeys.concat('length', 'prototype');

  var f$4 = Object.getOwnPropertyNames || function getOwnPropertyNames(O) {
    return _objectKeysInternal(O, hiddenKeys);
  };

  var _objectGopn = {
    f: f$4
  };

  var gOPN = _objectGopn.f;
  var toString$1 = {}.toString;
  var windowNames = typeof window == 'object' && window && Object.getOwnPropertyNames ? Object.getOwnPropertyNames(window) : [];

  var getWindowNames = function getWindowNames(it) {
    try {
      return gOPN(it);
    } catch (e) {
      return windowNames.slice();
    }
  };

  var f$5 = function getOwnPropertyNames(it) {
    return windowNames && toString$1.call(it) == '[object Window]' ? getWindowNames(it) : gOPN(_toIobject(it));
  };

  var _objectGopnExt = {
    f: f$5
  };

  var gOPD = Object.getOwnPropertyDescriptor;
  var f$6 = _descriptors ? gOPD : function getOwnPropertyDescriptor(O, P) {
    O = _toIobject(O);
    P = _toPrimitive(P, true);
    if (_ie8DomDefine) try {
      return gOPD(O, P);
    } catch (e) {
      /* empty */
    }
    if (_has(O, P)) return _propertyDesc(!_objectPie.f.call(O, P), O[P]);
  };
  var _objectGopd = {
    f: f$6
  };

  var META = _meta.KEY;
  var gOPD$1 = _objectGopd.f;
  var dP$1 = _objectDp.f;
  var gOPN$1 = _objectGopnExt.f;
  var $Symbol = _global.Symbol;
  var $JSON = _global.JSON;

  var _stringify = $JSON && $JSON.stringify;

  var PROTOTYPE$2 = 'prototype';
  var HIDDEN = _wks('_hidden');
  var TO_PRIMITIVE = _wks('toPrimitive');
  var isEnum = {}.propertyIsEnumerable;
  var SymbolRegistry = _shared('symbol-registry');
  var AllSymbols = _shared('symbols');
  var OPSymbols = _shared('op-symbols');
  var ObjectProto = Object[PROTOTYPE$2];
  var USE_NATIVE = typeof $Symbol == 'function' && !!_objectGops.f;
  var QObject = _global.QObject; // Don't use setters in Qt Script, https://github.com/zloirock/core-js/issues/173

  var setter = !QObject || !QObject[PROTOTYPE$2] || !QObject[PROTOTYPE$2].findChild; // fallback for old Android, https://code.google.com/p/v8/issues/detail?id=687

  var setSymbolDesc = _descriptors && _fails(function () {
    return _objectCreate(dP$1({}, 'a', {
      get: function get() {
        return dP$1(this, 'a', {
          value: 7
        }).a;
      }
    })).a != 7;
  }) ? function (it, key, D) {
    var protoDesc = gOPD$1(ObjectProto, key);
    if (protoDesc) delete ObjectProto[key];
    dP$1(it, key, D);
    if (protoDesc && it !== ObjectProto) dP$1(ObjectProto, key, protoDesc);
  } : dP$1;

  var wrap = function wrap(tag) {
    var sym = AllSymbols[tag] = _objectCreate($Symbol[PROTOTYPE$2]);

    sym._k = tag;
    return sym;
  };

  var isSymbol = USE_NATIVE && typeof $Symbol.iterator == 'symbol' ? function (it) {
    return typeof it == 'symbol';
  } : function (it) {
    return it instanceof $Symbol;
  };

  var $defineProperty = function defineProperty(it, key, D) {
    if (it === ObjectProto) $defineProperty(OPSymbols, key, D);
    _anObject(it);
    key = _toPrimitive(key, true);
    _anObject(D);

    if (_has(AllSymbols, key)) {
      if (!D.enumerable) {
        if (!_has(it, HIDDEN)) dP$1(it, HIDDEN, _propertyDesc(1, {}));
        it[HIDDEN][key] = true;
      } else {
        if (_has(it, HIDDEN) && it[HIDDEN][key]) it[HIDDEN][key] = false;
        D = _objectCreate(D, {
          enumerable: _propertyDesc(0, false)
        });
      }

      return setSymbolDesc(it, key, D);
    }

    return dP$1(it, key, D);
  };

  var $defineProperties = function defineProperties(it, P) {
    _anObject(it);
    var keys = _enumKeys(P = _toIobject(P));
    var i = 0;
    var l = keys.length;
    var key;

    while (l > i) {
      $defineProperty(it, key = keys[i++], P[key]);
    }

    return it;
  };

  var $create = function create(it, P) {
    return P === undefined ? _objectCreate(it) : $defineProperties(_objectCreate(it), P);
  };

  var $propertyIsEnumerable = function propertyIsEnumerable(key) {
    var E = isEnum.call(this, key = _toPrimitive(key, true));
    if (this === ObjectProto && _has(AllSymbols, key) && !_has(OPSymbols, key)) return false;
    return E || !_has(this, key) || !_has(AllSymbols, key) || _has(this, HIDDEN) && this[HIDDEN][key] ? E : true;
  };

  var $getOwnPropertyDescriptor = function getOwnPropertyDescriptor(it, key) {
    it = _toIobject(it);
    key = _toPrimitive(key, true);
    if (it === ObjectProto && _has(AllSymbols, key) && !_has(OPSymbols, key)) return;
    var D = gOPD$1(it, key);
    if (D && _has(AllSymbols, key) && !(_has(it, HIDDEN) && it[HIDDEN][key])) D.enumerable = true;
    return D;
  };

  var $getOwnPropertyNames = function getOwnPropertyNames(it) {
    var names = gOPN$1(_toIobject(it));
    var result = [];
    var i = 0;
    var key;

    while (names.length > i) {
      if (!_has(AllSymbols, key = names[i++]) && key != HIDDEN && key != META) result.push(key);
    }

    return result;
  };

  var $getOwnPropertySymbols = function getOwnPropertySymbols(it) {
    var IS_OP = it === ObjectProto;
    var names = gOPN$1(IS_OP ? OPSymbols : _toIobject(it));
    var result = [];
    var i = 0;
    var key;

    while (names.length > i) {
      if (_has(AllSymbols, key = names[i++]) && (IS_OP ? _has(ObjectProto, key) : true)) result.push(AllSymbols[key]);
    }

    return result;
  }; // 19.4.1.1 Symbol([description])


  if (!USE_NATIVE) {
    $Symbol = function Symbol() {
      if (this instanceof $Symbol) throw TypeError('Symbol is not a constructor!');
      var tag = _uid(arguments.length > 0 ? arguments[0] : undefined);

      var $set = function $set(value) {
        if (this === ObjectProto) $set.call(OPSymbols, value);
        if (_has(this, HIDDEN) && _has(this[HIDDEN], tag)) this[HIDDEN][tag] = false;
        setSymbolDesc(this, tag, _propertyDesc(1, value));
      };

      if (_descriptors && setter) setSymbolDesc(ObjectProto, tag, {
        configurable: true,
        set: $set
      });
      return wrap(tag);
    };

    _redefine($Symbol[PROTOTYPE$2], 'toString', function toString() {
      return this._k;
    });
    _objectGopd.f = $getOwnPropertyDescriptor;
    _objectDp.f = $defineProperty;
    _objectGopn.f = _objectGopnExt.f = $getOwnPropertyNames;
    _objectPie.f = $propertyIsEnumerable;
    _objectGops.f = $getOwnPropertySymbols;

    if (_descriptors && !_library) {
      _redefine(ObjectProto, 'propertyIsEnumerable', $propertyIsEnumerable, true);
    }

    _wksExt.f = function (name) {
      return wrap(_wks(name));
    };
  }

  _export(_export.G + _export.W + _export.F * !USE_NATIVE, {
    Symbol: $Symbol
  });

  for (var es6Symbols = // 19.4.2.2, 19.4.2.3, 19.4.2.4, 19.4.2.6, 19.4.2.8, 19.4.2.9, 19.4.2.10, 19.4.2.11, 19.4.2.12, 19.4.2.13, 19.4.2.14
  'hasInstance,isConcatSpreadable,iterator,match,replace,search,species,split,toPrimitive,toStringTag,unscopables'.split(','), j = 0; es6Symbols.length > j;) {
    _wks(es6Symbols[j++]);
  }

  for (var wellKnownSymbols = _objectKeys(_wks.store), k = 0; wellKnownSymbols.length > k;) {
    _wksDefine(wellKnownSymbols[k++]);
  }

  _export(_export.S + _export.F * !USE_NATIVE, 'Symbol', {
    // 19.4.2.1 Symbol.for(key)
    'for': function _for(key) {
      return _has(SymbolRegistry, key += '') ? SymbolRegistry[key] : SymbolRegistry[key] = $Symbol(key);
    },
    // 19.4.2.5 Symbol.keyFor(sym)
    keyFor: function keyFor(sym) {
      if (!isSymbol(sym)) throw TypeError(sym + ' is not a symbol!');

      for (var key in SymbolRegistry) {
        if (SymbolRegistry[key] === sym) return key;
      }
    },
    useSetter: function useSetter() {
      setter = true;
    },
    useSimple: function useSimple() {
      setter = false;
    }
  });
  _export(_export.S + _export.F * !USE_NATIVE, 'Object', {
    // 19.1.2.2 Object.create(O [, Properties])
    create: $create,
    // 19.1.2.4 Object.defineProperty(O, P, Attributes)
    defineProperty: $defineProperty,
    // 19.1.2.3 Object.defineProperties(O, Properties)
    defineProperties: $defineProperties,
    // 19.1.2.6 Object.getOwnPropertyDescriptor(O, P)
    getOwnPropertyDescriptor: $getOwnPropertyDescriptor,
    // 19.1.2.7 Object.getOwnPropertyNames(O)
    getOwnPropertyNames: $getOwnPropertyNames,
    // 19.1.2.8 Object.getOwnPropertySymbols(O)
    getOwnPropertySymbols: $getOwnPropertySymbols
  }); // Chrome 38 and 39 `Object.getOwnPropertySymbols` fails on primitives
  // https://bugs.chromium.org/p/v8/issues/detail?id=3443

  var FAILS_ON_PRIMITIVES = _fails(function () {
    _objectGops.f(1);
  });
  _export(_export.S + _export.F * FAILS_ON_PRIMITIVES, 'Object', {
    getOwnPropertySymbols: function getOwnPropertySymbols(it) {
      return _objectGops.f(_toObject(it));
    }
  }); // 24.3.2 JSON.stringify(value [, replacer [, space]])

  $JSON && _export(_export.S + _export.F * (!USE_NATIVE || _fails(function () {
    var S = $Symbol(); // MS Edge converts symbol values to JSON as {}
    // WebKit converts symbol values to JSON as null
    // V8 throws on boxed symbols

    return _stringify([S]) != '[null]' || _stringify({
      a: S
    }) != '{}' || _stringify(Object(S)) != '{}';
  })), 'JSON', {
    stringify: function stringify(it) {
      var args = [it];
      var i = 1;
      var replacer, $replacer;

      while (arguments.length > i) {
        args.push(arguments[i++]);
      }

      $replacer = replacer = args[1];
      if (!_isObject(replacer) && it === undefined || isSymbol(it)) return; // IE8 returns string on undefined

      if (!_isArray(replacer)) replacer = function replacer(key, value) {
        if (typeof $replacer == 'function') value = $replacer.call(this, key, value);
        if (!isSymbol(value)) return value;
      };
      args[1] = replacer;
      return _stringify.apply($JSON, args);
    }
  }); // 19.4.3.4 Symbol.prototype[@@toPrimitive](hint)

  $Symbol[PROTOTYPE$2][TO_PRIMITIVE] || _hide($Symbol[PROTOTYPE$2], TO_PRIMITIVE, $Symbol[PROTOTYPE$2].valueOf); // 19.4.3.5 Symbol.prototype[@@toStringTag]

  _setToStringTag($Symbol, 'Symbol'); // 20.2.1.9 Math[@@toStringTag]

  _setToStringTag(Math, 'Math', true); // 24.3.3 JSON[@@toStringTag]

  _setToStringTag(_global.JSON, 'JSON', true);

  _export(_export.S, 'Object', {
    create: _objectCreate
  });

  _export(_export.S + _export.F * !_descriptors, 'Object', {
    defineProperty: _objectDp.f
  });

  _export(_export.S + _export.F * !_descriptors, 'Object', {
    defineProperties: _objectDps
  });

  var _objectSap = function _objectSap(KEY, exec) {
    var fn = (_core.Object || {})[KEY] || Object[KEY];
    var exp = {};
    exp[KEY] = exec(fn);
    _export(_export.S + _export.F * _fails(function () {
      fn(1);
    }), 'Object', exp);
  };

  var $getOwnPropertyDescriptor$1 = _objectGopd.f;
  _objectSap('getOwnPropertyDescriptor', function () {
    return function getOwnPropertyDescriptor(it, key) {
      return $getOwnPropertyDescriptor$1(_toIobject(it), key);
    };
  });

  var IE_PROTO$2 = _sharedKey('IE_PROTO');
  var ObjectProto$1 = Object.prototype;

  var _objectGpo = Object.getPrototypeOf || function (O) {
    O = _toObject(O);
    if (_has(O, IE_PROTO$2)) return O[IE_PROTO$2];

    if (typeof O.constructor == 'function' && O instanceof O.constructor) {
      return O.constructor.prototype;
    }

    return O instanceof Object ? ObjectProto$1 : null;
  };

  _objectSap('getPrototypeOf', function () {
    return function getPrototypeOf(it) {
      return _objectGpo(_toObject(it));
    };
  });

  _objectSap('keys', function () {
    return function keys(it) {
      return _objectKeys(_toObject(it));
    };
  });

  _objectSap('getOwnPropertyNames', function () {
    return _objectGopnExt.f;
  });

  var meta = _meta.onFreeze;
  _objectSap('freeze', function ($freeze) {
    return function freeze(it) {
      return $freeze && _isObject(it) ? $freeze(meta(it)) : it;
    };
  });

  var meta$1 = _meta.onFreeze;
  _objectSap('seal', function ($seal) {
    return function seal(it) {
      return $seal && _isObject(it) ? $seal(meta$1(it)) : it;
    };
  });

  var meta$2 = _meta.onFreeze;
  _objectSap('preventExtensions', function ($preventExtensions) {
    return function preventExtensions(it) {
      return $preventExtensions && _isObject(it) ? $preventExtensions(meta$2(it)) : it;
    };
  });

  _objectSap('isFrozen', function ($isFrozen) {
    return function isFrozen(it) {
      return _isObject(it) ? $isFrozen ? $isFrozen(it) : false : true;
    };
  });

  _objectSap('isSealed', function ($isSealed) {
    return function isSealed(it) {
      return _isObject(it) ? $isSealed ? $isSealed(it) : false : true;
    };
  });

  _objectSap('isExtensible', function ($isExtensible) {
    return function isExtensible(it) {
      return _isObject(it) ? $isExtensible ? $isExtensible(it) : true : false;
    };
  });

  var $assign = Object.assign; // should work with symbols and should have deterministic property order (V8 bug)

  var _objectAssign = !$assign || _fails(function () {
    var A = {};
    var B = {}; // eslint-disable-next-line no-undef

    var S = Symbol();
    var K = 'abcdefghijklmnopqrst';
    A[S] = 7;
    K.split('').forEach(function (k) {
      B[k] = k;
    });
    return $assign({}, A)[S] != 7 || Object.keys($assign({}, B)).join('') != K;
  }) ? function assign(target, source) {
    // eslint-disable-line no-unused-vars
    var T = _toObject(target);
    var aLen = arguments.length;
    var index = 1;
    var getSymbols = _objectGops.f;
    var isEnum = _objectPie.f;

    while (aLen > index) {
      var S = _iobject(arguments[index++]);
      var keys = getSymbols ? _objectKeys(S).concat(getSymbols(S)) : _objectKeys(S);
      var length = keys.length;
      var j = 0;
      var key;

      while (length > j) {
        key = keys[j++];
        if (!_descriptors || isEnum.call(S, key)) T[key] = S[key];
      }
    }

    return T;
  } : $assign;

  _export(_export.S + _export.F, 'Object', {
    assign: _objectAssign
  });

  // 7.2.9 SameValue(x, y)
  var _sameValue = Object.is || function is(x, y) {
    // eslint-disable-next-line no-self-compare
    return x === y ? x !== 0 || 1 / x === 1 / y : x != x && y != y;
  };

  _export(_export.S, 'Object', {
    is: _sameValue
  });

  /* eslint-disable no-proto */

  var check = function check(O, proto) {
    _anObject(O);
    if (!_isObject(proto) && proto !== null) throw TypeError(proto + ": can't set as prototype!");
  };

  var _setProto = {
    set: Object.setPrototypeOf || ('__proto__' in {} ? // eslint-disable-line
    function (test, buggy, set) {
      try {
        set = _ctx(Function.call, _objectGopd.f(Object.prototype, '__proto__').set, 2);
        set(test, []);
        buggy = !(test instanceof Array);
      } catch (e) {
        buggy = true;
      }

      return function setPrototypeOf(O, proto) {
        check(O, proto);
        if (buggy) O.__proto__ = proto;else set(O, proto);
        return O;
      };
    }({}, false) : undefined),
    check: check
  };

  _export(_export.S, 'Object', {
    setPrototypeOf: _setProto.set
  });

  var TAG$1 = _wks('toStringTag'); // ES3 wrong here

  var ARG = _cof(function () {
    return arguments;
  }()) == 'Arguments'; // fallback for IE11 Script Access Denied error

  var tryGet = function tryGet(it, key) {
    try {
      return it[key];
    } catch (e) {
      /* empty */
    }
  };

  var _classof = function _classof(it) {
    var O, T, B;
    return it === undefined ? 'Undefined' : it === null ? 'Null' // @@toStringTag case
    : typeof (T = tryGet(O = Object(it), TAG$1)) == 'string' ? T // builtinTag case
    : ARG ? _cof(O) // ES3 arguments fallback
    : (B = _cof(O)) == 'Object' && typeof O.callee == 'function' ? 'Arguments' : B;
  };

  var test = {};
  test[_wks('toStringTag')] = 'z';

  if (test + '' != '[object z]') {
    _redefine(Object.prototype, 'toString', function toString() {
      return '[object ' + _classof(this) + ']';
    }, true);
  }

  // fast apply, http://jsperf.lnkit.com/fast-apply/5
  var _invoke = function _invoke(fn, args, that) {
    var un = that === undefined;

    switch (args.length) {
      case 0:
        return un ? fn() : fn.call(that);

      case 1:
        return un ? fn(args[0]) : fn.call(that, args[0]);

      case 2:
        return un ? fn(args[0], args[1]) : fn.call(that, args[0], args[1]);

      case 3:
        return un ? fn(args[0], args[1], args[2]) : fn.call(that, args[0], args[1], args[2]);

      case 4:
        return un ? fn(args[0], args[1], args[2], args[3]) : fn.call(that, args[0], args[1], args[2], args[3]);
    }

    return fn.apply(that, args);
  };

  var arraySlice = [].slice;
  var factories = {};

  var construct = function construct(F, len, args) {
    if (!(len in factories)) {
      for (var n = [], i = 0; i < len; i++) {
        n[i] = 'a[' + i + ']';
      } // eslint-disable-next-line no-new-func


      factories[len] = Function('F,a', 'return new F(' + n.join(',') + ')');
    }

    return factories[len](F, args);
  };

  var _bind = Function.bind || function bind(that
  /* , ...args */
  ) {
    var fn = _aFunction(this);
    var partArgs = arraySlice.call(arguments, 1);

    var bound = function bound()
    /* args... */
    {
      var args = partArgs.concat(arraySlice.call(arguments));
      return this instanceof bound ? construct(fn, args.length, args) : _invoke(fn, args, that);
    };

    if (_isObject(fn.prototype)) bound.prototype = fn.prototype;
    return bound;
  };

  _export(_export.P, 'Function', {
    bind: _bind
  });

  var dP$2 = _objectDp.f;
  var FProto = Function.prototype;
  var nameRE = /^\s*function ([^ (]*)/;
  var NAME = 'name'; // 19.2.4.2 name

  NAME in FProto || _descriptors && dP$2(FProto, NAME, {
    configurable: true,
    get: function get() {
      try {
        return ('' + this).match(nameRE)[1];
      } catch (e) {
        return '';
      }
    }
  });

  var HAS_INSTANCE = _wks('hasInstance');
  var FunctionProto = Function.prototype; // 19.2.3.6 Function.prototype[@@hasInstance](V)

  if (!(HAS_INSTANCE in FunctionProto)) _objectDp.f(FunctionProto, HAS_INSTANCE, {
    value: function value(O) {
      if (typeof this != 'function' || !_isObject(O)) return false;
      if (!_isObject(this.prototype)) return O instanceof this; // for environment w/o native `@@hasInstance` logic enough `instanceof`, but add this:

      while (O = _objectGpo(O)) {
        if (this.prototype === O) return true;
      }

      return false;
    }
  });

  var _stringWs = '\x09\x0A\x0B\x0C\x0D\x20\xA0\u1680\u180E\u2000\u2001\u2002\u2003' + '\u2004\u2005\u2006\u2007\u2008\u2009\u200A\u202F\u205F\u3000\u2028\u2029\uFEFF';

  var space = '[' + _stringWs + ']';
  var non = '\u200b\u0085';
  var ltrim = RegExp('^' + space + space + '*');
  var rtrim = RegExp(space + space + '*$');

  var exporter = function exporter(KEY, exec, ALIAS) {
    var exp = {};
    var FORCE = _fails(function () {
      return !!_stringWs[KEY]() || non[KEY]() != non;
    });
    var fn = exp[KEY] = FORCE ? exec(trim) : _stringWs[KEY];
    if (ALIAS) exp[ALIAS] = fn;
    _export(_export.P + _export.F * FORCE, 'String', exp);
  }; // 1 -> String#trimLeft
  // 2 -> String#trimRight
  // 3 -> String#trim


  var trim = exporter.trim = function (string, TYPE) {
    string = String(_defined(string));
    if (TYPE & 1) string = string.replace(ltrim, '');
    if (TYPE & 2) string = string.replace(rtrim, '');
    return string;
  };

  var _stringTrim = exporter;

  var $parseInt = _global.parseInt;
  var $trim = _stringTrim.trim;
  var hex = /^[-+]?0[xX]/;

  var _parseInt = $parseInt(_stringWs + '08') !== 8 || $parseInt(_stringWs + '0x16') !== 22 ? function parseInt(str, radix) {
    var string = $trim(String(str), 3);
    return $parseInt(string, radix >>> 0 || (hex.test(string) ? 16 : 10));
  } : $parseInt;

  _export(_export.G + _export.F * (parseInt != _parseInt), {
    parseInt: _parseInt
  });

  var $parseFloat = _global.parseFloat;
  var $trim$1 = _stringTrim.trim;

  var _parseFloat = 1 / $parseFloat(_stringWs + '-0') !== -Infinity ? function parseFloat(str) {
    var string = $trim$1(String(str), 3);
    var result = $parseFloat(string);
    return result === 0 && string.charAt(0) == '-' ? -0 : result;
  } : $parseFloat;

  _export(_export.G + _export.F * (parseFloat != _parseFloat), {
    parseFloat: _parseFloat
  });

  var setPrototypeOf = _setProto.set;

  var _inheritIfRequired = function _inheritIfRequired(that, target, C) {
    var S = target.constructor;
    var P;

    if (S !== C && typeof S == 'function' && (P = S.prototype) !== C.prototype && _isObject(P) && setPrototypeOf) {
      setPrototypeOf(that, P);
    }

    return that;
  };

  var gOPN$2 = _objectGopn.f;
  var gOPD$2 = _objectGopd.f;
  var dP$3 = _objectDp.f;
  var $trim$2 = _stringTrim.trim;
  var NUMBER = 'Number';
  var $Number = _global[NUMBER];
  var Base = $Number;
  var proto = $Number.prototype; // Opera ~12 has broken Object#toString

  var BROKEN_COF = _cof(_objectCreate(proto)) == NUMBER;
  var TRIM = ('trim' in String.prototype); // 7.1.3 ToNumber(argument)

  var toNumber = function toNumber(argument) {
    var it = _toPrimitive(argument, false);

    if (typeof it == 'string' && it.length > 2) {
      it = TRIM ? it.trim() : $trim$2(it, 3);
      var first = it.charCodeAt(0);
      var third, radix, maxCode;

      if (first === 43 || first === 45) {
        third = it.charCodeAt(2);
        if (third === 88 || third === 120) return NaN; // Number('+0x1') should be NaN, old V8 fix
      } else if (first === 48) {
        switch (it.charCodeAt(1)) {
          case 66:
          case 98:
            radix = 2;
            maxCode = 49;
            break;
          // fast equal /^0b[01]+$/i

          case 79:
          case 111:
            radix = 8;
            maxCode = 55;
            break;
          // fast equal /^0o[0-7]+$/i

          default:
            return +it;
        }

        for (var digits = it.slice(2), i = 0, l = digits.length, code; i < l; i++) {
          code = digits.charCodeAt(i); // parseInt parses a string to a first unavailable symbol
          // but ToNumber should return NaN if a string contains unavailable symbols

          if (code < 48 || code > maxCode) return NaN;
        }

        return parseInt(digits, radix);
      }
    }

    return +it;
  };

  if (!$Number(' 0o1') || !$Number('0b1') || $Number('+0x1')) {
    $Number = function Number(value) {
      var it = arguments.length < 1 ? 0 : value;
      var that = this;
      return that instanceof $Number // check on 1..constructor(foo) case
      && (BROKEN_COF ? _fails(function () {
        proto.valueOf.call(that);
      }) : _cof(that) != NUMBER) ? _inheritIfRequired(new Base(toNumber(it)), that, $Number) : toNumber(it);
    };

    for (var keys = _descriptors ? gOPN$2(Base) : ( // ES3:
    'MAX_VALUE,MIN_VALUE,NaN,NEGATIVE_INFINITY,POSITIVE_INFINITY,' + // ES6 (in case, if modules with ES6 Number statics required before):
    'EPSILON,isFinite,isInteger,isNaN,isSafeInteger,MAX_SAFE_INTEGER,' + 'MIN_SAFE_INTEGER,parseFloat,parseInt,isInteger').split(','), j$1 = 0, key; keys.length > j$1; j$1++) {
      if (_has(Base, key = keys[j$1]) && !_has($Number, key)) {
        dP$3($Number, key, gOPD$2(Base, key));
      }
    }

    $Number.prototype = proto;
    proto.constructor = $Number;
    _redefine(_global, NUMBER, $Number);
  }

  var _aNumberValue = function _aNumberValue(it, msg) {
    if (typeof it != 'number' && _cof(it) != 'Number') throw TypeError(msg);
    return +it;
  };

  var _stringRepeat = function repeat(count) {
    var str = String(_defined(this));
    var res = '';
    var n = _toInteger(count);
    if (n < 0 || n == Infinity) throw RangeError("Count can't be negative");

    for (; n > 0; (n >>>= 1) && (str += str)) {
      if (n & 1) res += str;
    }

    return res;
  };

  var $toFixed = 1.0.toFixed;
  var floor$1 = Math.floor;
  var data = [0, 0, 0, 0, 0, 0];
  var ERROR = 'Number.toFixed: incorrect invocation!';
  var ZERO = '0';

  var multiply = function multiply(n, c) {
    var i = -1;
    var c2 = c;

    while (++i < 6) {
      c2 += n * data[i];
      data[i] = c2 % 1e7;
      c2 = floor$1(c2 / 1e7);
    }
  };

  var divide = function divide(n) {
    var i = 6;
    var c = 0;

    while (--i >= 0) {
      c += data[i];
      data[i] = floor$1(c / n);
      c = c % n * 1e7;
    }
  };

  var numToString = function numToString() {
    var i = 6;
    var s = '';

    while (--i >= 0) {
      if (s !== '' || i === 0 || data[i] !== 0) {
        var t = String(data[i]);
        s = s === '' ? t : s + _stringRepeat.call(ZERO, 7 - t.length) + t;
      }
    }

    return s;
  };

  var pow = function pow(x, n, acc) {
    return n === 0 ? acc : n % 2 === 1 ? pow(x, n - 1, acc * x) : pow(x * x, n / 2, acc);
  };

  var log = function log(x) {
    var n = 0;
    var x2 = x;

    while (x2 >= 4096) {
      n += 12;
      x2 /= 4096;
    }

    while (x2 >= 2) {
      n += 1;
      x2 /= 2;
    }

    return n;
  };

  _export(_export.P + _export.F * (!!$toFixed && (0.00008.toFixed(3) !== '0.000' || 0.9.toFixed(0) !== '1' || 1.255.toFixed(2) !== '1.25' || 1000000000000000128.0.toFixed(0) !== '1000000000000000128') || !_fails(function () {
    // V8 ~ Android 4.3-
    $toFixed.call({});
  })), 'Number', {
    toFixed: function toFixed(fractionDigits) {
      var x = _aNumberValue(this, ERROR);
      var f = _toInteger(fractionDigits);
      var s = '';
      var m = ZERO;
      var e, z, j, k;
      if (f < 0 || f > 20) throw RangeError(ERROR); // eslint-disable-next-line no-self-compare

      if (x != x) return 'NaN';
      if (x <= -1e21 || x >= 1e21) return String(x);

      if (x < 0) {
        s = '-';
        x = -x;
      }

      if (x > 1e-21) {
        e = log(x * pow(2, 69, 1)) - 69;
        z = e < 0 ? x * pow(2, -e, 1) : x / pow(2, e, 1);
        z *= 0x10000000000000;
        e = 52 - e;

        if (e > 0) {
          multiply(0, z);
          j = f;

          while (j >= 7) {
            multiply(1e7, 0);
            j -= 7;
          }

          multiply(pow(10, j, 1), 0);
          j = e - 1;

          while (j >= 23) {
            divide(1 << 23);
            j -= 23;
          }

          divide(1 << j);
          multiply(1, 1);
          divide(2);
          m = numToString();
        } else {
          multiply(0, z);
          multiply(1 << -e, 0);
          m = numToString() + _stringRepeat.call(ZERO, f);
        }
      }

      if (f > 0) {
        k = m.length;
        m = s + (k <= f ? '0.' + _stringRepeat.call(ZERO, f - k) + m : m.slice(0, k - f) + '.' + m.slice(k - f));
      } else {
        m = s + m;
      }

      return m;
    }
  });

  var $toPrecision = 1.0.toPrecision;
  _export(_export.P + _export.F * (_fails(function () {
    // IE7-
    return $toPrecision.call(1, undefined) !== '1';
  }) || !_fails(function () {
    // V8 ~ Android 4.3-
    $toPrecision.call({});
  })), 'Number', {
    toPrecision: function toPrecision(precision) {
      var that = _aNumberValue(this, 'Number#toPrecision: incorrect invocation!');
      return precision === undefined ? $toPrecision.call(that) : $toPrecision.call(that, precision);
    }
  });

  _export(_export.S, 'Number', {
    EPSILON: Math.pow(2, -52)
  });

  var _isFinite = _global.isFinite;
  _export(_export.S, 'Number', {
    isFinite: function isFinite(it) {
      return typeof it == 'number' && _isFinite(it);
    }
  });

  var floor$2 = Math.floor;

  var _isInteger = function isInteger(it) {
    return !_isObject(it) && isFinite(it) && floor$2(it) === it;
  };

  _export(_export.S, 'Number', {
    isInteger: _isInteger
  });

  _export(_export.S, 'Number', {
    isNaN: function isNaN(number) {
      // eslint-disable-next-line no-self-compare
      return number != number;
    }
  });

  var abs = Math.abs;
  _export(_export.S, 'Number', {
    isSafeInteger: function isSafeInteger(number) {
      return _isInteger(number) && abs(number) <= 0x1fffffffffffff;
    }
  });

  _export(_export.S, 'Number', {
    MAX_SAFE_INTEGER: 0x1fffffffffffff
  });

  _export(_export.S, 'Number', {
    MIN_SAFE_INTEGER: -0x1fffffffffffff
  });

  _export(_export.S + _export.F * (Number.parseFloat != _parseFloat), 'Number', {
    parseFloat: _parseFloat
  });

  _export(_export.S + _export.F * (Number.parseInt != _parseInt), 'Number', {
    parseInt: _parseInt
  });

  // 20.2.2.20 Math.log1p(x)
  var _mathLog1p = Math.log1p || function log1p(x) {
    return (x = +x) > -1e-8 && x < 1e-8 ? x - x * x / 2 : Math.log(1 + x);
  };

  var sqrt = Math.sqrt;
  var $acosh = Math.acosh;
  _export(_export.S + _export.F * !($acosh // V8 bug: https://code.google.com/p/v8/issues/detail?id=3509
  && Math.floor($acosh(Number.MAX_VALUE)) == 710 // Tor Browser bug: Math.acosh(Infinity) -> NaN
  && $acosh(Infinity) == Infinity), 'Math', {
    acosh: function acosh(x) {
      return (x = +x) < 1 ? NaN : x > 94906265.62425156 ? Math.log(x) + Math.LN2 : _mathLog1p(x - 1 + sqrt(x - 1) * sqrt(x + 1));
    }
  });

  var $asinh = Math.asinh;

  function asinh(x) {
    return !isFinite(x = +x) || x == 0 ? x : x < 0 ? -asinh(-x) : Math.log(x + Math.sqrt(x * x + 1));
  } // Tor Browser bug: Math.asinh(0) -> -0


  _export(_export.S + _export.F * !($asinh && 1 / $asinh(0) > 0), 'Math', {
    asinh: asinh
  });

  var $atanh = Math.atanh; // Tor Browser bug: Math.atanh(-0) -> 0

  _export(_export.S + _export.F * !($atanh && 1 / $atanh(-0) < 0), 'Math', {
    atanh: function atanh(x) {
      return (x = +x) == 0 ? x : Math.log((1 + x) / (1 - x)) / 2;
    }
  });

  // 20.2.2.28 Math.sign(x)
  var _mathSign = Math.sign || function sign(x) {
    // eslint-disable-next-line no-self-compare
    return (x = +x) == 0 || x != x ? x : x < 0 ? -1 : 1;
  };

  _export(_export.S, 'Math', {
    cbrt: function cbrt(x) {
      return _mathSign(x = +x) * Math.pow(Math.abs(x), 1 / 3);
    }
  });

  _export(_export.S, 'Math', {
    clz32: function clz32(x) {
      return (x >>>= 0) ? 31 - Math.floor(Math.log(x + 0.5) * Math.LOG2E) : 32;
    }
  });

  var exp = Math.exp;
  _export(_export.S, 'Math', {
    cosh: function cosh(x) {
      return (exp(x = +x) + exp(-x)) / 2;
    }
  });

  // 20.2.2.14 Math.expm1(x)
  var $expm1 = Math.expm1;

  var _mathExpm1 = !$expm1 // Old FF bug
  || $expm1(10) > 22025.465794806719 || $expm1(10) < 22025.4657948067165168 // Tor Browser bug
  || $expm1(-2e-17) != -2e-17 ? function expm1(x) {
    return (x = +x) == 0 ? x : x > -1e-6 && x < 1e-6 ? x + x * x / 2 : Math.exp(x) - 1;
  } : $expm1;

  _export(_export.S + _export.F * (_mathExpm1 != Math.expm1), 'Math', {
    expm1: _mathExpm1
  });

  var pow$1 = Math.pow;
  var EPSILON = pow$1(2, -52);
  var EPSILON32 = pow$1(2, -23);
  var MAX32 = pow$1(2, 127) * (2 - EPSILON32);
  var MIN32 = pow$1(2, -126);

  var roundTiesToEven = function roundTiesToEven(n) {
    return n + 1 / EPSILON - 1 / EPSILON;
  };

  var _mathFround = Math.fround || function fround(x) {
    var $abs = Math.abs(x);
    var $sign = _mathSign(x);
    var a, result;
    if ($abs < MIN32) return $sign * roundTiesToEven($abs / MIN32 / EPSILON32) * MIN32 * EPSILON32;
    a = (1 + EPSILON32 / EPSILON) * $abs;
    result = a - (a - $abs); // eslint-disable-next-line no-self-compare

    if (result > MAX32 || result != result) return $sign * Infinity;
    return $sign * result;
  };

  _export(_export.S, 'Math', {
    fround: _mathFround
  });

  var abs$1 = Math.abs;
  _export(_export.S, 'Math', {
    hypot: function hypot(value1, value2) {
      // eslint-disable-line no-unused-vars
      var sum = 0;
      var i = 0;
      var aLen = arguments.length;
      var larg = 0;
      var arg, div;

      while (i < aLen) {
        arg = abs$1(arguments[i++]);

        if (larg < arg) {
          div = larg / arg;
          sum = sum * div * div + 1;
          larg = arg;
        } else if (arg > 0) {
          div = arg / larg;
          sum += div * div;
        } else sum += arg;
      }

      return larg === Infinity ? Infinity : larg * Math.sqrt(sum);
    }
  });

  var $imul = Math.imul; // some WebKit versions fails with big numbers, some has wrong arity

  _export(_export.S + _export.F * _fails(function () {
    return $imul(0xffffffff, 5) != -5 || $imul.length != 2;
  }), 'Math', {
    imul: function imul(x, y) {
      var UINT16 = 0xffff;
      var xn = +x;
      var yn = +y;
      var xl = UINT16 & xn;
      var yl = UINT16 & yn;
      return 0 | xl * yl + ((UINT16 & xn >>> 16) * yl + xl * (UINT16 & yn >>> 16) << 16 >>> 0);
    }
  });

  _export(_export.S, 'Math', {
    log10: function log10(x) {
      return Math.log(x) * Math.LOG10E;
    }
  });

  _export(_export.S, 'Math', {
    log1p: _mathLog1p
  });

  _export(_export.S, 'Math', {
    log2: function log2(x) {
      return Math.log(x) / Math.LN2;
    }
  });

  _export(_export.S, 'Math', {
    sign: _mathSign
  });

  var exp$1 = Math.exp; // V8 near Chromium 38 has a problem with very small numbers

  _export(_export.S + _export.F * _fails(function () {
    return !Math.sinh(-2e-17) != -2e-17;
  }), 'Math', {
    sinh: function sinh(x) {
      return Math.abs(x = +x) < 1 ? (_mathExpm1(x) - _mathExpm1(-x)) / 2 : (exp$1(x - 1) - exp$1(-x - 1)) * (Math.E / 2);
    }
  });

  var exp$2 = Math.exp;
  _export(_export.S, 'Math', {
    tanh: function tanh(x) {
      var a = _mathExpm1(x = +x);
      var b = _mathExpm1(-x);
      return a == Infinity ? 1 : b == Infinity ? -1 : (a - b) / (exp$2(x) + exp$2(-x));
    }
  });

  _export(_export.S, 'Math', {
    trunc: function trunc(it) {
      return (it > 0 ? Math.floor : Math.ceil)(it);
    }
  });

  var fromCharCode = String.fromCharCode;
  var $fromCodePoint = String.fromCodePoint; // length should be 1, old FF problem

  _export(_export.S + _export.F * (!!$fromCodePoint && $fromCodePoint.length != 1), 'String', {
    // 21.1.2.2 String.fromCodePoint(...codePoints)
    fromCodePoint: function fromCodePoint(x) {
      // eslint-disable-line no-unused-vars
      var res = [];
      var aLen = arguments.length;
      var i = 0;
      var code;

      while (aLen > i) {
        code = +arguments[i++];
        if (_toAbsoluteIndex(code, 0x10ffff) !== code) throw RangeError(code + ' is not a valid code point');
        res.push(code < 0x10000 ? fromCharCode(code) : fromCharCode(((code -= 0x10000) >> 10) + 0xd800, code % 0x400 + 0xdc00));
      }

      return res.join('');
    }
  });

  _export(_export.S, 'String', {
    // 21.1.2.4 String.raw(callSite, ...substitutions)
    raw: function raw(callSite) {
      var tpl = _toIobject(callSite.raw);
      var len = _toLength(tpl.length);
      var aLen = arguments.length;
      var res = [];
      var i = 0;

      while (len > i) {
        res.push(String(tpl[i++]));
        if (i < aLen) res.push(String(arguments[i]));
      }

      return res.join('');
    }
  });

  _stringTrim('trim', function ($trim) {
    return function trim() {
      return $trim(this, 3);
    };
  });

  // false -> String#codePointAt

  var _stringAt = function _stringAt(TO_STRING) {
    return function (that, pos) {
      var s = String(_defined(that));
      var i = _toInteger(pos);
      var l = s.length;
      var a, b;
      if (i < 0 || i >= l) return TO_STRING ? '' : undefined;
      a = s.charCodeAt(i);
      return a < 0xd800 || a > 0xdbff || i + 1 === l || (b = s.charCodeAt(i + 1)) < 0xdc00 || b > 0xdfff ? TO_STRING ? s.charAt(i) : a : TO_STRING ? s.slice(i, i + 2) : (a - 0xd800 << 10) + (b - 0xdc00) + 0x10000;
    };
  };

  var _iterators = {};

  var IteratorPrototype = {}; // 25.1.2.1.1 %IteratorPrototype%[@@iterator]()

  _hide(IteratorPrototype, _wks('iterator'), function () {
    return this;
  });

  var _iterCreate = function _iterCreate(Constructor, NAME, next) {
    Constructor.prototype = _objectCreate(IteratorPrototype, {
      next: _propertyDesc(1, next)
    });
    _setToStringTag(Constructor, NAME + ' Iterator');
  };

  var ITERATOR = _wks('iterator');
  var BUGGY = !([].keys && 'next' in [].keys()); // Safari has buggy iterators w/o `next`

  var FF_ITERATOR = '@@iterator';
  var KEYS = 'keys';
  var VALUES = 'values';

  var returnThis = function returnThis() {
    return this;
  };

  var _iterDefine = function _iterDefine(Base, NAME, Constructor, next, DEFAULT, IS_SET, FORCED) {
    _iterCreate(Constructor, NAME, next);

    var getMethod = function getMethod(kind) {
      if (!BUGGY && kind in proto) return proto[kind];

      switch (kind) {
        case KEYS:
          return function keys() {
            return new Constructor(this, kind);
          };

        case VALUES:
          return function values() {
            return new Constructor(this, kind);
          };
      }

      return function entries() {
        return new Constructor(this, kind);
      };
    };

    var TAG = NAME + ' Iterator';
    var DEF_VALUES = DEFAULT == VALUES;
    var VALUES_BUG = false;
    var proto = Base.prototype;
    var $native = proto[ITERATOR] || proto[FF_ITERATOR] || DEFAULT && proto[DEFAULT];
    var $default = $native || getMethod(DEFAULT);
    var $entries = DEFAULT ? !DEF_VALUES ? $default : getMethod('entries') : undefined;
    var $anyNative = NAME == 'Array' ? proto.entries || $native : $native;
    var methods, key, IteratorPrototype; // Fix native

    if ($anyNative) {
      IteratorPrototype = _objectGpo($anyNative.call(new Base()));

      if (IteratorPrototype !== Object.prototype && IteratorPrototype.next) {
        // Set @@toStringTag to native iterators
        _setToStringTag(IteratorPrototype, TAG, true); // fix for some old engines

        if ( typeof IteratorPrototype[ITERATOR] != 'function') _hide(IteratorPrototype, ITERATOR, returnThis);
      }
    } // fix Array#{values, @@iterator}.name in V8 / FF


    if (DEF_VALUES && $native && $native.name !== VALUES) {
      VALUES_BUG = true;

      $default = function values() {
        return $native.call(this);
      };
    } // Define iterator


    if ( (BUGGY || VALUES_BUG || !proto[ITERATOR])) {
      _hide(proto, ITERATOR, $default);
    } // Plug for library


    _iterators[NAME] = $default;
    _iterators[TAG] = returnThis;

    if (DEFAULT) {
      methods = {
        values: DEF_VALUES ? $default : getMethod(VALUES),
        keys: IS_SET ? $default : getMethod(KEYS),
        entries: $entries
      };
      if (FORCED) for (key in methods) {
        if (!(key in proto)) _redefine(proto, key, methods[key]);
      } else _export(_export.P + _export.F * (BUGGY || VALUES_BUG), NAME, methods);
    }

    return methods;
  };

  var $at = _stringAt(true); // 21.1.3.27 String.prototype[@@iterator]()

  _iterDefine(String, 'String', function (iterated) {
    this._t = String(iterated); // target

    this._i = 0; // next index
    // 21.1.5.2.1 %StringIteratorPrototype%.next()
  }, function () {
    var O = this._t;
    var index = this._i;
    var point;
    if (index >= O.length) return {
      value: undefined,
      done: true
    };
    point = $at(O, index);
    this._i += point.length;
    return {
      value: point,
      done: false
    };
  });

  var $at$1 = _stringAt(false);
  _export(_export.P, 'String', {
    // 21.1.3.3 String.prototype.codePointAt(pos)
    codePointAt: function codePointAt(pos) {
      return $at$1(this, pos);
    }
  });

  var MATCH = _wks('match');

  var _isRegexp = function _isRegexp(it) {
    var isRegExp;
    return _isObject(it) && ((isRegExp = it[MATCH]) !== undefined ? !!isRegExp : _cof(it) == 'RegExp');
  };

  var _stringContext = function _stringContext(that, searchString, NAME) {
    if (_isRegexp(searchString)) throw TypeError('String#' + NAME + " doesn't accept regex!");
    return String(_defined(that));
  };

  var MATCH$1 = _wks('match');

  var _failsIsRegexp = function _failsIsRegexp(KEY) {
    var re = /./;

    try {
      '/./'[KEY](re);
    } catch (e) {
      try {
        re[MATCH$1] = false;
        return !'/./'[KEY](re);
      } catch (f) {
        /* empty */
      }
    }

    return true;
  };

  var ENDS_WITH = 'endsWith';
  var $endsWith = ''[ENDS_WITH];
  _export(_export.P + _export.F * _failsIsRegexp(ENDS_WITH), 'String', {
    endsWith: function endsWith(searchString
    /* , endPosition = @length */
    ) {
      var that = _stringContext(this, searchString, ENDS_WITH);
      var endPosition = arguments.length > 1 ? arguments[1] : undefined;
      var len = _toLength(that.length);
      var end = endPosition === undefined ? len : Math.min(_toLength(endPosition), len);
      var search = String(searchString);
      return $endsWith ? $endsWith.call(that, search, end) : that.slice(end - search.length, end) === search;
    }
  });

  var INCLUDES = 'includes';
  _export(_export.P + _export.F * _failsIsRegexp(INCLUDES), 'String', {
    includes: function includes(searchString
    /* , position = 0 */
    ) {
      return !!~_stringContext(this, searchString, INCLUDES).indexOf(searchString, arguments.length > 1 ? arguments[1] : undefined);
    }
  });

  _export(_export.P, 'String', {
    // 21.1.3.13 String.prototype.repeat(count)
    repeat: _stringRepeat
  });

  var STARTS_WITH = 'startsWith';
  var $startsWith = ''[STARTS_WITH];
  _export(_export.P + _export.F * _failsIsRegexp(STARTS_WITH), 'String', {
    startsWith: function startsWith(searchString
    /* , position = 0 */
    ) {
      var that = _stringContext(this, searchString, STARTS_WITH);
      var index = _toLength(Math.min(arguments.length > 1 ? arguments[1] : undefined, that.length));
      var search = String(searchString);
      return $startsWith ? $startsWith.call(that, search, index) : that.slice(index, index + search.length) === search;
    }
  });

  var quot = /"/g; // B.2.3.2.1 CreateHTML(string, tag, attribute, value)

  var createHTML = function createHTML(string, tag, attribute, value) {
    var S = String(_defined(string));
    var p1 = '<' + tag;
    if (attribute !== '') p1 += ' ' + attribute + '="' + String(value).replace(quot, '&quot;') + '"';
    return p1 + '>' + S + '</' + tag + '>';
  };

  var _stringHtml = function _stringHtml(NAME, exec) {
    var O = {};
    O[NAME] = exec(createHTML);
    _export(_export.P + _export.F * _fails(function () {
      var test = ''[NAME]('"');
      return test !== test.toLowerCase() || test.split('"').length > 3;
    }), 'String', O);
  };

  _stringHtml('anchor', function (createHTML) {
    return function anchor(name) {
      return createHTML(this, 'a', 'name', name);
    };
  });

  _stringHtml('big', function (createHTML) {
    return function big() {
      return createHTML(this, 'big', '', '');
    };
  });

  _stringHtml('blink', function (createHTML) {
    return function blink() {
      return createHTML(this, 'blink', '', '');
    };
  });

  _stringHtml('bold', function (createHTML) {
    return function bold() {
      return createHTML(this, 'b', '', '');
    };
  });

  _stringHtml('fixed', function (createHTML) {
    return function fixed() {
      return createHTML(this, 'tt', '', '');
    };
  });

  _stringHtml('fontcolor', function (createHTML) {
    return function fontcolor(color) {
      return createHTML(this, 'font', 'color', color);
    };
  });

  _stringHtml('fontsize', function (createHTML) {
    return function fontsize(size) {
      return createHTML(this, 'font', 'size', size);
    };
  });

  _stringHtml('italics', function (createHTML) {
    return function italics() {
      return createHTML(this, 'i', '', '');
    };
  });

  _stringHtml('link', function (createHTML) {
    return function link(url) {
      return createHTML(this, 'a', 'href', url);
    };
  });

  _stringHtml('small', function (createHTML) {
    return function small() {
      return createHTML(this, 'small', '', '');
    };
  });

  _stringHtml('strike', function (createHTML) {
    return function strike() {
      return createHTML(this, 'strike', '', '');
    };
  });

  _stringHtml('sub', function (createHTML) {
    return function sub() {
      return createHTML(this, 'sub', '', '');
    };
  });

  _stringHtml('sup', function (createHTML) {
    return function sup() {
      return createHTML(this, 'sup', '', '');
    };
  });

  _export(_export.S, 'Date', {
    now: function now() {
      return new Date().getTime();
    }
  });

  _export(_export.P + _export.F * _fails(function () {
    return new Date(NaN).toJSON() !== null || Date.prototype.toJSON.call({
      toISOString: function toISOString() {
        return 1;
      }
    }) !== 1;
  }), 'Date', {
    // eslint-disable-next-line no-unused-vars
    toJSON: function toJSON(key) {
      var O = _toObject(this);
      var pv = _toPrimitive(O);
      return typeof pv == 'number' && !isFinite(pv) ? null : O.toISOString();
    }
  });

  var getTime = Date.prototype.getTime;
  var $toISOString = Date.prototype.toISOString;

  var lz = function lz(num) {
    return num > 9 ? num : '0' + num;
  }; // PhantomJS / old WebKit has a broken implementations


  var _dateToIsoString = _fails(function () {
    return $toISOString.call(new Date(-5e13 - 1)) != '0385-07-25T07:06:39.999Z';
  }) || !_fails(function () {
    $toISOString.call(new Date(NaN));
  }) ? function toISOString() {
    if (!isFinite(getTime.call(this))) throw RangeError('Invalid time value');
    var d = this;
    var y = d.getUTCFullYear();
    var m = d.getUTCMilliseconds();
    var s = y < 0 ? '-' : y > 9999 ? '+' : '';
    return s + ('00000' + Math.abs(y)).slice(s ? -6 : -4) + '-' + lz(d.getUTCMonth() + 1) + '-' + lz(d.getUTCDate()) + 'T' + lz(d.getUTCHours()) + ':' + lz(d.getUTCMinutes()) + ':' + lz(d.getUTCSeconds()) + '.' + (m > 99 ? m : '0' + lz(m)) + 'Z';
  } : $toISOString;

  // PhantomJS / old WebKit has a broken implementations

  _export(_export.P + _export.F * (Date.prototype.toISOString !== _dateToIsoString), 'Date', {
    toISOString: _dateToIsoString
  });

  var DateProto = Date.prototype;
  var INVALID_DATE = 'Invalid Date';
  var TO_STRING = 'toString';
  var $toString = DateProto[TO_STRING];
  var getTime$1 = DateProto.getTime;

  if (new Date(NaN) + '' != INVALID_DATE) {
    _redefine(DateProto, TO_STRING, function toString() {
      var value = getTime$1.call(this); // eslint-disable-next-line no-self-compare

      return value === value ? $toString.call(this) : INVALID_DATE;
    });
  }

  var NUMBER$1 = 'number';

  var _dateToPrimitive = function _dateToPrimitive(hint) {
    if (hint !== 'string' && hint !== NUMBER$1 && hint !== 'default') throw TypeError('Incorrect hint');
    return _toPrimitive(_anObject(this), hint != NUMBER$1);
  };

  var TO_PRIMITIVE$1 = _wks('toPrimitive');
  var proto$1 = Date.prototype;
  if (!(TO_PRIMITIVE$1 in proto$1)) _hide(proto$1, TO_PRIMITIVE$1, _dateToPrimitive);

  _export(_export.S, 'Array', {
    isArray: _isArray
  });

  var _iterCall = function _iterCall(iterator, fn, value, entries) {
    try {
      return entries ? fn(_anObject(value)[0], value[1]) : fn(value); // 7.4.6 IteratorClose(iterator, completion)
    } catch (e) {
      var ret = iterator['return'];
      if (ret !== undefined) _anObject(ret.call(iterator));
      throw e;
    }
  };

  var ITERATOR$1 = _wks('iterator');
  var ArrayProto = Array.prototype;

  var _isArrayIter = function _isArrayIter(it) {
    return it !== undefined && (_iterators.Array === it || ArrayProto[ITERATOR$1] === it);
  };

  var _createProperty = function _createProperty(object, index, value) {
    if (index in object) _objectDp.f(object, index, _propertyDesc(0, value));else object[index] = value;
  };

  var ITERATOR$2 = _wks('iterator');

  var core_getIteratorMethod = _core.getIteratorMethod = function (it) {
    if (it != undefined) return it[ITERATOR$2] || it['@@iterator'] || _iterators[_classof(it)];
  };

  var ITERATOR$3 = _wks('iterator');
  var SAFE_CLOSING = false;

  try {
    var riter = [7][ITERATOR$3]();

    riter['return'] = function () {
      SAFE_CLOSING = true;
    }; // eslint-disable-next-line no-throw-literal


    Array.from(riter, function () {
      throw 2;
    });
  } catch (e) {
    /* empty */
  }

  var _iterDetect = function _iterDetect(exec, skipClosing) {
    if (!skipClosing && !SAFE_CLOSING) return false;
    var safe = false;

    try {
      var arr = [7];
      var iter = arr[ITERATOR$3]();

      iter.next = function () {
        return {
          done: safe = true
        };
      };

      arr[ITERATOR$3] = function () {
        return iter;
      };

      exec(arr);
    } catch (e) {
      /* empty */
    }

    return safe;
  };

  _export(_export.S + _export.F * !_iterDetect(function (iter) {
    Array.from(iter);
  }), 'Array', {
    // 22.1.2.1 Array.from(arrayLike, mapfn = undefined, thisArg = undefined)
    from: function from(arrayLike
    /* , mapfn = undefined, thisArg = undefined */
    ) {
      var O = _toObject(arrayLike);
      var C = typeof this == 'function' ? this : Array;
      var aLen = arguments.length;
      var mapfn = aLen > 1 ? arguments[1] : undefined;
      var mapping = mapfn !== undefined;
      var index = 0;
      var iterFn = core_getIteratorMethod(O);
      var length, result, step, iterator;
      if (mapping) mapfn = _ctx(mapfn, aLen > 2 ? arguments[2] : undefined, 2); // if object isn't iterable or it's array with default iterator - use simple case

      if (iterFn != undefined && !(C == Array && _isArrayIter(iterFn))) {
        for (iterator = iterFn.call(O), result = new C(); !(step = iterator.next()).done; index++) {
          _createProperty(result, index, mapping ? _iterCall(iterator, mapfn, [step.value, index], true) : step.value);
        }
      } else {
        length = _toLength(O.length);

        for (result = new C(length); length > index; index++) {
          _createProperty(result, index, mapping ? mapfn(O[index], index) : O[index]);
        }
      }

      result.length = index;
      return result;
    }
  });

  _export(_export.S + _export.F * _fails(function () {
    function F() {
      /* empty */
    }

    return !(Array.of.call(F) instanceof F);
  }), 'Array', {
    // 22.1.2.3 Array.of( ...items)
    of: function of()
    /* ...args */
    {
      var index = 0;
      var aLen = arguments.length;
      var result = new (typeof this == 'function' ? this : Array)(aLen);

      while (aLen > index) {
        _createProperty(result, index, arguments[index++]);
      }

      result.length = aLen;
      return result;
    }
  });

  var _strictMethod = function _strictMethod(method, arg) {
    return !!method && _fails(function () {
      // eslint-disable-next-line no-useless-call
      arg ? method.call(null, function () {
        /* empty */
      }, 1) : method.call(null);
    });
  };

  var arrayJoin = [].join; // fallback for not array-like strings

  _export(_export.P + _export.F * (_iobject != Object || !_strictMethod(arrayJoin)), 'Array', {
    join: function join(separator) {
      return arrayJoin.call(_toIobject(this), separator === undefined ? ',' : separator);
    }
  });

  var arraySlice$1 = [].slice; // fallback for not array-like ES3 strings and DOM objects

  _export(_export.P + _export.F * _fails(function () {
    if (_html) arraySlice$1.call(_html);
  }), 'Array', {
    slice: function slice(begin, end) {
      var len = _toLength(this.length);
      var klass = _cof(this);
      end = end === undefined ? len : end;
      if (klass == 'Array') return arraySlice$1.call(this, begin, end);
      var start = _toAbsoluteIndex(begin, len);
      var upTo = _toAbsoluteIndex(end, len);
      var size = _toLength(upTo - start);
      var cloned = new Array(size);
      var i = 0;

      for (; i < size; i++) {
        cloned[i] = klass == 'String' ? this.charAt(start + i) : this[start + i];
      }

      return cloned;
    }
  });

  var $sort = [].sort;
  var test$1 = [1, 2, 3];
  _export(_export.P + _export.F * (_fails(function () {
    // IE8-
    test$1.sort(undefined);
  }) || !_fails(function () {
    // V8 bug
    test$1.sort(null); // Old WebKit
  }) || !_strictMethod($sort)), 'Array', {
    // 22.1.3.25 Array.prototype.sort(comparefn)
    sort: function sort(comparefn) {
      return comparefn === undefined ? $sort.call(_toObject(this)) : $sort.call(_toObject(this), _aFunction(comparefn));
    }
  });

  var SPECIES = _wks('species');

  var _arraySpeciesConstructor = function _arraySpeciesConstructor(original) {
    var C;

    if (_isArray(original)) {
      C = original.constructor; // cross-realm fallback

      if (typeof C == 'function' && (C === Array || _isArray(C.prototype))) C = undefined;

      if (_isObject(C)) {
        C = C[SPECIES];
        if (C === null) C = undefined;
      }
    }

    return C === undefined ? Array : C;
  };

  var _arraySpeciesCreate = function _arraySpeciesCreate(original, length) {
    return new (_arraySpeciesConstructor(original))(length);
  };

  // 1 -> Array#map
  // 2 -> Array#filter
  // 3 -> Array#some
  // 4 -> Array#every
  // 5 -> Array#find
  // 6 -> Array#findIndex

  var _arrayMethods = function _arrayMethods(TYPE, $create) {
    var IS_MAP = TYPE == 1;
    var IS_FILTER = TYPE == 2;
    var IS_SOME = TYPE == 3;
    var IS_EVERY = TYPE == 4;
    var IS_FIND_INDEX = TYPE == 6;
    var NO_HOLES = TYPE == 5 || IS_FIND_INDEX;
    var create = $create || _arraySpeciesCreate;
    return function ($this, callbackfn, that) {
      var O = _toObject($this);
      var self = _iobject(O);
      var f = _ctx(callbackfn, that, 3);
      var length = _toLength(self.length);
      var index = 0;
      var result = IS_MAP ? create($this, length) : IS_FILTER ? create($this, 0) : undefined;
      var val, res;

      for (; length > index; index++) {
        if (NO_HOLES || index in self) {
          val = self[index];
          res = f(val, index, O);

          if (TYPE) {
            if (IS_MAP) result[index] = res; // map
            else if (res) switch (TYPE) {
                case 3:
                  return true;
                // some

                case 5:
                  return val;
                // find

                case 6:
                  return index;
                // findIndex

                case 2:
                  result.push(val);
                // filter
              } else if (IS_EVERY) return false; // every
          }
        }
      }

      return IS_FIND_INDEX ? -1 : IS_SOME || IS_EVERY ? IS_EVERY : result;
    };
  };

  var $forEach = _arrayMethods(0);
  var STRICT = _strictMethod([].forEach, true);
  _export(_export.P + _export.F * !STRICT, 'Array', {
    // 22.1.3.10 / 15.4.4.18 Array.prototype.forEach(callbackfn [, thisArg])
    forEach: function forEach(callbackfn
    /* , thisArg */
    ) {
      return $forEach(this, callbackfn, arguments[1]);
    }
  });

  var $map = _arrayMethods(1);
  _export(_export.P + _export.F * !_strictMethod([].map, true), 'Array', {
    // 22.1.3.15 / 15.4.4.19 Array.prototype.map(callbackfn [, thisArg])
    map: function map(callbackfn
    /* , thisArg */
    ) {
      return $map(this, callbackfn, arguments[1]);
    }
  });

  var $filter = _arrayMethods(2);
  _export(_export.P + _export.F * !_strictMethod([].filter, true), 'Array', {
    // 22.1.3.7 / 15.4.4.20 Array.prototype.filter(callbackfn [, thisArg])
    filter: function filter(callbackfn
    /* , thisArg */
    ) {
      return $filter(this, callbackfn, arguments[1]);
    }
  });

  var $some = _arrayMethods(3);
  _export(_export.P + _export.F * !_strictMethod([].some, true), 'Array', {
    // 22.1.3.23 / 15.4.4.17 Array.prototype.some(callbackfn [, thisArg])
    some: function some(callbackfn
    /* , thisArg */
    ) {
      return $some(this, callbackfn, arguments[1]);
    }
  });

  var $every = _arrayMethods(4);
  _export(_export.P + _export.F * !_strictMethod([].every, true), 'Array', {
    // 22.1.3.5 / 15.4.4.16 Array.prototype.every(callbackfn [, thisArg])
    every: function every(callbackfn
    /* , thisArg */
    ) {
      return $every(this, callbackfn, arguments[1]);
    }
  });

  var _arrayReduce = function _arrayReduce(that, callbackfn, aLen, memo, isRight) {
    _aFunction(callbackfn);
    var O = _toObject(that);
    var self = _iobject(O);
    var length = _toLength(O.length);
    var index = isRight ? length - 1 : 0;
    var i = isRight ? -1 : 1;
    if (aLen < 2) for (;;) {
      if (index in self) {
        memo = self[index];
        index += i;
        break;
      }

      index += i;

      if (isRight ? index < 0 : length <= index) {
        throw TypeError('Reduce of empty array with no initial value');
      }
    }

    for (; isRight ? index >= 0 : length > index; index += i) {
      if (index in self) {
        memo = callbackfn(memo, self[index], index, O);
      }
    }

    return memo;
  };

  _export(_export.P + _export.F * !_strictMethod([].reduce, true), 'Array', {
    // 22.1.3.18 / 15.4.4.21 Array.prototype.reduce(callbackfn [, initialValue])
    reduce: function reduce(callbackfn
    /* , initialValue */
    ) {
      return _arrayReduce(this, callbackfn, arguments.length, arguments[1], false);
    }
  });

  _export(_export.P + _export.F * !_strictMethod([].reduceRight, true), 'Array', {
    // 22.1.3.19 / 15.4.4.22 Array.prototype.reduceRight(callbackfn [, initialValue])
    reduceRight: function reduceRight(callbackfn
    /* , initialValue */
    ) {
      return _arrayReduce(this, callbackfn, arguments.length, arguments[1], true);
    }
  });

  var $indexOf = _arrayIncludes(false);
  var $native = [].indexOf;
  var NEGATIVE_ZERO = !!$native && 1 / [1].indexOf(1, -0) < 0;
  _export(_export.P + _export.F * (NEGATIVE_ZERO || !_strictMethod($native)), 'Array', {
    // 22.1.3.11 / 15.4.4.14 Array.prototype.indexOf(searchElement [, fromIndex])
    indexOf: function indexOf(searchElement
    /* , fromIndex = 0 */
    ) {
      return NEGATIVE_ZERO // convert -0 to +0
      ? $native.apply(this, arguments) || 0 : $indexOf(this, searchElement, arguments[1]);
    }
  });

  var $native$1 = [].lastIndexOf;
  var NEGATIVE_ZERO$1 = !!$native$1 && 1 / [1].lastIndexOf(1, -0) < 0;
  _export(_export.P + _export.F * (NEGATIVE_ZERO$1 || !_strictMethod($native$1)), 'Array', {
    // 22.1.3.14 / 15.4.4.15 Array.prototype.lastIndexOf(searchElement [, fromIndex])
    lastIndexOf: function lastIndexOf(searchElement
    /* , fromIndex = @[*-1] */
    ) {
      // convert -0 to +0
      if (NEGATIVE_ZERO$1) return $native$1.apply(this, arguments) || 0;
      var O = _toIobject(this);
      var length = _toLength(O.length);
      var index = length - 1;
      if (arguments.length > 1) index = Math.min(index, _toInteger(arguments[1]));
      if (index < 0) index = length + index;

      for (; index >= 0; index--) {
        if (index in O) if (O[index] === searchElement) return index || 0;
      }

      return -1;
    }
  });

  var _arrayCopyWithin = [].copyWithin || function copyWithin(target
  /* = 0 */
  , start
  /* = 0, end = @length */
  ) {
    var O = _toObject(this);
    var len = _toLength(O.length);
    var to = _toAbsoluteIndex(target, len);
    var from = _toAbsoluteIndex(start, len);
    var end = arguments.length > 2 ? arguments[2] : undefined;
    var count = Math.min((end === undefined ? len : _toAbsoluteIndex(end, len)) - from, len - to);
    var inc = 1;

    if (from < to && to < from + count) {
      inc = -1;
      from += count - 1;
      to += count - 1;
    }

    while (count-- > 0) {
      if (from in O) O[to] = O[from];else delete O[to];
      to += inc;
      from += inc;
    }

    return O;
  };

  var UNSCOPABLES = _wks('unscopables');
  var ArrayProto$1 = Array.prototype;
  if (ArrayProto$1[UNSCOPABLES] == undefined) _hide(ArrayProto$1, UNSCOPABLES, {});

  var _addToUnscopables = function _addToUnscopables(key) {
    ArrayProto$1[UNSCOPABLES][key] = true;
  };

  _export(_export.P, 'Array', {
    copyWithin: _arrayCopyWithin
  });
  _addToUnscopables('copyWithin');

  var _arrayFill = function fill(value
  /* , start = 0, end = @length */
  ) {
    var O = _toObject(this);
    var length = _toLength(O.length);
    var aLen = arguments.length;
    var index = _toAbsoluteIndex(aLen > 1 ? arguments[1] : undefined, length);
    var end = aLen > 2 ? arguments[2] : undefined;
    var endPos = end === undefined ? length : _toAbsoluteIndex(end, length);

    while (endPos > index) {
      O[index++] = value;
    }

    return O;
  };

  _export(_export.P, 'Array', {
    fill: _arrayFill
  });
  _addToUnscopables('fill');

  var $find = _arrayMethods(5);
  var KEY = 'find';
  var forced = true; // Shouldn't skip holes

  if (KEY in []) Array(1)[KEY](function () {
    forced = false;
  });
  _export(_export.P + _export.F * forced, 'Array', {
    find: function find(callbackfn
    /* , that = undefined */
    ) {
      return $find(this, callbackfn, arguments.length > 1 ? arguments[1] : undefined);
    }
  });
  _addToUnscopables(KEY);

  var $find$1 = _arrayMethods(6);
  var KEY$1 = 'findIndex';
  var forced$1 = true; // Shouldn't skip holes

  if (KEY$1 in []) Array(1)[KEY$1](function () {
    forced$1 = false;
  });
  _export(_export.P + _export.F * forced$1, 'Array', {
    findIndex: function findIndex(callbackfn
    /* , that = undefined */
    ) {
      return $find$1(this, callbackfn, arguments.length > 1 ? arguments[1] : undefined);
    }
  });
  _addToUnscopables(KEY$1);

  var SPECIES$1 = _wks('species');

  var _setSpecies = function _setSpecies(KEY) {
    var C = _global[KEY];
    if (_descriptors && C && !C[SPECIES$1]) _objectDp.f(C, SPECIES$1, {
      configurable: true,
      get: function get() {
        return this;
      }
    });
  };

  _setSpecies('Array');

  var _iterStep = function _iterStep(done, value) {
    return {
      value: value,
      done: !!done
    };
  };

  // 22.1.3.13 Array.prototype.keys()
  // 22.1.3.29 Array.prototype.values()
  // 22.1.3.30 Array.prototype[@@iterator]()


  var es6_array_iterator = _iterDefine(Array, 'Array', function (iterated, kind) {
    this._t = _toIobject(iterated); // target

    this._i = 0; // next index

    this._k = kind; // kind
    // 22.1.5.2.1 %ArrayIteratorPrototype%.next()
  }, function () {
    var O = this._t;
    var kind = this._k;
    var index = this._i++;

    if (!O || index >= O.length) {
      this._t = undefined;
      return _iterStep(1);
    }

    if (kind == 'keys') return _iterStep(0, index);
    if (kind == 'values') return _iterStep(0, O[index]);
    return _iterStep(0, [index, O[index]]);
  }, 'values'); // argumentsList[@@iterator] is %ArrayProto_values% (9.4.4.6, 9.4.4.7)

  _iterators.Arguments = _iterators.Array;
  _addToUnscopables('keys');
  _addToUnscopables('values');
  _addToUnscopables('entries');

  var _flags = function _flags() {
    var that = _anObject(this);
    var result = '';
    if (that.global) result += 'g';
    if (that.ignoreCase) result += 'i';
    if (that.multiline) result += 'm';
    if (that.unicode) result += 'u';
    if (that.sticky) result += 'y';
    return result;
  };

  var dP$4 = _objectDp.f;
  var gOPN$3 = _objectGopn.f;
  var $RegExp = _global.RegExp;
  var Base$1 = $RegExp;
  var proto$2 = $RegExp.prototype;
  var re1 = /a/g;
  var re2 = /a/g; // "new" creates a new object, old webkit buggy here

  var CORRECT_NEW = new $RegExp(re1) !== re1;

  if (_descriptors && (!CORRECT_NEW || _fails(function () {
    re2[_wks('match')] = false; // RegExp constructor can alter flags and IsRegExp works correct with @@match

    return $RegExp(re1) != re1 || $RegExp(re2) == re2 || $RegExp(re1, 'i') != '/a/i';
  }))) {
    $RegExp = function RegExp(p, f) {
      var tiRE = this instanceof $RegExp;
      var piRE = _isRegexp(p);
      var fiU = f === undefined;
      return !tiRE && piRE && p.constructor === $RegExp && fiU ? p : _inheritIfRequired(CORRECT_NEW ? new Base$1(piRE && !fiU ? p.source : p, f) : Base$1((piRE = p instanceof $RegExp) ? p.source : p, piRE && fiU ? _flags.call(p) : f), tiRE ? this : proto$2, $RegExp);
    };

    var proxy = function proxy(key) {
      key in $RegExp || dP$4($RegExp, key, {
        configurable: true,
        get: function get() {
          return Base$1[key];
        },
        set: function set(it) {
          Base$1[key] = it;
        }
      });
    };

    for (var keys$1 = gOPN$3(Base$1), i = 0; keys$1.length > i;) {
      proxy(keys$1[i++]);
    }

    proto$2.constructor = $RegExp;
    $RegExp.prototype = proto$2;
    _redefine(_global, 'RegExp', $RegExp);
  }

  _setSpecies('RegExp');

  var nativeExec = RegExp.prototype.exec; // This always refers to the native implementation, because the
  // String#replace polyfill uses ./fix-regexp-well-known-symbol-logic.js,
  // which loads this file before patching the method.

  var nativeReplace = String.prototype.replace;
  var patchedExec = nativeExec;
  var LAST_INDEX = 'lastIndex';

  var UPDATES_LAST_INDEX_WRONG = function () {
    var re1 = /a/,
        re2 = /b*/g;
    nativeExec.call(re1, 'a');
    nativeExec.call(re2, 'a');
    return re1[LAST_INDEX] !== 0 || re2[LAST_INDEX] !== 0;
  }(); // nonparticipating capturing group, copied from es5-shim's String#split patch.


  var NPCG_INCLUDED = /()??/.exec('')[1] !== undefined;
  var PATCH = UPDATES_LAST_INDEX_WRONG || NPCG_INCLUDED;

  if (PATCH) {
    patchedExec = function exec(str) {
      var re = this;
      var lastIndex, reCopy, match, i;

      if (NPCG_INCLUDED) {
        reCopy = new RegExp('^' + re.source + '$(?!\\s)', _flags.call(re));
      }

      if (UPDATES_LAST_INDEX_WRONG) lastIndex = re[LAST_INDEX];
      match = nativeExec.call(re, str);

      if (UPDATES_LAST_INDEX_WRONG && match) {
        re[LAST_INDEX] = re.global ? match.index + match[0].length : lastIndex;
      }

      if (NPCG_INCLUDED && match && match.length > 1) {
        // Fix browsers whose `exec` methods don't consistently return `undefined`
        // for NPCG, like IE8. NOTE: This doesn' work for /(.?)?/
        // eslint-disable-next-line no-loop-func
        nativeReplace.call(match[0], reCopy, function () {
          for (i = 1; i < arguments.length - 2; i++) {
            if (arguments[i] === undefined) match[i] = undefined;
          }
        });
      }

      return match;
    };
  }

  var _regexpExec = patchedExec;

  _export({
    target: 'RegExp',
    proto: true,
    forced: _regexpExec !== /./.exec
  }, {
    exec: _regexpExec
  });

  if (_descriptors && /./g.flags != 'g') _objectDp.f(RegExp.prototype, 'flags', {
    configurable: true,
    get: _flags
  });

  var TO_STRING$1 = 'toString';
  var $toString$1 = /./[TO_STRING$1];

  var define = function define(fn) {
    _redefine(RegExp.prototype, TO_STRING$1, fn, true);
  }; // 21.2.5.14 RegExp.prototype.toString()


  if (_fails(function () {
    return $toString$1.call({
      source: 'a',
      flags: 'b'
    }) != '/a/b';
  })) {
    define(function toString() {
      var R = _anObject(this);
      return '/'.concat(R.source, '/', 'flags' in R ? R.flags : !_descriptors && R instanceof RegExp ? _flags.call(R) : undefined);
    }); // FF44- RegExp#toString has a wrong name
  } else if ($toString$1.name != TO_STRING$1) {
    define(function toString() {
      return $toString$1.call(this);
    });
  }

  var at = _stringAt(true); // `AdvanceStringIndex` abstract operation
  // https://tc39.github.io/ecma262/#sec-advancestringindex

  var _advanceStringIndex = function _advanceStringIndex(S, index, unicode) {
    return index + (unicode ? at(S, index).length : 1);
  };

  var builtinExec = RegExp.prototype.exec; // `RegExpExec` abstract operation
  // https://tc39.github.io/ecma262/#sec-regexpexec

  var _regexpExecAbstract = function _regexpExecAbstract(R, S) {
    var exec = R.exec;

    if (typeof exec === 'function') {
      var result = exec.call(R, S);

      if (typeof result !== 'object') {
        throw new TypeError('RegExp exec method returned something other than an Object or null');
      }

      return result;
    }

    if (_classof(R) !== 'RegExp') {
      throw new TypeError('RegExp#exec called on incompatible receiver');
    }

    return builtinExec.call(R, S);
  };

  var SPECIES$2 = _wks('species');
  var REPLACE_SUPPORTS_NAMED_GROUPS = !_fails(function () {
    // #replace needs built-in support for named groups.
    // #match works fine because it just return the exec results, even if it has
    // a "grops" property.
    var re = /./;

    re.exec = function () {
      var result = [];
      result.groups = {
        a: '7'
      };
      return result;
    };

    return ''.replace(re, '$<a>') !== '7';
  });

  var SPLIT_WORKS_WITH_OVERWRITTEN_EXEC = function () {
    // Chrome 51 has a buggy "split" implementation when RegExp#exec !== nativeExec
    var re = /(?:)/;
    var originalExec = re.exec;

    re.exec = function () {
      return originalExec.apply(this, arguments);
    };

    var result = 'ab'.split(re);
    return result.length === 2 && result[0] === 'a' && result[1] === 'b';
  }();

  var _fixReWks = function _fixReWks(KEY, length, exec) {
    var SYMBOL = _wks(KEY);
    var DELEGATES_TO_SYMBOL = !_fails(function () {
      // String methods call symbol-named RegEp methods
      var O = {};

      O[SYMBOL] = function () {
        return 7;
      };

      return ''[KEY](O) != 7;
    });
    var DELEGATES_TO_EXEC = DELEGATES_TO_SYMBOL ? !_fails(function () {
      // Symbol-named RegExp methods call .exec
      var execCalled = false;
      var re = /a/;

      re.exec = function () {
        execCalled = true;
        return null;
      };

      if (KEY === 'split') {
        // RegExp[@@split] doesn't call the regex's exec method, but first creates
        // a new one. We need to return the patched regex when creating the new one.
        re.constructor = {};

        re.constructor[SPECIES$2] = function () {
          return re;
        };
      }

      re[SYMBOL]('');
      return !execCalled;
    }) : undefined;

    if (!DELEGATES_TO_SYMBOL || !DELEGATES_TO_EXEC || KEY === 'replace' && !REPLACE_SUPPORTS_NAMED_GROUPS || KEY === 'split' && !SPLIT_WORKS_WITH_OVERWRITTEN_EXEC) {
      var nativeRegExpMethod = /./[SYMBOL];
      var fns = exec(_defined, SYMBOL, ''[KEY], function maybeCallNative(nativeMethod, regexp, str, arg2, forceStringMethod) {
        if (regexp.exec === _regexpExec) {
          if (DELEGATES_TO_SYMBOL && !forceStringMethod) {
            // The native String method already delegates to @@method (this
            // polyfilled function), leasing to infinite recursion.
            // We avoid it by directly calling the native @@method method.
            return {
              done: true,
              value: nativeRegExpMethod.call(regexp, str, arg2)
            };
          }

          return {
            done: true,
            value: nativeMethod.call(str, regexp, arg2)
          };
        }

        return {
          done: false
        };
      });
      var strfn = fns[0];
      var rxfn = fns[1];
      _redefine(String.prototype, KEY, strfn);
      _hide(RegExp.prototype, SYMBOL, length == 2 // 21.2.5.8 RegExp.prototype[@@replace](string, replaceValue)
      // 21.2.5.11 RegExp.prototype[@@split](string, limit)
      ? function (string, arg) {
        return rxfn.call(string, this, arg);
      } // 21.2.5.6 RegExp.prototype[@@match](string)
      // 21.2.5.9 RegExp.prototype[@@search](string)
      : function (string) {
        return rxfn.call(string, this);
      });
    }
  };

  _fixReWks('match', 1, function (defined, MATCH, $match, maybeCallNative) {
    return [// `String.prototype.match` method
    // https://tc39.github.io/ecma262/#sec-string.prototype.match
    function match(regexp) {
      var O = defined(this);
      var fn = regexp == undefined ? undefined : regexp[MATCH];
      return fn !== undefined ? fn.call(regexp, O) : new RegExp(regexp)[MATCH](String(O));
    }, // `RegExp.prototype[@@match]` method
    // https://tc39.github.io/ecma262/#sec-regexp.prototype-@@match
    function (regexp) {
      var res = maybeCallNative($match, regexp, this);
      if (res.done) return res.value;
      var rx = _anObject(regexp);
      var S = String(this);
      if (!rx.global) return _regexpExecAbstract(rx, S);
      var fullUnicode = rx.unicode;
      rx.lastIndex = 0;
      var A = [];
      var n = 0;
      var result;

      while ((result = _regexpExecAbstract(rx, S)) !== null) {
        var matchStr = String(result[0]);
        A[n] = matchStr;
        if (matchStr === '') rx.lastIndex = _advanceStringIndex(S, _toLength(rx.lastIndex), fullUnicode);
        n++;
      }

      return n === 0 ? null : A;
    }];
  });

  var max$1 = Math.max;
  var min$2 = Math.min;
  var floor$3 = Math.floor;
  var SUBSTITUTION_SYMBOLS = /\$([$&`']|\d\d?|<[^>]*>)/g;
  var SUBSTITUTION_SYMBOLS_NO_NAMED = /\$([$&`']|\d\d?)/g;

  var maybeToString = function maybeToString(it) {
    return it === undefined ? it : String(it);
  }; // @@replace logic


  _fixReWks('replace', 2, function (defined, REPLACE, $replace, maybeCallNative) {
    return [// `String.prototype.replace` method
    // https://tc39.github.io/ecma262/#sec-string.prototype.replace
    function replace(searchValue, replaceValue) {
      var O = defined(this);
      var fn = searchValue == undefined ? undefined : searchValue[REPLACE];
      return fn !== undefined ? fn.call(searchValue, O, replaceValue) : $replace.call(String(O), searchValue, replaceValue);
    }, // `RegExp.prototype[@@replace]` method
    // https://tc39.github.io/ecma262/#sec-regexp.prototype-@@replace
    function (regexp, replaceValue) {
      var res = maybeCallNative($replace, regexp, this, replaceValue);
      if (res.done) return res.value;
      var rx = _anObject(regexp);
      var S = String(this);
      var functionalReplace = typeof replaceValue === 'function';
      if (!functionalReplace) replaceValue = String(replaceValue);
      var global = rx.global;

      if (global) {
        var fullUnicode = rx.unicode;
        rx.lastIndex = 0;
      }

      var results = [];

      while (true) {
        var result = _regexpExecAbstract(rx, S);
        if (result === null) break;
        results.push(result);
        if (!global) break;
        var matchStr = String(result[0]);
        if (matchStr === '') rx.lastIndex = _advanceStringIndex(S, _toLength(rx.lastIndex), fullUnicode);
      }

      var accumulatedResult = '';
      var nextSourcePosition = 0;

      for (var i = 0; i < results.length; i++) {
        result = results[i];
        var matched = String(result[0]);
        var position = max$1(min$2(_toInteger(result.index), S.length), 0);
        var captures = []; // NOTE: This is equivalent to
        //   captures = result.slice(1).map(maybeToString)
        // but for some reason `nativeSlice.call(result, 1, result.length)` (called in
        // the slice polyfill when slicing native arrays) "doesn't work" in safari 9 and
        // causes a crash (https://pastebin.com/N21QzeQA) when trying to debug it.

        for (var j = 1; j < result.length; j++) {
          captures.push(maybeToString(result[j]));
        }

        var namedCaptures = result.groups;

        if (functionalReplace) {
          var replacerArgs = [matched].concat(captures, position, S);
          if (namedCaptures !== undefined) replacerArgs.push(namedCaptures);
          var replacement = String(replaceValue.apply(undefined, replacerArgs));
        } else {
          replacement = getSubstitution(matched, S, position, captures, namedCaptures, replaceValue);
        }

        if (position >= nextSourcePosition) {
          accumulatedResult += S.slice(nextSourcePosition, position) + replacement;
          nextSourcePosition = position + matched.length;
        }
      }

      return accumulatedResult + S.slice(nextSourcePosition);
    }]; // https://tc39.github.io/ecma262/#sec-getsubstitution

    function getSubstitution(matched, str, position, captures, namedCaptures, replacement) {
      var tailPos = position + matched.length;
      var m = captures.length;
      var symbols = SUBSTITUTION_SYMBOLS_NO_NAMED;

      if (namedCaptures !== undefined) {
        namedCaptures = _toObject(namedCaptures);
        symbols = SUBSTITUTION_SYMBOLS;
      }

      return $replace.call(replacement, symbols, function (match, ch) {
        var capture;

        switch (ch.charAt(0)) {
          case '$':
            return '$';

          case '&':
            return matched;

          case '`':
            return str.slice(0, position);

          case "'":
            return str.slice(tailPos);

          case '<':
            capture = namedCaptures[ch.slice(1, -1)];
            break;

          default:
            // \d\d?
            var n = +ch;
            if (n === 0) return match;

            if (n > m) {
              var f = floor$3(n / 10);
              if (f === 0) return match;
              if (f <= m) return captures[f - 1] === undefined ? ch.charAt(1) : captures[f - 1] + ch.charAt(1);
              return match;
            }

            capture = captures[n - 1];
        }

        return capture === undefined ? '' : capture;
      });
    }
  });

  _fixReWks('search', 1, function (defined, SEARCH, $search, maybeCallNative) {
    return [// `String.prototype.search` method
    // https://tc39.github.io/ecma262/#sec-string.prototype.search
    function search(regexp) {
      var O = defined(this);
      var fn = regexp == undefined ? undefined : regexp[SEARCH];
      return fn !== undefined ? fn.call(regexp, O) : new RegExp(regexp)[SEARCH](String(O));
    }, // `RegExp.prototype[@@search]` method
    // https://tc39.github.io/ecma262/#sec-regexp.prototype-@@search
    function (regexp) {
      var res = maybeCallNative($search, regexp, this);
      if (res.done) return res.value;
      var rx = _anObject(regexp);
      var S = String(this);
      var previousLastIndex = rx.lastIndex;
      if (!_sameValue(previousLastIndex, 0)) rx.lastIndex = 0;
      var result = _regexpExecAbstract(rx, S);
      if (!_sameValue(rx.lastIndex, previousLastIndex)) rx.lastIndex = previousLastIndex;
      return result === null ? -1 : result.index;
    }];
  });

  var SPECIES$3 = _wks('species');

  var _speciesConstructor = function _speciesConstructor(O, D) {
    var C = _anObject(O).constructor;
    var S;
    return C === undefined || (S = _anObject(C)[SPECIES$3]) == undefined ? D : _aFunction(S);
  };

  var $min = Math.min;
  var $push = [].push;
  var $SPLIT = 'split';
  var LENGTH = 'length';
  var LAST_INDEX$1 = 'lastIndex';
  var MAX_UINT32 = 0xffffffff; // babel-minify transpiles RegExp('x', 'y') -> /x/y and it causes SyntaxError

  var SUPPORTS_Y = !_fails(function () {
    RegExp(MAX_UINT32, 'y');
  }); // @@split logic

  _fixReWks('split', 2, function (defined, SPLIT, $split, maybeCallNative) {
    var internalSplit;

    if ('abbc'[$SPLIT](/(b)*/)[1] == 'c' || 'test'[$SPLIT](/(?:)/, -1)[LENGTH] != 4 || 'ab'[$SPLIT](/(?:ab)*/)[LENGTH] != 2 || '.'[$SPLIT](/(.?)(.?)/)[LENGTH] != 4 || '.'[$SPLIT](/()()/)[LENGTH] > 1 || ''[$SPLIT](/.?/)[LENGTH]) {
      // based on es5-shim implementation, need to rework it
      internalSplit = function internalSplit(separator, limit) {
        var string = String(this);
        if (separator === undefined && limit === 0) return []; // If `separator` is not a regex, use native split

        if (!_isRegexp(separator)) return $split.call(string, separator, limit);
        var output = [];
        var flags = (separator.ignoreCase ? 'i' : '') + (separator.multiline ? 'm' : '') + (separator.unicode ? 'u' : '') + (separator.sticky ? 'y' : '');
        var lastLastIndex = 0;
        var splitLimit = limit === undefined ? MAX_UINT32 : limit >>> 0; // Make `global` and avoid `lastIndex` issues by working with a copy

        var separatorCopy = new RegExp(separator.source, flags + 'g');
        var match, lastIndex, lastLength;

        while (match = _regexpExec.call(separatorCopy, string)) {
          lastIndex = separatorCopy[LAST_INDEX$1];

          if (lastIndex > lastLastIndex) {
            output.push(string.slice(lastLastIndex, match.index));
            if (match[LENGTH] > 1 && match.index < string[LENGTH]) $push.apply(output, match.slice(1));
            lastLength = match[0][LENGTH];
            lastLastIndex = lastIndex;
            if (output[LENGTH] >= splitLimit) break;
          }

          if (separatorCopy[LAST_INDEX$1] === match.index) separatorCopy[LAST_INDEX$1]++; // Avoid an infinite loop
        }

        if (lastLastIndex === string[LENGTH]) {
          if (lastLength || !separatorCopy.test('')) output.push('');
        } else output.push(string.slice(lastLastIndex));

        return output[LENGTH] > splitLimit ? output.slice(0, splitLimit) : output;
      }; // Chakra, V8

    } else if ('0'[$SPLIT](undefined, 0)[LENGTH]) {
      internalSplit = function internalSplit(separator, limit) {
        return separator === undefined && limit === 0 ? [] : $split.call(this, separator, limit);
      };
    } else {
      internalSplit = $split;
    }

    return [// `String.prototype.split` method
    // https://tc39.github.io/ecma262/#sec-string.prototype.split
    function split(separator, limit) {
      var O = defined(this);
      var splitter = separator == undefined ? undefined : separator[SPLIT];
      return splitter !== undefined ? splitter.call(separator, O, limit) : internalSplit.call(String(O), separator, limit);
    }, // `RegExp.prototype[@@split]` method
    // https://tc39.github.io/ecma262/#sec-regexp.prototype-@@split
    //
    // NOTE: This cannot be properly polyfilled in engines that don't support
    // the 'y' flag.
    function (regexp, limit) {
      var res = maybeCallNative(internalSplit, regexp, this, limit, internalSplit !== $split);
      if (res.done) return res.value;
      var rx = _anObject(regexp);
      var S = String(this);
      var C = _speciesConstructor(rx, RegExp);
      var unicodeMatching = rx.unicode;
      var flags = (rx.ignoreCase ? 'i' : '') + (rx.multiline ? 'm' : '') + (rx.unicode ? 'u' : '') + (SUPPORTS_Y ? 'y' : 'g'); // ^(? + rx + ) is needed, in combination with some S slicing, to
      // simulate the 'y' flag.

      var splitter = new C(SUPPORTS_Y ? rx : '^(?:' + rx.source + ')', flags);
      var lim = limit === undefined ? MAX_UINT32 : limit >>> 0;
      if (lim === 0) return [];
      if (S.length === 0) return _regexpExecAbstract(splitter, S) === null ? [S] : [];
      var p = 0;
      var q = 0;
      var A = [];

      while (q < S.length) {
        splitter.lastIndex = SUPPORTS_Y ? q : 0;
        var z = _regexpExecAbstract(splitter, SUPPORTS_Y ? S : S.slice(q));
        var e;

        if (z === null || (e = $min(_toLength(splitter.lastIndex + (SUPPORTS_Y ? 0 : q)), S.length)) === p) {
          q = _advanceStringIndex(S, q, unicodeMatching);
        } else {
          A.push(S.slice(p, q));
          if (A.length === lim) return A;

          for (var i = 1; i <= z.length - 1; i++) {
            A.push(z[i]);
            if (A.length === lim) return A;
          }

          q = p = e;
        }
      }

      A.push(S.slice(p));
      return A;
    }];
  });

  var _anInstance = function _anInstance(it, Constructor, name, forbiddenField) {
    if (!(it instanceof Constructor) || forbiddenField !== undefined && forbiddenField in it) {
      throw TypeError(name + ': incorrect invocation!');
    }

    return it;
  };

  var _forOf = createCommonjsModule(function (module) {
    var BREAK = {};
    var RETURN = {};

    var exports = module.exports = function (iterable, entries, fn, that, ITERATOR) {
      var iterFn = ITERATOR ? function () {
        return iterable;
      } : core_getIteratorMethod(iterable);
      var f = _ctx(fn, that, entries ? 2 : 1);
      var index = 0;
      var length, step, iterator, result;
      if (typeof iterFn != 'function') throw TypeError(iterable + ' is not iterable!'); // fast case for arrays with default iterator

      if (_isArrayIter(iterFn)) for (length = _toLength(iterable.length); length > index; index++) {
        result = entries ? f(_anObject(step = iterable[index])[0], step[1]) : f(iterable[index]);
        if (result === BREAK || result === RETURN) return result;
      } else for (iterator = iterFn.call(iterable); !(step = iterator.next()).done;) {
        result = _iterCall(iterator, f, step.value, entries);
        if (result === BREAK || result === RETURN) return result;
      }
    };

    exports.BREAK = BREAK;
    exports.RETURN = RETURN;
  });

  var process = _global.process;
  var setTask = _global.setImmediate;
  var clearTask = _global.clearImmediate;
  var MessageChannel = _global.MessageChannel;
  var Dispatch = _global.Dispatch;
  var counter = 0;
  var queue = {};
  var ONREADYSTATECHANGE = 'onreadystatechange';
  var defer, channel, port;

  var run = function run() {
    var id = +this; // eslint-disable-next-line no-prototype-builtins

    if (queue.hasOwnProperty(id)) {
      var fn = queue[id];
      delete queue[id];
      fn();
    }
  };

  var listener = function listener(event) {
    run.call(event.data);
  }; // Node.js 0.9+ & IE10+ has setImmediate, otherwise:


  if (!setTask || !clearTask) {
    setTask = function setImmediate(fn) {
      var args = [];
      var i = 1;

      while (arguments.length > i) {
        args.push(arguments[i++]);
      }

      queue[++counter] = function () {
        // eslint-disable-next-line no-new-func
        _invoke(typeof fn == 'function' ? fn : Function(fn), args);
      };

      defer(counter);
      return counter;
    };

    clearTask = function clearImmediate(id) {
      delete queue[id];
    }; // Node.js 0.8-


    if (_cof(process) == 'process') {
      defer = function defer(id) {
        process.nextTick(_ctx(run, id, 1));
      }; // Sphere (JS game engine) Dispatch API

    } else if (Dispatch && Dispatch.now) {
      defer = function defer(id) {
        Dispatch.now(_ctx(run, id, 1));
      }; // Browsers with MessageChannel, includes WebWorkers

    } else if (MessageChannel) {
      channel = new MessageChannel();
      port = channel.port2;
      channel.port1.onmessage = listener;
      defer = _ctx(port.postMessage, port, 1); // Browsers with postMessage, skip WebWorkers
      // IE8 has postMessage, but it's sync & typeof its postMessage is 'object'
    } else if (_global.addEventListener && typeof postMessage == 'function' && !_global.importScripts) {
      defer = function defer(id) {
        _global.postMessage(id + '', '*');
      };

      _global.addEventListener('message', listener, false); // IE8-
    } else if (ONREADYSTATECHANGE in _domCreate('script')) {
      defer = function defer(id) {
        _html.appendChild(_domCreate('script'))[ONREADYSTATECHANGE] = function () {
          _html.removeChild(this);
          run.call(id);
        };
      }; // Rest old browsers

    } else {
      defer = function defer(id) {
        setTimeout(_ctx(run, id, 1), 0);
      };
    }
  }

  var _task = {
    set: setTask,
    clear: clearTask
  };

  var macrotask = _task.set;
  var Observer = _global.MutationObserver || _global.WebKitMutationObserver;
  var process$1 = _global.process;
  var Promise$1 = _global.Promise;
  var isNode = _cof(process$1) == 'process';

  var _microtask = function _microtask() {
    var head, last, notify;

    var flush = function flush() {
      var parent, fn;
      if (isNode && (parent = process$1.domain)) parent.exit();

      while (head) {
        fn = head.fn;
        head = head.next;

        try {
          fn();
        } catch (e) {
          if (head) notify();else last = undefined;
          throw e;
        }
      }

      last = undefined;
      if (parent) parent.enter();
    }; // Node.js


    if (isNode) {
      notify = function notify() {
        process$1.nextTick(flush);
      }; // browsers with MutationObserver, except iOS Safari - https://github.com/zloirock/core-js/issues/339

    } else if (Observer && !(_global.navigator && _global.navigator.standalone)) {
      var toggle = true;
      var node = document.createTextNode('');
      new Observer(flush).observe(node, {
        characterData: true
      }); // eslint-disable-line no-new

      notify = function notify() {
        node.data = toggle = !toggle;
      }; // environments with maybe non-completely correct, but existent Promise

    } else if (Promise$1 && Promise$1.resolve) {
      // Promise.resolve without an argument throws an error in LG WebOS 2
      var promise = Promise$1.resolve(undefined);

      notify = function notify() {
        promise.then(flush);
      }; // for other environments - macrotask based on:
      // - setImmediate
      // - MessageChannel
      // - window.postMessag
      // - onreadystatechange
      // - setTimeout

    } else {
      notify = function notify() {
        // strange IE + webpack dev server bug - use .call(global)
        macrotask.call(_global, flush);
      };
    }

    return function (fn) {
      var task = {
        fn: fn,
        next: undefined
      };
      if (last) last.next = task;

      if (!head) {
        head = task;
        notify();
      }

      last = task;
    };
  };

  function PromiseCapability(C) {
    var resolve, reject;
    this.promise = new C(function ($$resolve, $$reject) {
      if (resolve !== undefined || reject !== undefined) throw TypeError('Bad Promise constructor');
      resolve = $$resolve;
      reject = $$reject;
    });
    this.resolve = _aFunction(resolve);
    this.reject = _aFunction(reject);
  }

  var f$7 = function f(C) {
    return new PromiseCapability(C);
  };

  var _newPromiseCapability = {
    f: f$7
  };

  var _perform = function _perform(exec) {
    try {
      return {
        e: false,
        v: exec()
      };
    } catch (e) {
      return {
        e: true,
        v: e
      };
    }
  };

  var navigator$1 = _global.navigator;

  var _userAgent = navigator$1 && navigator$1.userAgent || '';

  var _promiseResolve = function _promiseResolve(C, x) {
    _anObject(C);
    if (_isObject(x) && x.constructor === C) return x;
    var promiseCapability = _newPromiseCapability.f(C);
    var resolve = promiseCapability.resolve;
    resolve(x);
    return promiseCapability.promise;
  };

  var _redefineAll = function _redefineAll(target, src, safe) {
    for (var key in src) {
      _redefine(target, key, src[key], safe);
    }

    return target;
  };

  var task = _task.set;
  var microtask = _microtask();
  var PROMISE = 'Promise';
  var TypeError$1 = _global.TypeError;
  var process$2 = _global.process;
  var versions = process$2 && process$2.versions;
  var v8 = versions && versions.v8 || '';
  var $Promise = _global[PROMISE];
  var isNode$1 = _classof(process$2) == 'process';

  var empty = function empty() {
    /* empty */
  };

  var Internal, newGenericPromiseCapability, OwnPromiseCapability, Wrapper;
  var newPromiseCapability = newGenericPromiseCapability = _newPromiseCapability.f;
  var USE_NATIVE$1 = !!function () {
    try {
      // correct subclassing with @@species support
      var promise = $Promise.resolve(1);

      var FakePromise = (promise.constructor = {})[_wks('species')] = function (exec) {
        exec(empty, empty);
      }; // unhandled rejections tracking support, NodeJS Promise without it fails @@species test


      return (isNode$1 || typeof PromiseRejectionEvent == 'function') && promise.then(empty) instanceof FakePromise // v8 6.6 (Node 10 and Chrome 66) have a bug with resolving custom thenables
      // https://bugs.chromium.org/p/chromium/issues/detail?id=830565
      // we can't detect it synchronously, so just check versions
      && v8.indexOf('6.6') !== 0 && _userAgent.indexOf('Chrome/66') === -1;
    } catch (e) {
      /* empty */
    }
  }(); // helpers

  var isThenable = function isThenable(it) {
    var then;
    return _isObject(it) && typeof (then = it.then) == 'function' ? then : false;
  };

  var notify = function notify(promise, isReject) {
    if (promise._n) return;
    promise._n = true;
    var chain = promise._c;
    microtask(function () {
      var value = promise._v;
      var ok = promise._s == 1;
      var i = 0;

      var run = function run(reaction) {
        var handler = ok ? reaction.ok : reaction.fail;
        var resolve = reaction.resolve;
        var reject = reaction.reject;
        var domain = reaction.domain;
        var result, then, exited;

        try {
          if (handler) {
            if (!ok) {
              if (promise._h == 2) onHandleUnhandled(promise);
              promise._h = 1;
            }

            if (handler === true) result = value;else {
              if (domain) domain.enter();
              result = handler(value); // may throw

              if (domain) {
                domain.exit();
                exited = true;
              }
            }

            if (result === reaction.promise) {
              reject(TypeError$1('Promise-chain cycle'));
            } else if (then = isThenable(result)) {
              then.call(result, resolve, reject);
            } else resolve(result);
          } else reject(value);
        } catch (e) {
          if (domain && !exited) domain.exit();
          reject(e);
        }
      };

      while (chain.length > i) {
        run(chain[i++]);
      } // variable length - can't use forEach


      promise._c = [];
      promise._n = false;
      if (isReject && !promise._h) onUnhandled(promise);
    });
  };

  var onUnhandled = function onUnhandled(promise) {
    task.call(_global, function () {
      var value = promise._v;
      var unhandled = isUnhandled(promise);
      var result, handler, console;

      if (unhandled) {
        result = _perform(function () {
          if (isNode$1) {
            process$2.emit('unhandledRejection', value, promise);
          } else if (handler = _global.onunhandledrejection) {
            handler({
              promise: promise,
              reason: value
            });
          } else if ((console = _global.console) && console.error) {
            console.error('Unhandled promise rejection', value);
          }
        }); // Browsers should not trigger `rejectionHandled` event if it was handled here, NodeJS - should

        promise._h = isNode$1 || isUnhandled(promise) ? 2 : 1;
      }

      promise._a = undefined;
      if (unhandled && result.e) throw result.v;
    });
  };

  var isUnhandled = function isUnhandled(promise) {
    return promise._h !== 1 && (promise._a || promise._c).length === 0;
  };

  var onHandleUnhandled = function onHandleUnhandled(promise) {
    task.call(_global, function () {
      var handler;

      if (isNode$1) {
        process$2.emit('rejectionHandled', promise);
      } else if (handler = _global.onrejectionhandled) {
        handler({
          promise: promise,
          reason: promise._v
        });
      }
    });
  };

  var $reject = function $reject(value) {
    var promise = this;
    if (promise._d) return;
    promise._d = true;
    promise = promise._w || promise; // unwrap

    promise._v = value;
    promise._s = 2;
    if (!promise._a) promise._a = promise._c.slice();
    notify(promise, true);
  };

  var $resolve = function $resolve(value) {
    var promise = this;
    var then;
    if (promise._d) return;
    promise._d = true;
    promise = promise._w || promise; // unwrap

    try {
      if (promise === value) throw TypeError$1("Promise can't be resolved itself");

      if (then = isThenable(value)) {
        microtask(function () {
          var wrapper = {
            _w: promise,
            _d: false
          }; // wrap

          try {
            then.call(value, _ctx($resolve, wrapper, 1), _ctx($reject, wrapper, 1));
          } catch (e) {
            $reject.call(wrapper, e);
          }
        });
      } else {
        promise._v = value;
        promise._s = 1;
        notify(promise, false);
      }
    } catch (e) {
      $reject.call({
        _w: promise,
        _d: false
      }, e); // wrap
    }
  }; // constructor polyfill


  if (!USE_NATIVE$1) {
    // 25.4.3.1 Promise(executor)
    $Promise = function Promise(executor) {
      _anInstance(this, $Promise, PROMISE, '_h');
      _aFunction(executor);
      Internal.call(this);

      try {
        executor(_ctx($resolve, this, 1), _ctx($reject, this, 1));
      } catch (err) {
        $reject.call(this, err);
      }
    }; // eslint-disable-next-line no-unused-vars


    Internal = function Promise(executor) {
      this._c = []; // <- awaiting reactions

      this._a = undefined; // <- checked in isUnhandled reactions

      this._s = 0; // <- state

      this._d = false; // <- done

      this._v = undefined; // <- value

      this._h = 0; // <- rejection state, 0 - default, 1 - handled, 2 - unhandled

      this._n = false; // <- notify
    };

    Internal.prototype = _redefineAll($Promise.prototype, {
      // 25.4.5.3 Promise.prototype.then(onFulfilled, onRejected)
      then: function then(onFulfilled, onRejected) {
        var reaction = newPromiseCapability(_speciesConstructor(this, $Promise));
        reaction.ok = typeof onFulfilled == 'function' ? onFulfilled : true;
        reaction.fail = typeof onRejected == 'function' && onRejected;
        reaction.domain = isNode$1 ? process$2.domain : undefined;

        this._c.push(reaction);

        if (this._a) this._a.push(reaction);
        if (this._s) notify(this, false);
        return reaction.promise;
      },
      // 25.4.5.1 Promise.prototype.catch(onRejected)
      'catch': function _catch(onRejected) {
        return this.then(undefined, onRejected);
      }
    });

    OwnPromiseCapability = function OwnPromiseCapability() {
      var promise = new Internal();
      this.promise = promise;
      this.resolve = _ctx($resolve, promise, 1);
      this.reject = _ctx($reject, promise, 1);
    };

    _newPromiseCapability.f = newPromiseCapability = function newPromiseCapability(C) {
      return C === $Promise || C === Wrapper ? new OwnPromiseCapability(C) : newGenericPromiseCapability(C);
    };
  }

  _export(_export.G + _export.W + _export.F * !USE_NATIVE$1, {
    Promise: $Promise
  });
  _setToStringTag($Promise, PROMISE);
  _setSpecies(PROMISE);
  Wrapper = _core[PROMISE]; // statics

  _export(_export.S + _export.F * !USE_NATIVE$1, PROMISE, {
    // 25.4.4.5 Promise.reject(r)
    reject: function reject(r) {
      var capability = newPromiseCapability(this);
      var $$reject = capability.reject;
      $$reject(r);
      return capability.promise;
    }
  });
  _export(_export.S + _export.F * ( !USE_NATIVE$1), PROMISE, {
    // 25.4.4.6 Promise.resolve(x)
    resolve: function resolve(x) {
      return _promiseResolve( this, x);
    }
  });
  _export(_export.S + _export.F * !(USE_NATIVE$1 && _iterDetect(function (iter) {
    $Promise.all(iter)['catch'](empty);
  })), PROMISE, {
    // 25.4.4.1 Promise.all(iterable)
    all: function all(iterable) {
      var C = this;
      var capability = newPromiseCapability(C);
      var resolve = capability.resolve;
      var reject = capability.reject;
      var result = _perform(function () {
        var values = [];
        var index = 0;
        var remaining = 1;
        _forOf(iterable, false, function (promise) {
          var $index = index++;
          var alreadyCalled = false;
          values.push(undefined);
          remaining++;
          C.resolve(promise).then(function (value) {
            if (alreadyCalled) return;
            alreadyCalled = true;
            values[$index] = value;
            --remaining || resolve(values);
          }, reject);
        });
        --remaining || resolve(values);
      });
      if (result.e) reject(result.v);
      return capability.promise;
    },
    // 25.4.4.4 Promise.race(iterable)
    race: function race(iterable) {
      var C = this;
      var capability = newPromiseCapability(C);
      var reject = capability.reject;
      var result = _perform(function () {
        _forOf(iterable, false, function (promise) {
          C.resolve(promise).then(capability.resolve, reject);
        });
      });
      if (result.e) reject(result.v);
      return capability.promise;
    }
  });

  var _validateCollection = function _validateCollection(it, TYPE) {
    if (!_isObject(it) || it._t !== TYPE) throw TypeError('Incompatible receiver, ' + TYPE + ' required!');
    return it;
  };

  var dP$5 = _objectDp.f;
  var fastKey = _meta.fastKey;
  var SIZE = _descriptors ? '_s' : 'size';

  var getEntry = function getEntry(that, key) {
    // fast case
    var index = fastKey(key);
    var entry;
    if (index !== 'F') return that._i[index]; // frozen object case

    for (entry = that._f; entry; entry = entry.n) {
      if (entry.k == key) return entry;
    }
  };

  var _collectionStrong = {
    getConstructor: function getConstructor(wrapper, NAME, IS_MAP, ADDER) {
      var C = wrapper(function (that, iterable) {
        _anInstance(that, C, NAME, '_i');
        that._t = NAME; // collection type

        that._i = _objectCreate(null); // index

        that._f = undefined; // first entry

        that._l = undefined; // last entry

        that[SIZE] = 0; // size

        if (iterable != undefined) _forOf(iterable, IS_MAP, that[ADDER], that);
      });
      _redefineAll(C.prototype, {
        // 23.1.3.1 Map.prototype.clear()
        // 23.2.3.2 Set.prototype.clear()
        clear: function clear() {
          for (var that = _validateCollection(this, NAME), data = that._i, entry = that._f; entry; entry = entry.n) {
            entry.r = true;
            if (entry.p) entry.p = entry.p.n = undefined;
            delete data[entry.i];
          }

          that._f = that._l = undefined;
          that[SIZE] = 0;
        },
        // 23.1.3.3 Map.prototype.delete(key)
        // 23.2.3.4 Set.prototype.delete(value)
        'delete': function _delete(key) {
          var that = _validateCollection(this, NAME);
          var entry = getEntry(that, key);

          if (entry) {
            var next = entry.n;
            var prev = entry.p;
            delete that._i[entry.i];
            entry.r = true;
            if (prev) prev.n = next;
            if (next) next.p = prev;
            if (that._f == entry) that._f = next;
            if (that._l == entry) that._l = prev;
            that[SIZE]--;
          }

          return !!entry;
        },
        // 23.2.3.6 Set.prototype.forEach(callbackfn, thisArg = undefined)
        // 23.1.3.5 Map.prototype.forEach(callbackfn, thisArg = undefined)
        forEach: function forEach(callbackfn
        /* , that = undefined */
        ) {
          _validateCollection(this, NAME);
          var f = _ctx(callbackfn, arguments.length > 1 ? arguments[1] : undefined, 3);
          var entry;

          while (entry = entry ? entry.n : this._f) {
            f(entry.v, entry.k, this); // revert to the last existing entry

            while (entry && entry.r) {
              entry = entry.p;
            }
          }
        },
        // 23.1.3.7 Map.prototype.has(key)
        // 23.2.3.7 Set.prototype.has(value)
        has: function has(key) {
          return !!getEntry(_validateCollection(this, NAME), key);
        }
      });
      if (_descriptors) dP$5(C.prototype, 'size', {
        get: function get() {
          return _validateCollection(this, NAME)[SIZE];
        }
      });
      return C;
    },
    def: function def(that, key, value) {
      var entry = getEntry(that, key);
      var prev, index; // change existing entry

      if (entry) {
        entry.v = value; // create new entry
      } else {
        that._l = entry = {
          i: index = fastKey(key, true),
          // <- index
          k: key,
          // <- key
          v: value,
          // <- value
          p: prev = that._l,
          // <- previous entry
          n: undefined,
          // <- next entry
          r: false // <- removed

        };
        if (!that._f) that._f = entry;
        if (prev) prev.n = entry;
        that[SIZE]++; // add to index

        if (index !== 'F') that._i[index] = entry;
      }

      return that;
    },
    getEntry: getEntry,
    setStrong: function setStrong(C, NAME, IS_MAP) {
      // add .keys, .values, .entries, [@@iterator]
      // 23.1.3.4, 23.1.3.8, 23.1.3.11, 23.1.3.12, 23.2.3.5, 23.2.3.8, 23.2.3.10, 23.2.3.11
      _iterDefine(C, NAME, function (iterated, kind) {
        this._t = _validateCollection(iterated, NAME); // target

        this._k = kind; // kind

        this._l = undefined; // previous
      }, function () {
        var that = this;
        var kind = that._k;
        var entry = that._l; // revert to the last existing entry

        while (entry && entry.r) {
          entry = entry.p;
        } // get next entry


        if (!that._t || !(that._l = entry = entry ? entry.n : that._t._f)) {
          // or finish the iteration
          that._t = undefined;
          return _iterStep(1);
        } // return step by kind


        if (kind == 'keys') return _iterStep(0, entry.k);
        if (kind == 'values') return _iterStep(0, entry.v);
        return _iterStep(0, [entry.k, entry.v]);
      }, IS_MAP ? 'entries' : 'values', !IS_MAP, true); // add [@@species], 23.1.2.2, 23.2.2.2

      _setSpecies(NAME);
    }
  };

  var _collection = function _collection(NAME, wrapper, methods, common, IS_MAP, IS_WEAK) {
    var Base = _global[NAME];
    var C = Base;
    var ADDER = IS_MAP ? 'set' : 'add';
    var proto = C && C.prototype;
    var O = {};

    var fixMethod = function fixMethod(KEY) {
      var fn = proto[KEY];
      _redefine(proto, KEY, KEY == 'delete' ? function (a) {
        return IS_WEAK && !_isObject(a) ? false : fn.call(this, a === 0 ? 0 : a);
      } : KEY == 'has' ? function has(a) {
        return IS_WEAK && !_isObject(a) ? false : fn.call(this, a === 0 ? 0 : a);
      } : KEY == 'get' ? function get(a) {
        return IS_WEAK && !_isObject(a) ? undefined : fn.call(this, a === 0 ? 0 : a);
      } : KEY == 'add' ? function add(a) {
        fn.call(this, a === 0 ? 0 : a);
        return this;
      } : function set(a, b) {
        fn.call(this, a === 0 ? 0 : a, b);
        return this;
      });
    };

    if (typeof C != 'function' || !(IS_WEAK || proto.forEach && !_fails(function () {
      new C().entries().next();
    }))) {
      // create collection constructor
      C = common.getConstructor(wrapper, NAME, IS_MAP, ADDER);
      _redefineAll(C.prototype, methods);
      _meta.NEED = true;
    } else {
      var instance = new C(); // early implementations not supports chaining

      var HASNT_CHAINING = instance[ADDER](IS_WEAK ? {} : -0, 1) != instance; // V8 ~  Chromium 40- weak-collections throws on primitives, but should return false

      var THROWS_ON_PRIMITIVES = _fails(function () {
        instance.has(1);
      }); // most early implementations doesn't supports iterables, most modern - not close it correctly

      var ACCEPT_ITERABLES = _iterDetect(function (iter) {
        new C(iter);
      }); // eslint-disable-line no-new
      // for early implementations -0 and +0 not the same

      var BUGGY_ZERO = !IS_WEAK && _fails(function () {
        // V8 ~ Chromium 42- fails only with 5+ elements
        var $instance = new C();
        var index = 5;

        while (index--) {
          $instance[ADDER](index, index);
        }

        return !$instance.has(-0);
      });

      if (!ACCEPT_ITERABLES) {
        C = wrapper(function (target, iterable) {
          _anInstance(target, C, NAME);
          var that = _inheritIfRequired(new Base(), target, C);
          if (iterable != undefined) _forOf(iterable, IS_MAP, that[ADDER], that);
          return that;
        });
        C.prototype = proto;
        proto.constructor = C;
      }

      if (THROWS_ON_PRIMITIVES || BUGGY_ZERO) {
        fixMethod('delete');
        fixMethod('has');
        IS_MAP && fixMethod('get');
      }

      if (BUGGY_ZERO || HASNT_CHAINING) fixMethod(ADDER); // weak collections should not contains .clear method

      if (IS_WEAK && proto.clear) delete proto.clear;
    }

    _setToStringTag(C, NAME);
    O[NAME] = C;
    _export(_export.G + _export.W + _export.F * (C != Base), O);
    if (!IS_WEAK) common.setStrong(C, NAME, IS_MAP);
    return C;
  };

  var MAP = 'Map'; // 23.1 Map Objects

  var es6_map = _collection(MAP, function (get) {
    return function Map() {
      return get(this, arguments.length > 0 ? arguments[0] : undefined);
    };
  }, {
    // 23.1.3.6 Map.prototype.get(key)
    get: function get(key) {
      var entry = _collectionStrong.getEntry(_validateCollection(this, MAP), key);
      return entry && entry.v;
    },
    // 23.1.3.9 Map.prototype.set(key, value)
    set: function set(key, value) {
      return _collectionStrong.def(_validateCollection(this, MAP), key === 0 ? 0 : key, value);
    }
  }, _collectionStrong, true);

  var SET = 'Set'; // 23.2 Set Objects

  var es6_set = _collection(SET, function (get) {
    return function Set() {
      return get(this, arguments.length > 0 ? arguments[0] : undefined);
    };
  }, {
    // 23.2.3.1 Set.prototype.add(value)
    add: function add(value) {
      return _collectionStrong.def(_validateCollection(this, SET), value = value === 0 ? 0 : value, value);
    }
  }, _collectionStrong);

  var getWeak = _meta.getWeak;
  var arrayFind = _arrayMethods(5);
  var arrayFindIndex = _arrayMethods(6);
  var id$1 = 0; // fallback for uncaught frozen keys

  var uncaughtFrozenStore = function uncaughtFrozenStore(that) {
    return that._l || (that._l = new UncaughtFrozenStore());
  };

  var UncaughtFrozenStore = function UncaughtFrozenStore() {
    this.a = [];
  };

  var findUncaughtFrozen = function findUncaughtFrozen(store, key) {
    return arrayFind(store.a, function (it) {
      return it[0] === key;
    });
  };

  UncaughtFrozenStore.prototype = {
    get: function get(key) {
      var entry = findUncaughtFrozen(this, key);
      if (entry) return entry[1];
    },
    has: function has(key) {
      return !!findUncaughtFrozen(this, key);
    },
    set: function set(key, value) {
      var entry = findUncaughtFrozen(this, key);
      if (entry) entry[1] = value;else this.a.push([key, value]);
    },
    'delete': function _delete(key) {
      var index = arrayFindIndex(this.a, function (it) {
        return it[0] === key;
      });
      if (~index) this.a.splice(index, 1);
      return !!~index;
    }
  };
  var _collectionWeak = {
    getConstructor: function getConstructor(wrapper, NAME, IS_MAP, ADDER) {
      var C = wrapper(function (that, iterable) {
        _anInstance(that, C, NAME, '_i');
        that._t = NAME; // collection type

        that._i = id$1++; // collection id

        that._l = undefined; // leak store for uncaught frozen objects

        if (iterable != undefined) _forOf(iterable, IS_MAP, that[ADDER], that);
      });
      _redefineAll(C.prototype, {
        // 23.3.3.2 WeakMap.prototype.delete(key)
        // 23.4.3.3 WeakSet.prototype.delete(value)
        'delete': function _delete(key) {
          if (!_isObject(key)) return false;
          var data = getWeak(key);
          if (data === true) return uncaughtFrozenStore(_validateCollection(this, NAME))['delete'](key);
          return data && _has(data, this._i) && delete data[this._i];
        },
        // 23.3.3.4 WeakMap.prototype.has(key)
        // 23.4.3.4 WeakSet.prototype.has(value)
        has: function has(key) {
          if (!_isObject(key)) return false;
          var data = getWeak(key);
          if (data === true) return uncaughtFrozenStore(_validateCollection(this, NAME)).has(key);
          return data && _has(data, this._i);
        }
      });
      return C;
    },
    def: function def(that, key, value) {
      var data = getWeak(_anObject(key), true);
      if (data === true) uncaughtFrozenStore(that).set(key, value);else data[that._i] = value;
      return that;
    },
    ufstore: uncaughtFrozenStore
  };

  var es6_weakMap = createCommonjsModule(function (module) {

    var each = _arrayMethods(0);
    var NATIVE_WEAK_MAP = _validateCollection;
    var IS_IE11 = !_global.ActiveXObject && 'ActiveXObject' in _global;
    var WEAK_MAP = 'WeakMap';
    var getWeak = _meta.getWeak;
    var isExtensible = Object.isExtensible;
    var uncaughtFrozenStore = _collectionWeak.ufstore;
    var InternalMap;

    var wrapper = function wrapper(get) {
      return function WeakMap() {
        return get(this, arguments.length > 0 ? arguments[0] : undefined);
      };
    };

    var methods = {
      // 23.3.3.3 WeakMap.prototype.get(key)
      get: function get(key) {
        if (_isObject(key)) {
          var data = getWeak(key);
          if (data === true) return uncaughtFrozenStore(_validateCollection(this, WEAK_MAP)).get(key);
          return data ? data[this._i] : undefined;
        }
      },
      // 23.3.3.5 WeakMap.prototype.set(key, value)
      set: function set(key, value) {
        return _collectionWeak.def(_validateCollection(this, WEAK_MAP), key, value);
      }
    }; // 23.3 WeakMap Objects

    var $WeakMap = module.exports = _collection(WEAK_MAP, wrapper, methods, _collectionWeak, true, true); // IE11 WeakMap frozen keys fix

    if (NATIVE_WEAK_MAP && IS_IE11) {
      InternalMap = _collectionWeak.getConstructor(wrapper, WEAK_MAP);
      _objectAssign(InternalMap.prototype, methods);
      _meta.NEED = true;
      each(['delete', 'has', 'get', 'set'], function (key) {
        var proto = $WeakMap.prototype;
        var method = proto[key];
        _redefine(proto, key, function (a, b) {
          // store frozen objects on internal weakmap shim
          if (_isObject(a) && !isExtensible(a)) {
            if (!this._f) this._f = new InternalMap();

            var result = this._f[key](a, b);

            return key == 'set' ? this : result; // store all the rest on native weakmap
          }

          return method.call(this, a, b);
        });
      });
    }
  });

  var WEAK_SET = 'WeakSet'; // 23.4 WeakSet Objects

  _collection(WEAK_SET, function (get) {
    return function WeakSet() {
      return get(this, arguments.length > 0 ? arguments[0] : undefined);
    };
  }, {
    // 23.4.3.1 WeakSet.prototype.add(value)
    add: function add(value) {
      return _collectionWeak.def(_validateCollection(this, WEAK_SET), value, true);
    }
  }, _collectionWeak, false, true);

  var TYPED = _uid('typed_array');
  var VIEW = _uid('view');
  var ABV = !!(_global.ArrayBuffer && _global.DataView);
  var CONSTR = ABV;
  var i$1 = 0;
  var l = 9;
  var Typed;
  var TypedArrayConstructors = 'Int8Array,Uint8Array,Uint8ClampedArray,Int16Array,Uint16Array,Int32Array,Uint32Array,Float32Array,Float64Array'.split(',');

  while (i$1 < l) {
    if (Typed = _global[TypedArrayConstructors[i$1++]]) {
      _hide(Typed.prototype, TYPED, true);
      _hide(Typed.prototype, VIEW, true);
    } else CONSTR = false;
  }

  var _typed = {
    ABV: ABV,
    CONSTR: CONSTR,
    TYPED: TYPED,
    VIEW: VIEW
  };

  var _toIndex = function _toIndex(it) {
    if (it === undefined) return 0;
    var number = _toInteger(it);
    var length = _toLength(number);
    if (number !== length) throw RangeError('Wrong length!');
    return length;
  };

  var _typedBuffer = createCommonjsModule(function (module, exports) {

    var gOPN = _objectGopn.f;
    var dP = _objectDp.f;
    var ARRAY_BUFFER = 'ArrayBuffer';
    var DATA_VIEW = 'DataView';
    var PROTOTYPE = 'prototype';
    var WRONG_LENGTH = 'Wrong length!';
    var WRONG_INDEX = 'Wrong index!';
    var $ArrayBuffer = _global[ARRAY_BUFFER];
    var $DataView = _global[DATA_VIEW];
    var Math = _global.Math;
    var RangeError = _global.RangeError; // eslint-disable-next-line no-shadow-restricted-names

    var Infinity = _global.Infinity;
    var BaseBuffer = $ArrayBuffer;
    var abs = Math.abs;
    var pow = Math.pow;
    var floor = Math.floor;
    var log = Math.log;
    var LN2 = Math.LN2;
    var BUFFER = 'buffer';
    var BYTE_LENGTH = 'byteLength';
    var BYTE_OFFSET = 'byteOffset';
    var $BUFFER = _descriptors ? '_b' : BUFFER;
    var $LENGTH = _descriptors ? '_l' : BYTE_LENGTH;
    var $OFFSET = _descriptors ? '_o' : BYTE_OFFSET; // IEEE754 conversions based on https://github.com/feross/ieee754

    function packIEEE754(value, mLen, nBytes) {
      var buffer = new Array(nBytes);
      var eLen = nBytes * 8 - mLen - 1;
      var eMax = (1 << eLen) - 1;
      var eBias = eMax >> 1;
      var rt = mLen === 23 ? pow(2, -24) - pow(2, -77) : 0;
      var i = 0;
      var s = value < 0 || value === 0 && 1 / value < 0 ? 1 : 0;
      var e, m, c;
      value = abs(value); // eslint-disable-next-line no-self-compare

      if (value != value || value === Infinity) {
        // eslint-disable-next-line no-self-compare
        m = value != value ? 1 : 0;
        e = eMax;
      } else {
        e = floor(log(value) / LN2);

        if (value * (c = pow(2, -e)) < 1) {
          e--;
          c *= 2;
        }

        if (e + eBias >= 1) {
          value += rt / c;
        } else {
          value += rt * pow(2, 1 - eBias);
        }

        if (value * c >= 2) {
          e++;
          c /= 2;
        }

        if (e + eBias >= eMax) {
          m = 0;
          e = eMax;
        } else if (e + eBias >= 1) {
          m = (value * c - 1) * pow(2, mLen);
          e = e + eBias;
        } else {
          m = value * pow(2, eBias - 1) * pow(2, mLen);
          e = 0;
        }
      }

      for (; mLen >= 8; buffer[i++] = m & 255, m /= 256, mLen -= 8) {
      }

      e = e << mLen | m;
      eLen += mLen;

      for (; eLen > 0; buffer[i++] = e & 255, e /= 256, eLen -= 8) {
      }

      buffer[--i] |= s * 128;
      return buffer;
    }

    function unpackIEEE754(buffer, mLen, nBytes) {
      var eLen = nBytes * 8 - mLen - 1;
      var eMax = (1 << eLen) - 1;
      var eBias = eMax >> 1;
      var nBits = eLen - 7;
      var i = nBytes - 1;
      var s = buffer[i--];
      var e = s & 127;
      var m;
      s >>= 7;

      for (; nBits > 0; e = e * 256 + buffer[i], i--, nBits -= 8) {
      }

      m = e & (1 << -nBits) - 1;
      e >>= -nBits;
      nBits += mLen;

      for (; nBits > 0; m = m * 256 + buffer[i], i--, nBits -= 8) {
      }

      if (e === 0) {
        e = 1 - eBias;
      } else if (e === eMax) {
        return m ? NaN : s ? -Infinity : Infinity;
      } else {
        m = m + pow(2, mLen);
        e = e - eBias;
      }

      return (s ? -1 : 1) * m * pow(2, e - mLen);
    }

    function unpackI32(bytes) {
      return bytes[3] << 24 | bytes[2] << 16 | bytes[1] << 8 | bytes[0];
    }

    function packI8(it) {
      return [it & 0xff];
    }

    function packI16(it) {
      return [it & 0xff, it >> 8 & 0xff];
    }

    function packI32(it) {
      return [it & 0xff, it >> 8 & 0xff, it >> 16 & 0xff, it >> 24 & 0xff];
    }

    function packF64(it) {
      return packIEEE754(it, 52, 8);
    }

    function packF32(it) {
      return packIEEE754(it, 23, 4);
    }

    function addGetter(C, key, internal) {
      dP(C[PROTOTYPE], key, {
        get: function get() {
          return this[internal];
        }
      });
    }

    function get(view, bytes, index, isLittleEndian) {
      var numIndex = +index;
      var intIndex = _toIndex(numIndex);
      if (intIndex + bytes > view[$LENGTH]) throw RangeError(WRONG_INDEX);
      var store = view[$BUFFER]._b;
      var start = intIndex + view[$OFFSET];
      var pack = store.slice(start, start + bytes);
      return isLittleEndian ? pack : pack.reverse();
    }

    function set(view, bytes, index, conversion, value, isLittleEndian) {
      var numIndex = +index;
      var intIndex = _toIndex(numIndex);
      if (intIndex + bytes > view[$LENGTH]) throw RangeError(WRONG_INDEX);
      var store = view[$BUFFER]._b;
      var start = intIndex + view[$OFFSET];
      var pack = conversion(+value);

      for (var i = 0; i < bytes; i++) {
        store[start + i] = pack[isLittleEndian ? i : bytes - i - 1];
      }
    }

    if (!_typed.ABV) {
      $ArrayBuffer = function ArrayBuffer(length) {
        _anInstance(this, $ArrayBuffer, ARRAY_BUFFER);
        var byteLength = _toIndex(length);
        this._b = _arrayFill.call(new Array(byteLength), 0);
        this[$LENGTH] = byteLength;
      };

      $DataView = function DataView(buffer, byteOffset, byteLength) {
        _anInstance(this, $DataView, DATA_VIEW);
        _anInstance(buffer, $ArrayBuffer, DATA_VIEW);
        var bufferLength = buffer[$LENGTH];
        var offset = _toInteger(byteOffset);
        if (offset < 0 || offset > bufferLength) throw RangeError('Wrong offset!');
        byteLength = byteLength === undefined ? bufferLength - offset : _toLength(byteLength);
        if (offset + byteLength > bufferLength) throw RangeError(WRONG_LENGTH);
        this[$BUFFER] = buffer;
        this[$OFFSET] = offset;
        this[$LENGTH] = byteLength;
      };

      if (_descriptors) {
        addGetter($ArrayBuffer, BYTE_LENGTH, '_l');
        addGetter($DataView, BUFFER, '_b');
        addGetter($DataView, BYTE_LENGTH, '_l');
        addGetter($DataView, BYTE_OFFSET, '_o');
      }

      _redefineAll($DataView[PROTOTYPE], {
        getInt8: function getInt8(byteOffset) {
          return get(this, 1, byteOffset)[0] << 24 >> 24;
        },
        getUint8: function getUint8(byteOffset) {
          return get(this, 1, byteOffset)[0];
        },
        getInt16: function getInt16(byteOffset
        /* , littleEndian */
        ) {
          var bytes = get(this, 2, byteOffset, arguments[1]);
          return (bytes[1] << 8 | bytes[0]) << 16 >> 16;
        },
        getUint16: function getUint16(byteOffset
        /* , littleEndian */
        ) {
          var bytes = get(this, 2, byteOffset, arguments[1]);
          return bytes[1] << 8 | bytes[0];
        },
        getInt32: function getInt32(byteOffset
        /* , littleEndian */
        ) {
          return unpackI32(get(this, 4, byteOffset, arguments[1]));
        },
        getUint32: function getUint32(byteOffset
        /* , littleEndian */
        ) {
          return unpackI32(get(this, 4, byteOffset, arguments[1])) >>> 0;
        },
        getFloat32: function getFloat32(byteOffset
        /* , littleEndian */
        ) {
          return unpackIEEE754(get(this, 4, byteOffset, arguments[1]), 23, 4);
        },
        getFloat64: function getFloat64(byteOffset
        /* , littleEndian */
        ) {
          return unpackIEEE754(get(this, 8, byteOffset, arguments[1]), 52, 8);
        },
        setInt8: function setInt8(byteOffset, value) {
          set(this, 1, byteOffset, packI8, value);
        },
        setUint8: function setUint8(byteOffset, value) {
          set(this, 1, byteOffset, packI8, value);
        },
        setInt16: function setInt16(byteOffset, value
        /* , littleEndian */
        ) {
          set(this, 2, byteOffset, packI16, value, arguments[2]);
        },
        setUint16: function setUint16(byteOffset, value
        /* , littleEndian */
        ) {
          set(this, 2, byteOffset, packI16, value, arguments[2]);
        },
        setInt32: function setInt32(byteOffset, value
        /* , littleEndian */
        ) {
          set(this, 4, byteOffset, packI32, value, arguments[2]);
        },
        setUint32: function setUint32(byteOffset, value
        /* , littleEndian */
        ) {
          set(this, 4, byteOffset, packI32, value, arguments[2]);
        },
        setFloat32: function setFloat32(byteOffset, value
        /* , littleEndian */
        ) {
          set(this, 4, byteOffset, packF32, value, arguments[2]);
        },
        setFloat64: function setFloat64(byteOffset, value
        /* , littleEndian */
        ) {
          set(this, 8, byteOffset, packF64, value, arguments[2]);
        }
      });
    } else {
      if (!_fails(function () {
        $ArrayBuffer(1);
      }) || !_fails(function () {
        new $ArrayBuffer(-1); // eslint-disable-line no-new
      }) || _fails(function () {
        new $ArrayBuffer(); // eslint-disable-line no-new

        new $ArrayBuffer(1.5); // eslint-disable-line no-new

        new $ArrayBuffer(NaN); // eslint-disable-line no-new

        return $ArrayBuffer.name != ARRAY_BUFFER;
      })) {
        $ArrayBuffer = function ArrayBuffer(length) {
          _anInstance(this, $ArrayBuffer);
          return new BaseBuffer(_toIndex(length));
        };

        var ArrayBufferProto = $ArrayBuffer[PROTOTYPE] = BaseBuffer[PROTOTYPE];

        for (var keys = gOPN(BaseBuffer), j = 0, key; keys.length > j;) {
          if (!((key = keys[j++]) in $ArrayBuffer)) _hide($ArrayBuffer, key, BaseBuffer[key]);
        }

        ArrayBufferProto.constructor = $ArrayBuffer;
      } // iOS Safari 7.x bug


      var view = new $DataView(new $ArrayBuffer(2));
      var $setInt8 = $DataView[PROTOTYPE].setInt8;
      view.setInt8(0, 2147483648);
      view.setInt8(1, 2147483649);
      if (view.getInt8(0) || !view.getInt8(1)) _redefineAll($DataView[PROTOTYPE], {
        setInt8: function setInt8(byteOffset, value) {
          $setInt8.call(this, byteOffset, value << 24 >> 24);
        },
        setUint8: function setUint8(byteOffset, value) {
          $setInt8.call(this, byteOffset, value << 24 >> 24);
        }
      }, true);
    }

    _setToStringTag($ArrayBuffer, ARRAY_BUFFER);
    _setToStringTag($DataView, DATA_VIEW);
    _hide($DataView[PROTOTYPE], _typed.VIEW, true);
    exports[ARRAY_BUFFER] = $ArrayBuffer;
    exports[DATA_VIEW] = $DataView;
  });

  var ArrayBuffer$1 = _global.ArrayBuffer;
  var $ArrayBuffer = _typedBuffer.ArrayBuffer;
  var $DataView = _typedBuffer.DataView;
  var $isView = _typed.ABV && ArrayBuffer$1.isView;
  var $slice = $ArrayBuffer.prototype.slice;
  var VIEW$1 = _typed.VIEW;
  var ARRAY_BUFFER = 'ArrayBuffer';
  _export(_export.G + _export.W + _export.F * (ArrayBuffer$1 !== $ArrayBuffer), {
    ArrayBuffer: $ArrayBuffer
  });
  _export(_export.S + _export.F * !_typed.CONSTR, ARRAY_BUFFER, {
    // 24.1.3.1 ArrayBuffer.isView(arg)
    isView: function isView(it) {
      return $isView && $isView(it) || _isObject(it) && VIEW$1 in it;
    }
  });
  _export(_export.P + _export.U + _export.F * _fails(function () {
    return !new $ArrayBuffer(2).slice(1, undefined).byteLength;
  }), ARRAY_BUFFER, {
    // 24.1.4.3 ArrayBuffer.prototype.slice(start, end)
    slice: function slice(start, end) {
      if ($slice !== undefined && end === undefined) return $slice.call(_anObject(this), start); // FF fix

      var len = _anObject(this).byteLength;
      var first = _toAbsoluteIndex(start, len);
      var fin = _toAbsoluteIndex(end === undefined ? len : end, len);
      var result = new (_speciesConstructor(this, $ArrayBuffer))(_toLength(fin - first));
      var viewS = new $DataView(this);
      var viewT = new $DataView(result);
      var index = 0;

      while (first < fin) {
        viewT.setUint8(index++, viewS.getUint8(first++));
      }

      return result;
    }
  });
  _setSpecies(ARRAY_BUFFER);

  _export(_export.G + _export.W + _export.F * !_typed.ABV, {
    DataView: _typedBuffer.DataView
  });

  var _typedArray = createCommonjsModule(function (module) {

    if (_descriptors) {
      var LIBRARY = _library;
      var global = _global;
      var fails = _fails;
      var $export = _export;
      var $typed = _typed;
      var $buffer = _typedBuffer;
      var ctx = _ctx;
      var anInstance = _anInstance;
      var propertyDesc = _propertyDesc;
      var hide = _hide;
      var redefineAll = _redefineAll;
      var toInteger = _toInteger;
      var toLength = _toLength;
      var toIndex = _toIndex;
      var toAbsoluteIndex = _toAbsoluteIndex;
      var toPrimitive = _toPrimitive;
      var has = _has;
      var classof = _classof;
      var isObject = _isObject;
      var toObject = _toObject;
      var isArrayIter = _isArrayIter;
      var create = _objectCreate;
      var getPrototypeOf = _objectGpo;
      var gOPN = _objectGopn.f;
      var getIterFn = core_getIteratorMethod;
      var uid = _uid;
      var wks = _wks;
      var createArrayMethod = _arrayMethods;
      var createArrayIncludes = _arrayIncludes;
      var speciesConstructor = _speciesConstructor;
      var ArrayIterators = es6_array_iterator;
      var Iterators = _iterators;
      var $iterDetect = _iterDetect;
      var setSpecies = _setSpecies;
      var arrayFill = _arrayFill;
      var arrayCopyWithin = _arrayCopyWithin;
      var $DP = _objectDp;
      var $GOPD = _objectGopd;
      var dP = $DP.f;
      var gOPD = $GOPD.f;
      var RangeError = global.RangeError;
      var TypeError = global.TypeError;
      var Uint8Array = global.Uint8Array;
      var ARRAY_BUFFER = 'ArrayBuffer';
      var SHARED_BUFFER = 'Shared' + ARRAY_BUFFER;
      var BYTES_PER_ELEMENT = 'BYTES_PER_ELEMENT';
      var PROTOTYPE = 'prototype';
      var ArrayProto = Array[PROTOTYPE];
      var $ArrayBuffer = $buffer.ArrayBuffer;
      var $DataView = $buffer.DataView;
      var arrayForEach = createArrayMethod(0);
      var arrayFilter = createArrayMethod(2);
      var arraySome = createArrayMethod(3);
      var arrayEvery = createArrayMethod(4);
      var arrayFind = createArrayMethod(5);
      var arrayFindIndex = createArrayMethod(6);
      var arrayIncludes = createArrayIncludes(true);
      var arrayIndexOf = createArrayIncludes(false);
      var arrayValues = ArrayIterators.values;
      var arrayKeys = ArrayIterators.keys;
      var arrayEntries = ArrayIterators.entries;
      var arrayLastIndexOf = ArrayProto.lastIndexOf;
      var arrayReduce = ArrayProto.reduce;
      var arrayReduceRight = ArrayProto.reduceRight;
      var arrayJoin = ArrayProto.join;
      var arraySort = ArrayProto.sort;
      var arraySlice = ArrayProto.slice;
      var arrayToString = ArrayProto.toString;
      var arrayToLocaleString = ArrayProto.toLocaleString;
      var ITERATOR = wks('iterator');
      var TAG = wks('toStringTag');
      var TYPED_CONSTRUCTOR = uid('typed_constructor');
      var DEF_CONSTRUCTOR = uid('def_constructor');
      var ALL_CONSTRUCTORS = $typed.CONSTR;
      var TYPED_ARRAY = $typed.TYPED;
      var VIEW = $typed.VIEW;
      var WRONG_LENGTH = 'Wrong length!';
      var $map = createArrayMethod(1, function (O, length) {
        return allocate(speciesConstructor(O, O[DEF_CONSTRUCTOR]), length);
      });
      var LITTLE_ENDIAN = fails(function () {
        // eslint-disable-next-line no-undef
        return new Uint8Array(new Uint16Array([1]).buffer)[0] === 1;
      });
      var FORCED_SET = !!Uint8Array && !!Uint8Array[PROTOTYPE].set && fails(function () {
        new Uint8Array(1).set({});
      });

      var toOffset = function toOffset(it, BYTES) {
        var offset = toInteger(it);
        if (offset < 0 || offset % BYTES) throw RangeError('Wrong offset!');
        return offset;
      };

      var validate = function validate(it) {
        if (isObject(it) && TYPED_ARRAY in it) return it;
        throw TypeError(it + ' is not a typed array!');
      };

      var allocate = function allocate(C, length) {
        if (!(isObject(C) && TYPED_CONSTRUCTOR in C)) {
          throw TypeError('It is not a typed array constructor!');
        }

        return new C(length);
      };

      var speciesFromList = function speciesFromList(O, list) {
        return fromList(speciesConstructor(O, O[DEF_CONSTRUCTOR]), list);
      };

      var fromList = function fromList(C, list) {
        var index = 0;
        var length = list.length;
        var result = allocate(C, length);

        while (length > index) {
          result[index] = list[index++];
        }

        return result;
      };

      var addGetter = function addGetter(it, key, internal) {
        dP(it, key, {
          get: function get() {
            return this._d[internal];
          }
        });
      };

      var $from = function from(source
      /* , mapfn, thisArg */
      ) {
        var O = toObject(source);
        var aLen = arguments.length;
        var mapfn = aLen > 1 ? arguments[1] : undefined;
        var mapping = mapfn !== undefined;
        var iterFn = getIterFn(O);
        var i, length, values, result, step, iterator;

        if (iterFn != undefined && !isArrayIter(iterFn)) {
          for (iterator = iterFn.call(O), values = [], i = 0; !(step = iterator.next()).done; i++) {
            values.push(step.value);
          }

          O = values;
        }

        if (mapping && aLen > 2) mapfn = ctx(mapfn, arguments[2], 2);

        for (i = 0, length = toLength(O.length), result = allocate(this, length); length > i; i++) {
          result[i] = mapping ? mapfn(O[i], i) : O[i];
        }

        return result;
      };

      var $of = function of()
      /* ...items */
      {
        var index = 0;
        var length = arguments.length;
        var result = allocate(this, length);

        while (length > index) {
          result[index] = arguments[index++];
        }

        return result;
      }; // iOS Safari 6.x fails here


      var TO_LOCALE_BUG = !!Uint8Array && fails(function () {
        arrayToLocaleString.call(new Uint8Array(1));
      });

      var $toLocaleString = function toLocaleString() {
        return arrayToLocaleString.apply(TO_LOCALE_BUG ? arraySlice.call(validate(this)) : validate(this), arguments);
      };

      var proto = {
        copyWithin: function copyWithin(target, start
        /* , end */
        ) {
          return arrayCopyWithin.call(validate(this), target, start, arguments.length > 2 ? arguments[2] : undefined);
        },
        every: function every(callbackfn
        /* , thisArg */
        ) {
          return arrayEvery(validate(this), callbackfn, arguments.length > 1 ? arguments[1] : undefined);
        },
        fill: function fill(value
        /* , start, end */
        ) {
          // eslint-disable-line no-unused-vars
          return arrayFill.apply(validate(this), arguments);
        },
        filter: function filter(callbackfn
        /* , thisArg */
        ) {
          return speciesFromList(this, arrayFilter(validate(this), callbackfn, arguments.length > 1 ? arguments[1] : undefined));
        },
        find: function find(predicate
        /* , thisArg */
        ) {
          return arrayFind(validate(this), predicate, arguments.length > 1 ? arguments[1] : undefined);
        },
        findIndex: function findIndex(predicate
        /* , thisArg */
        ) {
          return arrayFindIndex(validate(this), predicate, arguments.length > 1 ? arguments[1] : undefined);
        },
        forEach: function forEach(callbackfn
        /* , thisArg */
        ) {
          arrayForEach(validate(this), callbackfn, arguments.length > 1 ? arguments[1] : undefined);
        },
        indexOf: function indexOf(searchElement
        /* , fromIndex */
        ) {
          return arrayIndexOf(validate(this), searchElement, arguments.length > 1 ? arguments[1] : undefined);
        },
        includes: function includes(searchElement
        /* , fromIndex */
        ) {
          return arrayIncludes(validate(this), searchElement, arguments.length > 1 ? arguments[1] : undefined);
        },
        join: function join(separator) {
          // eslint-disable-line no-unused-vars
          return arrayJoin.apply(validate(this), arguments);
        },
        lastIndexOf: function lastIndexOf(searchElement
        /* , fromIndex */
        ) {
          // eslint-disable-line no-unused-vars
          return arrayLastIndexOf.apply(validate(this), arguments);
        },
        map: function map(mapfn
        /* , thisArg */
        ) {
          return $map(validate(this), mapfn, arguments.length > 1 ? arguments[1] : undefined);
        },
        reduce: function reduce(callbackfn
        /* , initialValue */
        ) {
          // eslint-disable-line no-unused-vars
          return arrayReduce.apply(validate(this), arguments);
        },
        reduceRight: function reduceRight(callbackfn
        /* , initialValue */
        ) {
          // eslint-disable-line no-unused-vars
          return arrayReduceRight.apply(validate(this), arguments);
        },
        reverse: function reverse() {
          var that = this;
          var length = validate(that).length;
          var middle = Math.floor(length / 2);
          var index = 0;
          var value;

          while (index < middle) {
            value = that[index];
            that[index++] = that[--length];
            that[length] = value;
          }

          return that;
        },
        some: function some(callbackfn
        /* , thisArg */
        ) {
          return arraySome(validate(this), callbackfn, arguments.length > 1 ? arguments[1] : undefined);
        },
        sort: function sort(comparefn) {
          return arraySort.call(validate(this), comparefn);
        },
        subarray: function subarray(begin, end) {
          var O = validate(this);
          var length = O.length;
          var $begin = toAbsoluteIndex(begin, length);
          return new (speciesConstructor(O, O[DEF_CONSTRUCTOR]))(O.buffer, O.byteOffset + $begin * O.BYTES_PER_ELEMENT, toLength((end === undefined ? length : toAbsoluteIndex(end, length)) - $begin));
        }
      };

      var $slice = function slice(start, end) {
        return speciesFromList(this, arraySlice.call(validate(this), start, end));
      };

      var $set = function set(arrayLike
      /* , offset */
      ) {
        validate(this);
        var offset = toOffset(arguments[1], 1);
        var length = this.length;
        var src = toObject(arrayLike);
        var len = toLength(src.length);
        var index = 0;
        if (len + offset > length) throw RangeError(WRONG_LENGTH);

        while (index < len) {
          this[offset + index] = src[index++];
        }
      };

      var $iterators = {
        entries: function entries() {
          return arrayEntries.call(validate(this));
        },
        keys: function keys() {
          return arrayKeys.call(validate(this));
        },
        values: function values() {
          return arrayValues.call(validate(this));
        }
      };

      var isTAIndex = function isTAIndex(target, key) {
        return isObject(target) && target[TYPED_ARRAY] && typeof key != 'symbol' && key in target && String(+key) == String(key);
      };

      var $getDesc = function getOwnPropertyDescriptor(target, key) {
        return isTAIndex(target, key = toPrimitive(key, true)) ? propertyDesc(2, target[key]) : gOPD(target, key);
      };

      var $setDesc = function defineProperty(target, key, desc) {
        if (isTAIndex(target, key = toPrimitive(key, true)) && isObject(desc) && has(desc, 'value') && !has(desc, 'get') && !has(desc, 'set') // TODO: add validation descriptor w/o calling accessors
        && !desc.configurable && (!has(desc, 'writable') || desc.writable) && (!has(desc, 'enumerable') || desc.enumerable)) {
          target[key] = desc.value;
          return target;
        }

        return dP(target, key, desc);
      };

      if (!ALL_CONSTRUCTORS) {
        $GOPD.f = $getDesc;
        $DP.f = $setDesc;
      }

      $export($export.S + $export.F * !ALL_CONSTRUCTORS, 'Object', {
        getOwnPropertyDescriptor: $getDesc,
        defineProperty: $setDesc
      });

      if (fails(function () {
        arrayToString.call({});
      })) {
        arrayToString = arrayToLocaleString = function toString() {
          return arrayJoin.call(this);
        };
      }

      var $TypedArrayPrototype$ = redefineAll({}, proto);
      redefineAll($TypedArrayPrototype$, $iterators);
      hide($TypedArrayPrototype$, ITERATOR, $iterators.values);
      redefineAll($TypedArrayPrototype$, {
        slice: $slice,
        set: $set,
        constructor: function constructor() {
          /* noop */
        },
        toString: arrayToString,
        toLocaleString: $toLocaleString
      });
      addGetter($TypedArrayPrototype$, 'buffer', 'b');
      addGetter($TypedArrayPrototype$, 'byteOffset', 'o');
      addGetter($TypedArrayPrototype$, 'byteLength', 'l');
      addGetter($TypedArrayPrototype$, 'length', 'e');
      dP($TypedArrayPrototype$, TAG, {
        get: function get() {
          return this[TYPED_ARRAY];
        }
      }); // eslint-disable-next-line max-statements

      module.exports = function (KEY, BYTES, wrapper, CLAMPED) {
        CLAMPED = !!CLAMPED;
        var NAME = KEY + (CLAMPED ? 'Clamped' : '') + 'Array';
        var GETTER = 'get' + KEY;
        var SETTER = 'set' + KEY;
        var TypedArray = global[NAME];
        var Base = TypedArray || {};
        var TAC = TypedArray && getPrototypeOf(TypedArray);
        var FORCED = !TypedArray || !$typed.ABV;
        var O = {};
        var TypedArrayPrototype = TypedArray && TypedArray[PROTOTYPE];

        var getter = function getter(that, index) {
          var data = that._d;
          return data.v[GETTER](index * BYTES + data.o, LITTLE_ENDIAN);
        };

        var setter = function setter(that, index, value) {
          var data = that._d;
          if (CLAMPED) value = (value = Math.round(value)) < 0 ? 0 : value > 0xff ? 0xff : value & 0xff;
          data.v[SETTER](index * BYTES + data.o, value, LITTLE_ENDIAN);
        };

        var addElement = function addElement(that, index) {
          dP(that, index, {
            get: function get() {
              return getter(this, index);
            },
            set: function set(value) {
              return setter(this, index, value);
            },
            enumerable: true
          });
        };

        if (FORCED) {
          TypedArray = wrapper(function (that, data, $offset, $length) {
            anInstance(that, TypedArray, NAME, '_d');
            var index = 0;
            var offset = 0;
            var buffer, byteLength, length, klass;

            if (!isObject(data)) {
              length = toIndex(data);
              byteLength = length * BYTES;
              buffer = new $ArrayBuffer(byteLength);
            } else if (data instanceof $ArrayBuffer || (klass = classof(data)) == ARRAY_BUFFER || klass == SHARED_BUFFER) {
              buffer = data;
              offset = toOffset($offset, BYTES);
              var $len = data.byteLength;

              if ($length === undefined) {
                if ($len % BYTES) throw RangeError(WRONG_LENGTH);
                byteLength = $len - offset;
                if (byteLength < 0) throw RangeError(WRONG_LENGTH);
              } else {
                byteLength = toLength($length) * BYTES;
                if (byteLength + offset > $len) throw RangeError(WRONG_LENGTH);
              }

              length = byteLength / BYTES;
            } else if (TYPED_ARRAY in data) {
              return fromList(TypedArray, data);
            } else {
              return $from.call(TypedArray, data);
            }

            hide(that, '_d', {
              b: buffer,
              o: offset,
              l: byteLength,
              e: length,
              v: new $DataView(buffer)
            });

            while (index < length) {
              addElement(that, index++);
            }
          });
          TypedArrayPrototype = TypedArray[PROTOTYPE] = create($TypedArrayPrototype$);
          hide(TypedArrayPrototype, 'constructor', TypedArray);
        } else if (!fails(function () {
          TypedArray(1);
        }) || !fails(function () {
          new TypedArray(-1); // eslint-disable-line no-new
        }) || !$iterDetect(function (iter) {
          new TypedArray(); // eslint-disable-line no-new

          new TypedArray(null); // eslint-disable-line no-new

          new TypedArray(1.5); // eslint-disable-line no-new

          new TypedArray(iter); // eslint-disable-line no-new
        }, true)) {
          TypedArray = wrapper(function (that, data, $offset, $length) {
            anInstance(that, TypedArray, NAME);
            var klass; // `ws` module bug, temporarily remove validation length for Uint8Array
            // https://github.com/websockets/ws/pull/645

            if (!isObject(data)) return new Base(toIndex(data));

            if (data instanceof $ArrayBuffer || (klass = classof(data)) == ARRAY_BUFFER || klass == SHARED_BUFFER) {
              return $length !== undefined ? new Base(data, toOffset($offset, BYTES), $length) : $offset !== undefined ? new Base(data, toOffset($offset, BYTES)) : new Base(data);
            }

            if (TYPED_ARRAY in data) return fromList(TypedArray, data);
            return $from.call(TypedArray, data);
          });
          arrayForEach(TAC !== Function.prototype ? gOPN(Base).concat(gOPN(TAC)) : gOPN(Base), function (key) {
            if (!(key in TypedArray)) hide(TypedArray, key, Base[key]);
          });
          TypedArray[PROTOTYPE] = TypedArrayPrototype;
          if (!LIBRARY) TypedArrayPrototype.constructor = TypedArray;
        }

        var $nativeIterator = TypedArrayPrototype[ITERATOR];
        var CORRECT_ITER_NAME = !!$nativeIterator && ($nativeIterator.name == 'values' || $nativeIterator.name == undefined);
        var $iterator = $iterators.values;
        hide(TypedArray, TYPED_CONSTRUCTOR, true);
        hide(TypedArrayPrototype, TYPED_ARRAY, NAME);
        hide(TypedArrayPrototype, VIEW, true);
        hide(TypedArrayPrototype, DEF_CONSTRUCTOR, TypedArray);

        if (CLAMPED ? new TypedArray(1)[TAG] != NAME : !(TAG in TypedArrayPrototype)) {
          dP(TypedArrayPrototype, TAG, {
            get: function get() {
              return NAME;
            }
          });
        }

        O[NAME] = TypedArray;
        $export($export.G + $export.W + $export.F * (TypedArray != Base), O);
        $export($export.S, NAME, {
          BYTES_PER_ELEMENT: BYTES
        });
        $export($export.S + $export.F * fails(function () {
          Base.of.call(TypedArray, 1);
        }), NAME, {
          from: $from,
          of: $of
        });
        if (!(BYTES_PER_ELEMENT in TypedArrayPrototype)) hide(TypedArrayPrototype, BYTES_PER_ELEMENT, BYTES);
        $export($export.P, NAME, proto);
        setSpecies(NAME);
        $export($export.P + $export.F * FORCED_SET, NAME, {
          set: $set
        });
        $export($export.P + $export.F * !CORRECT_ITER_NAME, NAME, $iterators);
        if (!LIBRARY && TypedArrayPrototype.toString != arrayToString) TypedArrayPrototype.toString = arrayToString;
        $export($export.P + $export.F * fails(function () {
          new TypedArray(1).slice();
        }), NAME, {
          slice: $slice
        });
        $export($export.P + $export.F * (fails(function () {
          return [1, 2].toLocaleString() != new TypedArray([1, 2]).toLocaleString();
        }) || !fails(function () {
          TypedArrayPrototype.toLocaleString.call([1, 2]);
        })), NAME, {
          toLocaleString: $toLocaleString
        });
        Iterators[NAME] = CORRECT_ITER_NAME ? $nativeIterator : $iterator;
        if (!LIBRARY && !CORRECT_ITER_NAME) hide(TypedArrayPrototype, ITERATOR, $iterator);
      };
    } else module.exports = function () {
      /* empty */
    };
  });

  _typedArray('Int8', 1, function (init) {
    return function Int8Array(data, byteOffset, length) {
      return init(this, data, byteOffset, length);
    };
  });

  _typedArray('Uint8', 1, function (init) {
    return function Uint8Array(data, byteOffset, length) {
      return init(this, data, byteOffset, length);
    };
  });

  _typedArray('Uint8', 1, function (init) {
    return function Uint8ClampedArray(data, byteOffset, length) {
      return init(this, data, byteOffset, length);
    };
  }, true);

  _typedArray('Int16', 2, function (init) {
    return function Int16Array(data, byteOffset, length) {
      return init(this, data, byteOffset, length);
    };
  });

  _typedArray('Uint16', 2, function (init) {
    return function Uint16Array(data, byteOffset, length) {
      return init(this, data, byteOffset, length);
    };
  });

  _typedArray('Int32', 4, function (init) {
    return function Int32Array(data, byteOffset, length) {
      return init(this, data, byteOffset, length);
    };
  });

  _typedArray('Uint32', 4, function (init) {
    return function Uint32Array(data, byteOffset, length) {
      return init(this, data, byteOffset, length);
    };
  });

  _typedArray('Float32', 4, function (init) {
    return function Float32Array(data, byteOffset, length) {
      return init(this, data, byteOffset, length);
    };
  });

  _typedArray('Float64', 8, function (init) {
    return function Float64Array(data, byteOffset, length) {
      return init(this, data, byteOffset, length);
    };
  });

  var rApply = (_global.Reflect || {}).apply;
  var fApply = Function.apply; // MS Edge argumentsList argument is optional

  _export(_export.S + _export.F * !_fails(function () {
    rApply(function () {
      /* empty */
    });
  }), 'Reflect', {
    apply: function apply(target, thisArgument, argumentsList) {
      var T = _aFunction(target);
      var L = _anObject(argumentsList);
      return rApply ? rApply(T, thisArgument, L) : fApply.call(T, thisArgument, L);
    }
  });

  var rConstruct = (_global.Reflect || {}).construct; // MS Edge supports only 2 arguments and argumentsList argument is optional
  // FF Nightly sets third argument as `new.target`, but does not create `this` from it

  var NEW_TARGET_BUG = _fails(function () {
    function F() {
      /* empty */
    }

    return !(rConstruct(function () {
      /* empty */
    }, [], F) instanceof F);
  });
  var ARGS_BUG = !_fails(function () {
    rConstruct(function () {
      /* empty */
    });
  });
  _export(_export.S + _export.F * (NEW_TARGET_BUG || ARGS_BUG), 'Reflect', {
    construct: function construct(Target, args
    /* , newTarget */
    ) {
      _aFunction(Target);
      _anObject(args);
      var newTarget = arguments.length < 3 ? Target : _aFunction(arguments[2]);
      if (ARGS_BUG && !NEW_TARGET_BUG) return rConstruct(Target, args, newTarget);

      if (Target == newTarget) {
        // w/o altered newTarget, optimization for 0-4 arguments
        switch (args.length) {
          case 0:
            return new Target();

          case 1:
            return new Target(args[0]);

          case 2:
            return new Target(args[0], args[1]);

          case 3:
            return new Target(args[0], args[1], args[2]);

          case 4:
            return new Target(args[0], args[1], args[2], args[3]);
        } // w/o altered newTarget, lot of arguments case


        var $args = [null];
        $args.push.apply($args, args);
        return new (_bind.apply(Target, $args))();
      } // with altered newTarget, not support built-in constructors


      var proto = newTarget.prototype;
      var instance = _objectCreate(_isObject(proto) ? proto : Object.prototype);
      var result = Function.apply.call(Target, instance, args);
      return _isObject(result) ? result : instance;
    }
  });

  // MS Edge has broken Reflect.defineProperty - throwing instead of returning false

  _export(_export.S + _export.F * _fails(function () {
    // eslint-disable-next-line no-undef
    Reflect.defineProperty(_objectDp.f({}, 1, {
      value: 1
    }), 1, {
      value: 2
    });
  }), 'Reflect', {
    defineProperty: function defineProperty(target, propertyKey, attributes) {
      _anObject(target);
      propertyKey = _toPrimitive(propertyKey, true);
      _anObject(attributes);

      try {
        _objectDp.f(target, propertyKey, attributes);
        return true;
      } catch (e) {
        return false;
      }
    }
  });

  var gOPD$3 = _objectGopd.f;
  _export(_export.S, 'Reflect', {
    deleteProperty: function deleteProperty(target, propertyKey) {
      var desc = gOPD$3(_anObject(target), propertyKey);
      return desc && !desc.configurable ? false : delete target[propertyKey];
    }
  });

  var Enumerate = function Enumerate(iterated) {
    this._t = _anObject(iterated); // target

    this._i = 0; // next index

    var keys = this._k = []; // keys

    var key;

    for (key in iterated) {
      keys.push(key);
    }
  };

  _iterCreate(Enumerate, 'Object', function () {
    var that = this;
    var keys = that._k;
    var key;

    do {
      if (that._i >= keys.length) return {
        value: undefined,
        done: true
      };
    } while (!((key = keys[that._i++]) in that._t));

    return {
      value: key,
      done: false
    };
  });
  _export(_export.S, 'Reflect', {
    enumerate: function enumerate(target) {
      return new Enumerate(target);
    }
  });

  function get(target, propertyKey
  /* , receiver */
  ) {
    var receiver = arguments.length < 3 ? target : arguments[2];
    var desc, proto;
    if (_anObject(target) === receiver) return target[propertyKey];
    if (desc = _objectGopd.f(target, propertyKey)) return _has(desc, 'value') ? desc.value : desc.get !== undefined ? desc.get.call(receiver) : undefined;
    if (_isObject(proto = _objectGpo(target))) return get(proto, propertyKey, receiver);
  }

  _export(_export.S, 'Reflect', {
    get: get
  });

  _export(_export.S, 'Reflect', {
    getOwnPropertyDescriptor: function getOwnPropertyDescriptor(target, propertyKey) {
      return _objectGopd.f(_anObject(target), propertyKey);
    }
  });

  _export(_export.S, 'Reflect', {
    getPrototypeOf: function getPrototypeOf(target) {
      return _objectGpo(_anObject(target));
    }
  });

  _export(_export.S, 'Reflect', {
    has: function has(target, propertyKey) {
      return propertyKey in target;
    }
  });

  var $isExtensible = Object.isExtensible;
  _export(_export.S, 'Reflect', {
    isExtensible: function isExtensible(target) {
      _anObject(target);
      return $isExtensible ? $isExtensible(target) : true;
    }
  });

  var Reflect$1 = _global.Reflect;

  var _ownKeys = Reflect$1 && Reflect$1.ownKeys || function ownKeys(it) {
    var keys = _objectGopn.f(_anObject(it));
    var getSymbols = _objectGops.f;
    return getSymbols ? keys.concat(getSymbols(it)) : keys;
  };

  _export(_export.S, 'Reflect', {
    ownKeys: _ownKeys
  });

  var $preventExtensions = Object.preventExtensions;
  _export(_export.S, 'Reflect', {
    preventExtensions: function preventExtensions(target) {
      _anObject(target);

      try {
        if ($preventExtensions) $preventExtensions(target);
        return true;
      } catch (e) {
        return false;
      }
    }
  });

  function set(target, propertyKey, V
  /* , receiver */
  ) {
    var receiver = arguments.length < 4 ? target : arguments[3];
    var ownDesc = _objectGopd.f(_anObject(target), propertyKey);
    var existingDescriptor, proto;

    if (!ownDesc) {
      if (_isObject(proto = _objectGpo(target))) {
        return set(proto, propertyKey, V, receiver);
      }

      ownDesc = _propertyDesc(0);
    }

    if (_has(ownDesc, 'value')) {
      if (ownDesc.writable === false || !_isObject(receiver)) return false;

      if (existingDescriptor = _objectGopd.f(receiver, propertyKey)) {
        if (existingDescriptor.get || existingDescriptor.set || existingDescriptor.writable === false) return false;
        existingDescriptor.value = V;
        _objectDp.f(receiver, propertyKey, existingDescriptor);
      } else _objectDp.f(receiver, propertyKey, _propertyDesc(0, V));

      return true;
    }

    return ownDesc.set === undefined ? false : (ownDesc.set.call(receiver, V), true);
  }

  _export(_export.S, 'Reflect', {
    set: set
  });

  if (_setProto) _export(_export.S, 'Reflect', {
    setPrototypeOf: function setPrototypeOf(target, proto) {
      _setProto.check(target, proto);

      try {
        _setProto.set(target, proto);
        return true;
      } catch (e) {
        return false;
      }
    }
  });

  var $includes = _arrayIncludes(true);
  _export(_export.P, 'Array', {
    includes: function includes(el
    /* , fromIndex = 0 */
    ) {
      return $includes(this, el, arguments.length > 1 ? arguments[1] : undefined);
    }
  });
  _addToUnscopables('includes');

  var includes = _core.Array.includes;

  var IS_CONCAT_SPREADABLE = _wks('isConcatSpreadable');

  function flattenIntoArray(target, original, source, sourceLen, start, depth, mapper, thisArg) {
    var targetIndex = start;
    var sourceIndex = 0;
    var mapFn = mapper ? _ctx(mapper, thisArg, 3) : false;
    var element, spreadable;

    while (sourceIndex < sourceLen) {
      if (sourceIndex in source) {
        element = mapFn ? mapFn(source[sourceIndex], sourceIndex, original) : source[sourceIndex];
        spreadable = false;

        if (_isObject(element)) {
          spreadable = element[IS_CONCAT_SPREADABLE];
          spreadable = spreadable !== undefined ? !!spreadable : _isArray(element);
        }

        if (spreadable && depth > 0) {
          targetIndex = flattenIntoArray(target, original, element, _toLength(element.length), targetIndex, depth - 1) - 1;
        } else {
          if (targetIndex >= 0x1fffffffffffff) throw TypeError();
          target[targetIndex] = element;
        }

        targetIndex++;
      }

      sourceIndex++;
    }

    return targetIndex;
  }

  var _flattenIntoArray = flattenIntoArray;

  _export(_export.P, 'Array', {
    flatMap: function flatMap(callbackfn
    /* , thisArg */
    ) {
      var O = _toObject(this);
      var sourceLen, A;
      _aFunction(callbackfn);
      sourceLen = _toLength(O.length);
      A = _arraySpeciesCreate(O, 0);
      _flattenIntoArray(A, O, O, sourceLen, 0, 1, callbackfn, arguments[1]);
      return A;
    }
  });
  _addToUnscopables('flatMap');

  var flatMap = _core.Array.flatMap;

  var _stringPad = function _stringPad(that, maxLength, fillString, left) {
    var S = String(_defined(that));
    var stringLength = S.length;
    var fillStr = fillString === undefined ? ' ' : String(fillString);
    var intMaxLength = _toLength(maxLength);
    if (intMaxLength <= stringLength || fillStr == '') return S;
    var fillLen = intMaxLength - stringLength;
    var stringFiller = _stringRepeat.call(fillStr, Math.ceil(fillLen / fillStr.length));
    if (stringFiller.length > fillLen) stringFiller = stringFiller.slice(0, fillLen);
    return left ? stringFiller + S : S + stringFiller;
  };

  // https://github.com/zloirock/core-js/issues/280


  var WEBKIT_BUG = /Version\/10\.\d+(\.\d+)?( Mobile\/\w+)? Safari\//.test(_userAgent);
  _export(_export.P + _export.F * WEBKIT_BUG, 'String', {
    padStart: function padStart(maxLength
    /* , fillString = ' ' */
    ) {
      return _stringPad(this, maxLength, arguments.length > 1 ? arguments[1] : undefined, true);
    }
  });

  var padStart = _core.String.padStart;

  // https://github.com/zloirock/core-js/issues/280


  var WEBKIT_BUG$1 = /Version\/10\.\d+(\.\d+)?( Mobile\/\w+)? Safari\//.test(_userAgent);
  _export(_export.P + _export.F * WEBKIT_BUG$1, 'String', {
    padEnd: function padEnd(maxLength
    /* , fillString = ' ' */
    ) {
      return _stringPad(this, maxLength, arguments.length > 1 ? arguments[1] : undefined, false);
    }
  });

  var padEnd = _core.String.padEnd;

  _stringTrim('trimLeft', function ($trim) {
    return function trimLeft() {
      return $trim(this, 1);
    };
  }, 'trimStart');

  var trimStart = _core.String.trimLeft;

  _stringTrim('trimRight', function ($trim) {
    return function trimRight() {
      return $trim(this, 2);
    };
  }, 'trimEnd');

  var trimEnd = _core.String.trimRight;

  _wksDefine('asyncIterator');

  var asyncIterator = _wksExt.f('asyncIterator');

  _export(_export.S, 'Object', {
    getOwnPropertyDescriptors: function getOwnPropertyDescriptors(object) {
      var O = _toIobject(object);
      var getDesc = _objectGopd.f;
      var keys = _ownKeys(O);
      var result = {};
      var i = 0;
      var key, desc;

      while (keys.length > i) {
        desc = getDesc(O, key = keys[i++]);
        if (desc !== undefined) _createProperty(result, key, desc);
      }

      return result;
    }
  });

  var getOwnPropertyDescriptors = _core.Object.getOwnPropertyDescriptors;

  var isEnum$1 = _objectPie.f;

  var _objectToArray = function _objectToArray(isEntries) {
    return function (it) {
      var O = _toIobject(it);
      var keys = _objectKeys(O);
      var length = keys.length;
      var i = 0;
      var result = [];
      var key;

      while (length > i) {
        key = keys[i++];

        if (!_descriptors || isEnum$1.call(O, key)) {
          result.push(isEntries ? [key, O[key]] : O[key]);
        }
      }

      return result;
    };
  };

  var $values = _objectToArray(false);
  _export(_export.S, 'Object', {
    values: function values(it) {
      return $values(it);
    }
  });

  var values = _core.Object.values;

  var $entries = _objectToArray(true);
  _export(_export.S, 'Object', {
    entries: function entries(it) {
      return $entries(it);
    }
  });

  var entries = _core.Object.entries;

  _export(_export.P + _export.R, 'Promise', {
    'finally': function _finally(onFinally) {
      var C = _speciesConstructor(this, _core.Promise || _global.Promise);
      var isFunction = typeof onFinally == 'function';
      return this.then(isFunction ? function (x) {
        return _promiseResolve(C, onFinally()).then(function () {
          return x;
        });
      } : onFinally, isFunction ? function (e) {
        return _promiseResolve(C, onFinally()).then(function () {
          throw e;
        });
      } : onFinally);
    }
  });

  var _finally = _core.Promise['finally'];

  var slice = [].slice;
  var MSIE = /MSIE .\./.test(_userAgent); // <- dirty ie9- check

  var wrap$1 = function wrap(set) {
    return function (fn, time
    /* , ...args */
    ) {
      var boundArgs = arguments.length > 2;
      var args = boundArgs ? slice.call(arguments, 2) : false;
      return set(boundArgs ? function () {
        // eslint-disable-next-line no-new-func
        (typeof fn == 'function' ? fn : Function(fn)).apply(this, args);
      } : fn, time);
    };
  };

  _export(_export.G + _export.B + _export.F * MSIE, {
    setTimeout: wrap$1(_global.setTimeout),
    setInterval: wrap$1(_global.setInterval)
  });

  _export(_export.G + _export.B, {
    setImmediate: _task.set,
    clearImmediate: _task.clear
  });

  var ITERATOR$4 = _wks('iterator');
  var TO_STRING_TAG = _wks('toStringTag');
  var ArrayValues = _iterators.Array;
  var DOMIterables = {
    CSSRuleList: true,
    // TODO: Not spec compliant, should be false.
    CSSStyleDeclaration: false,
    CSSValueList: false,
    ClientRectList: false,
    DOMRectList: false,
    DOMStringList: false,
    DOMTokenList: true,
    DataTransferItemList: false,
    FileList: false,
    HTMLAllCollection: false,
    HTMLCollection: false,
    HTMLFormElement: false,
    HTMLSelectElement: false,
    MediaList: true,
    // TODO: Not spec compliant, should be false.
    MimeTypeArray: false,
    NamedNodeMap: false,
    NodeList: true,
    PaintRequestList: false,
    Plugin: false,
    PluginArray: false,
    SVGLengthList: false,
    SVGNumberList: false,
    SVGPathSegList: false,
    SVGPointList: false,
    SVGStringList: false,
    SVGTransformList: false,
    SourceBufferList: false,
    StyleSheetList: true,
    // TODO: Not spec compliant, should be false.
    TextTrackCueList: false,
    TextTrackList: false,
    TouchList: false
  };

  for (var collections = _objectKeys(DOMIterables), i$2 = 0; i$2 < collections.length; i$2++) {
    var NAME$1 = collections[i$2];
    var explicit = DOMIterables[NAME$1];
    var Collection = _global[NAME$1];
    var proto$3 = Collection && Collection.prototype;
    var key$1;

    if (proto$3) {
      if (!proto$3[ITERATOR$4]) _hide(proto$3, ITERATOR$4, ArrayValues);
      if (!proto$3[TO_STRING_TAG]) _hide(proto$3, TO_STRING_TAG, NAME$1);
      _iterators[NAME$1] = ArrayValues;
      if (explicit) for (key$1 in es6_array_iterator) {
        if (!proto$3[key$1]) _redefine(proto$3, key$1, es6_array_iterator[key$1], true);
      }
    }
  }

  var runtime_1 = createCommonjsModule(function (module) {
    /**
     * Copyright (c) 2014-present, Facebook, Inc.
     *
     * This source code is licensed under the MIT license found in the
     * LICENSE file in the root directory of this source tree.
     */
    var runtime = function (exports) {

      var Op = Object.prototype;
      var hasOwn = Op.hasOwnProperty;
      var undefined$1; // More compressible than void 0.

      var $Symbol = typeof Symbol === "function" ? Symbol : {};
      var iteratorSymbol = $Symbol.iterator || "@@iterator";
      var asyncIteratorSymbol = $Symbol.asyncIterator || "@@asyncIterator";
      var toStringTagSymbol = $Symbol.toStringTag || "@@toStringTag";

      function define(obj, key, value) {
        Object.defineProperty(obj, key, {
          value: value,
          enumerable: true,
          configurable: true,
          writable: true
        });
        return obj[key];
      }

      try {
        // IE 8 has a broken Object.defineProperty that only works on DOM objects.
        define({}, "");
      } catch (err) {
        define = function define(obj, key, value) {
          return obj[key] = value;
        };
      }

      function wrap(innerFn, outerFn, self, tryLocsList) {
        // If outerFn provided and outerFn.prototype is a Generator, then outerFn.prototype instanceof Generator.
        var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator;
        var generator = Object.create(protoGenerator.prototype);
        var context = new Context(tryLocsList || []); // The ._invoke method unifies the implementations of the .next,
        // .throw, and .return methods.

        generator._invoke = makeInvokeMethod(innerFn, self, context);
        return generator;
      }

      exports.wrap = wrap; // Try/catch helper to minimize deoptimizations. Returns a completion
      // record like context.tryEntries[i].completion. This interface could
      // have been (and was previously) designed to take a closure to be
      // invoked without arguments, but in all the cases we care about we
      // already have an existing method we want to call, so there's no need
      // to create a new function object. We can even get away with assuming
      // the method takes exactly one argument, since that happens to be true
      // in every case, so we don't have to touch the arguments object. The
      // only additional allocation required is the completion record, which
      // has a stable shape and so hopefully should be cheap to allocate.

      function tryCatch(fn, obj, arg) {
        try {
          return {
            type: "normal",
            arg: fn.call(obj, arg)
          };
        } catch (err) {
          return {
            type: "throw",
            arg: err
          };
        }
      }

      var GenStateSuspendedStart = "suspendedStart";
      var GenStateSuspendedYield = "suspendedYield";
      var GenStateExecuting = "executing";
      var GenStateCompleted = "completed"; // Returning this object from the innerFn has the same effect as
      // breaking out of the dispatch switch statement.

      var ContinueSentinel = {}; // Dummy constructor functions that we use as the .constructor and
      // .constructor.prototype properties for functions that return Generator
      // objects. For full spec compliance, you may wish to configure your
      // minifier not to mangle the names of these two functions.

      function Generator() {}

      function GeneratorFunction() {}

      function GeneratorFunctionPrototype() {} // This is a polyfill for %IteratorPrototype% for environments that
      // don't natively support it.


      var IteratorPrototype = {};

      IteratorPrototype[iteratorSymbol] = function () {
        return this;
      };

      var getProto = Object.getPrototypeOf;
      var NativeIteratorPrototype = getProto && getProto(getProto(values([])));

      if (NativeIteratorPrototype && NativeIteratorPrototype !== Op && hasOwn.call(NativeIteratorPrototype, iteratorSymbol)) {
        // This environment has a native %IteratorPrototype%; use it instead
        // of the polyfill.
        IteratorPrototype = NativeIteratorPrototype;
      }

      var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(IteratorPrototype);
      GeneratorFunction.prototype = Gp.constructor = GeneratorFunctionPrototype;
      GeneratorFunctionPrototype.constructor = GeneratorFunction;
      GeneratorFunction.displayName = define(GeneratorFunctionPrototype, toStringTagSymbol, "GeneratorFunction"); // Helper for defining the .next, .throw, and .return methods of the
      // Iterator interface in terms of a single ._invoke method.

      function defineIteratorMethods(prototype) {
        ["next", "throw", "return"].forEach(function (method) {
          define(prototype, method, function (arg) {
            return this._invoke(method, arg);
          });
        });
      }

      exports.isGeneratorFunction = function (genFun) {
        var ctor = typeof genFun === "function" && genFun.constructor;
        return ctor ? ctor === GeneratorFunction || // For the native GeneratorFunction constructor, the best we can
        // do is to check its .name property.
        (ctor.displayName || ctor.name) === "GeneratorFunction" : false;
      };

      exports.mark = function (genFun) {
        if (Object.setPrototypeOf) {
          Object.setPrototypeOf(genFun, GeneratorFunctionPrototype);
        } else {
          genFun.__proto__ = GeneratorFunctionPrototype;
          define(genFun, toStringTagSymbol, "GeneratorFunction");
        }

        genFun.prototype = Object.create(Gp);
        return genFun;
      }; // Within the body of any async function, `await x` is transformed to
      // `yield regeneratorRuntime.awrap(x)`, so that the runtime can test
      // `hasOwn.call(value, "__await")` to determine if the yielded value is
      // meant to be awaited.


      exports.awrap = function (arg) {
        return {
          __await: arg
        };
      };

      function AsyncIterator(generator, PromiseImpl) {
        function invoke(method, arg, resolve, reject) {
          var record = tryCatch(generator[method], generator, arg);

          if (record.type === "throw") {
            reject(record.arg);
          } else {
            var result = record.arg;
            var value = result.value;

            if (value && typeof value === "object" && hasOwn.call(value, "__await")) {
              return PromiseImpl.resolve(value.__await).then(function (value) {
                invoke("next", value, resolve, reject);
              }, function (err) {
                invoke("throw", err, resolve, reject);
              });
            }

            return PromiseImpl.resolve(value).then(function (unwrapped) {
              // When a yielded Promise is resolved, its final value becomes
              // the .value of the Promise<{value,done}> result for the
              // current iteration.
              result.value = unwrapped;
              resolve(result);
            }, function (error) {
              // If a rejected Promise was yielded, throw the rejection back
              // into the async generator function so it can be handled there.
              return invoke("throw", error, resolve, reject);
            });
          }
        }

        var previousPromise;

        function enqueue(method, arg) {
          function callInvokeWithMethodAndArg() {
            return new PromiseImpl(function (resolve, reject) {
              invoke(method, arg, resolve, reject);
            });
          }

          return previousPromise = // If enqueue has been called before, then we want to wait until
          // all previous Promises have been resolved before calling invoke,
          // so that results are always delivered in the correct order. If
          // enqueue has not been called before, then it is important to
          // call invoke immediately, without waiting on a callback to fire,
          // so that the async generator function has the opportunity to do
          // any necessary setup in a predictable way. This predictability
          // is why the Promise constructor synchronously invokes its
          // executor callback, and why async functions synchronously
          // execute code before the first await. Since we implement simple
          // async functions in terms of async generators, it is especially
          // important to get this right, even though it requires care.
          previousPromise ? previousPromise.then(callInvokeWithMethodAndArg, // Avoid propagating failures to Promises returned by later
          // invocations of the iterator.
          callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg();
        } // Define the unified helper method that is used to implement .next,
        // .throw, and .return (see defineIteratorMethods).


        this._invoke = enqueue;
      }

      defineIteratorMethods(AsyncIterator.prototype);

      AsyncIterator.prototype[asyncIteratorSymbol] = function () {
        return this;
      };

      exports.AsyncIterator = AsyncIterator; // Note that simple async functions are implemented on top of
      // AsyncIterator objects; they just return a Promise for the value of
      // the final result produced by the iterator.

      exports.async = function (innerFn, outerFn, self, tryLocsList, PromiseImpl) {
        if (PromiseImpl === void 0) PromiseImpl = Promise;
        var iter = new AsyncIterator(wrap(innerFn, outerFn, self, tryLocsList), PromiseImpl);
        return exports.isGeneratorFunction(outerFn) ? iter // If outerFn is a generator, return the full iterator.
        : iter.next().then(function (result) {
          return result.done ? result.value : iter.next();
        });
      };

      function makeInvokeMethod(innerFn, self, context) {
        var state = GenStateSuspendedStart;
        return function invoke(method, arg) {
          if (state === GenStateExecuting) {
            throw new Error("Generator is already running");
          }

          if (state === GenStateCompleted) {
            if (method === "throw") {
              throw arg;
            } // Be forgiving, per 25.3.3.3.3 of the spec:
            // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-generatorresume


            return doneResult();
          }

          context.method = method;
          context.arg = arg;

          while (true) {
            var delegate = context.delegate;

            if (delegate) {
              var delegateResult = maybeInvokeDelegate(delegate, context);

              if (delegateResult) {
                if (delegateResult === ContinueSentinel) continue;
                return delegateResult;
              }
            }

            if (context.method === "next") {
              // Setting context._sent for legacy support of Babel's
              // function.sent implementation.
              context.sent = context._sent = context.arg;
            } else if (context.method === "throw") {
              if (state === GenStateSuspendedStart) {
                state = GenStateCompleted;
                throw context.arg;
              }

              context.dispatchException(context.arg);
            } else if (context.method === "return") {
              context.abrupt("return", context.arg);
            }

            state = GenStateExecuting;
            var record = tryCatch(innerFn, self, context);

            if (record.type === "normal") {
              // If an exception is thrown from innerFn, we leave state ===
              // GenStateExecuting and loop back for another invocation.
              state = context.done ? GenStateCompleted : GenStateSuspendedYield;

              if (record.arg === ContinueSentinel) {
                continue;
              }

              return {
                value: record.arg,
                done: context.done
              };
            } else if (record.type === "throw") {
              state = GenStateCompleted; // Dispatch the exception by looping back around to the
              // context.dispatchException(context.arg) call above.

              context.method = "throw";
              context.arg = record.arg;
            }
          }
        };
      } // Call delegate.iterator[context.method](context.arg) and handle the
      // result, either by returning a { value, done } result from the
      // delegate iterator, or by modifying context.method and context.arg,
      // setting context.delegate to null, and returning the ContinueSentinel.


      function maybeInvokeDelegate(delegate, context) {
        var method = delegate.iterator[context.method];

        if (method === undefined$1) {
          // A .throw or .return when the delegate iterator has no .throw
          // method always terminates the yield* loop.
          context.delegate = null;

          if (context.method === "throw") {
            // Note: ["return"] must be used for ES3 parsing compatibility.
            if (delegate.iterator["return"]) {
              // If the delegate iterator has a return method, give it a
              // chance to clean up.
              context.method = "return";
              context.arg = undefined$1;
              maybeInvokeDelegate(delegate, context);

              if (context.method === "throw") {
                // If maybeInvokeDelegate(context) changed context.method from
                // "return" to "throw", let that override the TypeError below.
                return ContinueSentinel;
              }
            }

            context.method = "throw";
            context.arg = new TypeError("The iterator does not provide a 'throw' method");
          }

          return ContinueSentinel;
        }

        var record = tryCatch(method, delegate.iterator, context.arg);

        if (record.type === "throw") {
          context.method = "throw";
          context.arg = record.arg;
          context.delegate = null;
          return ContinueSentinel;
        }

        var info = record.arg;

        if (!info) {
          context.method = "throw";
          context.arg = new TypeError("iterator result is not an object");
          context.delegate = null;
          return ContinueSentinel;
        }

        if (info.done) {
          // Assign the result of the finished delegate to the temporary
          // variable specified by delegate.resultName (see delegateYield).
          context[delegate.resultName] = info.value; // Resume execution at the desired location (see delegateYield).

          context.next = delegate.nextLoc; // If context.method was "throw" but the delegate handled the
          // exception, let the outer generator proceed normally. If
          // context.method was "next", forget context.arg since it has been
          // "consumed" by the delegate iterator. If context.method was
          // "return", allow the original .return call to continue in the
          // outer generator.

          if (context.method !== "return") {
            context.method = "next";
            context.arg = undefined$1;
          }
        } else {
          // Re-yield the result returned by the delegate method.
          return info;
        } // The delegate iterator is finished, so forget it and continue with
        // the outer generator.


        context.delegate = null;
        return ContinueSentinel;
      } // Define Generator.prototype.{next,throw,return} in terms of the
      // unified ._invoke helper method.


      defineIteratorMethods(Gp);
      define(Gp, toStringTagSymbol, "Generator"); // A Generator should always return itself as the iterator object when the
      // @@iterator function is called on it. Some browsers' implementations of the
      // iterator prototype chain incorrectly implement this, causing the Generator
      // object to not be returned from this call. This ensures that doesn't happen.
      // See https://github.com/facebook/regenerator/issues/274 for more details.

      Gp[iteratorSymbol] = function () {
        return this;
      };

      Gp.toString = function () {
        return "[object Generator]";
      };

      function pushTryEntry(locs) {
        var entry = {
          tryLoc: locs[0]
        };

        if (1 in locs) {
          entry.catchLoc = locs[1];
        }

        if (2 in locs) {
          entry.finallyLoc = locs[2];
          entry.afterLoc = locs[3];
        }

        this.tryEntries.push(entry);
      }

      function resetTryEntry(entry) {
        var record = entry.completion || {};
        record.type = "normal";
        delete record.arg;
        entry.completion = record;
      }

      function Context(tryLocsList) {
        // The root entry object (effectively a try statement without a catch
        // or a finally block) gives us a place to store values thrown from
        // locations where there is no enclosing try statement.
        this.tryEntries = [{
          tryLoc: "root"
        }];
        tryLocsList.forEach(pushTryEntry, this);
        this.reset(true);
      }

      exports.keys = function (object) {
        var keys = [];

        for (var key in object) {
          keys.push(key);
        }

        keys.reverse(); // Rather than returning an object with a next method, we keep
        // things simple and return the next function itself.

        return function next() {
          while (keys.length) {
            var key = keys.pop();

            if (key in object) {
              next.value = key;
              next.done = false;
              return next;
            }
          } // To avoid creating an additional object, we just hang the .value
          // and .done properties off the next function object itself. This
          // also ensures that the minifier will not anonymize the function.


          next.done = true;
          return next;
        };
      };

      function values(iterable) {
        if (iterable) {
          var iteratorMethod = iterable[iteratorSymbol];

          if (iteratorMethod) {
            return iteratorMethod.call(iterable);
          }

          if (typeof iterable.next === "function") {
            return iterable;
          }

          if (!isNaN(iterable.length)) {
            var i = -1,
                next = function next() {
              while (++i < iterable.length) {
                if (hasOwn.call(iterable, i)) {
                  next.value = iterable[i];
                  next.done = false;
                  return next;
                }
              }

              next.value = undefined$1;
              next.done = true;
              return next;
            };

            return next.next = next;
          }
        } // Return an iterator with no values.


        return {
          next: doneResult
        };
      }

      exports.values = values;

      function doneResult() {
        return {
          value: undefined$1,
          done: true
        };
      }

      Context.prototype = {
        constructor: Context,
        reset: function reset(skipTempReset) {
          this.prev = 0;
          this.next = 0; // Resetting context._sent for legacy support of Babel's
          // function.sent implementation.

          this.sent = this._sent = undefined$1;
          this.done = false;
          this.delegate = null;
          this.method = "next";
          this.arg = undefined$1;
          this.tryEntries.forEach(resetTryEntry);

          if (!skipTempReset) {
            for (var name in this) {
              // Not sure about the optimal order of these conditions:
              if (name.charAt(0) === "t" && hasOwn.call(this, name) && !isNaN(+name.slice(1))) {
                this[name] = undefined$1;
              }
            }
          }
        },
        stop: function stop() {
          this.done = true;
          var rootEntry = this.tryEntries[0];
          var rootRecord = rootEntry.completion;

          if (rootRecord.type === "throw") {
            throw rootRecord.arg;
          }

          return this.rval;
        },
        dispatchException: function dispatchException(exception) {
          if (this.done) {
            throw exception;
          }

          var context = this;

          function handle(loc, caught) {
            record.type = "throw";
            record.arg = exception;
            context.next = loc;

            if (caught) {
              // If the dispatched exception was caught by a catch block,
              // then let that catch block handle the exception normally.
              context.method = "next";
              context.arg = undefined$1;
            }

            return !!caught;
          }

          for (var i = this.tryEntries.length - 1; i >= 0; --i) {
            var entry = this.tryEntries[i];
            var record = entry.completion;

            if (entry.tryLoc === "root") {
              // Exception thrown outside of any try block that could handle
              // it, so set the completion value of the entire function to
              // throw the exception.
              return handle("end");
            }

            if (entry.tryLoc <= this.prev) {
              var hasCatch = hasOwn.call(entry, "catchLoc");
              var hasFinally = hasOwn.call(entry, "finallyLoc");

              if (hasCatch && hasFinally) {
                if (this.prev < entry.catchLoc) {
                  return handle(entry.catchLoc, true);
                } else if (this.prev < entry.finallyLoc) {
                  return handle(entry.finallyLoc);
                }
              } else if (hasCatch) {
                if (this.prev < entry.catchLoc) {
                  return handle(entry.catchLoc, true);
                }
              } else if (hasFinally) {
                if (this.prev < entry.finallyLoc) {
                  return handle(entry.finallyLoc);
                }
              } else {
                throw new Error("try statement without catch or finally");
              }
            }
          }
        },
        abrupt: function abrupt(type, arg) {
          for (var i = this.tryEntries.length - 1; i >= 0; --i) {
            var entry = this.tryEntries[i];

            if (entry.tryLoc <= this.prev && hasOwn.call(entry, "finallyLoc") && this.prev < entry.finallyLoc) {
              var finallyEntry = entry;
              break;
            }
          }

          if (finallyEntry && (type === "break" || type === "continue") && finallyEntry.tryLoc <= arg && arg <= finallyEntry.finallyLoc) {
            // Ignore the finally entry if control is not jumping to a
            // location outside the try/catch block.
            finallyEntry = null;
          }

          var record = finallyEntry ? finallyEntry.completion : {};
          record.type = type;
          record.arg = arg;

          if (finallyEntry) {
            this.method = "next";
            this.next = finallyEntry.finallyLoc;
            return ContinueSentinel;
          }

          return this.complete(record);
        },
        complete: function complete(record, afterLoc) {
          if (record.type === "throw") {
            throw record.arg;
          }

          if (record.type === "break" || record.type === "continue") {
            this.next = record.arg;
          } else if (record.type === "return") {
            this.rval = this.arg = record.arg;
            this.method = "return";
            this.next = "end";
          } else if (record.type === "normal" && afterLoc) {
            this.next = afterLoc;
          }

          return ContinueSentinel;
        },
        finish: function finish(finallyLoc) {
          for (var i = this.tryEntries.length - 1; i >= 0; --i) {
            var entry = this.tryEntries[i];

            if (entry.finallyLoc === finallyLoc) {
              this.complete(entry.completion, entry.afterLoc);
              resetTryEntry(entry);
              return ContinueSentinel;
            }
          }
        },
        "catch": function _catch(tryLoc) {
          for (var i = this.tryEntries.length - 1; i >= 0; --i) {
            var entry = this.tryEntries[i];

            if (entry.tryLoc === tryLoc) {
              var record = entry.completion;

              if (record.type === "throw") {
                var thrown = record.arg;
                resetTryEntry(entry);
              }

              return thrown;
            }
          } // The context.catch method must only be called with a location
          // argument that corresponds to a known catch block.


          throw new Error("illegal catch attempt");
        },
        delegateYield: function delegateYield(iterable, resultName, nextLoc) {
          this.delegate = {
            iterator: values(iterable),
            resultName: resultName,
            nextLoc: nextLoc
          };

          if (this.method === "next") {
            // Deliberately forget the last sent value so that we don't
            // accidentally pass it on to the delegate.
            this.arg = undefined$1;
          }

          return ContinueSentinel;
        }
      }; // Regardless of whether this script is executing as a CommonJS module
      // or not, return the runtime object so that we can declare the variable
      // regeneratorRuntime in the outer scope, which allows this module to be
      // injected easily by `bin/regenerator --include-runtime script.js`.

      return exports;
    }( // If this script is executing as a CommonJS module, use module.exports
    // as the regeneratorRuntime namespace. Otherwise create a new empty
    // object. Either way, the resulting object will be used to initialize
    // the regeneratorRuntime variable at the top of this file.
     module.exports );

    try {
      regeneratorRuntime = runtime;
    } catch (accidentalStrictMode) {
      // This module should not be running in strict mode, so the above
      // assignment should always work unless something is misconfigured. Just
      // in case runtime.js accidentally runs in strict mode, we can escape
      // strict mode using a global Function call. This could conceivably fail
      // if a Content Security Policy forbids using Function, but in that case
      // the proper solution is to fix the accidental strict mode problem. If
      // you've misconfigured your bundler to force strict mode and applied a
      // CSP to forbid Function, and you're not willing to fix either of those
      // problems, please detail your unique predicament in a GitHub issue.
      Function("r", "regeneratorRuntime = r")(runtime);
    }
  });

  var _global$1 = createCommonjsModule(function (module) {
    // https://github.com/zloirock/core-js/issues/86#issuecomment-115759028
    var global = module.exports = typeof window != 'undefined' && window.Math == Math ? window : typeof self != 'undefined' && self.Math == Math ? self // eslint-disable-next-line no-new-func
    : Function('return this')();
    if (typeof __g == 'number') __g = global; // eslint-disable-line no-undef
  });

  var _core$1 = createCommonjsModule(function (module) {
    var core = module.exports = {
      version: '2.6.11'
    };
    if (typeof __e == 'number') __e = core; // eslint-disable-line no-undef
  });
  var _core_1$1 = _core$1.version;

  var _aFunction$1 = function _aFunction(it) {
    if (typeof it != 'function') throw TypeError(it + ' is not a function!');
    return it;
  };

  var _ctx$1 = function _ctx(fn, that, length) {
    _aFunction$1(fn);
    if (that === undefined) return fn;

    switch (length) {
      case 1:
        return function (a) {
          return fn.call(that, a);
        };

      case 2:
        return function (a, b) {
          return fn.call(that, a, b);
        };

      case 3:
        return function (a, b, c) {
          return fn.call(that, a, b, c);
        };
    }

    return function ()
    /* ...args */
    {
      return fn.apply(that, arguments);
    };
  };

  var _isObject$1 = function _isObject(it) {
    return typeof it === 'object' ? it !== null : typeof it === 'function';
  };

  var _anObject$1 = function _anObject(it) {
    if (!_isObject$1(it)) throw TypeError(it + ' is not an object!');
    return it;
  };

  var _fails$1 = function _fails(exec) {
    try {
      return !!exec();
    } catch (e) {
      return true;
    }
  };

  var _descriptors$1 = !_fails$1(function () {
    return Object.defineProperty({}, 'a', {
      get: function get() {
        return 7;
      }
    }).a != 7;
  });

  var document$3 = _global$1.document; // typeof document.createElement is 'object' in old IE

  var is$1 = _isObject$1(document$3) && _isObject$1(document$3.createElement);

  var _domCreate$1 = function _domCreate(it) {
    return is$1 ? document$3.createElement(it) : {};
  };

  var _ie8DomDefine$1 = !_descriptors$1 && !_fails$1(function () {
    return Object.defineProperty(_domCreate$1('div'), 'a', {
      get: function get() {
        return 7;
      }
    }).a != 7;
  });

  // instead of the ES6 spec version, we didn't implement @@toPrimitive case
  // and the second argument - flag - preferred type is a string

  var _toPrimitive$1 = function _toPrimitive(it, S) {
    if (!_isObject$1(it)) return it;
    var fn, val;
    if (S && typeof (fn = it.toString) == 'function' && !_isObject$1(val = fn.call(it))) return val;
    if (typeof (fn = it.valueOf) == 'function' && !_isObject$1(val = fn.call(it))) return val;
    if (!S && typeof (fn = it.toString) == 'function' && !_isObject$1(val = fn.call(it))) return val;
    throw TypeError("Can't convert object to primitive value");
  };

  var dP$6 = Object.defineProperty;
  var f$8 = _descriptors$1 ? Object.defineProperty : function defineProperty(O, P, Attributes) {
    _anObject$1(O);
    P = _toPrimitive$1(P, true);
    _anObject$1(Attributes);
    if (_ie8DomDefine$1) try {
      return dP$6(O, P, Attributes);
    } catch (e) {
      /* empty */
    }
    if ('get' in Attributes || 'set' in Attributes) throw TypeError('Accessors not supported!');
    if ('value' in Attributes) O[P] = Attributes.value;
    return O;
  };
  var _objectDp$1 = {
    f: f$8
  };

  var _propertyDesc$1 = function _propertyDesc(bitmap, value) {
    return {
      enumerable: !(bitmap & 1),
      configurable: !(bitmap & 2),
      writable: !(bitmap & 4),
      value: value
    };
  };

  var _hide$1 = _descriptors$1 ? function (object, key, value) {
    return _objectDp$1.f(object, key, _propertyDesc$1(1, value));
  } : function (object, key, value) {
    object[key] = value;
    return object;
  };

  var hasOwnProperty$1 = {}.hasOwnProperty;

  var _has$1 = function _has(it, key) {
    return hasOwnProperty$1.call(it, key);
  };

  var PROTOTYPE$3 = 'prototype';

  var $export$1 = function $export(type, name, source) {
    var IS_FORCED = type & $export.F;
    var IS_GLOBAL = type & $export.G;
    var IS_STATIC = type & $export.S;
    var IS_PROTO = type & $export.P;
    var IS_BIND = type & $export.B;
    var IS_WRAP = type & $export.W;
    var exports = IS_GLOBAL ? _core$1 : _core$1[name] || (_core$1[name] = {});
    var expProto = exports[PROTOTYPE$3];
    var target = IS_GLOBAL ? _global$1 : IS_STATIC ? _global$1[name] : (_global$1[name] || {})[PROTOTYPE$3];
    var key, own, out;
    if (IS_GLOBAL) source = name;

    for (key in source) {
      // contains in native
      own = !IS_FORCED && target && target[key] !== undefined;
      if (own && _has$1(exports, key)) continue; // export native or passed

      out = own ? target[key] : source[key]; // prevent global pollution for namespaces

      exports[key] = IS_GLOBAL && typeof target[key] != 'function' ? source[key] // bind timers to global for call from export context
      : IS_BIND && own ? _ctx$1(out, _global$1) // wrap global constructors for prevent change them in library
      : IS_WRAP && target[key] == out ? function (C) {
        var F = function F(a, b, c) {
          if (this instanceof C) {
            switch (arguments.length) {
              case 0:
                return new C();

              case 1:
                return new C(a);

              case 2:
                return new C(a, b);
            }

            return new C(a, b, c);
          }

          return C.apply(this, arguments);
        };

        F[PROTOTYPE$3] = C[PROTOTYPE$3];
        return F; // make static versions for prototype methods
      }(out) : IS_PROTO && typeof out == 'function' ? _ctx$1(Function.call, out) : out; // export proto methods to core.%CONSTRUCTOR%.methods.%NAME%

      if (IS_PROTO) {
        (exports.virtual || (exports.virtual = {}))[key] = out; // export proto methods to core.%CONSTRUCTOR%.prototype.%NAME%

        if (type & $export.R && expProto && !expProto[key]) _hide$1(expProto, key, out);
      }
    }
  }; // type bitmap


  $export$1.F = 1; // forced

  $export$1.G = 2; // global

  $export$1.S = 4; // static

  $export$1.P = 8; // proto

  $export$1.B = 16; // bind

  $export$1.W = 32; // wrap

  $export$1.U = 64; // safe

  $export$1.R = 128; // real proto method for `library`

  var _export$1 = $export$1;

  _export$1(_export$1.G, {
    global: _global$1
  });

  var global$1 = _core$1.global;

  var lib = createCommonjsModule(function (module) {

    var _global = _interopRequireDefault(global$1);

    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : {
        "default": obj
      };
    }

    if (_global["default"]._babelPolyfill && typeof console !== "undefined" && console.warn) {
      console.warn("@babel/polyfill is loaded more than once on this page. This is probably not desirable/intended " + "and may have consequences if different versions of the polyfills are applied sequentially. " + "If you do need to load the polyfill more than once, use @babel/polyfill/noConflict " + "instead to bypass the warning.");
    }

    _global["default"]._babelPolyfill = true;
  });
  unwrapExports(lib);

  var audioContext_1 = createCommonjsModule(function (module, exports) {

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var AudioContext = window.AudioContext || window.webkitAudioContext;
    /**
     * Expose a unique audio context singleton as the default audio
     * context used by the components of the Waves Audio library and
     * applications using the library.
     *
     * @type AudioContext
     * @name audioContext
     * @constant
     * @global
     * @instance
     *
     * @example
     * import * as audio from 'waves-audio';
     * const audioContext = audio.audioContext;
     */

    var audioContext = null;
    if (AudioContext) audioContext = new AudioContext();
    exports.default = audioContext;
  });
  unwrapExports(audioContext_1);

  // 7.2.1 RequireObjectCoercible(argument)
  var _defined$1 = function _defined(it) {
    if (it == undefined) throw TypeError("Can't call method on  " + it);
    return it;
  };

  var _toObject$1 = function _toObject(it) {
    return Object(_defined$1(it));
  };

  var _library$1 = true;

  var _shared$1 = createCommonjsModule(function (module) {
    var SHARED = '__core-js_shared__';
    var store = _global$1[SHARED] || (_global$1[SHARED] = {});
    (module.exports = function (key, value) {
      return store[key] || (store[key] = value !== undefined ? value : {});
    })('versions', []).push({
      version: _core$1.version,
      mode:  'pure' ,
      copyright: 'Â© 2019 Denis Pushkarev (zloirock.ru)'
    });
  });

  var id$2 = 0;
  var px$1 = Math.random();

  var _uid$1 = function _uid(key) {
    return 'Symbol('.concat(key === undefined ? '' : key, ')_', (++id$2 + px$1).toString(36));
  };

  var shared$1 = _shared$1('keys');

  var _sharedKey$1 = function _sharedKey(key) {
    return shared$1[key] || (shared$1[key] = _uid$1(key));
  };

  var IE_PROTO$3 = _sharedKey$1('IE_PROTO');
  var ObjectProto$2 = Object.prototype;

  var _objectGpo$1 = Object.getPrototypeOf || function (O) {
    O = _toObject$1(O);
    if (_has$1(O, IE_PROTO$3)) return O[IE_PROTO$3];

    if (typeof O.constructor == 'function' && O instanceof O.constructor) {
      return O.constructor.prototype;
    }

    return O instanceof Object ? ObjectProto$2 : null;
  };

  var _objectSap$1 = function _objectSap(KEY, exec) {
    var fn = (_core$1.Object || {})[KEY] || Object[KEY];
    var exp = {};
    exp[KEY] = exec(fn);
    _export$1(_export$1.S + _export$1.F * _fails$1(function () {
      fn(1);
    }), 'Object', exp);
  };

  _objectSap$1('getPrototypeOf', function () {
    return function getPrototypeOf(it) {
      return _objectGpo$1(_toObject$1(it));
    };
  });

  var getPrototypeOf = _core$1.Object.getPrototypeOf;

  var getPrototypeOf$1 = createCommonjsModule(function (module) {
    module.exports = {
      "default": getPrototypeOf,
      __esModule: true
    };
  });
  unwrapExports(getPrototypeOf$1);

  var classCallCheck = createCommonjsModule(function (module, exports) {

    exports.__esModule = true;

    exports.default = function (instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    };
  });
  unwrapExports(classCallCheck);

  _export$1(_export$1.S + _export$1.F * !_descriptors$1, 'Object', {
    defineProperty: _objectDp$1.f
  });

  var $Object = _core$1.Object;

  var defineProperty$1 = function defineProperty(it, key, desc) {
    return $Object.defineProperty(it, key, desc);
  };

  var defineProperty$2 = createCommonjsModule(function (module) {
    module.exports = {
      "default": defineProperty$1,
      __esModule: true
    };
  });
  unwrapExports(defineProperty$2);

  var createClass = createCommonjsModule(function (module, exports) {

    exports.__esModule = true;

    var _defineProperty2 = _interopRequireDefault(defineProperty$2);

    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : {
        default: obj
      };
    }

    exports.default = function () {
      function defineProperties(target, props) {
        for (var i = 0; i < props.length; i++) {
          var descriptor = props[i];
          descriptor.enumerable = descriptor.enumerable || false;
          descriptor.configurable = true;
          if ("value" in descriptor) descriptor.writable = true;
          (0, _defineProperty2.default)(target, descriptor.key, descriptor);
        }
      }

      return function (Constructor, protoProps, staticProps) {
        if (protoProps) defineProperties(Constructor.prototype, protoProps);
        if (staticProps) defineProperties(Constructor, staticProps);
        return Constructor;
      };
    }();
  });
  unwrapExports(createClass);

  // 7.1.4 ToInteger
  var ceil$1 = Math.ceil;
  var floor$4 = Math.floor;

  var _toInteger$1 = function _toInteger(it) {
    return isNaN(it = +it) ? 0 : (it > 0 ? floor$4 : ceil$1)(it);
  };

  // false -> String#codePointAt

  var _stringAt$1 = function _stringAt(TO_STRING) {
    return function (that, pos) {
      var s = String(_defined$1(that));
      var i = _toInteger$1(pos);
      var l = s.length;
      var a, b;
      if (i < 0 || i >= l) return TO_STRING ? '' : undefined;
      a = s.charCodeAt(i);
      return a < 0xd800 || a > 0xdbff || i + 1 === l || (b = s.charCodeAt(i + 1)) < 0xdc00 || b > 0xdfff ? TO_STRING ? s.charAt(i) : a : TO_STRING ? s.slice(i, i + 2) : (a - 0xd800 << 10) + (b - 0xdc00) + 0x10000;
    };
  };

  var _redefine$1 = _hide$1;

  var _iterators$1 = {};

  var toString$2 = {}.toString;

  var _cof$1 = function _cof(it) {
    return toString$2.call(it).slice(8, -1);
  };

  // eslint-disable-next-line no-prototype-builtins

  var _iobject$1 = Object('z').propertyIsEnumerable(0) ? Object : function (it) {
    return _cof$1(it) == 'String' ? it.split('') : Object(it);
  };

  var _toIobject$1 = function _toIobject(it) {
    return _iobject$1(_defined$1(it));
  };

  var min$3 = Math.min;

  var _toLength$1 = function _toLength(it) {
    return it > 0 ? min$3(_toInteger$1(it), 0x1fffffffffffff) : 0; // pow(2, 53) - 1 == 9007199254740991
  };

  var max$2 = Math.max;
  var min$4 = Math.min;

  var _toAbsoluteIndex$1 = function _toAbsoluteIndex(index, length) {
    index = _toInteger$1(index);
    return index < 0 ? max$2(index + length, 0) : min$4(index, length);
  };

  // true  -> Array#includes

  var _arrayIncludes$1 = function _arrayIncludes(IS_INCLUDES) {
    return function ($this, el, fromIndex) {
      var O = _toIobject$1($this);
      var length = _toLength$1(O.length);
      var index = _toAbsoluteIndex$1(fromIndex, length);
      var value; // Array#includes uses SameValueZero equality algorithm
      // eslint-disable-next-line no-self-compare

      if (IS_INCLUDES && el != el) while (length > index) {
        value = O[index++]; // eslint-disable-next-line no-self-compare

        if (value != value) return true; // Array#indexOf ignores holes, Array#includes - not
      } else for (; length > index; index++) {
        if (IS_INCLUDES || index in O) {
          if (O[index] === el) return IS_INCLUDES || index || 0;
        }
      }
      return !IS_INCLUDES && -1;
    };
  };

  var arrayIndexOf$1 = _arrayIncludes$1(false);
  var IE_PROTO$4 = _sharedKey$1('IE_PROTO');

  var _objectKeysInternal$1 = function _objectKeysInternal(object, names) {
    var O = _toIobject$1(object);
    var i = 0;
    var result = [];
    var key;

    for (key in O) {
      if (key != IE_PROTO$4) _has$1(O, key) && result.push(key);
    } // Don't enum bug & hidden keys


    while (names.length > i) {
      if (_has$1(O, key = names[i++])) {
        ~arrayIndexOf$1(result, key) || result.push(key);
      }
    }

    return result;
  };

  // IE 8- don't enum bug keys
  var _enumBugKeys$1 = 'constructor,hasOwnProperty,isPrototypeOf,propertyIsEnumerable,toLocaleString,toString,valueOf'.split(',');

  var _objectKeys$1 = Object.keys || function keys(O) {
    return _objectKeysInternal$1(O, _enumBugKeys$1);
  };

  var _objectDps$1 = _descriptors$1 ? Object.defineProperties : function defineProperties(O, Properties) {
    _anObject$1(O);
    var keys = _objectKeys$1(Properties);
    var length = keys.length;
    var i = 0;
    var P;

    while (length > i) {
      _objectDp$1.f(O, P = keys[i++], Properties[P]);
    }

    return O;
  };

  var document$4 = _global$1.document;

  var _html$1 = document$4 && document$4.documentElement;

  var IE_PROTO$5 = _sharedKey$1('IE_PROTO');

  var Empty$1 = function Empty() {
    /* empty */
  };

  var PROTOTYPE$4 = 'prototype'; // Create object with fake `null` prototype: use iframe Object with cleared prototype

  var _createDict$1 = function createDict() {
    // Thrash, waste and sodomy: IE GC bug
    var iframe = _domCreate$1('iframe');
    var i = _enumBugKeys$1.length;
    var lt = '<';
    var gt = '>';
    var iframeDocument;
    iframe.style.display = 'none';
    _html$1.appendChild(iframe);
    iframe.src = 'javascript:'; // eslint-disable-line no-script-url
    // createDict = iframe.contentWindow.Object;
    // html.removeChild(iframe);

    iframeDocument = iframe.contentWindow.document;
    iframeDocument.open();
    iframeDocument.write(lt + 'script' + gt + 'document.F=Object' + lt + '/script' + gt);
    iframeDocument.close();
    _createDict$1 = iframeDocument.F;

    while (i--) {
      delete _createDict$1[PROTOTYPE$4][_enumBugKeys$1[i]];
    }

    return _createDict$1();
  };

  var _objectCreate$1 = Object.create || function create(O, Properties) {
    var result;

    if (O !== null) {
      Empty$1[PROTOTYPE$4] = _anObject$1(O);
      result = new Empty$1();
      Empty$1[PROTOTYPE$4] = null; // add "__proto__" for Object.getPrototypeOf polyfill

      result[IE_PROTO$5] = O;
    } else result = _createDict$1();

    return Properties === undefined ? result : _objectDps$1(result, Properties);
  };

  var _wks$1 = createCommonjsModule(function (module) {
    var store = _shared$1('wks');
    var Symbol = _global$1.Symbol;
    var USE_SYMBOL = typeof Symbol == 'function';

    var $exports = module.exports = function (name) {
      return store[name] || (store[name] = USE_SYMBOL && Symbol[name] || (USE_SYMBOL ? Symbol : _uid$1)('Symbol.' + name));
    };

    $exports.store = store;
  });

  var def$1 = _objectDp$1.f;
  var TAG$2 = _wks$1('toStringTag');

  var _setToStringTag$1 = function _setToStringTag(it, tag, stat) {
    if (it && !_has$1(it = stat ? it : it.prototype, TAG$2)) def$1(it, TAG$2, {
      configurable: true,
      value: tag
    });
  };

  var IteratorPrototype$1 = {}; // 25.1.2.1.1 %IteratorPrototype%[@@iterator]()

  _hide$1(IteratorPrototype$1, _wks$1('iterator'), function () {
    return this;
  });

  var _iterCreate$1 = function _iterCreate(Constructor, NAME, next) {
    Constructor.prototype = _objectCreate$1(IteratorPrototype$1, {
      next: _propertyDesc$1(1, next)
    });
    _setToStringTag$1(Constructor, NAME + ' Iterator');
  };

  var ITERATOR$5 = _wks$1('iterator');
  var BUGGY$1 = !([].keys && 'next' in [].keys()); // Safari has buggy iterators w/o `next`

  var FF_ITERATOR$1 = '@@iterator';
  var KEYS$1 = 'keys';
  var VALUES$1 = 'values';

  var returnThis$1 = function returnThis() {
    return this;
  };

  var _iterDefine$1 = function _iterDefine(Base, NAME, Constructor, next, DEFAULT, IS_SET, FORCED) {
    _iterCreate$1(Constructor, NAME, next);

    var getMethod = function getMethod(kind) {
      if (!BUGGY$1 && kind in proto) return proto[kind];

      switch (kind) {
        case KEYS$1:
          return function keys() {
            return new Constructor(this, kind);
          };

        case VALUES$1:
          return function values() {
            return new Constructor(this, kind);
          };
      }

      return function entries() {
        return new Constructor(this, kind);
      };
    };

    var TAG = NAME + ' Iterator';
    var DEF_VALUES = DEFAULT == VALUES$1;
    var VALUES_BUG = false;
    var proto = Base.prototype;
    var $native = proto[ITERATOR$5] || proto[FF_ITERATOR$1] || DEFAULT && proto[DEFAULT];
    var $default = $native || getMethod(DEFAULT);
    var $entries = DEFAULT ? !DEF_VALUES ? $default : getMethod('entries') : undefined;
    var $anyNative = NAME == 'Array' ? proto.entries || $native : $native;
    var methods, key, IteratorPrototype; // Fix native

    if ($anyNative) {
      IteratorPrototype = _objectGpo$1($anyNative.call(new Base()));

      if (IteratorPrototype !== Object.prototype && IteratorPrototype.next) {
        // Set @@toStringTag to native iterators
        _setToStringTag$1(IteratorPrototype, TAG, true); // fix for some old engines
      }
    } // fix Array#{values, @@iterator}.name in V8 / FF


    if (DEF_VALUES && $native && $native.name !== VALUES$1) {
      VALUES_BUG = true;

      $default = function values() {
        return $native.call(this);
      };
    } // Define iterator


    if (( FORCED) && (BUGGY$1 || VALUES_BUG || !proto[ITERATOR$5])) {
      _hide$1(proto, ITERATOR$5, $default);
    } // Plug for library


    _iterators$1[NAME] = $default;
    _iterators$1[TAG] = returnThis$1;

    if (DEFAULT) {
      methods = {
        values: DEF_VALUES ? $default : getMethod(VALUES$1),
        keys: IS_SET ? $default : getMethod(KEYS$1),
        entries: $entries
      };
      if (FORCED) for (key in methods) {
        if (!(key in proto)) _redefine$1(proto, key, methods[key]);
      } else _export$1(_export$1.P + _export$1.F * (BUGGY$1 || VALUES_BUG), NAME, methods);
    }

    return methods;
  };

  var $at$2 = _stringAt$1(true); // 21.1.3.27 String.prototype[@@iterator]()

  _iterDefine$1(String, 'String', function (iterated) {
    this._t = String(iterated); // target

    this._i = 0; // next index
    // 21.1.5.2.1 %StringIteratorPrototype%.next()
  }, function () {
    var O = this._t;
    var index = this._i;
    var point;
    if (index >= O.length) return {
      value: undefined,
      done: true
    };
    point = $at$2(O, index);
    this._i += point.length;
    return {
      value: point,
      done: false
    };
  });

  var _iterStep$1 = function _iterStep(done, value) {
    return {
      value: value,
      done: !!done
    };
  };

  // 22.1.3.13 Array.prototype.keys()
  // 22.1.3.29 Array.prototype.values()
  // 22.1.3.30 Array.prototype[@@iterator]()


  var es6_array_iterator$1 = _iterDefine$1(Array, 'Array', function (iterated, kind) {
    this._t = _toIobject$1(iterated); // target

    this._i = 0; // next index

    this._k = kind; // kind
    // 22.1.5.2.1 %ArrayIteratorPrototype%.next()
  }, function () {
    var O = this._t;
    var kind = this._k;
    var index = this._i++;

    if (!O || index >= O.length) {
      this._t = undefined;
      return _iterStep$1(1);
    }

    if (kind == 'keys') return _iterStep$1(0, index);
    if (kind == 'values') return _iterStep$1(0, O[index]);
    return _iterStep$1(0, [index, O[index]]);
  }, 'values'); // argumentsList[@@iterator] is %ArrayProto_values% (9.4.4.6, 9.4.4.7)

  _iterators$1.Arguments = _iterators$1.Array;

  var TO_STRING_TAG$1 = _wks$1('toStringTag');
  var DOMIterables$1 = ('CSSRuleList,CSSStyleDeclaration,CSSValueList,ClientRectList,DOMRectList,DOMStringList,' + 'DOMTokenList,DataTransferItemList,FileList,HTMLAllCollection,HTMLCollection,HTMLFormElement,HTMLSelectElement,' + 'MediaList,MimeTypeArray,NamedNodeMap,NodeList,PaintRequestList,Plugin,PluginArray,SVGLengthList,SVGNumberList,' + 'SVGPathSegList,SVGPointList,SVGStringList,SVGTransformList,SourceBufferList,StyleSheetList,TextTrackCueList,' + 'TextTrackList,TouchList').split(',');

  for (var i$3 = 0; i$3 < DOMIterables$1.length; i$3++) {
    var NAME$2 = DOMIterables$1[i$3];
    var Collection$1 = _global$1[NAME$2];
    var proto$4 = Collection$1 && Collection$1.prototype;
    if (proto$4 && !proto$4[TO_STRING_TAG$1]) _hide$1(proto$4, TO_STRING_TAG$1, NAME$2);
    _iterators$1[NAME$2] = _iterators$1.Array;
  }

  var f$9 = _wks$1;
  var _wksExt$1 = {
    f: f$9
  };

  var iterator = _wksExt$1.f('iterator');

  var iterator$1 = createCommonjsModule(function (module) {
    module.exports = {
      "default": iterator,
      __esModule: true
    };
  });
  unwrapExports(iterator$1);

  var _meta$1 = createCommonjsModule(function (module) {
    var META = _uid$1('meta');
    var setDesc = _objectDp$1.f;
    var id = 0;

    var isExtensible = Object.isExtensible || function () {
      return true;
    };

    var FREEZE = !_fails$1(function () {
      return isExtensible(Object.preventExtensions({}));
    });

    var setMeta = function setMeta(it) {
      setDesc(it, META, {
        value: {
          i: 'O' + ++id,
          // object ID
          w: {} // weak collections IDs

        }
      });
    };

    var fastKey = function fastKey(it, create) {
      // return primitive with prefix
      if (!_isObject$1(it)) return typeof it == 'symbol' ? it : (typeof it == 'string' ? 'S' : 'P') + it;

      if (!_has$1(it, META)) {
        // can't set metadata to uncaught frozen object
        if (!isExtensible(it)) return 'F'; // not necessary to add metadata

        if (!create) return 'E'; // add missing metadata

        setMeta(it); // return object ID
      }

      return it[META].i;
    };

    var getWeak = function getWeak(it, create) {
      if (!_has$1(it, META)) {
        // can't set metadata to uncaught frozen object
        if (!isExtensible(it)) return true; // not necessary to add metadata

        if (!create) return false; // add missing metadata

        setMeta(it); // return hash weak collections IDs
      }

      return it[META].w;
    }; // add metadata on freeze-family methods calling


    var onFreeze = function onFreeze(it) {
      if (FREEZE && meta.NEED && isExtensible(it) && !_has$1(it, META)) setMeta(it);
      return it;
    };

    var meta = module.exports = {
      KEY: META,
      NEED: false,
      fastKey: fastKey,
      getWeak: getWeak,
      onFreeze: onFreeze
    };
  });
  var _meta_1$1 = _meta$1.KEY;
  var _meta_2$1 = _meta$1.NEED;
  var _meta_3$1 = _meta$1.fastKey;
  var _meta_4$1 = _meta$1.getWeak;
  var _meta_5$1 = _meta$1.onFreeze;

  var defineProperty$3 = _objectDp$1.f;

  var _wksDefine$1 = function _wksDefine(name) {
    var $Symbol = _core$1.Symbol || (_core$1.Symbol =  {} );
    if (name.charAt(0) != '_' && !(name in $Symbol)) defineProperty$3($Symbol, name, {
      value: _wksExt$1.f(name)
    });
  };

  var f$a = Object.getOwnPropertySymbols;
  var _objectGops$1 = {
    f: f$a
  };

  var f$b = {}.propertyIsEnumerable;
  var _objectPie$1 = {
    f: f$b
  };

  var _enumKeys$1 = function _enumKeys(it) {
    var result = _objectKeys$1(it);
    var getSymbols = _objectGops$1.f;

    if (getSymbols) {
      var symbols = getSymbols(it);
      var isEnum = _objectPie$1.f;
      var i = 0;
      var key;

      while (symbols.length > i) {
        if (isEnum.call(it, key = symbols[i++])) result.push(key);
      }
    }

    return result;
  };

  var _isArray$1 = Array.isArray || function isArray(arg) {
    return _cof$1(arg) == 'Array';
  };

  var hiddenKeys$1 = _enumBugKeys$1.concat('length', 'prototype');

  var f$c = Object.getOwnPropertyNames || function getOwnPropertyNames(O) {
    return _objectKeysInternal$1(O, hiddenKeys$1);
  };

  var _objectGopn$1 = {
    f: f$c
  };

  var gOPN$4 = _objectGopn$1.f;
  var toString$3 = {}.toString;
  var windowNames$1 = typeof window == 'object' && window && Object.getOwnPropertyNames ? Object.getOwnPropertyNames(window) : [];

  var getWindowNames$1 = function getWindowNames(it) {
    try {
      return gOPN$4(it);
    } catch (e) {
      return windowNames$1.slice();
    }
  };

  var f$d = function getOwnPropertyNames(it) {
    return windowNames$1 && toString$3.call(it) == '[object Window]' ? getWindowNames$1(it) : gOPN$4(_toIobject$1(it));
  };

  var _objectGopnExt$1 = {
    f: f$d
  };

  var gOPD$4 = Object.getOwnPropertyDescriptor;
  var f$e = _descriptors$1 ? gOPD$4 : function getOwnPropertyDescriptor(O, P) {
    O = _toIobject$1(O);
    P = _toPrimitive$1(P, true);
    if (_ie8DomDefine$1) try {
      return gOPD$4(O, P);
    } catch (e) {
      /* empty */
    }
    if (_has$1(O, P)) return _propertyDesc$1(!_objectPie$1.f.call(O, P), O[P]);
  };
  var _objectGopd$1 = {
    f: f$e
  };

  var META$1 = _meta$1.KEY;
  var gOPD$5 = _objectGopd$1.f;
  var dP$7 = _objectDp$1.f;
  var gOPN$5 = _objectGopnExt$1.f;
  var $Symbol$1 = _global$1.Symbol;
  var $JSON$1 = _global$1.JSON;

  var _stringify$1 = $JSON$1 && $JSON$1.stringify;

  var PROTOTYPE$5 = 'prototype';
  var HIDDEN$1 = _wks$1('_hidden');
  var TO_PRIMITIVE$2 = _wks$1('toPrimitive');
  var isEnum$2 = {}.propertyIsEnumerable;
  var SymbolRegistry$1 = _shared$1('symbol-registry');
  var AllSymbols$1 = _shared$1('symbols');
  var OPSymbols$1 = _shared$1('op-symbols');
  var ObjectProto$3 = Object[PROTOTYPE$5];
  var USE_NATIVE$2 = typeof $Symbol$1 == 'function' && !!_objectGops$1.f;
  var QObject$1 = _global$1.QObject; // Don't use setters in Qt Script, https://github.com/zloirock/core-js/issues/173

  var setter$1 = !QObject$1 || !QObject$1[PROTOTYPE$5] || !QObject$1[PROTOTYPE$5].findChild; // fallback for old Android, https://code.google.com/p/v8/issues/detail?id=687

  var setSymbolDesc$1 = _descriptors$1 && _fails$1(function () {
    return _objectCreate$1(dP$7({}, 'a', {
      get: function get() {
        return dP$7(this, 'a', {
          value: 7
        }).a;
      }
    })).a != 7;
  }) ? function (it, key, D) {
    var protoDesc = gOPD$5(ObjectProto$3, key);
    if (protoDesc) delete ObjectProto$3[key];
    dP$7(it, key, D);
    if (protoDesc && it !== ObjectProto$3) dP$7(ObjectProto$3, key, protoDesc);
  } : dP$7;

  var wrap$2 = function wrap(tag) {
    var sym = AllSymbols$1[tag] = _objectCreate$1($Symbol$1[PROTOTYPE$5]);

    sym._k = tag;
    return sym;
  };

  var isSymbol$1 = USE_NATIVE$2 && typeof $Symbol$1.iterator == 'symbol' ? function (it) {
    return typeof it == 'symbol';
  } : function (it) {
    return it instanceof $Symbol$1;
  };

  var $defineProperty$1 = function defineProperty(it, key, D) {
    if (it === ObjectProto$3) $defineProperty$1(OPSymbols$1, key, D);
    _anObject$1(it);
    key = _toPrimitive$1(key, true);
    _anObject$1(D);

    if (_has$1(AllSymbols$1, key)) {
      if (!D.enumerable) {
        if (!_has$1(it, HIDDEN$1)) dP$7(it, HIDDEN$1, _propertyDesc$1(1, {}));
        it[HIDDEN$1][key] = true;
      } else {
        if (_has$1(it, HIDDEN$1) && it[HIDDEN$1][key]) it[HIDDEN$1][key] = false;
        D = _objectCreate$1(D, {
          enumerable: _propertyDesc$1(0, false)
        });
      }

      return setSymbolDesc$1(it, key, D);
    }

    return dP$7(it, key, D);
  };

  var $defineProperties$1 = function defineProperties(it, P) {
    _anObject$1(it);
    var keys = _enumKeys$1(P = _toIobject$1(P));
    var i = 0;
    var l = keys.length;
    var key;

    while (l > i) {
      $defineProperty$1(it, key = keys[i++], P[key]);
    }

    return it;
  };

  var $create$1 = function create(it, P) {
    return P === undefined ? _objectCreate$1(it) : $defineProperties$1(_objectCreate$1(it), P);
  };

  var $propertyIsEnumerable$1 = function propertyIsEnumerable(key) {
    var E = isEnum$2.call(this, key = _toPrimitive$1(key, true));
    if (this === ObjectProto$3 && _has$1(AllSymbols$1, key) && !_has$1(OPSymbols$1, key)) return false;
    return E || !_has$1(this, key) || !_has$1(AllSymbols$1, key) || _has$1(this, HIDDEN$1) && this[HIDDEN$1][key] ? E : true;
  };

  var $getOwnPropertyDescriptor$2 = function getOwnPropertyDescriptor(it, key) {
    it = _toIobject$1(it);
    key = _toPrimitive$1(key, true);
    if (it === ObjectProto$3 && _has$1(AllSymbols$1, key) && !_has$1(OPSymbols$1, key)) return;
    var D = gOPD$5(it, key);
    if (D && _has$1(AllSymbols$1, key) && !(_has$1(it, HIDDEN$1) && it[HIDDEN$1][key])) D.enumerable = true;
    return D;
  };

  var $getOwnPropertyNames$1 = function getOwnPropertyNames(it) {
    var names = gOPN$5(_toIobject$1(it));
    var result = [];
    var i = 0;
    var key;

    while (names.length > i) {
      if (!_has$1(AllSymbols$1, key = names[i++]) && key != HIDDEN$1 && key != META$1) result.push(key);
    }

    return result;
  };

  var $getOwnPropertySymbols$1 = function getOwnPropertySymbols(it) {
    var IS_OP = it === ObjectProto$3;
    var names = gOPN$5(IS_OP ? OPSymbols$1 : _toIobject$1(it));
    var result = [];
    var i = 0;
    var key;

    while (names.length > i) {
      if (_has$1(AllSymbols$1, key = names[i++]) && (IS_OP ? _has$1(ObjectProto$3, key) : true)) result.push(AllSymbols$1[key]);
    }

    return result;
  }; // 19.4.1.1 Symbol([description])


  if (!USE_NATIVE$2) {
    $Symbol$1 = function Symbol() {
      if (this instanceof $Symbol$1) throw TypeError('Symbol is not a constructor!');
      var tag = _uid$1(arguments.length > 0 ? arguments[0] : undefined);

      var $set = function $set(value) {
        if (this === ObjectProto$3) $set.call(OPSymbols$1, value);
        if (_has$1(this, HIDDEN$1) && _has$1(this[HIDDEN$1], tag)) this[HIDDEN$1][tag] = false;
        setSymbolDesc$1(this, tag, _propertyDesc$1(1, value));
      };

      if (_descriptors$1 && setter$1) setSymbolDesc$1(ObjectProto$3, tag, {
        configurable: true,
        set: $set
      });
      return wrap$2(tag);
    };

    _redefine$1($Symbol$1[PROTOTYPE$5], 'toString', function toString() {
      return this._k;
    });
    _objectGopd$1.f = $getOwnPropertyDescriptor$2;
    _objectDp$1.f = $defineProperty$1;
    _objectGopn$1.f = _objectGopnExt$1.f = $getOwnPropertyNames$1;
    _objectPie$1.f = $propertyIsEnumerable$1;
    _objectGops$1.f = $getOwnPropertySymbols$1;

    if (_descriptors$1 && !_library$1) {
      _redefine$1(ObjectProto$3, 'propertyIsEnumerable', $propertyIsEnumerable$1, true);
    }

    _wksExt$1.f = function (name) {
      return wrap$2(_wks$1(name));
    };
  }

  _export$1(_export$1.G + _export$1.W + _export$1.F * !USE_NATIVE$2, {
    Symbol: $Symbol$1
  });

  for (var es6Symbols$1 = // 19.4.2.2, 19.4.2.3, 19.4.2.4, 19.4.2.6, 19.4.2.8, 19.4.2.9, 19.4.2.10, 19.4.2.11, 19.4.2.12, 19.4.2.13, 19.4.2.14
  'hasInstance,isConcatSpreadable,iterator,match,replace,search,species,split,toPrimitive,toStringTag,unscopables'.split(','), j$2 = 0; es6Symbols$1.length > j$2;) {
    _wks$1(es6Symbols$1[j$2++]);
  }

  for (var wellKnownSymbols$1 = _objectKeys$1(_wks$1.store), k$1 = 0; wellKnownSymbols$1.length > k$1;) {
    _wksDefine$1(wellKnownSymbols$1[k$1++]);
  }

  _export$1(_export$1.S + _export$1.F * !USE_NATIVE$2, 'Symbol', {
    // 19.4.2.1 Symbol.for(key)
    'for': function _for(key) {
      return _has$1(SymbolRegistry$1, key += '') ? SymbolRegistry$1[key] : SymbolRegistry$1[key] = $Symbol$1(key);
    },
    // 19.4.2.5 Symbol.keyFor(sym)
    keyFor: function keyFor(sym) {
      if (!isSymbol$1(sym)) throw TypeError(sym + ' is not a symbol!');

      for (var key in SymbolRegistry$1) {
        if (SymbolRegistry$1[key] === sym) return key;
      }
    },
    useSetter: function useSetter() {
      setter$1 = true;
    },
    useSimple: function useSimple() {
      setter$1 = false;
    }
  });
  _export$1(_export$1.S + _export$1.F * !USE_NATIVE$2, 'Object', {
    // 19.1.2.2 Object.create(O [, Properties])
    create: $create$1,
    // 19.1.2.4 Object.defineProperty(O, P, Attributes)
    defineProperty: $defineProperty$1,
    // 19.1.2.3 Object.defineProperties(O, Properties)
    defineProperties: $defineProperties$1,
    // 19.1.2.6 Object.getOwnPropertyDescriptor(O, P)
    getOwnPropertyDescriptor: $getOwnPropertyDescriptor$2,
    // 19.1.2.7 Object.getOwnPropertyNames(O)
    getOwnPropertyNames: $getOwnPropertyNames$1,
    // 19.1.2.8 Object.getOwnPropertySymbols(O)
    getOwnPropertySymbols: $getOwnPropertySymbols$1
  }); // Chrome 38 and 39 `Object.getOwnPropertySymbols` fails on primitives
  // https://bugs.chromium.org/p/v8/issues/detail?id=3443

  var FAILS_ON_PRIMITIVES$1 = _fails$1(function () {
    _objectGops$1.f(1);
  });
  _export$1(_export$1.S + _export$1.F * FAILS_ON_PRIMITIVES$1, 'Object', {
    getOwnPropertySymbols: function getOwnPropertySymbols(it) {
      return _objectGops$1.f(_toObject$1(it));
    }
  }); // 24.3.2 JSON.stringify(value [, replacer [, space]])

  $JSON$1 && _export$1(_export$1.S + _export$1.F * (!USE_NATIVE$2 || _fails$1(function () {
    var S = $Symbol$1(); // MS Edge converts symbol values to JSON as {}
    // WebKit converts symbol values to JSON as null
    // V8 throws on boxed symbols

    return _stringify$1([S]) != '[null]' || _stringify$1({
      a: S
    }) != '{}' || _stringify$1(Object(S)) != '{}';
  })), 'JSON', {
    stringify: function stringify(it) {
      var args = [it];
      var i = 1;
      var replacer, $replacer;

      while (arguments.length > i) {
        args.push(arguments[i++]);
      }

      $replacer = replacer = args[1];
      if (!_isObject$1(replacer) && it === undefined || isSymbol$1(it)) return; // IE8 returns string on undefined

      if (!_isArray$1(replacer)) replacer = function replacer(key, value) {
        if (typeof $replacer == 'function') value = $replacer.call(this, key, value);
        if (!isSymbol$1(value)) return value;
      };
      args[1] = replacer;
      return _stringify$1.apply($JSON$1, args);
    }
  }); // 19.4.3.4 Symbol.prototype[@@toPrimitive](hint)

  $Symbol$1[PROTOTYPE$5][TO_PRIMITIVE$2] || _hide$1($Symbol$1[PROTOTYPE$5], TO_PRIMITIVE$2, $Symbol$1[PROTOTYPE$5].valueOf); // 19.4.3.5 Symbol.prototype[@@toStringTag]

  _setToStringTag$1($Symbol$1, 'Symbol'); // 20.2.1.9 Math[@@toStringTag]

  _setToStringTag$1(Math, 'Math', true); // 24.3.3 JSON[@@toStringTag]

  _setToStringTag$1(_global$1.JSON, 'JSON', true);

  _wksDefine$1('asyncIterator');

  _wksDefine$1('observable');

  var symbol = _core$1.Symbol;

  var symbol$1 = createCommonjsModule(function (module) {
    module.exports = {
      "default": symbol,
      __esModule: true
    };
  });
  unwrapExports(symbol$1);

  var _typeof_1 = createCommonjsModule(function (module, exports) {

    exports.__esModule = true;

    var _iterator2 = _interopRequireDefault(iterator$1);

    var _symbol2 = _interopRequireDefault(symbol$1);

    var _typeof = typeof _symbol2.default === "function" && typeof _iterator2.default === "symbol" ? function (obj) {
      return typeof obj;
    } : function (obj) {
      return obj && typeof _symbol2.default === "function" && obj.constructor === _symbol2.default && obj !== _symbol2.default.prototype ? "symbol" : typeof obj;
    };

    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : {
        default: obj
      };
    }

    exports.default = typeof _symbol2.default === "function" && _typeof(_iterator2.default) === "symbol" ? function (obj) {
      return typeof obj === "undefined" ? "undefined" : _typeof(obj);
    } : function (obj) {
      return obj && typeof _symbol2.default === "function" && obj.constructor === _symbol2.default && obj !== _symbol2.default.prototype ? "symbol" : typeof obj === "undefined" ? "undefined" : _typeof(obj);
    };
  });

  unwrapExports(_typeof_1);

  var possibleConstructorReturn = createCommonjsModule(function (module, exports) {

    exports.__esModule = true;

    var _typeof3 = _interopRequireDefault(_typeof_1);

    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : {
        default: obj
      };
    }

    exports.default = function (self, call) {
      if (!self) {
        throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
      }

      return call && ((typeof call === "undefined" ? "undefined" : (0, _typeof3.default)(call)) === "object" || typeof call === "function") ? call : self;
    };
  });
  unwrapExports(possibleConstructorReturn);

  /* eslint-disable no-proto */

  var check$1 = function check(O, proto) {
    _anObject$1(O);
    if (!_isObject$1(proto) && proto !== null) throw TypeError(proto + ": can't set as prototype!");
  };

  var _setProto$1 = {
    set: Object.setPrototypeOf || ('__proto__' in {} ? // eslint-disable-line
    function (test, buggy, set) {
      try {
        set = _ctx$1(Function.call, _objectGopd$1.f(Object.prototype, '__proto__').set, 2);
        set(test, []);
        buggy = !(test instanceof Array);
      } catch (e) {
        buggy = true;
      }

      return function setPrototypeOf(O, proto) {
        check$1(O, proto);
        if (buggy) O.__proto__ = proto;else set(O, proto);
        return O;
      };
    }({}, false) : undefined),
    check: check$1
  };

  _export$1(_export$1.S, 'Object', {
    setPrototypeOf: _setProto$1.set
  });

  var setPrototypeOf$1 = _core$1.Object.setPrototypeOf;

  var setPrototypeOf$2 = createCommonjsModule(function (module) {
    module.exports = {
      "default": setPrototypeOf$1,
      __esModule: true
    };
  });
  unwrapExports(setPrototypeOf$2);

  _export$1(_export$1.S, 'Object', {
    create: _objectCreate$1
  });

  var $Object$1 = _core$1.Object;

  var create = function create(P, D) {
    return $Object$1.create(P, D);
  };

  var create$1 = createCommonjsModule(function (module) {
    module.exports = {
      "default": create,
      __esModule: true
    };
  });
  unwrapExports(create$1);

  var inherits = createCommonjsModule(function (module, exports) {

    exports.__esModule = true;

    var _setPrototypeOf2 = _interopRequireDefault(setPrototypeOf$2);

    var _create2 = _interopRequireDefault(create$1);

    var _typeof3 = _interopRequireDefault(_typeof_1);

    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : {
        default: obj
      };
    }

    exports.default = function (subClass, superClass) {
      if (typeof superClass !== "function" && superClass !== null) {
        throw new TypeError("Super expression must either be null or a function, not " + (typeof superClass === "undefined" ? "undefined" : (0, _typeof3.default)(superClass)));
      }

      subClass.prototype = (0, _create2.default)(superClass && superClass.prototype, {
        constructor: {
          value: subClass,
          enumerable: false,
          writable: true,
          configurable: true
        }
      });
      if (superClass) _setPrototypeOf2.default ? (0, _setPrototypeOf2.default)(subClass, superClass) : subClass.__proto__ = superClass;
    };
  });
  unwrapExports(inherits);

  var TimeEngine_1 = createCommonjsModule(function (module, exports) {

    Object.defineProperty(exports, "__esModule", {
      value: true
    });

    var _classCallCheck3 = _interopRequireDefault(classCallCheck);

    var _createClass3 = _interopRequireDefault(createClass);

    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : {
        default: obj
      };
    }
    /**
     * Base class for time engines
     *
     * A time engine generates more or less regular events and/or plays back a
     * media stream. It implements one or multiple interfaces to be driven by a
     * master (i.e. a Scheduler, a Transport or a PlayControl) in synchronization
     * with other engines. The provided interfaces are scheduled, transported,
     * and play-controlled.
     *
     *
     * #### The `scheduled` interface
     *
     * The scheduled interface allows for synchronizing an engine to a monotonous time
     * as it is provided by the Scheduler master.
     *
     * ###### `advanceTime(time :Number) -> {Number}`
     *
     * The `advanceTime` method has to be implemented by an `TimeEngine` as part of the
     * scheduled interface. The method is called by the master (e.g. the scheduler).
     * It generates an event and to returns the time of the next event (i.e. the next
     * call of advanceTime). The returned time has to be greater than the time
     * received as argument of the method. In case that a TimeEngine has to generate
     * multiple events at the same time, the engine has to implement its own loop
     * while(event.time <= time) and return the time of the next event (if any).
     *
     * ###### `resetTime(time=undefined :Number)`
     *
     * The `resetTime` method is provided by the `TimeEngine` base class. An engine may
     * call this method to reset its next event time (e.g. when a parameter is
     * changed that influences the engine's temporal behavior). When no argument
     * is given, the time is reset to the current master time. When calling the
     * method with Infinity the engine is suspended without being removed from the
     * master.
     *
     *
     * #### The `transported` interface
     *
     * The transported interface allows for synchronizing an engine to a position
     * (i.e. media playback time) that can run forward and backward and jump as it
     * is provided by the Transport master.
     *
     * ###### `syncPosition(time :Number, position :Number, speed :Number) -> {Number}`
     *
     * The `syncPositon` method has to be implemented by a `TimeEngine` as part of the
     * transported interface. The method syncPositon is called whenever the master
     * of a transported engine has to (re-)synchronize the engine's position. This
     * is for example required when the master (re-)starts playback, jumps to an
     * arbitrary position, and when reversing playback direction. The method returns
     * the next position of the engine in the given playback direction
     * (i.e. `speed < 0` or `speed > 0`).
     *
     * ###### `advancePosition(time :Number, position :Number, speed :Number) -> {Number}`
     *
     * The `advancePosition` method has to be implemented by a `TimeEngine` as part
     * of the transported interface. The master calls the advancePositon method when
     * the engine's event position is reached. The method generates an event and
     * returns the next position in the given playback direction (i.e. speed < 0 or
     * speed > 0). The returned position has to be greater (i.e. when speed > 0)
     * or less (i.e. when speed < 0) than the position received as argument of the
     * method.
     *
     * ###### `resetPosition(position=undefined :Number)`
     *
     * The resetPosition method is provided by the TimeEngine base class. An engine
     * may call this method to reset its next event position. When no argument
     * is given, the time is reset to the current master time. When calling the
     * method with Infinity the engine is suspended without being removed from
     * the master.
     *
     *
     * #### The speed-controlled interface
     *
     * The "speed-controlled" interface allows for syncronizing an engine that is
     * neither driven through the scheduled nor the transported interface. The
     * interface allows in particular to synchronize engines that assure their own
     * scheduling (i.e. audio player or an oscillator) to the event-based scheduled
     * and transported engines.
     *
     * ###### `syncSpeed(time :Number, position :Number, speed :Number, seek=false :Boolean)`
     *
     * The syncSpeed method has to be implemented by a TimeEngine as part of the
     * speed-controlled interface. The method is called by the master whenever the
     * playback speed changes or the position jumps arbitarily (i.e. on a seek).
     *
     *
     * <hr />
     *
     * Example that shows a `TimeEngine` running in a `Scheduler` that counts up
     * at a given frequency:
     * {@link https://rawgit.com/wavesjs/waves-audio/master/examples/time-engine.html}
     *
     * @example
     * import * as audio from 'waves-audio';
     *
     * class MyEngine extends audio.TimeEngine {
     *   constructor() {
     *     super();
     *     // ...
     *   }
     * }
     *
     */


    var TimeEngine = function () {
      function TimeEngine() {
        (0, _classCallCheck3.default)(this, TimeEngine);
        /**
         * The engine's master.
         *
         * @type {Mixed}
         * @name master
         * @memberof TimeEngine
         */

        this.master = null;
      }
      /**
       * The time engine's current (master) time.
       *
       * @type {Number}
       * @memberof TimeEngine
       * @readonly
       */


      (0, _createClass3.default)(TimeEngine, [{
        key: "resetTime",
        value: function resetTime() {
          var time = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : undefined;
          if (this.master) this.master.resetEngineTime(this, time);
        }
        /**
         * Transported interface
         *   - syncPosition(time, position, speed), called to reposition TimeEngine, returns next position
         *   - advancePosition(time, position, speed), called to generate next event at given time and position, returns next position
         *
         * @static
         * @memberof TimeEngine
         */

      }, {
        key: "resetPosition",
        value: function resetPosition() {
          var position = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : undefined;
          if (this.master) this.master.resetEnginePosition(this, position);
        }
        /**
         * Speed-controlled interface
         *   - syncSpeed(time, position, speed, ), called to
         *
         * @static
         * @memberof TimeEngine
         */

      }, {
        key: "currentTime",
        get: function get() {
          if (this.master) return this.master.currentTime;
          return undefined;
        }
        /**
         * The time engine's current (master) audio time.
         *
         * @type {Number}
         * @memberof TimeEngine
         * @readonly
         */

      }, {
        key: "audioTime",
        get: function get() {
          if (this.master) return this.master.audioTime;
          return undefined;
        }
        /**
         * The time engine's current (master) position.
         *
         * @type {Number}
         * @memberof TimeEngine
         * @readonly
         */

      }, {
        key: "currentPosition",
        get: function get() {
          var master = this.master;
          if (master && master.currentPosition !== undefined) return master.currentPosition;
          return undefined;
        }
        /**
         * Scheduled interface
         *   - advanceTime(time), called to generate next event at given time, returns next time
         *
         * @static
         * @memberof TimeEngine
         */

      }], [{
        key: "implementsScheduled",
        value: function implementsScheduled(engine) {
          return engine.advanceTime && engine.advanceTime instanceof Function;
        }
      }, {
        key: "implementsTransported",
        value: function implementsTransported(engine) {
          return engine.syncPosition && engine.syncPosition instanceof Function && engine.advancePosition && engine.advancePosition instanceof Function;
        }
      }, {
        key: "implementsSpeedControlled",
        value: function implementsSpeedControlled(engine) {
          return engine.syncSpeed && engine.syncSpeed instanceof Function;
        }
      }]);
      return TimeEngine;
    }();

    exports.default = TimeEngine;
  });
  unwrapExports(TimeEngine_1);

  var PriorityQueue_1 = createCommonjsModule(function (module, exports) {

    Object.defineProperty(exports, "__esModule", {
      value: true
    });

    var _classCallCheck3 = _interopRequireDefault(classCallCheck);

    var _createClass3 = _interopRequireDefault(createClass);

    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : {
        default: obj
      };
    } // works by reference


    function swap(arr, i1, i2) {
      var tmp = arr[i1];
      arr[i1] = arr[i2];
      arr[i2] = tmp;
    } // https://jsperf.com/js-for-loop-vs-array-indexof/346


    function indexOf(arr, el) {
      var l = arr.length; // ignore first element as it can't be a entry

      for (var i = 1; i < l; i++) {
        if (arr[i] === el) {
          return i;
        }
      }

      return -1;
    }
    /**
     * Define if `time1` should be lower in the topography than `time2`.
     * Is dynamically affected to the priority queue according to handle `min` and `max` heap.
     *
     * @private
     * @param {Number} time1
     * @param {Number} time2
     * @return {Boolean}
     */


    var _isLowerMaxHeap = function _isLowerMaxHeap(time1, time2) {
      return time1 < time2;
    };

    var _isLowerMinHeap = function _isLowerMinHeap(time1, time2) {
      return time1 > time2;
    };
    /**
     * Define if `time1` should be higher in the topography than `time2`.
     * Is dynamically affected to the priority queue according to handle `min` and `max` heap.
     *
     * @private
     * @param {Number} time1
     * @param {Number} time2
     * @return {Boolean}
     */


    var _isHigherMaxHeap = function _isHigherMaxHeap(time1, time2) {
      return time1 > time2;
    };

    var _isHigherMinHeap = function _isHigherMinHeap(time1, time2) {
      return time1 < time2;
    };

    var POSITIVE_INFINITY = Number.POSITIVE_INFINITY;
    /**
     * Priority queue implementing a binary heap.
     * Acts as a min heap by default, can be dynamically changed to a max heap
     * by setting `reverse` to true.
     *
     * _note_: the queue creates and maintains a new property (i.e. `queueTime`)
     * to each object added.
     *
     * @param {Number} [heapLength=100] - Default size of the array used to create the heap.
     */

    var PriorityQueue = function () {
      function PriorityQueue() {
        var heapLength = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 100;
        (0, _classCallCheck3.default)(this, PriorityQueue);
        /**
         * Pointer to the first empty index of the heap.
         * @type {Number}
         * @memberof PriorityQueue
         * @name _currentLength
         * @private
         */

        this._currentLength = 1;
        /**
         * Array of the sorted indexes of the entries, the actual heap. Ignore the index 0.
         * @type {Array}
         * @memberof PriorityQueue
         * @name _heap
         * @private
         */

        this._heap = new Array(heapLength + 1);
        /**
         * Type of the queue: `min` heap if `false`, `max` heap if `true`
         * @type {Boolean}
         * @memberof PriorityQueue
         * @name _reverse
         * @private
         */

        this._reverse = null; // initialize compare functions

        this.reverse = false;
      }
      /**
       * Time of the first element in the binary heap.
       * @returns {Number}
       */


      (0, _createClass3.default)(PriorityQueue, [{
        key: "_bubbleUp",

        /**
         * Fix the heap by moving an entry to a new upper position.
         *
         * @private
         * @param {Number} startIndex - The index of the entry to move.
         */
        value: function _bubbleUp(startIndex) {
          var entry = this._heap[startIndex];
          var index = startIndex;
          var parentIndex = Math.floor(index / 2);
          var parent = this._heap[parentIndex];

          while (parent && this._isHigher(entry.queueTime, parent.queueTime)) {
            swap(this._heap, index, parentIndex);
            index = parentIndex;
            parentIndex = Math.floor(index / 2);
            parent = this._heap[parentIndex];
          }
        }
        /**
         * Fix the heap by moving an entry to a new lower position.
         *
         * @private
         * @param {Number} startIndex - The index of the entry to move.
         */

      }, {
        key: "_bubbleDown",
        value: function _bubbleDown(startIndex) {
          var entry = this._heap[startIndex];
          var index = startIndex;
          var c1index = index * 2;
          var c2index = c1index + 1;
          var child1 = this._heap[c1index];
          var child2 = this._heap[c2index];

          while (child1 && this._isLower(entry.queueTime, child1.queueTime) || child2 && this._isLower(entry.queueTime, child2.queueTime)) {
            // swap with the minimum child
            var targetIndex = void 0;
            if (child2) targetIndex = this._isHigher(child1.queueTime, child2.queueTime) ? c1index : c2index;else targetIndex = c1index;
            swap(this._heap, index, targetIndex); // update to find next children

            index = targetIndex;
            c1index = index * 2;
            c2index = c1index + 1;
            child1 = this._heap[c1index];
            child2 = this._heap[c2index];
          }
        }
        /**
         * Build the heap (from bottom up).
         */

      }, {
        key: "buildHeap",
        value: function buildHeap() {
          // find the index of the last internal node
          // @todo - make sure that's the right way to do.
          var maxIndex = Math.floor((this._currentLength - 1) / 2);

          for (var i = maxIndex; i > 0; i--) {
            this._bubbleDown(i);
          }
        }
        /**
         * Insert a new object in the binary heap and sort it.
         *
         * @param {Object} entry - Entry to insert.
         * @param {Number} time - Time at which the entry should be orderer.
         * @returns {Number} - Time of the first entry in the heap.
         */

      }, {
        key: "insert",
        value: function insert(entry, time) {
          if (Math.abs(time) !== POSITIVE_INFINITY) {
            entry.queueTime = time; // add the new entry at the end of the heap

            this._heap[this._currentLength] = entry; // bubble it up

            this._bubbleUp(this._currentLength);

            this._currentLength += 1;
            return this.time;
          }

          entry.queueTime = undefined;
          return this.remove(entry);
        }
        /**
         * Move a given entry to a new position.
         *
         * @param {Object} entry - Entry to move.
         * @param {Number} time - Time at which the entry should be orderer.
         * @return {Number} - Time of first entry in the heap.
         */

      }, {
        key: "move",
        value: function move(entry, time) {
          if (Math.abs(time) !== POSITIVE_INFINITY) {
            var index = indexOf(this._heap, entry);

            if (index !== -1) {
              entry.queueTime = time; // define if the entry should be bubbled up or down

              var parent = this._heap[Math.floor(index / 2)];

              if (parent && this._isHigher(time, parent.queueTime)) this._bubbleUp(index);else this._bubbleDown(index);
            }

            return this.time;
          }

          entry.queueTime = undefined;
          return this.remove(entry);
        }
        /**
         * Remove an entry from the heap and fix the heap.
         *
         * @param {Object} entry - Entry to remove.
         * @return {Number} - Time of first entry in the heap.
         */

      }, {
        key: "remove",
        value: function remove(entry) {
          // find the index of the entry
          var index = indexOf(this._heap, entry);

          if (index !== -1) {
            var lastIndex = this._currentLength - 1; // if the entry is the last one

            if (index === lastIndex) {
              // remove the element from heap
              this._heap[lastIndex] = undefined; // update current length

              this._currentLength = lastIndex;
              return this.time;
            } else {
              // swap with the last element of the heap
              swap(this._heap, index, lastIndex); // remove the element from heap

              this._heap[lastIndex] = undefined;

              if (index === 1) {
                this._bubbleDown(1);
              } else {
                // bubble the (ex last) element up or down according to its new context
                var _entry = this._heap[index];

                var parent = this._heap[Math.floor(index / 2)];

                if (parent && this._isHigher(_entry.queueTime, parent.queueTime)) this._bubbleUp(index);else this._bubbleDown(index);
              }
            } // update current length


            this._currentLength = lastIndex;
          }

          return this.time;
        }
        /**
         * Clear the queue.
         */

      }, {
        key: "clear",
        value: function clear() {
          this._currentLength = 1;
          this._heap = new Array(this._heap.length);
        }
        /**
         * Defines if the queue contains the given `entry`.
         *
         * @param {Object} entry - Entry to be checked
         * @return {Boolean}
         */

      }, {
        key: "has",
        value: function has(entry) {
          return this._heap.indexOf(entry) !== -1;
        }
      }, {
        key: "time",
        get: function get() {
          if (this._currentLength > 1) return this._heap[1].queueTime;
          return Infinity;
        }
        /**
         * First element in the binary heap.
         * @returns {Number}
         * @readonly
         */

      }, {
        key: "head",
        get: function get() {
          return this._heap[1];
        }
        /**
         * Change the order of the queue (max heap if true, min heap if false),
         * rebuild the heap with the existing entries.
         *
         * @type {Boolean}
         */

      }, {
        key: "reverse",
        set: function set(value) {
          if (value !== this._reverse) {
            this._reverse = value;

            if (this._reverse === true) {
              this._isLower = _isLowerMaxHeap;
              this._isHigher = _isHigherMaxHeap;
            } else {
              this._isLower = _isLowerMinHeap;
              this._isHigher = _isHigherMinHeap;
            }

            this.buildHeap();
          }
        },
        get: function get() {
          return this._reverse;
        }
      }]);
      return PriorityQueue;
    }();

    exports.default = PriorityQueue;
  });
  unwrapExports(PriorityQueue_1);

  var TAG$3 = _wks$1('toStringTag'); // ES3 wrong here

  var ARG$1 = _cof$1(function () {
    return arguments;
  }()) == 'Arguments'; // fallback for IE11 Script Access Denied error

  var tryGet$1 = function tryGet(it, key) {
    try {
      return it[key];
    } catch (e) {
      /* empty */
    }
  };

  var _classof$1 = function _classof(it) {
    var O, T, B;
    return it === undefined ? 'Undefined' : it === null ? 'Null' // @@toStringTag case
    : typeof (T = tryGet$1(O = Object(it), TAG$3)) == 'string' ? T // builtinTag case
    : ARG$1 ? _cof$1(O) // ES3 arguments fallback
    : (B = _cof$1(O)) == 'Object' && typeof O.callee == 'function' ? 'Arguments' : B;
  };

  var ITERATOR$6 = _wks$1('iterator');

  var core_getIteratorMethod$1 = _core$1.getIteratorMethod = function (it) {
    if (it != undefined) return it[ITERATOR$6] || it['@@iterator'] || _iterators$1[_classof$1(it)];
  };

  var core_getIterator = _core$1.getIterator = function (it) {
    var iterFn = core_getIteratorMethod$1(it);
    if (typeof iterFn != 'function') throw TypeError(it + ' is not iterable!');
    return _anObject$1(iterFn.call(it));
  };

  var getIterator = core_getIterator;

  var getIterator$1 = createCommonjsModule(function (module) {
    module.exports = {
      "default": getIterator,
      __esModule: true
    };
  });
  unwrapExports(getIterator$1);

  var _redefineAll$1 = function _redefineAll(target, src, safe) {
    for (var key in src) {
      if (safe && target[key]) target[key] = src[key];else _hide$1(target, key, src[key]);
    }

    return target;
  };

  var _anInstance$1 = function _anInstance(it, Constructor, name, forbiddenField) {
    if (!(it instanceof Constructor) || forbiddenField !== undefined && forbiddenField in it) {
      throw TypeError(name + ': incorrect invocation!');
    }

    return it;
  };

  var _iterCall$1 = function _iterCall(iterator, fn, value, entries) {
    try {
      return entries ? fn(_anObject$1(value)[0], value[1]) : fn(value); // 7.4.6 IteratorClose(iterator, completion)
    } catch (e) {
      var ret = iterator['return'];
      if (ret !== undefined) _anObject$1(ret.call(iterator));
      throw e;
    }
  };

  var ITERATOR$7 = _wks$1('iterator');
  var ArrayProto$2 = Array.prototype;

  var _isArrayIter$1 = function _isArrayIter(it) {
    return it !== undefined && (_iterators$1.Array === it || ArrayProto$2[ITERATOR$7] === it);
  };

  var _forOf$1 = createCommonjsModule(function (module) {
    var BREAK = {};
    var RETURN = {};

    var exports = module.exports = function (iterable, entries, fn, that, ITERATOR) {
      var iterFn = ITERATOR ? function () {
        return iterable;
      } : core_getIteratorMethod$1(iterable);
      var f = _ctx$1(fn, that, entries ? 2 : 1);
      var index = 0;
      var length, step, iterator, result;
      if (typeof iterFn != 'function') throw TypeError(iterable + ' is not iterable!'); // fast case for arrays with default iterator

      if (_isArrayIter$1(iterFn)) for (length = _toLength$1(iterable.length); length > index; index++) {
        result = entries ? f(_anObject$1(step = iterable[index])[0], step[1]) : f(iterable[index]);
        if (result === BREAK || result === RETURN) return result;
      } else for (iterator = iterFn.call(iterable); !(step = iterator.next()).done;) {
        result = _iterCall$1(iterator, f, step.value, entries);
        if (result === BREAK || result === RETURN) return result;
      }
    };

    exports.BREAK = BREAK;
    exports.RETURN = RETURN;
  });

  var SPECIES$4 = _wks$1('species');

  var _setSpecies$1 = function _setSpecies(KEY) {
    var C = typeof _core$1[KEY] == 'function' ? _core$1[KEY] : _global$1[KEY];
    if (_descriptors$1 && C && !C[SPECIES$4]) _objectDp$1.f(C, SPECIES$4, {
      configurable: true,
      get: function get() {
        return this;
      }
    });
  };

  var _validateCollection$1 = function _validateCollection(it, TYPE) {
    if (!_isObject$1(it) || it._t !== TYPE) throw TypeError('Incompatible receiver, ' + TYPE + ' required!');
    return it;
  };

  var dP$8 = _objectDp$1.f;
  var fastKey$1 = _meta$1.fastKey;
  var SIZE$1 = _descriptors$1 ? '_s' : 'size';

  var getEntry$1 = function getEntry(that, key) {
    // fast case
    var index = fastKey$1(key);
    var entry;
    if (index !== 'F') return that._i[index]; // frozen object case

    for (entry = that._f; entry; entry = entry.n) {
      if (entry.k == key) return entry;
    }
  };

  var _collectionStrong$1 = {
    getConstructor: function getConstructor(wrapper, NAME, IS_MAP, ADDER) {
      var C = wrapper(function (that, iterable) {
        _anInstance$1(that, C, NAME, '_i');
        that._t = NAME; // collection type

        that._i = _objectCreate$1(null); // index

        that._f = undefined; // first entry

        that._l = undefined; // last entry

        that[SIZE$1] = 0; // size

        if (iterable != undefined) _forOf$1(iterable, IS_MAP, that[ADDER], that);
      });
      _redefineAll$1(C.prototype, {
        // 23.1.3.1 Map.prototype.clear()
        // 23.2.3.2 Set.prototype.clear()
        clear: function clear() {
          for (var that = _validateCollection$1(this, NAME), data = that._i, entry = that._f; entry; entry = entry.n) {
            entry.r = true;
            if (entry.p) entry.p = entry.p.n = undefined;
            delete data[entry.i];
          }

          that._f = that._l = undefined;
          that[SIZE$1] = 0;
        },
        // 23.1.3.3 Map.prototype.delete(key)
        // 23.2.3.4 Set.prototype.delete(value)
        'delete': function _delete(key) {
          var that = _validateCollection$1(this, NAME);
          var entry = getEntry$1(that, key);

          if (entry) {
            var next = entry.n;
            var prev = entry.p;
            delete that._i[entry.i];
            entry.r = true;
            if (prev) prev.n = next;
            if (next) next.p = prev;
            if (that._f == entry) that._f = next;
            if (that._l == entry) that._l = prev;
            that[SIZE$1]--;
          }

          return !!entry;
        },
        // 23.2.3.6 Set.prototype.forEach(callbackfn, thisArg = undefined)
        // 23.1.3.5 Map.prototype.forEach(callbackfn, thisArg = undefined)
        forEach: function forEach(callbackfn
        /* , that = undefined */
        ) {
          _validateCollection$1(this, NAME);
          var f = _ctx$1(callbackfn, arguments.length > 1 ? arguments[1] : undefined, 3);
          var entry;

          while (entry = entry ? entry.n : this._f) {
            f(entry.v, entry.k, this); // revert to the last existing entry

            while (entry && entry.r) {
              entry = entry.p;
            }
          }
        },
        // 23.1.3.7 Map.prototype.has(key)
        // 23.2.3.7 Set.prototype.has(value)
        has: function has(key) {
          return !!getEntry$1(_validateCollection$1(this, NAME), key);
        }
      });
      if (_descriptors$1) dP$8(C.prototype, 'size', {
        get: function get() {
          return _validateCollection$1(this, NAME)[SIZE$1];
        }
      });
      return C;
    },
    def: function def(that, key, value) {
      var entry = getEntry$1(that, key);
      var prev, index; // change existing entry

      if (entry) {
        entry.v = value; // create new entry
      } else {
        that._l = entry = {
          i: index = fastKey$1(key, true),
          // <- index
          k: key,
          // <- key
          v: value,
          // <- value
          p: prev = that._l,
          // <- previous entry
          n: undefined,
          // <- next entry
          r: false // <- removed

        };
        if (!that._f) that._f = entry;
        if (prev) prev.n = entry;
        that[SIZE$1]++; // add to index

        if (index !== 'F') that._i[index] = entry;
      }

      return that;
    },
    getEntry: getEntry$1,
    setStrong: function setStrong(C, NAME, IS_MAP) {
      // add .keys, .values, .entries, [@@iterator]
      // 23.1.3.4, 23.1.3.8, 23.1.3.11, 23.1.3.12, 23.2.3.5, 23.2.3.8, 23.2.3.10, 23.2.3.11
      _iterDefine$1(C, NAME, function (iterated, kind) {
        this._t = _validateCollection$1(iterated, NAME); // target

        this._k = kind; // kind

        this._l = undefined; // previous
      }, function () {
        var that = this;
        var kind = that._k;
        var entry = that._l; // revert to the last existing entry

        while (entry && entry.r) {
          entry = entry.p;
        } // get next entry


        if (!that._t || !(that._l = entry = entry ? entry.n : that._t._f)) {
          // or finish the iteration
          that._t = undefined;
          return _iterStep$1(1);
        } // return step by kind


        if (kind == 'keys') return _iterStep$1(0, entry.k);
        if (kind == 'values') return _iterStep$1(0, entry.v);
        return _iterStep$1(0, [entry.k, entry.v]);
      }, IS_MAP ? 'entries' : 'values', !IS_MAP, true); // add [@@species], 23.1.2.2, 23.2.2.2

      _setSpecies$1(NAME);
    }
  };

  var SPECIES$5 = _wks$1('species');

  var _arraySpeciesConstructor$1 = function _arraySpeciesConstructor(original) {
    var C;

    if (_isArray$1(original)) {
      C = original.constructor; // cross-realm fallback

      if (typeof C == 'function' && (C === Array || _isArray$1(C.prototype))) C = undefined;

      if (_isObject$1(C)) {
        C = C[SPECIES$5];
        if (C === null) C = undefined;
      }
    }

    return C === undefined ? Array : C;
  };

  var _arraySpeciesCreate$1 = function _arraySpeciesCreate(original, length) {
    return new (_arraySpeciesConstructor$1(original))(length);
  };

  // 1 -> Array#map
  // 2 -> Array#filter
  // 3 -> Array#some
  // 4 -> Array#every
  // 5 -> Array#find
  // 6 -> Array#findIndex

  var _arrayMethods$1 = function _arrayMethods(TYPE, $create) {
    var IS_MAP = TYPE == 1;
    var IS_FILTER = TYPE == 2;
    var IS_SOME = TYPE == 3;
    var IS_EVERY = TYPE == 4;
    var IS_FIND_INDEX = TYPE == 6;
    var NO_HOLES = TYPE == 5 || IS_FIND_INDEX;
    var create = $create || _arraySpeciesCreate$1;
    return function ($this, callbackfn, that) {
      var O = _toObject$1($this);
      var self = _iobject$1(O);
      var f = _ctx$1(callbackfn, that, 3);
      var length = _toLength$1(self.length);
      var index = 0;
      var result = IS_MAP ? create($this, length) : IS_FILTER ? create($this, 0) : undefined;
      var val, res;

      for (; length > index; index++) {
        if (NO_HOLES || index in self) {
          val = self[index];
          res = f(val, index, O);

          if (TYPE) {
            if (IS_MAP) result[index] = res; // map
            else if (res) switch (TYPE) {
                case 3:
                  return true;
                // some

                case 5:
                  return val;
                // find

                case 6:
                  return index;
                // findIndex

                case 2:
                  result.push(val);
                // filter
              } else if (IS_EVERY) return false; // every
          }
        }
      }

      return IS_FIND_INDEX ? -1 : IS_SOME || IS_EVERY ? IS_EVERY : result;
    };
  };

  var dP$9 = _objectDp$1.f;
  var each = _arrayMethods$1(0);

  var _collection$1 = function _collection(NAME, wrapper, methods, common, IS_MAP, IS_WEAK) {
    var Base = _global$1[NAME];
    var C = Base;
    var ADDER = IS_MAP ? 'set' : 'add';
    var proto = C && C.prototype;
    var O = {};

    if (!_descriptors$1 || typeof C != 'function' || !(IS_WEAK || proto.forEach && !_fails$1(function () {
      new C().entries().next();
    }))) {
      // create collection constructor
      C = common.getConstructor(wrapper, NAME, IS_MAP, ADDER);
      _redefineAll$1(C.prototype, methods);
      _meta$1.NEED = true;
    } else {
      C = wrapper(function (target, iterable) {
        _anInstance$1(target, C, NAME, '_c');
        target._c = new Base();
        if (iterable != undefined) _forOf$1(iterable, IS_MAP, target[ADDER], target);
      });
      each('add,clear,delete,forEach,get,has,set,keys,values,entries,toJSON'.split(','), function (KEY) {
        var IS_ADDER = KEY == 'add' || KEY == 'set';
        if (KEY in proto && !(IS_WEAK && KEY == 'clear')) _hide$1(C.prototype, KEY, function (a, b) {
          _anInstance$1(this, C, KEY);
          if (!IS_ADDER && IS_WEAK && !_isObject$1(a)) return KEY == 'get' ? undefined : false;

          var result = this._c[KEY](a === 0 ? 0 : a, b);

          return IS_ADDER ? this : result;
        });
      });
      IS_WEAK || dP$9(C.prototype, 'size', {
        get: function get() {
          return this._c.size;
        }
      });
    }

    _setToStringTag$1(C, NAME);
    O[NAME] = C;
    _export$1(_export$1.G + _export$1.W + _export$1.F, O);
    if (!IS_WEAK) common.setStrong(C, NAME, IS_MAP);
    return C;
  };

  var SET$1 = 'Set'; // 23.2 Set Objects

  var es6_set$1 = _collection$1(SET$1, function (get) {
    return function Set() {
      return get(this, arguments.length > 0 ? arguments[0] : undefined);
    };
  }, {
    // 23.2.3.1 Set.prototype.add(value)
    add: function add(value) {
      return _collectionStrong$1.def(_validateCollection$1(this, SET$1), value = value === 0 ? 0 : value, value);
    }
  }, _collectionStrong$1);

  var _arrayFromIterable = function _arrayFromIterable(iter, ITERATOR) {
    var result = [];
    _forOf$1(iter, false, result.push, result, ITERATOR);
    return result;
  };

  var _collectionToJson = function _collectionToJson(NAME) {
    return function toJSON() {
      if (_classof$1(this) != NAME) throw TypeError(NAME + "#toJSON isn't generic");
      return _arrayFromIterable(this);
    };
  };

  _export$1(_export$1.P + _export$1.R, 'Set', {
    toJSON: _collectionToJson('Set')
  });

  var _setCollectionOf = function _setCollectionOf(COLLECTION) {
    _export$1(_export$1.S, COLLECTION, {
      of: function of() {
        var length = arguments.length;
        var A = new Array(length);

        while (length--) {
          A[length] = arguments[length];
        }

        return new this(A);
      }
    });
  };

  _setCollectionOf('Set');

  var _setCollectionFrom = function _setCollectionFrom(COLLECTION) {
    _export$1(_export$1.S, COLLECTION, {
      from: function from(source
      /* , mapFn, thisArg */
      ) {
        var mapFn = arguments[1];
        var mapping, A, n, cb;
        _aFunction$1(this);
        mapping = mapFn !== undefined;
        if (mapping) _aFunction$1(mapFn);
        if (source == undefined) return new this();
        A = [];

        if (mapping) {
          n = 0;
          cb = _ctx$1(mapFn, arguments[2], 2);
          _forOf$1(source, false, function (nextItem) {
            A.push(cb(nextItem, n++));
          });
        } else {
          _forOf$1(source, false, A.push, A);
        }

        return new this(A);
      }
    });
  };

  _setCollectionFrom('Set');

  var set$1 = _core$1.Set;

  var set$2 = createCommonjsModule(function (module) {
    module.exports = {
      "default": set$1,
      __esModule: true
    };
  });
  unwrapExports(set$2);

  var SchedulingQueue_1 = createCommonjsModule(function (module, exports) {

    Object.defineProperty(exports, "__esModule", {
      value: true
    });

    var _getIterator3 = _interopRequireDefault(getIterator$1);

    var _set2 = _interopRequireDefault(set$2);

    var _getPrototypeOf2 = _interopRequireDefault(getPrototypeOf$1);

    var _classCallCheck3 = _interopRequireDefault(classCallCheck);

    var _createClass3 = _interopRequireDefault(createClass);

    var _possibleConstructorReturn3 = _interopRequireDefault(possibleConstructorReturn);

    var _inherits3 = _interopRequireDefault(inherits);

    var _PriorityQueue2 = _interopRequireDefault(PriorityQueue_1);

    var _TimeEngine3 = _interopRequireDefault(TimeEngine_1);

    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : {
        default: obj
      };
    }
    /**
     * @class SchedulingQueue
     * @extends TimeEngine
     */

    /**
     * SchedulingQueue base class
     * http://wavesjs.github.io/audio/#audio-scheduling-queue
     *
     * Norbert.Schnell@ircam.fr
     * Copyright 2014, 2015 IRCAM âÂ Centre Pompidou
     */


    var SchedulingQueue = function (_TimeEngine) {
      (0, _inherits3.default)(SchedulingQueue, _TimeEngine);

      function SchedulingQueue() {
        (0, _classCallCheck3.default)(this, SchedulingQueue);

        var _this = (0, _possibleConstructorReturn3.default)(this, (SchedulingQueue.__proto__ || (0, _getPrototypeOf2.default)(SchedulingQueue)).call(this));

        _this.__queue = new _PriorityQueue2.default();
        _this.__engines = new _set2.default();
        return _this;
      } // TimeEngine 'scheduled' interface


      (0, _createClass3.default)(SchedulingQueue, [{
        key: 'advanceTime',
        value: function advanceTime(time) {
          var engine = this.__queue.head;
          var nextEngineTime = engine.advanceTime(time);

          if (!nextEngineTime) {
            engine.master = null;

            this.__engines.delete(engine);

            this.__queue.remove(engine);
          } else {
            this.__queue.move(engine, nextEngineTime);
          }

          return this.__queue.time;
        } // TimeEngine master method to be implemented by derived class

      }, {
        key: 'defer',
        // call a function at a given time
        value: function defer(fun) {
          var time = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.currentTime;
          if (!(fun instanceof Function)) throw new Error("object cannot be defered by scheduler");
          this.add({
            advanceTime: function advanceTime(time) {
              fun(time);
            } // make sure that the advanceTime method does not returm anything

          }, time);
        } // add a time engine to the scheduler

      }, {
        key: 'add',
        value: function add(engine) {
          var time = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.currentTime;
          if (!_TimeEngine3.default.implementsScheduled(engine)) throw new Error("object cannot be added to scheduler");
          if (engine.master) throw new Error("object has already been added to a master");
          engine.master = this; // add to engines and queue

          this.__engines.add(engine);

          var nextTime = this.__queue.insert(engine, time); // reschedule queue


          this.resetTime(nextTime);
        } // remove a time engine from the queue

      }, {
        key: 'remove',
        value: function remove(engine) {
          if (engine.master !== this) throw new Error("object has not been added to this scheduler");
          engine.master = null; // remove from array and queue

          this.__engines.delete(engine);

          var nextTime = this.__queue.remove(engine); // reschedule queue


          this.resetTime(nextTime);
        } // reset next engine time

      }, {
        key: 'resetEngineTime',
        value: function resetEngineTime(engine) {
          var time = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.currentTime;
          if (engine.master !== this) throw new Error("object has not been added to this scheduler");
          var nextTime = void 0;
          if (this.__queue.has(engine)) nextTime = this.__queue.move(engine, time);else nextTime = this.__queue.insert(engine, time);
          this.resetTime(nextTime);
        } // check whether a given engine is scheduled

      }, {
        key: 'has',
        value: function has(engine) {
          return this.__engines.has(engine);
        } // clear queue

      }, {
        key: 'clear',
        value: function clear() {
          var _iteratorNormalCompletion = true;
          var _didIteratorError = false;
          var _iteratorError = undefined;

          try {
            for (var _iterator = (0, _getIterator3.default)(this.__engines), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
              var engine = _step.value;
              engine.master = null;
            }
          } catch (err) {
            _didIteratorError = true;
            _iteratorError = err;
          } finally {
            try {
              if (!_iteratorNormalCompletion && _iterator.return) {
                _iterator.return();
              }
            } finally {
              if (_didIteratorError) {
                throw _iteratorError;
              }
            }
          }

          this.__queue.clear();

          this.__engines.clear();

          this.resetTime(Infinity);
        }
      }, {
        key: 'currentTime',
        get: function get() {
          return 0;
        }
      }]);
      return SchedulingQueue;
    }(_TimeEngine3.default);

    exports.default = SchedulingQueue;
  });
  unwrapExports(SchedulingQueue_1);

  var $getOwnPropertyDescriptor$3 = _objectGopd$1.f;
  _objectSap$1('getOwnPropertyDescriptor', function () {
    return function getOwnPropertyDescriptor(it, key) {
      return $getOwnPropertyDescriptor$3(_toIobject$1(it), key);
    };
  });

  var $Object$2 = _core$1.Object;

  var getOwnPropertyDescriptor = function getOwnPropertyDescriptor(it, key) {
    return $Object$2.getOwnPropertyDescriptor(it, key);
  };

  var getOwnPropertyDescriptor$1 = createCommonjsModule(function (module) {
    module.exports = {
      "default": getOwnPropertyDescriptor,
      __esModule: true
    };
  });
  unwrapExports(getOwnPropertyDescriptor$1);

  var get$1 = createCommonjsModule(function (module, exports) {

    exports.__esModule = true;

    var _getPrototypeOf2 = _interopRequireDefault(getPrototypeOf$1);

    var _getOwnPropertyDescriptor2 = _interopRequireDefault(getOwnPropertyDescriptor$1);

    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : {
        default: obj
      };
    }

    exports.default = function get(object, property, receiver) {
      if (object === null) object = Function.prototype;
      var desc = (0, _getOwnPropertyDescriptor2.default)(object, property);

      if (desc === undefined) {
        var parent = (0, _getPrototypeOf2.default)(object);

        if (parent === null) {
          return undefined;
        } else {
          return get(parent, property, receiver);
        }
      } else if ("value" in desc) {
        return desc.value;
      } else {
        var getter = desc.get;

        if (getter === undefined) {
          return undefined;
        }

        return getter.call(receiver);
      }
    };
  });
  unwrapExports(get$1);

  var PlayControl_1 = createCommonjsModule(function (module, exports) {

    Object.defineProperty(exports, "__esModule", {
      value: true
    });

    var _get3 = _interopRequireDefault(get$1);

    var _getPrototypeOf2 = _interopRequireDefault(getPrototypeOf$1);

    var _classCallCheck3 = _interopRequireDefault(classCallCheck);

    var _createClass3 = _interopRequireDefault(createClass);

    var _possibleConstructorReturn3 = _interopRequireDefault(possibleConstructorReturn);

    var _inherits3 = _interopRequireDefault(inherits);

    var _SchedulingQueue3 = _interopRequireDefault(SchedulingQueue_1);

    var _TimeEngine5 = _interopRequireDefault(TimeEngine_1);

    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : {
        default: obj
      };
    }

    var EPSILON = 1e-8;

    var LoopControl = function (_TimeEngine) {
      (0, _inherits3.default)(LoopControl, _TimeEngine);

      function LoopControl(playControl) {
        (0, _classCallCheck3.default)(this, LoopControl);

        var _this = (0, _possibleConstructorReturn3.default)(this, (LoopControl.__proto__ || (0, _getPrototypeOf2.default)(LoopControl)).call(this));

        _this.__playControl = playControl;
        _this.speed = 1;
        _this.lower = -Infinity;
        _this.upper = Infinity;
        return _this;
      } // TimeEngine method (scheduled interface)


      (0, _createClass3.default)(LoopControl, [{
        key: 'advanceTime',
        value: function advanceTime(time) {
          var playControl = this.__playControl;
          var speed = this.speed;
          var lower = this.lower;
          var upper = this.upper;
          if (speed > 0) time += EPSILON;else time -= EPSILON;

          if (speed > 0) {
            playControl.syncSpeed(time, lower, speed, true);
            return playControl.__getTimeAtPosition(upper) - EPSILON;
          } else if (speed < 0) {
            playControl.syncSpeed(time, upper, speed, true);
            return playControl.__getTimeAtPosition(lower) + EPSILON;
          }

          return Infinity;
        }
      }, {
        key: 'reschedule',
        value: function reschedule(speed) {
          var playControl = this.__playControl;
          var lower = Math.min(playControl.__loopStart, playControl.__loopEnd);
          var upper = Math.max(playControl.__loopStart, playControl.__loopEnd);
          this.speed = speed;
          this.lower = lower;
          this.upper = upper;
          if (lower === upper) speed = 0;
          if (speed > 0) this.resetTime(playControl.__getTimeAtPosition(upper) - EPSILON);else if (speed < 0) this.resetTime(playControl.__getTimeAtPosition(lower) + EPSILON);else this.resetTime(Infinity);
        }
      }, {
        key: 'applyLoopBoundaries',
        value: function applyLoopBoundaries(position, speed) {
          var lower = this.lower;
          var upper = this.upper;
          if (speed > 0 && position >= upper) return lower + (position - lower) % (upper - lower);else if (speed < 0 && position < lower) return upper - (upper - position) % (upper - lower);
          return position;
        }
      }]);
      return LoopControl;
    }(_TimeEngine5.default); // play controlled base class


    var PlayControlled = function () {
      function PlayControlled(playControl, engine) {
        (0, _classCallCheck3.default)(this, PlayControlled);
        this.__playControl = playControl;
        engine.master = this;
        this.__engine = engine;
      }

      (0, _createClass3.default)(PlayControlled, [{
        key: 'syncSpeed',
        value: function syncSpeed(time, position, speed, seek, lastSpeed) {
          this.__engine.syncSpeed(time, position, speed, seek);
        }
      }, {
        key: 'destroy',
        value: function destroy() {
          this.__playControl = null;
          this.__engine.master = null;
          this.__engine = null;
        }
      }, {
        key: 'currentTime',
        get: function get() {
          return this.__playControl.currentTime;
        }
      }, {
        key: 'audioTime',
        get: function get() {
          return this.__playControl.audioTime;
        }
      }, {
        key: 'currentPosition',
        get: function get() {
          return this.__playControl.currentPosition;
        }
      }]);
      return PlayControlled;
    }(); // play control for engines implementing the *speed-controlled* interface


    var PlayControlledSpeedControlled = function (_PlayControlled) {
      (0, _inherits3.default)(PlayControlledSpeedControlled, _PlayControlled);

      function PlayControlledSpeedControlled(playControl, engine) {
        (0, _classCallCheck3.default)(this, PlayControlledSpeedControlled);
        return (0, _possibleConstructorReturn3.default)(this, (PlayControlledSpeedControlled.__proto__ || (0, _getPrototypeOf2.default)(PlayControlledSpeedControlled)).call(this, playControl, engine));
      }

      return PlayControlledSpeedControlled;
    }(PlayControlled); // play control for engines implmenting the *transported* interface


    var PlayControlledTransported = function (_PlayControlled2) {
      (0, _inherits3.default)(PlayControlledTransported, _PlayControlled2);

      function PlayControlledTransported(playControl, engine) {
        (0, _classCallCheck3.default)(this, PlayControlledTransported);

        var _this3 = (0, _possibleConstructorReturn3.default)(this, (PlayControlledTransported.__proto__ || (0, _getPrototypeOf2.default)(PlayControlledTransported)).call(this, playControl, engine));

        _this3.__schedulerHook = new PlayControlledSchedulerHook(playControl, engine);
        return _this3;
      }

      (0, _createClass3.default)(PlayControlledTransported, [{
        key: 'syncSpeed',
        value: function syncSpeed(time, position, speed, seek, lastSpeed) {
          if (speed !== lastSpeed || seek) {
            var nextPosition; // resync transported engines

            if (seek || speed * lastSpeed < 0) {
              // seek or reverse direction
              nextPosition = this.__engine.syncPosition(time, position, speed);
            } else if (lastSpeed === 0) {
              // start
              nextPosition = this.__engine.syncPosition(time, position, speed);
            } else if (speed === 0) {
              // stop / pause
              this.__engine.syncPosition(time, position, speed);

              nextPosition = Infinity; // if (this.__engine.syncSpeed)
              //   this.__engine.syncSpeed(time, position, 0);
            } else if (this.__engine.syncSpeed) {
              // change speed without reversing direction
              this.__engine.syncSpeed(time, position, speed);
            }

            this.__schedulerHook.resetPosition(nextPosition);
          }
        }
      }, {
        key: 'resetEnginePosition',
        value: function resetEnginePosition(engine) {
          var position = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : undefined;

          if (position === undefined) {
            var playControl = this.__playControl;

            var time = playControl.__sync();

            position = this.__engine.syncPosition(time, playControl.__position, playControl.__speed);
          }

          this.__schedulerHook.resetPosition(position);
        }
      }, {
        key: 'destroy',
        value: function destroy() {
          this.__schedulerHook.destroy();

          this.__schedulerHook = null;
          (0, _get3.default)(PlayControlledTransported.prototype.__proto__ || (0, _getPrototypeOf2.default)(PlayControlledTransported.prototype), 'destroy', this).call(this);
        }
      }]);
      return PlayControlledTransported;
    }(PlayControlled); // play control for time engines implementing the *scheduled* interface


    var PlayControlledScheduled = function (_PlayControlled3) {
      (0, _inherits3.default)(PlayControlledScheduled, _PlayControlled3);

      function PlayControlledScheduled(playControl, engine) {
        (0, _classCallCheck3.default)(this, PlayControlledScheduled); // scheduling queue becomes master of engine

        var _this4 = (0, _possibleConstructorReturn3.default)(this, (PlayControlledScheduled.__proto__ || (0, _getPrototypeOf2.default)(PlayControlledScheduled)).call(this, playControl, engine));

        engine.master = null;
        _this4.__schedulingQueue = new PlayControlledSchedulingQueue(playControl, engine);
        return _this4;
      }

      (0, _createClass3.default)(PlayControlledScheduled, [{
        key: 'syncSpeed',
        value: function syncSpeed(time, position, speed, seek, lastSpeed) {
          if (lastSpeed === 0 && speed !== 0) // start or seek
            this.__engine.resetTime();else if (lastSpeed !== 0 && speed === 0) // stop
            this.__engine.resetTime(Infinity);
        }
      }, {
        key: 'destroy',
        value: function destroy() {
          this.__schedulingQueue.destroy();

          (0, _get3.default)(PlayControlledScheduled.prototype.__proto__ || (0, _getPrototypeOf2.default)(PlayControlledScheduled.prototype), 'destroy', this).call(this);
        }
      }]);
      return PlayControlledScheduled;
    }(PlayControlled); // translates transported engine advancePosition into global scheduler times


    var PlayControlledSchedulerHook = function (_TimeEngine2) {
      (0, _inherits3.default)(PlayControlledSchedulerHook, _TimeEngine2);

      function PlayControlledSchedulerHook(playControl, engine) {
        (0, _classCallCheck3.default)(this, PlayControlledSchedulerHook);

        var _this5 = (0, _possibleConstructorReturn3.default)(this, (PlayControlledSchedulerHook.__proto__ || (0, _getPrototypeOf2.default)(PlayControlledSchedulerHook)).call(this));

        _this5.__playControl = playControl;
        _this5.__engine = engine;
        _this5.__nextPosition = Infinity;

        playControl.__scheduler.add(_this5, Infinity);

        return _this5;
      }

      (0, _createClass3.default)(PlayControlledSchedulerHook, [{
        key: 'advanceTime',
        value: function advanceTime(time) {
          var playControl = this.__playControl;
          var engine = this.__engine;
          var position = this.__nextPosition;
          var nextPosition = engine.advancePosition(time, position, playControl.__speed);

          var nextTime = playControl.__getTimeAtPosition(nextPosition);

          this.__nextPosition = nextPosition;
          return nextTime;
        }
      }, {
        key: 'resetPosition',
        value: function resetPosition() {
          var position = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.__nextPosition;

          var time = this.__playControl.__getTimeAtPosition(position);

          this.__nextPosition = position;
          this.resetTime(time);
        }
      }, {
        key: 'destroy',
        value: function destroy() {
          this.__playControl.__scheduler.remove(this);

          this.__playControl = null;
          this.__engine = null;
        }
      }, {
        key: 'currentTime',
        get: function get() {
          return this.__playControl.currentTime;
        }
      }, {
        key: 'audioTime',
        get: function get() {
          return this.__playControl.audioTime;
        }
      }, {
        key: 'currentPosition',
        get: function get() {
          return this.__playControl.currentPosition;
        }
      }]);
      return PlayControlledSchedulerHook;
    }(_TimeEngine5.default); // internal scheduling queue that returns the current position (and time) of the play control


    var PlayControlledSchedulingQueue = function (_SchedulingQueue) {
      (0, _inherits3.default)(PlayControlledSchedulingQueue, _SchedulingQueue);

      function PlayControlledSchedulingQueue(playControl, engine) {
        (0, _classCallCheck3.default)(this, PlayControlledSchedulingQueue);

        var _this6 = (0, _possibleConstructorReturn3.default)(this, (PlayControlledSchedulingQueue.__proto__ || (0, _getPrototypeOf2.default)(PlayControlledSchedulingQueue)).call(this));

        _this6.__playControl = playControl;
        _this6.__engine = engine;

        _this6.add(engine, Infinity);

        playControl.__scheduler.add(_this6, Infinity);

        return _this6;
      }

      (0, _createClass3.default)(PlayControlledSchedulingQueue, [{
        key: 'destroy',
        value: function destroy() {
          this.__playControl.__scheduler.remove(this);

          this.remove(this.__engine);
          this.__playControl = null;
          this.__engine = null;
        }
      }, {
        key: 'currentTime',
        get: function get() {
          return this.__playControl.currentTime;
        }
      }, {
        key: 'audioTime',
        get: function get() {
          return this.__playControl.audioTime;
        }
      }, {
        key: 'currentPosition',
        get: function get() {
          return this.__playControl.currentPosition;
        }
      }]);
      return PlayControlledSchedulingQueue;
    }(_SchedulingQueue3.default);
    /**
     * Extends Time Engine to provide playback control of a Time Engine instance.
     *
     * [example]{@link https://rawgit.com/wavesjs/waves-masters/master/examples/transport/index.html}
     *
     * @extends TimeEngine
     * @param {Object} scheduler - instance of Scheduler
     * @param {TimeEngine} engine - engine to control
     *
     * @example
     * import * as masters from 'waves-masters';
     *
     * const getTimeFunction = () => {
     *   const now = process.hrtime();
     *   return now[0] + now[1] * 1e-9;
     * }
     * const scheduler = new masters.Scheduler(getTimeFunction);
     * const playerEngine = new MyTimeEngine();
     * const playControl = new masters.PlayControl(scheduler, playerEngine);
     *
     * playControl.start();
     */


    var PlayControl = function (_TimeEngine3) {
      (0, _inherits3.default)(PlayControl, _TimeEngine3);

      function PlayControl(scheduler, engine) {
        (0, _classCallCheck3.default)(this, PlayControl);

        var _this7 = (0, _possibleConstructorReturn3.default)(this, (PlayControl.__proto__ || (0, _getPrototypeOf2.default)(PlayControl)).call(this));

        _this7.__scheduler = scheduler;
        _this7.__playControlled = null;
        _this7.__loopControl = null;
        _this7.__loopStart = 0;
        _this7.__loopEnd = 1; // synchronized tie, position, and speed

        _this7.__time = 0;
        _this7.__position = 0;
        _this7.__speed = 0; // non-zero "user" speed

        _this7.__playingSpeed = 1;
        if (engine) _this7.__setEngine(engine);
        return _this7;
      }

      (0, _createClass3.default)(PlayControl, [{
        key: '__setEngine',
        value: function __setEngine(engine) {
          if (engine.master) throw new Error("object has already been added to a master");
          if (_TimeEngine5.default.implementsSpeedControlled(engine)) this.__playControlled = new PlayControlledSpeedControlled(this, engine);else if (_TimeEngine5.default.implementsTransported(engine)) this.__playControlled = new PlayControlledTransported(this, engine);else if (_TimeEngine5.default.implementsScheduled(engine)) this.__playControlled = new PlayControlledScheduled(this, engine);else throw new Error("object cannot be added to play control");
        }
      }, {
        key: '__resetEngine',
        value: function __resetEngine() {
          this.__playControlled.destroy();

          this.__playControlled = null;
        }
        /**
         * Calculate/extrapolate playing time for given position
         *
         * @param {Number} position position
         * @return {Number} extrapolated time
         * @private
         */

      }, {
        key: '__getTimeAtPosition',
        value: function __getTimeAtPosition(position) {
          return this.__time + (position - this.__position) / this.__speed;
        }
        /**
         * Calculate/extrapolate playing position for given time
         *
         * @param {Number} time time
         * @return {Number} extrapolated position
         * @private
         */

      }, {
        key: '__getPositionAtTime',
        value: function __getPositionAtTime(time) {
          return this.__position + (time - this.__time) * this.__speed;
        }
      }, {
        key: '__sync',
        value: function __sync() {
          var now = this.currentTime;
          this.__position += (now - this.__time) * this.__speed;
          this.__time = now;
          return now;
        }
        /**
         * Get current master time.
         *
         * @name currentTime
         * @type {Number}
         * @memberof PlayControl
         * @instance
         * @readonly
         */

      }, {
        key: 'set',
        value: function set() {
          var engine = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;

          var time = this.__sync();

          var speed = this.__speed;

          if (this.__playControlled !== null && this.__playControlled.__engine !== engine) {
            this.syncSpeed(time, this.__position, 0);
            if (this.__playControlled) this.__resetEngine();

            if (this.__playControlled === null && engine !== null) {
              this.__setEngine(engine);

              if (speed !== 0) this.syncSpeed(time, this.__position, speed);
            }
          }
        }
        /**
         * Sets the play control loop behavior.
         *
         * @type {Boolean}
         * @name loop
         * @memberof PlayControl
         * @instance
         */

      }, {
        key: 'setLoopBoundaries',

        /**
         * Sets loop start and end time.
         *
         * @param {Number} loopStart - loop start value.
         * @param {Number} loopEnd - loop end value.
         */
        value: function setLoopBoundaries(loopStart, loopEnd) {
          this.__loopStart = loopStart;
          this.__loopEnd = loopEnd;
          this.loop = this.loop;
        }
        /**
         * Sets loop start value
         *
         * @type {Number}
         * @name loopStart
         * @memberof PlayControl
         * @instance
         */

      }, {
        key: 'syncSpeed',
        // TimeEngine method (speed-controlled interface)
        value: function syncSpeed(time, position, speed) {
          var seek = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;
          var lastSpeed = this.__speed;

          if (speed !== lastSpeed || seek) {
            if ((seek || lastSpeed === 0) && this.__loopControl) position = this.__loopControl.applyLoopBoundaries(position, speed);
            this.__time = time;
            this.__position = position;
            this.__speed = speed;
            if (this.__playControlled) this.__playControlled.syncSpeed(time, position, speed, seek, lastSpeed);
            if (this.__loopControl) this.__loopControl.reschedule(speed);
          }
        }
        /**
         * Starts playback
         */

      }, {
        key: 'start',
        value: function start() {
          var time = this.__sync();

          this.syncSpeed(time, this.__position, this.__playingSpeed);
        }
        /**
         * Pauses playback and stays at the same position.
         */

      }, {
        key: 'pause',
        value: function pause() {
          var time = this.__sync();

          this.syncSpeed(time, this.__position, 0);
        }
        /**
         * Stops playback and seeks to initial (0) position.
         */

      }, {
        key: 'stop',
        value: function stop() {
          var time = this.__sync();

          this.syncSpeed(time, 0, 0, true);
        }
        /**
         * If speed if provided, sets the playback speed. The speed value should
         * be non-zero between -16 and -1/16 or between 1/16 and 16.
         *
         * @type {Number}
         * @name speed
         * @memberof PlayControl
         * @instance
         */

      }, {
        key: 'seek',

        /**
         * Set (jump to) playing position.
         *
         * @param {Number} position target position
         */
        value: function seek(position) {
          var time = this.__sync();

          this.__position = position;
          this.syncSpeed(time, position, this.__speed, true);
        }
      }, {
        key: 'currentTime',
        get: function get() {
          return this.__scheduler.currentTime;
        }
        /**
         * Get current master time.
         *
         * @name audioTime
         * @type {Number}
         * @memberof PlayControl
         * @instance
         * @readonly
         */

      }, {
        key: 'audioTime',
        get: function get() {
          return this.__scheduler.audioTime;
        }
        /**
         * Get current master position.
         * This function will be replaced when the play-control is added to a master.
         *
         * @name currentPosition
         * @type {Number}
         * @memberof PlayControl
         * @instance
         * @readonly
         */

      }, {
        key: 'currentPosition',
        get: function get() {
          return this.__position + (this.__scheduler.currentTime - this.__time) * this.__speed;
        }
        /**
         * Returns if the play control is running.
         *
         * @name running
         * @type {Boolean}
         * @memberof PlayControl
         * @instance
         * @readonly
         */

      }, {
        key: 'running',
        get: function get() {
          return !(this.__speed === 0);
        }
      }, {
        key: 'loop',
        set: function set(enable) {
          if (enable && this.__loopStart > -Infinity && this.__loopEnd < Infinity) {
            if (!this.__loopControl) {
              this.__loopControl = new LoopControl(this);

              this.__scheduler.add(this.__loopControl, Infinity);
            }

            if (this.__speed !== 0) {
              var position = this.currentPosition;
              var lower = Math.min(this.__loopStart, this.__loopEnd);
              var upper = Math.max(this.__loopStart, this.__loopEnd);
              if (this.__speed > 0 && position > upper) this.seek(upper);else if (this.__speed < 0 && position < lower) this.seek(lower);else this.__loopControl.reschedule(this.__speed);
            }
          } else if (this.__loopControl) {
            this.__scheduler.remove(this.__loopControl);

            this.__loopControl = null;
          }
        },
        get: function get() {
          return !!this.__loopControl;
        }
      }, {
        key: 'loopStart',
        set: function set(loopStart) {
          this.setLoopBoundaries(loopStart, this.__loopEnd);
        },
        get: function get() {
          return this.__loopStart;
        }
        /**
         * Sets loop end value
         *
         * @type {Number}
         * @name loopEnd
         * @memberof PlayControl
         * @instance
         */

      }, {
        key: 'loopEnd',
        set: function set(loopEnd) {
          this.setLoopBoundaries(this.__loopStart, loopEnd);
        },
        get: function get() {
          return this.__loopEnd;
        }
      }, {
        key: 'speed',
        set: function set(speed) {
          var time = this.__sync();

          if (speed >= 0) {
            if (speed < 0.01) speed = 0.01;else if (speed > 100) speed = 100;
          } else {
            if (speed < -100) speed = -100;else if (speed > -0.01) speed = -0.01;
          }

          this.__playingSpeed = speed;
          if (!this.master && this.__speed !== 0) this.syncSpeed(time, this.__position, speed);
        },
        get: function get() {
          return this.__playingSpeed;
        }
      }]);
      return PlayControl;
    }(_TimeEngine5.default);

    exports.default = PlayControl;
  });
  unwrapExports(PlayControl_1);

  var Transport_1 = createCommonjsModule(function (module, exports) {

    Object.defineProperty(exports, "__esModule", {
      value: true
    });

    var _getIterator3 = _interopRequireDefault(getIterator$1);

    var _get3 = _interopRequireDefault(get$1);

    var _getPrototypeOf2 = _interopRequireDefault(getPrototypeOf$1);

    var _classCallCheck3 = _interopRequireDefault(classCallCheck);

    var _createClass3 = _interopRequireDefault(createClass);

    var _possibleConstructorReturn3 = _interopRequireDefault(possibleConstructorReturn);

    var _inherits3 = _interopRequireDefault(inherits);

    var _PriorityQueue2 = _interopRequireDefault(PriorityQueue_1);

    var _SchedulingQueue3 = _interopRequireDefault(SchedulingQueue_1);

    var _TimeEngine5 = _interopRequireDefault(TimeEngine_1);

    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : {
        default: obj
      };
    }

    function addDuplet(firstArray, secondArray, firstElement, secondElement) {
      firstArray.push(firstElement);
      secondArray.push(secondElement);
    }

    function removeDuplet(firstArray, secondArray, firstElement) {
      var index = firstArray.indexOf(firstElement);

      if (index >= 0) {
        var secondElement = secondArray[index];
        firstArray.splice(index, 1);
        secondArray.splice(index, 1);
        return secondElement;
      }

      return null;
    } // The Transported call is the base class of the adapters between
    // different types of engines (i.e. transported, scheduled, play-controlled)
    // The adapters are at the same time masters for the engines added to the transport
    // and transported TimeEngines inserted into the transport's position-based pritority queue.


    var Transported = function (_TimeEngine) {
      (0, _inherits3.default)(Transported, _TimeEngine);

      function Transported(transport, engine, start, duration, offset) {
        var stretch = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : 1;
        (0, _classCallCheck3.default)(this, Transported);

        var _this = (0, _possibleConstructorReturn3.default)(this, (Transported.__proto__ || (0, _getPrototypeOf2.default)(Transported)).call(this));

        _this.master = transport;
        _this.__engine = engine;
        engine.master = _this;
        _this.__startPosition = start;
        _this.__endPosition = !isFinite(duration) ? Infinity : start + duration;
        _this.__offsetPosition = start + offset;
        _this.__stretchPosition = stretch;
        _this.__isRunning = false;
        return _this;
      }

      (0, _createClass3.default)(Transported, [{
        key: 'setBoundaries',
        value: function setBoundaries(start, duration) {
          var offset = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;
          var stretch = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 1;
          this.__startPosition = start;
          this.__endPosition = start + duration;
          this.__offsetPosition = start + offset;
          this.__stretchPosition = stretch;
          this.resetPosition();
        }
      }, {
        key: 'start',
        value: function start(time, position, speed) {}
      }, {
        key: 'stop',
        value: function stop(time, position) {}
      }, {
        key: 'resetPosition',
        value: function resetPosition(position) {
          if (position !== undefined) position += this.__offsetPosition;
          this.master.resetEnginePosition(this, position);
        }
      }, {
        key: 'syncPosition',
        value: function syncPosition(time, position, speed) {
          if (speed > 0) {
            if (position < this.__startPosition) {
              if (this.__isRunning) this.stop(time, position - this.__offsetPosition);
              this.__isRunning = false;
              return this.__startPosition;
            } else if (position < this.__endPosition) {
              this.start(time, position - this.__offsetPosition, speed);
              this.__isRunning = true;
              return this.__endPosition;
            }
          } else {
            if (position > this.__endPosition) {
              if (this.__isRunning) // if engine is running
                this.stop(time, position - this.__offsetPosition);
              this.__isRunning = false;
              return this.__endPosition;
            } else if (position > this.__startPosition) {
              this.start(time, position - this.__offsetPosition, speed);
              this.__isRunning = true;
              return this.__startPosition;
            }
          }

          if (this.__isRunning) // if engine is running
            this.stop(time, position);
          this.__isRunning = false;
          return Infinity * speed;
        }
      }, {
        key: 'advancePosition',
        value: function advancePosition(time, position, speed) {
          if (!this.__isRunning) {
            this.start(time, position - this.__offsetPosition, speed);
            this.__isRunning = true;
            if (speed > 0) return this.__endPosition;
            return this.__startPosition;
          } // stop engine


          this.stop(time, position - this.__offsetPosition);
          this.__isRunning = false;
          return Infinity * speed;
        }
      }, {
        key: 'syncSpeed',
        value: function syncSpeed(time, position, speed) {
          if (speed === 0) {
            this.stop(time, position - this.__offsetPosition);
          }
        }
      }, {
        key: 'destroy',
        value: function destroy() {
          this.master = null;
          this.__engine.master = null;
          this.__engine = null;
        }
      }, {
        key: 'currentTime',
        get: function get() {
          return this.master.currentTime;
        }
      }, {
        key: 'audioTime',
        get: function get() {
          return this.master.audioTime;
        }
      }, {
        key: 'currentPosition',
        get: function get() {
          return this.master.currentPosition - this.__offsetPosition;
        }
      }]);
      return Transported;
    }(_TimeEngine5.default); // TransportedTransported
    // has to switch on and off the scheduled engines when the transport hits the engine's start and end position
    // @note - does not handle properly __startPosition and __endPosition


    var TransportedTransported = function (_Transported) {
      (0, _inherits3.default)(TransportedTransported, _Transported);

      function TransportedTransported(transport, engine, startPosition, endPosition, offsetPosition) {
        (0, _classCallCheck3.default)(this, TransportedTransported);
        return (0, _possibleConstructorReturn3.default)(this, (TransportedTransported.__proto__ || (0, _getPrototypeOf2.default)(TransportedTransported)).call(this, transport, engine, startPosition, endPosition, offsetPosition));
      } // @todo - handle this.__running to start and stop properly the scheduled engines


      (0, _createClass3.default)(TransportedTransported, [{
        key: 'syncPosition',
        value: function syncPosition(time, position, speed) {
          var nextPosition = null; // Infinity * speed; // default return

          if (speed > 0) {
            if (position < this.__startPosition) {
              // sync engine at `_startPosition`
              nextPosition = this.__offsetPosition + this.__engine.syncPosition(time, this.__startPosition - this.__offsetPosition, speed);
              this.__isRunning = true;
            } else if (position < this.__endPosition) {
              // sync engine at `position`
              nextPosition = this.__offsetPosition + this.__engine.syncPosition(time, position - this.__offsetPosition, speed);
              this.__isRunning = true;
            } else {
              this.__engine.syncPosition(time, position - this.__offsetPosition, 0);

              this.__isRunning = false;
              nextPosition = Infinity * speed;
            } // if somehow the engine asked to be called after `endPosition`, clamp value


            if (this.__isRunning && nextPosition > this.__endPosition) {
              nextPosition = this.__endPosition;
            }
          } else if (speed < 0) {
            if (position > this.__endPosition) {
              nextPosition = this.__offsetPosition + this.__engine.syncPosition(time, this.__endPosition - this.__offsetPosition, speed);
              this.__isRunning = true;
            } else if (position > this.__startPosition) {
              nextPosition = this.__offsetPosition + this.__engine.syncPosition(time, position - this.__offsetPosition, speed);
              this.__isRunning = true;
            } else {
              this.__engine.syncPosition(time, position - this.__offsetPosition, 0);

              this.__isRunning = false;
              nextPosition = Infinity * speed;
            } // if somehow the engine asked to be called before `startPosition`, clamp value


            if (this.__isRunning && nextPosition < this.__startPosition) {
              nextPosition = this.__startPosition;
            }
          } else {
            this.__engine.syncPosition(time, position - this.__offsetPosition, 0);

            this.__isRunning = false;
            nextPosition = Infinity;
          }

          return nextPosition;
        }
      }, {
        key: 'advancePosition',
        value: function advancePosition(time, position, speed) {
          // ceil or floor `position` at 10^-9 to prevent float arithmetics errors
          // that make the transported go to infinite loops
          if (speed > 0) {
            position = Math.ceil(position * 1e9) * 1e-9;
          } else if (speed < 0) {
            position = Math.floor(position * 1e9) * 1e-9;
          } // stop engine if outside boundaries


          if (speed > 0 && position >= this.__endPosition && this.__isRunning) {
            // stop engine at __endPosition
            this.__engine.syncPosition(time, this.__endPosition - this.__offsetPosition, 0);

            this.__isRunning = false;
            return Infinity * speed; //
          } else if (speed < 0 && position < this.__startPosition && this.__isRunning) {
            this.__engine.syncPosition(time, this.__startPosition - this.__offsetPosition, 0);

            this.__isRunning = false;
            return Infinity * speed; //
          } // define next position and clamp to boundaries


          position = this.__offsetPosition + this.__engine.advancePosition(time, position - this.__offsetPosition, speed); // stop engine if outside boundaries - will call advancePosition once more
          // and thus `syncPosition` (cf. line 218 - 228)

          if (speed > 0 && position > this.__endPosition) {
            position = this.__endPosition;
          } else if (speed < 0 && position < this.__startPosition) {
            position = this.__startPosition;
          }

          return position;
        }
      }, {
        key: 'syncSpeed',
        value: function syncSpeed(time, position, speed) {
          if (this.__engine.syncSpeed) {
            this.__engine.syncSpeed(time, position, speed);
          }
        }
      }, {
        key: 'resetEnginePosition',
        value: function resetEnginePosition(engine) {
          var position = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : undefined;

          if (position !== undefined) {
            position += this.__offsetPosition;
          }

          this.master.resetEnginePosition(this, position);
        }
      }, {
        key: 'destroy',
        value: function destroy() {
          this.__engine.syncPosition(this.master.currentTime, this.master.currentPosition, 0);

          (0, _get3.default)(TransportedTransported.prototype.__proto__ || (0, _getPrototypeOf2.default)(TransportedTransported.prototype), 'destroy', this).call(this);
        }
      }]);
      return TransportedTransported;
    }(Transported); // TransportedSpeedControlled
    // has to start and stop the speed-controlled engines when the transport hits the engine's start and end position


    var TransportedSpeedControlled = function (_Transported2) {
      (0, _inherits3.default)(TransportedSpeedControlled, _Transported2);

      function TransportedSpeedControlled(transport, engine, startPosition, endPosition, offsetPosition) {
        (0, _classCallCheck3.default)(this, TransportedSpeedControlled);
        return (0, _possibleConstructorReturn3.default)(this, (TransportedSpeedControlled.__proto__ || (0, _getPrototypeOf2.default)(TransportedSpeedControlled)).call(this, transport, engine, startPosition, endPosition, offsetPosition));
      }

      (0, _createClass3.default)(TransportedSpeedControlled, [{
        key: 'start',
        value: function start(time, position, speed) {
          this.__engine.syncSpeed(time, position, speed, true);
        }
      }, {
        key: 'stop',
        value: function stop(time, position) {
          this.__engine.syncSpeed(time, position, 0);
        }
      }, {
        key: 'syncSpeed',
        value: function syncSpeed(time, position, speed) {
          if (this.__isRunning) this.__engine.syncSpeed(time, position, speed);
        }
      }, {
        key: 'destroy',
        value: function destroy() {
          this.__engine.syncSpeed(this.master.currentTime, this.master.currentPosition - this.__offsetPosition, 0);

          (0, _get3.default)(TransportedSpeedControlled.prototype.__proto__ || (0, _getPrototypeOf2.default)(TransportedSpeedControlled.prototype), 'destroy', this).call(this);
        }
      }]);
      return TransportedSpeedControlled;
    }(Transported); // TransportedScheduled
    // has to switch on and off the scheduled engines when the transport hits the engine's start and end position


    var TransportedScheduled = function (_Transported3) {
      (0, _inherits3.default)(TransportedScheduled, _Transported3);

      function TransportedScheduled(transport, engine, startPosition, endPosition, offsetPosition) {
        (0, _classCallCheck3.default)(this, TransportedScheduled); // scheduling queue becomes master of engine

        var _this4 = (0, _possibleConstructorReturn3.default)(this, (TransportedScheduled.__proto__ || (0, _getPrototypeOf2.default)(TransportedScheduled)).call(this, transport, engine, startPosition, endPosition, offsetPosition));

        engine.master = null;

        transport.__schedulingQueue.add(engine, Infinity);

        return _this4;
      }

      (0, _createClass3.default)(TransportedScheduled, [{
        key: 'start',
        value: function start(time, position, speed) {
          this.master.__schedulingQueue.resetEngineTime(this.__engine, time);
        }
      }, {
        key: 'stop',
        value: function stop(time, position) {
          this.master.__schedulingQueue.resetEngineTime(this.__engine, Infinity);
        }
      }, {
        key: 'destroy',
        value: function destroy() {
          this.master.__schedulingQueue.remove(this.__engine);

          (0, _get3.default)(TransportedScheduled.prototype.__proto__ || (0, _getPrototypeOf2.default)(TransportedScheduled.prototype), 'destroy', this).call(this);
        }
      }]);
      return TransportedScheduled;
    }(Transported); // translates advancePosition of *transported* engines into global scheduler times


    var TransportSchedulerHook = function (_TimeEngine2) {
      (0, _inherits3.default)(TransportSchedulerHook, _TimeEngine2);

      function TransportSchedulerHook(transport) {
        (0, _classCallCheck3.default)(this, TransportSchedulerHook);

        var _this5 = (0, _possibleConstructorReturn3.default)(this, (TransportSchedulerHook.__proto__ || (0, _getPrototypeOf2.default)(TransportSchedulerHook)).call(this));

        _this5.__transport = transport;
        _this5.__nextPosition = Infinity;
        _this5.__nextTime = Infinity;

        transport.__scheduler.add(_this5, Infinity);

        return _this5;
      } // TimeEngine method (scheduled interface)


      (0, _createClass3.default)(TransportSchedulerHook, [{
        key: 'advanceTime',
        value: function advanceTime(time) {
          var transport = this.__transport;
          var position = this.__nextPosition;
          var speed = transport.__speed;
          var nextPosition = transport.advancePosition(time, position, speed);

          var nextTime = transport.__getTimeAtPosition(nextPosition);

          this.__nextPosition = nextPosition;
          this.__nextTime = nextTime;
          return nextTime;
        }
      }, {
        key: 'resetPosition',
        value: function resetPosition() {
          var position = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.__nextPosition;
          var transport = this.__transport;

          var time = transport.__getTimeAtPosition(position);

          this.__nextPosition = position;
          this.__nextTime = time;
          this.resetTime(time);
        }
      }, {
        key: 'destroy',
        value: function destroy() {
          this.__transport.__scheduler.remove(this);

          this.__transport = null;
        }
      }]);
      return TransportSchedulerHook;
    }(_TimeEngine5.default); // internal scheduling queue that returns the current position (and time) of the transport


    var TransportSchedulingQueue = function (_SchedulingQueue) {
      (0, _inherits3.default)(TransportSchedulingQueue, _SchedulingQueue);

      function TransportSchedulingQueue(transport) {
        (0, _classCallCheck3.default)(this, TransportSchedulingQueue);

        var _this6 = (0, _possibleConstructorReturn3.default)(this, (TransportSchedulingQueue.__proto__ || (0, _getPrototypeOf2.default)(TransportSchedulingQueue)).call(this));

        _this6.__transport = transport;

        transport.__scheduler.add(_this6, Infinity);

        return _this6;
      }

      (0, _createClass3.default)(TransportSchedulingQueue, [{
        key: 'destroy',
        value: function destroy() {
          this.__transport.__scheduler.remove(this);

          this.__transport = null;
        }
      }, {
        key: 'currentTime',
        get: function get() {
          return this.__transport.currentTime;
        }
      }, {
        key: 'audioTime',
        get: function get() {
          return this.__transport.audioTime;
        }
      }, {
        key: 'currentPosition',
        get: function get() {
          return this.__transport.currentPosition;
        }
      }]);
      return TransportSchedulingQueue;
    }(_SchedulingQueue3.default);
    /**
     * Provides position-based scheduling of TimeEngine instances.
     *
     * [example]{@link https://rawgit.com/wavesjs/waves-masters/master/examples/transport/index.html}
     *
     *
     * @param {Object} scheduler - instance of Scheduler
     *
     * @example
     * import * as masters from 'waves-masters';
     *
     * const getTimeFunction = () => {
     *   const now = process.hrtime();
     *   return now[0] + now[1] * 1e-9;
     * }
     * const scheduler = new masters.Scheduler(getTimeFunction);
     * const transport = new masters.Transport(scheduler);
     * const playControl = new masters.PlayControl(scheduler, transport);
     * const myEngine = new MyEngine();
     * const yourEngine = new yourEngine();
     *
     * transport.add(myEngine);
     * transport.add(yourEngine);
     *
     * playControl.start();
     */


    var Transport = function (_TimeEngine3) {
      (0, _inherits3.default)(Transport, _TimeEngine3);

      function Transport(scheduler) {
        (0, _classCallCheck3.default)(this, Transport);

        var _this7 = (0, _possibleConstructorReturn3.default)(this, (Transport.__proto__ || (0, _getPrototypeOf2.default)(Transport)).call(this));

        if (!scheduler) throw new Error('Invalid argument `scheduler`, should be an instance of `Scheduler`');
        _this7.__engines = [];
        _this7.__transported = [];
        _this7.__scheduler = scheduler;
        _this7.__schedulerHook = new TransportSchedulerHook(_this7);
        _this7.__transportedQueue = new _PriorityQueue2.default();
        _this7.__schedulingQueue = new TransportSchedulingQueue(_this7); // syncronized time, position, and speed

        _this7.__time = 0;
        _this7.__position = 0;
        _this7.__speed = 0;
        return _this7;
      }

      (0, _createClass3.default)(Transport, [{
        key: '__getTimeAtPosition',
        value: function __getTimeAtPosition(position) {
          if (this.__speed === 0) return +Infinity;else return this.__time + (position - this.__position) / this.__speed;
        }
      }, {
        key: '__getPositionAtTime',
        value: function __getPositionAtTime(time) {
          return this.__position + (time - this.__time) * this.__speed;
        }
      }, {
        key: '__syncTransportedPosition',
        value: function __syncTransportedPosition(time, position, speed) {
          var numTransportedEngines = this.__transported.length;
          var nextPosition = Infinity * speed;

          if (numTransportedEngines > 0) {
            this.__transportedQueue.clear();

            this.__transportedQueue.reverse = speed < 0;

            for (var i = 0; i < numTransportedEngines; i++) {
              var engine = this.__transported[i];
              var nextEnginePosition = engine.syncPosition(time, position, speed);

              this.__transportedQueue.insert(engine, nextEnginePosition);
            }

            nextPosition = this.__transportedQueue.time;
          }

          return nextPosition;
        }
      }, {
        key: '__syncTransportedSpeed',
        value: function __syncTransportedSpeed(time, position, speed) {
          var _iteratorNormalCompletion = true;
          var _didIteratorError = false;
          var _iteratorError = undefined;

          try {
            for (var _iterator = (0, _getIterator3.default)(this.__transported), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
              var transported = _step.value;
              transported.syncSpeed(time, position, speed);
            }
          } catch (err) {
            _didIteratorError = true;
            _iteratorError = err;
          } finally {
            try {
              if (!_iteratorNormalCompletion && _iterator.return) {
                _iterator.return();
              }
            } finally {
              if (_didIteratorError) {
                throw _iteratorError;
              }
            }
          }
        }
        /**
         * Get current master time.
         *
         * @type {Number}
         * @name currentTime
         * @memberof Transport
         * @instance
         * @readonly
         */

      }, {
        key: 'resetPosition',

        /**
         * Reset next transport position
         *
         * @param {Number} next - transport position
         */
        value: function resetPosition(position) {
          var master = this.master;
          if (master && master.resetEnginePosition !== undefined) master.resetEnginePosition(this, position);else this.__schedulerHook.resetPosition(position);
        }
        /**
         * Implementation of the transported time engine interface.
         *
         * @param {Number} time
         * @param {Number} position
         * @param {Number} speed
         */

      }, {
        key: 'syncPosition',
        value: function syncPosition(time, position, speed) {
          this.__time = time;
          this.__position = position;
          this.__speed = speed;
          return this.__syncTransportedPosition(time, position, speed);
        }
        /**
         * Implementation of the transported time engine interface.
         *
         * @param {Number} time
         * @param {Number} position
         * @param {Number} speed
         */

      }, {
        key: 'advancePosition',
        value: function advancePosition(time, position, speed) {
          var engine = this.__transportedQueue.head;
          var nextEnginePosition = engine.advancePosition(time, position, speed);
          return this.__transportedQueue.move(engine, nextEnginePosition);
        }
        /**
         * Implementation of the transported time engine interface.
         *
         * @param {Number} time
         * @param {Number} position
         * @param {Number} speed
         * @param {Boolean} [seek=false]
         */

      }, {
        key: 'syncSpeed',
        value: function syncSpeed(time, position, speed) {
          var seek = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;
          var lastSpeed = this.__speed;
          this.__time = time;
          this.__position = position;
          this.__speed = speed;

          if (speed !== lastSpeed || seek) {
            var nextPosition = void 0; // resync transported engines

            if (seek || speed * lastSpeed < 0) {
              // seek or reverse direction
              nextPosition = this.__syncTransportedPosition(time, position, speed);
            } else if (lastSpeed === 0) {
              // start
              nextPosition = this.__syncTransportedPosition(time, position, speed);
            } else if (speed === 0) {
              // stop
              nextPosition = Infinity;

              this.__syncTransportedPosition(time, position, speed);
            } else {
              // change speed without reversing direction
              this.__syncTransportedSpeed(time, position, speed);
            }

            this.resetPosition(nextPosition);
          }
        }
        /**
         * Add a time engine to the transport.
         *
         * @param {Object} engine - engine to be added to the transport
         * @param {Number} position - start position
         */

      }, {
        key: 'add',
        value: function add(engine) {
          var startPosition = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
          var endPosition = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : Infinity;
          var offsetPosition = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 0;
          var transported = null;
          if (offsetPosition === -Infinity) offsetPosition = 0;
          if (engine.master) throw new Error("object has already been added to a master");
          if (_TimeEngine5.default.implementsTransported(engine)) transported = new TransportedTransported(this, engine, startPosition, endPosition, offsetPosition);else if (_TimeEngine5.default.implementsSpeedControlled(engine)) transported = new TransportedSpeedControlled(this, engine, startPosition, endPosition, offsetPosition);else if (_TimeEngine5.default.implementsScheduled(engine)) transported = new TransportedScheduled(this, engine, startPosition, endPosition, offsetPosition);else throw new Error("object cannot be added to a transport");

          if (transported) {
            var speed = this.__speed;
            addDuplet(this.__engines, this.__transported, engine, transported);

            if (speed !== 0) {
              // sync and start
              var nextEnginePosition = transported.syncPosition(this.currentTime, this.currentPosition, speed);

              var nextPosition = this.__transportedQueue.insert(transported, nextEnginePosition);

              this.resetPosition(nextPosition);
            }
          }

          return transported;
        }
        /**
         * Remove a time engine from the transport.
         *
         * @param {object} engineOrTransported - engine or transported to be removed from the transport
         */

      }, {
        key: 'remove',
        value: function remove(engineOrTransported) {
          var engine = engineOrTransported;
          var transported = removeDuplet(this.__engines, this.__transported, engineOrTransported);

          if (!transported) {
            engine = removeDuplet(this.__transported, this.__engines, engineOrTransported);
            transported = engineOrTransported;
          }

          if (engine && transported) {
            var nextPosition = this.__transportedQueue.remove(transported);

            transported.destroy();
            if (this.__speed !== 0) this.resetPosition(nextPosition);
          } else {
            throw new Error("object has not been added to this transport");
          }
        }
        /**
         * Reset position of the given engine.
         *
         * @param {TimeEngine} transported - Engine to reset
         * @param {Number} position - New position
         */

      }, {
        key: 'resetEnginePosition',
        value: function resetEnginePosition(transported) {
          var position = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : undefined;
          var speed = this.__speed;

          if (speed !== 0) {
            if (position === undefined) position = transported.syncPosition(this.currentTime, this.currentPosition, speed);
            var nextPosition = null; // the priority queue does not keep track of the elements that are
            // inserted at Infinity, so we need to reinsert transported engine in
            // this case.
            // @note - this could probably be more clean
            //       - probably the priority queue should keep these references

            if (!this.__transportedQueue.has(transported)) {
              nextPosition = this.__transportedQueue.insert(transported, position);
            } else {
              nextPosition = this.__transportedQueue.move(transported, position);
            }

            this.resetPosition(nextPosition);
          }
        }
        /**
         * Remove all time engines from the transport.
         */

      }, {
        key: 'clear',
        value: function clear() {
          this.syncSpeed(this.currentTime, this.currentPosition, 0);
          var _iteratorNormalCompletion2 = true;
          var _didIteratorError2 = false;
          var _iteratorError2 = undefined;

          try {
            for (var _iterator2 = (0, _getIterator3.default)(this.__transported), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
              var transported = _step2.value;
              transported.destroy();
            }
          } catch (err) {
            _didIteratorError2 = true;
            _iteratorError2 = err;
          } finally {
            try {
              if (!_iteratorNormalCompletion2 && _iterator2.return) {
                _iterator2.return();
              }
            } finally {
              if (_didIteratorError2) {
                throw _iteratorError2;
              }
            }
          }
        }
      }, {
        key: 'currentTime',
        get: function get() {
          return this.__scheduler.currentTime;
        }
        /**
         * Get master audio time.
         *
         * @type {Number}
         * @name currentTime
         * @memberof Transport
         * @instance
         * @readonly
         */

      }, {
        key: 'audioTime',
        get: function get() {
          return this.__scheduler.audioTime;
        }
        /**
         * Get current master position. This getter will be replaced when the transport
         * is added to a master (i.e. transport or play-control).
         *
         * @type {Number}
         * @name currentPosition
         * @memberof Transport
         * @instance
         * @readonly
         */

      }, {
        key: 'currentPosition',
        get: function get() {
          var master = this.master;
          if (master && master.currentPosition !== undefined) return master.currentPosition;
          return this.__position + (this.__scheduler.currentTime - this.__time) * this.__speed;
        }
      }]);
      return Transport;
    }(_TimeEngine5.default);

    exports.default = Transport;
  });
  unwrapExports(Transport_1);

  var global$2 = typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {};

  // shim for using process in browser
  // based off https://github.com/defunctzombie/node-process/blob/master/browser.js
  function defaultSetTimout() {
    throw new Error('setTimeout has not been defined');
  }

  function defaultClearTimeout() {
    throw new Error('clearTimeout has not been defined');
  }

  var cachedSetTimeout = defaultSetTimout;
  var cachedClearTimeout = defaultClearTimeout;

  if (typeof global$2.setTimeout === 'function') {
    cachedSetTimeout = setTimeout;
  }

  if (typeof global$2.clearTimeout === 'function') {
    cachedClearTimeout = clearTimeout;
  }

  function runTimeout(fun) {
    if (cachedSetTimeout === setTimeout) {
      //normal enviroments in sane situations
      return setTimeout(fun, 0);
    } // if setTimeout wasn't available but was latter defined


    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {
      cachedSetTimeout = setTimeout;
      return setTimeout(fun, 0);
    }

    try {
      // when when somebody has screwed with setTimeout but no I.E. maddness
      return cachedSetTimeout(fun, 0);
    } catch (e) {
      try {
        // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally
        return cachedSetTimeout.call(null, fun, 0);
      } catch (e) {
        // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error
        return cachedSetTimeout.call(this, fun, 0);
      }
    }
  }

  function runClearTimeout(marker) {
    if (cachedClearTimeout === clearTimeout) {
      //normal enviroments in sane situations
      return clearTimeout(marker);
    } // if clearTimeout wasn't available but was latter defined


    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {
      cachedClearTimeout = clearTimeout;
      return clearTimeout(marker);
    }

    try {
      // when when somebody has screwed with setTimeout but no I.E. maddness
      return cachedClearTimeout(marker);
    } catch (e) {
      try {
        // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally
        return cachedClearTimeout.call(null, marker);
      } catch (e) {
        // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.
        // Some versions of I.E. have different rules for clearTimeout vs setTimeout
        return cachedClearTimeout.call(this, marker);
      }
    }
  }

  var queue$1 = [];
  var draining = false;
  var currentQueue;
  var queueIndex = -1;

  function cleanUpNextTick() {
    if (!draining || !currentQueue) {
      return;
    }

    draining = false;

    if (currentQueue.length) {
      queue$1 = currentQueue.concat(queue$1);
    } else {
      queueIndex = -1;
    }

    if (queue$1.length) {
      drainQueue();
    }
  }

  function drainQueue() {
    if (draining) {
      return;
    }

    var timeout = runTimeout(cleanUpNextTick);
    draining = true;
    var len = queue$1.length;

    while (len) {
      currentQueue = queue$1;
      queue$1 = [];

      while (++queueIndex < len) {
        if (currentQueue) {
          currentQueue[queueIndex].run();
        }
      }

      queueIndex = -1;
      len = queue$1.length;
    }

    currentQueue = null;
    draining = false;
    runClearTimeout(timeout);
  }

  function nextTick(fun) {
    var args = new Array(arguments.length - 1);

    if (arguments.length > 1) {
      for (var i = 1; i < arguments.length; i++) {
        args[i - 1] = arguments[i];
      }
    }

    queue$1.push(new Item(fun, args));

    if (queue$1.length === 1 && !draining) {
      runTimeout(drainQueue);
    }
  } // v8 likes predictible objects

  function Item(fun, array) {
    this.fun = fun;
    this.array = array;
  }

  Item.prototype.run = function () {
    this.fun.apply(null, this.array);
  };

  var title = 'browser';
  var platform = 'browser';
  var browser = true;
  var env = {};
  var argv = [];
  var version = ''; // empty string to avoid regexp issues

  var versions$1 = {};
  var release = {};
  var config = {};

  function noop() {}

  var on = noop;
  var addListener = noop;
  var once = noop;
  var off = noop;
  var removeListener = noop;
  var removeAllListeners = noop;
  var emit = noop;
  function binding(name) {
    throw new Error('process.binding is not supported');
  }
  function cwd() {
    return '/';
  }
  function chdir(dir) {
    throw new Error('process.chdir is not supported');
  }
  function umask() {
    return 0;
  } // from https://github.com/kumavis/browser-process-hrtime/blob/master/index.js

  var performance = global$2.performance || {};

  var performanceNow = performance.now || performance.mozNow || performance.msNow || performance.oNow || performance.webkitNow || function () {
    return new Date().getTime();
  }; // generate timestamp or delta
  // see http://nodejs.org/api/process.html#process_process_hrtime


  function hrtime(previousTimestamp) {
    var clocktime = performanceNow.call(performance) * 1e-3;
    var seconds = Math.floor(clocktime);
    var nanoseconds = Math.floor(clocktime % 1 * 1e9);

    if (previousTimestamp) {
      seconds = seconds - previousTimestamp[0];
      nanoseconds = nanoseconds - previousTimestamp[1];

      if (nanoseconds < 0) {
        seconds--;
        nanoseconds += 1e9;
      }
    }

    return [seconds, nanoseconds];
  }
  var startTime = new Date();
  function uptime() {
    var currentTime = new Date();
    var dif = currentTime - startTime;
    return dif / 1000;
  }
  var process$3 = {
    nextTick: nextTick,
    title: title,
    browser: browser,
    env: env,
    argv: argv,
    version: version,
    versions: versions$1,
    on: on,
    addListener: addListener,
    once: once,
    off: off,
    removeListener: removeListener,
    removeAllListeners: removeAllListeners,
    emit: emit,
    binding: binding,
    cwd: cwd,
    chdir: chdir,
    umask: umask,
    hrtime: hrtime,
    platform: platform,
    release: release,
    config: config,
    uptime: uptime
  };

  /**
   * Helpers.
   */
  var s = 1000;
  var m = s * 60;
  var h = m * 60;
  var d = h * 24;
  var y = d * 365.25;
  /**
   * Parse or format the given `val`.
   *
   * Options:
   *
   *  - `long` verbose formatting [false]
   *
   * @param {String|Number} val
   * @param {Object} [options]
   * @throws {Error} throw an error if val is not a non-empty string or a number
   * @return {String|Number}
   * @api public
   */

  var ms = function ms(val, options) {
    options = options || {};
    var type = typeof val;

    if (type === 'string' && val.length > 0) {
      return parse(val);
    } else if (type === 'number' && isNaN(val) === false) {
      return options.long ? fmtLong(val) : fmtShort(val);
    }

    throw new Error('val is not a non-empty string or a valid number. val=' + JSON.stringify(val));
  };
  /**
   * Parse the given `str` and return milliseconds.
   *
   * @param {String} str
   * @return {Number}
   * @api private
   */


  function parse(str) {
    str = String(str);

    if (str.length > 100) {
      return;
    }

    var match = /^((?:\d+)?\.?\d+) *(milliseconds?|msecs?|ms|seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|years?|yrs?|y)?$/i.exec(str);

    if (!match) {
      return;
    }

    var n = parseFloat(match[1]);
    var type = (match[2] || 'ms').toLowerCase();

    switch (type) {
      case 'years':
      case 'year':
      case 'yrs':
      case 'yr':
      case 'y':
        return n * y;

      case 'days':
      case 'day':
      case 'd':
        return n * d;

      case 'hours':
      case 'hour':
      case 'hrs':
      case 'hr':
      case 'h':
        return n * h;

      case 'minutes':
      case 'minute':
      case 'mins':
      case 'min':
      case 'm':
        return n * m;

      case 'seconds':
      case 'second':
      case 'secs':
      case 'sec':
      case 's':
        return n * s;

      case 'milliseconds':
      case 'millisecond':
      case 'msecs':
      case 'msec':
      case 'ms':
        return n;

      default:
        return undefined;
    }
  }
  /**
   * Short format for `ms`.
   *
   * @param {Number} ms
   * @return {String}
   * @api private
   */


  function fmtShort(ms) {
    if (ms >= d) {
      return Math.round(ms / d) + 'd';
    }

    if (ms >= h) {
      return Math.round(ms / h) + 'h';
    }

    if (ms >= m) {
      return Math.round(ms / m) + 'm';
    }

    if (ms >= s) {
      return Math.round(ms / s) + 's';
    }

    return ms + 'ms';
  }
  /**
   * Long format for `ms`.
   *
   * @param {Number} ms
   * @return {String}
   * @api private
   */


  function fmtLong(ms) {
    return plural(ms, d, 'day') || plural(ms, h, 'hour') || plural(ms, m, 'minute') || plural(ms, s, 'second') || ms + ' ms';
  }
  /**
   * Pluralization helper.
   */


  function plural(ms, n, name) {
    if (ms < n) {
      return;
    }

    if (ms < n * 1.5) {
      return Math.floor(ms / n) + ' ' + name;
    }

    return Math.ceil(ms / n) + ' ' + name + 's';
  }

  var debug = createCommonjsModule(function (module, exports) {
    /**
     * This is the common logic for both the Node.js and web browser
     * implementations of `debug()`.
     *
     * Expose `debug()` as the module.
     */
    exports = module.exports = createDebug.debug = createDebug['default'] = createDebug;
    exports.coerce = coerce;
    exports.disable = disable;
    exports.enable = enable;
    exports.enabled = enabled;
    exports.humanize = ms;
    /**
     * The currently active debug mode names, and names to skip.
     */

    exports.names = [];
    exports.skips = [];
    /**
     * Map of special "%n" handling functions, for the debug "format" argument.
     *
     * Valid key names are a single, lower or upper-case letter, i.e. "n" and "N".
     */

    exports.formatters = {};
    /**
     * Previous log timestamp.
     */

    var prevTime;
    /**
     * Select a color.
     * @param {String} namespace
     * @return {Number}
     * @api private
     */

    function selectColor(namespace) {
      var hash = 0,
          i;

      for (i in namespace) {
        hash = (hash << 5) - hash + namespace.charCodeAt(i);
        hash |= 0; // Convert to 32bit integer
      }

      return exports.colors[Math.abs(hash) % exports.colors.length];
    }
    /**
     * Create a debugger with the given `namespace`.
     *
     * @param {String} namespace
     * @return {Function}
     * @api public
     */


    function createDebug(namespace) {
      function debug() {
        // disabled?
        if (!debug.enabled) return;
        var self = debug; // set `diff` timestamp

        var curr = +new Date();
        var ms = curr - (prevTime || curr);
        self.diff = ms;
        self.prev = prevTime;
        self.curr = curr;
        prevTime = curr; // turn the `arguments` into a proper Array

        var args = new Array(arguments.length);

        for (var i = 0; i < args.length; i++) {
          args[i] = arguments[i];
        }

        args[0] = exports.coerce(args[0]);

        if ('string' !== typeof args[0]) {
          // anything else let's inspect with %O
          args.unshift('%O');
        } // apply any `formatters` transformations


        var index = 0;
        args[0] = args[0].replace(/%([a-zA-Z%])/g, function (match, format) {
          // if we encounter an escaped % then don't increase the array index
          if (match === '%%') return match;
          index++;
          var formatter = exports.formatters[format];

          if ('function' === typeof formatter) {
            var val = args[index];
            match = formatter.call(self, val); // now we need to remove `args[index]` since it's inlined in the `format`

            args.splice(index, 1);
            index--;
          }

          return match;
        }); // apply env-specific formatting (colors, etc.)

        exports.formatArgs.call(self, args);
        var logFn = debug.log || exports.log || console.log.bind(console);
        logFn.apply(self, args);
      }

      debug.namespace = namespace;
      debug.enabled = exports.enabled(namespace);
      debug.useColors = exports.useColors();
      debug.color = selectColor(namespace); // env-specific initialization logic for debug instances

      if ('function' === typeof exports.init) {
        exports.init(debug);
      }

      return debug;
    }
    /**
     * Enables a debug mode by namespaces. This can include modes
     * separated by a colon and wildcards.
     *
     * @param {String} namespaces
     * @api public
     */


    function enable(namespaces) {
      exports.save(namespaces);
      exports.names = [];
      exports.skips = [];
      var split = (typeof namespaces === 'string' ? namespaces : '').split(/[\s,]+/);
      var len = split.length;

      for (var i = 0; i < len; i++) {
        if (!split[i]) continue; // ignore empty strings

        namespaces = split[i].replace(/\*/g, '.*?');

        if (namespaces[0] === '-') {
          exports.skips.push(new RegExp('^' + namespaces.substr(1) + '$'));
        } else {
          exports.names.push(new RegExp('^' + namespaces + '$'));
        }
      }
    }
    /**
     * Disable debug output.
     *
     * @api public
     */


    function disable() {
      exports.enable('');
    }
    /**
     * Returns true if the given mode name is enabled, false otherwise.
     *
     * @param {String} name
     * @return {Boolean}
     * @api public
     */


    function enabled(name) {
      var i, len;

      for (i = 0, len = exports.skips.length; i < len; i++) {
        if (exports.skips[i].test(name)) {
          return false;
        }
      }

      for (i = 0, len = exports.names.length; i < len; i++) {
        if (exports.names[i].test(name)) {
          return true;
        }
      }

      return false;
    }
    /**
     * Coerce `val`.
     *
     * @param {Mixed} val
     * @return {Mixed}
     * @api private
     */


    function coerce(val) {
      if (val instanceof Error) return val.stack || val.message;
      return val;
    }
  });
  var debug_1 = debug.coerce;
  var debug_2 = debug.disable;
  var debug_3 = debug.enable;
  var debug_4 = debug.enabled;
  var debug_5 = debug.humanize;
  var debug_6 = debug.names;
  var debug_7 = debug.skips;
  var debug_8 = debug.formatters;

  var browser$1 = createCommonjsModule(function (module, exports) {
    /**
     * This is the web browser implementation of `debug()`.
     *
     * Expose `debug()` as the module.
     */
    exports = module.exports = debug;
    exports.log = log;
    exports.formatArgs = formatArgs;
    exports.save = save;
    exports.load = load;
    exports.useColors = useColors;
    exports.storage = 'undefined' != typeof chrome && 'undefined' != typeof chrome.storage ? chrome.storage.local : localstorage();
    /**
     * Colors.
     */

    exports.colors = ['lightseagreen', 'forestgreen', 'goldenrod', 'dodgerblue', 'darkorchid', 'crimson'];
    /**
     * Currently only WebKit-based Web Inspectors, Firefox >= v31,
     * and the Firebug extension (any Firefox version) are known
     * to support "%c" CSS customizations.
     *
     * TODO: add a `localStorage` variable to explicitly enable/disable colors
     */

    function useColors() {
      // NB: In an Electron preload script, document will be defined but not fully
      // initialized. Since we know we're in Chrome, we'll just detect this case
      // explicitly
      if (typeof window !== 'undefined' && window.process && window.process.type === 'renderer') {
        return true;
      } // is webkit? http://stackoverflow.com/a/16459606/376773
      // document is undefined in react-native: https://github.com/facebook/react-native/pull/1632


      return typeof document !== 'undefined' && document.documentElement && document.documentElement.style && document.documentElement.style.WebkitAppearance || // is firebug? http://stackoverflow.com/a/398120/376773
      typeof window !== 'undefined' && window.console && (window.console.firebug || window.console.exception && window.console.table) || // is firefox >= v31?
      // https://developer.mozilla.org/en-US/docs/Tools/Web_Console#Styling_messages
      typeof navigator !== 'undefined' && navigator.userAgent && navigator.userAgent.toLowerCase().match(/firefox\/(\d+)/) && parseInt(RegExp.$1, 10) >= 31 || // double check webkit in userAgent just in case we are in a worker
      typeof navigator !== 'undefined' && navigator.userAgent && navigator.userAgent.toLowerCase().match(/applewebkit\/(\d+)/);
    }
    /**
     * Map %j to `JSON.stringify()`, since no Web Inspectors do that by default.
     */


    exports.formatters.j = function (v) {
      try {
        return JSON.stringify(v);
      } catch (err) {
        return '[UnexpectedJSONParseError]: ' + err.message;
      }
    };
    /**
     * Colorize log arguments if enabled.
     *
     * @api public
     */


    function formatArgs(args) {
      var useColors = this.useColors;
      args[0] = (useColors ? '%c' : '') + this.namespace + (useColors ? ' %c' : ' ') + args[0] + (useColors ? '%c ' : ' ') + '+' + exports.humanize(this.diff);
      if (!useColors) return;
      var c = 'color: ' + this.color;
      args.splice(1, 0, c, 'color: inherit'); // the final "%c" is somewhat tricky, because there could be other
      // arguments passed either before or after the %c, so we need to
      // figure out the correct index to insert the CSS into

      var index = 0;
      var lastC = 0;
      args[0].replace(/%[a-zA-Z%]/g, function (match) {
        if ('%%' === match) return;
        index++;

        if ('%c' === match) {
          // we only are interested in the *last* %c
          // (the user may have provided their own)
          lastC = index;
        }
      });
      args.splice(lastC, 0, c);
    }
    /**
     * Invokes `console.log()` when available.
     * No-op when `console.log` is not a "function".
     *
     * @api public
     */


    function log() {
      // this hackery is required for IE8/9, where
      // the `console.log` function doesn't have 'apply'
      return 'object' === typeof console && console.log && Function.prototype.apply.call(console.log, console, arguments);
    }
    /**
     * Save `namespaces`.
     *
     * @param {String} namespaces
     * @api private
     */


    function save(namespaces) {
      try {
        if (null == namespaces) {
          exports.storage.removeItem('debug');
        } else {
          exports.storage.debug = namespaces;
        }
      } catch (e) {}
    }
    /**
     * Load `namespaces`.
     *
     * @return {String} returns the previously persisted debug modes
     * @api private
     */


    function load() {
      var r;

      try {
        r = exports.storage.debug;
      } catch (e) {} // If debug isn't set in LS, and we're in Electron, try to load $DEBUG


      if (!r && typeof process$3 !== 'undefined' && 'env' in process$3) {
        r = process$3.env.DEBUG;
      }

      return r;
    }
    /**
     * Enable namespaces listed in `localStorage.debug` initially.
     */


    exports.enable(load());
    /**
     * Localstorage attempts to return the localstorage.
     *
     * This is necessary because safari throws
     * when a user disables cookies/localstorage
     * and you attempt to access it.
     *
     * @return {LocalStorage}
     * @api private
     */

    function localstorage() {
      try {
        return window.localStorage;
      } catch (e) {}
    }
  });
  var browser_1 = browser$1.log;
  var browser_2 = browser$1.formatArgs;
  var browser_3 = browser$1.save;
  var browser_4 = browser$1.load;
  var browser_5 = browser$1.useColors;
  var browser_6 = browser$1.storage;
  var browser_7 = browser$1.colors;

  // MIT lisence
  // from https://github.com/substack/tty-browserify/blob/1ba769a6429d242f36226538835b4034bf6b7886/index.js
  function isatty() {
    return false;
  }
  function ReadStream() {
    throw new Error('tty.ReadStream is not implemented');
  }
  function WriteStream() {
    throw new Error('tty.ReadStream is not implemented');
  }
  var tty = {
    isatty: isatty,
    ReadStream: ReadStream,
    WriteStream: WriteStream
  };

  var lookup = [];
  var revLookup = [];
  var Arr = typeof Uint8Array !== 'undefined' ? Uint8Array : Array;
  var inited = false;

  function init() {
    inited = true;
    var code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';

    for (var i = 0, len = code.length; i < len; ++i) {
      lookup[i] = code[i];
      revLookup[code.charCodeAt(i)] = i;
    }

    revLookup['-'.charCodeAt(0)] = 62;
    revLookup['_'.charCodeAt(0)] = 63;
  }

  function toByteArray(b64) {
    if (!inited) {
      init();
    }

    var i, j, l, tmp, placeHolders, arr;
    var len = b64.length;

    if (len % 4 > 0) {
      throw new Error('Invalid string. Length must be a multiple of 4');
    } // the number of equal signs (place holders)
    // if there are two placeholders, than the two characters before it
    // represent one byte
    // if there is only one, then the three characters before it represent 2 bytes
    // this is just a cheap hack to not do indexOf twice


    placeHolders = b64[len - 2] === '=' ? 2 : b64[len - 1] === '=' ? 1 : 0; // base64 is 4/3 + up to two characters of the original data

    arr = new Arr(len * 3 / 4 - placeHolders); // if there are placeholders, only get up to the last complete 4 chars

    l = placeHolders > 0 ? len - 4 : len;
    var L = 0;

    for (i = 0, j = 0; i < l; i += 4, j += 3) {
      tmp = revLookup[b64.charCodeAt(i)] << 18 | revLookup[b64.charCodeAt(i + 1)] << 12 | revLookup[b64.charCodeAt(i + 2)] << 6 | revLookup[b64.charCodeAt(i + 3)];
      arr[L++] = tmp >> 16 & 0xFF;
      arr[L++] = tmp >> 8 & 0xFF;
      arr[L++] = tmp & 0xFF;
    }

    if (placeHolders === 2) {
      tmp = revLookup[b64.charCodeAt(i)] << 2 | revLookup[b64.charCodeAt(i + 1)] >> 4;
      arr[L++] = tmp & 0xFF;
    } else if (placeHolders === 1) {
      tmp = revLookup[b64.charCodeAt(i)] << 10 | revLookup[b64.charCodeAt(i + 1)] << 4 | revLookup[b64.charCodeAt(i + 2)] >> 2;
      arr[L++] = tmp >> 8 & 0xFF;
      arr[L++] = tmp & 0xFF;
    }

    return arr;
  }

  function tripletToBase64(num) {
    return lookup[num >> 18 & 0x3F] + lookup[num >> 12 & 0x3F] + lookup[num >> 6 & 0x3F] + lookup[num & 0x3F];
  }

  function encodeChunk(uint8, start, end) {
    var tmp;
    var output = [];

    for (var i = start; i < end; i += 3) {
      tmp = (uint8[i] << 16) + (uint8[i + 1] << 8) + uint8[i + 2];
      output.push(tripletToBase64(tmp));
    }

    return output.join('');
  }

  function fromByteArray(uint8) {
    if (!inited) {
      init();
    }

    var tmp;
    var len = uint8.length;
    var extraBytes = len % 3; // if we have 1 byte left, pad 2 bytes

    var output = '';
    var parts = [];
    var maxChunkLength = 16383; // must be multiple of 3
    // go through the array every three bytes, we'll deal with trailing stuff later

    for (var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) {
      parts.push(encodeChunk(uint8, i, i + maxChunkLength > len2 ? len2 : i + maxChunkLength));
    } // pad the end with zeros, but make sure to not forget the extra bytes


    if (extraBytes === 1) {
      tmp = uint8[len - 1];
      output += lookup[tmp >> 2];
      output += lookup[tmp << 4 & 0x3F];
      output += '==';
    } else if (extraBytes === 2) {
      tmp = (uint8[len - 2] << 8) + uint8[len - 1];
      output += lookup[tmp >> 10];
      output += lookup[tmp >> 4 & 0x3F];
      output += lookup[tmp << 2 & 0x3F];
      output += '=';
    }

    parts.push(output);
    return parts.join('');
  }

  function read(buffer, offset, isLE, mLen, nBytes) {
    var e, m;
    var eLen = nBytes * 8 - mLen - 1;
    var eMax = (1 << eLen) - 1;
    var eBias = eMax >> 1;
    var nBits = -7;
    var i = isLE ? nBytes - 1 : 0;
    var d = isLE ? -1 : 1;
    var s = buffer[offset + i];
    i += d;
    e = s & (1 << -nBits) - 1;
    s >>= -nBits;
    nBits += eLen;

    for (; nBits > 0; e = e * 256 + buffer[offset + i], i += d, nBits -= 8) {}

    m = e & (1 << -nBits) - 1;
    e >>= -nBits;
    nBits += mLen;

    for (; nBits > 0; m = m * 256 + buffer[offset + i], i += d, nBits -= 8) {}

    if (e === 0) {
      e = 1 - eBias;
    } else if (e === eMax) {
      return m ? NaN : (s ? -1 : 1) * Infinity;
    } else {
      m = m + Math.pow(2, mLen);
      e = e - eBias;
    }

    return (s ? -1 : 1) * m * Math.pow(2, e - mLen);
  }
  function write(buffer, value, offset, isLE, mLen, nBytes) {
    var e, m, c;
    var eLen = nBytes * 8 - mLen - 1;
    var eMax = (1 << eLen) - 1;
    var eBias = eMax >> 1;
    var rt = mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0;
    var i = isLE ? 0 : nBytes - 1;
    var d = isLE ? 1 : -1;
    var s = value < 0 || value === 0 && 1 / value < 0 ? 1 : 0;
    value = Math.abs(value);

    if (isNaN(value) || value === Infinity) {
      m = isNaN(value) ? 1 : 0;
      e = eMax;
    } else {
      e = Math.floor(Math.log(value) / Math.LN2);

      if (value * (c = Math.pow(2, -e)) < 1) {
        e--;
        c *= 2;
      }

      if (e + eBias >= 1) {
        value += rt / c;
      } else {
        value += rt * Math.pow(2, 1 - eBias);
      }

      if (value * c >= 2) {
        e++;
        c /= 2;
      }

      if (e + eBias >= eMax) {
        m = 0;
        e = eMax;
      } else if (e + eBias >= 1) {
        m = (value * c - 1) * Math.pow(2, mLen);
        e = e + eBias;
      } else {
        m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen);
        e = 0;
      }
    }

    for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8) {}

    e = e << mLen | m;
    eLen += mLen;

    for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8) {}

    buffer[offset + i - d] |= s * 128;
  }

  var toString$4 = {}.toString;
  var isArray = Array.isArray || function (arr) {
    return toString$4.call(arr) == '[object Array]';
  };

  var INSPECT_MAX_BYTES = 50;
  /**
   * If `Buffer.TYPED_ARRAY_SUPPORT`:
   *   === true    Use Uint8Array implementation (fastest)
   *   === false   Use Object implementation (most compatible, even IE6)
   *
   * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,
   * Opera 11.6+, iOS 4.2+.
   *
   * Due to various browser bugs, sometimes the Object implementation will be used even
   * when the browser supports typed arrays.
   *
   * Note:
   *
   *   - Firefox 4-29 lacks support for adding new properties to `Uint8Array` instances,
   *     See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438.
   *
   *   - Chrome 9-10 is missing the `TypedArray.prototype.subarray` function.
   *
   *   - IE10 has a broken `TypedArray.prototype.subarray` function which returns arrays of
   *     incorrect length in some situations.

   * We detect these buggy browsers and set `Buffer.TYPED_ARRAY_SUPPORT` to `false` so they
   * get the Object implementation, which is slower but behaves correctly.
   */

  Buffer.TYPED_ARRAY_SUPPORT = global$2.TYPED_ARRAY_SUPPORT !== undefined ? global$2.TYPED_ARRAY_SUPPORT : true;

  function kMaxLength() {
    return Buffer.TYPED_ARRAY_SUPPORT ? 0x7fffffff : 0x3fffffff;
  }

  function createBuffer(that, length) {
    if (kMaxLength() < length) {
      throw new RangeError('Invalid typed array length');
    }

    if (Buffer.TYPED_ARRAY_SUPPORT) {
      // Return an augmented `Uint8Array` instance, for best performance
      that = new Uint8Array(length);
      that.__proto__ = Buffer.prototype;
    } else {
      // Fallback: Return an object instance of the Buffer class
      if (that === null) {
        that = new Buffer(length);
      }

      that.length = length;
    }

    return that;
  }
  /**
   * The Buffer constructor returns instances of `Uint8Array` that have their
   * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of
   * `Uint8Array`, so the returned instances will have all the node `Buffer` methods
   * and the `Uint8Array` methods. Square bracket notation works as expected -- it
   * returns a single octet.
   *
   * The `Uint8Array` prototype remains unmodified.
   */


  function Buffer(arg, encodingOrOffset, length) {
    if (!Buffer.TYPED_ARRAY_SUPPORT && !(this instanceof Buffer)) {
      return new Buffer(arg, encodingOrOffset, length);
    } // Common case.


    if (typeof arg === 'number') {
      if (typeof encodingOrOffset === 'string') {
        throw new Error('If encoding is specified then the first argument must be a string');
      }

      return allocUnsafe(this, arg);
    }

    return from(this, arg, encodingOrOffset, length);
  }
  Buffer.poolSize = 8192; // not used by this implementation
  // TODO: Legacy, not needed anymore. Remove in next major version.

  Buffer._augment = function (arr) {
    arr.__proto__ = Buffer.prototype;
    return arr;
  };

  function from(that, value, encodingOrOffset, length) {
    if (typeof value === 'number') {
      throw new TypeError('"value" argument must not be a number');
    }

    if (typeof ArrayBuffer !== 'undefined' && value instanceof ArrayBuffer) {
      return fromArrayBuffer(that, value, encodingOrOffset, length);
    }

    if (typeof value === 'string') {
      return fromString(that, value, encodingOrOffset);
    }

    return fromObject(that, value);
  }
  /**
   * Functionally equivalent to Buffer(arg, encoding) but throws a TypeError
   * if value is a number.
   * Buffer.from(str[, encoding])
   * Buffer.from(array)
   * Buffer.from(buffer)
   * Buffer.from(arrayBuffer[, byteOffset[, length]])
   **/


  Buffer.from = function (value, encodingOrOffset, length) {
    return from(null, value, encodingOrOffset, length);
  };

  if (Buffer.TYPED_ARRAY_SUPPORT) {
    Buffer.prototype.__proto__ = Uint8Array.prototype;
    Buffer.__proto__ = Uint8Array;
  }

  function assertSize(size) {
    if (typeof size !== 'number') {
      throw new TypeError('"size" argument must be a number');
    } else if (size < 0) {
      throw new RangeError('"size" argument must not be negative');
    }
  }

  function alloc(that, size, fill, encoding) {
    assertSize(size);

    if (size <= 0) {
      return createBuffer(that, size);
    }

    if (fill !== undefined) {
      // Only pay attention to encoding if it's a string. This
      // prevents accidentally sending in a number that would
      // be interpretted as a start offset.
      return typeof encoding === 'string' ? createBuffer(that, size).fill(fill, encoding) : createBuffer(that, size).fill(fill);
    }

    return createBuffer(that, size);
  }
  /**
   * Creates a new filled Buffer instance.
   * alloc(size[, fill[, encoding]])
   **/


  Buffer.alloc = function (size, fill, encoding) {
    return alloc(null, size, fill, encoding);
  };

  function allocUnsafe(that, size) {
    assertSize(size);
    that = createBuffer(that, size < 0 ? 0 : checked(size) | 0);

    if (!Buffer.TYPED_ARRAY_SUPPORT) {
      for (var i = 0; i < size; ++i) {
        that[i] = 0;
      }
    }

    return that;
  }
  /**
   * Equivalent to Buffer(num), by default creates a non-zero-filled Buffer instance.
   * */


  Buffer.allocUnsafe = function (size) {
    return allocUnsafe(null, size);
  };
  /**
   * Equivalent to SlowBuffer(num), by default creates a non-zero-filled Buffer instance.
   */


  Buffer.allocUnsafeSlow = function (size) {
    return allocUnsafe(null, size);
  };

  function fromString(that, string, encoding) {
    if (typeof encoding !== 'string' || encoding === '') {
      encoding = 'utf8';
    }

    if (!Buffer.isEncoding(encoding)) {
      throw new TypeError('"encoding" must be a valid string encoding');
    }

    var length = byteLength(string, encoding) | 0;
    that = createBuffer(that, length);
    var actual = that.write(string, encoding);

    if (actual !== length) {
      // Writing a hex string, for example, that contains invalid characters will
      // cause everything after the first invalid character to be ignored. (e.g.
      // 'abxxcd' will be treated as 'ab')
      that = that.slice(0, actual);
    }

    return that;
  }

  function fromArrayLike(that, array) {
    var length = array.length < 0 ? 0 : checked(array.length) | 0;
    that = createBuffer(that, length);

    for (var i = 0; i < length; i += 1) {
      that[i] = array[i] & 255;
    }

    return that;
  }

  function fromArrayBuffer(that, array, byteOffset, length) {
    array.byteLength; // this throws if `array` is not a valid ArrayBuffer

    if (byteOffset < 0 || array.byteLength < byteOffset) {
      throw new RangeError('\'offset\' is out of bounds');
    }

    if (array.byteLength < byteOffset + (length || 0)) {
      throw new RangeError('\'length\' is out of bounds');
    }

    if (byteOffset === undefined && length === undefined) {
      array = new Uint8Array(array);
    } else if (length === undefined) {
      array = new Uint8Array(array, byteOffset);
    } else {
      array = new Uint8Array(array, byteOffset, length);
    }

    if (Buffer.TYPED_ARRAY_SUPPORT) {
      // Return an augmented `Uint8Array` instance, for best performance
      that = array;
      that.__proto__ = Buffer.prototype;
    } else {
      // Fallback: Return an object instance of the Buffer class
      that = fromArrayLike(that, array);
    }

    return that;
  }

  function fromObject(that, obj) {
    if (internalIsBuffer(obj)) {
      var len = checked(obj.length) | 0;
      that = createBuffer(that, len);

      if (that.length === 0) {
        return that;
      }

      obj.copy(that, 0, 0, len);
      return that;
    }

    if (obj) {
      if (typeof ArrayBuffer !== 'undefined' && obj.buffer instanceof ArrayBuffer || 'length' in obj) {
        if (typeof obj.length !== 'number' || isnan(obj.length)) {
          return createBuffer(that, 0);
        }

        return fromArrayLike(that, obj);
      }

      if (obj.type === 'Buffer' && isArray(obj.data)) {
        return fromArrayLike(that, obj.data);
      }
    }

    throw new TypeError('First argument must be a string, Buffer, ArrayBuffer, Array, or array-like object.');
  }

  function checked(length) {
    // Note: cannot use `length < kMaxLength()` here because that fails when
    // length is NaN (which is otherwise coerced to zero.)
    if (length >= kMaxLength()) {
      throw new RangeError('Attempt to allocate Buffer larger than maximum ' + 'size: 0x' + kMaxLength().toString(16) + ' bytes');
    }

    return length | 0;
  }
  Buffer.isBuffer = isBuffer;

  function internalIsBuffer(b) {
    return !!(b != null && b._isBuffer);
  }

  Buffer.compare = function compare(a, b) {
    if (!internalIsBuffer(a) || !internalIsBuffer(b)) {
      throw new TypeError('Arguments must be Buffers');
    }

    if (a === b) return 0;
    var x = a.length;
    var y = b.length;

    for (var i = 0, len = Math.min(x, y); i < len; ++i) {
      if (a[i] !== b[i]) {
        x = a[i];
        y = b[i];
        break;
      }
    }

    if (x < y) return -1;
    if (y < x) return 1;
    return 0;
  };

  Buffer.isEncoding = function isEncoding(encoding) {
    switch (String(encoding).toLowerCase()) {
      case 'hex':
      case 'utf8':
      case 'utf-8':
      case 'ascii':
      case 'latin1':
      case 'binary':
      case 'base64':
      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return true;

      default:
        return false;
    }
  };

  Buffer.concat = function concat(list, length) {
    if (!isArray(list)) {
      throw new TypeError('"list" argument must be an Array of Buffers');
    }

    if (list.length === 0) {
      return Buffer.alloc(0);
    }

    var i;

    if (length === undefined) {
      length = 0;

      for (i = 0; i < list.length; ++i) {
        length += list[i].length;
      }
    }

    var buffer = Buffer.allocUnsafe(length);
    var pos = 0;

    for (i = 0; i < list.length; ++i) {
      var buf = list[i];

      if (!internalIsBuffer(buf)) {
        throw new TypeError('"list" argument must be an Array of Buffers');
      }

      buf.copy(buffer, pos);
      pos += buf.length;
    }

    return buffer;
  };

  function byteLength(string, encoding) {
    if (internalIsBuffer(string)) {
      return string.length;
    }

    if (typeof ArrayBuffer !== 'undefined' && typeof ArrayBuffer.isView === 'function' && (ArrayBuffer.isView(string) || string instanceof ArrayBuffer)) {
      return string.byteLength;
    }

    if (typeof string !== 'string') {
      string = '' + string;
    }

    var len = string.length;
    if (len === 0) return 0; // Use a for loop to avoid recursion

    var loweredCase = false;

    for (;;) {
      switch (encoding) {
        case 'ascii':
        case 'latin1':
        case 'binary':
          return len;

        case 'utf8':
        case 'utf-8':
        case undefined:
          return utf8ToBytes(string).length;

        case 'ucs2':
        case 'ucs-2':
        case 'utf16le':
        case 'utf-16le':
          return len * 2;

        case 'hex':
          return len >>> 1;

        case 'base64':
          return base64ToBytes(string).length;

        default:
          if (loweredCase) return utf8ToBytes(string).length; // assume utf8

          encoding = ('' + encoding).toLowerCase();
          loweredCase = true;
      }
    }
  }

  Buffer.byteLength = byteLength;

  function slowToString(encoding, start, end) {
    var loweredCase = false; // No need to verify that "this.length <= MAX_UINT32" since it's a read-only
    // property of a typed array.
    // This behaves neither like String nor Uint8Array in that we set start/end
    // to their upper/lower bounds if the value passed is out of range.
    // undefined is handled specially as per ECMA-262 6th Edition,
    // Section 13.3.3.7 Runtime Semantics: KeyedBindingInitialization.

    if (start === undefined || start < 0) {
      start = 0;
    } // Return early if start > this.length. Done here to prevent potential uint32
    // coercion fail below.


    if (start > this.length) {
      return '';
    }

    if (end === undefined || end > this.length) {
      end = this.length;
    }

    if (end <= 0) {
      return '';
    } // Force coersion to uint32. This will also coerce falsey/NaN values to 0.


    end >>>= 0;
    start >>>= 0;

    if (end <= start) {
      return '';
    }

    if (!encoding) encoding = 'utf8';

    while (true) {
      switch (encoding) {
        case 'hex':
          return hexSlice(this, start, end);

        case 'utf8':
        case 'utf-8':
          return utf8Slice(this, start, end);

        case 'ascii':
          return asciiSlice(this, start, end);

        case 'latin1':
        case 'binary':
          return latin1Slice(this, start, end);

        case 'base64':
          return base64Slice(this, start, end);

        case 'ucs2':
        case 'ucs-2':
        case 'utf16le':
        case 'utf-16le':
          return utf16leSlice(this, start, end);

        default:
          if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding);
          encoding = (encoding + '').toLowerCase();
          loweredCase = true;
      }
    }
  } // The property is used by `Buffer.isBuffer` and `is-buffer` (in Safari 5-7) to detect
  // Buffer instances.


  Buffer.prototype._isBuffer = true;

  function swap(b, n, m) {
    var i = b[n];
    b[n] = b[m];
    b[m] = i;
  }

  Buffer.prototype.swap16 = function swap16() {
    var len = this.length;

    if (len % 2 !== 0) {
      throw new RangeError('Buffer size must be a multiple of 16-bits');
    }

    for (var i = 0; i < len; i += 2) {
      swap(this, i, i + 1);
    }

    return this;
  };

  Buffer.prototype.swap32 = function swap32() {
    var len = this.length;

    if (len % 4 !== 0) {
      throw new RangeError('Buffer size must be a multiple of 32-bits');
    }

    for (var i = 0; i < len; i += 4) {
      swap(this, i, i + 3);
      swap(this, i + 1, i + 2);
    }

    return this;
  };

  Buffer.prototype.swap64 = function swap64() {
    var len = this.length;

    if (len % 8 !== 0) {
      throw new RangeError('Buffer size must be a multiple of 64-bits');
    }

    for (var i = 0; i < len; i += 8) {
      swap(this, i, i + 7);
      swap(this, i + 1, i + 6);
      swap(this, i + 2, i + 5);
      swap(this, i + 3, i + 4);
    }

    return this;
  };

  Buffer.prototype.toString = function toString() {
    var length = this.length | 0;
    if (length === 0) return '';
    if (arguments.length === 0) return utf8Slice(this, 0, length);
    return slowToString.apply(this, arguments);
  };

  Buffer.prototype.equals = function equals(b) {
    if (!internalIsBuffer(b)) throw new TypeError('Argument must be a Buffer');
    if (this === b) return true;
    return Buffer.compare(this, b) === 0;
  };

  Buffer.prototype.inspect = function inspect() {
    var str = '';
    var max = INSPECT_MAX_BYTES;

    if (this.length > 0) {
      str = this.toString('hex', 0, max).match(/.{2}/g).join(' ');
      if (this.length > max) str += ' ... ';
    }

    return '<Buffer ' + str + '>';
  };

  Buffer.prototype.compare = function compare(target, start, end, thisStart, thisEnd) {
    if (!internalIsBuffer(target)) {
      throw new TypeError('Argument must be a Buffer');
    }

    if (start === undefined) {
      start = 0;
    }

    if (end === undefined) {
      end = target ? target.length : 0;
    }

    if (thisStart === undefined) {
      thisStart = 0;
    }

    if (thisEnd === undefined) {
      thisEnd = this.length;
    }

    if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) {
      throw new RangeError('out of range index');
    }

    if (thisStart >= thisEnd && start >= end) {
      return 0;
    }

    if (thisStart >= thisEnd) {
      return -1;
    }

    if (start >= end) {
      return 1;
    }

    start >>>= 0;
    end >>>= 0;
    thisStart >>>= 0;
    thisEnd >>>= 0;
    if (this === target) return 0;
    var x = thisEnd - thisStart;
    var y = end - start;
    var len = Math.min(x, y);
    var thisCopy = this.slice(thisStart, thisEnd);
    var targetCopy = target.slice(start, end);

    for (var i = 0; i < len; ++i) {
      if (thisCopy[i] !== targetCopy[i]) {
        x = thisCopy[i];
        y = targetCopy[i];
        break;
      }
    }

    if (x < y) return -1;
    if (y < x) return 1;
    return 0;
  }; // Finds either the first index of `val` in `buffer` at offset >= `byteOffset`,
  // OR the last index of `val` in `buffer` at offset <= `byteOffset`.
  //
  // Arguments:
  // - buffer - a Buffer to search
  // - val - a string, Buffer, or number
  // - byteOffset - an index into `buffer`; will be clamped to an int32
  // - encoding - an optional encoding, relevant is val is a string
  // - dir - true for indexOf, false for lastIndexOf


  function bidirectionalIndexOf(buffer, val, byteOffset, encoding, dir) {
    // Empty buffer means no match
    if (buffer.length === 0) return -1; // Normalize byteOffset

    if (typeof byteOffset === 'string') {
      encoding = byteOffset;
      byteOffset = 0;
    } else if (byteOffset > 0x7fffffff) {
      byteOffset = 0x7fffffff;
    } else if (byteOffset < -0x80000000) {
      byteOffset = -0x80000000;
    }

    byteOffset = +byteOffset; // Coerce to Number.

    if (isNaN(byteOffset)) {
      // byteOffset: it it's undefined, null, NaN, "foo", etc, search whole buffer
      byteOffset = dir ? 0 : buffer.length - 1;
    } // Normalize byteOffset: negative offsets start from the end of the buffer


    if (byteOffset < 0) byteOffset = buffer.length + byteOffset;

    if (byteOffset >= buffer.length) {
      if (dir) return -1;else byteOffset = buffer.length - 1;
    } else if (byteOffset < 0) {
      if (dir) byteOffset = 0;else return -1;
    } // Normalize val


    if (typeof val === 'string') {
      val = Buffer.from(val, encoding);
    } // Finally, search either indexOf (if dir is true) or lastIndexOf


    if (internalIsBuffer(val)) {
      // Special case: looking for empty string/buffer always fails
      if (val.length === 0) {
        return -1;
      }

      return arrayIndexOf$2(buffer, val, byteOffset, encoding, dir);
    } else if (typeof val === 'number') {
      val = val & 0xFF; // Search for a byte value [0-255]

      if (Buffer.TYPED_ARRAY_SUPPORT && typeof Uint8Array.prototype.indexOf === 'function') {
        if (dir) {
          return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset);
        } else {
          return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset);
        }
      }

      return arrayIndexOf$2(buffer, [val], byteOffset, encoding, dir);
    }

    throw new TypeError('val must be string, number or Buffer');
  }

  function arrayIndexOf$2(arr, val, byteOffset, encoding, dir) {
    var indexSize = 1;
    var arrLength = arr.length;
    var valLength = val.length;

    if (encoding !== undefined) {
      encoding = String(encoding).toLowerCase();

      if (encoding === 'ucs2' || encoding === 'ucs-2' || encoding === 'utf16le' || encoding === 'utf-16le') {
        if (arr.length < 2 || val.length < 2) {
          return -1;
        }

        indexSize = 2;
        arrLength /= 2;
        valLength /= 2;
        byteOffset /= 2;
      }
    }

    function read(buf, i) {
      if (indexSize === 1) {
        return buf[i];
      } else {
        return buf.readUInt16BE(i * indexSize);
      }
    }

    var i;

    if (dir) {
      var foundIndex = -1;

      for (i = byteOffset; i < arrLength; i++) {
        if (read(arr, i) === read(val, foundIndex === -1 ? 0 : i - foundIndex)) {
          if (foundIndex === -1) foundIndex = i;
          if (i - foundIndex + 1 === valLength) return foundIndex * indexSize;
        } else {
          if (foundIndex !== -1) i -= i - foundIndex;
          foundIndex = -1;
        }
      }
    } else {
      if (byteOffset + valLength > arrLength) byteOffset = arrLength - valLength;

      for (i = byteOffset; i >= 0; i--) {
        var found = true;

        for (var j = 0; j < valLength; j++) {
          if (read(arr, i + j) !== read(val, j)) {
            found = false;
            break;
          }
        }

        if (found) return i;
      }
    }

    return -1;
  }

  Buffer.prototype.includes = function includes(val, byteOffset, encoding) {
    return this.indexOf(val, byteOffset, encoding) !== -1;
  };

  Buffer.prototype.indexOf = function indexOf(val, byteOffset, encoding) {
    return bidirectionalIndexOf(this, val, byteOffset, encoding, true);
  };

  Buffer.prototype.lastIndexOf = function lastIndexOf(val, byteOffset, encoding) {
    return bidirectionalIndexOf(this, val, byteOffset, encoding, false);
  };

  function hexWrite(buf, string, offset, length) {
    offset = Number(offset) || 0;
    var remaining = buf.length - offset;

    if (!length) {
      length = remaining;
    } else {
      length = Number(length);

      if (length > remaining) {
        length = remaining;
      }
    } // must be an even number of digits


    var strLen = string.length;
    if (strLen % 2 !== 0) throw new TypeError('Invalid hex string');

    if (length > strLen / 2) {
      length = strLen / 2;
    }

    for (var i = 0; i < length; ++i) {
      var parsed = parseInt(string.substr(i * 2, 2), 16);
      if (isNaN(parsed)) return i;
      buf[offset + i] = parsed;
    }

    return i;
  }

  function utf8Write(buf, string, offset, length) {
    return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length);
  }

  function asciiWrite(buf, string, offset, length) {
    return blitBuffer(asciiToBytes(string), buf, offset, length);
  }

  function latin1Write(buf, string, offset, length) {
    return asciiWrite(buf, string, offset, length);
  }

  function base64Write(buf, string, offset, length) {
    return blitBuffer(base64ToBytes(string), buf, offset, length);
  }

  function ucs2Write(buf, string, offset, length) {
    return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length);
  }

  Buffer.prototype.write = function write(string, offset, length, encoding) {
    // Buffer#write(string)
    if (offset === undefined) {
      encoding = 'utf8';
      length = this.length;
      offset = 0; // Buffer#write(string, encoding)
    } else if (length === undefined && typeof offset === 'string') {
      encoding = offset;
      length = this.length;
      offset = 0; // Buffer#write(string, offset[, length][, encoding])
    } else if (isFinite(offset)) {
      offset = offset | 0;

      if (isFinite(length)) {
        length = length | 0;
        if (encoding === undefined) encoding = 'utf8';
      } else {
        encoding = length;
        length = undefined;
      } // legacy write(string, encoding, offset, length) - remove in v0.13

    } else {
      throw new Error('Buffer.write(string, encoding, offset[, length]) is no longer supported');
    }

    var remaining = this.length - offset;
    if (length === undefined || length > remaining) length = remaining;

    if (string.length > 0 && (length < 0 || offset < 0) || offset > this.length) {
      throw new RangeError('Attempt to write outside buffer bounds');
    }

    if (!encoding) encoding = 'utf8';
    var loweredCase = false;

    for (;;) {
      switch (encoding) {
        case 'hex':
          return hexWrite(this, string, offset, length);

        case 'utf8':
        case 'utf-8':
          return utf8Write(this, string, offset, length);

        case 'ascii':
          return asciiWrite(this, string, offset, length);

        case 'latin1':
        case 'binary':
          return latin1Write(this, string, offset, length);

        case 'base64':
          // Warning: maxLength not taken into account in base64Write
          return base64Write(this, string, offset, length);

        case 'ucs2':
        case 'ucs-2':
        case 'utf16le':
        case 'utf-16le':
          return ucs2Write(this, string, offset, length);

        default:
          if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding);
          encoding = ('' + encoding).toLowerCase();
          loweredCase = true;
      }
    }
  };

  Buffer.prototype.toJSON = function toJSON() {
    return {
      type: 'Buffer',
      data: Array.prototype.slice.call(this._arr || this, 0)
    };
  };

  function base64Slice(buf, start, end) {
    if (start === 0 && end === buf.length) {
      return fromByteArray(buf);
    } else {
      return fromByteArray(buf.slice(start, end));
    }
  }

  function utf8Slice(buf, start, end) {
    end = Math.min(buf.length, end);
    var res = [];
    var i = start;

    while (i < end) {
      var firstByte = buf[i];
      var codePoint = null;
      var bytesPerSequence = firstByte > 0xEF ? 4 : firstByte > 0xDF ? 3 : firstByte > 0xBF ? 2 : 1;

      if (i + bytesPerSequence <= end) {
        var secondByte, thirdByte, fourthByte, tempCodePoint;

        switch (bytesPerSequence) {
          case 1:
            if (firstByte < 0x80) {
              codePoint = firstByte;
            }

            break;

          case 2:
            secondByte = buf[i + 1];

            if ((secondByte & 0xC0) === 0x80) {
              tempCodePoint = (firstByte & 0x1F) << 0x6 | secondByte & 0x3F;

              if (tempCodePoint > 0x7F) {
                codePoint = tempCodePoint;
              }
            }

            break;

          case 3:
            secondByte = buf[i + 1];
            thirdByte = buf[i + 2];

            if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {
              tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | thirdByte & 0x3F;

              if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) {
                codePoint = tempCodePoint;
              }
            }

            break;

          case 4:
            secondByte = buf[i + 1];
            thirdByte = buf[i + 2];
            fourthByte = buf[i + 3];

            if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {
              tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | fourthByte & 0x3F;

              if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) {
                codePoint = tempCodePoint;
              }
            }

        }
      }

      if (codePoint === null) {
        // we did not generate a valid codePoint so insert a
        // replacement char (U+FFFD) and advance only 1 byte
        codePoint = 0xFFFD;
        bytesPerSequence = 1;
      } else if (codePoint > 0xFFFF) {
        // encode to utf16 (surrogate pair dance)
        codePoint -= 0x10000;
        res.push(codePoint >>> 10 & 0x3FF | 0xD800);
        codePoint = 0xDC00 | codePoint & 0x3FF;
      }

      res.push(codePoint);
      i += bytesPerSequence;
    }

    return decodeCodePointsArray(res);
  } // Based on http://stackoverflow.com/a/22747272/680742, the browser with
  // the lowest limit is Chrome, with 0x10000 args.
  // We go 1 magnitude less, for safety


  var MAX_ARGUMENTS_LENGTH = 0x1000;

  function decodeCodePointsArray(codePoints) {
    var len = codePoints.length;

    if (len <= MAX_ARGUMENTS_LENGTH) {
      return String.fromCharCode.apply(String, codePoints); // avoid extra slice()
    } // Decode in chunks to avoid "call stack size exceeded".


    var res = '';
    var i = 0;

    while (i < len) {
      res += String.fromCharCode.apply(String, codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH));
    }

    return res;
  }

  function asciiSlice(buf, start, end) {
    var ret = '';
    end = Math.min(buf.length, end);

    for (var i = start; i < end; ++i) {
      ret += String.fromCharCode(buf[i] & 0x7F);
    }

    return ret;
  }

  function latin1Slice(buf, start, end) {
    var ret = '';
    end = Math.min(buf.length, end);

    for (var i = start; i < end; ++i) {
      ret += String.fromCharCode(buf[i]);
    }

    return ret;
  }

  function hexSlice(buf, start, end) {
    var len = buf.length;
    if (!start || start < 0) start = 0;
    if (!end || end < 0 || end > len) end = len;
    var out = '';

    for (var i = start; i < end; ++i) {
      out += toHex(buf[i]);
    }

    return out;
  }

  function utf16leSlice(buf, start, end) {
    var bytes = buf.slice(start, end);
    var res = '';

    for (var i = 0; i < bytes.length; i += 2) {
      res += String.fromCharCode(bytes[i] + bytes[i + 1] * 256);
    }

    return res;
  }

  Buffer.prototype.slice = function slice(start, end) {
    var len = this.length;
    start = ~~start;
    end = end === undefined ? len : ~~end;

    if (start < 0) {
      start += len;
      if (start < 0) start = 0;
    } else if (start > len) {
      start = len;
    }

    if (end < 0) {
      end += len;
      if (end < 0) end = 0;
    } else if (end > len) {
      end = len;
    }

    if (end < start) end = start;
    var newBuf;

    if (Buffer.TYPED_ARRAY_SUPPORT) {
      newBuf = this.subarray(start, end);
      newBuf.__proto__ = Buffer.prototype;
    } else {
      var sliceLen = end - start;
      newBuf = new Buffer(sliceLen, undefined);

      for (var i = 0; i < sliceLen; ++i) {
        newBuf[i] = this[i + start];
      }
    }

    return newBuf;
  };
  /*
   * Need to make sure that buffer isn't trying to write out of bounds.
   */


  function checkOffset(offset, ext, length) {
    if (offset % 1 !== 0 || offset < 0) throw new RangeError('offset is not uint');
    if (offset + ext > length) throw new RangeError('Trying to access beyond buffer length');
  }

  Buffer.prototype.readUIntLE = function readUIntLE(offset, byteLength, noAssert) {
    offset = offset | 0;
    byteLength = byteLength | 0;
    if (!noAssert) checkOffset(offset, byteLength, this.length);
    var val = this[offset];
    var mul = 1;
    var i = 0;

    while (++i < byteLength && (mul *= 0x100)) {
      val += this[offset + i] * mul;
    }

    return val;
  };

  Buffer.prototype.readUIntBE = function readUIntBE(offset, byteLength, noAssert) {
    offset = offset | 0;
    byteLength = byteLength | 0;

    if (!noAssert) {
      checkOffset(offset, byteLength, this.length);
    }

    var val = this[offset + --byteLength];
    var mul = 1;

    while (byteLength > 0 && (mul *= 0x100)) {
      val += this[offset + --byteLength] * mul;
    }

    return val;
  };

  Buffer.prototype.readUInt8 = function readUInt8(offset, noAssert) {
    if (!noAssert) checkOffset(offset, 1, this.length);
    return this[offset];
  };

  Buffer.prototype.readUInt16LE = function readUInt16LE(offset, noAssert) {
    if (!noAssert) checkOffset(offset, 2, this.length);
    return this[offset] | this[offset + 1] << 8;
  };

  Buffer.prototype.readUInt16BE = function readUInt16BE(offset, noAssert) {
    if (!noAssert) checkOffset(offset, 2, this.length);
    return this[offset] << 8 | this[offset + 1];
  };

  Buffer.prototype.readUInt32LE = function readUInt32LE(offset, noAssert) {
    if (!noAssert) checkOffset(offset, 4, this.length);
    return (this[offset] | this[offset + 1] << 8 | this[offset + 2] << 16) + this[offset + 3] * 0x1000000;
  };

  Buffer.prototype.readUInt32BE = function readUInt32BE(offset, noAssert) {
    if (!noAssert) checkOffset(offset, 4, this.length);
    return this[offset] * 0x1000000 + (this[offset + 1] << 16 | this[offset + 2] << 8 | this[offset + 3]);
  };

  Buffer.prototype.readIntLE = function readIntLE(offset, byteLength, noAssert) {
    offset = offset | 0;
    byteLength = byteLength | 0;
    if (!noAssert) checkOffset(offset, byteLength, this.length);
    var val = this[offset];
    var mul = 1;
    var i = 0;

    while (++i < byteLength && (mul *= 0x100)) {
      val += this[offset + i] * mul;
    }

    mul *= 0x80;
    if (val >= mul) val -= Math.pow(2, 8 * byteLength);
    return val;
  };

  Buffer.prototype.readIntBE = function readIntBE(offset, byteLength, noAssert) {
    offset = offset | 0;
    byteLength = byteLength | 0;
    if (!noAssert) checkOffset(offset, byteLength, this.length);
    var i = byteLength;
    var mul = 1;
    var val = this[offset + --i];

    while (i > 0 && (mul *= 0x100)) {
      val += this[offset + --i] * mul;
    }

    mul *= 0x80;
    if (val >= mul) val -= Math.pow(2, 8 * byteLength);
    return val;
  };

  Buffer.prototype.readInt8 = function readInt8(offset, noAssert) {
    if (!noAssert) checkOffset(offset, 1, this.length);
    if (!(this[offset] & 0x80)) return this[offset];
    return (0xff - this[offset] + 1) * -1;
  };

  Buffer.prototype.readInt16LE = function readInt16LE(offset, noAssert) {
    if (!noAssert) checkOffset(offset, 2, this.length);
    var val = this[offset] | this[offset + 1] << 8;
    return val & 0x8000 ? val | 0xFFFF0000 : val;
  };

  Buffer.prototype.readInt16BE = function readInt16BE(offset, noAssert) {
    if (!noAssert) checkOffset(offset, 2, this.length);
    var val = this[offset + 1] | this[offset] << 8;
    return val & 0x8000 ? val | 0xFFFF0000 : val;
  };

  Buffer.prototype.readInt32LE = function readInt32LE(offset, noAssert) {
    if (!noAssert) checkOffset(offset, 4, this.length);
    return this[offset] | this[offset + 1] << 8 | this[offset + 2] << 16 | this[offset + 3] << 24;
  };

  Buffer.prototype.readInt32BE = function readInt32BE(offset, noAssert) {
    if (!noAssert) checkOffset(offset, 4, this.length);
    return this[offset] << 24 | this[offset + 1] << 16 | this[offset + 2] << 8 | this[offset + 3];
  };

  Buffer.prototype.readFloatLE = function readFloatLE(offset, noAssert) {
    if (!noAssert) checkOffset(offset, 4, this.length);
    return read(this, offset, true, 23, 4);
  };

  Buffer.prototype.readFloatBE = function readFloatBE(offset, noAssert) {
    if (!noAssert) checkOffset(offset, 4, this.length);
    return read(this, offset, false, 23, 4);
  };

  Buffer.prototype.readDoubleLE = function readDoubleLE(offset, noAssert) {
    if (!noAssert) checkOffset(offset, 8, this.length);
    return read(this, offset, true, 52, 8);
  };

  Buffer.prototype.readDoubleBE = function readDoubleBE(offset, noAssert) {
    if (!noAssert) checkOffset(offset, 8, this.length);
    return read(this, offset, false, 52, 8);
  };

  function checkInt(buf, value, offset, ext, max, min) {
    if (!internalIsBuffer(buf)) throw new TypeError('"buffer" argument must be a Buffer instance');
    if (value > max || value < min) throw new RangeError('"value" argument is out of bounds');
    if (offset + ext > buf.length) throw new RangeError('Index out of range');
  }

  Buffer.prototype.writeUIntLE = function writeUIntLE(value, offset, byteLength, noAssert) {
    value = +value;
    offset = offset | 0;
    byteLength = byteLength | 0;

    if (!noAssert) {
      var maxBytes = Math.pow(2, 8 * byteLength) - 1;
      checkInt(this, value, offset, byteLength, maxBytes, 0);
    }

    var mul = 1;
    var i = 0;
    this[offset] = value & 0xFF;

    while (++i < byteLength && (mul *= 0x100)) {
      this[offset + i] = value / mul & 0xFF;
    }

    return offset + byteLength;
  };

  Buffer.prototype.writeUIntBE = function writeUIntBE(value, offset, byteLength, noAssert) {
    value = +value;
    offset = offset | 0;
    byteLength = byteLength | 0;

    if (!noAssert) {
      var maxBytes = Math.pow(2, 8 * byteLength) - 1;
      checkInt(this, value, offset, byteLength, maxBytes, 0);
    }

    var i = byteLength - 1;
    var mul = 1;
    this[offset + i] = value & 0xFF;

    while (--i >= 0 && (mul *= 0x100)) {
      this[offset + i] = value / mul & 0xFF;
    }

    return offset + byteLength;
  };

  Buffer.prototype.writeUInt8 = function writeUInt8(value, offset, noAssert) {
    value = +value;
    offset = offset | 0;
    if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0);
    if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value);
    this[offset] = value & 0xff;
    return offset + 1;
  };

  function objectWriteUInt16(buf, value, offset, littleEndian) {
    if (value < 0) value = 0xffff + value + 1;

    for (var i = 0, j = Math.min(buf.length - offset, 2); i < j; ++i) {
      buf[offset + i] = (value & 0xff << 8 * (littleEndian ? i : 1 - i)) >>> (littleEndian ? i : 1 - i) * 8;
    }
  }

  Buffer.prototype.writeUInt16LE = function writeUInt16LE(value, offset, noAssert) {
    value = +value;
    offset = offset | 0;
    if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0);

    if (Buffer.TYPED_ARRAY_SUPPORT) {
      this[offset] = value & 0xff;
      this[offset + 1] = value >>> 8;
    } else {
      objectWriteUInt16(this, value, offset, true);
    }

    return offset + 2;
  };

  Buffer.prototype.writeUInt16BE = function writeUInt16BE(value, offset, noAssert) {
    value = +value;
    offset = offset | 0;
    if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0);

    if (Buffer.TYPED_ARRAY_SUPPORT) {
      this[offset] = value >>> 8;
      this[offset + 1] = value & 0xff;
    } else {
      objectWriteUInt16(this, value, offset, false);
    }

    return offset + 2;
  };

  function objectWriteUInt32(buf, value, offset, littleEndian) {
    if (value < 0) value = 0xffffffff + value + 1;

    for (var i = 0, j = Math.min(buf.length - offset, 4); i < j; ++i) {
      buf[offset + i] = value >>> (littleEndian ? i : 3 - i) * 8 & 0xff;
    }
  }

  Buffer.prototype.writeUInt32LE = function writeUInt32LE(value, offset, noAssert) {
    value = +value;
    offset = offset | 0;
    if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0);

    if (Buffer.TYPED_ARRAY_SUPPORT) {
      this[offset + 3] = value >>> 24;
      this[offset + 2] = value >>> 16;
      this[offset + 1] = value >>> 8;
      this[offset] = value & 0xff;
    } else {
      objectWriteUInt32(this, value, offset, true);
    }

    return offset + 4;
  };

  Buffer.prototype.writeUInt32BE = function writeUInt32BE(value, offset, noAssert) {
    value = +value;
    offset = offset | 0;
    if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0);

    if (Buffer.TYPED_ARRAY_SUPPORT) {
      this[offset] = value >>> 24;
      this[offset + 1] = value >>> 16;
      this[offset + 2] = value >>> 8;
      this[offset + 3] = value & 0xff;
    } else {
      objectWriteUInt32(this, value, offset, false);
    }

    return offset + 4;
  };

  Buffer.prototype.writeIntLE = function writeIntLE(value, offset, byteLength, noAssert) {
    value = +value;
    offset = offset | 0;

    if (!noAssert) {
      var limit = Math.pow(2, 8 * byteLength - 1);
      checkInt(this, value, offset, byteLength, limit - 1, -limit);
    }

    var i = 0;
    var mul = 1;
    var sub = 0;
    this[offset] = value & 0xFF;

    while (++i < byteLength && (mul *= 0x100)) {
      if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) {
        sub = 1;
      }

      this[offset + i] = (value / mul >> 0) - sub & 0xFF;
    }

    return offset + byteLength;
  };

  Buffer.prototype.writeIntBE = function writeIntBE(value, offset, byteLength, noAssert) {
    value = +value;
    offset = offset | 0;

    if (!noAssert) {
      var limit = Math.pow(2, 8 * byteLength - 1);
      checkInt(this, value, offset, byteLength, limit - 1, -limit);
    }

    var i = byteLength - 1;
    var mul = 1;
    var sub = 0;
    this[offset + i] = value & 0xFF;

    while (--i >= 0 && (mul *= 0x100)) {
      if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) {
        sub = 1;
      }

      this[offset + i] = (value / mul >> 0) - sub & 0xFF;
    }

    return offset + byteLength;
  };

  Buffer.prototype.writeInt8 = function writeInt8(value, offset, noAssert) {
    value = +value;
    offset = offset | 0;
    if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -0x80);
    if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value);
    if (value < 0) value = 0xff + value + 1;
    this[offset] = value & 0xff;
    return offset + 1;
  };

  Buffer.prototype.writeInt16LE = function writeInt16LE(value, offset, noAssert) {
    value = +value;
    offset = offset | 0;
    if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000);

    if (Buffer.TYPED_ARRAY_SUPPORT) {
      this[offset] = value & 0xff;
      this[offset + 1] = value >>> 8;
    } else {
      objectWriteUInt16(this, value, offset, true);
    }

    return offset + 2;
  };

  Buffer.prototype.writeInt16BE = function writeInt16BE(value, offset, noAssert) {
    value = +value;
    offset = offset | 0;
    if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000);

    if (Buffer.TYPED_ARRAY_SUPPORT) {
      this[offset] = value >>> 8;
      this[offset + 1] = value & 0xff;
    } else {
      objectWriteUInt16(this, value, offset, false);
    }

    return offset + 2;
  };

  Buffer.prototype.writeInt32LE = function writeInt32LE(value, offset, noAssert) {
    value = +value;
    offset = offset | 0;
    if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000);

    if (Buffer.TYPED_ARRAY_SUPPORT) {
      this[offset] = value & 0xff;
      this[offset + 1] = value >>> 8;
      this[offset + 2] = value >>> 16;
      this[offset + 3] = value >>> 24;
    } else {
      objectWriteUInt32(this, value, offset, true);
    }

    return offset + 4;
  };

  Buffer.prototype.writeInt32BE = function writeInt32BE(value, offset, noAssert) {
    value = +value;
    offset = offset | 0;
    if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000);
    if (value < 0) value = 0xffffffff + value + 1;

    if (Buffer.TYPED_ARRAY_SUPPORT) {
      this[offset] = value >>> 24;
      this[offset + 1] = value >>> 16;
      this[offset + 2] = value >>> 8;
      this[offset + 3] = value & 0xff;
    } else {
      objectWriteUInt32(this, value, offset, false);
    }

    return offset + 4;
  };

  function checkIEEE754(buf, value, offset, ext, max, min) {
    if (offset + ext > buf.length) throw new RangeError('Index out of range');
    if (offset < 0) throw new RangeError('Index out of range');
  }

  function writeFloat(buf, value, offset, littleEndian, noAssert) {
    if (!noAssert) {
      checkIEEE754(buf, value, offset, 4);
    }

    write(buf, value, offset, littleEndian, 23, 4);
    return offset + 4;
  }

  Buffer.prototype.writeFloatLE = function writeFloatLE(value, offset, noAssert) {
    return writeFloat(this, value, offset, true, noAssert);
  };

  Buffer.prototype.writeFloatBE = function writeFloatBE(value, offset, noAssert) {
    return writeFloat(this, value, offset, false, noAssert);
  };

  function writeDouble(buf, value, offset, littleEndian, noAssert) {
    if (!noAssert) {
      checkIEEE754(buf, value, offset, 8);
    }

    write(buf, value, offset, littleEndian, 52, 8);
    return offset + 8;
  }

  Buffer.prototype.writeDoubleLE = function writeDoubleLE(value, offset, noAssert) {
    return writeDouble(this, value, offset, true, noAssert);
  };

  Buffer.prototype.writeDoubleBE = function writeDoubleBE(value, offset, noAssert) {
    return writeDouble(this, value, offset, false, noAssert);
  }; // copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)


  Buffer.prototype.copy = function copy(target, targetStart, start, end) {
    if (!start) start = 0;
    if (!end && end !== 0) end = this.length;
    if (targetStart >= target.length) targetStart = target.length;
    if (!targetStart) targetStart = 0;
    if (end > 0 && end < start) end = start; // Copy 0 bytes; we're done

    if (end === start) return 0;
    if (target.length === 0 || this.length === 0) return 0; // Fatal error conditions

    if (targetStart < 0) {
      throw new RangeError('targetStart out of bounds');
    }

    if (start < 0 || start >= this.length) throw new RangeError('sourceStart out of bounds');
    if (end < 0) throw new RangeError('sourceEnd out of bounds'); // Are we oob?

    if (end > this.length) end = this.length;

    if (target.length - targetStart < end - start) {
      end = target.length - targetStart + start;
    }

    var len = end - start;
    var i;

    if (this === target && start < targetStart && targetStart < end) {
      // descending copy from end
      for (i = len - 1; i >= 0; --i) {
        target[i + targetStart] = this[i + start];
      }
    } else if (len < 1000 || !Buffer.TYPED_ARRAY_SUPPORT) {
      // ascending copy from start
      for (i = 0; i < len; ++i) {
        target[i + targetStart] = this[i + start];
      }
    } else {
      Uint8Array.prototype.set.call(target, this.subarray(start, start + len), targetStart);
    }

    return len;
  }; // Usage:
  //    buffer.fill(number[, offset[, end]])
  //    buffer.fill(buffer[, offset[, end]])
  //    buffer.fill(string[, offset[, end]][, encoding])


  Buffer.prototype.fill = function fill(val, start, end, encoding) {
    // Handle string cases:
    if (typeof val === 'string') {
      if (typeof start === 'string') {
        encoding = start;
        start = 0;
        end = this.length;
      } else if (typeof end === 'string') {
        encoding = end;
        end = this.length;
      }

      if (val.length === 1) {
        var code = val.charCodeAt(0);

        if (code < 256) {
          val = code;
        }
      }

      if (encoding !== undefined && typeof encoding !== 'string') {
        throw new TypeError('encoding must be a string');
      }

      if (typeof encoding === 'string' && !Buffer.isEncoding(encoding)) {
        throw new TypeError('Unknown encoding: ' + encoding);
      }
    } else if (typeof val === 'number') {
      val = val & 255;
    } // Invalid ranges are not set to a default, so can range check early.


    if (start < 0 || this.length < start || this.length < end) {
      throw new RangeError('Out of range index');
    }

    if (end <= start) {
      return this;
    }

    start = start >>> 0;
    end = end === undefined ? this.length : end >>> 0;
    if (!val) val = 0;
    var i;

    if (typeof val === 'number') {
      for (i = start; i < end; ++i) {
        this[i] = val;
      }
    } else {
      var bytes = internalIsBuffer(val) ? val : utf8ToBytes(new Buffer(val, encoding).toString());
      var len = bytes.length;

      for (i = 0; i < end - start; ++i) {
        this[i + start] = bytes[i % len];
      }
    }

    return this;
  }; // HELPER FUNCTIONS
  // ================


  var INVALID_BASE64_RE = /[^+\/0-9A-Za-z-_]/g;

  function base64clean(str) {
    // Node strips out invalid characters like \n and \t from the string, base64-js does not
    str = stringtrim(str).replace(INVALID_BASE64_RE, ''); // Node converts strings with length < 2 to ''

    if (str.length < 2) return ''; // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not

    while (str.length % 4 !== 0) {
      str = str + '=';
    }

    return str;
  }

  function stringtrim(str) {
    if (str.trim) return str.trim();
    return str.replace(/^\s+|\s+$/g, '');
  }

  function toHex(n) {
    if (n < 16) return '0' + n.toString(16);
    return n.toString(16);
  }

  function utf8ToBytes(string, units) {
    units = units || Infinity;
    var codePoint;
    var length = string.length;
    var leadSurrogate = null;
    var bytes = [];

    for (var i = 0; i < length; ++i) {
      codePoint = string.charCodeAt(i); // is surrogate component

      if (codePoint > 0xD7FF && codePoint < 0xE000) {
        // last char was a lead
        if (!leadSurrogate) {
          // no lead yet
          if (codePoint > 0xDBFF) {
            // unexpected trail
            if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);
            continue;
          } else if (i + 1 === length) {
            // unpaired lead
            if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);
            continue;
          } // valid lead


          leadSurrogate = codePoint;
          continue;
        } // 2 leads in a row


        if (codePoint < 0xDC00) {
          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);
          leadSurrogate = codePoint;
          continue;
        } // valid surrogate pair


        codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000;
      } else if (leadSurrogate) {
        // valid bmp char, but last char was a lead
        if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);
      }

      leadSurrogate = null; // encode utf8

      if (codePoint < 0x80) {
        if ((units -= 1) < 0) break;
        bytes.push(codePoint);
      } else if (codePoint < 0x800) {
        if ((units -= 2) < 0) break;
        bytes.push(codePoint >> 0x6 | 0xC0, codePoint & 0x3F | 0x80);
      } else if (codePoint < 0x10000) {
        if ((units -= 3) < 0) break;
        bytes.push(codePoint >> 0xC | 0xE0, codePoint >> 0x6 & 0x3F | 0x80, codePoint & 0x3F | 0x80);
      } else if (codePoint < 0x110000) {
        if ((units -= 4) < 0) break;
        bytes.push(codePoint >> 0x12 | 0xF0, codePoint >> 0xC & 0x3F | 0x80, codePoint >> 0x6 & 0x3F | 0x80, codePoint & 0x3F | 0x80);
      } else {
        throw new Error('Invalid code point');
      }
    }

    return bytes;
  }

  function asciiToBytes(str) {
    var byteArray = [];

    for (var i = 0; i < str.length; ++i) {
      // Node's code seems to be doing this and not & 0x7F..
      byteArray.push(str.charCodeAt(i) & 0xFF);
    }

    return byteArray;
  }

  function utf16leToBytes(str, units) {
    var c, hi, lo;
    var byteArray = [];

    for (var i = 0; i < str.length; ++i) {
      if ((units -= 2) < 0) break;
      c = str.charCodeAt(i);
      hi = c >> 8;
      lo = c % 256;
      byteArray.push(lo);
      byteArray.push(hi);
    }

    return byteArray;
  }

  function base64ToBytes(str) {
    return toByteArray(base64clean(str));
  }

  function blitBuffer(src, dst, offset, length) {
    for (var i = 0; i < length; ++i) {
      if (i + offset >= dst.length || i >= src.length) break;
      dst[i + offset] = src[i];
    }

    return i;
  }

  function isnan(val) {
    return val !== val; // eslint-disable-line no-self-compare
  } // the following is from is-buffer, also by Feross Aboukhadijeh and with same lisence
  // The _isBuffer check is for Safari 5-7 support, because it's missing
  // Object.prototype.constructor. Remove this eventually


  function isBuffer(obj) {
    return obj != null && (!!obj._isBuffer || isFastBuffer(obj) || isSlowBuffer(obj));
  }

  function isFastBuffer(obj) {
    return !!obj.constructor && typeof obj.constructor.isBuffer === 'function' && obj.constructor.isBuffer(obj);
  } // For Node v0.10 support. Remove this eventually.


  function isSlowBuffer(obj) {
    return typeof obj.readFloatLE === 'function' && typeof obj.slice === 'function' && isFastBuffer(obj.slice(0, 0));
  }

  var inherits$1;

  if (typeof Object.create === 'function') {
    inherits$1 = function inherits(ctor, superCtor) {
      // implementation from standard node.js 'util' module
      ctor.super_ = superCtor;
      ctor.prototype = Object.create(superCtor.prototype, {
        constructor: {
          value: ctor,
          enumerable: false,
          writable: true,
          configurable: true
        }
      });
    };
  } else {
    inherits$1 = function inherits(ctor, superCtor) {
      ctor.super_ = superCtor;

      var TempCtor = function TempCtor() {};

      TempCtor.prototype = superCtor.prototype;
      ctor.prototype = new TempCtor();
      ctor.prototype.constructor = ctor;
    };
  }

  var inherits$2 = inherits$1;

  var formatRegExp = /%[sdj%]/g;
  function format(f) {
    if (!isString(f)) {
      var objects = [];

      for (var i = 0; i < arguments.length; i++) {
        objects.push(inspect(arguments[i]));
      }

      return objects.join(' ');
    }

    var i = 1;
    var args = arguments;
    var len = args.length;
    var str = String(f).replace(formatRegExp, function (x) {
      if (x === '%%') return '%';
      if (i >= len) return x;

      switch (x) {
        case '%s':
          return String(args[i++]);

        case '%d':
          return Number(args[i++]);

        case '%j':
          try {
            return JSON.stringify(args[i++]);
          } catch (_) {
            return '[Circular]';
          }

        default:
          return x;
      }
    });

    for (var x = args[i]; i < len; x = args[++i]) {
      if (isNull(x) || !isObject(x)) {
        str += ' ' + x;
      } else {
        str += ' ' + inspect(x);
      }
    }

    return str;
  }
  // Returns a modified function which warns once by default.
  // If --no-deprecation is set, then it is a no-op.

  function deprecate(fn, msg) {
    // Allow for deprecating things in the process of starting up.
    if (isUndefined(global$2.process)) {
      return function () {
        return deprecate(fn, msg).apply(this, arguments);
      };
    }

    if (process$3.noDeprecation === true) {
      return fn;
    }

    var warned = false;

    function deprecated() {
      if (!warned) {
        if (process$3.throwDeprecation) {
          throw new Error(msg);
        } else if (process$3.traceDeprecation) {
          console.trace(msg);
        } else {
          console.error(msg);
        }

        warned = true;
      }

      return fn.apply(this, arguments);
    }

    return deprecated;
  }
  var debugs = {};
  var debugEnviron;
  function debuglog(set) {
    if (isUndefined(debugEnviron)) debugEnviron = process$3.env.NODE_DEBUG || '';
    set = set.toUpperCase();

    if (!debugs[set]) {
      if (new RegExp('\\b' + set + '\\b', 'i').test(debugEnviron)) {
        var pid = 0;

        debugs[set] = function () {
          var msg = format.apply(null, arguments);
          console.error('%s %d: %s', set, pid, msg);
        };
      } else {
        debugs[set] = function () {};
      }
    }

    return debugs[set];
  }
  /**
   * Echos the value of a value. Trys to print the value out
   * in the best way possible given the different types.
   *
   * @param {Object} obj The object to print out.
   * @param {Object} opts Optional options object that alters the output.
   */

  /* legacy: obj, showHidden, depth, colors*/

  function inspect(obj, opts) {
    // default options
    var ctx = {
      seen: [],
      stylize: stylizeNoColor
    }; // legacy...

    if (arguments.length >= 3) ctx.depth = arguments[2];
    if (arguments.length >= 4) ctx.colors = arguments[3];

    if (isBoolean(opts)) {
      // legacy...
      ctx.showHidden = opts;
    } else if (opts) {
      // got an "options" object
      _extend(ctx, opts);
    } // set default options


    if (isUndefined(ctx.showHidden)) ctx.showHidden = false;
    if (isUndefined(ctx.depth)) ctx.depth = 2;
    if (isUndefined(ctx.colors)) ctx.colors = false;
    if (isUndefined(ctx.customInspect)) ctx.customInspect = true;
    if (ctx.colors) ctx.stylize = stylizeWithColor;
    return formatValue(ctx, obj, ctx.depth);
  } // http://en.wikipedia.org/wiki/ANSI_escape_code#graphics

  inspect.colors = {
    'bold': [1, 22],
    'italic': [3, 23],
    'underline': [4, 24],
    'inverse': [7, 27],
    'white': [37, 39],
    'grey': [90, 39],
    'black': [30, 39],
    'blue': [34, 39],
    'cyan': [36, 39],
    'green': [32, 39],
    'magenta': [35, 39],
    'red': [31, 39],
    'yellow': [33, 39]
  }; // Don't use 'blue' not visible on cmd.exe

  inspect.styles = {
    'special': 'cyan',
    'number': 'yellow',
    'boolean': 'yellow',
    'undefined': 'grey',
    'null': 'bold',
    'string': 'green',
    'date': 'magenta',
    // "name": intentionally not styling
    'regexp': 'red'
  };

  function stylizeWithColor(str, styleType) {
    var style = inspect.styles[styleType];

    if (style) {
      return '\u001b[' + inspect.colors[style][0] + 'm' + str + '\u001b[' + inspect.colors[style][1] + 'm';
    } else {
      return str;
    }
  }

  function stylizeNoColor(str, styleType) {
    return str;
  }

  function arrayToHash(array) {
    var hash = {};
    array.forEach(function (val, idx) {
      hash[val] = true;
    });
    return hash;
  }

  function formatValue(ctx, value, recurseTimes) {
    // Provide a hook for user-specified inspect functions.
    // Check that value is an object with an inspect function on it
    if (ctx.customInspect && value && isFunction(value.inspect) && // Filter out the util module, it's inspect function is special
    value.inspect !== inspect && // Also filter out any prototype objects using the circular check.
    !(value.constructor && value.constructor.prototype === value)) {
      var ret = value.inspect(recurseTimes, ctx);

      if (!isString(ret)) {
        ret = formatValue(ctx, ret, recurseTimes);
      }

      return ret;
    } // Primitive types cannot have properties


    var primitive = formatPrimitive(ctx, value);

    if (primitive) {
      return primitive;
    } // Look up the keys of the object.


    var keys = Object.keys(value);
    var visibleKeys = arrayToHash(keys);

    if (ctx.showHidden) {
      keys = Object.getOwnPropertyNames(value);
    } // IE doesn't make error fields non-enumerable
    // http://msdn.microsoft.com/en-us/library/ie/dww52sbt(v=vs.94).aspx


    if (isError(value) && (keys.indexOf('message') >= 0 || keys.indexOf('description') >= 0)) {
      return formatError(value);
    } // Some type of object without properties can be shortcutted.


    if (keys.length === 0) {
      if (isFunction(value)) {
        var name = value.name ? ': ' + value.name : '';
        return ctx.stylize('[Function' + name + ']', 'special');
      }

      if (isRegExp(value)) {
        return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');
      }

      if (isDate(value)) {
        return ctx.stylize(Date.prototype.toString.call(value), 'date');
      }

      if (isError(value)) {
        return formatError(value);
      }
    }

    var base = '',
        array = false,
        braces = ['{', '}']; // Make Array say that they are Array

    if (isArray$1(value)) {
      array = true;
      braces = ['[', ']'];
    } // Make functions say that they are functions


    if (isFunction(value)) {
      var n = value.name ? ': ' + value.name : '';
      base = ' [Function' + n + ']';
    } // Make RegExps say that they are RegExps


    if (isRegExp(value)) {
      base = ' ' + RegExp.prototype.toString.call(value);
    } // Make dates with properties first say the date


    if (isDate(value)) {
      base = ' ' + Date.prototype.toUTCString.call(value);
    } // Make error with message first say the error


    if (isError(value)) {
      base = ' ' + formatError(value);
    }

    if (keys.length === 0 && (!array || value.length == 0)) {
      return braces[0] + base + braces[1];
    }

    if (recurseTimes < 0) {
      if (isRegExp(value)) {
        return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');
      } else {
        return ctx.stylize('[Object]', 'special');
      }
    }

    ctx.seen.push(value);
    var output;

    if (array) {
      output = formatArray(ctx, value, recurseTimes, visibleKeys, keys);
    } else {
      output = keys.map(function (key) {
        return formatProperty(ctx, value, recurseTimes, visibleKeys, key, array);
      });
    }

    ctx.seen.pop();
    return reduceToSingleString(output, base, braces);
  }

  function formatPrimitive(ctx, value) {
    if (isUndefined(value)) return ctx.stylize('undefined', 'undefined');

    if (isString(value)) {
      var simple = '\'' + JSON.stringify(value).replace(/^"|"$/g, '').replace(/'/g, "\\'").replace(/\\"/g, '"') + '\'';
      return ctx.stylize(simple, 'string');
    }

    if (isNumber(value)) return ctx.stylize('' + value, 'number');
    if (isBoolean(value)) return ctx.stylize('' + value, 'boolean'); // For some reason typeof null is "object", so special case here.

    if (isNull(value)) return ctx.stylize('null', 'null');
  }

  function formatError(value) {
    return '[' + Error.prototype.toString.call(value) + ']';
  }

  function formatArray(ctx, value, recurseTimes, visibleKeys, keys) {
    var output = [];

    for (var i = 0, l = value.length; i < l; ++i) {
      if (hasOwnProperty$2(value, String(i))) {
        output.push(formatProperty(ctx, value, recurseTimes, visibleKeys, String(i), true));
      } else {
        output.push('');
      }
    }

    keys.forEach(function (key) {
      if (!key.match(/^\d+$/)) {
        output.push(formatProperty(ctx, value, recurseTimes, visibleKeys, key, true));
      }
    });
    return output;
  }

  function formatProperty(ctx, value, recurseTimes, visibleKeys, key, array) {
    var name, str, desc;
    desc = Object.getOwnPropertyDescriptor(value, key) || {
      value: value[key]
    };

    if (desc.get) {
      if (desc.set) {
        str = ctx.stylize('[Getter/Setter]', 'special');
      } else {
        str = ctx.stylize('[Getter]', 'special');
      }
    } else {
      if (desc.set) {
        str = ctx.stylize('[Setter]', 'special');
      }
    }

    if (!hasOwnProperty$2(visibleKeys, key)) {
      name = '[' + key + ']';
    }

    if (!str) {
      if (ctx.seen.indexOf(desc.value) < 0) {
        if (isNull(recurseTimes)) {
          str = formatValue(ctx, desc.value, null);
        } else {
          str = formatValue(ctx, desc.value, recurseTimes - 1);
        }

        if (str.indexOf('\n') > -1) {
          if (array) {
            str = str.split('\n').map(function (line) {
              return '  ' + line;
            }).join('\n').substr(2);
          } else {
            str = '\n' + str.split('\n').map(function (line) {
              return '   ' + line;
            }).join('\n');
          }
        }
      } else {
        str = ctx.stylize('[Circular]', 'special');
      }
    }

    if (isUndefined(name)) {
      if (array && key.match(/^\d+$/)) {
        return str;
      }

      name = JSON.stringify('' + key);

      if (name.match(/^"([a-zA-Z_][a-zA-Z_0-9]*)"$/)) {
        name = name.substr(1, name.length - 2);
        name = ctx.stylize(name, 'name');
      } else {
        name = name.replace(/'/g, "\\'").replace(/\\"/g, '"').replace(/(^"|"$)/g, "'");
        name = ctx.stylize(name, 'string');
      }
    }

    return name + ': ' + str;
  }

  function reduceToSingleString(output, base, braces) {
    var length = output.reduce(function (prev, cur) {
      if (cur.indexOf('\n') >= 0) ;
      return prev + cur.replace(/\u001b\[\d\d?m/g, '').length + 1;
    }, 0);

    if (length > 60) {
      return braces[0] + (base === '' ? '' : base + '\n ') + ' ' + output.join(',\n  ') + ' ' + braces[1];
    }

    return braces[0] + base + ' ' + output.join(', ') + ' ' + braces[1];
  } // NOTE: These type checking functions intentionally don't use `instanceof`
  // because it is fragile and can be easily faked with `Object.create()`.


  function isArray$1(ar) {
    return Array.isArray(ar);
  }
  function isBoolean(arg) {
    return typeof arg === 'boolean';
  }
  function isNull(arg) {
    return arg === null;
  }
  function isNullOrUndefined(arg) {
    return arg == null;
  }
  function isNumber(arg) {
    return typeof arg === 'number';
  }
  function isString(arg) {
    return typeof arg === 'string';
  }
  function isSymbol$2(arg) {
    return typeof arg === 'symbol';
  }
  function isUndefined(arg) {
    return arg === void 0;
  }
  function isRegExp(re) {
    return isObject(re) && objectToString(re) === '[object RegExp]';
  }
  function isObject(arg) {
    return typeof arg === 'object' && arg !== null;
  }
  function isDate(d) {
    return isObject(d) && objectToString(d) === '[object Date]';
  }
  function isError(e) {
    return isObject(e) && (objectToString(e) === '[object Error]' || e instanceof Error);
  }
  function isFunction(arg) {
    return typeof arg === 'function';
  }
  function isPrimitive(arg) {
    return arg === null || typeof arg === 'boolean' || typeof arg === 'number' || typeof arg === 'string' || typeof arg === 'symbol' || // ES6 symbol
    typeof arg === 'undefined';
  }
  function isBuffer$1(maybeBuf) {
    return isBuffer(maybeBuf);
  }

  function objectToString(o) {
    return Object.prototype.toString.call(o);
  }

  function pad(n) {
    return n < 10 ? '0' + n.toString(10) : n.toString(10);
  }

  var months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec']; // 26 Feb 16:19:34

  function timestamp() {
    var d = new Date();
    var time = [pad(d.getHours()), pad(d.getMinutes()), pad(d.getSeconds())].join(':');
    return [d.getDate(), months[d.getMonth()], time].join(' ');
  } // log is just a thin wrapper to console.log that prepends a timestamp


  function log$1() {
    console.log('%s - %s', timestamp(), format.apply(null, arguments));
  }
  function _extend(origin, add) {
    // Don't do anything if add isn't an object
    if (!add || !isObject(add)) return origin;
    var keys = Object.keys(add);
    var i = keys.length;

    while (i--) {
      origin[keys[i]] = add[keys[i]];
    }

    return origin;
  }

  function hasOwnProperty$2(obj, prop) {
    return Object.prototype.hasOwnProperty.call(obj, prop);
  }

  var util = {
    inherits: inherits$2,
    _extend: _extend,
    log: log$1,
    isBuffer: isBuffer$1,
    isPrimitive: isPrimitive,
    isFunction: isFunction,
    isError: isError,
    isDate: isDate,
    isObject: isObject,
    isRegExp: isRegExp,
    isUndefined: isUndefined,
    isSymbol: isSymbol$2,
    isString: isString,
    isNumber: isNumber,
    isNullOrUndefined: isNullOrUndefined,
    isNull: isNull,
    isBoolean: isBoolean,
    isArray: isArray$1,
    inspect: inspect,
    deprecate: deprecate,
    format: format,
    debuglog: debuglog
  };

  var require$$2 = {};

  var node = createCommonjsModule(function (module, exports) {
    /**
     * Module dependencies.
     */

    /**
     * This is the Node.js implementation of `debug()`.
     *
     * Expose `debug()` as the module.
     */
    exports = module.exports = debug;
    exports.init = init;
    exports.log = log;
    exports.formatArgs = formatArgs;
    exports.save = save;
    exports.load = load;
    exports.useColors = useColors;
    /**
     * Colors.
     */

    exports.colors = [6, 2, 3, 4, 5, 1];
    /**
     * Build up the default `inspectOpts` object from the environment variables.
     *
     *   $ DEBUG_COLORS=no DEBUG_DEPTH=10 DEBUG_SHOW_HIDDEN=enabled node script.js
     */

    exports.inspectOpts = Object.keys(process$3.env).filter(function (key) {
      return /^debug_/i.test(key);
    }).reduce(function (obj, key) {
      // camel-case
      var prop = key.substring(6).toLowerCase().replace(/_([a-z])/g, function (_, k) {
        return k.toUpperCase();
      }); // coerce string value into JS value

      var val = process$3.env[key];
      if (/^(yes|on|true|enabled)$/i.test(val)) val = true;else if (/^(no|off|false|disabled)$/i.test(val)) val = false;else if (val === 'null') val = null;else val = Number(val);
      obj[prop] = val;
      return obj;
    }, {});
    /**
     * The file descriptor to write the `debug()` calls to.
     * Set the `DEBUG_FD` env variable to override with another value. i.e.:
     *
     *   $ DEBUG_FD=3 node script.js 3>debug.log
     */

    var fd = parseInt(process$3.env.DEBUG_FD, 10) || 2;

    if (1 !== fd && 2 !== fd) {
      util.deprecate(function () {}, 'except for stderr(2) and stdout(1), any other usage of DEBUG_FD is deprecated. Override debug.log if you want to use a different log function (https://git.io/debug_fd)')();
    }

    var stream = 1 === fd ? process$3.stdout : 2 === fd ? process$3.stderr : createWritableStdioStream(fd);
    /**
     * Is stdout a TTY? Colored output is enabled when `true`.
     */

    function useColors() {
      return 'colors' in exports.inspectOpts ? Boolean(exports.inspectOpts.colors) : tty.isatty(fd);
    }
    /**
     * Map %o to `util.inspect()`, all on a single line.
     */


    exports.formatters.o = function (v) {
      this.inspectOpts.colors = this.useColors;
      return util.inspect(v, this.inspectOpts).split('\n').map(function (str) {
        return str.trim();
      }).join(' ');
    };
    /**
     * Map %o to `util.inspect()`, allowing multiple lines if needed.
     */


    exports.formatters.O = function (v) {
      this.inspectOpts.colors = this.useColors;
      return util.inspect(v, this.inspectOpts);
    };
    /**
     * Adds ANSI color escape codes if enabled.
     *
     * @api public
     */


    function formatArgs(args) {
      var name = this.namespace;
      var useColors = this.useColors;

      if (useColors) {
        var c = this.color;
        var prefix = '  \u001b[3' + c + ';1m' + name + ' ' + '\u001b[0m';
        args[0] = prefix + args[0].split('\n').join('\n' + prefix);
        args.push('\u001b[3' + c + 'm+' + exports.humanize(this.diff) + '\u001b[0m');
      } else {
        args[0] = new Date().toUTCString() + ' ' + name + ' ' + args[0];
      }
    }
    /**
     * Invokes `util.format()` with the specified arguments and writes to `stream`.
     */


    function log() {
      return stream.write(util.format.apply(util, arguments) + '\n');
    }
    /**
     * Save `namespaces`.
     *
     * @param {String} namespaces
     * @api private
     */


    function save(namespaces) {
      if (null == namespaces) {
        // If you set a process.env field to null or undefined, it gets cast to the
        // string 'null' or 'undefined'. Just delete instead.
        delete process$3.env.DEBUG;
      } else {
        process$3.env.DEBUG = namespaces;
      }
    }
    /**
     * Load `namespaces`.
     *
     * @return {String} returns the previously persisted debug modes
     * @api private
     */


    function load() {
      return process$3.env.DEBUG;
    }
    /**
     * Copied from `node/src/node.js`.
     *
     * XXX: It's lame that node doesn't expose this API out-of-the-box. It also
     * relies on the undocumented `tty_wrap.guessHandleType()` which is also lame.
     */


    function createWritableStdioStream(fd) {
      var stream;
      var tty_wrap = process$3.binding('tty_wrap'); // Note stream._type is used for test-module-load-list.js

      switch (tty_wrap.guessHandleType(fd)) {
        case 'TTY':
          stream = new tty.WriteStream(fd);
          stream._type = 'tty'; // Hack to have stream not keep the event loop alive.
          // See https://github.com/joyent/node/issues/1726

          if (stream._handle && stream._handle.unref) {
            stream._handle.unref();
          }

          break;

        case 'FILE':
          var fs = require$$2;
          stream = new fs.SyncWriteStream(fd, {
            autoClose: false
          });
          stream._type = 'fs';
          break;

        case 'PIPE':
        case 'TCP':
          var net = require$$2;
          stream = new net.Socket({
            fd: fd,
            readable: false,
            writable: true
          }); // FIXME Should probably have an option in net.Socket to create a
          // stream from an existing fd which is writable only. But for now
          // we'll just add this hack and set the `readable` member to false.
          // Test: ./node test/fixtures/echo.js < /etc/passwd

          stream.readable = false;
          stream.read = null;
          stream._type = 'pipe'; // FIXME Hack to have stream not keep the event loop alive.
          // See https://github.com/joyent/node/issues/1726

          if (stream._handle && stream._handle.unref) {
            stream._handle.unref();
          }

          break;

        default:
          // Probably an error on in uv_guess_handle()
          throw new Error('Implement me. Unknown stream file type!');
      } // For supporting legacy API we put the FD here.


      stream.fd = fd;
      stream._isStdio = true;
      return stream;
    }
    /**
     * Init logic for `debug` instances.
     *
     * Create a new `inspectOpts` object in case `useColors` is set
     * differently for a particular `debug` instance.
     */


    function init(debug) {
      debug.inspectOpts = {};
      var keys = Object.keys(exports.inspectOpts);

      for (var i = 0; i < keys.length; i++) {
        debug.inspectOpts[keys[i]] = exports.inspectOpts[keys[i]];
      }
    }
    /**
     * Enable namespaces listed in `process.env.DEBUG` initially.
     */


    exports.enable(load());
  });
  var node_1 = node.init;
  var node_2 = node.log;
  var node_3 = node.formatArgs;
  var node_4 = node.save;
  var node_5 = node.load;
  var node_6 = node.useColors;
  var node_7 = node.colors;
  var node_8 = node.inspectOpts;

  var src = createCommonjsModule(function (module) {
    /**
     * Detect Electron renderer process, which is node, but we should
     * treat as a browser.
     */
    if (typeof process$3 !== 'undefined' && process$3.type === 'renderer') {
      module.exports = browser$1;
    } else {
      module.exports = node;
    }
  });

  var Scheduler_1 = createCommonjsModule(function (module, exports) {

    Object.defineProperty(exports, "__esModule", {
      value: true
    });

    var _getPrototypeOf2 = _interopRequireDefault(getPrototypeOf$1);

    var _classCallCheck3 = _interopRequireDefault(classCallCheck);

    var _createClass3 = _interopRequireDefault(createClass);

    var _possibleConstructorReturn3 = _interopRequireDefault(possibleConstructorReturn);

    var _inherits3 = _interopRequireDefault(inherits);

    var _debug2 = _interopRequireDefault(src);

    var _SchedulingQueue3 = _interopRequireDefault(SchedulingQueue_1);

    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : {
        default: obj
      };
    }

    var log = (0, _debug2.default)('wavesjs:masters');

    function isFunction(functionToCheck) {
      return functionToCheck && {}.toString.call(functionToCheck) === '[object Function]';
    }
    /**
     * The `Scheduler` class implements a master for `TimeEngine` instances
     * that implement the *scheduled* interface (such as the `Metronome` and
     * `GranularEngine`).
     *
     * A `Scheduler` can also schedule simple callback functions.
     * The class is based on recursive calls to `setTimeout` and uses the time
     * returned by the `getTimeFunction` passed as first argument as a logical time
     * passed to the `advanceTime` methods of the scheduled engines or to the
     * scheduled callback functions.
     * It extends the `SchedulingQueue` class that itself includes a `PriorityQueue`
     * to assure the order of the scheduled engines (see `SimpleScheduler` for a
     * simplified scheduler implementation without `PriorityQueue`).
     *
     * {@link https://rawgit.com/wavesjs/waves-masters/master/examples/scheduler/index.html}
     *
     * @param {Function} getTimeFunction - Function that must return a time in second.
     * @param {Object} [options={}] - default options.
     * @param {Number} [options.period=0.025] - period of the scheduler.
     * @param {Number} [options.lookahead=0.1] - lookahead of the scheduler.
     * @param {Number} [options.currentTimeToAudioTimeFunction] - function that convert
     *  `currentTime` to `audioTime`. Defaults to no-op.
     *
     * @see TimeEngine
     * @see SimpleScheduler
     *
     * @example
     * import * as masters from 'waves-masters';
     *
     * const getTimeFunction = () => preformance.now() / 1000;
     * const scheduler = new masters.Scheduler(getTimeFunction);
     *
     * scheduler.add(myEngine);
     */


    var Scheduler = function (_SchedulingQueue) {
      (0, _inherits3.default)(Scheduler, _SchedulingQueue);

      function Scheduler(getTimeFunction) {
        var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
        (0, _classCallCheck3.default)(this, Scheduler);

        var _this = (0, _possibleConstructorReturn3.default)(this, (Scheduler.__proto__ || (0, _getPrototypeOf2.default)(Scheduler)).call(this));

        if (!isFunction(getTimeFunction)) throw new Error('Invalid argument `getTimeFunction`');
        _this.getTimeFunction = getTimeFunction;
        _this.__currentTime = null;
        _this.__nextTime = Infinity;
        _this.__timeout = null;
        /**
         * scheduler (setTimeout) period
         * @type {Number}
         * @name period
         * @memberof Scheduler
         * @instance
         */

        _this.period = options.period || 0.025;
        /**
         * scheduler lookahead time (> period)
         * @type {Number}
         * @name lookahead
         * @memberof Scheduler
         * @instance
         */

        _this.lookahead = options.lookahead || 0.1;

        _this._currentTimeToAudioTimeFunction = options.currentTimeToAudioTimeFunction || function (currentTime) {
          return currentTime;
        };

        return _this;
      } // setTimeout scheduling loop


      (0, _createClass3.default)(Scheduler, [{
        key: '__tick',
        value: function __tick() {
          var currentTime = this.getTimeFunction();
          var time = this.__nextTime;
          this.__timeout = null;

          while (time <= currentTime + this.lookahead) {
            this.__currentTime = time;
            time = this.advanceTime(time);
          }

          this.__currentTime = null;
          this.resetTime(time);
        }
      }, {
        key: 'resetTime',
        value: function resetTime() {
          var _this2 = this;

          var time = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.currentTime;

          if (this.master) {
            this.master.reset(this, time);
          } else {
            if (this.__timeout) {
              clearTimeout(this.__timeout);
              this.__timeout = null;
            }

            if (time !== Infinity) {
              if (this.__nextTime === Infinity) log('Scheduler Start');
              var timeOutDelay = Math.max(time - this.lookahead - this.getTimeFunction(), this.period);
              this.__timeout = setTimeout(function () {
                _this2.__tick();
              }, Math.ceil(timeOutDelay * 1000));
            } else if (this.__nextTime !== Infinity) {
              log('Scheduler Stop');
            }

            this.__nextTime = time;
          }
        }
        /**
         * Scheduler current logical time.
         *
         * @name currentTime
         * @type {Number}
         * @memberof Scheduler
         * @instance
         */

      }, {
        key: 'currentTime',
        get: function get() {
          // @note - can this really happen, and if yes, in which case?
          if (this.master) return this.master.currentTime;
          return this.__currentTime || this.getTimeFunction() + this.lookahead;
        }
        /**
         * Scheduler current audio time according to `currentTime`
         *
         * @name audioTime
         * @type {Number}
         * @memberif Scheduler
         * @instance
         */

      }, {
        key: 'audioTime',
        get: function get() {
          // @note - add this as in
          if (this.master) return this.master.audioTime;
          return this._currentTimeToAudioTimeFunction(this.currentTime);
        }
      }, {
        key: 'currentPosition',
        get: function get() {
          var master = this.master;
          if (master && master.currentPosition !== undefined) return master.currentPosition;
          return undefined;
        } // inherited from scheduling queue

        /**
         * Add a TimeEngine or a simple callback function to the scheduler at an
         * optionally given time. Whether the add method is called with a TimeEngine
         * or a callback function it returns a TimeEngine that can be used as argument
         * of the methods remove and resetEngineTime. A TimeEngine added to a scheduler
         * has to implement the scheduled interface. The callback function added to a
         * scheduler will be called at the given time and with the given time as
         * argument. The callback can return a new scheduling time (i.e. the next
         * time when it will be called) or it can return Infinity to suspend scheduling
         * without removing the function from the scheduler. A function that does
         * not return a value (or returns null or 0) is removed from the scheduler
         * and cannot be used as argument of the methods remove and resetEngineTime
         * anymore.
         *
         * @name add
         * @function
         * @memberof Scheduler
         * @instance
         * @param {TimeEngine|Function} engine - Engine to add to the scheduler
         * @param {Number} [time=this.currentTime] - Schedule time
         */

        /**
         * Remove a TimeEngine from the scheduler that has been added to the
         * scheduler using the add method.
         *
         * @name add
         * @function
         * @memberof Scheduler
         * @instance
         * @param {TimeEngine} engine - Engine to remove from the scheduler
         * @param {Number} [time=this.currentTime] - Schedule time
         */

        /**
         * Reschedule a scheduled time engine at a given time.
         *
         * @name resetEngineTime
         * @function
         * @memberof Scheduler
         * @instance
         * @param {TimeEngine} engine - Engine to reschedule
         * @param {Number} time - Schedule time
         */

        /**
         * Remove all scheduled callbacks and engines from the scheduler.
         *
         * @name clear
         * @function
         * @memberof Scheduler
         * @instance
         */

      }]);
      return Scheduler;
    }(_SchedulingQueue3.default);

    exports.default = Scheduler;
  });
  unwrapExports(Scheduler_1);

  var SimpleScheduler_1 = createCommonjsModule(function (module, exports) {

    Object.defineProperty(exports, "__esModule", {
      value: true
    });

    var _set2 = _interopRequireDefault(set$2);

    var _classCallCheck3 = _interopRequireDefault(classCallCheck);

    var _createClass3 = _interopRequireDefault(createClass);

    var _debug2 = _interopRequireDefault(src);

    var _TimeEngine2 = _interopRequireDefault(TimeEngine_1);

    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : {
        default: obj
      };
    }

    var log = (0, _debug2.default)('wavesjs:masters');

    function isFunction(functionToCheck) {
      return functionToCheck && {}.toString.call(functionToCheck) === '[object Function]';
    }
    /**
     *
     *
     *
     * The SimpleScheduler class implements a simplified master for time engines
     * (see TimeEngine) that implement the scheduled interface
     * such as the Metronome and the GranularEngine. The API and funtionalities of
     * the SimpleScheduler class are identical to the Scheduler class. But, other
     * than the Scheduler, the SimpleScheduler class does not guarantee the order
     * of events (i.e. calls to the advanceTime method of scheduled time engines
     * and to scheduled callback functions) within a scheduling period (see period
     * attribute).
     *
     * {@link https://rawgit.com/wavesjs/waves-masters/master/examples/scheduler/index.html}
     *
     * @param {Function} getTimeFunction - Function that must return a time in second.
     * @param {Object} [options={}] - default options
     * @param {Number} [options.period=0.025] - period of the scheduler.
     * @param {Number} [options.lookahead=0.1] - lookahead of the scheduler.
     *
     * @see TimeEngine
     * @see Scheduler
     *
     * @example
     * import * as masters from 'waves-masters';
     *
     * const getTimeFunction = () => preformance.now() / 1000;
     * const scheduler = new masters.SimpleScheduler(getTimeFunction);
     *
     * scheduler.add(myEngine);
     */


    var SimpleScheduler = function () {
      function SimpleScheduler(getTimeFunction) {
        var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
        (0, _classCallCheck3.default)(this, SimpleScheduler);
        if (!isFunction(getTimeFunction)) throw new Error('Invalid argument `getTimeFunction`');
        this.getTimeFunction = getTimeFunction;
        this.__engines = new _set2.default();
        this.__schedEngines = [];
        this.__schedTimes = [];
        this.__currentTime = null;
        this.__timeout = null;
        /**
         * scheduler (setTimeout) period
         * @type {Number}
         * @name period
         * @memberof Scheduler
         * @instance
         */

        this.period = options.period || 0.025;
        /**
         * scheduler lookahead time (> period)
         * @type {Number}
         * @name lookahead
         * @memberof Scheduler
         * @instance
         */

        this.lookahead = options.lookahead || 0.1;

        this._currentTimeToAudioTimeFunction = options.currentTimeToAudioTimeFunction || function (currentTime) {
          return currentTime;
        };
      }

      (0, _createClass3.default)(SimpleScheduler, [{
        key: '__scheduleEngine',
        value: function __scheduleEngine(engine, time) {
          this.__schedEngines.push(engine);

          this.__schedTimes.push(time);
        }
      }, {
        key: '__rescheduleEngine',
        value: function __rescheduleEngine(engine, time) {
          var index = this.__schedEngines.indexOf(engine);

          if (index >= 0) {
            if (time !== Infinity) {
              this.__schedTimes[index] = time;
            } else {
              this.__schedEngines.splice(index, 1);

              this.__schedTimes.splice(index, 1);
            }
          } else if (time < Infinity) {
            this.__schedEngines.push(engine);

            this.__schedTimes.push(time);
          }
        }
      }, {
        key: '__unscheduleEngine',
        value: function __unscheduleEngine(engine) {
          var index = this.__schedEngines.indexOf(engine);

          if (index >= 0) {
            this.__schedEngines.splice(index, 1);

            this.__schedTimes.splice(index, 1);
          }
        }
      }, {
        key: '__resetTick',
        value: function __resetTick() {
          if (this.__schedEngines.length > 0) {
            if (!this.__timeout) {
              log('SimpleScheduler Start');

              this.__tick();
            }
          } else if (this.__timeout) {
            log('SimpleScheduler Stop');
            clearTimeout(this.__timeout);
            this.__timeout = null;
          }
        }
      }, {
        key: '__tick',
        value: function __tick() {
          var _this = this;

          var currentTime = this.getTimeFunction();
          var i = 0;

          while (i < this.__schedEngines.length) {
            var engine = this.__schedEngines[i];
            var time = this.__schedTimes[i];

            while (time && time <= currentTime + this.lookahead) {
              time = Math.max(time, currentTime);
              this.__currentTime = time;
              time = engine.advanceTime(time);
            }

            if (time && time < Infinity) {
              this.__schedTimes[i++] = time;
            } else {
              this.__unscheduleEngine(engine); // remove engine from scheduler


              if (!time) {
                engine.master = null;

                this.__engines.delete(engine);
              }
            }
          }

          this.__currentTime = null;
          this.__timeout = null;

          if (this.__schedEngines.length > 0) {
            this.__timeout = setTimeout(function () {
              _this.__tick();
            }, this.period * 1000);
          }
        }
        /**
         * Scheduler current logical time.
         *
         * @name currentTime
         * @type {Number}
         * @memberof Scheduler
         * @instance
         */

      }, {
        key: 'defer',
        // call a function at a given time

        /**
         * Defer the execution of a function at a given time.
         *
         * @param {Function} fun - Function to defer
         * @param {Number} [time=this.currentTime] - Schedule time
         */
        value: function defer(fun) {
          var time = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.currentTime;
          if (!(fun instanceof Function)) throw new Error("object cannot be defered by scheduler");
          this.add({
            advanceTime: function advanceTime(time) {
              fun(time);
            } // make sur that the advanceTime method does not returm anything

          }, time);
        }
        /**
         * Add a TimeEngine function to the scheduler at an optionally given time.
         *
         * @param {TimeEngine} engine - Engine to add to the scheduler
         * @param {Number} [time=this.currentTime] - Schedule time
         */

      }, {
        key: 'add',
        value: function add(engine) {
          var time = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.currentTime;
          if (!_TimeEngine2.default.implementsScheduled(engine)) throw new Error("object cannot be added to scheduler");
          if (engine.master) throw new Error("object has already been added to a master"); // set master and add to array

          engine.master = this;

          this.__engines.add(engine); // schedule engine


          this.__scheduleEngine(engine, time);

          this.__resetTick();
        }
        /**
         * Remove a TimeEngine from the scheduler that has been added to the
         * scheduler using the add method.
         *
         * @param {TimeEngine} engine - Engine to remove from the scheduler
         * @param {Number} [time=this.currentTime] - Schedule time
         */

      }, {
        key: 'remove',
        value: function remove(engine) {
          if (!engine.master || engine.master !== this) throw new Error("engine has not been added to this scheduler"); // reset master and remove from array

          engine.master = null;

          this.__engines.delete(engine); // unschedule engine


          this.__unscheduleEngine(engine);

          this.__resetTick();
        }
        /**
         * Reschedule a scheduled time engine at a given time.
         *
         * @param {TimeEngine} engine - Engine to reschedule
         * @param {Number} time - Schedule time
         */

      }, {
        key: 'resetEngineTime',
        value: function resetEngineTime(engine) {
          var time = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.currentTime;

          this.__rescheduleEngine(engine, time);

          this.__resetTick();
        }
        /**
         * Check whether a given engine is scheduled.
         *
         * @param {TimeEngine} engine - Engine to check
         */

      }, {
        key: 'has',
        value: function has(engine) {
          return this.__engines.has(engine);
        }
        /**
         * Remove all engines from the scheduler.
         */

      }, {
        key: 'clear',
        value: function clear() {
          if (this.__timeout) {
            clearTimeout(this.__timeout);
            this.__timeout = null;
          }

          this.__schedEngines.length = 0;
          this.__schedTimes.length = 0;
        }
      }, {
        key: 'currentTime',
        get: function get() {
          return this.__currentTime || this.getTimeFunction() + this.lookahead;
        }
        /**
         * Scheduler current audio time according to `currentTime`
         *
         * @name audioTime
         * @type {Number}
         * @memberif Scheduler
         * @instance
         */

      }, {
        key: 'audioTime',
        get: function get() {
          // @note - add this as in
          if (this.master) return this.master.audioTime;
          return this._currentTimeToAudioTimeFunction(this.currentTime);
        }
      }, {
        key: 'currentPosition',
        get: function get() {
          return undefined;
        }
      }]);
      return SimpleScheduler;
    }();

    exports.default = SimpleScheduler;
  });
  unwrapExports(SimpleScheduler_1);

  var dist = createCommonjsModule(function (module, exports) {

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    Object.defineProperty(exports, 'TimeEngine', {
      enumerable: true,
      get: function get() {
        return _interopRequireDefault(TimeEngine_1).default;
      }
    });
    Object.defineProperty(exports, 'PriorityQueue', {
      enumerable: true,
      get: function get() {
        return _interopRequireDefault(PriorityQueue_1).default;
      }
    });
    Object.defineProperty(exports, 'SchedulingQueue', {
      enumerable: true,
      get: function get() {
        return _interopRequireDefault(SchedulingQueue_1).default;
      }
    });
    Object.defineProperty(exports, 'PlayControl', {
      enumerable: true,
      get: function get() {
        return _interopRequireDefault(PlayControl_1).default;
      }
    });
    Object.defineProperty(exports, 'Transport', {
      enumerable: true,
      get: function get() {
        return _interopRequireDefault(Transport_1).default;
      }
    });
    Object.defineProperty(exports, 'Scheduler', {
      enumerable: true,
      get: function get() {
        return _interopRequireDefault(Scheduler_1).default;
      }
    });
    Object.defineProperty(exports, 'SimpleScheduler', {
      enumerable: true,
      get: function get() {
        return _interopRequireDefault(SimpleScheduler_1).default;
      }
    });

    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : {
        default: obj
      };
    }
  });
  unwrapExports(dist);

  var AudioTimeEngine_1 = createCommonjsModule(function (module, exports) {

    Object.defineProperty(exports, "__esModule", {
      value: true
    });

    var _getPrototypeOf2 = _interopRequireDefault(getPrototypeOf$1);

    var _classCallCheck3 = _interopRequireDefault(classCallCheck);

    var _createClass3 = _interopRequireDefault(createClass);

    var _possibleConstructorReturn3 = _interopRequireDefault(possibleConstructorReturn);

    var _inherits3 = _interopRequireDefault(inherits);

    var _audioContext2 = _interopRequireDefault(audioContext_1);

    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : {
        default: obj
      };
    }
    /**
     * This is the base class for all audio related time engine components. It is
     * used to handle audio related events such as the playback of a media stream.
     * It extends the TimeEngine class by the standard web audio node methods
     * connect and disconnect.
     *
     * [example]{@link https://rawgit.com/wavesjs/waves-audio/master/examples/audio-time-engine/index.html}
     *
     * @extends TimeEngine
     * @example
     * import audio from 'waves-audio';
     *
     * class MyEngine extends audio.AudioTimeEngine {
     *   constructor() {
     *     super();
     *     // ...
     *   }
     * }
     */


    var AudioTimeEngine = function (_TimeEngine) {
      (0, _inherits3.default)(AudioTimeEngine, _TimeEngine);

      function AudioTimeEngine() {
        var audioContext = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : _audioContext2.default;
        (0, _classCallCheck3.default)(this, AudioTimeEngine);
        /**
         * Audio context used by the TimeEngine, default to the global audioContext
         *
         * @name audioContext
         * @type AudioContext
         * @memberof AudioTimeEngine
         * @see audioContext
         */

        var _this = (0, _possibleConstructorReturn3.default)(this, (AudioTimeEngine.__proto__ || (0, _getPrototypeOf2.default)(AudioTimeEngine)).call(this));

        _this.audioContext = audioContext;
        /**
         * Output audio node. By default the connect method connects a given node
         * to this output node.
         *
         * @name outputNode
         * @type AudioNode
         * @memberof AudioTimeEngine
         * @default null
         */

        _this.outputNode = null;
        return _this;
      }
      /**
       * Connect to an audio node (e.g. audioContext.destination)
       *
       * @param {AudioNode} target - Target audio node
       */


      (0, _createClass3.default)(AudioTimeEngine, [{
        key: 'connect',
        value: function connect(target) {
          this.outputNode.connect(target);
          return this;
        }
        /**
         * Disconnect from an audio node (e.g. audioContext.destination). If undefined
         * disconnect from all target nodes.
         *
         * @param {AudioNode} target - Target audio node.
         */

      }, {
        key: 'disconnect',
        value: function disconnect(connection) {
          this.outputNode.disconnect(connection);
          return this;
        }
      }]);
      return AudioTimeEngine;
    }(dist.TimeEngine);

    exports.default = AudioTimeEngine;
  });
  unwrapExports(AudioTimeEngine_1);

  var GranularEngine_1 = createCommonjsModule(function (module, exports) {

    Object.defineProperty(exports, "__esModule", {
      value: true
    });

    var _getPrototypeOf2 = _interopRequireDefault(getPrototypeOf$1);

    var _classCallCheck3 = _interopRequireDefault(classCallCheck);

    var _createClass3 = _interopRequireDefault(createClass);

    var _possibleConstructorReturn3 = _interopRequireDefault(possibleConstructorReturn);

    var _inherits3 = _interopRequireDefault(inherits);

    var _AudioTimeEngine3 = _interopRequireDefault(AudioTimeEngine_1);

    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : {
        default: obj
      };
    }

    function optOrDef(opt, def) {
      if (opt !== undefined) return opt;
      return def;
    }
    /**
     * Granular synthesis TimeEngine implementing the scheduled interface.
     * The grain position (grain onset or center time in the audio buffer) is
     * optionally determined by the engine's currentPosition attribute.
     *
     * Example that shows a `GranularEngine` (with a few parameter controls) driven
     * by a `Scheduler` and a `PlayControl`:
     * {@link https://rawgit.com/wavesjs/waves-audio/master/examples/granular-engine/index.html}
     *
     * @extends AudioTimeEngine
     * @example
     * import * as audio from 'waves-audio';
     * const scheduler = audio.getScheduler();
     * const granularEngine = new audio.GranularEngine();
     *
     * scheduler.add(granularEngine);
     *
     *
     * @param {Object} options={} - Parameters
     * @param {AudioBuffer} [options.buffer=null] - Audio buffer
     * @param {Number} [options.periodAbs=0.01] - Absolute grain period in sec
     * @param {Number} [options.periodRel=0] - Grain period relative to absolute
     *  duration
     * @param {Number} [options.periodVar=0] - Amout of random grain period
     *  variation relative to grain period
     * @param {Number} [options.periodMin=0.001] - Minimum grain period
     * @param {Number} [options.position=0] - Grain position (onset time in audio
     *  buffer) in sec
     * @param {Number} [options.positionVar=0.003] - Amout of random grain position
     *  variation in sec
     * @param {Number} [options.durationAbs=0.1] - Absolute grain duration in sec
     * @param {Number} [options.durationRel=0] - Grain duration relative to grain
     *  period (overlap)
     * @param {Number} [options.attackAbs=0] - Absolute attack time in sec
     * @param {Number} [options.attackRel=0.5] - Attack time relative to grain duration
     * @param {String} [options.attackShape='lin'] - Shape of attack
     * @param {Number} [options.releaseAbs=0] - Absolute release time in sec
     * @param {Number} [options.releaseRel=0.5] - Release time relative to grain duration
     * @param {Number} [options.releaseShape='lin'] - Shape of release
     * @param {String} [options.expRampOffset=0.0001] - Offset (start/end value)
     *  for exponential attack/release
     * @param {Number} [options.resampling=0] - Grain resampling in cent
     * @param {Number} [options.resamplingVar=0] - Amout of random resampling variation in cent
     * @param {Number} [options.gain=1] - Linear gain factor
     * @param {Boolean} [options.centered=true] - Whether the grain position refers
     *  to the center of the grain (or the beginning)
     * @param {Boolean} [options.cyclic=false] - Whether the audio buffer and grain
     *  position are considered as cyclic
     * @param {Number} [options.wrapAroundExtension=0] - Portion at the end of the
     *  audio buffer that has been copied from the beginning to assure cyclic behavior
     */


    var GranularEngine = function (_AudioTimeEngine) {
      (0, _inherits3.default)(GranularEngine, _AudioTimeEngine);

      function GranularEngine() {
        var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
        (0, _classCallCheck3.default)(this, GranularEngine);
        /**
         * Audio buffer
         *
         * @type {AudioBuffer}
         * @name buffer
         * @default null
         * @memberof GranularEngine
         * @instance
         */

        var _this = (0, _possibleConstructorReturn3.default)(this, (GranularEngine.__proto__ || (0, _getPrototypeOf2.default)(GranularEngine)).call(this, options.audioContext));

        _this.buffer = optOrDef(options.buffer, null);
        /**
         * Absolute grain period in sec
         *
         * @type {Number}
         * @name periodAbs
         * @default 0.01
         * @memberof GranularEngine
         * @instance
         */

        _this.periodAbs = optOrDef(options.periodAbs, 0.01);
        /**
         * Grain period relative to absolute duration
         *
         * @type {Number}
         * @name periodRel
         * @default 0
         * @memberof GranularEngine
         * @instance
         */

        _this.periodRel = optOrDef(options.periodRel, 0);
        /**
         * Amout of random grain period variation relative to grain period
         *
         * @type {Number}
         * @name periodVar
         * @default 0
         * @memberof GranularEngine
         * @instance
         */

        _this.periodVar = optOrDef(options.periodVar, 0);
        /**
         * Minimum grain period
         *
         * @type {Number}
         * @name periodMin
         * @default 0.001
         * @memberof GranularEngine
         * @instance
         */

        _this.periodMin = optOrDef(options.periodMin, 0.001);
        /**
         * Grain position (onset time in audio buffer) in sec
         *
         * @type {Number}
         * @name position
         * @default 0
         * @memberof GranularEngine
         * @instance
         */

        _this.position = optOrDef(options.position, 0);
        /**
         * Amout of random grain position variation in sec
         *
         * @type {Number}
         * @name positionVar
         * @default 0.003
         * @memberof GranularEngine
         * @instance
         */

        _this.positionVar = optOrDef(options.positionVar, 0.003);
        /**
         * Absolute grain duration in sec
         *
         * @type {Number}
         * @name durationAbs
         * @default 0.1
         * @memberof GranularEngine
         * @instance
         */

        _this.durationAbs = optOrDef(options.durationAbs, 0.1); // absolute grain duration

        /**
         * Grain duration relative to grain period (overlap)
         *
         * @type {Number}
         * @name durationRel
         * @default 0
         * @memberof GranularEngine
         * @instance
         */

        _this.durationRel = optOrDef(options.durationRel, 0);
        /**
         * Absolute attack time in sec
         *
         * @type {Number}
         * @name attackAbs
         * @default 0
         * @memberof GranularEngine
         * @instance
         */

        _this.attackAbs = optOrDef(options.attackAbs, 0);
        /**
         * Attack time relative to grain duration
         *
         * @type {Number}
         * @name attackRel
         * @default 0.5
         * @memberof GranularEngine
         * @instance
         */

        _this.attackRel = optOrDef(options.attackRel, 0.5);
        /**
         * Shape of attack ('lin' for linear ramp, 'exp' for exponential ramp)
         *
         * @type {String}
         * @name attackShape
         * @default 'lin'
         * @memberof GranularEngine
         * @instance
         */

        _this.attackShape = optOrDef(options.attackShape, 'lin');
        /**
         * Absolute release time in sec
         *
         * @type {Number}
         * @name releaseAbs
         * @default 0
         * @memberof GranularEngine
         * @instance
         */

        _this.releaseAbs = optOrDef(options.releaseAbs, 0);
        /**
         * Release time relative to grain duration
         *
         * @type {Number}
         * @name releaseRel
         * @default 0.5
         * @memberof GranularEngine
         * @instance
         */

        _this.releaseRel = optOrDef(options.releaseRel, 0.5);
        /**
         * Shape of release ('lin' for linear ramp, 'exp' for exponential ramp)
         *
         * @type {String}
         * @name releaseShape
         * @default 'lin'
         * @memberof GranularEngine
         * @instance
         */

        _this.releaseShape = optOrDef(options.releaseShape, 'lin');
        /**
         * Offset (start/end value) for exponential attack/release
         *
         * @type {Number}
         * @name expRampOffset
         * @default 0.0001
         * @memberof GranularEngine
         * @instance
         */

        _this.expRampOffset = optOrDef(options.expRampOffset, 0.0001);
        /**
         * Grain resampling in cent
         *
         * @type {Number}
         * @name resampling
         * @default 0
         * @memberof GranularEngine
         * @instance
         */

        _this.resampling = optOrDef(options.resampling, 0);
        /**
         * Amout of random resampling variation in cent
         *
         * @type {Number}
         * @name resamplingVar
         * @default 0
         * @memberof GranularEngine
         * @instance
         */

        _this.resamplingVar = optOrDef(options.resamplingVar, 0);
        /**
         * Linear gain factor
         *
         * @type {Number}
         * @name gain
         * @default 1
         * @memberof GranularEngine
         * @instance
         */

        _this.gain = optOrDef(options.gain, 1);
        /**
         * Whether the grain position refers to the center of the grain (or the beginning)
         *
         * @type {Boolean}
         * @name centered
         * @default true
         * @memberof GranularEngine
         * @instance
         */

        _this.centered = optOrDef(options.centered, true);
        /**
         * Whether the audio buffer and grain position are considered as cyclic
         *
         * @type {Boolean}
         * @name cyclic
         * @default false
         * @memberof GranularEngine
         * @instance
         */

        _this.cyclic = optOrDef(options.cyclic, false);
        /**
         * Portion at the end of the audio buffer that has been copied from the
         * beginning to assure cyclic behavior
         *
         * @type {Number}
         * @name wrapAroundExtension
         * @default 0
         * @memberof GranularEngine
         * @instance
         */

        _this.wrapAroundExtension = optOrDef(options.wrapAroundExtension, 0);
        _this.outputNode = _this.audioContext.createGain();
        return _this;
      }
      /**
       * Get buffer duration (excluding wrapAroundExtension)
       *
       * @type {Number}
       * @name bufferDuration
       * @memberof GranularEngine
       * @instance
       * @readonly
       */


      (0, _createClass3.default)(GranularEngine, [{
        key: 'advanceTime',
        value: function advanceTime(time) {
          time = Math.max(time, this.audioContext.currentTime);
          return time + this.trigger(time);
        }
        /**
         * Trigger a grain. This function can be called at any time (whether the
         * engine is scheduled or not) to generate a single grain according to the
         * current grain parameters.
         *
         * @param {Number} time - grain synthesis audio time
         * @return {Number} - period to next grain
         */

      }, {
        key: 'trigger',
        value: function trigger(time) {
          var audioContext = this.audioContext;
          var grainTime = time || audioContext.currentTime;
          var grainPeriod = this.periodAbs;
          var grainPosition = this.currentPosition;
          var grainDuration = this.durationAbs;

          if (this.buffer) {
            var resamplingRate = 1.0; // calculate resampling

            if (this.resampling !== 0 || this.resamplingVar > 0) {
              var randomResampling = (Math.random() - 0.5) * 2.0 * this.resamplingVar;
              resamplingRate = Math.pow(2.0, (this.resampling + randomResampling) / 1200.0);
            }

            grainPeriod += this.periodRel * grainDuration;
            grainDuration += this.durationRel * grainPeriod; // grain period randon variation

            if (this.periodVar > 0.0) grainPeriod += 2.0 * (Math.random() - 0.5) * this.periodVar * grainPeriod; // center grain

            if (this.centered) grainPosition -= 0.5 * grainDuration; // randomize grain position

            if (this.positionVar > 0) grainPosition += (2.0 * Math.random() - 1) * this.positionVar;
            var bufferDuration = this.bufferDuration; // wrap or clip grain position and duration into buffer duration

            if (grainPosition < 0 || grainPosition >= bufferDuration) {
              if (this.cyclic) {
                var cycles = grainPosition / bufferDuration;
                grainPosition = (cycles - Math.floor(cycles)) * bufferDuration;
                if (grainPosition + grainDuration > this.buffer.duration) grainDuration = this.buffer.duration - grainPosition;
              } else {
                if (grainPosition < 0) {
                  grainTime -= grainPosition;
                  grainDuration += grainPosition;
                  grainPosition = 0;
                }

                if (grainPosition + grainDuration > bufferDuration) grainDuration = bufferDuration - grainPosition;
              }
            } // make grain


            if (this.gain > 0 && grainDuration >= 0.001) {
              // make grain envelope
              var envelope = audioContext.createGain();
              var attack = this.attackAbs + this.attackRel * grainDuration;
              var release = this.releaseAbs + this.releaseRel * grainDuration;

              if (attack + release > grainDuration) {
                var factor = grainDuration / (attack + release);
                attack *= factor;
                release *= factor;
              }

              var attackEndTime = grainTime + attack;
              var grainEndTime = grainTime + grainDuration / resamplingRate;
              var releaseStartTime = grainEndTime - release;
              envelope.gain.value = 0;

              if (this.attackShape === 'lin') {
                envelope.gain.setValueAtTime(0.0, grainTime);
                envelope.gain.linearRampToValueAtTime(this.gain, attackEndTime);
              } else {
                envelope.gain.setValueAtTime(this.expRampOffset, grainTime);
                envelope.gain.exponentialRampToValueAtTime(this.gain, attackEndTime);
              }

              if (releaseStartTime > attackEndTime) envelope.gain.setValueAtTime(this.gain, releaseStartTime);

              if (this.releaseShape === 'lin') {
                envelope.gain.linearRampToValueAtTime(0.0, grainEndTime);
              } else {
                envelope.gain.exponentialRampToValueAtTime(this.expRampOffset, grainEndTime);
              }

              envelope.connect(this.outputNode); // make source

              var source = audioContext.createBufferSource();
              source.buffer = this.buffer;
              source.playbackRate.value = resamplingRate;
              source.connect(envelope);
              source.start(grainTime, grainPosition);
              source.stop(grainEndTime);
            }
          }

          return Math.max(this.periodMin, grainPeriod);
        }
      }, {
        key: 'bufferDuration',
        get: function get() {
          if (this.buffer) {
            var bufferDuration = this.buffer.duration;
            if (this.wrapAroundExtension) bufferDuration -= this.wrapAroundExtension;
            return bufferDuration;
          }

          return 0;
        }
        /**
         * Current position
         *
         * @type {Number}
         * @name currentPosition
         * @memberof GranularEngine
         * @instance
         * @readonly
         */

      }, {
        key: 'currentPosition',
        get: function get() {
          var master = this.master;
          if (master && master.currentPosition !== undefined) return master.currentPosition;
          return this.position;
        }
      }]);
      return GranularEngine;
    }(_AudioTimeEngine3.default);

    exports.default = GranularEngine;
  });
  unwrapExports(GranularEngine_1);

  var Metronome_1 = createCommonjsModule(function (module, exports) {

    Object.defineProperty(exports, "__esModule", {
      value: true
    });

    var _getPrototypeOf2 = _interopRequireDefault(getPrototypeOf$1);

    var _classCallCheck3 = _interopRequireDefault(classCallCheck);

    var _createClass3 = _interopRequireDefault(createClass);

    var _possibleConstructorReturn3 = _interopRequireDefault(possibleConstructorReturn);

    var _inherits3 = _interopRequireDefault(inherits);

    var _AudioTimeEngine3 = _interopRequireDefault(AudioTimeEngine_1);

    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : {
        default: obj
      };
    }

    function optOrDef(opt, def) {
      if (opt !== undefined) return opt;
      return def;
    }
    /**
     * Metronome audio engine. It extends Time Engine as a transported interface.
     * [example]{@link https://rawgit.com/wavesjs/waves-audio/master/examples/metronome/index.html}
     *
     * @extends AudioTimeEngine
     * @example
     * import * as audio from 'waves-audio';
     * const scheduler = audio.getScheduler();
     * const metronome = new audio.Metronome({period: 0.333});
     *
     * scheduler.add(metronome);
     *
     * @param {Object} [options={}] - Default options
     * @param {Number} [options.period=1] - Metronome period
     * @param {Number} [options.clickFreq=600] - Metronome click frequency
     * @param {Number} [options.clickAttack=0.002] - Metronome click attack time
     * @param {Number} [options.clickRelease=0.098] - Metronome click release time
     * @param {Number} [options.gain=1] - Gain
     */


    var Metronome = function (_AudioTimeEngine) {
      (0, _inherits3.default)(Metronome, _AudioTimeEngine);

      function Metronome() {
        var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
        (0, _classCallCheck3.default)(this, Metronome);
        /**
         * Metronome period
         * @type {Number}
         * @private
         */

        var _this = (0, _possibleConstructorReturn3.default)(this, (Metronome.__proto__ || (0, _getPrototypeOf2.default)(Metronome)).call(this, options.audioContext));

        _this.__period = optOrDef(options.period, 1);
        /**
         * Metronome click frequency
         *
         * @type {Number}
         * @memberof Metronome
         * @name clickFreq
         * @instance
         */

        _this.clickFreq = optOrDef(options.clickFreq, 600);
        /**
         * Metronome click attack time
         *
         * @type {Number}
         * @memberof Metronome
         * @name clickAttack
         * @instance
         */

        _this.clickAttack = optOrDef(options.clickAttack, 0.002);
        /**
         * Metronome click release time
         *
         * @type {Number}
         * @memberof Metronome
         * @name clickRelease
         * @instance
         */

        _this.clickRelease = optOrDef(options.clickRelease, 0.098);
        _this.__lastTime = 0;
        _this.__phase = 0;
        _this.__gainNode = _this.audioContext.createGain();
        _this.__gainNode.gain.value = optOrDef(options.gain, 1);
        _this.outputNode = _this.__gainNode;
        return _this;
      } // TimeEngine method (scheduled interface)


      (0, _createClass3.default)(Metronome, [{
        key: 'advanceTime',
        value: function advanceTime(time) {
          this.trigger(time);
          this.__lastTime = time;
          return time + this.__period;
        } // TimeEngine method (transported interface)

      }, {
        key: 'syncPosition',
        value: function syncPosition(time, position, speed) {
          if (this.__period > 0) {
            var nextPosition = (Math.floor(position / this.__period) + this.__phase) * this.__period;

            if (speed > 0 && nextPosition < position) nextPosition += this.__period;else if (speed < 0 && nextPosition > position) nextPosition -= this.__period;
            return nextPosition;
          }

          return Infinity * speed;
        } // TimeEngine method (transported interface)

      }, {
        key: 'advancePosition',
        value: function advancePosition(time, position, speed) {
          this.trigger(time);
          if (speed < 0) return position - this.__period;
          return position + this.__period;
        }
        /**
         * Trigger metronome click
         * @param {Number} time metronome click synthesis audio time
         */

      }, {
        key: 'trigger',
        value: function trigger(time) {
          var audioContext = this.audioContext;
          var clickAttack = this.clickAttack;
          var clickRelease = this.clickRelease;
          var env = audioContext.createGain();
          env.gain.value = 0.0;
          env.gain.setValueAtTime(0, time);
          env.gain.linearRampToValueAtTime(1.0, time + clickAttack);
          env.gain.exponentialRampToValueAtTime(0.0000001, time + clickAttack + clickRelease);
          env.gain.setValueAtTime(0, time);
          env.connect(this.outputNode);
          var osc = audioContext.createOscillator();
          osc.frequency.value = this.clickFreq;
          osc.start(time);
          osc.stop(time + clickAttack + clickRelease);
          osc.connect(env);
        }
        /**
         * linear gain factor
         *
         * @type {Number}
         * @name gain
         * @memberof Metronome
         * @instance
         */

      }, {
        key: 'gain',
        set: function set(value) {
          this.__gainNode.gain.value = value;
        },
        get: function get() {
          return this.__gainNode.gain.value;
        }
        /**
         * metronome period
         *
         * @type {Number}
         * @name period
         * @memberof Metronome
         * @instance
         */

      }, {
        key: 'period',
        set: function set(period) {
          this.__period = period;
          var master = this.master;

          if (master) {
            if (master.resetEngineTime) master.resetEngineTime(this, this.__lastTime + period);else if (master.resetEnginePosition) master.resetEnginePosition(this);
          }
        },
        get: function get() {
          return this.__period;
        }
        /**
         * Set phase parameter (available only when 'transported'), should be
         * between [0, 1[
         *
         * @type {Number}
         * @name phase
         * @memberof Metronome
         * @instance
         */

      }, {
        key: 'phase',
        set: function set(phase) {
          this.__phase = phase - Math.floor(phase);
          var master = this.master;
          if (master && master.resetEnginePosition !== undefined) master.resetEnginePosition(this);
        },
        get: function get() {
          return this.__phase;
        }
      }]);
      return Metronome;
    }(_AudioTimeEngine3.default);

    exports.default = Metronome;
  });
  unwrapExports(Metronome_1);

  var PlayerEngine_1 = createCommonjsModule(function (module, exports) {

    Object.defineProperty(exports, "__esModule", {
      value: true
    });

    var _getPrototypeOf2 = _interopRequireDefault(getPrototypeOf$1);

    var _classCallCheck3 = _interopRequireDefault(classCallCheck);

    var _createClass3 = _interopRequireDefault(createClass);

    var _possibleConstructorReturn3 = _interopRequireDefault(possibleConstructorReturn);

    var _inherits3 = _interopRequireDefault(inherits);

    var _AudioTimeEngine3 = _interopRequireDefault(AudioTimeEngine_1);

    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : {
        default: obj
      };
    }

    function optOrDef(opt, def) {
      if (opt !== undefined) return opt;
      return def;
    }
    /**
     * Used with a buffer to serve audio files.
     *
     * [example]{@link https://rawgit.com/wavesjs/waves-audio/master/examples/player-engine/index.html}
     *
     * @extends AudioTimeEngine
     * @example
     * import * as audio from 'waves-audio';
     * const playerEngine = audio.PlayerEngine();
     * const playControl = new audio.PlayControl(playerEngine);
     *
     * playControl.start();
     *
     * @param {Object} [options={}] - Default options
     * @param {Number} [options.buffer=1] - Audio buffer
     * @param {Number} [options.fadeTime=0.005] - Fade time for chaining segments
     * @param {Number} [options.cyclic=false] - Loop mode
     * @param {Number} [options.gain=1] - Gain
     */


    var PlayerEngine = function (_AudioTimeEngine) {
      (0, _inherits3.default)(PlayerEngine, _AudioTimeEngine);

      function PlayerEngine() {
        var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
        (0, _classCallCheck3.default)(this, PlayerEngine);

        var _this = (0, _possibleConstructorReturn3.default)(this, (PlayerEngine.__proto__ || (0, _getPrototypeOf2.default)(PlayerEngine)).call(this, options.audioContext));

        _this.transport = null; // set when added to transporter

        /**
         * Audio buffer
         *
         * @type {AudioBuffer}
         * @name buffer
         * @memberof PlayerEngine
         * @instance
         * @default null
         */

        _this.buffer = optOrDef(options.buffer, null);
        /**
         * Fade time for chaining segments (e.g. in start, stop, and seek)
         *
         * @type {Number}
         * @name fadeTime
         * @memberof PlayerEngine
         * @instance
         * @default 0.005
         */

        _this.fadeTime = optOrDef(options.fadeTime, 0.005);
        _this.__time = 0;
        _this.__position = 0;
        _this.__speed = 0;
        _this.__bufferSource = null;
        _this.__envNode = null;
        _this.__gainNode = _this.audioContext.createGain();
        _this.__gainNode.gain.value = optOrDef(options.gain, 1);
        _this.__cyclic = optOrDef(options.cyclic, false);
        _this.outputNode = _this.__gainNode;
        return _this;
      }

      (0, _createClass3.default)(PlayerEngine, [{
        key: '__start',
        value: function __start(time, position, speed) {
          var audioContext = this.audioContext;

          if (this.buffer) {
            var bufferDuration = this.buffer.duration;

            if (this.__cyclic && (position < 0 || position >= bufferDuration)) {
              var phase = position / bufferDuration;
              position = (phase - Math.floor(phase)) * bufferDuration;
            }

            if (position >= 0 && position < bufferDuration && speed > 0) {
              this.__envNode = audioContext.createGain();

              this.__envNode.gain.setValueAtTime(0, time);

              this.__envNode.gain.linearRampToValueAtTime(1, time + this.fadeTime);

              this.__envNode.connect(this.__gainNode);

              this.__bufferSource = audioContext.createBufferSource();
              this.__bufferSource.buffer = this.buffer;
              this.__bufferSource.playbackRate.value = speed;
              this.__bufferSource.loop = this.__cyclic;
              this.__bufferSource.loopStart = 0;
              this.__bufferSource.loopEnd = bufferDuration;

              this.__bufferSource.start(time, position);

              this.__bufferSource.connect(this.__envNode);
            }
          }
        }
      }, {
        key: '__halt',
        value: function __halt(time) {
          if (this.__bufferSource) {
            this.__envNode.gain.cancelScheduledValues(time);

            this.__envNode.gain.setValueAtTime(this.__envNode.gain.value, time);

            this.__envNode.gain.linearRampToValueAtTime(0, time + this.fadeTime);

            this.__bufferSource.stop(time + this.fadeTime);

            this.__bufferSource = null;
            this.__envNode = null;
          }
        } // TimeEngine method (speed-controlled interface)

      }, {
        key: 'syncSpeed',
        value: function syncSpeed(time, position, speed) {
          var seek = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;
          var lastSpeed = this.__speed;

          if (speed !== lastSpeed || seek) {
            if (seek || lastSpeed * speed < 0) {
              this.__halt(time);

              this.__start(time, position, speed);
            } else if (lastSpeed === 0 || seek) {
              this.__start(time, position, speed);
            } else if (speed === 0) {
              this.__halt(time);
            } else if (this.__bufferSource) {
              this.__bufferSource.playbackRate.setValueAtTime(speed, time);
            }

            this.__speed = speed;
          }
        }
        /**
         * Set whether the audio buffer is considered as cyclic
         * @type {Bool}
         * @name cyclic
         * @memberof PlayerEngine
         * @instance
         */

      }, {
        key: 'cyclic',
        set: function set(cyclic) {
          if (cyclic !== this.__cyclic) {
            var time = this.currentTime;
            var position = this.currentosition;

            this.__halt(time);

            this.__cyclic = cyclic;
            if (this.__speed !== 0) this.__start(time, position, this.__speed);
          }
        },
        get: function get() {
          return this.__cyclic;
        }
        /**
         * Linear gain factor
         * @type {Number}
         * @name gain
         * @memberof PlayerEngine
         * @instance
         */

      }, {
        key: 'gain',
        set: function set(value) {
          var time = this.currentTime;

          this.__gainNode.gain.cancelScheduledValues(time);

          this.__gainNode.gain.setValueAtTime(this.__gainNode.gain.value, time);

          this.__gainNode.gain.linearRampToValueAtTime(0, time + this.fadeTime);
        },
        get: function get() {
          return this.__gainNode.gain.value;
        }
        /**
         * Get buffer duration
         * @type {Number}
         * @name bufferDuration
         * @memberof PlayerEngine
         * @instance
         * @readonly
         */

      }, {
        key: 'bufferDuration',
        get: function get() {
          if (this.buffer) return this.buffer.duration;
          return 0;
        }
      }]);
      return PlayerEngine;
    }(_AudioTimeEngine3.default);

    exports.default = PlayerEngine;
  });
  unwrapExports(PlayerEngine_1);

  var SegmentEngine_1 = createCommonjsModule(function (module, exports) {

    Object.defineProperty(exports, "__esModule", {
      value: true
    });

    var _getPrototypeOf2 = _interopRequireDefault(getPrototypeOf$1);

    var _classCallCheck3 = _interopRequireDefault(classCallCheck);

    var _createClass3 = _interopRequireDefault(createClass);

    var _possibleConstructorReturn3 = _interopRequireDefault(possibleConstructorReturn);

    var _inherits3 = _interopRequireDefault(inherits);

    var _AudioTimeEngine3 = _interopRequireDefault(AudioTimeEngine_1);

    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : {
        default: obj
      };
    }

    function optOrDef(opt, def) {
      if (opt !== undefined) return opt;
      return def;
    }

    function getCurrentOrPreviousIndex(sortedArray, value) {
      var index = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : -1;
      var size = sortedArray.length;

      if (size > 0) {
        var firstVal = sortedArray[0];
        var lastVal = sortedArray[size - 1];
        if (value < firstVal) index = -1;else if (value >= lastVal) index = size - 1;else {
          if (index < 0 || index >= size) index = Math.floor((size - 1) * (value - firstVal) / (lastVal - firstVal));

          while (sortedArray[index] > value) {
            index--;
          }

          while (sortedArray[index + 1] <= value) {
            index++;
          }
        }
      }

      return index;
    }

    function getCurrentOrNextIndex(sortedArray, value) {
      var index = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : -1;
      var size = sortedArray.length;

      if (size > 0) {
        var firstVal = sortedArray[0];
        var lastVal = sortedArray[size - 1];
        if (value <= firstVal) index = 0;else if (value >= lastVal) index = size;else {
          if (index < 0 || index >= size) index = Math.floor((size - 1) * (value - firstVal) / (lastVal - firstVal));

          while (sortedArray[index] < value) {
            index++;
          }

          while (sortedArray[index - 1] >= value) {
            index--;
          }
        }
      }

      return index;
    }
    /**
     * Used with a buffer to serve audio files via granular synthesis.
     *
     * The engine implements the "scheduled" and "transported" interfaces.
     * When "scheduled", the engine  generates segments more or lessÂ periodically
     * (controlled by the periodAbs, periodRel, and perioVar attributes).
     * When "transported", the engine generates segments at the position of their onset time.
     *
     * Example that shows a `SegmentEngine` with a few parameter controls running in a `Scheduler`.
     * {@link https://rawgit.com/wavesjs/waves-audio/master/examples/segment-engine/index.html}
     *
     * @extends AudioTimeEngine
     * @example
     * import * as audio from 'waves-audio';
     * const scheduler = audio.getScheduler();
     * const segmentEngine = new audio.SegmentEngine();
     *
     * scheduler.add(segmentEngine);
     *
     * @param {Object} [options={}] - Default options
     * @param {AudioBuffer} [options.buffer=null] - Audio buffer
     * @param {Number} [options.periodAbs=0] - Absolute segment period in sec
     * @param {Number} [options.periodRel=1] - Segment period relative to inter-segment distance
     * @param {Number} [options.periodVar=0] - Amout of random segment period variation relative
     *  to segment period
     * @param {Number} [options.periodMin=0.001] - Minimum segment period
     * @param {Number} [options.positionArray=[0.0]] - Array of segment positions (onset times
     *  in audio buffer) in sec
     * @param {Number} [options.positionVar=0] - Amout of random segment position variation in sec
     * @param {Number} [options.durationArray=[0.0]] - Array of segment durations in sec
     * @param {Number} [options.durationAbs=0] - Absolute segment duration in sec
     * @param {Number} [options.durationRel=1] - Segment duration relative to given segment
     *  duration or inter-segment distance
     * @param {Array} [options.offsetArray=[0.0]] - Array of segment offsets in sec
     * @param {Number} [options.offsetAbs=-0.005] - Absolute segment offset in sec
     * @param {Number} [options.offsetRel=0] - Segment offset relative to segment duration
     * @param {Number} [options.delay=0.005] - Time by which all segments are delayed (especially
     *  to realize segment offsets)
     * @param {Number} [options.attackAbs=0.005] - Absolute attack time in sec
     * @param {Number} [options.attackRel=0] - Attack time relative to segment duration
     * @param {Number} [options.releaseAbs=0.005] - Absolute release time in sec
     * @param {Number} [options.releaseRel=0] - Release time relative to segment duration
     * @param {Number} [options.resampling=0] - Segment resampling in cent
     * @param {Number} [options.resamplingVar=0] - Amout of random resampling variation in cent
     * @param {Number} [options.gain=1] - Linear gain factor
     * @param {Number} [options.abortTime=0.005] - fade-out time when aborted
     * @param {Number} [options.segmentIndex=0] - Index of the segment to synthesize (i.e. of
     *  this.positionArray/durationArray/offsetArray)
     * @param {Bool} [options.cyclic=false] - Whether the audio buffer and segment indices are
     *  considered as cyclic
     * @param {Number} [options.wrapAroundExtension=0] - Portion at the end of the audio buffer
     *  that has been copied from the beginning to assure cyclic behavior
     */


    var SegmentEngine = function (_AudioTimeEngine) {
      (0, _inherits3.default)(SegmentEngine, _AudioTimeEngine);

      function SegmentEngine() {
        var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
        (0, _classCallCheck3.default)(this, SegmentEngine);
        /**
         * Audio buffer
         * @name buffer
         * @type {AudioBuffer}
         * @default null
         * @memberof SegmentEngine
         * @instance
         */

        var _this = (0, _possibleConstructorReturn3.default)(this, (SegmentEngine.__proto__ || (0, _getPrototypeOf2.default)(SegmentEngine)).call(this, options.audioContext));

        _this.buffer = optOrDef(options.buffer, null);
        /**
         * Absolute segment period in sec
         * @name periodAbs
         * @type {Number}
         * @default 0
         * @memberof SegmentEngine
         * @instance
         */

        _this.periodAbs = optOrDef(options.periodAbs, 0);
        /**
         * Segment period relative to inter-segment distance
         * @name periodRel
         * @type {Number}
         * @default 1
         * @memberof SegmentEngine
         * @instance
         */

        _this.periodRel = optOrDef(options.periodRel, 1);
        /**
         * Amout of random segment period variation relative to segment period
         * @name periodVar
         * @type {Number}
         * @default 0
         * @memberof SegmentEngine
         * @instance
         */

        _this.periodVar = optOrDef(options.periodVar, 0);
        /**
         * Minimum segment period
         * @name periodMin
         * @type {Number}
         * @default 0.001
         * @memberof SegmentEngine
         * @instance
         */

        _this.periodMin = optOrDef(options.periodMin, 0.001);
        /**
         * Array of segment positions (onset times in audio buffer) in sec
         * @name positionArray
         * @type {Number}
         * @default [0.0]
         * @memberof SegmentEngine
         * @instance
         */

        _this.positionArray = optOrDef(options.positionArray, [0.0]);
        /**
         * Amout of random segment position variation in sec
         * @name positionVar
         * @type {Number}
         * @default 0
         * @memberof SegmentEngine
         * @instance
         */

        _this.positionVar = optOrDef(options.positionVar, 0);
        /**
         * Array of segment durations in sec
         * @name durationArray
         * @type {Number}
         * @default [0.0]
         * @memberof SegmentEngine
         * @instance
         */

        _this.durationArray = optOrDef(options.durationArray, [0.0]);
        /**
         * Absolute segment duration in sec
         * @name durationAbs
         * @type {Number}
         * @default 0
         * @memberof SegmentEngine
         * @instance
         */

        _this.durationAbs = optOrDef(options.durationAbs, 0);
        /**
         * Segment duration relative to given segment duration or inter-segment distance
         * @name durationRel
         * @type {Number}
         * @default 1
         * @memberof SegmentEngine
         * @instance
         */

        _this.durationRel = optOrDef(options.durationRel, 1);
        /**
         * Array of segment offsets in sec
         *
         * offset > 0: the segment's reference position is after the given segment position
         * offset < 0: the given segment position is the segment's reference position
         * and the duration has to be corrected by the offset
         *
         * @name offsetArray
         * @type {Array}
         * @default [0.0]
         * @memberof SegmentEngine
         * @instance
         */

        _this.offsetArray = optOrDef(options.offsetArray, [0.0]);
        /**
         * Absolute segment offset in sec
         * @name offsetAbs
         * @type {Number}
         * @default -0.005
         * @memberof SegmentEngine
         * @instance
         */

        _this.offsetAbs = optOrDef(options.offsetAbs, -0.005);
        /**
         * Segment offset relative to segment duration
         * @name offsetRel
         * @type {Number}
         * @default 0
         * @memberof SegmentEngine
         * @instance
         */

        _this.offsetRel = optOrDef(options.offsetRel, 0);
        /**
         * Time by which all segments are delayed (especially to realize segment offsets)
         * @name delay
         * @type {Number}
         * @default 0.005
         * @memberof SegmentEngine
         * @instance
         */

        _this.delay = optOrDef(options.delay, 0.005);
        /**
         * Absolute attack time in sec
         * @name attackAbs
         * @type {Number}
         * @default 0.005
         * @memberof SegmentEngine
         * @instance
         */

        _this.attackAbs = optOrDef(options.attackAbs, 0.005);
        /**
         * Attack time relative to segment duration
         * @name attackRel
         * @type {Number}
         * @default 0
         * @memberof SegmentEngine
         * @instance
         */

        _this.attackRel = optOrDef(options.attackRel, 0);
        /**
         * Absolute release time in sec
         * @name releaseAbs
         * @type {Number}
         * @default 0.005
         * @memberof SegmentEngine
         * @instance
         */

        _this.releaseAbs = optOrDef(options.releaseAbs, 0.005);
        /**
         * Release time relative to segment duration
         * @name releaseRel
         * @type {Number}
         * @default 0
         * @memberof SegmentEngine
         * @instance
         */

        _this.releaseRel = optOrDef(options.releaseRel, 0);
        /**
         * Segment resampling in cent
         * @name resampling
         * @type {Number}
         * @default 0
         * @memberof SegmentEngine
         * @instance
         */

        _this.resampling = optOrDef(options.resampling, 0);
        /**
         * Amout of random resampling variation in cent
         * @name resamplingVar
         * @type {Number}
         * @default 0
         * @memberof SegmentEngine
         * @instance
         */

        _this.resamplingVar = optOrDef(options.resamplingVar, 0);
        /**
         * Linear gain factor
         * @name gain
         * @type {Number}
         * @default 1
         * @memberof SegmentEngine
         * @instance
         */

        _this.gain = optOrDef(options.gain, 1);
        /**
         * Index of the segment to synthesize (i.e. of this.positionArray/durationArray/offsetArray)
         * @name segmentIndex
         * @type {Number}
         * @default 0
         * @memberof SegmentEngine
         * @instance
         */

        _this.segmentIndex = optOrDef(options.segmentIndex, 0);
        /**
         * Whether the audio buffer and segment indices are considered as cyclic
         * @name cyclic
         * @type {Bool}
         * @default false
         * @memberof SegmentEngine
         * @instance
         */

        _this.cyclic = optOrDef(options.cyclic, false);
        _this.__cyclicOffset = 0;
        /**
         * Whether the last segment is aborted when triggering the next
         * @name monophonic
         * @type {Number}
         * @default false
         * @memberof SegmentEngine
         * @instance
         */

        _this.monophonic = optOrDef(options.monophonic, false);
        _this.__currentSrc = null;
        _this.__currentEnv = null;
        _this.__releaseStartTime = 0;
        _this.__currentGain = 0;
        _this.__currentEndTime = 0;
        /**
         * Fade-out time (when aborted)
         * @name abortTime
         * @type {Number}
         * @default 0.005
         * @memberof SegmentEngine
         * @instance
         */

        _this.abortTime = optOrDef(options.abortTime, 0.005);
        /**
         * Portion at the end of the audio buffer that has been copied from the beginning to assure cyclic behavior
         * @name wrapAroundExtension
         * @type {Number}
         * @default 0
         * @memberof SegmentEngine
         * @instance
         */

        _this.wrapAroundExtension = optOrDef(options.wrapAroundExtension, 0);
        _this.outputNode = _this.audioContext.createGain();
        return _this;
      }
      /**
       * Get buffer duration (excluding wrapAroundExtension)
       *
       * @type {Number}
       * @default 0
       * @memberof SegmentEngine
       * @instance
       */


      (0, _createClass3.default)(SegmentEngine, [{
        key: 'advanceTime',
        // TimeEngine method (transported interface)
        value: function advanceTime(time) {
          time = Math.max(time, this.audioContext.currentTime);
          return time + this.trigger(time);
        } // TimeEngine method (transported interface)

      }, {
        key: 'syncPosition',
        value: function syncPosition(time, position, speed) {
          var index = this.segmentIndex;
          var cyclicOffset = 0;
          var bufferDuration = this.bufferDuration;

          if (this.cyclic) {
            var cycles = position / bufferDuration;
            cyclicOffset = Math.floor(cycles) * bufferDuration;
            position -= cyclicOffset;
          }

          if (speed > 0) {
            index = getCurrentOrNextIndex(this.positionArray, position);

            if (index >= this.positionArray.length) {
              index = 0;
              cyclicOffset += bufferDuration;
              if (!this.cyclic) return Infinity;
            }
          } else if (speed < 0) {
            index = getCurrentOrPreviousIndex(this.positionArray, position);

            if (index < 0) {
              index = this.positionArray.length - 1;
              cyclicOffset -= bufferDuration;
              if (!this.cyclic) return -Infinity;
            }
          } else {
            return Infinity;
          }

          this.segmentIndex = index;
          this.__cyclicOffset = cyclicOffset;
          return cyclicOffset + this.positionArray[index];
        } // TimeEngine method (transported interface)

      }, {
        key: 'advancePosition',
        value: function advancePosition(time, position, speed) {
          var index = this.segmentIndex;
          var cyclicOffset = this.__cyclicOffset;
          this.trigger(time);

          if (speed > 0) {
            index++;

            if (index >= this.positionArray.length) {
              index = 0;
              cyclicOffset += this.bufferDuration;
              if (!this.cyclic) return Infinity;
            }
          } else {
            index--;

            if (index < 0) {
              index = this.positionArray.length - 1;
              cyclicOffset -= this.bufferDuration;
              if (!this.cyclic) return -Infinity;
            }
          }

          this.segmentIndex = index;
          this.__cyclicOffset = cyclicOffset;
          return cyclicOffset + this.positionArray[index];
        }
        /**
         * Trigger a segment.
         * This function can be called at any time (whether the engine is scheduled/transported or not)
         * to generate a single segment according to the current segment parameters.
         *
         * @param {Number} time segment synthesis audio time
         * @return {Number} period to next segment
         */

      }, {
        key: 'trigger',
        value: function trigger(time) {
          var audioContext = this.audioContext;
          var segmentTime = (time || audioContext.currentTime) + this.delay;
          var segmentPeriod = this.periodAbs;
          var segmentIndex = this.segmentIndex;

          if (this.buffer) {
            var segmentPosition = 0.0;
            var segmentDuration = 0.0;
            var segmentOffset = 0.0;
            var resamplingRate = 1.0;
            var bufferDuration = this.bufferDuration;
            if (this.cyclic) segmentIndex = segmentIndex % this.positionArray.length;else segmentIndex = Math.max(0, Math.min(segmentIndex, this.positionArray.length - 1));
            if (this.positionArray) segmentPosition = this.positionArray[segmentIndex] || 0;
            if (this.durationArray) segmentDuration = this.durationArray[segmentIndex] || 0;
            if (this.offsetArray) segmentOffset = this.offsetArray[segmentIndex] || 0; // calculate resampling

            if (this.resampling !== 0 || this.resamplingVar > 0) {
              var randomResampling = (Math.random() - 0.5) * 2.0 * this.resamplingVar;
              resamplingRate = Math.pow(2.0, (this.resampling + randomResampling) / 1200.0);
            } // calculate inter-segment distance


            if (segmentDuration === 0 || this.periodRel > 0) {
              var nextSegmentIndex = segmentIndex + 1;
              var nextPosition, nextOffset;

              if (nextSegmentIndex === this.positionArray.length) {
                if (this.cyclic) {
                  nextPosition = this.positionArray[0] + bufferDuration;
                  nextOffset = this.offsetArray[0];
                } else {
                  nextPosition = bufferDuration;
                  nextOffset = 0;
                }
              } else {
                nextPosition = this.positionArray[nextSegmentIndex];
                nextOffset = this.offsetArray[nextSegmentIndex];
              }

              var interSegmentDistance = nextPosition - segmentPosition; // correct inter-segment distance by offsets
              //   offset > 0: the segment's reference position is after the given segment position

              if (segmentOffset > 0) interSegmentDistance -= segmentOffset;
              if (nextOffset > 0) interSegmentDistance += nextOffset;
              if (interSegmentDistance < 0) interSegmentDistance = 0; // use inter-segment distance instead of segment duration

              if (segmentDuration === 0) segmentDuration = interSegmentDistance; // calculate period relative to inter marker distance

              segmentPeriod += this.periodRel * interSegmentDistance;
            } // add relative and absolute segment duration


            segmentDuration *= this.durationRel;
            segmentDuration += this.durationAbs; // add relative and absolute segment offset

            segmentOffset *= this.offsetRel;
            segmentOffset += this.offsetAbs; // apply segment offset
            //   offset > 0: the segment's reference position is after the given segment position
            //   offset < 0: the given segment position is the segment's reference position and the duration has to be corrected by the offset

            if (segmentOffset < 0) {
              segmentDuration -= segmentOffset;
              segmentPosition += segmentOffset;
              segmentTime += segmentOffset / resamplingRate;
            } else {
              segmentTime -= segmentOffset / resamplingRate;
            } // randomize segment position


            if (this.positionVar > 0) segmentPosition += 2.0 * (Math.random() - 0.5) * this.positionVar; // shorten duration of segments over the edges of the buffer

            if (segmentPosition < 0) {
              //segmentTime -= grainPosition; hm, not sure if we want to do this
              segmentDuration += segmentPosition;
              segmentPosition = 0;
            }

            if (segmentPosition + segmentDuration > this.buffer.duration) segmentDuration = this.buffer.duration - segmentPosition;
            segmentDuration /= resamplingRate;
            if (this.monophonic) this.abort(segmentTime); // make segment

            if (this.gain > 0 && segmentDuration > 0) {
              // make segment envelope
              var envelope = audioContext.createGain();
              var attack = this.attackAbs + this.attackRel * segmentDuration;
              var release = this.releaseAbs + this.releaseRel * segmentDuration;

              if (attack + release > segmentDuration) {
                var factor = segmentDuration / (attack + release);
                attack *= factor;
                release *= factor;
              }

              var attackEndTime = segmentTime + attack;
              var segmentEndTime = segmentTime + segmentDuration;
              var releaseStartTime = segmentEndTime - release;
              envelope.gain.value = 0;
              envelope.gain.setValueAtTime(0.0, segmentTime);
              envelope.gain.linearRampToValueAtTime(this.gain, attackEndTime);
              if (releaseStartTime > attackEndTime) envelope.gain.setValueAtTime(this.gain, releaseStartTime);
              envelope.gain.linearRampToValueAtTime(0.0, segmentEndTime);
              envelope.connect(this.outputNode);
              this.__currentEnv = envelope; // make source

              var source = audioContext.createBufferSource();
              source.buffer = this.buffer;
              source.playbackRate.value = resamplingRate;
              source.connect(envelope);
              source.start(segmentTime, segmentPosition);
              source.stop(segmentTime + segmentDuration);
              this.__currentSrc = source;
              this.__releaseStartTime = releaseStartTime;
              this.__currentGain = this.gain;
              this.__currentEndTime = segmentEndTime;
            }
          } // segment period randon variation


          if (this.periodVar > 0.0) segmentPeriod += 2.0 * (Math.random() - 0.5) * this.periodVar * segmentPeriod;
          return Math.max(this.periodMin, segmentPeriod);
        }
        /**
         * Abort the current segment at given time, fade out duration
         *
         * @param {Number} time - abort time
         */

      }, {
        key: 'abort',
        value: function abort(time) {
          var audioContext = this.audioContext;
          var endTime = this.__currentEndTime;
          var abortTime = time || audioContext.currentTime;

          if (abortTime < endTime) {
            var segmentEndTime = Math.min(abortTime + this.abortTime, endTime);
            var envelope = this.__currentEnv;
            var currentGainValue = this.__currentGain;

            if (abortTime > this.__releaseStartTime) {
              var releaseStart = this.__releaseStartTime;
              currentGainValue *= (abortTime - releaseStart) / (endTime - releaseStart);
            }

            envelope.gain.cancelScheduledValues(abortTime);
            envelope.gain.setValueAtTime(currentGainValue, abortTime);
            envelope.gain.linearRampToValueAtTime(0, segmentEndTime);
            this.__currentSrc = null;
            this.__currentEnv = null;
            this.__releaseStartTime = 0;
            this.__currentGain = 0;
            this.__currentEndTime = 0;
          }
        }
      }, {
        key: 'bufferDuration',
        get: function get() {
          if (this.buffer) {
            var bufferDuration = this.buffer.duration;
            if (this.wrapAroundExtension) bufferDuration -= this.wrapAroundExtension;
            return bufferDuration;
          }

          return 0;
        }
      }]);
      return SegmentEngine;
    }(_AudioTimeEngine3.default);

    exports.default = SegmentEngine;
  });
  unwrapExports(SegmentEngine_1);

  var MAP$1 = 'Map'; // 23.1 Map Objects

  var es6_map$1 = _collection$1(MAP$1, function (get) {
    return function Map() {
      return get(this, arguments.length > 0 ? arguments[0] : undefined);
    };
  }, {
    // 23.1.3.6 Map.prototype.get(key)
    get: function get(key) {
      var entry = _collectionStrong$1.getEntry(_validateCollection$1(this, MAP$1), key);
      return entry && entry.v;
    },
    // 23.1.3.9 Map.prototype.set(key, value)
    set: function set(key, value) {
      return _collectionStrong$1.def(_validateCollection$1(this, MAP$1), key === 0 ? 0 : key, value);
    }
  }, _collectionStrong$1, true);

  _export$1(_export$1.P + _export$1.R, 'Map', {
    toJSON: _collectionToJson('Map')
  });

  _setCollectionOf('Map');

  _setCollectionFrom('Map');

  var map = _core$1.Map;

  var map$1 = createCommonjsModule(function (module) {
    module.exports = {
      "default": map,
      __esModule: true
    };
  });
  unwrapExports(map$1);

  var factories$1 = createCommonjsModule(function (module, exports) {

    Object.defineProperty(exports, "__esModule", {
      value: true
    });

    var _map2 = _interopRequireDefault(map$1);

    exports.getScheduler = getScheduler;
    exports.getSimpleScheduler = getSimpleScheduler;

    var _audioContext2 = _interopRequireDefault(audioContext_1);

    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : {
        default: obj
      };
    }

    var schedulerMap = new _map2.default();
    var simpleSchedulerMap = new _map2.default();
    /**
     * Returns a unique instance of `Scheduler`
     *
     * [example]{@link https://rawgit.com/wavesjs/waves-audio/master/examples/scheduler/index.html}}
     *
     * @global
     * @function
     * @returns {Scheduler}
     * @see Scheduler
     */

    function getScheduler() {
      var audioContext = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : _audioContext2.default;
      var scheduler = schedulerMap.get(audioContext);

      if (!scheduler) {
        var getTimeFunction = function getTimeFunction() {
          return audioContext.currentTime;
        };

        scheduler = new dist.Scheduler(getTimeFunction);
        schedulerMap.set(audioContext, scheduler);
      }

      return scheduler;
    }
    /**
     * Returns a unique instance of `SimpleScheduler`
     *
     * [example]{@link https://rawgit.com/wavesjs/waves-audio/master/examples/simple-scheduler/index.html}}
     *
     * @global
     * @function
     * @returns {SimpleScheduler}
     * @see SimpleScheduler
     */

    function getSimpleScheduler() {
      var audioContext = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : _audioContext2.default;
      var simpleScheduler = simpleSchedulerMap.get(audioContext);

      if (!simpleScheduler) {
        var getTimeFunction = function getTimeFunction() {
          return audioContext.currentTime;
        };

        simpleScheduler = new dist.SimpleScheduler(getTimeFunction);
        simpleSchedulerMap.set(audioContext, simpleScheduler);
      }

      return simpleScheduler;
    }
  });
  unwrapExports(factories$1);
  var factories_1 = factories$1.getScheduler;
  var factories_2 = factories$1.getSimpleScheduler;

  var PlayControl_1$1 = createCommonjsModule(function (module, exports) {

    Object.defineProperty(exports, "__esModule", {
      value: true
    });

    var _getPrototypeOf2 = _interopRequireDefault(getPrototypeOf$1);

    var _classCallCheck3 = _interopRequireDefault(classCallCheck);

    var _possibleConstructorReturn3 = _interopRequireDefault(possibleConstructorReturn);

    var _inherits3 = _interopRequireDefault(inherits);

    var _audioContext2 = _interopRequireDefault(audioContext_1);

    var masters = _interopRequireWildcard(dist);

    function _interopRequireWildcard(obj) {
      if (obj && obj.__esModule) {
        return obj;
      } else {
        var newObj = {};

        if (obj != null) {
          for (var key in obj) {
            if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];
          }
        }

        newObj.default = obj;
        return newObj;
      }
    }

    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : {
        default: obj
      };
    }
    /**
     * Extends Time Engine to provide playback control of a Time Engine instance.
     *
     * [example]{@link https://rawgit.com/wavesjs/waves-audio/master/examples/play-control/index.html}
     *
     * @extends TimeEngine
     * @param {TimeEngine} engine - engine to control
     *
     * @example
     * import * as audio from 'waves-audio';
     * const playerEngine = audio.PlayerEngine();
     * const playControl = new audio.PlayControl(playerEngine);
     *
     * playControl.start();
     */


    var PlayControl = function (_masters$PlayControl) {
      (0, _inherits3.default)(PlayControl, _masters$PlayControl);

      function PlayControl(engine) {
        var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
        (0, _classCallCheck3.default)(this, PlayControl);
        var audioContext = options.audioContext || _audioContext2.default;
        var scheduler = (0, factories$1.getScheduler)(audioContext);

        var _this = (0, _possibleConstructorReturn3.default)(this, (PlayControl.__proto__ || (0, _getPrototypeOf2.default)(PlayControl)).call(this, scheduler, engine, options));

        _this.audioContext = audioContext;
        return _this;
      }

      return PlayControl;
    }(masters.PlayControl);

    exports.default = PlayControl;
  });
  unwrapExports(PlayControl_1$1);

  var Transport_1$1 = createCommonjsModule(function (module, exports) {

    Object.defineProperty(exports, "__esModule", {
      value: true
    });

    var _getPrototypeOf2 = _interopRequireDefault(getPrototypeOf$1);

    var _classCallCheck3 = _interopRequireDefault(classCallCheck);

    var _possibleConstructorReturn3 = _interopRequireDefault(possibleConstructorReturn);

    var _inherits3 = _interopRequireDefault(inherits);

    var _audioContext2 = _interopRequireDefault(audioContext_1);

    var masters = _interopRequireWildcard(dist);

    function _interopRequireWildcard(obj) {
      if (obj && obj.__esModule) {
        return obj;
      } else {
        var newObj = {};

        if (obj != null) {
          for (var key in obj) {
            if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];
          }
        }

        newObj.default = obj;
        return newObj;
      }
    }

    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : {
        default: obj
      };
    }
    /**
     * Provides synchronized scheduling of Time Engine instances.
     *
     * [example]{@link https://rawgit.com/wavesjs/waves-audio/master/examples/transport/index.html}
     *
     * @example
     * import * as audio from 'waves-audio';
     * const transport = new audio.Transport();
     * const playControl = new audio.PlayControl(transport);
     * const myEngine = new MyEngine();
     * const yourEngine = new yourEngine();
     *
     * transport.add(myEngine);
     * transport.add(yourEngine);
     *
     * playControl.start();
     */


    var Transport = function (_masters$Transport) {
      (0, _inherits3.default)(Transport, _masters$Transport);

      function Transport() {
        var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
        (0, _classCallCheck3.default)(this, Transport);
        var audioContext = options.audioContext || _audioContext2.default;
        var scheduler = (0, factories$1.getScheduler)(audioContext);

        var _this = (0, _possibleConstructorReturn3.default)(this, (Transport.__proto__ || (0, _getPrototypeOf2.default)(Transport)).call(this, scheduler, options));

        _this.audioContext = audioContext;
        return _this;
      }

      return Transport;
    }(masters.Transport);

    exports.default = Transport;
  });
  unwrapExports(Transport_1$1);

  var dist$1 = createCommonjsModule(function (module, exports) {

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    Object.defineProperty(exports, 'audioContext', {
      enumerable: true,
      get: function get() {
        return _interopRequireDefault(audioContext_1).default;
      }
    });
    Object.defineProperty(exports, 'AudioTimeEngine', {
      enumerable: true,
      get: function get() {
        return _interopRequireDefault(AudioTimeEngine_1).default;
      }
    });
    Object.defineProperty(exports, 'TimeEngine', {
      enumerable: true,
      get: function get() {
        return dist.TimeEngine;
      }
    });
    Object.defineProperty(exports, 'PriorityQueue', {
      enumerable: true,
      get: function get() {
        return dist.PriorityQueue;
      }
    });
    Object.defineProperty(exports, 'SchedulingQueue', {
      enumerable: true,
      get: function get() {
        return dist.SchedulingQueue;
      }
    });
    Object.defineProperty(exports, 'GranularEngine', {
      enumerable: true,
      get: function get() {
        return _interopRequireDefault(GranularEngine_1).default;
      }
    });
    Object.defineProperty(exports, 'Metronome', {
      enumerable: true,
      get: function get() {
        return _interopRequireDefault(Metronome_1).default;
      }
    });
    Object.defineProperty(exports, 'PlayerEngine', {
      enumerable: true,
      get: function get() {
        return _interopRequireDefault(PlayerEngine_1).default;
      }
    });
    Object.defineProperty(exports, 'SegmentEngine', {
      enumerable: true,
      get: function get() {
        return _interopRequireDefault(SegmentEngine_1).default;
      }
    });
    Object.defineProperty(exports, 'PlayControl', {
      enumerable: true,
      get: function get() {
        return _interopRequireDefault(PlayControl_1$1).default;
      }
    });
    Object.defineProperty(exports, 'Transport', {
      enumerable: true,
      get: function get() {
        return _interopRequireDefault(Transport_1$1).default;
      }
    });
    Object.defineProperty(exports, 'getScheduler', {
      enumerable: true,
      get: function get() {
        return factories$1.getScheduler;
      }
    });
    Object.defineProperty(exports, 'getSimpleScheduler', {
      enumerable: true,
      get: function get() {
        return factories$1.getSimpleScheduler;
      }
    });

    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : {
        default: obj
      };
    }
  });
  var audio = unwrapExports(dist$1);

  var mobileDetect = createCommonjsModule(function (module) {
    // THIS FILE IS GENERATED - DO NOT EDIT!

    /*!mobile-detect v1.4.4 2019-09-21*/

    /*global module:false, define:false*/

    /*jshint latedef:false*/

    /*!@license Copyright 2013, Heinrich Goebl, License: MIT, see https://github.com/hgoebl/mobile-detect.js*/
    (function (define, undefined$1) {
      define(function () {

        var impl = {};
        impl.mobileDetectRules = {
          "phones": {
            "iPhone": "\\biPhone\\b|\\biPod\\b",
            "BlackBerry": "BlackBerry|\\bBB10\\b|rim[0-9]+|\\b(BBA100|BBB100|BBD100|BBE100|BBF100|STH100)\\b-[0-9]+",
            "HTC": "HTC|HTC.*(Sensation|Evo|Vision|Explorer|6800|8100|8900|A7272|S510e|C110e|Legend|Desire|T8282)|APX515CKT|Qtek9090|APA9292KT|HD_mini|Sensation.*Z710e|PG86100|Z715e|Desire.*(A8181|HD)|ADR6200|ADR6400L|ADR6425|001HT|Inspire 4G|Android.*\\bEVO\\b|T-Mobile G1|Z520m|Android [0-9.]+; Pixel",
            "Nexus": "Nexus One|Nexus S|Galaxy.*Nexus|Android.*Nexus.*Mobile|Nexus 4|Nexus 5|Nexus 6",
            "Dell": "Dell[;]? (Streak|Aero|Venue|Venue Pro|Flash|Smoke|Mini 3iX)|XCD28|XCD35|\\b001DL\\b|\\b101DL\\b|\\bGS01\\b",
            "Motorola": "Motorola|DROIDX|DROID BIONIC|\\bDroid\\b.*Build|Android.*Xoom|HRI39|MOT-|A1260|A1680|A555|A853|A855|A953|A955|A956|Motorola.*ELECTRIFY|Motorola.*i1|i867|i940|MB200|MB300|MB501|MB502|MB508|MB511|MB520|MB525|MB526|MB611|MB612|MB632|MB810|MB855|MB860|MB861|MB865|MB870|ME501|ME502|ME511|ME525|ME600|ME632|ME722|ME811|ME860|ME863|ME865|MT620|MT710|MT716|MT720|MT810|MT870|MT917|Motorola.*TITANIUM|WX435|WX445|XT300|XT301|XT311|XT316|XT317|XT319|XT320|XT390|XT502|XT530|XT531|XT532|XT535|XT603|XT610|XT611|XT615|XT681|XT701|XT702|XT711|XT720|XT800|XT806|XT860|XT862|XT875|XT882|XT883|XT894|XT901|XT907|XT909|XT910|XT912|XT928|XT926|XT915|XT919|XT925|XT1021|\\bMoto E\\b|XT1068|XT1092|XT1052",
            "Samsung": "\\bSamsung\\b|SM-G950F|SM-G955F|SM-G9250|GT-19300|SGH-I337|BGT-S5230|GT-B2100|GT-B2700|GT-B2710|GT-B3210|GT-B3310|GT-B3410|GT-B3730|GT-B3740|GT-B5510|GT-B5512|GT-B5722|GT-B6520|GT-B7300|GT-B7320|GT-B7330|GT-B7350|GT-B7510|GT-B7722|GT-B7800|GT-C3010|GT-C3011|GT-C3060|GT-C3200|GT-C3212|GT-C3212I|GT-C3262|GT-C3222|GT-C3300|GT-C3300K|GT-C3303|GT-C3303K|GT-C3310|GT-C3322|GT-C3330|GT-C3350|GT-C3500|GT-C3510|GT-C3530|GT-C3630|GT-C3780|GT-C5010|GT-C5212|GT-C6620|GT-C6625|GT-C6712|GT-E1050|GT-E1070|GT-E1075|GT-E1080|GT-E1081|GT-E1085|GT-E1087|GT-E1100|GT-E1107|GT-E1110|GT-E1120|GT-E1125|GT-E1130|GT-E1160|GT-E1170|GT-E1175|GT-E1180|GT-E1182|GT-E1200|GT-E1210|GT-E1225|GT-E1230|GT-E1390|GT-E2100|GT-E2120|GT-E2121|GT-E2152|GT-E2220|GT-E2222|GT-E2230|GT-E2232|GT-E2250|GT-E2370|GT-E2550|GT-E2652|GT-E3210|GT-E3213|GT-I5500|GT-I5503|GT-I5700|GT-I5800|GT-I5801|GT-I6410|GT-I6420|GT-I7110|GT-I7410|GT-I7500|GT-I8000|GT-I8150|GT-I8160|GT-I8190|GT-I8320|GT-I8330|GT-I8350|GT-I8530|GT-I8700|GT-I8703|GT-I8910|GT-I9000|GT-I9001|GT-I9003|GT-I9010|GT-I9020|GT-I9023|GT-I9070|GT-I9082|GT-I9100|GT-I9103|GT-I9220|GT-I9250|GT-I9300|GT-I9305|GT-I9500|GT-I9505|GT-M3510|GT-M5650|GT-M7500|GT-M7600|GT-M7603|GT-M8800|GT-M8910|GT-N7000|GT-S3110|GT-S3310|GT-S3350|GT-S3353|GT-S3370|GT-S3650|GT-S3653|GT-S3770|GT-S3850|GT-S5210|GT-S5220|GT-S5229|GT-S5230|GT-S5233|GT-S5250|GT-S5253|GT-S5260|GT-S5263|GT-S5270|GT-S5300|GT-S5330|GT-S5350|GT-S5360|GT-S5363|GT-S5369|GT-S5380|GT-S5380D|GT-S5560|GT-S5570|GT-S5600|GT-S5603|GT-S5610|GT-S5620|GT-S5660|GT-S5670|GT-S5690|GT-S5750|GT-S5780|GT-S5830|GT-S5839|GT-S6102|GT-S6500|GT-S7070|GT-S7200|GT-S7220|GT-S7230|GT-S7233|GT-S7250|GT-S7500|GT-S7530|GT-S7550|GT-S7562|GT-S7710|GT-S8000|GT-S8003|GT-S8500|GT-S8530|GT-S8600|SCH-A310|SCH-A530|SCH-A570|SCH-A610|SCH-A630|SCH-A650|SCH-A790|SCH-A795|SCH-A850|SCH-A870|SCH-A890|SCH-A930|SCH-A950|SCH-A970|SCH-A990|SCH-I100|SCH-I110|SCH-I400|SCH-I405|SCH-I500|SCH-I510|SCH-I515|SCH-I600|SCH-I730|SCH-I760|SCH-I770|SCH-I830|SCH-I910|SCH-I920|SCH-I959|SCH-LC11|SCH-N150|SCH-N300|SCH-R100|SCH-R300|SCH-R351|SCH-R400|SCH-R410|SCH-T300|SCH-U310|SCH-U320|SCH-U350|SCH-U360|SCH-U365|SCH-U370|SCH-U380|SCH-U410|SCH-U430|SCH-U450|SCH-U460|SCH-U470|SCH-U490|SCH-U540|SCH-U550|SCH-U620|SCH-U640|SCH-U650|SCH-U660|SCH-U700|SCH-U740|SCH-U750|SCH-U810|SCH-U820|SCH-U900|SCH-U940|SCH-U960|SCS-26UC|SGH-A107|SGH-A117|SGH-A127|SGH-A137|SGH-A157|SGH-A167|SGH-A177|SGH-A187|SGH-A197|SGH-A227|SGH-A237|SGH-A257|SGH-A437|SGH-A517|SGH-A597|SGH-A637|SGH-A657|SGH-A667|SGH-A687|SGH-A697|SGH-A707|SGH-A717|SGH-A727|SGH-A737|SGH-A747|SGH-A767|SGH-A777|SGH-A797|SGH-A817|SGH-A827|SGH-A837|SGH-A847|SGH-A867|SGH-A877|SGH-A887|SGH-A897|SGH-A927|SGH-B100|SGH-B130|SGH-B200|SGH-B220|SGH-C100|SGH-C110|SGH-C120|SGH-C130|SGH-C140|SGH-C160|SGH-C170|SGH-C180|SGH-C200|SGH-C207|SGH-C210|SGH-C225|SGH-C230|SGH-C417|SGH-C450|SGH-D307|SGH-D347|SGH-D357|SGH-D407|SGH-D415|SGH-D780|SGH-D807|SGH-D980|SGH-E105|SGH-E200|SGH-E315|SGH-E316|SGH-E317|SGH-E335|SGH-E590|SGH-E635|SGH-E715|SGH-E890|SGH-F300|SGH-F480|SGH-I200|SGH-I300|SGH-I320|SGH-I550|SGH-I577|SGH-I600|SGH-I607|SGH-I617|SGH-I627|SGH-I637|SGH-I677|SGH-I700|SGH-I717|SGH-I727|SGH-i747M|SGH-I777|SGH-I780|SGH-I827|SGH-I847|SGH-I857|SGH-I896|SGH-I897|SGH-I900|SGH-I907|SGH-I917|SGH-I927|SGH-I937|SGH-I997|SGH-J150|SGH-J200|SGH-L170|SGH-L700|SGH-M110|SGH-M150|SGH-M200|SGH-N105|SGH-N500|SGH-N600|SGH-N620|SGH-N625|SGH-N700|SGH-N710|SGH-P107|SGH-P207|SGH-P300|SGH-P310|SGH-P520|SGH-P735|SGH-P777|SGH-Q105|SGH-R210|SGH-R220|SGH-R225|SGH-S105|SGH-S307|SGH-T109|SGH-T119|SGH-T139|SGH-T209|SGH-T219|SGH-T229|SGH-T239|SGH-T249|SGH-T259|SGH-T309|SGH-T319|SGH-T329|SGH-T339|SGH-T349|SGH-T359|SGH-T369|SGH-T379|SGH-T409|SGH-T429|SGH-T439|SGH-T459|SGH-T469|SGH-T479|SGH-T499|SGH-T509|SGH-T519|SGH-T539|SGH-T559|SGH-T589|SGH-T609|SGH-T619|SGH-T629|SGH-T639|SGH-T659|SGH-T669|SGH-T679|SGH-T709|SGH-T719|SGH-T729|SGH-T739|SGH-T746|SGH-T749|SGH-T759|SGH-T769|SGH-T809|SGH-T819|SGH-T839|SGH-T919|SGH-T929|SGH-T939|SGH-T959|SGH-T989|SGH-U100|SGH-U200|SGH-U800|SGH-V205|SGH-V206|SGH-X100|SGH-X105|SGH-X120|SGH-X140|SGH-X426|SGH-X427|SGH-X475|SGH-X495|SGH-X497|SGH-X507|SGH-X600|SGH-X610|SGH-X620|SGH-X630|SGH-X700|SGH-X820|SGH-X890|SGH-Z130|SGH-Z150|SGH-Z170|SGH-ZX10|SGH-ZX20|SHW-M110|SPH-A120|SPH-A400|SPH-A420|SPH-A460|SPH-A500|SPH-A560|SPH-A600|SPH-A620|SPH-A660|SPH-A700|SPH-A740|SPH-A760|SPH-A790|SPH-A800|SPH-A820|SPH-A840|SPH-A880|SPH-A900|SPH-A940|SPH-A960|SPH-D600|SPH-D700|SPH-D710|SPH-D720|SPH-I300|SPH-I325|SPH-I330|SPH-I350|SPH-I500|SPH-I600|SPH-I700|SPH-L700|SPH-M100|SPH-M220|SPH-M240|SPH-M300|SPH-M305|SPH-M320|SPH-M330|SPH-M350|SPH-M360|SPH-M370|SPH-M380|SPH-M510|SPH-M540|SPH-M550|SPH-M560|SPH-M570|SPH-M580|SPH-M610|SPH-M620|SPH-M630|SPH-M800|SPH-M810|SPH-M850|SPH-M900|SPH-M910|SPH-M920|SPH-M930|SPH-N100|SPH-N200|SPH-N240|SPH-N300|SPH-N400|SPH-Z400|SWC-E100|SCH-i909|GT-N7100|GT-N7105|SCH-I535|SM-N900A|SGH-I317|SGH-T999L|GT-S5360B|GT-I8262|GT-S6802|GT-S6312|GT-S6310|GT-S5312|GT-S5310|GT-I9105|GT-I8510|GT-S6790N|SM-G7105|SM-N9005|GT-S5301|GT-I9295|GT-I9195|SM-C101|GT-S7392|GT-S7560|GT-B7610|GT-I5510|GT-S7582|GT-S7530E|GT-I8750|SM-G9006V|SM-G9008V|SM-G9009D|SM-G900A|SM-G900D|SM-G900F|SM-G900H|SM-G900I|SM-G900J|SM-G900K|SM-G900L|SM-G900M|SM-G900P|SM-G900R4|SM-G900S|SM-G900T|SM-G900V|SM-G900W8|SHV-E160K|SCH-P709|SCH-P729|SM-T2558|GT-I9205|SM-G9350|SM-J120F|SM-G920F|SM-G920V|SM-G930F|SM-N910C|SM-A310F|GT-I9190|SM-J500FN|SM-G903F|SM-J330F",
            "LG": "\\bLG\\b;|LG[- ]?(C800|C900|E400|E610|E900|E-900|F160|F180K|F180L|F180S|730|855|L160|LS740|LS840|LS970|LU6200|MS690|MS695|MS770|MS840|MS870|MS910|P500|P700|P705|VM696|AS680|AS695|AX840|C729|E970|GS505|272|C395|E739BK|E960|L55C|L75C|LS696|LS860|P769BK|P350|P500|P509|P870|UN272|US730|VS840|VS950|LN272|LN510|LS670|LS855|LW690|MN270|MN510|P509|P769|P930|UN200|UN270|UN510|UN610|US670|US740|US760|UX265|UX840|VN271|VN530|VS660|VS700|VS740|VS750|VS910|VS920|VS930|VX9200|VX11000|AX840A|LW770|P506|P925|P999|E612|D955|D802|MS323|M257)|LM-G710",
            "Sony": "SonyST|SonyLT|SonyEricsson|SonyEricssonLT15iv|LT18i|E10i|LT28h|LT26w|SonyEricssonMT27i|C5303|C6902|C6903|C6906|C6943|D2533",
            "Asus": "Asus.*Galaxy|PadFone.*Mobile",
            "NokiaLumia": "Lumia [0-9]{3,4}",
            "Micromax": "Micromax.*\\b(A210|A92|A88|A72|A111|A110Q|A115|A116|A110|A90S|A26|A51|A35|A54|A25|A27|A89|A68|A65|A57|A90)\\b",
            "Palm": "PalmSource|Palm",
            "Vertu": "Vertu|Vertu.*Ltd|Vertu.*Ascent|Vertu.*Ayxta|Vertu.*Constellation(F|Quest)?|Vertu.*Monika|Vertu.*Signature",
            "Pantech": "PANTECH|IM-A850S|IM-A840S|IM-A830L|IM-A830K|IM-A830S|IM-A820L|IM-A810K|IM-A810S|IM-A800S|IM-T100K|IM-A725L|IM-A780L|IM-A775C|IM-A770K|IM-A760S|IM-A750K|IM-A740S|IM-A730S|IM-A720L|IM-A710K|IM-A690L|IM-A690S|IM-A650S|IM-A630K|IM-A600S|VEGA PTL21|PT003|P8010|ADR910L|P6030|P6020|P9070|P4100|P9060|P5000|CDM8992|TXT8045|ADR8995|IS11PT|P2030|P6010|P8000|PT002|IS06|CDM8999|P9050|PT001|TXT8040|P2020|P9020|P2000|P7040|P7000|C790",
            "Fly": "IQ230|IQ444|IQ450|IQ440|IQ442|IQ441|IQ245|IQ256|IQ236|IQ255|IQ235|IQ245|IQ275|IQ240|IQ285|IQ280|IQ270|IQ260|IQ250",
            "Wiko": "KITE 4G|HIGHWAY|GETAWAY|STAIRWAY|DARKSIDE|DARKFULL|DARKNIGHT|DARKMOON|SLIDE|WAX 4G|RAINBOW|BLOOM|SUNSET|GOA(?!nna)|LENNY|BARRY|IGGY|OZZY|CINK FIVE|CINK PEAX|CINK PEAX 2|CINK SLIM|CINK SLIM 2|CINK +|CINK KING|CINK PEAX|CINK SLIM|SUBLIM",
            "iMobile": "i-mobile (IQ|i-STYLE|idea|ZAA|Hitz)",
            "SimValley": "\\b(SP-80|XT-930|SX-340|XT-930|SX-310|SP-360|SP60|SPT-800|SP-120|SPT-800|SP-140|SPX-5|SPX-8|SP-100|SPX-8|SPX-12)\\b",
            "Wolfgang": "AT-B24D|AT-AS50HD|AT-AS40W|AT-AS55HD|AT-AS45q2|AT-B26D|AT-AS50Q",
            "Alcatel": "Alcatel",
            "Nintendo": "Nintendo (3DS|Switch)",
            "Amoi": "Amoi",
            "INQ": "INQ",
            "OnePlus": "ONEPLUS",
            "GenericPhone": "Tapatalk|PDA;|SAGEM|\\bmmp\\b|pocket|\\bpsp\\b|symbian|Smartphone|smartfon|treo|up.browser|up.link|vodafone|\\bwap\\b|nokia|Series40|Series60|S60|SonyEricsson|N900|MAUI.*WAP.*Browser"
          },
          "tablets": {
            "iPad": "iPad|iPad.*Mobile",
            "NexusTablet": "Android.*Nexus[\\s]+(7|9|10)",
            "GoogleTablet": "Android.*Pixel C",
            "SamsungTablet": "SAMSUNG.*Tablet|Galaxy.*Tab|SC-01C|GT-P1000|GT-P1003|GT-P1010|GT-P3105|GT-P6210|GT-P6800|GT-P6810|GT-P7100|GT-P7300|GT-P7310|GT-P7500|GT-P7510|SCH-I800|SCH-I815|SCH-I905|SGH-I957|SGH-I987|SGH-T849|SGH-T859|SGH-T869|SPH-P100|GT-P3100|GT-P3108|GT-P3110|GT-P5100|GT-P5110|GT-P6200|GT-P7320|GT-P7511|GT-N8000|GT-P8510|SGH-I497|SPH-P500|SGH-T779|SCH-I705|SCH-I915|GT-N8013|GT-P3113|GT-P5113|GT-P8110|GT-N8010|GT-N8005|GT-N8020|GT-P1013|GT-P6201|GT-P7501|GT-N5100|GT-N5105|GT-N5110|SHV-E140K|SHV-E140L|SHV-E140S|SHV-E150S|SHV-E230K|SHV-E230L|SHV-E230S|SHW-M180K|SHW-M180L|SHW-M180S|SHW-M180W|SHW-M300W|SHW-M305W|SHW-M380K|SHW-M380S|SHW-M380W|SHW-M430W|SHW-M480K|SHW-M480S|SHW-M480W|SHW-M485W|SHW-M486W|SHW-M500W|GT-I9228|SCH-P739|SCH-I925|GT-I9200|GT-P5200|GT-P5210|GT-P5210X|SM-T311|SM-T310|SM-T310X|SM-T210|SM-T210R|SM-T211|SM-P600|SM-P601|SM-P605|SM-P900|SM-P901|SM-T217|SM-T217A|SM-T217S|SM-P6000|SM-T3100|SGH-I467|XE500|SM-T110|GT-P5220|GT-I9200X|GT-N5110X|GT-N5120|SM-P905|SM-T111|SM-T2105|SM-T315|SM-T320|SM-T320X|SM-T321|SM-T520|SM-T525|SM-T530NU|SM-T230NU|SM-T330NU|SM-T900|XE500T1C|SM-P605V|SM-P905V|SM-T337V|SM-T537V|SM-T707V|SM-T807V|SM-P600X|SM-P900X|SM-T210X|SM-T230|SM-T230X|SM-T325|GT-P7503|SM-T531|SM-T330|SM-T530|SM-T705|SM-T705C|SM-T535|SM-T331|SM-T800|SM-T700|SM-T537|SM-T807|SM-P907A|SM-T337A|SM-T537A|SM-T707A|SM-T807A|SM-T237|SM-T807P|SM-P607T|SM-T217T|SM-T337T|SM-T807T|SM-T116NQ|SM-T116BU|SM-P550|SM-T350|SM-T550|SM-T9000|SM-P9000|SM-T705Y|SM-T805|GT-P3113|SM-T710|SM-T810|SM-T815|SM-T360|SM-T533|SM-T113|SM-T335|SM-T715|SM-T560|SM-T670|SM-T677|SM-T377|SM-T567|SM-T357T|SM-T555|SM-T561|SM-T713|SM-T719|SM-T813|SM-T819|SM-T580|SM-T355Y?|SM-T280|SM-T817A|SM-T820|SM-W700|SM-P580|SM-T587|SM-P350|SM-P555M|SM-P355M|SM-T113NU|SM-T815Y|SM-T585|SM-T285|SM-T825|SM-W708|SM-T835|SM-T830|SM-T837V|SM-T720|SM-T510|SM-T387V",
            "Kindle": "Kindle|Silk.*Accelerated|Android.*\\b(KFOT|KFTT|KFJWI|KFJWA|KFOTE|KFSOWI|KFTHWI|KFTHWA|KFAPWI|KFAPWA|WFJWAE|KFSAWA|KFSAWI|KFASWI|KFARWI|KFFOWI|KFGIWI|KFMEWI)\\b|Android.*Silk\/[0-9.]+ like Chrome\/[0-9.]+ (?!Mobile)",
            "SurfaceTablet": "Windows NT [0-9.]+; ARM;.*(Tablet|ARMBJS)",
            "HPTablet": "HP Slate (7|8|10)|HP ElitePad 900|hp-tablet|EliteBook.*Touch|HP 8|Slate 21|HP SlateBook 10",
            "AsusTablet": "^.*PadFone((?!Mobile).)*$|Transformer|TF101|TF101G|TF300T|TF300TG|TF300TL|TF700T|TF700KL|TF701T|TF810C|ME171|ME301T|ME302C|ME371MG|ME370T|ME372MG|ME172V|ME173X|ME400C|Slider SL101|\\bK00F\\b|\\bK00C\\b|\\bK00E\\b|\\bK00L\\b|TX201LA|ME176C|ME102A|\\bM80TA\\b|ME372CL|ME560CG|ME372CG|ME302KL| K010 | K011 | K017 | K01E |ME572C|ME103K|ME170C|ME171C|\\bME70C\\b|ME581C|ME581CL|ME8510C|ME181C|P01Y|PO1MA|P01Z|\\bP027\\b|\\bP024\\b|\\bP00C\\b",
            "BlackBerryTablet": "PlayBook|RIM Tablet",
            "HTCtablet": "HTC_Flyer_P512|HTC Flyer|HTC Jetstream|HTC-P715a|HTC EVO View 4G|PG41200|PG09410",
            "MotorolaTablet": "xoom|sholest|MZ615|MZ605|MZ505|MZ601|MZ602|MZ603|MZ604|MZ606|MZ607|MZ608|MZ609|MZ615|MZ616|MZ617",
            "NookTablet": "Android.*Nook|NookColor|nook browser|BNRV200|BNRV200A|BNTV250|BNTV250A|BNTV400|BNTV600|LogicPD Zoom2",
            "AcerTablet": "Android.*; \\b(A100|A101|A110|A200|A210|A211|A500|A501|A510|A511|A700|A701|W500|W500P|W501|W501P|W510|W511|W700|G100|G100W|B1-A71|B1-710|B1-711|A1-810|A1-811|A1-830)\\b|W3-810|\\bA3-A10\\b|\\bA3-A11\\b|\\bA3-A20\\b|\\bA3-A30",
            "ToshibaTablet": "Android.*(AT100|AT105|AT200|AT205|AT270|AT275|AT300|AT305|AT1S5|AT500|AT570|AT700|AT830)|TOSHIBA.*FOLIO",
            "LGTablet": "\\bL-06C|LG-V909|LG-V900|LG-V700|LG-V510|LG-V500|LG-V410|LG-V400|LG-VK810\\b",
            "FujitsuTablet": "Android.*\\b(F-01D|F-02F|F-05E|F-10D|M532|Q572)\\b",
            "PrestigioTablet": "PMP3170B|PMP3270B|PMP3470B|PMP7170B|PMP3370B|PMP3570C|PMP5870C|PMP3670B|PMP5570C|PMP5770D|PMP3970B|PMP3870C|PMP5580C|PMP5880D|PMP5780D|PMP5588C|PMP7280C|PMP7280C3G|PMP7280|PMP7880D|PMP5597D|PMP5597|PMP7100D|PER3464|PER3274|PER3574|PER3884|PER5274|PER5474|PMP5097CPRO|PMP5097|PMP7380D|PMP5297C|PMP5297C_QUAD|PMP812E|PMP812E3G|PMP812F|PMP810E|PMP880TD|PMT3017|PMT3037|PMT3047|PMT3057|PMT7008|PMT5887|PMT5001|PMT5002",
            "LenovoTablet": "Lenovo TAB|Idea(Tab|Pad)( A1|A10| K1|)|ThinkPad([ ]+)?Tablet|YT3-850M|YT3-X90L|YT3-X90F|YT3-X90X|Lenovo.*(S2109|S2110|S5000|S6000|K3011|A3000|A3500|A1000|A2107|A2109|A1107|A5500|A7600|B6000|B8000|B8080)(-|)(FL|F|HV|H|)|TB-X103F|TB-X304X|TB-X304F|TB-X304L|TB-X505F|TB-X505L|TB-X505X|TB-X605F|TB-X605L|TB-8703F|TB-8703X|TB-8703N|TB-8704N|TB-8704F|TB-8704X|TB-8704V|TB-7304F|TB-7304I|TB-7304X|Tab2A7-10F|Tab2A7-20F|TB2-X30L|YT3-X50L|YT3-X50F|YT3-X50M|YT-X705F|YT-X703F|YT-X703L|YT-X705L|YT-X705X|TB2-X30F|TB2-X30L|TB2-X30M|A2107A-F|A2107A-H|TB3-730F|TB3-730M|TB3-730X|TB-7504F|TB-7504X",
            "DellTablet": "Venue 11|Venue 8|Venue 7|Dell Streak 10|Dell Streak 7",
            "YarvikTablet": "Android.*\\b(TAB210|TAB211|TAB224|TAB250|TAB260|TAB264|TAB310|TAB360|TAB364|TAB410|TAB411|TAB420|TAB424|TAB450|TAB460|TAB461|TAB464|TAB465|TAB467|TAB468|TAB07-100|TAB07-101|TAB07-150|TAB07-151|TAB07-152|TAB07-200|TAB07-201-3G|TAB07-210|TAB07-211|TAB07-212|TAB07-214|TAB07-220|TAB07-400|TAB07-485|TAB08-150|TAB08-200|TAB08-201-3G|TAB08-201-30|TAB09-100|TAB09-211|TAB09-410|TAB10-150|TAB10-201|TAB10-211|TAB10-400|TAB10-410|TAB13-201|TAB274EUK|TAB275EUK|TAB374EUK|TAB462EUK|TAB474EUK|TAB9-200)\\b",
            "MedionTablet": "Android.*\\bOYO\\b|LIFE.*(P9212|P9514|P9516|S9512)|LIFETAB",
            "ArnovaTablet": "97G4|AN10G2|AN7bG3|AN7fG3|AN8G3|AN8cG3|AN7G3|AN9G3|AN7dG3|AN7dG3ST|AN7dG3ChildPad|AN10bG3|AN10bG3DT|AN9G2",
            "IntensoTablet": "INM8002KP|INM1010FP|INM805ND|Intenso Tab|TAB1004",
            "IRUTablet": "M702pro",
            "MegafonTablet": "MegaFon V9|\\bZTE V9\\b|Android.*\\bMT7A\\b",
            "EbodaTablet": "E-Boda (Supreme|Impresspeed|Izzycomm|Essential)",
            "AllViewTablet": "Allview.*(Viva|Alldro|City|Speed|All TV|Frenzy|Quasar|Shine|TX1|AX1|AX2)",
            "ArchosTablet": "\\b(101G9|80G9|A101IT)\\b|Qilive 97R|Archos5|\\bARCHOS (70|79|80|90|97|101|FAMILYPAD|)(b|c|)(G10| Cobalt| TITANIUM(HD|)| Xenon| Neon|XSK| 2| XS 2| PLATINUM| CARBON|GAMEPAD)\\b",
            "AinolTablet": "NOVO7|NOVO8|NOVO10|Novo7Aurora|Novo7Basic|NOVO7PALADIN|novo9-Spark",
            "NokiaLumiaTablet": "Lumia 2520",
            "SonyTablet": "Sony.*Tablet|Xperia Tablet|Sony Tablet S|SO-03E|SGPT12|SGPT13|SGPT114|SGPT121|SGPT122|SGPT123|SGPT111|SGPT112|SGPT113|SGPT131|SGPT132|SGPT133|SGPT211|SGPT212|SGPT213|SGP311|SGP312|SGP321|EBRD1101|EBRD1102|EBRD1201|SGP351|SGP341|SGP511|SGP512|SGP521|SGP541|SGP551|SGP621|SGP641|SGP612|SOT31|SGP771|SGP611|SGP612|SGP712",
            "PhilipsTablet": "\\b(PI2010|PI3000|PI3100|PI3105|PI3110|PI3205|PI3210|PI3900|PI4010|PI7000|PI7100)\\b",
            "CubeTablet": "Android.*(K8GT|U9GT|U10GT|U16GT|U17GT|U18GT|U19GT|U20GT|U23GT|U30GT)|CUBE U8GT",
            "CobyTablet": "MID1042|MID1045|MID1125|MID1126|MID7012|MID7014|MID7015|MID7034|MID7035|MID7036|MID7042|MID7048|MID7127|MID8042|MID8048|MID8127|MID9042|MID9740|MID9742|MID7022|MID7010",
            "MIDTablet": "M9701|M9000|M9100|M806|M1052|M806|T703|MID701|MID713|MID710|MID727|MID760|MID830|MID728|MID933|MID125|MID810|MID732|MID120|MID930|MID800|MID731|MID900|MID100|MID820|MID735|MID980|MID130|MID833|MID737|MID960|MID135|MID860|MID736|MID140|MID930|MID835|MID733|MID4X10",
            "MSITablet": "MSI \\b(Primo 73K|Primo 73L|Primo 81L|Primo 77|Primo 93|Primo 75|Primo 76|Primo 73|Primo 81|Primo 91|Primo 90|Enjoy 71|Enjoy 7|Enjoy 10)\\b",
            "SMiTTablet": "Android.*(\\bMID\\b|MID-560|MTV-T1200|MTV-PND531|MTV-P1101|MTV-PND530)",
            "RockChipTablet": "Android.*(RK2818|RK2808A|RK2918|RK3066)|RK2738|RK2808A",
            "FlyTablet": "IQ310|Fly Vision",
            "bqTablet": "Android.*(bq)?.*\\b(Elcano|Curie|Edison|Maxwell|Kepler|Pascal|Tesla|Hypatia|Platon|Newton|Livingstone|Cervantes|Avant|Aquaris ([E|M]10|M8))\\b|Maxwell.*Lite|Maxwell.*Plus",
            "HuaweiTablet": "MediaPad|MediaPad 7 Youth|IDEOS S7|S7-201c|S7-202u|S7-101|S7-103|S7-104|S7-105|S7-106|S7-201|S7-Slim|M2-A01L|BAH-L09|BAH-W09|AGS-L09|CMR-AL19",
            "NecTablet": "\\bN-06D|\\bN-08D",
            "PantechTablet": "Pantech.*P4100",
            "BronchoTablet": "Broncho.*(N701|N708|N802|a710)",
            "VersusTablet": "TOUCHPAD.*[78910]|\\bTOUCHTAB\\b",
            "ZyncTablet": "z1000|Z99 2G|z930|z990|z909|Z919|z900",
            "PositivoTablet": "TB07STA|TB10STA|TB07FTA|TB10FTA",
            "NabiTablet": "Android.*\\bNabi",
            "KoboTablet": "Kobo Touch|\\bK080\\b|\\bVox\\b Build|\\bArc\\b Build",
            "DanewTablet": "DSlide.*\\b(700|701R|702|703R|704|802|970|971|972|973|974|1010|1012)\\b",
            "TexetTablet": "NaviPad|TB-772A|TM-7045|TM-7055|TM-9750|TM-7016|TM-7024|TM-7026|TM-7041|TM-7043|TM-7047|TM-8041|TM-9741|TM-9747|TM-9748|TM-9751|TM-7022|TM-7021|TM-7020|TM-7011|TM-7010|TM-7023|TM-7025|TM-7037W|TM-7038W|TM-7027W|TM-9720|TM-9725|TM-9737W|TM-1020|TM-9738W|TM-9740|TM-9743W|TB-807A|TB-771A|TB-727A|TB-725A|TB-719A|TB-823A|TB-805A|TB-723A|TB-715A|TB-707A|TB-705A|TB-709A|TB-711A|TB-890HD|TB-880HD|TB-790HD|TB-780HD|TB-770HD|TB-721HD|TB-710HD|TB-434HD|TB-860HD|TB-840HD|TB-760HD|TB-750HD|TB-740HD|TB-730HD|TB-722HD|TB-720HD|TB-700HD|TB-500HD|TB-470HD|TB-431HD|TB-430HD|TB-506|TB-504|TB-446|TB-436|TB-416|TB-146SE|TB-126SE",
            "PlaystationTablet": "Playstation.*(Portable|Vita)",
            "TrekstorTablet": "ST10416-1|VT10416-1|ST70408-1|ST702xx-1|ST702xx-2|ST80208|ST97216|ST70104-2|VT10416-2|ST10216-2A|SurfTab",
            "PyleAudioTablet": "\\b(PTBL10CEU|PTBL10C|PTBL72BC|PTBL72BCEU|PTBL7CEU|PTBL7C|PTBL92BC|PTBL92BCEU|PTBL9CEU|PTBL9CUK|PTBL9C)\\b",
            "AdvanTablet": "Android.* \\b(E3A|T3X|T5C|T5B|T3E|T3C|T3B|T1J|T1F|T2A|T1H|T1i|E1C|T1-E|T5-A|T4|E1-B|T2Ci|T1-B|T1-D|O1-A|E1-A|T1-A|T3A|T4i)\\b ",
            "DanyTechTablet": "Genius Tab G3|Genius Tab S2|Genius Tab Q3|Genius Tab G4|Genius Tab Q4|Genius Tab G-II|Genius TAB GII|Genius TAB GIII|Genius Tab S1",
            "GalapadTablet": "Android.*\\bG1\\b(?!\\))",
            "MicromaxTablet": "Funbook|Micromax.*\\b(P250|P560|P360|P362|P600|P300|P350|P500|P275)\\b",
            "KarbonnTablet": "Android.*\\b(A39|A37|A34|ST8|ST10|ST7|Smart Tab3|Smart Tab2)\\b",
            "AllFineTablet": "Fine7 Genius|Fine7 Shine|Fine7 Air|Fine8 Style|Fine9 More|Fine10 Joy|Fine11 Wide",
            "PROSCANTablet": "\\b(PEM63|PLT1023G|PLT1041|PLT1044|PLT1044G|PLT1091|PLT4311|PLT4311PL|PLT4315|PLT7030|PLT7033|PLT7033D|PLT7035|PLT7035D|PLT7044K|PLT7045K|PLT7045KB|PLT7071KG|PLT7072|PLT7223G|PLT7225G|PLT7777G|PLT7810K|PLT7849G|PLT7851G|PLT7852G|PLT8015|PLT8031|PLT8034|PLT8036|PLT8080K|PLT8082|PLT8088|PLT8223G|PLT8234G|PLT8235G|PLT8816K|PLT9011|PLT9045K|PLT9233G|PLT9735|PLT9760G|PLT9770G)\\b",
            "YONESTablet": "BQ1078|BC1003|BC1077|RK9702|BC9730|BC9001|IT9001|BC7008|BC7010|BC708|BC728|BC7012|BC7030|BC7027|BC7026",
            "ChangJiaTablet": "TPC7102|TPC7103|TPC7105|TPC7106|TPC7107|TPC7201|TPC7203|TPC7205|TPC7210|TPC7708|TPC7709|TPC7712|TPC7110|TPC8101|TPC8103|TPC8105|TPC8106|TPC8203|TPC8205|TPC8503|TPC9106|TPC9701|TPC97101|TPC97103|TPC97105|TPC97106|TPC97111|TPC97113|TPC97203|TPC97603|TPC97809|TPC97205|TPC10101|TPC10103|TPC10106|TPC10111|TPC10203|TPC10205|TPC10503",
            "GUTablet": "TX-A1301|TX-M9002|Q702|kf026",
            "PointOfViewTablet": "TAB-P506|TAB-navi-7-3G-M|TAB-P517|TAB-P-527|TAB-P701|TAB-P703|TAB-P721|TAB-P731N|TAB-P741|TAB-P825|TAB-P905|TAB-P925|TAB-PR945|TAB-PL1015|TAB-P1025|TAB-PI1045|TAB-P1325|TAB-PROTAB[0-9]+|TAB-PROTAB25|TAB-PROTAB26|TAB-PROTAB27|TAB-PROTAB26XL|TAB-PROTAB2-IPS9|TAB-PROTAB30-IPS9|TAB-PROTAB25XXL|TAB-PROTAB26-IPS10|TAB-PROTAB30-IPS10",
            "OvermaxTablet": "OV-(SteelCore|NewBase|Basecore|Baseone|Exellen|Quattor|EduTab|Solution|ACTION|BasicTab|TeddyTab|MagicTab|Stream|TB-08|TB-09)|Qualcore 1027",
            "HCLTablet": "HCL.*Tablet|Connect-3G-2.0|Connect-2G-2.0|ME Tablet U1|ME Tablet U2|ME Tablet G1|ME Tablet X1|ME Tablet Y2|ME Tablet Sync",
            "DPSTablet": "DPS Dream 9|DPS Dual 7",
            "VistureTablet": "V97 HD|i75 3G|Visture V4( HD)?|Visture V5( HD)?|Visture V10",
            "CrestaTablet": "CTP(-)?810|CTP(-)?818|CTP(-)?828|CTP(-)?838|CTP(-)?888|CTP(-)?978|CTP(-)?980|CTP(-)?987|CTP(-)?988|CTP(-)?989",
            "MediatekTablet": "\\bMT8125|MT8389|MT8135|MT8377\\b",
            "ConcordeTablet": "Concorde([ ]+)?Tab|ConCorde ReadMan",
            "GoCleverTablet": "GOCLEVER TAB|A7GOCLEVER|M1042|M7841|M742|R1042BK|R1041|TAB A975|TAB A7842|TAB A741|TAB A741L|TAB M723G|TAB M721|TAB A1021|TAB I921|TAB R721|TAB I720|TAB T76|TAB R70|TAB R76.2|TAB R106|TAB R83.2|TAB M813G|TAB I721|GCTA722|TAB I70|TAB I71|TAB S73|TAB R73|TAB R74|TAB R93|TAB R75|TAB R76.1|TAB A73|TAB A93|TAB A93.2|TAB T72|TAB R83|TAB R974|TAB R973|TAB A101|TAB A103|TAB A104|TAB A104.2|R105BK|M713G|A972BK|TAB A971|TAB R974.2|TAB R104|TAB R83.3|TAB A1042",
            "ModecomTablet": "FreeTAB 9000|FreeTAB 7.4|FreeTAB 7004|FreeTAB 7800|FreeTAB 2096|FreeTAB 7.5|FreeTAB 1014|FreeTAB 1001 |FreeTAB 8001|FreeTAB 9706|FreeTAB 9702|FreeTAB 7003|FreeTAB 7002|FreeTAB 1002|FreeTAB 7801|FreeTAB 1331|FreeTAB 1004|FreeTAB 8002|FreeTAB 8014|FreeTAB 9704|FreeTAB 1003",
            "VoninoTablet": "\\b(Argus[ _]?S|Diamond[ _]?79HD|Emerald[ _]?78E|Luna[ _]?70C|Onyx[ _]?S|Onyx[ _]?Z|Orin[ _]?HD|Orin[ _]?S|Otis[ _]?S|SpeedStar[ _]?S|Magnet[ _]?M9|Primus[ _]?94[ _]?3G|Primus[ _]?94HD|Primus[ _]?QS|Android.*\\bQ8\\b|Sirius[ _]?EVO[ _]?QS|Sirius[ _]?QS|Spirit[ _]?S)\\b",
            "ECSTablet": "V07OT2|TM105A|S10OT1|TR10CS1",
            "StorexTablet": "eZee[_']?(Tab|Go)[0-9]+|TabLC7|Looney Tunes Tab",
            "VodafoneTablet": "SmartTab([ ]+)?[0-9]+|SmartTabII10|SmartTabII7|VF-1497|VFD 1400",
            "EssentielBTablet": "Smart[ ']?TAB[ ]+?[0-9]+|Family[ ']?TAB2",
            "RossMoorTablet": "RM-790|RM-997|RMD-878G|RMD-974R|RMT-705A|RMT-701|RME-601|RMT-501|RMT-711",
            "iMobileTablet": "i-mobile i-note",
            "TolinoTablet": "tolino tab [0-9.]+|tolino shine",
            "AudioSonicTablet": "\\bC-22Q|T7-QC|T-17B|T-17P\\b",
            "AMPETablet": "Android.* A78 ",
            "SkkTablet": "Android.* (SKYPAD|PHOENIX|CYCLOPS)",
            "TecnoTablet": "TECNO P9|TECNO DP8D",
            "JXDTablet": "Android.* \\b(F3000|A3300|JXD5000|JXD3000|JXD2000|JXD300B|JXD300|S5800|S7800|S602b|S5110b|S7300|S5300|S602|S603|S5100|S5110|S601|S7100a|P3000F|P3000s|P101|P200s|P1000m|P200m|P9100|P1000s|S6600b|S908|P1000|P300|S18|S6600|S9100)\\b",
            "iJoyTablet": "Tablet (Spirit 7|Essentia|Galatea|Fusion|Onix 7|Landa|Titan|Scooby|Deox|Stella|Themis|Argon|Unique 7|Sygnus|Hexen|Finity 7|Cream|Cream X2|Jade|Neon 7|Neron 7|Kandy|Scape|Saphyr 7|Rebel|Biox|Rebel|Rebel 8GB|Myst|Draco 7|Myst|Tab7-004|Myst|Tadeo Jones|Tablet Boing|Arrow|Draco Dual Cam|Aurix|Mint|Amity|Revolution|Finity 9|Neon 9|T9w|Amity 4GB Dual Cam|Stone 4GB|Stone 8GB|Andromeda|Silken|X2|Andromeda II|Halley|Flame|Saphyr 9,7|Touch 8|Planet|Triton|Unique 10|Hexen 10|Memphis 4GB|Memphis 8GB|Onix 10)",
            "FX2Tablet": "FX2 PAD7|FX2 PAD10",
            "XoroTablet": "KidsPAD 701|PAD[ ]?712|PAD[ ]?714|PAD[ ]?716|PAD[ ]?717|PAD[ ]?718|PAD[ ]?720|PAD[ ]?721|PAD[ ]?722|PAD[ ]?790|PAD[ ]?792|PAD[ ]?900|PAD[ ]?9715D|PAD[ ]?9716DR|PAD[ ]?9718DR|PAD[ ]?9719QR|PAD[ ]?9720QR|TelePAD1030|Telepad1032|TelePAD730|TelePAD731|TelePAD732|TelePAD735Q|TelePAD830|TelePAD9730|TelePAD795|MegaPAD 1331|MegaPAD 1851|MegaPAD 2151",
            "ViewsonicTablet": "ViewPad 10pi|ViewPad 10e|ViewPad 10s|ViewPad E72|ViewPad7|ViewPad E100|ViewPad 7e|ViewSonic VB733|VB100a",
            "VerizonTablet": "QTAQZ3|QTAIR7|QTAQTZ3|QTASUN1|QTASUN2|QTAXIA1",
            "OdysTablet": "LOOX|XENO10|ODYS[ -](Space|EVO|Xpress|NOON)|\\bXELIO\\b|Xelio10Pro|XELIO7PHONETAB|XELIO10EXTREME|XELIOPT2|NEO_QUAD10",
            "CaptivaTablet": "CAPTIVA PAD",
            "IconbitTablet": "NetTAB|NT-3702|NT-3702S|NT-3702S|NT-3603P|NT-3603P|NT-0704S|NT-0704S|NT-3805C|NT-3805C|NT-0806C|NT-0806C|NT-0909T|NT-0909T|NT-0907S|NT-0907S|NT-0902S|NT-0902S",
            "TeclastTablet": "T98 4G|\\bP80\\b|\\bX90HD\\b|X98 Air|X98 Air 3G|\\bX89\\b|P80 3G|\\bX80h\\b|P98 Air|\\bX89HD\\b|P98 3G|\\bP90HD\\b|P89 3G|X98 3G|\\bP70h\\b|P79HD 3G|G18d 3G|\\bP79HD\\b|\\bP89s\\b|\\bA88\\b|\\bP10HD\\b|\\bP19HD\\b|G18 3G|\\bP78HD\\b|\\bA78\\b|\\bP75\\b|G17s 3G|G17h 3G|\\bP85t\\b|\\bP90\\b|\\bP11\\b|\\bP98t\\b|\\bP98HD\\b|\\bG18d\\b|\\bP85s\\b|\\bP11HD\\b|\\bP88s\\b|\\bA80HD\\b|\\bA80se\\b|\\bA10h\\b|\\bP89\\b|\\bP78s\\b|\\bG18\\b|\\bP85\\b|\\bA70h\\b|\\bA70\\b|\\bG17\\b|\\bP18\\b|\\bA80s\\b|\\bA11s\\b|\\bP88HD\\b|\\bA80h\\b|\\bP76s\\b|\\bP76h\\b|\\bP98\\b|\\bA10HD\\b|\\bP78\\b|\\bP88\\b|\\bA11\\b|\\bA10t\\b|\\bP76a\\b|\\bP76t\\b|\\bP76e\\b|\\bP85HD\\b|\\bP85a\\b|\\bP86\\b|\\bP75HD\\b|\\bP76v\\b|\\bA12\\b|\\bP75a\\b|\\bA15\\b|\\bP76Ti\\b|\\bP81HD\\b|\\bA10\\b|\\bT760VE\\b|\\bT720HD\\b|\\bP76\\b|\\bP73\\b|\\bP71\\b|\\bP72\\b|\\bT720SE\\b|\\bC520Ti\\b|\\bT760\\b|\\bT720VE\\b|T720-3GE|T720-WiFi",
            "OndaTablet": "\\b(V975i|Vi30|VX530|V701|Vi60|V701s|Vi50|V801s|V719|Vx610w|VX610W|V819i|Vi10|VX580W|Vi10|V711s|V813|V811|V820w|V820|Vi20|V711|VI30W|V712|V891w|V972|V819w|V820w|Vi60|V820w|V711|V813s|V801|V819|V975s|V801|V819|V819|V818|V811|V712|V975m|V101w|V961w|V812|V818|V971|V971s|V919|V989|V116w|V102w|V973|Vi40)\\b[\\s]+|V10 \\b4G\\b",
            "JaytechTablet": "TPC-PA762",
            "BlaupunktTablet": "Endeavour 800NG|Endeavour 1010",
            "DigmaTablet": "\\b(iDx10|iDx9|iDx8|iDx7|iDxD7|iDxD8|iDsQ8|iDsQ7|iDsQ8|iDsD10|iDnD7|3TS804H|iDsQ11|iDj7|iDs10)\\b",
            "EvolioTablet": "ARIA_Mini_wifi|Aria[ _]Mini|Evolio X10|Evolio X7|Evolio X8|\\bEvotab\\b|\\bNeura\\b",
            "LavaTablet": "QPAD E704|\\bIvoryS\\b|E-TAB IVORY|\\bE-TAB\\b",
            "AocTablet": "MW0811|MW0812|MW0922|MTK8382|MW1031|MW0831|MW0821|MW0931|MW0712",
            "MpmanTablet": "MP11 OCTA|MP10 OCTA|MPQC1114|MPQC1004|MPQC994|MPQC974|MPQC973|MPQC804|MPQC784|MPQC780|\\bMPG7\\b|MPDCG75|MPDCG71|MPDC1006|MP101DC|MPDC9000|MPDC905|MPDC706HD|MPDC706|MPDC705|MPDC110|MPDC100|MPDC99|MPDC97|MPDC88|MPDC8|MPDC77|MP709|MID701|MID711|MID170|MPDC703|MPQC1010",
            "CelkonTablet": "CT695|CT888|CT[\\s]?910|CT7 Tab|CT9 Tab|CT3 Tab|CT2 Tab|CT1 Tab|C820|C720|\\bCT-1\\b",
            "WolderTablet": "miTab \\b(DIAMOND|SPACE|BROOKLYN|NEO|FLY|MANHATTAN|FUNK|EVOLUTION|SKY|GOCAR|IRON|GENIUS|POP|MINT|EPSILON|BROADWAY|JUMP|HOP|LEGEND|NEW AGE|LINE|ADVANCE|FEEL|FOLLOW|LIKE|LINK|LIVE|THINK|FREEDOM|CHICAGO|CLEVELAND|BALTIMORE-GH|IOWA|BOSTON|SEATTLE|PHOENIX|DALLAS|IN 101|MasterChef)\\b",
            "MediacomTablet": "M-MPI10C3G|M-SP10EG|M-SP10EGP|M-SP10HXAH|M-SP7HXAH|M-SP10HXBH|M-SP8HXAH|M-SP8MXA",
            "MiTablet": "\\bMI PAD\\b|\\bHM NOTE 1W\\b",
            "NibiruTablet": "Nibiru M1|Nibiru Jupiter One",
            "NexoTablet": "NEXO NOVA|NEXO 10|NEXO AVIO|NEXO FREE|NEXO GO|NEXO EVO|NEXO 3G|NEXO SMART|NEXO KIDDO|NEXO MOBI",
            "LeaderTablet": "TBLT10Q|TBLT10I|TBL-10WDKB|TBL-10WDKBO2013|TBL-W230V2|TBL-W450|TBL-W500|SV572|TBLT7I|TBA-AC7-8G|TBLT79|TBL-8W16|TBL-10W32|TBL-10WKB|TBL-W100",
            "UbislateTablet": "UbiSlate[\\s]?7C",
            "PocketBookTablet": "Pocketbook",
            "KocasoTablet": "\\b(TB-1207)\\b",
            "HisenseTablet": "\\b(F5281|E2371)\\b",
            "Hudl": "Hudl HT7S3|Hudl 2",
            "TelstraTablet": "T-Hub2",
            "GenericTablet": "Android.*\\b97D\\b|Tablet(?!.*PC)|BNTV250A|MID-WCDMA|LogicPD Zoom2|\\bA7EB\\b|CatNova8|A1_07|CT704|CT1002|\\bM721\\b|rk30sdk|\\bEVOTAB\\b|M758A|ET904|ALUMIUM10|Smartfren Tab|Endeavour 1010|Tablet-PC-4|Tagi Tab|\\bM6pro\\b|CT1020W|arc 10HD|\\bTP750\\b|\\bQTAQZ3\\b|WVT101|TM1088|KT107"
          },
          "oss": {
            "AndroidOS": "Android",
            "BlackBerryOS": "blackberry|\\bBB10\\b|rim tablet os",
            "PalmOS": "PalmOS|avantgo|blazer|elaine|hiptop|palm|plucker|xiino",
            "SymbianOS": "Symbian|SymbOS|Series60|Series40|SYB-[0-9]+|\\bS60\\b",
            "WindowsMobileOS": "Windows CE.*(PPC|Smartphone|Mobile|[0-9]{3}x[0-9]{3})|Windows Mobile|Windows Phone [0-9.]+|WCE;",
            "WindowsPhoneOS": "Windows Phone 10.0|Windows Phone 8.1|Windows Phone 8.0|Windows Phone OS|XBLWP7|ZuneWP7|Windows NT 6.[23]; ARM;",
            "iOS": "\\biPhone.*Mobile|\\biPod|\\biPad|AppleCoreMedia",
            "iPadOS": "CPU OS 13",
            "MeeGoOS": "MeeGo",
            "MaemoOS": "Maemo",
            "JavaOS": "J2ME\/|\\bMIDP\\b|\\bCLDC\\b",
            "webOS": "webOS|hpwOS",
            "badaOS": "\\bBada\\b",
            "BREWOS": "BREW"
          },
          "uas": {
            "Chrome": "\\bCrMo\\b|CriOS|Android.*Chrome\/[.0-9]* (Mobile)?",
            "Dolfin": "\\bDolfin\\b",
            "Opera": "Opera.*Mini|Opera.*Mobi|Android.*Opera|Mobile.*OPR\/[0-9.]+$|Coast\/[0-9.]+",
            "Skyfire": "Skyfire",
            "Edge": "Mobile Safari\/[.0-9]* Edge",
            "IE": "IEMobile|MSIEMobile",
            "Firefox": "fennec|firefox.*maemo|(Mobile|Tablet).*Firefox|Firefox.*Mobile|FxiOS",
            "Bolt": "bolt",
            "TeaShark": "teashark",
            "Blazer": "Blazer",
            "Safari": "Version.*Mobile.*Safari|Safari.*Mobile|MobileSafari",
            "WeChat": "\\bMicroMessenger\\b",
            "UCBrowser": "UC.*Browser|UCWEB",
            "baiduboxapp": "baiduboxapp",
            "baidubrowser": "baidubrowser",
            "DiigoBrowser": "DiigoBrowser",
            "Mercury": "\\bMercury\\b",
            "ObigoBrowser": "Obigo",
            "NetFront": "NF-Browser",
            "GenericBrowser": "NokiaBrowser|OviBrowser|OneBrowser|TwonkyBeamBrowser|SEMC.*Browser|FlyFlow|Minimo|NetFront|Novarra-Vision|MQQBrowser|MicroMessenger",
            "PaleMoon": "Android.*PaleMoon|Mobile.*PaleMoon"
          },
          "props": {
            "Mobile": "Mobile\/[VER]",
            "Build": "Build\/[VER]",
            "Version": "Version\/[VER]",
            "VendorID": "VendorID\/[VER]",
            "iPad": "iPad.*CPU[a-z ]+[VER]",
            "iPhone": "iPhone.*CPU[a-z ]+[VER]",
            "iPod": "iPod.*CPU[a-z ]+[VER]",
            "Kindle": "Kindle\/[VER]",
            "Chrome": ["Chrome\/[VER]", "CriOS\/[VER]", "CrMo\/[VER]"],
            "Coast": ["Coast\/[VER]"],
            "Dolfin": "Dolfin\/[VER]",
            "Firefox": ["Firefox\/[VER]", "FxiOS\/[VER]"],
            "Fennec": "Fennec\/[VER]",
            "Edge": "Edge\/[VER]",
            "IE": ["IEMobile\/[VER];", "IEMobile [VER]", "MSIE [VER];", "Trident\/[0-9.]+;.*rv:[VER]"],
            "NetFront": "NetFront\/[VER]",
            "NokiaBrowser": "NokiaBrowser\/[VER]",
            "Opera": [" OPR\/[VER]", "Opera Mini\/[VER]", "Version\/[VER]"],
            "Opera Mini": "Opera Mini\/[VER]",
            "Opera Mobi": "Version\/[VER]",
            "UCBrowser": ["UCWEB[VER]", "UC.*Browser\/[VER]"],
            "MQQBrowser": "MQQBrowser\/[VER]",
            "MicroMessenger": "MicroMessenger\/[VER]",
            "baiduboxapp": "baiduboxapp\/[VER]",
            "baidubrowser": "baidubrowser\/[VER]",
            "SamsungBrowser": "SamsungBrowser\/[VER]",
            "Iron": "Iron\/[VER]",
            "Safari": ["Version\/[VER]", "Safari\/[VER]"],
            "Skyfire": "Skyfire\/[VER]",
            "Tizen": "Tizen\/[VER]",
            "Webkit": "webkit[ \/][VER]",
            "PaleMoon": "PaleMoon\/[VER]",
            "Gecko": "Gecko\/[VER]",
            "Trident": "Trident\/[VER]",
            "Presto": "Presto\/[VER]",
            "Goanna": "Goanna\/[VER]",
            "iOS": " \\bi?OS\\b [VER][ ;]{1}",
            "Android": "Android [VER]",
            "BlackBerry": ["BlackBerry[\\w]+\/[VER]", "BlackBerry.*Version\/[VER]", "Version\/[VER]"],
            "BREW": "BREW [VER]",
            "Java": "Java\/[VER]",
            "Windows Phone OS": ["Windows Phone OS [VER]", "Windows Phone [VER]"],
            "Windows Phone": "Windows Phone [VER]",
            "Windows CE": "Windows CE\/[VER]",
            "Windows NT": "Windows NT [VER]",
            "Symbian": ["SymbianOS\/[VER]", "Symbian\/[VER]"],
            "webOS": ["webOS\/[VER]", "hpwOS\/[VER];"]
          },
          "utils": {
            "Bot": "Googlebot|facebookexternalhit|Google-AMPHTML|s~amp-validator|AdsBot-Google|Google Keyword Suggestion|Facebot|YandexBot|YandexMobileBot|bingbot|ia_archiver|AhrefsBot|Ezooms|GSLFbot|WBSearchBot|Twitterbot|TweetmemeBot|Twikle|PaperLiBot|Wotbox|UnwindFetchor|Exabot|MJ12bot|YandexImages|TurnitinBot|Pingdom|contentkingapp",
            "MobileBot": "Googlebot-Mobile|AdsBot-Google-Mobile|YahooSeeker\/M1A1-R2D2",
            "DesktopMode": "WPDesktop",
            "TV": "SonyDTV|HbbTV",
            "WebKit": "(webkit)[ \/]([\\w.]+)",
            "Console": "\\b(Nintendo|Nintendo WiiU|Nintendo 3DS|Nintendo Switch|PLAYSTATION|Xbox)\\b",
            "Watch": "SM-V700"
          }
        }; // following patterns come from http://detectmobilebrowsers.com/

        impl.detectMobileBrowsers = {
          fullPattern: /(android|bb\d+|meego).+mobile|avantgo|bada\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|iris|kindle|lge |maemo|midp|mmp|mobile.+firefox|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\/|plucker|pocket|psp|series(4|6)0|symbian|treo|up\.(browser|link)|vodafone|wap|windows ce|xda|xiino/i,
          shortPattern: /1207|6310|6590|3gso|4thp|50[1-6]i|770s|802s|a wa|abac|ac(er|oo|s\-)|ai(ko|rn)|al(av|ca|co)|amoi|an(ex|ny|yw)|aptu|ar(ch|go)|as(te|us)|attw|au(di|\-m|r |s )|avan|be(ck|ll|nq)|bi(lb|rd)|bl(ac|az)|br(e|v)w|bumb|bw\-(n|u)|c55\/|capi|ccwa|cdm\-|cell|chtm|cldc|cmd\-|co(mp|nd)|craw|da(it|ll|ng)|dbte|dc\-s|devi|dica|dmob|do(c|p)o|ds(12|\-d)|el(49|ai)|em(l2|ul)|er(ic|k0)|esl8|ez([4-7]0|os|wa|ze)|fetc|fly(\-|_)|g1 u|g560|gene|gf\-5|g\-mo|go(\.w|od)|gr(ad|un)|haie|hcit|hd\-(m|p|t)|hei\-|hi(pt|ta)|hp( i|ip)|hs\-c|ht(c(\-| |_|a|g|p|s|t)|tp)|hu(aw|tc)|i\-(20|go|ma)|i230|iac( |\-|\/)|ibro|idea|ig01|ikom|im1k|inno|ipaq|iris|ja(t|v)a|jbro|jemu|jigs|kddi|keji|kgt( |\/)|klon|kpt |kwc\-|kyo(c|k)|le(no|xi)|lg( g|\/(k|l|u)|50|54|\-[a-w])|libw|lynx|m1\-w|m3ga|m50\/|ma(te|ui|xo)|mc(01|21|ca)|m\-cr|me(rc|ri)|mi(o8|oa|ts)|mmef|mo(01|02|bi|de|do|t(\-| |o|v)|zz)|mt(50|p1|v )|mwbp|mywa|n10[0-2]|n20[2-3]|n30(0|2)|n50(0|2|5)|n7(0(0|1)|10)|ne((c|m)\-|on|tf|wf|wg|wt)|nok(6|i)|nzph|o2im|op(ti|wv)|oran|owg1|p800|pan(a|d|t)|pdxg|pg(13|\-([1-8]|c))|phil|pire|pl(ay|uc)|pn\-2|po(ck|rt|se)|prox|psio|pt\-g|qa\-a|qc(07|12|21|32|60|\-[2-7]|i\-)|qtek|r380|r600|raks|rim9|ro(ve|zo)|s55\/|sa(ge|ma|mm|ms|ny|va)|sc(01|h\-|oo|p\-)|sdk\/|se(c(\-|0|1)|47|mc|nd|ri)|sgh\-|shar|sie(\-|m)|sk\-0|sl(45|id)|sm(al|ar|b3|it|t5)|so(ft|ny)|sp(01|h\-|v\-|v )|sy(01|mb)|t2(18|50)|t6(00|10|18)|ta(gt|lk)|tcl\-|tdg\-|tel(i|m)|tim\-|t\-mo|to(pl|sh)|ts(70|m\-|m3|m5)|tx\-9|up(\.b|g1|si)|utst|v400|v750|veri|vi(rg|te)|vk(40|5[0-3]|\-v)|vm40|voda|vulc|vx(52|53|60|61|70|80|81|83|85|98)|w3c(\-| )|webc|whit|wi(g |nc|nw)|wmlb|wonu|x700|yas\-|your|zeto|zte\-/i,
          tabletPattern: /android|ipad|playbook|silk/i
        };
        var hasOwnProp = Object.prototype.hasOwnProperty,
            isArray;
        impl.FALLBACK_PHONE = 'UnknownPhone';
        impl.FALLBACK_TABLET = 'UnknownTablet';
        impl.FALLBACK_MOBILE = 'UnknownMobile';
        isArray = 'isArray' in Array ? Array.isArray : function (value) {
          return Object.prototype.toString.call(value) === '[object Array]';
        };

        function equalIC(a, b) {
          return a != null && b != null && a.toLowerCase() === b.toLowerCase();
        }

        function containsIC(array, value) {
          var valueLC,
              i,
              len = array.length;

          if (!len || !value) {
            return false;
          }

          valueLC = value.toLowerCase();

          for (i = 0; i < len; ++i) {
            if (valueLC === array[i].toLowerCase()) {
              return true;
            }
          }

          return false;
        }

        function convertPropsToRegExp(object) {
          for (var key in object) {
            if (hasOwnProp.call(object, key)) {
              object[key] = new RegExp(object[key], 'i');
            }
          }
        }

        function prepareUserAgent(userAgent) {
          return (userAgent || '').substr(0, 500); // mitigate vulnerable to ReDoS
        }

        (function init() {
          var key,
              values,
              value,
              i,
              len,
              verPos,
              mobileDetectRules = impl.mobileDetectRules;

          for (key in mobileDetectRules.props) {
            if (hasOwnProp.call(mobileDetectRules.props, key)) {
              values = mobileDetectRules.props[key];

              if (!isArray(values)) {
                values = [values];
              }

              len = values.length;

              for (i = 0; i < len; ++i) {
                value = values[i];
                verPos = value.indexOf('[VER]');

                if (verPos >= 0) {
                  value = value.substring(0, verPos) + '([\\w._\\+]+)' + value.substring(verPos + 5);
                }

                values[i] = new RegExp(value, 'i');
              }

              mobileDetectRules.props[key] = values;
            }
          }

          convertPropsToRegExp(mobileDetectRules.oss);
          convertPropsToRegExp(mobileDetectRules.phones);
          convertPropsToRegExp(mobileDetectRules.tablets);
          convertPropsToRegExp(mobileDetectRules.uas);
          convertPropsToRegExp(mobileDetectRules.utils); // copy some patterns to oss0 which are tested first (see issue#15)

          mobileDetectRules.oss0 = {
            WindowsPhoneOS: mobileDetectRules.oss.WindowsPhoneOS,
            WindowsMobileOS: mobileDetectRules.oss.WindowsMobileOS
          };
        })();
        /**
         * Test userAgent string against a set of rules and find the first matched key.
         * @param {Object} rules (key is String, value is RegExp)
         * @param {String} userAgent the navigator.userAgent (or HTTP-Header 'User-Agent').
         * @returns {String|null} the matched key if found, otherwise <tt>null</tt>
         * @private
         */


        impl.findMatch = function (rules, userAgent) {
          for (var key in rules) {
            if (hasOwnProp.call(rules, key)) {
              if (rules[key].test(userAgent)) {
                return key;
              }
            }
          }

          return null;
        };
        /**
         * Test userAgent string against a set of rules and return an array of matched keys.
         * @param {Object} rules (key is String, value is RegExp)
         * @param {String} userAgent the navigator.userAgent (or HTTP-Header 'User-Agent').
         * @returns {Array} an array of matched keys, may be empty when there is no match, but not <tt>null</tt>
         * @private
         */


        impl.findMatches = function (rules, userAgent) {
          var result = [];

          for (var key in rules) {
            if (hasOwnProp.call(rules, key)) {
              if (rules[key].test(userAgent)) {
                result.push(key);
              }
            }
          }

          return result;
        };
        /**
         * Check the version of the given property in the User-Agent.
         *
         * @param {String} propertyName
         * @param {String} userAgent
         * @return {String} version or <tt>null</tt> if version not found
         * @private
         */


        impl.getVersionStr = function (propertyName, userAgent) {
          var props = impl.mobileDetectRules.props,
              patterns,
              i,
              len,
              match;

          if (hasOwnProp.call(props, propertyName)) {
            patterns = props[propertyName];
            len = patterns.length;

            for (i = 0; i < len; ++i) {
              match = patterns[i].exec(userAgent);

              if (match !== null) {
                return match[1];
              }
            }
          }

          return null;
        };
        /**
         * Check the version of the given property in the User-Agent.
         * Will return a float number. (eg. 2_0 will return 2.0, 4.3.1 will return 4.31)
         *
         * @param {String} propertyName
         * @param {String} userAgent
         * @return {Number} version or <tt>NaN</tt> if version not found
         * @private
         */


        impl.getVersion = function (propertyName, userAgent) {
          var version = impl.getVersionStr(propertyName, userAgent);
          return version ? impl.prepareVersionNo(version) : NaN;
        };
        /**
         * Prepare the version number.
         *
         * @param {String} version
         * @return {Number} the version number as a floating number
         * @private
         */


        impl.prepareVersionNo = function (version) {
          var numbers;
          numbers = version.split(/[a-z._ \/\-]/i);

          if (numbers.length === 1) {
            version = numbers[0];
          }

          if (numbers.length > 1) {
            version = numbers[0] + '.';
            numbers.shift();
            version += numbers.join('');
          }

          return Number(version);
        };

        impl.isMobileFallback = function (userAgent) {
          return impl.detectMobileBrowsers.fullPattern.test(userAgent) || impl.detectMobileBrowsers.shortPattern.test(userAgent.substr(0, 4));
        };

        impl.isTabletFallback = function (userAgent) {
          return impl.detectMobileBrowsers.tabletPattern.test(userAgent);
        };

        impl.prepareDetectionCache = function (cache, userAgent, maxPhoneWidth) {
          if (cache.mobile !== undefined$1) {
            return;
          }

          var phone, tablet, phoneSized; // first check for stronger tablet rules, then phone (see issue#5)

          tablet = impl.findMatch(impl.mobileDetectRules.tablets, userAgent);

          if (tablet) {
            cache.mobile = cache.tablet = tablet;
            cache.phone = null;
            return; // unambiguously identified as tablet
          }

          phone = impl.findMatch(impl.mobileDetectRules.phones, userAgent);

          if (phone) {
            cache.mobile = cache.phone = phone;
            cache.tablet = null;
            return; // unambiguously identified as phone
          } // our rules haven't found a match -> try more general fallback rules


          if (impl.isMobileFallback(userAgent)) {
            phoneSized = MobileDetect.isPhoneSized(maxPhoneWidth);

            if (phoneSized === undefined$1) {
              cache.mobile = impl.FALLBACK_MOBILE;
              cache.tablet = cache.phone = null;
            } else if (phoneSized) {
              cache.mobile = cache.phone = impl.FALLBACK_PHONE;
              cache.tablet = null;
            } else {
              cache.mobile = cache.tablet = impl.FALLBACK_TABLET;
              cache.phone = null;
            }
          } else if (impl.isTabletFallback(userAgent)) {
            cache.mobile = cache.tablet = impl.FALLBACK_TABLET;
            cache.phone = null;
          } else {
            // not mobile at all!
            cache.mobile = cache.tablet = cache.phone = null;
          }
        }; // t is a reference to a MobileDetect instance


        impl.mobileGrade = function (t) {
          // impl note:
          // To keep in sync w/ Mobile_Detect.php easily, the following code is tightly aligned to the PHP version.
          // When changes are made in Mobile_Detect.php, copy this method and replace:
          //     $this-> / t.
          //     self::MOBILE_GRADE_(.) / '$1'
          //     , self::VERSION_TYPE_FLOAT / (nothing)
          //     isIOS() / os('iOS')
          //     [reg] / (nothing)   <-- jsdelivr complaining about unescaped unicode character U+00AE
          var $isMobile = t.mobile() !== null;

          if ( // Apple iOS 3.2-5.1 - Tested on the original iPad (4.3 / 5.0), iPad 2 (4.3), iPad 3 (5.1), original iPhone (3.1), iPhone 3 (3.2), 3GS (4.3), 4 (4.3 / 5.0), and 4S (5.1)
          t.os('iOS') && t.version('iPad') >= 4.3 || t.os('iOS') && t.version('iPhone') >= 3.1 || t.os('iOS') && t.version('iPod') >= 3.1 || // Android 2.1-2.3 - Tested on the HTC Incredible (2.2), original Droid (2.2), HTC Aria (2.1), Google Nexus S (2.3). Functional on 1.5 & 1.6 but performance may be sluggish, tested on Google G1 (1.5)
          // Android 3.1 (Honeycomb)  - Tested on the Samsung Galaxy Tab 10.1 and Motorola XOOM
          // Android 4.0 (ICS)  - Tested on a Galaxy Nexus. Note: transition performance can be poor on upgraded devices
          // Android 4.1 (Jelly Bean)  - Tested on a Galaxy Nexus and Galaxy 7
          t.version('Android') > 2.1 && t.is('Webkit') || // Windows Phone 7-7.5 - Tested on the HTC Surround (7.0) HTC Trophy (7.5), LG-E900 (7.5), Nokia Lumia 800
          t.version('Windows Phone OS') >= 7.0 || // Blackberry 7 - Tested on BlackBerry Torch 9810
          // Blackberry 6.0 - Tested on the Torch 9800 and Style 9670
          t.is('BlackBerry') && t.version('BlackBerry') >= 6.0 || // Blackberry Playbook (1.0-2.0) - Tested on PlayBook
          t.match('Playbook.*Tablet') || // Palm WebOS (1.4-2.0) - Tested on the Palm Pixi (1.4), Pre (1.4), Pre 2 (2.0)
          t.version('webOS') >= 1.4 && t.match('Palm|Pre|Pixi') || // Palm WebOS 3.0  - Tested on HP TouchPad
          t.match('hp.*TouchPad') || // Firefox Mobile (12 Beta) - Tested on Android 2.3 device
          t.is('Firefox') && t.version('Firefox') >= 12 || // Chrome for Android - Tested on Android 4.0, 4.1 device
          t.is('Chrome') && t.is('AndroidOS') && t.version('Android') >= 4.0 || // Skyfire 4.1 - Tested on Android 2.3 device
          t.is('Skyfire') && t.version('Skyfire') >= 4.1 && t.is('AndroidOS') && t.version('Android') >= 2.3 || // Opera Mobile 11.5-12: Tested on Android 2.3
          t.is('Opera') && t.version('Opera Mobi') > 11 && t.is('AndroidOS') || // Meego 1.2 - Tested on Nokia 950 and N9
          t.is('MeeGoOS') || // Tizen (pre-release) - Tested on early hardware
          t.is('Tizen') || // Samsung Bada 2.0 - Tested on a Samsung Wave 3, Dolphin browser
          // @todo: more tests here!
          t.is('Dolfin') && t.version('Bada') >= 2.0 || // UC Browser - Tested on Android 2.3 device
          (t.is('UC Browser') || t.is('Dolfin')) && t.version('Android') >= 2.3 || // Kindle 3 and Fire  - Tested on the built-in WebKit browser for each
          t.match('Kindle Fire') || t.is('Kindle') && t.version('Kindle') >= 3.0 || // Nook Color 1.4.1 - Tested on original Nook Color, not Nook Tablet
          t.is('AndroidOS') && t.is('NookTablet') || // Chrome Desktop 11-21 - Tested on OS X 10.7 and Windows 7
          t.version('Chrome') >= 11 && !$isMobile || // Safari Desktop 4-5 - Tested on OS X 10.7 and Windows 7
          t.version('Safari') >= 5.0 && !$isMobile || // Firefox Desktop 4-13 - Tested on OS X 10.7 and Windows 7
          t.version('Firefox') >= 4.0 && !$isMobile || // Internet Explorer 7-9 - Tested on Windows XP, Vista and 7
          t.version('MSIE') >= 7.0 && !$isMobile || // Opera Desktop 10-12 - Tested on OS X 10.7 and Windows 7
          // @reference: http://my.opera.com/community/openweb/idopera/
          t.version('Opera') >= 10 && !$isMobile) {
            return 'A';
          }

          if (t.os('iOS') && t.version('iPad') < 4.3 || t.os('iOS') && t.version('iPhone') < 3.1 || t.os('iOS') && t.version('iPod') < 3.1 || // Blackberry 5.0: Tested on the Storm 2 9550, Bold 9770
          t.is('Blackberry') && t.version('BlackBerry') >= 5 && t.version('BlackBerry') < 6 || //Opera Mini (5.0-6.5) - Tested on iOS 3.2/4.3 and Android 2.3
          t.version('Opera Mini') >= 5.0 && t.version('Opera Mini') <= 6.5 && (t.version('Android') >= 2.3 || t.is('iOS')) || // Nokia Symbian^3 - Tested on Nokia N8 (Symbian^3), C7 (Symbian^3), also works on N97 (Symbian^1)
          t.match('NokiaN8|NokiaC7|N97.*Series60|Symbian/3') || // @todo: report this (tested on Nokia N71)
          t.version('Opera Mobi') >= 11 && t.is('SymbianOS')) {
            return 'B';
          }

          if ( // Blackberry 4.x - Tested on the Curve 8330
          t.version('BlackBerry') < 5.0 || // Windows Mobile - Tested on the HTC Leo (WinMo 5.2)
          t.match('MSIEMobile|Windows CE.*Mobile') || t.version('Windows Mobile') <= 5.2) {
            return 'C';
          } //All older smartphone platforms and featurephones - Any device that doesn't support media queries
          //will receive the basic, C grade experience.


          return 'C';
        };

        impl.detectOS = function (ua) {
          return impl.findMatch(impl.mobileDetectRules.oss0, ua) || impl.findMatch(impl.mobileDetectRules.oss, ua);
        };

        impl.getDeviceSmallerSide = function () {
          return window.screen.width < window.screen.height ? window.screen.width : window.screen.height;
        };
        /**
         * Constructor for MobileDetect object.
         * <br>
         * Such an object will keep a reference to the given user-agent string and cache most of the detect queries.<br>
         * <div style="background-color: #d9edf7; border: 1px solid #bce8f1; color: #3a87ad; padding: 14px; border-radius: 2px; margin-top: 20px">
         *     <strong>Find information how to download and install:</strong>
         *     <a href="https://github.com/hgoebl/mobile-detect.js/">github.com/hgoebl/mobile-detect.js/</a>
         * </div>
         *
         * @example <pre>
         *     var md = new MobileDetect(window.navigator.userAgent);
         *     if (md.mobile()) {
         *         location.href = (md.mobileGrade() === 'A') ? '/mobile/' : '/lynx/';
         *     }
         * </pre>
         *
         * @param {string} userAgent typically taken from window.navigator.userAgent or http_header['User-Agent']
         * @param {number} [maxPhoneWidth=600] <strong>only for browsers</strong> specify a value for the maximum
         *        width of smallest device side (in logical "CSS" pixels) until a device detected as mobile will be handled
         *        as phone.
         *        This is only used in cases where the device cannot be classified as phone or tablet.<br>
         *        See <a href="http://developer.android.com/guide/practices/screens_support.html">Declaring Tablet Layouts
         *        for Android</a>.<br>
         *        If you provide a value < 0, then this "fuzzy" check is disabled.
         * @constructor
         * @global
         */


        function MobileDetect(userAgent, maxPhoneWidth) {
          this.ua = prepareUserAgent(userAgent);
          this._cache = {}; //600dp is typical 7" tablet minimum width

          this.maxPhoneWidth = maxPhoneWidth || 600;
        }

        MobileDetect.prototype = {
          constructor: MobileDetect,

          /**
           * Returns the detected phone or tablet type or <tt>null</tt> if it is not a mobile device.
           * <br>
           * For a list of possible return values see {@link MobileDetect#phone} and {@link MobileDetect#tablet}.<br>
           * <br>
           * If the device is not detected by the regular expressions from Mobile-Detect, a test is made against
           * the patterns of <a href="http://detectmobilebrowsers.com/">detectmobilebrowsers.com</a>. If this test
           * is positive, a value of <code>UnknownPhone</code>, <code>UnknownTablet</code> or
           * <code>UnknownMobile</code> is returned.<br>
           * When used in browser, the decision whether phone or tablet is made based on <code>screen.width/height</code>.<br>
           * <br>
           * When used server-side (node.js), there is no way to tell the difference between <code>UnknownTablet</code>
           * and <code>UnknownMobile</code>, so you will get <code>UnknownMobile</code> here.<br>
           * Be aware that since v1.0.0 in this special case you will get <code>UnknownMobile</code> only for:
           * {@link MobileDetect#mobile}, not for {@link MobileDetect#phone} and {@link MobileDetect#tablet}.
           * In versions before v1.0.0 all 3 methods returned <code>UnknownMobile</code> which was tedious to use.
           * <br>
           * In most cases you will use the return value just as a boolean.
           *
           * @returns {String} the key for the phone family or tablet family, e.g. "Nexus".
           * @function MobileDetect#mobile
           */
          mobile: function mobile() {
            impl.prepareDetectionCache(this._cache, this.ua, this.maxPhoneWidth);
            return this._cache.mobile;
          },

          /**
           * Returns the detected phone type/family string or <tt>null</tt>.
           * <br>
           * The returned tablet (family or producer) is one of following keys:<br>
           * <br><tt>iPhone, BlackBerry, HTC, Nexus, Dell, Motorola, Samsung, LG, Sony, Asus,
           * NokiaLumia, Micromax, Palm, Vertu, Pantech, Fly, Wiko, iMobile, SimValley,
           * Wolfgang, Alcatel, Nintendo, Amoi, INQ, OnePlus, GenericPhone</tt><br>
           * <br>
           * If the device is not detected by the regular expressions from Mobile-Detect, a test is made against
           * the patterns of <a href="http://detectmobilebrowsers.com/">detectmobilebrowsers.com</a>. If this test
           * is positive, a value of <code>UnknownPhone</code> or <code>UnknownMobile</code> is returned.<br>
           * When used in browser, the decision whether phone or tablet is made based on <code>screen.width/height</code>.<br>
           * <br>
           * When used server-side (node.js), there is no way to tell the difference between <code>UnknownTablet</code>
           * and <code>UnknownMobile</code>, so you will get <code>null</code> here, while {@link MobileDetect#mobile}
           * will return <code>UnknownMobile</code>.<br>
           * Be aware that since v1.0.0 in this special case you will get <code>UnknownMobile</code> only for:
           * {@link MobileDetect#mobile}, not for {@link MobileDetect#phone} and {@link MobileDetect#tablet}.
           * In versions before v1.0.0 all 3 methods returned <code>UnknownMobile</code> which was tedious to use.
           * <br>
           * In most cases you will use the return value just as a boolean.
           *
           * @returns {String} the key of the phone family or producer, e.g. "iPhone"
           * @function MobileDetect#phone
           */
          phone: function phone() {
            impl.prepareDetectionCache(this._cache, this.ua, this.maxPhoneWidth);
            return this._cache.phone;
          },

          /**
           * Returns the detected tablet type/family string or <tt>null</tt>.
           * <br>
           * The returned tablet (family or producer) is one of following keys:<br>
           * <br><tt>iPad, NexusTablet, GoogleTablet, SamsungTablet, Kindle, SurfaceTablet,
           * HPTablet, AsusTablet, BlackBerryTablet, HTCtablet, MotorolaTablet, NookTablet,
           * AcerTablet, ToshibaTablet, LGTablet, FujitsuTablet, PrestigioTablet,
           * LenovoTablet, DellTablet, YarvikTablet, MedionTablet, ArnovaTablet,
           * IntensoTablet, IRUTablet, MegafonTablet, EbodaTablet, AllViewTablet,
           * ArchosTablet, AinolTablet, NokiaLumiaTablet, SonyTablet, PhilipsTablet,
           * CubeTablet, CobyTablet, MIDTablet, MSITablet, SMiTTablet, RockChipTablet,
           * FlyTablet, bqTablet, HuaweiTablet, NecTablet, PantechTablet, BronchoTablet,
           * VersusTablet, ZyncTablet, PositivoTablet, NabiTablet, KoboTablet, DanewTablet,
           * TexetTablet, PlaystationTablet, TrekstorTablet, PyleAudioTablet, AdvanTablet,
           * DanyTechTablet, GalapadTablet, MicromaxTablet, KarbonnTablet, AllFineTablet,
           * PROSCANTablet, YONESTablet, ChangJiaTablet, GUTablet, PointOfViewTablet,
           * OvermaxTablet, HCLTablet, DPSTablet, VistureTablet, CrestaTablet,
           * MediatekTablet, ConcordeTablet, GoCleverTablet, ModecomTablet, VoninoTablet,
           * ECSTablet, StorexTablet, VodafoneTablet, EssentielBTablet, RossMoorTablet,
           * iMobileTablet, TolinoTablet, AudioSonicTablet, AMPETablet, SkkTablet,
           * TecnoTablet, JXDTablet, iJoyTablet, FX2Tablet, XoroTablet, ViewsonicTablet,
           * VerizonTablet, OdysTablet, CaptivaTablet, IconbitTablet, TeclastTablet,
           * OndaTablet, JaytechTablet, BlaupunktTablet, DigmaTablet, EvolioTablet,
           * LavaTablet, AocTablet, MpmanTablet, CelkonTablet, WolderTablet, MediacomTablet,
           * MiTablet, NibiruTablet, NexoTablet, LeaderTablet, UbislateTablet,
           * PocketBookTablet, KocasoTablet, HisenseTablet, Hudl, TelstraTablet,
           * GenericTablet</tt><br>
           * <br>
           * If the device is not detected by the regular expressions from Mobile-Detect, a test is made against
           * the patterns of <a href="http://detectmobilebrowsers.com/">detectmobilebrowsers.com</a>. If this test
           * is positive, a value of <code>UnknownTablet</code> or <code>UnknownMobile</code> is returned.<br>
           * When used in browser, the decision whether phone or tablet is made based on <code>screen.width/height</code>.<br>
           * <br>
           * When used server-side (node.js), there is no way to tell the difference between <code>UnknownTablet</code>
           * and <code>UnknownMobile</code>, so you will get <code>null</code> here, while {@link MobileDetect#mobile}
           * will return <code>UnknownMobile</code>.<br>
           * Be aware that since v1.0.0 in this special case you will get <code>UnknownMobile</code> only for:
           * {@link MobileDetect#mobile}, not for {@link MobileDetect#phone} and {@link MobileDetect#tablet}.
           * In versions before v1.0.0 all 3 methods returned <code>UnknownMobile</code> which was tedious to use.
           * <br>
           * In most cases you will use the return value just as a boolean.
           *
           * @returns {String} the key of the tablet family or producer, e.g. "SamsungTablet"
           * @function MobileDetect#tablet
           */
          tablet: function tablet() {
            impl.prepareDetectionCache(this._cache, this.ua, this.maxPhoneWidth);
            return this._cache.tablet;
          },

          /**
           * Returns the (first) detected user-agent string or <tt>null</tt>.
           * <br>
           * The returned user-agent is one of following keys:<br>
           * <br><tt>Chrome, Dolfin, Opera, Skyfire, Edge, IE, Firefox, Bolt, TeaShark, Blazer,
           * Safari, WeChat, UCBrowser, baiduboxapp, baidubrowser, DiigoBrowser, Mercury,
           * ObigoBrowser, NetFront, GenericBrowser, PaleMoon</tt><br>
           * <br>
           * In most cases calling {@link MobileDetect#userAgent} will be sufficient. But there are rare
           * cases where a mobile device pretends to be more than one particular browser. You can get the
           * list of all matches with {@link MobileDetect#userAgents} or check for a particular value by
           * providing one of the defined keys as first argument to {@link MobileDetect#is}.
           *
           * @returns {String} the key for the detected user-agent or <tt>null</tt>
           * @function MobileDetect#userAgent
           */
          userAgent: function userAgent() {
            if (this._cache.userAgent === undefined$1) {
              this._cache.userAgent = impl.findMatch(impl.mobileDetectRules.uas, this.ua);
            }

            return this._cache.userAgent;
          },

          /**
           * Returns all detected user-agent strings.
           * <br>
           * The array is empty or contains one or more of following keys:<br>
           * <br><tt>Chrome, Dolfin, Opera, Skyfire, Edge, IE, Firefox, Bolt, TeaShark, Blazer,
           * Safari, WeChat, UCBrowser, baiduboxapp, baidubrowser, DiigoBrowser, Mercury,
           * ObigoBrowser, NetFront, GenericBrowser, PaleMoon</tt><br>
           * <br>
           * In most cases calling {@link MobileDetect#userAgent} will be sufficient. But there are rare
           * cases where a mobile device pretends to be more than one particular browser. You can get the
           * list of all matches with {@link MobileDetect#userAgents} or check for a particular value by
           * providing one of the defined keys as first argument to {@link MobileDetect#is}.
           *
           * @returns {Array} the array of detected user-agent keys or <tt>[]</tt>
           * @function MobileDetect#userAgents
           */
          userAgents: function userAgents() {
            if (this._cache.userAgents === undefined$1) {
              this._cache.userAgents = impl.findMatches(impl.mobileDetectRules.uas, this.ua);
            }

            return this._cache.userAgents;
          },

          /**
           * Returns the detected operating system string or <tt>null</tt>.
           * <br>
           * The operating system is one of following keys:<br>
           * <br><tt>AndroidOS, BlackBerryOS, PalmOS, SymbianOS, WindowsMobileOS, WindowsPhoneOS,
           * iOS, iPadOS, MeeGoOS, MaemoOS, JavaOS, webOS, badaOS, BREWOS</tt><br>
           *
           * @returns {String} the key for the detected operating system.
           * @function MobileDetect#os
           */
          os: function os() {
            if (this._cache.os === undefined$1) {
              this._cache.os = impl.detectOS(this.ua);
            }

            return this._cache.os;
          },

          /**
           * Get the version (as Number) of the given property in the User-Agent.
           * <br>
           * Will return a float number. (eg. 2_0 will return 2.0, 4.3.1 will return 4.31)
           *
           * @param {String} key a key defining a thing which has a version.<br>
           *        You can use one of following keys:<br>
           * <br><tt>Mobile, Build, Version, VendorID, iPad, iPhone, iPod, Kindle, Chrome, Coast,
           * Dolfin, Firefox, Fennec, Edge, IE, NetFront, NokiaBrowser, Opera, Opera Mini,
           * Opera Mobi, UCBrowser, MQQBrowser, MicroMessenger, baiduboxapp, baidubrowser,
           * SamsungBrowser, Iron, Safari, Skyfire, Tizen, Webkit, PaleMoon, Gecko, Trident,
           * Presto, Goanna, iOS, Android, BlackBerry, BREW, Java, Windows Phone OS, Windows
           * Phone, Windows CE, Windows NT, Symbian, webOS</tt><br>
           *
           * @returns {Number} the version as float or <tt>NaN</tt> if User-Agent doesn't contain this version.
           *          Be careful when comparing this value with '==' operator!
           * @function MobileDetect#version
           */
          version: function version(key) {
            return impl.getVersion(key, this.ua);
          },

          /**
           * Get the version (as String) of the given property in the User-Agent.
           * <br>
           *
           * @param {String} key a key defining a thing which has a version.<br>
           *        You can use one of following keys:<br>
           * <br><tt>Mobile, Build, Version, VendorID, iPad, iPhone, iPod, Kindle, Chrome, Coast,
           * Dolfin, Firefox, Fennec, Edge, IE, NetFront, NokiaBrowser, Opera, Opera Mini,
           * Opera Mobi, UCBrowser, MQQBrowser, MicroMessenger, baiduboxapp, baidubrowser,
           * SamsungBrowser, Iron, Safari, Skyfire, Tizen, Webkit, PaleMoon, Gecko, Trident,
           * Presto, Goanna, iOS, Android, BlackBerry, BREW, Java, Windows Phone OS, Windows
           * Phone, Windows CE, Windows NT, Symbian, webOS</tt><br>
           *
           * @returns {String} the "raw" version as String or <tt>null</tt> if User-Agent doesn't contain this version.
           *
           * @function MobileDetect#versionStr
           */
          versionStr: function versionStr(key) {
            return impl.getVersionStr(key, this.ua);
          },

          /**
           * Global test key against userAgent, os, phone, tablet and some other properties of userAgent string.
           *
           * @param {String} key the key (case-insensitive) of a userAgent, an operating system, phone or
           *        tablet family.<br>
           *        For a complete list of possible values, see {@link MobileDetect#userAgent},
           *        {@link MobileDetect#os}, {@link MobileDetect#phone}, {@link MobileDetect#tablet}.<br>
           *        Additionally you have following keys:<br>
           * <br><tt>Bot, MobileBot, DesktopMode, TV, WebKit, Console, Watch</tt><br>
           *
           * @returns {boolean} <tt>true</tt> when the given key is one of the defined keys of userAgent, os, phone,
           *                    tablet or one of the listed additional keys, otherwise <tt>false</tt>
           * @function MobileDetect#is
           */
          is: function is(key) {
            return containsIC(this.userAgents(), key) || equalIC(key, this.os()) || equalIC(key, this.phone()) || equalIC(key, this.tablet()) || containsIC(impl.findMatches(impl.mobileDetectRules.utils, this.ua), key);
          },

          /**
           * Do a quick test against navigator::userAgent.
           *
           * @param {String|RegExp} pattern the pattern, either as String or RegExp
           *                        (a string will be converted to a case-insensitive RegExp).
           * @returns {boolean} <tt>true</tt> when the pattern matches, otherwise <tt>false</tt>
           * @function MobileDetect#match
           */
          match: function match(pattern) {
            if (!(pattern instanceof RegExp)) {
              pattern = new RegExp(pattern, 'i');
            }

            return pattern.test(this.ua);
          },

          /**
           * Checks whether the mobile device can be considered as phone regarding <code>screen.width</code>.
           * <br>
           * Obviously this method makes sense in browser environments only (not for Node.js)!
           * @param {number} [maxPhoneWidth] the maximum logical pixels (aka. CSS-pixels) to be considered as phone.<br>
           *        The argument is optional and if not present or falsy, the value of the constructor is taken.
           * @returns {boolean|undefined} <code>undefined</code> if screen size wasn't detectable, else <code>true</code>
           *          when screen.width is less or equal to maxPhoneWidth, otherwise <code>false</code>.<br>
           *          Will always return <code>undefined</code> server-side.
           */
          isPhoneSized: function isPhoneSized(maxPhoneWidth) {
            return MobileDetect.isPhoneSized(maxPhoneWidth || this.maxPhoneWidth);
          },

          /**
           * Returns the mobile grade ('A', 'B', 'C').
           *
           * @returns {String} one of the mobile grades ('A', 'B', 'C').
           * @function MobileDetect#mobileGrade
           */
          mobileGrade: function mobileGrade() {
            if (this._cache.grade === undefined$1) {
              this._cache.grade = impl.mobileGrade(this);
            }

            return this._cache.grade;
          }
        }; // environment-dependent

        if (typeof window !== 'undefined' && window.screen) {
          MobileDetect.isPhoneSized = function (maxPhoneWidth) {
            return maxPhoneWidth < 0 ? undefined$1 : impl.getDeviceSmallerSide() <= maxPhoneWidth;
          };
        } else {
          MobileDetect.isPhoneSized = function () {};
        } // should not be replaced by a completely new object - just overwrite existing methods


        MobileDetect._impl = impl;
        MobileDetect.version = '1.4.4 2019-09-21';
        return MobileDetect;
      }); // end of call of define()
    })(function (undefined$1) {
      if ( module.exports) {
        return function (factory) {
          module.exports = factory();
        };
      } else if (typeof undefined$1 === 'function' && undefined$1.amd) {
        return undefined$1;
      } else if (typeof window !== 'undefined') {
        return function (factory) {
          window.MobileDetect = factory();
        };
      } else {
        // please file a bug if you get this error!
        throw new Error('unknown environment');
      }
    }());
  });

  function empty$1() {}

  var SelectorButtons = /*#__PURE__*/function () {
    function SelectorButtons(name) {
      var onOn = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : empty$1;
      var onOff = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : empty$1;

      _classCallCheck(this, SelectorButtons);

      this.container = document.getElementById(name);
      this.onOn = onOn;
      this.onOff = onOff;
      this.array = [];
      this.selectedIndex = -1;
      this._onClick = this._onClick.bind(this);
    }

    _createClass(SelectorButtons, [{
      key: "add",
      value: function add(name) {
        var index = this.array.length;
        var button = document.createElement('div');
        button.classList.add('selector-button');
        button.innerHTML = name.replace('_', ' ');
        button.setAttribute('data-index', index);
        button.setAttribute('data-sound', name);
        this.container.appendChild(button);
        this.array.push(button);
      }
    }, {
      key: "enable",
      value: function enable(index) {
        if (index === undefined) {
          var _iterator = _createForOfIteratorHelper(this.array),
              _step;

          try {
            for (_iterator.s(); !(_step = _iterator.n()).done;) {
              var button = _step.value;
              button.classList.add('enabled');
              button.addEventListener('click', this._onClick);
            }
          } catch (err) {
            _iterator.e(err);
          } finally {
            _iterator.f();
          }
        } else {
          var _button = this.array[index];

          _button.classList.add('enabled');

          _button.addEventListener('click', this._onClick);
        }
      }
    }, {
      key: "disable",
      value: function disable(index) {
        if (index === undefined) {
          var _iterator2 = _createForOfIteratorHelper(this.array),
              _step2;

          try {
            for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
              var button = _step2.value;
              button.classList.remove('enabled');
              button.removeEventListener('click', this._onClick);
            }
          } catch (err) {
            _iterator2.e(err);
          } finally {
            _iterator2.f();
          }
        } else {
          var _button2 = this.array[index];

          _button2.classList.remove('enabled');

          _button2.removeEventListener('click', this._onClick);
        }
      }
    }, {
      key: "select",
      value: function select(index) {
        if (index === undefined) {
          var _iterator3 = _createForOfIteratorHelper(this.array),
              _step3;

          try {
            for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {
              var button = _step3.value;
              button.classList.add('selected');
            }
          } catch (err) {
            _iterator3.e(err);
          } finally {
            _iterator3.f();
          }
        } else {
          var _button3 = this.array[index];

          _button3.classList.add('selected');
        }
      }
    }, {
      key: "deselect",
      value: function deselect(index) {
        if (index === undefined) {
          var _iterator4 = _createForOfIteratorHelper(this.array),
              _step4;

          try {
            for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {
              var button = _step4.value;
              button.classList.remove('selected');
            }
          } catch (err) {
            _iterator4.e(err);
          } finally {
            _iterator4.f();
          }
        } else {
          var _button4 = this.array[index];

          _button4.classList.remove('selected');
        }
      }
    }, {
      key: "_onClick",
      value: function _onClick(e) {
        var button = e.target;
        var index = parseInt(button.dataset.index);
        this.deselect();

        if (index === this.selectedIndex) {
          this.selectedIndex = -1;
          this.onOff(index);
        } else {
          this.selectedIndex = index;
          this.select(index);
          this.onOn(index);
        }
      }
    }]);

    return SelectorButtons;
  }();

  var audioContext = audio.audioContext;

  var QuadSynth = /*#__PURE__*/function () {
    function QuadSynth() {
      _classCallCheck(this, QuadSynth);

      this._oscs = null;
      this._gain = null;
      this._amp = 1;
      this.fadeTime = 0.1;
    }

    _createClass(QuadSynth, [{
      key: "start",
      value: function start(freqs) {
        var amp = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this._amp;

        if (this._oscs === null) {
          this.stop();
          var time = audioContext.currentTime;
          var gain = audioContext.createGain();
          gain.connect(audioContext.destination);
          gain.gain.value = 0;
          gain.gain.setValueAtTime(0, time);
          gain.gain.linearRampToValueAtTime(amp, time + this.fadeTime);
          this._oscs = [];

          var _iterator = _createForOfIteratorHelper(freqs),
              _step;

          try {
            for (_iterator.s(); !(_step = _iterator.n()).done;) {
              var freq = _step.value;
              var osc = audioContext.createOscillator();
              osc.connect(gain);
              osc.type = 'sine';
              osc.frequency.value = freq;
              osc.start(time);

              this._oscs.push(osc);
            }
          } catch (err) {
            _iterator.e(err);
          } finally {
            _iterator.f();
          }

          this._gain = gain;
          this._amp = amp;
        }
      }
    }, {
      key: "stop",
      value: function stop() {
        if (this._oscs !== null) {
          var time = audioContext.currentTime;

          this._gain.gain.setValueAtTime(this._amp, time);

          this._gain.gain.linearRampToValueAtTime(0, time + this.fadeTime);

          var _iterator2 = _createForOfIteratorHelper(this._oscs),
              _step2;

          try {
            for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
              var osc = _step2.value;
              osc.stop(time + this.fadeTime);
            }
          } catch (err) {
            _iterator2.e(err);
          } finally {
            _iterator2.f();
          }

          this._oscs = null;
          this._gain = null;
        }
      }
    }, {
      key: "gain",
      set: function set(value) {
        var gain = this._gain;

        if (gain) {
          var time = audioContext.currentTime;
          gain.gain.setValueAtTime(this._amp, time);
          gain.gain.linearRampToValueAtTime(value, time + this.fadeTime);
        }

        this._amp = value;
      }
    }]);

    return QuadSynth;
  }();

  var audioContext$1 = audio.audioContext;

  var QuadSynth$1 = /*#__PURE__*/function () {
    function QuadSynth() {
      _classCallCheck(this, QuadSynth);

      this._oscs = null;
      this._mods = null;
      this._lfos = null;
      this._gain = null;
      this._amp = 1;
      this.fadeTime = 0.1;
    }

    _createClass(QuadSynth, [{
      key: "start",
      value: function start(freqs) {
        var amp = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this._amp;

        if (this._oscs === null) {
          this.stop();
          var time = audioContext$1.currentTime;
          var gain = audioContext$1.createGain();
          gain.connect(audioContext$1.destination);
          gain.gain.value = 0;
          gain.gain.setValueAtTime(0, time);
          gain.gain.linearRampToValueAtTime(amp, time + this.fadeTime);
          this._oscs = [];
          this._mods = [];
          this._lfos = [];

          var _iterator = _createForOfIteratorHelper(freqs),
              _step;

          try {
            for (_iterator.s(); !(_step = _iterator.n()).done;) {
              var freq = _step.value;
              var mod = audioContext$1.createGain();
              mod.connect(gain);
              mod.gain.value = 0;
              var lfo = audioContext$1.createOscillator();
              lfo.connect(mod.gain);
              lfo.type = 'sine';
              lfo.frequency.value = 0.25 + 0.25 * Math.random();
              lfo.start(time);
              var osc = audioContext$1.createOscillator();
              osc.connect(mod);
              osc.type = 'sine';
              osc.frequency.value = freq;
              osc.start(time);

              this._mods.push(mod);

              this._lfos.push(lfo);

              this._oscs.push(osc);
            }
          } catch (err) {
            _iterator.e(err);
          } finally {
            _iterator.f();
          }

          this._gain = gain;
          this._amp = amp;
        }
      }
    }, {
      key: "stop",
      value: function stop() {
        if (this._oscs !== null) {
          var time = audioContext$1.currentTime;

          this._gain.gain.setValueAtTime(this._amp, time);

          this._gain.gain.linearRampToValueAtTime(0, time + this.fadeTime);

          var _iterator2 = _createForOfIteratorHelper(this._lfos),
              _step2;

          try {
            for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
              var lfo = _step2.value;
              lfo.stop(time + this.fadeTime);
            }
          } catch (err) {
            _iterator2.e(err);
          } finally {
            _iterator2.f();
          }

          var _iterator3 = _createForOfIteratorHelper(this._oscs),
              _step3;

          try {
            for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {
              var osc = _step3.value;
              osc.stop(time + this.fadeTime);
            }
          } catch (err) {
            _iterator3.e(err);
          } finally {
            _iterator3.f();
          }

          this._mods = null;
          this._lfos = null;
          this._oscs = null;
          this._gain = null;
        }
      }
    }, {
      key: "gain",
      set: function set(value) {
        var gain = this._gain;

        if (gain) {
          var time = audioContext$1.currentTime;
          gain.gain.setValueAtTime(this._amp, time);
          gain.gain.linearRampToValueAtTime(value, time + this.fadeTime);
        }

        this._amp = value;
      }
    }]);

    return QuadSynth;
  }();

  var audioContext$2 = audio.audioContext;

  function powerToDecibel(val) {
    return 4.3429448190325175 * Math.log(val); // 10 * log10(val)
  }

  function decibelToPower(val) {
    return Math.exp(0.23025850929940458 * val); // pow(10, val / 10)
  }
  var freqTolerance = 4;
  var levelThreshold = -3;
  var lpB1 = 0.666;
  var lpA = 0.333;

  var SpectrumAnalyser = /*#__PURE__*/function () {
    function SpectrumAnalyser(fftSize, freqs) {
      var period = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;
      var callback = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;

      _classCallCheck(this, SpectrumAnalyser);

      this.analyser = audioContext$2.createAnalyser(fftSize);
      this.analyser.smoothingTimeConstant = 0;
      var deltaFreq = audioContext$2.sampleRate / fftSize;
      this.deltaFreq = deltaFreq;
      var numBins = this.analyser.frequencyBinCount;
      this.array = new Float32Array(numBins);
      this.startBin = Math.max(2, Math.floor(freqs[0] / deltaFreq));
      this.endBin = Math.min(numBins - 2, Math.ceil(freqs[freqs.length - 1] / deltaFreq));
      this.freqs = freqs;
      this.peaks = [];

      for (var i = 0; i < freqs.length; i++) {
        this.peaks[i] = {
          bin: freqs[i] / deltaFreq,
          freq: freqs[i],
          level: -120
        };
      }

      this.period = period;
      this.callback = callback;
      this.timeout = null;
      this.input = this.analyser;
      this.analyse = this.analyse.bind(this);
    }

    _createClass(SpectrumAnalyser, [{
      key: "analyse",
      value: function analyse() {
        var bins = this.array;
        var startBin = this.startBin;
        var endBin = this.endBin;
        var numBins = endBin - startBin;
        var freqs = this.freqs;
        var numFreqs = freqs.length;
        var deltaFreq = this.deltaFreq;
        var peaks = this.peaks;
        this.analyser.getFloatFrequencyData(bins);
        var totalPower = 0;

        for (var i = startBin; i < endBin; i++) {
          var level = bins[i];
          var power = decibelToPower(level);
          totalPower += power;
        }

        totalPower /= numBins;
        var groundLevel = powerToDecibel(totalPower);
        var j = 0;

        for (var _i = startBin; _i < endBin; _i++) {
          var center = bins[_i];
          var left = bins[_i - 1];
          var right = bins[_i + 1];
          var minLevel = groundLevel + levelThreshold;

          if (center > left && center > right && center > minLevel) {
            var a = 0.5 * (right + left) - center;
            var b = 0.5 * (right - left);
            var frac = -b / (2.0 * a);
            var peakLevel = (a * frac + b) * frac + center;
            var peakIndex = _i + frac;
            var freq = peakIndex * deltaFreq;

            while (j < numFreqs && freq > freqs[j] && freq - freqs[j] > freqTolerance) {
              peaks[j].level *= lpB1;
              peaks[j].level += lpA * -120;
              j++;
            }

            if (j < numFreqs && Math.abs(freq - freqs[j]) <= freqTolerance) {
              peaks[j].level *= lpB1;
              peaks[j].level += lpA * peakLevel;
              j++;
            }
          }
        }

        while (j < numFreqs) {
          peaks[j].level *= lpB1;
          peaks[j].level += lpA * -120;
          j++;
        }

        if (this.callback) this.callback(this.array, this.peaks);
        this.timeout = setTimeout(this.analyse, this.period * 1000);
      }
    }, {
      key: "start",
      value: function start() {
        this.analyse();
      }
    }, {
      key: "stop",
      value: function stop() {
        if (this.timeout !== null) {
          clearTimeout(this.timeout);
          this.timeout = null;
        }
      }
    }]);

    return SpectrumAnalyser;
  }();

  var MotionInput_1 = createCommonjsModule(function (module, exports) {

    Object.defineProperty(exports, "__esModule", {
      value: true
    });

    var _createClass = function () {
      function defineProperties(target, props) {
        for (var i = 0; i < props.length; i++) {
          var descriptor = props[i];
          descriptor.enumerable = descriptor.enumerable || false;
          descriptor.configurable = true;
          if ("value" in descriptor) descriptor.writable = true;
          Object.defineProperty(target, descriptor.key, descriptor);
        }
      }

      return function (Constructor, protoProps, staticProps) {
        if (protoProps) defineProperties(Constructor.prototype, protoProps);
        if (staticProps) defineProperties(Constructor, staticProps);
        return Constructor;
      };
    }();

    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    /**
     * `MotionInput` singleton.
     * The `MotionInput` singleton allows to initialize motion events
     * and to listen to them.
     *
     * @class MotionInput
     */


    var MotionInput = function () {
      /**
       * Creates the `MotionInput` module instance.
       *
       * @constructor
       */
      function MotionInput() {
        _classCallCheck(this, MotionInput);
        /**
         * Pool of all available modules.
         *
         * @this MotionInput
         * @type {object}
         * @default {}
         */


        this.modules = {};
      }
      /**
       * Adds a module to the `MotionInput` module.
       *
       * @param {string} eventType - Name of the event type.
       * @param {InputModule} module - Module to add to the `MotionInput` module.
       */


      _createClass(MotionInput, [{
        key: "addModule",
        value: function addModule(eventType, module) {
          this.modules[eventType] = module;
        }
        /**
         * Gets a module.
         *
         * @param {string} eventType - Name of the event type (module) to retrieve.
         * @return {InputModule}
         */

      }, {
        key: "getModule",
        value: function getModule(eventType) {
          return this.modules[eventType];
        }
        /**
         * Requires a module.
         * If the module has been initialized already, returns its promise. Otherwise,
         * initializes the module.
         *
         * @param {string} eventType - Name of the event type (module) to require.
         * @return {Promise}
         */

      }, {
        key: "requireModule",
        value: function requireModule(eventType) {
          var module = this.getModule(eventType);
          if (module.promise) return module.promise;
          return module.init();
        }
        /**
         * Initializes the `MotionInput` module.
         *
         * @param {Array<String>} eventTypes - Array of the event types to initialize.
         * @return {Promise}
         */

      }, {
        key: "init",
        value: function init() {
          var _this = this;

          for (var _len = arguments.length, eventTypes = Array(_len), _key = 0; _key < _len; _key++) {
            eventTypes[_key] = arguments[_key];
          }

          if (Array.isArray(eventTypes[0])) eventTypes = eventTypes[0];
          var modulePromises = eventTypes.map(function (value) {
            var module = _this.getModule(value);

            return module.init();
          });
          return Promise.all(modulePromises);
        }
        /**
         * Adds a listener.
         *
         * @param {string} eventType - Name of the event type (module) to add a listener to.
         * @param {function} listener - Listener to add.
         */

      }, {
        key: "addListener",
        value: function addListener(eventType, listener) {
          var module = this.getModule(eventType);
          module.addListener(listener);
        }
        /**
         * Removes a listener.
         *
         * @param {string} eventType - Name of the event type (module) to add a listener to.
         * @param {function} listener - Listener to remove.
         */

      }, {
        key: "removeListener",
        value: function removeListener(eventType, listener) {
          var module = this.getModule(eventType);
          module.removeListener(listener);
        }
      }]);

      return MotionInput;
    }();

    exports.default = new MotionInput();
  });
  unwrapExports(MotionInput_1);

  var InputModule_1 = createCommonjsModule(function (module, exports) {

    Object.defineProperty(exports, "__esModule", {
      value: true
    });

    var _createClass = function () {
      function defineProperties(target, props) {
        for (var i = 0; i < props.length; i++) {
          var descriptor = props[i];
          descriptor.enumerable = descriptor.enumerable || false;
          descriptor.configurable = true;
          if ("value" in descriptor) descriptor.writable = true;
          Object.defineProperty(target, descriptor.key, descriptor);
        }
      }

      return function (Constructor, protoProps, staticProps) {
        if (protoProps) defineProperties(Constructor.prototype, protoProps);
        if (staticProps) defineProperties(Constructor, staticProps);
        return Constructor;
      };
    }();

    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    /**
     * `InputModule` class.
     * The `InputModule` class allows to instantiate modules that are part of the
     * motion input module, and that provide values (for instance, `deviceorientation`,
     * `acceleration`, `energy`).
     *
     * @class InputModule
     */


    var InputModule = function () {
      /**
       * Creates an `InputModule` module instance.
       *
       * @constructor
       * @param {string} eventType - Name of the module / event (*e.g.* `deviceorientation, 'acceleration', 'energy').
       */
      function InputModule(eventType) {
        _classCallCheck(this, InputModule);
        /**
         * Event type of the module.
         *
         * @this InputModule
         * @type {string}
         * @constant
         */


        this.eventType = eventType;
        /**
         * Array of listeners attached to this module / event.
         *
         * @this InputModule
         * @type {Set<Function>}
         */

        this.listeners = new Set();
        /**
         * Event sent by this module.
         *
         * @this InputModule
         * @type {number|number[]}
         * @default null
         */

        this.event = null;
        /**
         * Module promise (resolved when the module is initialized).
         *
         * @this InputModule
         * @type {Promise}
         * @default null
         */

        this.promise = null;
        /**
         * Indicates if the module's event values are calculated from parent modules / events.
         *
         * @this InputModule
         * @type {bool}
         * @default false
         */

        this.isCalculated = false;
        /**
         * Indicates if the module's event values are provided by the device's sensors.
         * (*I.e.* indicates if the `'devicemotion'` or `'deviceorientation'` events provide the required raw values.)
         *
         * @this InputModule
         * @type {bool}
         * @default false
         */

        this.isProvided = false;
        /**
         * Period at which the module's events are sent (`undefined` if the events are not sent at regular intervals).
         *
         * @this InputModule
         * @type {number}
         * @default undefined
         */

        this.period = undefined;
        this.emit = this.emit.bind(this);
      }
      /**
       * Indicates whether the module can provide values or not.
       *
       * @type {bool}
       * @readonly
       */


      _createClass(InputModule, [{
        key: "init",

        /**
         * Initializes the module.
         *
         * @param {function} promiseFun - Promise function that takes the `resolve` and `reject` functions as arguments.
         * @return {Promise}
         */
        value: function init(promiseFun) {
          this.promise = new Promise(promiseFun);
          return this.promise;
        }
        /**
         * Adds a listener to the module.
         *
         * @param {function} listener - Listener to add.
         */

      }, {
        key: "addListener",
        value: function addListener(listener) {
          this.listeners.add(listener);
        }
        /**
         * Removes a listener from the module.
         *
         * @param {function} listener - Listener to remove.
         */

      }, {
        key: "removeListener",
        value: function removeListener(listener) {
          this.listeners.delete(listener);
        }
        /**
         * Propagates an event to all the module's listeners.
         *
         * @param {number|number[]} [event=this.event] - Event values to propagate to the module's listeners.
         */

      }, {
        key: "emit",
        value: function emit() {
          var event = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.event;
          this.listeners.forEach(function (listener) {
            return listener(event);
          });
        }
      }, {
        key: "isValid",
        get: function get() {
          return this.isProvided || this.isCalculated;
        }
      }]);

      return InputModule;
    }();

    exports.default = InputModule;
  });
  unwrapExports(InputModule_1);

  var DOMEventSubmodule_1 = createCommonjsModule(function (module, exports) {

    Object.defineProperty(exports, "__esModule", {
      value: true
    });

    var _createClass = function () {
      function defineProperties(target, props) {
        for (var i = 0; i < props.length; i++) {
          var descriptor = props[i];
          descriptor.enumerable = descriptor.enumerable || false;
          descriptor.configurable = true;
          if ("value" in descriptor) descriptor.writable = true;
          Object.defineProperty(target, descriptor.key, descriptor);
        }
      }

      return function (Constructor, protoProps, staticProps) {
        if (protoProps) defineProperties(Constructor.prototype, protoProps);
        if (staticProps) defineProperties(Constructor, staticProps);
        return Constructor;
      };
    }();

    var _InputModule3 = _interopRequireDefault(InputModule_1);

    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : {
        default: obj
      };
    }

    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }

    function _possibleConstructorReturn(self, call) {
      if (!self) {
        throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
      }

      return call && (typeof call === "object" || typeof call === "function") ? call : self;
    }

    function _inherits(subClass, superClass) {
      if (typeof superClass !== "function" && superClass !== null) {
        throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
      }

      subClass.prototype = Object.create(superClass && superClass.prototype, {
        constructor: {
          value: subClass,
          enumerable: false,
          writable: true,
          configurable: true
        }
      });
      if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
    }
    /**
     * `DOMEventSubmodule` class.
     * The `DOMEventSubmodule` class allows to instantiate modules that provide
     * unified values (such as `AccelerationIncludingGravity`, `Acceleration`,
     * `RotationRate`, `Orientation`, `OrientationAlt) from the `devicemotion`
     * or `deviceorientation` DOM events.
     *
     * @class DOMEventSubmodule
     * @extends InputModule
     */


    var DOMEventSubmodule = function (_InputModule) {
      _inherits(DOMEventSubmodule, _InputModule);
      /**
       * Creates a `DOMEventSubmodule` module instance.
       *
       * @constructor
       * @param {DeviceMotionModule|DeviceOrientationModule} DOMEventModule - The parent DOM event module.
       * @param {string} eventType - The name of the submodule / event (*e.g.* 'acceleration' or 'orientationAlt').
       * @see DeviceMotionModule
       * @see DeviceOrientationModule
       */


      function DOMEventSubmodule(DOMEventModule, eventType) {
        _classCallCheck(this, DOMEventSubmodule);
        /**
         * The DOM event parent module from which this module gets the raw values.
         *
         * @this DOMEventSubmodule
         * @type {DeviceMotionModule|DeviceOrientationModule}
         * @constant
         */


        var _this = _possibleConstructorReturn(this, (DOMEventSubmodule.__proto__ || Object.getPrototypeOf(DOMEventSubmodule)).call(this, eventType));

        _this.DOMEventModule = DOMEventModule;
        /**
         * Raw values coming from the `devicemotion` event sent by this module.
         *
         * @this DOMEventSubmodule
         * @type {number[]}
         * @default [0, 0, 0]
         */

        _this.event = [0, 0, 0];
        /**
         * Compass heading reference (iOS devices only, `Orientation` and `OrientationAlt` submodules only).
         *
         * @this DOMEventSubmodule
         * @type {number}
         * @default null
         */

        _this._webkitCompassHeadingReference = null;
        return _this;
      }
      /**
       * Initializes of the module.
       *
       * @return {Promise}
       */


      _createClass(DOMEventSubmodule, [{
        key: 'init',
        value: function init() {
          var _this2 = this; // Indicate to the parent module that this event is required


          this.DOMEventModule.required[this.eventType] = true; // If the parent event has not been initialized yet, initialize it

          var DOMEventPromise = this.DOMEventModule.promise;
          if (!DOMEventPromise) DOMEventPromise = this.DOMEventModule.init();
          return DOMEventPromise.then(function (module) {
            return _this2;
          });
        }
      }]);

      return DOMEventSubmodule;
    }(_InputModule3.default);

    exports.default = DOMEventSubmodule;
  });
  unwrapExports(DOMEventSubmodule_1);

  var platform$1 = createCommonjsModule(function (module, exports) {
    (function () {
      /** Used to determine if values are of the language type `Object`. */

      var objectTypes = {
        'function': true,
        'object': true
      };
      /** Used as a reference to the global object. */

      var root = objectTypes[typeof window] && window || this;
      /** Backup possible global object. */

      var oldRoot = root;
      /** Detect free variable `exports`. */

      var freeExports = objectTypes['object'] && exports;
      /** Detect free variable `module`. */

      var freeModule = objectTypes['object'] && module && !module.nodeType && module;
      /** Detect free variable `global` from Node.js or Browserified code and use it as `root`. */

      var freeGlobal = freeExports && freeModule && typeof commonjsGlobal == 'object' && commonjsGlobal;

      if (freeGlobal && (freeGlobal.global === freeGlobal || freeGlobal.window === freeGlobal || freeGlobal.self === freeGlobal)) {
        root = freeGlobal;
      }
      /**
       * Used as the maximum length of an array-like object.
       * See the [ES6 spec](http://people.mozilla.org/~jorendorff/es6-draft.html#sec-tolength)
       * for more details.
       */


      var maxSafeInteger = Math.pow(2, 53) - 1;
      /** Regular expression to detect Opera. */

      var reOpera = /\bOpera/;
      /** Possible global object. */

      var thisBinding = this;
      /** Used for native method references. */

      var objectProto = Object.prototype;
      /** Used to check for own properties of an object. */

      var hasOwnProperty = objectProto.hasOwnProperty;
      /** Used to resolve the internal `[[Class]]` of values. */

      var toString = objectProto.toString;
      /*--------------------------------------------------------------------------*/

      /**
       * Capitalizes a string value.
       *
       * @private
       * @param {string} string The string to capitalize.
       * @returns {string} The capitalized string.
       */

      function capitalize(string) {
        string = String(string);
        return string.charAt(0).toUpperCase() + string.slice(1);
      }
      /**
       * A utility function to clean up the OS name.
       *
       * @private
       * @param {string} os The OS name to clean up.
       * @param {string} [pattern] A `RegExp` pattern matching the OS name.
       * @param {string} [label] A label for the OS.
       */


      function cleanupOS(os, pattern, label) {
        // Platform tokens are defined at:
        // http://msdn.microsoft.com/en-us/library/ms537503(VS.85).aspx
        // http://web.archive.org/web/20081122053950/http://msdn.microsoft.com/en-us/library/ms537503(VS.85).aspx
        var data = {
          '10.0': '10',
          '6.4': '10 Technical Preview',
          '6.3': '8.1',
          '6.2': '8',
          '6.1': 'Server 2008 R2 / 7',
          '6.0': 'Server 2008 / Vista',
          '5.2': 'Server 2003 / XP 64-bit',
          '5.1': 'XP',
          '5.01': '2000 SP1',
          '5.0': '2000',
          '4.0': 'NT',
          '4.90': 'ME'
        }; // Detect Windows version from platform tokens.

        if (pattern && label && /^Win/i.test(os) && !/^Windows Phone /i.test(os) && (data = data[/[\d.]+$/.exec(os)])) {
          os = 'Windows ' + data;
        } // Correct character case and cleanup string.


        os = String(os);

        if (pattern && label) {
          os = os.replace(RegExp(pattern, 'i'), label);
        }

        os = format(os.replace(/ ce$/i, ' CE').replace(/\bhpw/i, 'web').replace(/\bMacintosh\b/, 'Mac OS').replace(/_PowerPC\b/i, ' OS').replace(/\b(OS X) [^ \d]+/i, '$1').replace(/\bMac (OS X)\b/, '$1').replace(/\/(\d)/, ' $1').replace(/_/g, '.').replace(/(?: BePC|[ .]*fc[ \d.]+)$/i, '').replace(/\bx86\.64\b/gi, 'x86_64').replace(/\b(Windows Phone) OS\b/, '$1').replace(/\b(Chrome OS \w+) [\d.]+\b/, '$1').split(' on ')[0]);
        return os;
      }
      /**
       * An iteration utility for arrays and objects.
       *
       * @private
       * @param {Array|Object} object The object to iterate over.
       * @param {Function} callback The function called per iteration.
       */


      function each(object, callback) {
        var index = -1,
            length = object ? object.length : 0;

        if (typeof length == 'number' && length > -1 && length <= maxSafeInteger) {
          while (++index < length) {
            callback(object[index], index, object);
          }
        } else {
          forOwn(object, callback);
        }
      }
      /**
       * Trim and conditionally capitalize string values.
       *
       * @private
       * @param {string} string The string to format.
       * @returns {string} The formatted string.
       */


      function format(string) {
        string = trim(string);
        return /^(?:webOS|i(?:OS|P))/.test(string) ? string : capitalize(string);
      }
      /**
       * Iterates over an object's own properties, executing the `callback` for each.
       *
       * @private
       * @param {Object} object The object to iterate over.
       * @param {Function} callback The function executed per own property.
       */


      function forOwn(object, callback) {
        for (var key in object) {
          if (hasOwnProperty.call(object, key)) {
            callback(object[key], key, object);
          }
        }
      }
      /**
       * Gets the internal `[[Class]]` of a value.
       *
       * @private
       * @param {*} value The value.
       * @returns {string} The `[[Class]]`.
       */


      function getClassOf(value) {
        return value == null ? capitalize(value) : toString.call(value).slice(8, -1);
      }
      /**
       * Host objects can return type values that are different from their actual
       * data type. The objects we are concerned with usually return non-primitive
       * types of "object", "function", or "unknown".
       *
       * @private
       * @param {*} object The owner of the property.
       * @param {string} property The property to check.
       * @returns {boolean} Returns `true` if the property value is a non-primitive, else `false`.
       */


      function isHostType(object, property) {
        var type = object != null ? typeof object[property] : 'number';
        return !/^(?:boolean|number|string|undefined)$/.test(type) && (type == 'object' ? !!object[property] : true);
      }
      /**
       * Prepares a string for use in a `RegExp` by making hyphens and spaces optional.
       *
       * @private
       * @param {string} string The string to qualify.
       * @returns {string} The qualified string.
       */


      function qualify(string) {
        return String(string).replace(/([ -])(?!$)/g, '$1?');
      }
      /**
       * A bare-bones `Array#reduce` like utility function.
       *
       * @private
       * @param {Array} array The array to iterate over.
       * @param {Function} callback The function called per iteration.
       * @returns {*} The accumulated result.
       */


      function reduce(array, callback) {
        var accumulator = null;
        each(array, function (value, index) {
          accumulator = callback(accumulator, value, index, array);
        });
        return accumulator;
      }
      /**
       * Removes leading and trailing whitespace from a string.
       *
       * @private
       * @param {string} string The string to trim.
       * @returns {string} The trimmed string.
       */


      function trim(string) {
        return String(string).replace(/^ +| +$/g, '');
      }
      /*--------------------------------------------------------------------------*/

      /**
       * Creates a new platform object.
       *
       * @memberOf platform
       * @param {Object|string} [ua=navigator.userAgent] The user agent string or
       *  context object.
       * @returns {Object} A platform object.
       */


      function parse(ua) {
        /** The environment context object. */
        var context = root;
        /** Used to flag when a custom context is provided. */

        var isCustomContext = ua && typeof ua == 'object' && getClassOf(ua) != 'String'; // Juggle arguments.

        if (isCustomContext) {
          context = ua;
          ua = null;
        }
        /** Browser navigator object. */


        var nav = context.navigator || {};
        /** Browser user agent string. */

        var userAgent = nav.userAgent || '';
        ua || (ua = userAgent);
        /** Used to flag when `thisBinding` is the [ModuleScope]. */

        var isModuleScope = isCustomContext || thisBinding == oldRoot;
        /** Used to detect if browser is like Chrome. */

        var likeChrome = isCustomContext ? !!nav.likeChrome : /\bChrome\b/.test(ua) && !/internal|\n/i.test(toString.toString());
        /** Internal `[[Class]]` value shortcuts. */

        var objectClass = 'Object',
            airRuntimeClass = isCustomContext ? objectClass : 'ScriptBridgingProxyObject',
            enviroClass = isCustomContext ? objectClass : 'Environment',
            javaClass = isCustomContext && context.java ? 'JavaPackage' : getClassOf(context.java),
            phantomClass = isCustomContext ? objectClass : 'RuntimeObject';
        /** Detect Java environments. */

        var java = /\bJava/.test(javaClass) && context.java;
        /** Detect Rhino. */

        var rhino = java && getClassOf(context.environment) == enviroClass;
        /** A character to represent alpha. */

        var alpha = java ? 'a' : '\u03b1';
        /** A character to represent beta. */

        var beta = java ? 'b' : '\u03b2';
        /** Browser document object. */

        var doc = context.document || {};
        /**
         * Detect Opera browser (Presto-based).
         * http://www.howtocreate.co.uk/operaStuff/operaObject.html
         * http://dev.opera.com/articles/view/opera-mini-web-content-authoring-guidelines/#operamini
         */

        var opera = context.operamini || context.opera;
        /** Opera `[[Class]]`. */

        var operaClass = reOpera.test(operaClass = isCustomContext && opera ? opera['[[Class]]'] : getClassOf(opera)) ? operaClass : opera = null;
        /*------------------------------------------------------------------------*/

        /** Temporary variable used over the script's lifetime. */

        var data;
        /** The CPU architecture. */

        var arch = ua;
        /** Platform description array. */

        var description = [];
        /** Platform alpha/beta indicator. */

        var prerelease = null;
        /** A flag to indicate that environment features should be used to resolve the platform. */

        var useFeatures = ua == userAgent;
        /** The browser/environment version. */

        var version = useFeatures && opera && typeof opera.version == 'function' && opera.version();
        /** A flag to indicate if the OS ends with "/ Version" */

        var isSpecialCasedOS;
        /* Detectable layout engines (order is important). */

        var layout = getLayout([{
          'label': 'EdgeHTML',
          'pattern': 'Edge'
        }, 'Trident', {
          'label': 'WebKit',
          'pattern': 'AppleWebKit'
        }, 'iCab', 'Presto', 'NetFront', 'Tasman', 'KHTML', 'Gecko']);
        /* Detectable browser names (order is important). */

        var name = getName(['Adobe AIR', 'Arora', 'Avant Browser', 'Breach', 'Camino', 'Electron', 'Epiphany', 'Fennec', 'Flock', 'Galeon', 'GreenBrowser', 'iCab', 'Iceweasel', 'K-Meleon', 'Konqueror', 'Lunascape', 'Maxthon', {
          'label': 'Microsoft Edge',
          'pattern': 'Edge'
        }, 'Midori', 'Nook Browser', 'PaleMoon', 'PhantomJS', 'Raven', 'Rekonq', 'RockMelt', {
          'label': 'Samsung Internet',
          'pattern': 'SamsungBrowser'
        }, 'SeaMonkey', {
          'label': 'Silk',
          'pattern': '(?:Cloud9|Silk-Accelerated)'
        }, 'Sleipnir', 'SlimBrowser', {
          'label': 'SRWare Iron',
          'pattern': 'Iron'
        }, 'Sunrise', 'Swiftfox', 'Waterfox', 'WebPositive', 'Opera Mini', {
          'label': 'Opera Mini',
          'pattern': 'OPiOS'
        }, 'Opera', {
          'label': 'Opera',
          'pattern': 'OPR'
        }, 'Chrome', {
          'label': 'Chrome Mobile',
          'pattern': '(?:CriOS|CrMo)'
        }, {
          'label': 'Firefox',
          'pattern': '(?:Firefox|Minefield)'
        }, {
          'label': 'Firefox for iOS',
          'pattern': 'FxiOS'
        }, {
          'label': 'IE',
          'pattern': 'IEMobile'
        }, {
          'label': 'IE',
          'pattern': 'MSIE'
        }, 'Safari']);
        /* Detectable products (order is important). */

        var product = getProduct([{
          'label': 'BlackBerry',
          'pattern': 'BB10'
        }, 'BlackBerry', {
          'label': 'Galaxy S',
          'pattern': 'GT-I9000'
        }, {
          'label': 'Galaxy S2',
          'pattern': 'GT-I9100'
        }, {
          'label': 'Galaxy S3',
          'pattern': 'GT-I9300'
        }, {
          'label': 'Galaxy S4',
          'pattern': 'GT-I9500'
        }, {
          'label': 'Galaxy S5',
          'pattern': 'SM-G900'
        }, {
          'label': 'Galaxy S6',
          'pattern': 'SM-G920'
        }, {
          'label': 'Galaxy S6 Edge',
          'pattern': 'SM-G925'
        }, {
          'label': 'Galaxy S7',
          'pattern': 'SM-G930'
        }, {
          'label': 'Galaxy S7 Edge',
          'pattern': 'SM-G935'
        }, 'Google TV', 'Lumia', 'iPad', 'iPod', 'iPhone', 'Kindle', {
          'label': 'Kindle Fire',
          'pattern': '(?:Cloud9|Silk-Accelerated)'
        }, 'Nexus', 'Nook', 'PlayBook', 'PlayStation Vita', 'PlayStation', 'TouchPad', 'Transformer', {
          'label': 'Wii U',
          'pattern': 'WiiU'
        }, 'Wii', 'Xbox One', {
          'label': 'Xbox 360',
          'pattern': 'Xbox'
        }, 'Xoom']);
        /* Detectable manufacturers. */

        var manufacturer = getManufacturer({
          'Apple': {
            'iPad': 1,
            'iPhone': 1,
            'iPod': 1
          },
          'Archos': {},
          'Amazon': {
            'Kindle': 1,
            'Kindle Fire': 1
          },
          'Asus': {
            'Transformer': 1
          },
          'Barnes & Noble': {
            'Nook': 1
          },
          'BlackBerry': {
            'PlayBook': 1
          },
          'Google': {
            'Google TV': 1,
            'Nexus': 1
          },
          'HP': {
            'TouchPad': 1
          },
          'HTC': {},
          'LG': {},
          'Microsoft': {
            'Xbox': 1,
            'Xbox One': 1
          },
          'Motorola': {
            'Xoom': 1
          },
          'Nintendo': {
            'Wii U': 1,
            'Wii': 1
          },
          'Nokia': {
            'Lumia': 1
          },
          'Samsung': {
            'Galaxy S': 1,
            'Galaxy S2': 1,
            'Galaxy S3': 1,
            'Galaxy S4': 1
          },
          'Sony': {
            'PlayStation': 1,
            'PlayStation Vita': 1
          }
        });
        /* Detectable operating systems (order is important). */

        var os = getOS(['Windows Phone', 'Android', 'CentOS', {
          'label': 'Chrome OS',
          'pattern': 'CrOS'
        }, 'Debian', 'Fedora', 'FreeBSD', 'Gentoo', 'Haiku', 'Kubuntu', 'Linux Mint', 'OpenBSD', 'Red Hat', 'SuSE', 'Ubuntu', 'Xubuntu', 'Cygwin', 'Symbian OS', 'hpwOS', 'webOS ', 'webOS', 'Tablet OS', 'Tizen', 'Linux', 'Mac OS X', 'Macintosh', 'Mac', 'Windows 98;', 'Windows ']);
        /*------------------------------------------------------------------------*/

        /**
         * Picks the layout engine from an array of guesses.
         *
         * @private
         * @param {Array} guesses An array of guesses.
         * @returns {null|string} The detected layout engine.
         */

        function getLayout(guesses) {
          return reduce(guesses, function (result, guess) {
            return result || RegExp('\\b' + (guess.pattern || qualify(guess)) + '\\b', 'i').exec(ua) && (guess.label || guess);
          });
        }
        /**
         * Picks the manufacturer from an array of guesses.
         *
         * @private
         * @param {Array} guesses An object of guesses.
         * @returns {null|string} The detected manufacturer.
         */


        function getManufacturer(guesses) {
          return reduce(guesses, function (result, value, key) {
            // Lookup the manufacturer by product or scan the UA for the manufacturer.
            return result || (value[product] || value[/^[a-z]+(?: +[a-z]+\b)*/i.exec(product)] || RegExp('\\b' + qualify(key) + '(?:\\b|\\w*\\d)', 'i').exec(ua)) && key;
          });
        }
        /**
         * Picks the browser name from an array of guesses.
         *
         * @private
         * @param {Array} guesses An array of guesses.
         * @returns {null|string} The detected browser name.
         */


        function getName(guesses) {
          return reduce(guesses, function (result, guess) {
            return result || RegExp('\\b' + (guess.pattern || qualify(guess)) + '\\b', 'i').exec(ua) && (guess.label || guess);
          });
        }
        /**
         * Picks the OS name from an array of guesses.
         *
         * @private
         * @param {Array} guesses An array of guesses.
         * @returns {null|string} The detected OS name.
         */


        function getOS(guesses) {
          return reduce(guesses, function (result, guess) {
            var pattern = guess.pattern || qualify(guess);

            if (!result && (result = RegExp('\\b' + pattern + '(?:/[\\d.]+|[ \\w.]*)', 'i').exec(ua))) {
              result = cleanupOS(result, pattern, guess.label || guess);
            }

            return result;
          });
        }
        /**
         * Picks the product name from an array of guesses.
         *
         * @private
         * @param {Array} guesses An array of guesses.
         * @returns {null|string} The detected product name.
         */


        function getProduct(guesses) {
          return reduce(guesses, function (result, guess) {
            var pattern = guess.pattern || qualify(guess);

            if (!result && (result = RegExp('\\b' + pattern + ' *\\d+[.\\w_]*', 'i').exec(ua) || RegExp('\\b' + pattern + ' *\\w+-[\\w]*', 'i').exec(ua) || RegExp('\\b' + pattern + '(?:; *(?:[a-z]+[_-])?[a-z]+\\d+|[^ ();-]*)', 'i').exec(ua))) {
              // Split by forward slash and append product version if needed.
              if ((result = String(guess.label && !RegExp(pattern, 'i').test(guess.label) ? guess.label : result).split('/'))[1] && !/[\d.]+/.test(result[0])) {
                result[0] += ' ' + result[1];
              } // Correct character case and cleanup string.


              guess = guess.label || guess;
              result = format(result[0].replace(RegExp(pattern, 'i'), guess).replace(RegExp('; *(?:' + guess + '[_-])?', 'i'), ' ').replace(RegExp('(' + guess + ')[-_.]?(\\w)', 'i'), '$1 $2'));
            }

            return result;
          });
        }
        /**
         * Resolves the version using an array of UA patterns.
         *
         * @private
         * @param {Array} patterns An array of UA patterns.
         * @returns {null|string} The detected version.
         */


        function getVersion(patterns) {
          return reduce(patterns, function (result, pattern) {
            return result || (RegExp(pattern + '(?:-[\\d.]+/|(?: for [\\w-]+)?[ /-])([\\d.]+[^ ();/_-]*)', 'i').exec(ua) || 0)[1] || null;
          });
        }
        /**
         * Returns `platform.description` when the platform object is coerced to a string.
         *
         * @name toString
         * @memberOf platform
         * @returns {string} Returns `platform.description` if available, else an empty string.
         */


        function toStringPlatform() {
          return this.description || '';
        }
        /*------------------------------------------------------------------------*/
        // Convert layout to an array so we can add extra details.


        layout && (layout = [layout]); // Detect product names that contain their manufacturer's name.

        if (manufacturer && !product) {
          product = getProduct([manufacturer]);
        } // Clean up Google TV.


        if (data = /\bGoogle TV\b/.exec(product)) {
          product = data[0];
        } // Detect simulators.


        if (/\bSimulator\b/i.test(ua)) {
          product = (product ? product + ' ' : '') + 'Simulator';
        } // Detect Opera Mini 8+ running in Turbo/Uncompressed mode on iOS.


        if (name == 'Opera Mini' && /\bOPiOS\b/.test(ua)) {
          description.push('running in Turbo/Uncompressed mode');
        } // Detect IE Mobile 11.


        if (name == 'IE' && /\blike iPhone OS\b/.test(ua)) {
          data = parse(ua.replace(/like iPhone OS/, ''));
          manufacturer = data.manufacturer;
          product = data.product;
        } // Detect iOS.
        else if (/^iP/.test(product)) {
            name || (name = 'Safari');
            os = 'iOS' + ((data = / OS ([\d_]+)/i.exec(ua)) ? ' ' + data[1].replace(/_/g, '.') : '');
          } // Detect Kubuntu.
          else if (name == 'Konqueror' && !/buntu/i.test(os)) {
              os = 'Kubuntu';
            } // Detect Android browsers.
            else if (manufacturer && manufacturer != 'Google' && (/Chrome/.test(name) && !/\bMobile Safari\b/i.test(ua) || /\bVita\b/.test(product)) || /\bAndroid\b/.test(os) && /^Chrome/.test(name) && /\bVersion\//i.test(ua)) {
                name = 'Android Browser';
                os = /\bAndroid\b/.test(os) ? os : 'Android';
              } // Detect Silk desktop/accelerated modes.
              else if (name == 'Silk') {
                  if (!/\bMobi/i.test(ua)) {
                    os = 'Android';
                    description.unshift('desktop mode');
                  }

                  if (/Accelerated *= *true/i.test(ua)) {
                    description.unshift('accelerated');
                  }
                } // Detect PaleMoon identifying as Firefox.
                else if (name == 'PaleMoon' && (data = /\bFirefox\/([\d.]+)\b/.exec(ua))) {
                    description.push('identifying as Firefox ' + data[1]);
                  } // Detect Firefox OS and products running Firefox.
                  else if (name == 'Firefox' && (data = /\b(Mobile|Tablet|TV)\b/i.exec(ua))) {
                      os || (os = 'Firefox OS');
                      product || (product = data[1]);
                    } // Detect false positives for Firefox/Safari.
                    else if (!name || (data = !/\bMinefield\b/i.test(ua) && /\b(?:Firefox|Safari)\b/.exec(name))) {
                        // Escape the `/` for Firefox 1.
                        if (name && !product && /[\/,]|^[^(]+?\)/.test(ua.slice(ua.indexOf(data + '/') + 8))) {
                          // Clear name of false positives.
                          name = null;
                        } // Reassign a generic name.


                        if ((data = product || manufacturer || os) && (product || manufacturer || /\b(?:Android|Symbian OS|Tablet OS|webOS)\b/.test(os))) {
                          name = /[a-z]+(?: Hat)?/i.exec(/\bAndroid\b/.test(os) ? os : data) + ' Browser';
                        }
                      } // Add Chrome version to description for Electron.
                      else if (name == 'Electron' && (data = (/\bChrome\/([\d.]+)\b/.exec(ua) || 0)[1])) {
                          description.push('Chromium ' + data);
                        } // Detect non-Opera (Presto-based) versions (order is important).


        if (!version) {
          version = getVersion(['(?:Cloud9|CriOS|CrMo|Edge|FxiOS|IEMobile|Iron|Opera ?Mini|OPiOS|OPR|Raven|SamsungBrowser|Silk(?!/[\\d.]+$))', 'Version', qualify(name), '(?:Firefox|Minefield|NetFront)']);
        } // Detect stubborn layout engines.


        if (data = layout == 'iCab' && parseFloat(version) > 3 && 'WebKit' || /\bOpera\b/.test(name) && (/\bOPR\b/.test(ua) ? 'Blink' : 'Presto') || /\b(?:Midori|Nook|Safari)\b/i.test(ua) && !/^(?:Trident|EdgeHTML)$/.test(layout) && 'WebKit' || !layout && /\bMSIE\b/i.test(ua) && (os == 'Mac OS' ? 'Tasman' : 'Trident') || layout == 'WebKit' && /\bPlayStation\b(?! Vita\b)/i.test(name) && 'NetFront') {
          layout = [data];
        } // Detect Windows Phone 7 desktop mode.


        if (name == 'IE' && (data = (/; *(?:XBLWP|ZuneWP)(\d+)/i.exec(ua) || 0)[1])) {
          name += ' Mobile';
          os = 'Windows Phone ' + (/\+$/.test(data) ? data : data + '.x');
          description.unshift('desktop mode');
        } // Detect Windows Phone 8.x desktop mode.
        else if (/\bWPDesktop\b/i.test(ua)) {
            name = 'IE Mobile';
            os = 'Windows Phone 8.x';
            description.unshift('desktop mode');
            version || (version = (/\brv:([\d.]+)/.exec(ua) || 0)[1]);
          } // Detect IE 11 identifying as other browsers.
          else if (name != 'IE' && layout == 'Trident' && (data = /\brv:([\d.]+)/.exec(ua))) {
              if (name) {
                description.push('identifying as ' + name + (version ? ' ' + version : ''));
              }

              name = 'IE';
              version = data[1];
            } // Leverage environment features.


        if (useFeatures) {
          // Detect server-side environments.
          // Rhino has a global function while others have a global object.
          if (isHostType(context, 'global')) {
            if (java) {
              data = java.lang.System;
              arch = data.getProperty('os.arch');
              os = os || data.getProperty('os.name') + ' ' + data.getProperty('os.version');
            }

            if (isModuleScope && isHostType(context, 'system') && (data = [context.system])[0]) {
              os || (os = data[0].os || null);

              try {
                data[1] = context.require('ringo/engine').version;
                version = data[1].join('.');
                name = 'RingoJS';
              } catch (e) {
                if (data[0].global.system == context.system) {
                  name = 'Narwhal';
                }
              }
            } else if (typeof context.process == 'object' && !context.process.browser && (data = context.process)) {
              if (typeof data.versions == 'object') {
                if (typeof data.versions.electron == 'string') {
                  description.push('Node ' + data.versions.node);
                  name = 'Electron';
                  version = data.versions.electron;
                } else if (typeof data.versions.nw == 'string') {
                  description.push('Chromium ' + version, 'Node ' + data.versions.node);
                  name = 'NW.js';
                  version = data.versions.nw;
                }
              } else {
                name = 'Node.js';
                arch = data.arch;
                os = data.platform;
                version = /[\d.]+/.exec(data.version);
                version = version ? version[0] : 'unknown';
              }
            } else if (rhino) {
              name = 'Rhino';
            }
          } // Detect Adobe AIR.
          else if (getClassOf(data = context.runtime) == airRuntimeClass) {
              name = 'Adobe AIR';
              os = data.flash.system.Capabilities.os;
            } // Detect PhantomJS.
            else if (getClassOf(data = context.phantom) == phantomClass) {
                name = 'PhantomJS';
                version = (data = data.version || null) && data.major + '.' + data.minor + '.' + data.patch;
              } // Detect IE compatibility modes.
              else if (typeof doc.documentMode == 'number' && (data = /\bTrident\/(\d+)/i.exec(ua))) {
                  // We're in compatibility mode when the Trident version + 4 doesn't
                  // equal the document mode.
                  version = [version, doc.documentMode];

                  if ((data = +data[1] + 4) != version[1]) {
                    description.push('IE ' + version[1] + ' mode');
                    layout && (layout[1] = '');
                    version[1] = data;
                  }

                  version = name == 'IE' ? String(version[1].toFixed(1)) : version[0];
                } // Detect IE 11 masking as other browsers.
                else if (typeof doc.documentMode == 'number' && /^(?:Chrome|Firefox)\b/.test(name)) {
                    description.push('masking as ' + name + ' ' + version);
                    name = 'IE';
                    version = '11.0';
                    layout = ['Trident'];
                    os = 'Windows';
                  }

          os = os && format(os);
        } // Detect prerelease phases.


        if (version && (data = /(?:[ab]|dp|pre|[ab]\d+pre)(?:\d+\+?)?$/i.exec(version) || /(?:alpha|beta)(?: ?\d)?/i.exec(ua + ';' + (useFeatures && nav.appMinorVersion)) || /\bMinefield\b/i.test(ua) && 'a')) {
          prerelease = /b/i.test(data) ? 'beta' : 'alpha';
          version = version.replace(RegExp(data + '\\+?$'), '') + (prerelease == 'beta' ? beta : alpha) + (/\d+\+?/.exec(data) || '');
        } // Detect Firefox Mobile.


        if (name == 'Fennec' || name == 'Firefox' && /\b(?:Android|Firefox OS)\b/.test(os)) {
          name = 'Firefox Mobile';
        } // Obscure Maxthon's unreliable version.
        else if (name == 'Maxthon' && version) {
            version = version.replace(/\.[\d.]+/, '.x');
          } // Detect Xbox 360 and Xbox One.
          else if (/\bXbox\b/i.test(product)) {
              if (product == 'Xbox 360') {
                os = null;
              }

              if (product == 'Xbox 360' && /\bIEMobile\b/.test(ua)) {
                description.unshift('mobile mode');
              }
            } // Add mobile postfix.
            else if ((/^(?:Chrome|IE|Opera)$/.test(name) || name && !product && !/Browser|Mobi/.test(name)) && (os == 'Windows CE' || /Mobi/i.test(ua))) {
                name += ' Mobile';
              } // Detect IE platform preview.
              else if (name == 'IE' && useFeatures) {
                  try {
                    if (context.external === null) {
                      description.unshift('platform preview');
                    }
                  } catch (e) {
                    description.unshift('embedded');
                  }
                } // Detect BlackBerry OS version.
                // http://docs.blackberry.com/en/developers/deliverables/18169/HTTP_headers_sent_by_BB_Browser_1234911_11.jsp
                else if ((/\bBlackBerry\b/.test(product) || /\bBB10\b/.test(ua)) && (data = (RegExp(product.replace(/ +/g, ' *') + '/([.\\d]+)', 'i').exec(ua) || 0)[1] || version)) {
                    data = [data, /BB10/.test(ua)];
                    os = (data[1] ? (product = null, manufacturer = 'BlackBerry') : 'Device Software') + ' ' + data[0];
                    version = null;
                  } // Detect Opera identifying/masking itself as another browser.
                  // http://www.opera.com/support/kb/view/843/
                  else if (this != forOwn && product != 'Wii' && (useFeatures && opera || /Opera/.test(name) && /\b(?:MSIE|Firefox)\b/i.test(ua) || name == 'Firefox' && /\bOS X (?:\d+\.){2,}/.test(os) || name == 'IE' && (os && !/^Win/.test(os) && version > 5.5 || /\bWindows XP\b/.test(os) && version > 8 || version == 8 && !/\bTrident\b/.test(ua))) && !reOpera.test(data = parse.call(forOwn, ua.replace(reOpera, '') + ';')) && data.name) {
                      // When "identifying", the UA contains both Opera and the other browser's name.
                      data = 'ing as ' + data.name + ((data = data.version) ? ' ' + data : '');

                      if (reOpera.test(name)) {
                        if (/\bIE\b/.test(data) && os == 'Mac OS') {
                          os = null;
                        }

                        data = 'identify' + data;
                      } // When "masking", the UA contains only the other browser's name.
                      else {
                          data = 'mask' + data;

                          if (operaClass) {
                            name = format(operaClass.replace(/([a-z])([A-Z])/g, '$1 $2'));
                          } else {
                            name = 'Opera';
                          }

                          if (/\bIE\b/.test(data)) {
                            os = null;
                          }

                          if (!useFeatures) {
                            version = null;
                          }
                        }

                      layout = ['Presto'];
                      description.push(data);
                    } // Detect WebKit Nightly and approximate Chrome/Safari versions.


        if (data = (/\bAppleWebKit\/([\d.]+\+?)/i.exec(ua) || 0)[1]) {
          // Correct build number for numeric comparison.
          // (e.g. "532.5" becomes "532.05")
          data = [parseFloat(data.replace(/\.(\d)$/, '.0$1')), data]; // Nightly builds are postfixed with a "+".

          if (name == 'Safari' && data[1].slice(-1) == '+') {
            name = 'WebKit Nightly';
            prerelease = 'alpha';
            version = data[1].slice(0, -1);
          } // Clear incorrect browser versions.
          else if (version == data[1] || version == (data[2] = (/\bSafari\/([\d.]+\+?)/i.exec(ua) || 0)[1])) {
              version = null;
            } // Use the full Chrome version when available.


          data[1] = (/\bChrome\/([\d.]+)/i.exec(ua) || 0)[1]; // Detect Blink layout engine.

          if (data[0] == 537.36 && data[2] == 537.36 && parseFloat(data[1]) >= 28 && layout == 'WebKit') {
            layout = ['Blink'];
          } // Detect JavaScriptCore.
          // http://stackoverflow.com/questions/6768474/how-can-i-detect-which-javascript-engine-v8-or-jsc-is-used-at-runtime-in-androi


          if (!useFeatures || !likeChrome && !data[1]) {
            layout && (layout[1] = 'like Safari');
            data = (data = data[0], data < 400 ? 1 : data < 500 ? 2 : data < 526 ? 3 : data < 533 ? 4 : data < 534 ? '4+' : data < 535 ? 5 : data < 537 ? 6 : data < 538 ? 7 : data < 601 ? 8 : '8');
          } else {
            layout && (layout[1] = 'like Chrome');
            data = data[1] || (data = data[0], data < 530 ? 1 : data < 532 ? 2 : data < 532.05 ? 3 : data < 533 ? 4 : data < 534.03 ? 5 : data < 534.07 ? 6 : data < 534.10 ? 7 : data < 534.13 ? 8 : data < 534.16 ? 9 : data < 534.24 ? 10 : data < 534.30 ? 11 : data < 535.01 ? 12 : data < 535.02 ? '13+' : data < 535.07 ? 15 : data < 535.11 ? 16 : data < 535.19 ? 17 : data < 536.05 ? 18 : data < 536.10 ? 19 : data < 537.01 ? 20 : data < 537.11 ? '21+' : data < 537.13 ? 23 : data < 537.18 ? 24 : data < 537.24 ? 25 : data < 537.36 ? 26 : layout != 'Blink' ? '27' : '28');
          } // Add the postfix of ".x" or "+" for approximate versions.


          layout && (layout[1] += ' ' + (data += typeof data == 'number' ? '.x' : /[.+]/.test(data) ? '' : '+')); // Obscure version for some Safari 1-2 releases.

          if (name == 'Safari' && (!version || parseInt(version) > 45)) {
            version = data;
          }
        } // Detect Opera desktop modes.


        if (name == 'Opera' && (data = /\bzbov|zvav$/.exec(os))) {
          name += ' ';
          description.unshift('desktop mode');

          if (data == 'zvav') {
            name += 'Mini';
            version = null;
          } else {
            name += 'Mobile';
          }

          os = os.replace(RegExp(' *' + data + '$'), '');
        } // Detect Chrome desktop mode.
        else if (name == 'Safari' && /\bChrome\b/.exec(layout && layout[1])) {
            description.unshift('desktop mode');
            name = 'Chrome Mobile';
            version = null;

            if (/\bOS X\b/.test(os)) {
              manufacturer = 'Apple';
              os = 'iOS 4.3+';
            } else {
              os = null;
            }
          } // Strip incorrect OS versions.


        if (version && version.indexOf(data = /[\d.]+$/.exec(os)) == 0 && ua.indexOf('/' + data + '-') > -1) {
          os = trim(os.replace(data, ''));
        } // Add layout engine.


        if (layout && !/\b(?:Avant|Nook)\b/.test(name) && (/Browser|Lunascape|Maxthon/.test(name) || name != 'Safari' && /^iOS/.test(os) && /\bSafari\b/.test(layout[1]) || /^(?:Adobe|Arora|Breach|Midori|Opera|Phantom|Rekonq|Rock|Samsung Internet|Sleipnir|Web)/.test(name) && layout[1])) {
          // Don't add layout details to description if they are falsey.
          (data = layout[layout.length - 1]) && description.push(data);
        } // Combine contextual information.


        if (description.length) {
          description = ['(' + description.join('; ') + ')'];
        } // Append manufacturer to description.


        if (manufacturer && product && product.indexOf(manufacturer) < 0) {
          description.push('on ' + manufacturer);
        } // Append product to description.


        if (product) {
          description.push((/^on /.test(description[description.length - 1]) ? '' : 'on ') + product);
        } // Parse the OS into an object.


        if (os) {
          data = / ([\d.+]+)$/.exec(os);
          isSpecialCasedOS = data && os.charAt(os.length - data[0].length - 1) == '/';
          os = {
            'architecture': 32,
            'family': data && !isSpecialCasedOS ? os.replace(data[0], '') : os,
            'version': data ? data[1] : null,
            'toString': function toString() {
              var version = this.version;
              return this.family + (version && !isSpecialCasedOS ? ' ' + version : '') + (this.architecture == 64 ? ' 64-bit' : '');
            }
          };
        } // Add browser/OS architecture.


        if ((data = /\b(?:AMD|IA|Win|WOW|x86_|x)64\b/i.exec(arch)) && !/\bi686\b/i.test(arch)) {
          if (os) {
            os.architecture = 64;
            os.family = os.family.replace(RegExp(' *' + data), '');
          }

          if (name && (/\bWOW64\b/i.test(ua) || useFeatures && /\w(?:86|32)$/.test(nav.cpuClass || nav.platform) && !/\bWin64; x64\b/i.test(ua))) {
            description.unshift('32-bit');
          }
        } // Chrome 39 and above on OS X is always 64-bit.
        else if (os && /^OS X/.test(os.family) && name == 'Chrome' && parseFloat(version) >= 39) {
            os.architecture = 64;
          }

        ua || (ua = null);
        /*------------------------------------------------------------------------*/

        /**
         * The platform object.
         *
         * @name platform
         * @type Object
         */

        var platform = {};
        /**
         * The platform description.
         *
         * @memberOf platform
         * @type string|null
         */

        platform.description = ua;
        /**
         * The name of the browser's layout engine.
         *
         * The list of common layout engines include:
         * "Blink", "EdgeHTML", "Gecko", "Trident" and "WebKit"
         *
         * @memberOf platform
         * @type string|null
         */

        platform.layout = layout && layout[0];
        /**
         * The name of the product's manufacturer.
         *
         * The list of manufacturers include:
         * "Apple", "Archos", "Amazon", "Asus", "Barnes & Noble", "BlackBerry",
         * "Google", "HP", "HTC", "LG", "Microsoft", "Motorola", "Nintendo",
         * "Nokia", "Samsung" and "Sony"
         *
         * @memberOf platform
         * @type string|null
         */

        platform.manufacturer = manufacturer;
        /**
         * The name of the browser/environment.
         *
         * The list of common browser names include:
         * "Chrome", "Electron", "Firefox", "Firefox for iOS", "IE",
         * "Microsoft Edge", "PhantomJS", "Safari", "SeaMonkey", "Silk",
         * "Opera Mini" and "Opera"
         *
         * Mobile versions of some browsers have "Mobile" appended to their name:
         * eg. "Chrome Mobile", "Firefox Mobile", "IE Mobile" and "Opera Mobile"
         *
         * @memberOf platform
         * @type string|null
         */

        platform.name = name;
        /**
         * The alpha/beta release indicator.
         *
         * @memberOf platform
         * @type string|null
         */

        platform.prerelease = prerelease;
        /**
         * The name of the product hosting the browser.
         *
         * The list of common products include:
         *
         * "BlackBerry", "Galaxy S4", "Lumia", "iPad", "iPod", "iPhone", "Kindle",
         * "Kindle Fire", "Nexus", "Nook", "PlayBook", "TouchPad" and "Transformer"
         *
         * @memberOf platform
         * @type string|null
         */

        platform.product = product;
        /**
         * The browser's user agent string.
         *
         * @memberOf platform
         * @type string|null
         */

        platform.ua = ua;
        /**
         * The browser/environment version.
         *
         * @memberOf platform
         * @type string|null
         */

        platform.version = name && version;
        /**
         * The name of the operating system.
         *
         * @memberOf platform
         * @type Object
         */

        platform.os = os || {
          /**
           * The CPU architecture the OS is built for.
           *
           * @memberOf platform.os
           * @type number|null
           */
          'architecture': null,

          /**
           * The family of the OS.
           *
           * Common values include:
           * "Windows", "Windows Server 2008 R2 / 7", "Windows Server 2008 / Vista",
           * "Windows XP", "OS X", "Ubuntu", "Debian", "Fedora", "Red Hat", "SuSE",
           * "Android", "iOS" and "Windows Phone"
           *
           * @memberOf platform.os
           * @type string|null
           */
          'family': null,

          /**
           * The version of the OS.
           *
           * @memberOf platform.os
           * @type string|null
           */
          'version': null,

          /**
           * Returns the OS string.
           *
           * @memberOf platform.os
           * @returns {string} The OS string.
           */
          'toString': function toString() {
            return 'null';
          }
        };
        platform.parse = parse;
        platform.toString = toStringPlatform;

        if (platform.version) {
          description.unshift(version);
        }

        if (platform.name) {
          description.unshift(name);
        }

        if (os && name && !(os == String(os).split(' ')[0] && (os == name.split(' ')[0] || product))) {
          description.push(product ? '(' + os + ')' : 'on ' + os);
        }

        if (description.length) {
          platform.description = description.join(' ');
        }

        return platform;
      }
      /*--------------------------------------------------------------------------*/
      // Export platform.


      var platform = parse(); // Some AMD build optimizers, like r.js, check for condition patterns like the following:

      if (freeExports && freeModule) {
          // Export for CommonJS support.
          forOwn(platform, function (value, key) {
            freeExports[key] = value;
          });
        } else {
          // Export to the global object.
          root.platform = platform;
        }
    }).call(commonjsGlobal);
  });

  var DeviceOrientationModule_1 = createCommonjsModule(function (module, exports) {

    Object.defineProperty(exports, "__esModule", {
      value: true
    });

    var _createClass = function () {
      function defineProperties(target, props) {
        for (var i = 0; i < props.length; i++) {
          var descriptor = props[i];
          descriptor.enumerable = descriptor.enumerable || false;
          descriptor.configurable = true;
          if ("value" in descriptor) descriptor.writable = true;
          Object.defineProperty(target, descriptor.key, descriptor);
        }
      }

      return function (Constructor, protoProps, staticProps) {
        if (protoProps) defineProperties(Constructor.prototype, protoProps);
        if (staticProps) defineProperties(Constructor, staticProps);
        return Constructor;
      };
    }();

    var _get = function get(object, property, receiver) {
      if (object === null) object = Function.prototype;
      var desc = Object.getOwnPropertyDescriptor(object, property);

      if (desc === undefined) {
        var parent = Object.getPrototypeOf(object);

        if (parent === null) {
          return undefined;
        } else {
          return get(parent, property, receiver);
        }
      } else if ("value" in desc) {
        return desc.value;
      } else {
        var getter = desc.get;

        if (getter === undefined) {
          return undefined;
        }

        return getter.call(receiver);
      }
    };

    var _DOMEventSubmodule2 = _interopRequireDefault(DOMEventSubmodule_1);

    var _InputModule3 = _interopRequireDefault(InputModule_1);

    var _MotionInput2 = _interopRequireDefault(MotionInput_1);

    var _platform2 = _interopRequireDefault(platform$1);

    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : {
        default: obj
      };
    }

    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }

    function _possibleConstructorReturn(self, call) {
      if (!self) {
        throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
      }

      return call && (typeof call === "object" || typeof call === "function") ? call : self;
    }

    function _inherits(subClass, superClass) {
      if (typeof superClass !== "function" && superClass !== null) {
        throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
      }

      subClass.prototype = Object.create(superClass && superClass.prototype, {
        constructor: {
          value: subClass,
          enumerable: false,
          writable: true,
          configurable: true
        }
      });
      if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
    }
    /**
     * Converts degrees to radians.
     *
     * @param {number} deg - Angle in degrees.
     * @return {number}
     */


    function degToRad(deg) {
      return deg * Math.PI / 180;
    }
    /**
     * Converts radians to degrees.
     *
     * @param {number} rad - Angle in radians.
     * @return {number}
     */


    function radToDeg(rad) {
      return rad * 180 / Math.PI;
    }
    /**
     * Normalizes a 3 x 3 matrix.
     *
     * @param {number[]} m - Matrix to normalize, represented by an array of length 9.
     * @return {number[]}
     */


    function normalize(m) {
      var det = m[0] * m[4] * m[8] + m[1] * m[5] * m[6] + m[2] * m[3] * m[7] - m[0] * m[5] * m[7] - m[1] * m[3] * m[8] - m[2] * m[4] * m[6];

      for (var i = 0; i < m.length; i++) {
        m[i] /= det;
      }

      return m;
    }
    /**
     * Converts a Euler angle `[alpha, beta, gamma]` to the W3C specification, where:
     * - `alpha` is in [0; +360[;
     * - `beta` is in [-180; +180[;
     * - `gamma` is in [-90; +90[.
     *
     * @param {number[]} eulerAngle - Euler angle to unify, represented by an array of length 3 (`[alpha, beta, gamma]`).
     * @see {@link http://www.w3.org/TR/orientation-event/}
     */


    function unify(eulerAngle) {
      // Cf. W3C specification (http://w3c.github.io/deviceorientation/spec-source-orientation.html)
      // and Euler angles Wikipedia page (http://en.wikipedia.org/wiki/Euler_angles).
      //
      // W3C convention: TaitâBryan angles Z-X'-Y'', where:
      //   alpha is in [0; +360[,
      //   beta is in [-180; +180[,
      //   gamma is in [-90; +90[.
      var alphaIsValid = typeof eulerAngle[0] === 'number';

      var _alpha = alphaIsValid ? degToRad(eulerAngle[0]) : 0;

      var _beta = degToRad(eulerAngle[1]);

      var _gamma = degToRad(eulerAngle[2]);

      var cA = Math.cos(_alpha);
      var cB = Math.cos(_beta);
      var cG = Math.cos(_gamma);
      var sA = Math.sin(_alpha);
      var sB = Math.sin(_beta);
      var sG = Math.sin(_gamma);
      var alpha = void 0,
          beta = void 0,
          gamma = void 0;
      var m = [cA * cG - sA * sB * sG, -cB * sA, cA * sG + cG * sA * sB, cG * sA + cA * sB * sG, cA * cB, sA * sG - cA * cG * sB, -cB * sG, sB, cB * cG];
      normalize(m); // Since we want gamma in [-90; +90[, cG >= 0.

      if (m[8] > 0) {
        // Case 1: m[8] > 0 <=> cB > 0                 (and cG != 0)
        //                  <=> beta in ]-pi/2; +pi/2[ (and cG != 0)
        alpha = Math.atan2(-m[1], m[4]);
        beta = Math.asin(m[7]); // asin returns a number between -pi/2 and +pi/2 => OK

        gamma = Math.atan2(-m[6], m[8]);
      } else if (m[8] < 0) {
        // Case 2: m[8] < 0 <=> cB < 0                            (and cG != 0)
        //                  <=> beta in [-pi; -pi/2[ U ]+pi/2; +pi] (and cG != 0)
        // Since cB < 0 and cB is in m[1] and m[4], the point is flipped by 180 degrees.
        // Hence, we have to multiply both arguments of atan2 by -1 in order to revert
        // the point in its original position (=> another flip by 180 degrees).
        alpha = Math.atan2(m[1], -m[4]);
        beta = -Math.asin(m[7]);
        beta += beta >= 0 ? -Math.PI : Math.PI; // asin returns a number between -pi/2 and pi/2 => make sure beta in [-pi; -pi/2[ U ]+pi/2; +pi]

        gamma = Math.atan2(m[6], -m[8]); // same remark as for alpha, multiplication by -1
      } else {
        // Case 3: m[8] = 0 <=> cB = 0 or cG = 0
        if (m[6] > 0) {
          // Subcase 1: cG = 0 and cB > 0
          //            cG = 0 <=> sG = -1 <=> gamma = -pi/2 => m[6] = cB
          //            Hence, m[6] > 0 <=> cB > 0 <=> beta in ]-pi/2; +pi/2[
          alpha = Math.atan2(-m[1], m[4]);
          beta = Math.asin(m[7]); // asin returns a number between -pi/2 and +pi/2 => OK

          gamma = -Math.PI / 2;
        } else if (m[6] < 0) {
          // Subcase 2: cG = 0 and cB < 0
          //            cG = 0 <=> sG = -1 <=> gamma = -pi/2 => m[6] = cB
          //            Hence, m[6] < 0 <=> cB < 0 <=> beta in [-pi; -pi/2[ U ]+pi/2; +pi]
          alpha = Math.atan2(m[1], -m[4]); // same remark as for alpha in a case above

          beta = -Math.asin(m[7]);
          beta += beta >= 0 ? -Math.PI : Math.PI; // asin returns a number between -pi/2 and +pi/2 => make sure beta in [-pi; -pi/2[ U ]+pi/2; +pi]

          gamma = -Math.PI / 2;
        } else {
          // Subcase 3: cB = 0
          // In the case where cos(beta) = 0 (i.e. beta = -pi/2 or beta = pi/2),
          // we have the gimbal lock problem: in that configuration, only the angle
          // alpha + gamma (if beta = +pi/2) or alpha - gamma (if beta = -pi/2)
          // are uniquely defined: alpha and gamma can take an infinity of values.
          // For convenience, let's set gamma = 0 (and thus sin(gamma) = 0).
          // (As a consequence of the gimbal lock problem, there is a discontinuity
          // in alpha and gamma.)
          alpha = Math.atan2(m[3], m[0]);
          beta = m[7] > 0 ? Math.PI / 2 : -Math.PI / 2;
          gamma = 0;
        }
      } // atan2 returns a number between -pi and pi => make sure that alpha is in [0, 2*pi[.


      alpha += alpha < 0 ? 2 * Math.PI : 0;
      eulerAngle[0] = alphaIsValid ? radToDeg(alpha) : null;
      eulerAngle[1] = radToDeg(beta);
      eulerAngle[2] = radToDeg(gamma);
    }
    /**
     * Converts a Euler angle `[alpha, beta, gamma]` to a Euler angle where:
     * - `alpha` is in [0; +360[;
     * - `beta` is in [-90; +90[;
     * - `gamma` is in [-180; +180[.
     *
     * @param {number[]} eulerAngle - Euler angle to convert, represented by an array of length 3 (`[alpha, beta, gamma]`).
     */


    function unifyAlt(eulerAngle) {
      // Convention here: TaitâBryan angles Z-X'-Y'', where:
      //   alpha is in [0; +360[,
      //   beta is in [-90; +90[,
      //   gamma is in [-180; +180[.
      var alphaIsValid = typeof eulerAngle[0] === 'number';

      var _alpha = alphaIsValid ? degToRad(eulerAngle[0]) : 0;

      var _beta = degToRad(eulerAngle[1]);

      var _gamma = degToRad(eulerAngle[2]);

      var cA = Math.cos(_alpha);
      var cB = Math.cos(_beta);
      var cG = Math.cos(_gamma);
      var sA = Math.sin(_alpha);
      var sB = Math.sin(_beta);
      var sG = Math.sin(_gamma);
      var alpha = void 0,
          beta = void 0,
          gamma = void 0;
      var m = [cA * cG - sA * sB * sG, -cB * sA, cA * sG + cG * sA * sB, cG * sA + cA * sB * sG, cA * cB, sA * sG - cA * cG * sB, -cB * sG, sB, cB * cG];
      normalize(m);
      alpha = Math.atan2(-m[1], m[4]);
      alpha += alpha < 0 ? 2 * Math.PI : 0; // atan2 returns a number between -pi and +pi => make sure alpha is in [0, 2*pi[.

      beta = Math.asin(m[7]); // asin returns a number between -pi/2 and pi/2 => OK

      gamma = Math.atan2(-m[6], m[8]); // atan2 returns a number between -pi and +pi => OK

      eulerAngle[0] = alphaIsValid ? radToDeg(alpha) : null;
      eulerAngle[1] = radToDeg(beta);
      eulerAngle[2] = radToDeg(gamma);
    }
    /**
     * `DeviceOrientationModule` singleton.
     * The `DeviceOrientationModule` singleton provides the raw values
     * of the orientation provided by the `DeviceMotion` event.
     * It also instantiate the `Orientation` submodule that unifies those
     * values across platforms by making them compliant with {@link
     * http://www.w3.org/TR/orientation-event/|the W3C standard} (*i.e.*
     * the `alpha` angle between `0` and `360` degrees, the `beta` angle
     * between `-180` and `180` degrees, and `gamma` between `-90` and
     * `90` degrees), as well as the `OrientationAlt` submodules (with
     * the `alpha` angle between `0` and `360` degrees, the `beta` angle
     * between `-90` and `90` degrees, and `gamma` between `-180` and
     * `180` degrees).
     * When the `orientation` raw values are not provided by the sensors,
     * this modules tries to recalculate `beta` and `gamma` from the
     * `AccelerationIncludingGravity` module, if available (in that case,
     * the `alpha` angle is impossible to retrieve since the compass is
     * not available).
     *
     * @class DeviceMotionModule
     * @extends InputModule
     */


    var DeviceOrientationModule = function (_InputModule) {
      _inherits(DeviceOrientationModule, _InputModule);
      /**
       * Creates the `DeviceOrientation` module instance.
       *
       * @constructor
       */


      function DeviceOrientationModule() {
        _classCallCheck(this, DeviceOrientationModule);
        /**
         * Raw values coming from the `deviceorientation` event sent by this module.
         *
         * @this DeviceOrientationModule
         * @type {number[]}
         * @default [null, null, null]
         */


        var _this = _possibleConstructorReturn(this, (DeviceOrientationModule.__proto__ || Object.getPrototypeOf(DeviceOrientationModule)).call(this, 'deviceorientation'));

        _this.event = [null, null, null];
        /**
         * The `Orientation` module.
         * Provides unified values of the orientation compliant with {@link
         * http://www.w3.org/TR/orientation-event/|the W3C standard}
         * (`alpha` in `[0, 360]`, beta in `[-180, +180]`, `gamma` in `[-90, +90]`).
         *
         * @this DeviceOrientationModule
         * @type {DOMEventSubmodule}
         */

        _this.orientation = new _DOMEventSubmodule2.default(_this, 'orientation');
        /**
         * The `OrientationAlt` module.
         * Provides alternative values of the orientation
         * (`alpha` in `[0, 360]`, beta in `[-90, +90]`, `gamma` in `[-180, +180]`).
         *
         * @this DeviceOrientationModule
         * @type {DOMEventSubmodule}
         */

        _this.orientationAlt = new _DOMEventSubmodule2.default(_this, 'orientationAlt');
        /**
         * Required submodules / events.
         *
         * @this DeviceOrientationModule
         * @type {object}
         * @property {bool} orientation - Indicates whether the `orientation` unified values are required or not (defaults to `false`).
         * @property {bool} orientationAlt - Indicates whether the `orientationAlt` values are required or not (defaults to `false`).
         */

        _this.required = {
          orientation: false,
          orientationAlt: false
        };
        /**
         * Resolve function of the module's promise.
         *
         * @this DeviceOrientationModule
         * @type {function}
         * @default null
         * @see DeviceOrientationModule#init
         */

        _this._promiseResolve = null;
        /**
         * Gravity vector calculated from the `accelerationIncludingGravity` unified values.
         *
         * @this DeviceOrientationModule
         * @type {number[]}
         * @default [0, 0, 0]
         */

        _this._estimatedGravity = [0, 0, 0];
        _this._processFunction = null;
        _this._process = _this._process.bind(_this);
        _this._deviceorientationCheck = _this._deviceorientationCheck.bind(_this);
        _this._deviceorientationListener = _this._deviceorientationListener.bind(_this);
        return _this;
      }
      /**
       * Sensor check on initialization of the module.
       * This method:
       * - checks whether the `orientation` values are valid or not;
       * - (in the case where orientation raw values are not provided)
       *   tries to calculate the orientation from the
       *   `accelerationIncludingGravity` unified values.
       *
       * @param {DeviceMotionEvent} e - First `'devicemotion'` event caught, on which the check is done.
       */


      _createClass(DeviceOrientationModule, [{
        key: '_deviceorientationCheck',
        value: function _deviceorientationCheck(e) {
          // clear timeout (anti-Firefox bug solution, window event deviceorientation being nver called)
          // set the set timeout in init() function
          clearTimeout(this._checkTimeoutId);
          this.isProvided = true; // Sensor availability for the orientation and alternative orientation

          var rawValuesProvided = typeof e.alpha === 'number' && typeof e.beta === 'number' && typeof e.gamma === 'number';
          this.orientation.isProvided = rawValuesProvided;
          this.orientationAlt.isProvided = rawValuesProvided; // TODO(?): get pseudo-period
          // swap the process function to the

          this._processFunction = this._deviceorientationListener; // If orientation or alternative orientation are not provided by raw sensors but required,
          // try to calculate them with `accelerationIncludingGravity` unified values

          if (this.required.orientation && !this.orientation.isProvided || this.required.orientationAlt && !this.orientationAlt.isProvided) this._tryAccelerationIncludingGravityFallback();else this._promiseResolve(this);
        }
        /**
         * `'deviceorientation'` event callback.
         * This method emits an event with the raw `'deviceorientation'` values,
         * and emits events with the unified `orientation` and / or the
         * `orientationAlt` values if they are required.
         *
         * @param {DeviceOrientationEvent} e - `'deviceorientation'` event the values are calculated from.
         */

      }, {
        key: '_deviceorientationListener',
        value: function _deviceorientationListener(e) {
          // 'deviceorientation' event (raw values)
          var outEvent = this.event;
          outEvent[0] = e.alpha;
          outEvent[1] = e.beta;
          outEvent[2] = e.gamma;
          if (this.listeners.size > 0) this.emit(outEvent); // 'orientation' event (unified values)

          if (this.orientation.listeners.size > 0 && this.required.orientation && this.orientation.isProvided) {
            // On iOS, the `alpha` value is initialized at `0` on the first `deviceorientation` event
            // so we keep that reference in memory to calculate the North later on
            if (!this.orientation._webkitCompassHeadingReference && e.webkitCompassHeading && _platform2.default.os.family === 'iOS') this.orientation._webkitCompassHeadingReference = e.webkitCompassHeading;
            var _outEvent = this.orientation.event;
            _outEvent[0] = e.alpha;
            _outEvent[1] = e.beta;
            _outEvent[2] = e.gamma; // On iOS, replace the `alpha` value by the North value and unify the angles
            // (the default representation of the angles on iOS is not compliant with the W3C specification)

            if (this.orientation._webkitCompassHeadingReference && _platform2.default.os.family === 'iOS') {
              _outEvent[0] += 360 - this.orientation._webkitCompassHeadingReference;
              unify(_outEvent);
            }

            this.orientation.emit(_outEvent);
          } // 'orientationAlt' event


          if (this.orientationAlt.listeners.size > 0 && this.required.orientationAlt && this.orientationAlt.isProvided) {
            // On iOS, the `alpha` value is initialized at `0` on the first `deviceorientation` event
            // so we keep that reference in memory to calculate the North later on
            if (!this.orientationAlt._webkitCompassHeadingReference && e.webkitCompassHeading && _platform2.default.os.family === 'iOS') this.orientationAlt._webkitCompassHeadingReference = e.webkitCompassHeading;
            var _outEvent2 = this.orientationAlt.event;
            _outEvent2[0] = e.alpha;
            _outEvent2[1] = e.beta;
            _outEvent2[2] = e.gamma; // On iOS, replace the `alpha` value by the North value but do not convert the angles
            // (the default representation of the angles on iOS is compliant with the alternative representation)

            if (this.orientationAlt._webkitCompassHeadingReference && _platform2.default.os.family === 'iOS') {
              _outEvent2[0] -= this.orientationAlt._webkitCompassHeadingReference;
              _outEvent2[0] += _outEvent2[0] < 0 ? 360 : 0; // make sure `alpha` is in [0, +360[
            } // On Android, transform the angles to the alternative representation
            // (the default representation of the angles on Android is compliant with the W3C specification)


            if (_platform2.default.os.family === 'Android') unifyAlt(_outEvent2);
            this.orientationAlt.emit(_outEvent2);
          }
        }
        /**
         * Checks whether `beta` and `gamma` can be calculated from the `accelerationIncludingGravity` values or not.
         */

      }, {
        key: '_tryAccelerationIncludingGravityFallback',
        value: function _tryAccelerationIncludingGravityFallback() {
          var _this2 = this;

          _MotionInput2.default.requireModule('accelerationIncludingGravity').then(function (accelerationIncludingGravity) {
            if (accelerationIncludingGravity.isValid) {
              console.log("WARNING (motion-input): The 'deviceorientation' event does not exist or does not provide values in your browser, so the orientation of the device is estimated from DeviceMotion's 'accelerationIncludingGravity' event. Since the compass is not available, only the `beta` and `gamma` angles are provided (`alpha` is null).");

              if (_this2.required.orientation) {
                _this2.orientation.isCalculated = true;
                _this2.orientation.period = accelerationIncludingGravity.period;

                _MotionInput2.default.addListener('accelerationIncludingGravity', function (accelerationIncludingGravity) {
                  _this2._calculateBetaAndGammaFromAccelerationIncludingGravity(accelerationIncludingGravity);
                });
              }

              if (_this2.required.orientationAlt) {
                _this2.orientationAlt.isCalculated = true;
                _this2.orientationAlt.period = accelerationIncludingGravity.period;

                _MotionInput2.default.addListener('accelerationIncludingGravity', function (accelerationIncludingGravity) {
                  _this2._calculateBetaAndGammaFromAccelerationIncludingGravity(accelerationIncludingGravity, true);
                });
              }
            }

            _this2._promiseResolve(_this2);
          });
        }
        /**
         * Calculates and emits `beta` and `gamma` values as a fallback of the `orientation` and / or `orientationAlt` events, from the `accelerationIncludingGravity` unified values.
         *
         * @param {number[]} accelerationIncludingGravity - Latest `accelerationIncludingGravity raw values.
         * @param {bool} [alt=false] - Indicates whether we need the alternate representation of the angles or not.
         */

      }, {
        key: '_calculateBetaAndGammaFromAccelerationIncludingGravity',
        value: function _calculateBetaAndGammaFromAccelerationIncludingGravity(accelerationIncludingGravity) {
          var alt = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
          var k = 0.8; // Low pass filter to estimate the gravity

          this._estimatedGravity[0] = k * this._estimatedGravity[0] + (1 - k) * accelerationIncludingGravity[0];
          this._estimatedGravity[1] = k * this._estimatedGravity[1] + (1 - k) * accelerationIncludingGravity[1];
          this._estimatedGravity[2] = k * this._estimatedGravity[2] + (1 - k) * accelerationIncludingGravity[2];
          var _gX = this._estimatedGravity[0];
          var _gY = this._estimatedGravity[1];
          var _gZ = this._estimatedGravity[2];
          var norm = Math.sqrt(_gX * _gX + _gY * _gY + _gZ * _gZ);
          _gX /= norm;
          _gY /= norm;
          _gZ /= norm; // Adopting the following conventions:
          // - each matrix operates by pre-multiplying column vectors,
          // - each matrix represents an active rotation,
          // - each matrix represents the composition of intrinsic rotations,
          // the rotation matrix representing the composition of a rotation
          // about the x-axis by an angle beta and a rotation about the y-axis
          // by an angle gamma is:
          //
          // [ cos(gamma)               ,  0          ,  sin(gamma)              ,
          //   sin(beta) * sin(gamma)   ,  cos(beta)  ,  -cos(gamma) * sin(beta) ,
          //   -cos(beta) * sin(gamma)  ,  sin(beta)  ,  cos(beta) * cos(gamma)  ].
          //
          // Hence, the projection of the normalized gravity g = [0, 0, 1]
          // in the device's reference frame corresponds to:
          //
          // gX = -cos(beta) * sin(gamma),
          // gY = sin(beta),
          // gZ = cos(beta) * cos(gamma),
          //
          // so beta = asin(gY) and gamma = atan2(-gX, gZ).
          // Beta & gamma equations (we approximate [gX, gY, gZ] by [_gX, _gY, _gZ])

          var beta = radToDeg(Math.asin(_gY)); // beta is in [-pi/2; pi/2[

          var gamma = radToDeg(Math.atan2(-_gX, _gZ)); // gamma is in [-pi; pi[

          if (alt) {
            // In that case, there is nothing to do since the calculations above gave the angle in the right ranges
            var outEvent = this.orientationAlt.event;
            outEvent[0] = null;
            outEvent[1] = beta;
            outEvent[2] = gamma;
            this.orientationAlt.emit(outEvent);
          } else {
            // Here we have to unify the angles to get the ranges compliant with the W3C specification
            var _outEvent3 = this.orientation.event;
            _outEvent3[0] = null;
            _outEvent3[1] = beta;
            _outEvent3[2] = gamma;
            unify(_outEvent3);
            this.orientation.emit(_outEvent3);
          }
        }
      }, {
        key: '_process',
        value: function _process(data) {
          this._processFunction(data);
        }
        /**
         * Initializes of the module.
         *
         * @return {Promise}
         */

      }, {
        key: 'init',
        value: function init() {
          var _this3 = this;

          return _get(DeviceOrientationModule.prototype.__proto__ || Object.getPrototypeOf(DeviceOrientationModule.prototype), 'init', this).call(this, function (resolve) {
            _this3._promiseResolve = resolve;

            if (window.DeviceOrientationEvent) {
              _this3._processFunction = _this3._deviceorientationCheck; // feature detect

              if (typeof DeviceOrientationEvent.requestPermission === 'function') {
                DeviceOrientationEvent.requestPermission().then(function (permissionState) {
                  if (permissionState === 'granted') {
                    window.addEventListener('deviceorientation', _this3._process, false); // set fallback timeout for Firefox (its window never calling the DeviceOrientation event, a 
                    // require of the DeviceOrientation service will result in the require promise never being resolved
                    // hence the Experiment start() method never called)

                    _this3._checkTimeoutId = setTimeout(function () {
                      return resolve(_this3);
                    }, 500);
                  }
                }).catch(console.error);
              } else {
                // handle regular non iOS 13+ devices
                window.addEventListener('deviceorientation', _this3._process, false); // set fallback timeout for Firefox (its window never calling the DeviceOrientation event, a 
                // require of the DeviceOrientation service will result in the require promise never being resolved
                // hence the Experiment start() method never called)

                _this3._checkTimeoutId = setTimeout(function () {
                  return resolve(_this3);
                }, 500);
              }
            } else if (_this3.required.orientation) {
              _this3._tryAccelerationIncludingGravityFallback();
            } else {
              resolve(_this3);
            }
          });
        }
      }]);

      return DeviceOrientationModule;
    }(_InputModule3.default);

    exports.default = new DeviceOrientationModule();
  });
  unwrapExports(DeviceOrientationModule_1);

  var DeviceMotionModule_1 = createCommonjsModule(function (module, exports) {

    Object.defineProperty(exports, "__esModule", {
      value: true
    });

    var _createClass = function () {
      function defineProperties(target, props) {
        for (var i = 0; i < props.length; i++) {
          var descriptor = props[i];
          descriptor.enumerable = descriptor.enumerable || false;
          descriptor.configurable = true;
          if ("value" in descriptor) descriptor.writable = true;
          Object.defineProperty(target, descriptor.key, descriptor);
        }
      }

      return function (Constructor, protoProps, staticProps) {
        if (protoProps) defineProperties(Constructor.prototype, protoProps);
        if (staticProps) defineProperties(Constructor, staticProps);
        return Constructor;
      };
    }();

    var _get = function get(object, property, receiver) {
      if (object === null) object = Function.prototype;
      var desc = Object.getOwnPropertyDescriptor(object, property);

      if (desc === undefined) {
        var parent = Object.getPrototypeOf(object);

        if (parent === null) {
          return undefined;
        } else {
          return get(parent, property, receiver);
        }
      } else if ("value" in desc) {
        return desc.value;
      } else {
        var getter = desc.get;

        if (getter === undefined) {
          return undefined;
        }

        return getter.call(receiver);
      }
    };

    var _InputModule3 = _interopRequireDefault(InputModule_1);

    var _DOMEventSubmodule2 = _interopRequireDefault(DOMEventSubmodule_1);

    var _MotionInput2 = _interopRequireDefault(MotionInput_1);

    var _platform2 = _interopRequireDefault(platform$1);

    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : {
        default: obj
      };
    }

    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }

    function _possibleConstructorReturn(self, call) {
      if (!self) {
        throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
      }

      return call && (typeof call === "object" || typeof call === "function") ? call : self;
    }

    function _inherits(subClass, superClass) {
      if (typeof superClass !== "function" && superClass !== null) {
        throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
      }

      subClass.prototype = Object.create(superClass && superClass.prototype, {
        constructor: {
          value: subClass,
          enumerable: false,
          writable: true,
          configurable: true
        }
      });
      if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
    }
    /**
     * Gets the current local time in seconds.
     * Uses `window.performance.now()` if available, and `Date.now()` otherwise.
     *
     * @return {number}
     */


    function getLocalTime() {
      if (window.performance) return window.performance.now() / 1000;
      return Date.now() / 1000;
    }

    var chromeRegExp = /Chrome/;
    var toDeg = 180 / Math.PI;
    /**
     * `DeviceMotion` module singleton.
     * The `DeviceMotionModule` singleton provides the raw values
     * of the acceleration including gravity, acceleration, and rotation
     * rate provided by the `DeviceMotion` event.
     * It also instantiate the `AccelerationIncludingGravity`,
     * `Acceleration` and `RotationRate` submodules that unify those values
     * across platforms by making them compliant with {@link
     * http://www.w3.org/TR/orientation-event/|the W3C standard}.
     * When raw values are not provided by the sensors, this modules tries
     * to recalculate them from available values:
     * - `acceleration` is calculated from `accelerationIncludingGravity`
     *   with a high-pass filter;
     * - (coming soon â waiting for a bug on Chrome to be resolved)
     *   `rotationRate` is calculated from `orientation`.
     *
     * @class DeviceMotionModule
     * @extends InputModule
     */

    var DeviceMotionModule = function (_InputModule) {
      _inherits(DeviceMotionModule, _InputModule);
      /**
       * Creates the `DeviceMotion` module instance.
       *
       * @constructor
       */


      function DeviceMotionModule() {
        _classCallCheck(this, DeviceMotionModule);
        /**
         * Raw values coming from the `devicemotion` event sent by this module.
         *
         * @this DeviceMotionModule
         * @type {number[]}
         * @default [null, null, null, null, null, null, null, null, null]
         */


        var _this = _possibleConstructorReturn(this, (DeviceMotionModule.__proto__ || Object.getPrototypeOf(DeviceMotionModule)).call(this, 'devicemotion'));

        _this.event = [null, null, null, null, null, null, null, null, null];
        /**
         * The `AccelerationIncludingGravity` module.
         * Provides unified values of the acceleration including gravity.
         *
         * @this DeviceMotionModule
         * @type {DOMEventSubmodule}
         */

        _this.accelerationIncludingGravity = new _DOMEventSubmodule2.default(_this, 'accelerationIncludingGravity');
        /**
         * The `Acceleration` submodule.
         * Provides unified values of the acceleration.
         * Estimates the acceleration values from `accelerationIncludingGravity`
         * raw values if the acceleration raw values are not available on the
         * device.
         *
         * @this DeviceMotionModule
         * @type {DOMEventSubmodule}
         */

        _this.acceleration = new _DOMEventSubmodule2.default(_this, 'acceleration');
        /**
         * The `RotationRate` submodule.
         * Provides unified values of the rotation rate.
         * (coming soon, waiting for a bug on Chrome to be resolved)
         * Estimates the rotation rate values from `orientation` values if
         * the rotation rate raw values are not available on the device.
         *
         * @this DeviceMotionModule
         * @type {DOMEventSubmodule}
         */

        _this.rotationRate = new _DOMEventSubmodule2.default(_this, 'rotationRate');
        /**
         * Required submodules / events.
         *
         * @this DeviceMotionModule
         * @type {object}
         * @property {bool} accelerationIncludingGravity - Indicates whether the `accelerationIncludingGravity` unified values are required or not (defaults to `false`).
         * @property {bool} acceleration - Indicates whether the `acceleration` unified values are required or not (defaults to `false`).
         * @property {bool} rotationRate - Indicates whether the `rotationRate` unified values are required or not (defaults to `false`).
         */

        _this.required = {
          accelerationIncludingGravity: false,
          acceleration: false,
          rotationRate: false
        };
        /**
         * Resolve function of the module's promise.
         *
         * @this DeviceMotionModule
         * @type {function}
         * @default null
         * @see DeviceMotionModule#init
         */

        _this._promiseResolve = null;
        /**
         * Unifying factor of the motion data values (`1` on Android, `-1` on iOS).
         *
         * @this DeviceMotionModule
         * @type {number}
         */

        _this._unifyMotionData = _platform2.default.os.family === 'iOS' ? -1 : 1;
        /**
         * Unifying factor of the period (`1` on Android, `1` on iOS). in sec
         * @todo - unify with e.interval specification (in ms) ?
         *
         * @this DeviceMotionModule
         * @type {number}
         */

        _this._unifyPeriod = _platform2.default.os.family === 'Android' ? 0.001 : 1;
        /**
         * Acceleration calculated from the `accelerationIncludingGravity` raw values.
         *
         * @this DeviceMotionModule
         * @type {number[]}
         * @default [0, 0, 0]
         */

        _this._calculatedAcceleration = [0, 0, 0];
        /**
         * Time constant (half-life) of the high-pass filter used to smooth the acceleration values calculated from the acceleration including gravity raw values (in seconds).
         *
         * @this DeviceMotionModule
         * @type {number}
         * @default 0.1
         * @constant
         */

        _this._calculatedAccelerationTimeConstant = 0.1;
        /**
         * Latest `accelerationIncludingGravity` raw value, used in the high-pass filter to calculate the acceleration (if the `acceleration` values are not provided by `'devicemotion'`).
         *
         * @this DeviceMotionModule
         * @type {number[]}
         * @default [0, 0, 0]
         */

        _this._lastAccelerationIncludingGravity = [0, 0, 0];
        /**
         * Rotation rate calculated from the orientation values.
         *
         * @this DeviceMotionModule
         * @type {number[]}
         * @default [0, 0, 0]
         */

        _this._calculatedRotationRate = [0, 0, 0];
        /**
         * Latest orientation value, used to calculate the rotation rate  (if the `rotationRate` values are not provided by `'devicemotion'`).
         *
         * @this DeviceMotionModule
         * @type {number[]}
         * @default [0, 0, 0]
         */

        _this._lastOrientation = [0, 0, 0];
        /**
         * Latest orientation timestamps, used to calculate the rotation rate (if the `rotationRate` values are not provided by `'devicemotion'`).
         *
         * @this DeviceMotionModule
         * @type {number[]}
         * @default [0, 0, 0]
         */

        _this._lastOrientationTimestamp = null;
        _this._processFunction = null;
        _this._process = _this._process.bind(_this);
        _this._devicemotionCheck = _this._devicemotionCheck.bind(_this);
        _this._devicemotionListener = _this._devicemotionListener.bind(_this);
        _this._checkCounter = 0;
        return _this;
      }
      /**
       * Decay factor of the high-pass filter used to calculate the acceleration from the `accelerationIncludingGravity` raw values.
       *
       * @type {number}
       * @readonly
       */


      _createClass(DeviceMotionModule, [{
        key: '_devicemotionCheck',

        /**
         * Sensor check on initialization of the module.
         * This method:
         * - checks whether the `accelerationIncludingGravity`, the `acceleration`,
         *   and the `rotationRate` values are valid or not;
         * - gets the period of the `'devicemotion'` event and sets the period of
         *   the `AccelerationIncludingGravity`, `Acceleration`, and `RotationRate`
         *   submodules;
         * - (in the case where acceleration raw values are not provided)
         *   indicates whether the acceleration can be calculated from the
         *   `accelerationIncludingGravity` unified values or not.
         *
         * @param {DeviceMotionEvent} e - The first `'devicemotion'` event caught.
         */
        value: function _devicemotionCheck(e) {
          // clear timeout (anti-Firefox bug solution, window event deviceorientation being nver called)
          // set the set timeout in init() function
          clearTimeout(this._checkTimeoutId);
          this.isProvided = true;
          this.period = e.interval / 1000;
          this.interval = e.interval; // Sensor availability for the acceleration including gravity

          this.accelerationIncludingGravity.isProvided = e.accelerationIncludingGravity && typeof e.accelerationIncludingGravity.x === 'number' && typeof e.accelerationIncludingGravity.y === 'number' && typeof e.accelerationIncludingGravity.z === 'number';
          this.accelerationIncludingGravity.period = e.interval * this._unifyPeriod; // Sensor availability for the acceleration

          this.acceleration.isProvided = e.acceleration && typeof e.acceleration.x === 'number' && typeof e.acceleration.y === 'number' && typeof e.acceleration.z === 'number';
          this.acceleration.period = e.interval * this._unifyPeriod; // Sensor availability for the rotation rate

          this.rotationRate.isProvided = e.rotationRate && typeof e.rotationRate.alpha === 'number' && typeof e.rotationRate.beta === 'number' && typeof e.rotationRate.gamma === 'number';
          this.rotationRate.period = e.interval * this._unifyPeriod; // in firefox android, accelerationIncludingGravity retrieve null values
          // on the first callback. so wait a second call to be sure.

          if (_platform2.default.os.family === 'Android' && /Firefox/.test(_platform2.default.name) && this._checkCounter < 1) {
            this._checkCounter++;
          } else {
            // now that the sensors are checked, replace the process function with
            // the final listener
            this._processFunction = this._devicemotionListener; // if acceleration is not provided by raw sensors, indicate whether it
            // can be calculated with `accelerationincludinggravity` or not

            if (!this.acceleration.isProvided) this.acceleration.isCalculated = this.accelerationIncludingGravity.isProvided; // WARNING
            // The lines of code below are commented because of a bug of Chrome
            // on some Android devices, where 'devicemotion' events are not sent
            // or caught if the listener is set up after a 'deviceorientation'
            // listener. Here, the _tryOrientationFallback method would add a
            // 'deviceorientation' listener and block all subsequent 'devicemotion'
            // events on these devices. Comments will be removed once the bug of
            // Chrome is corrected.
            // if (this.required.rotationRate && !this.rotationRate.isProvided)
            //   this._tryOrientationFallback();
            // else

            this._promiseResolve(this);
          }
        }
        /**
         * `'devicemotion'` event callback.
         * This method emits an event with the raw `'devicemotion'` values, and emits
         * events with the unified `accelerationIncludingGravity`, `acceleration`,
         * and / or `rotationRate` values if they are required.
         *
         * @param {DeviceMotionEvent} e - `'devicemotion'` event the values are calculated from.
         */

      }, {
        key: '_devicemotionListener',
        value: function _devicemotionListener(e) {
          // 'devicemotion' event (raw values)
          if (this.listeners.size > 0) this._emitDeviceMotionEvent(e); // alert(`${this.accelerationIncludingGravity.listeners.size} -
          //     ${this.required.accelerationIncludingGravity} -
          //     ${this.accelerationIncludingGravity.isValid}
          // `);
          // 'acceleration' event (unified values)

          if (this.accelerationIncludingGravity.listeners.size > 0 && this.required.accelerationIncludingGravity && this.accelerationIncludingGravity.isValid) {
            this._emitAccelerationIncludingGravityEvent(e);
          } // 'accelerationIncludingGravity' event (unified values)
          // the fallback calculation of the acceleration happens in the
          //  `_emitAcceleration` method, so we check if this.acceleration.isValid


          if (this.acceleration.listeners.size > 0 && this.required.acceleration && this.acceleration.isValid) {
            this._emitAccelerationEvent(e);
          } // 'rotationRate' event (unified values)
          // the fallback calculation of the rotation rate does NOT happen in the
          // `_emitRotationRate` method, so we only check if this.rotationRate.isProvided


          if (this.rotationRate.listeners.size > 0 && this.required.rotationRate && this.rotationRate.isProvided) {
            this._emitRotationRateEvent(e);
          }
        }
        /**
         * Emits the `'devicemotion'` raw values.
         *
         * @param {DeviceMotionEvent} e - `'devicemotion'` event the values are calculated from.
         */

      }, {
        key: '_emitDeviceMotionEvent',
        value: function _emitDeviceMotionEvent(e) {
          var outEvent = this.event;

          if (e.accelerationIncludingGravity) {
            outEvent[0] = e.accelerationIncludingGravity.x;
            outEvent[1] = e.accelerationIncludingGravity.y;
            outEvent[2] = e.accelerationIncludingGravity.z;
          }

          if (e.acceleration) {
            outEvent[3] = e.acceleration.x;
            outEvent[4] = e.acceleration.y;
            outEvent[5] = e.acceleration.z;
          }

          if (e.rotationRate) {
            outEvent[6] = e.rotationRate.alpha;
            outEvent[7] = e.rotationRate.beta;
            outEvent[8] = e.rotationRate.gamma;
          }

          this.emit(outEvent);
        }
        /**
         * Emits the `accelerationIncludingGravity` unified values.
         *
         * @param {DeviceMotionEvent} e - `'devicemotion'` event the values are calculated from.
         */

      }, {
        key: '_emitAccelerationIncludingGravityEvent',
        value: function _emitAccelerationIncludingGravityEvent(e) {
          var outEvent = this.accelerationIncludingGravity.event;
          outEvent[0] = e.accelerationIncludingGravity.x * this._unifyMotionData;
          outEvent[1] = e.accelerationIncludingGravity.y * this._unifyMotionData;
          outEvent[2] = e.accelerationIncludingGravity.z * this._unifyMotionData;
          this.accelerationIncludingGravity.emit(outEvent);
        }
        /**
         * Emits the `acceleration` unified values.
         * When the `acceleration` raw values are not available, the method
         * also calculates the acceleration from the
         * `accelerationIncludingGravity` raw values.
         *
         * @param {DeviceMotionEvent} e - The `'devicemotion'` event.
         */

      }, {
        key: '_emitAccelerationEvent',
        value: function _emitAccelerationEvent(e) {
          var outEvent = this.acceleration.event;

          if (this.acceleration.isProvided) {
            // If raw acceleration values are provided
            outEvent[0] = e.acceleration.x * this._unifyMotionData;
            outEvent[1] = e.acceleration.y * this._unifyMotionData;
            outEvent[2] = e.acceleration.z * this._unifyMotionData;
          } else if (this.accelerationIncludingGravity.isValid) {
            // Otherwise, if accelerationIncludingGravity values are provided,
            // estimate the acceleration with a high-pass filter
            var accelerationIncludingGravity = [e.accelerationIncludingGravity.x * this._unifyMotionData, e.accelerationIncludingGravity.y * this._unifyMotionData, e.accelerationIncludingGravity.z * this._unifyMotionData];
            var k = this._calculatedAccelerationDecay; // High-pass filter to estimate the acceleration (without the gravity)

            this._calculatedAcceleration[0] = (1 + k) * 0.5 * (accelerationIncludingGravity[0] - this._lastAccelerationIncludingGravity[0]) + k * this._calculatedAcceleration[0];
            this._calculatedAcceleration[1] = (1 + k) * 0.5 * (accelerationIncludingGravity[1] - this._lastAccelerationIncludingGravity[1]) + k * this._calculatedAcceleration[1];
            this._calculatedAcceleration[2] = (1 + k) * 0.5 * (accelerationIncludingGravity[2] - this._lastAccelerationIncludingGravity[2]) + k * this._calculatedAcceleration[2];
            this._lastAccelerationIncludingGravity[0] = accelerationIncludingGravity[0];
            this._lastAccelerationIncludingGravity[1] = accelerationIncludingGravity[1];
            this._lastAccelerationIncludingGravity[2] = accelerationIncludingGravity[2];
            outEvent[0] = this._calculatedAcceleration[0];
            outEvent[1] = this._calculatedAcceleration[1];
            outEvent[2] = this._calculatedAcceleration[2];
          }

          this.acceleration.emit(outEvent);
        }
        /**
         * Emits the `rotationRate` unified values.
         *
         * @param {DeviceMotionEvent} e - `'devicemotion'` event the values are calculated from.
         */

      }, {
        key: '_emitRotationRateEvent',
        value: function _emitRotationRateEvent(e) {
          var outEvent = this.rotationRate.event; // In all platforms, rotation axes are messed up according to the spec
          // https://w3c.github.io/deviceorientation/spec-source-orientation.html
          //
          // gamma should be alpha
          // alpha should be beta
          // beta should be gamma

          outEvent[0] = e.rotationRate.gamma;
          outEvent[1] = e.rotationRate.alpha, outEvent[2] = e.rotationRate.beta; // Chrome Android retrieve values that are in rad/s
          // cf. https://bugs.chromium.org/p/chromium/issues/detail?id=541607
          //
          // From spec: "The rotationRate attribute must be initialized with the rate
          // of rotation of the hosting device in space. It must be expressed as the
          // rate of change of the angles defined in section 4.1 and must be expressed
          // in degrees per second (deg/s)."
          //
          // fixed since Chrome 65
          // cf. https://github.com/immersive-web/webvr-polyfill/issues/307

          if (_platform2.default.os.family === 'Android' && chromeRegExp.test(_platform2.default.name) && parseInt(_platform2.default.version.split('.')[0]) < 65) {
            outEvent[0] *= toDeg;
            outEvent[1] *= toDeg, outEvent[2] *= toDeg;
          }

          this.rotationRate.emit(outEvent);
        }
        /**
         * Calculates and emits the `rotationRate` unified values from the `orientation` values.
         *
         * @param {number[]} orientation - Latest `orientation` raw values.
         */

      }, {
        key: '_calculateRotationRateFromOrientation',
        value: function _calculateRotationRateFromOrientation(orientation) {
          var now = getLocalTime();
          var k = 0.8; // TODO: improve low pass filter (frames are not regular)

          var alphaIsValid = typeof orientation[0] === 'number';

          if (this._lastOrientationTimestamp) {
            var rAlpha = null;
            var rBeta = void 0;
            var rGamma = void 0;
            var alphaDiscontinuityFactor = 0;
            var betaDiscontinuityFactor = 0;
            var gammaDiscontinuityFactor = 0;
            var deltaT = now - this._lastOrientationTimestamp;

            if (alphaIsValid) {
              // alpha discontinuity (+360 -> 0 or 0 -> +360)
              if (this._lastOrientation[0] > 320 && orientation[0] < 40) alphaDiscontinuityFactor = 360;else if (this._lastOrientation[0] < 40 && orientation[0] > 320) alphaDiscontinuityFactor = -360;
            } // beta discontinuity (+180 -> -180 or -180 -> +180)


            if (this._lastOrientation[1] > 140 && orientation[1] < -140) betaDiscontinuityFactor = 360;else if (this._lastOrientation[1] < -140 && orientation[1] > 140) betaDiscontinuityFactor = -360; // gamma discontinuities (+180 -> -180 or -180 -> +180)

            if (this._lastOrientation[2] > 50 && orientation[2] < -50) gammaDiscontinuityFactor = 180;else if (this._lastOrientation[2] < -50 && orientation[2] > 50) gammaDiscontinuityFactor = -180;

            if (deltaT > 0) {
              // Low pass filter to smooth the data
              if (alphaIsValid) rAlpha = k * this._calculatedRotationRate[0] + (1 - k) * (orientation[0] - this._lastOrientation[0] + alphaDiscontinuityFactor) / deltaT;
              rBeta = k * this._calculatedRotationRate[1] + (1 - k) * (orientation[1] - this._lastOrientation[1] + betaDiscontinuityFactor) / deltaT;
              rGamma = k * this._calculatedRotationRate[2] + (1 - k) * (orientation[2] - this._lastOrientation[2] + gammaDiscontinuityFactor) / deltaT;
              this._calculatedRotationRate[0] = rAlpha;
              this._calculatedRotationRate[1] = rBeta;
              this._calculatedRotationRate[2] = rGamma;
            } // TODO: resample the emission rate to match the devicemotion rate


            this.rotationRate.emit(this._calculatedRotationRate);
          }

          this._lastOrientationTimestamp = now;
          this._lastOrientation[0] = orientation[0];
          this._lastOrientation[1] = orientation[1];
          this._lastOrientation[2] = orientation[2];
        }
        /**
         * Checks whether the rotation rate can be calculated from the `orientation` values or not.
         *
         * @todo - this should be reviewed to comply with the axis order defined
         *  in the spec
         */
        // WARNING
        // The lines of code below are commented because of a bug of Chrome
        // on some Android devices, where 'devicemotion' events are not sent
        // or caught if the listener is set up after a 'deviceorientation'
        // listener. Here, the _tryOrientationFallback method would add a
        // 'deviceorientation' listener and block all subsequent 'devicemotion'
        // events on these devices. Comments will be removed once the bug of
        // Chrome is corrected.
        // _tryOrientationFallback() {
        //   MotionInput.requireModule('orientation')
        //     .then((orientation) => {
        //       if (orientation.isValid) {
        //         console.log(`
        //           WARNING (motion-input): The 'devicemotion' event does not exists or
        //           does not provide rotation rate values in your browser, so the rotation
        //           rate of the device is estimated from the 'orientation', calculated
        //           from the 'deviceorientation' event. Since the compass might not
        //           be available, only \`beta\` and \`gamma\` angles may be provided
        //           (\`alpha\` would be null).`
        //         );
        //         this.rotationRate.isCalculated = true;
        //         MotionInput.addListener('orientation', (orientation) => {
        //           this._calculateRotationRateFromOrientation(orientation);
        //         });
        //       }
        //       this._promiseResolve(this);
        //     });
        // }

      }, {
        key: '_process',
        value: function _process(data) {
          this._processFunction(data);
        }
        /**
         * Initializes of the module.
         *
         * @return {promise}
         */

      }, {
        key: 'init',
        value: function init() {
          var _this2 = this;

          return _get(DeviceMotionModule.prototype.__proto__ || Object.getPrototypeOf(DeviceMotionModule.prototype), 'init', this).call(this, function (resolve) {
            _this2._promiseResolve = resolve;

            if (window.DeviceMotionEvent) {
              _this2._processFunction = _this2._devicemotionCheck; // feature detect

              if (typeof DeviceMotionEvent.requestPermission === 'function') {
                DeviceMotionEvent.requestPermission().then(function (permissionState) {
                  if (permissionState === 'granted') {
                    window.addEventListener('devicemotion', _this2._process);
                  }
                }).catch(console.error);
              } else {
                // handle regular non iOS 13+ devices
                window.addEventListener('devicemotion', _this2._process);
              } // set fallback timeout for Firefox desktop (its window never calling the DeviceOrientation event, a
              // require of the DeviceOrientation service will result in the require promise never being resolved
              // hence the Experiment start() method never called)
              // > note 02/02/2018: this seems to create problems with ipods that
              // don't have enough time to start (sometimes), hence creating false
              // negative. So we only apply to Firefox desktop and put a really
              // large value (4sec) just in case.


              if (_platform2.default.name === 'Firefox' && _platform2.default.os.family !== 'Android' && _platform2.default.os.family !== 'iOS') {
                console.warn('[motion-input] register timer for Firefox desktop');
                _this2._checkTimeoutId = setTimeout(function () {
                  return resolve(_this2);
                }, 4 * 1000);
              }
            } // WARNING
            // The lines of code below are commented because of a bug of Chrome
            // on some Android devices, where 'devicemotion' events are not sent
            // or caught if the listener is set up after a 'deviceorientation'
            // listener. Here, the _tryOrientationFallback method would add a
            // 'deviceorientation' listener and block all subsequent 'devicemotion'
            // events on these devices. Comments will be removed once the bug of
            // Chrome is corrected.
            // else if (this.required.rotationRate)
            // this._tryOrientationFallback();
            else resolve(_this2);
          });
        }
      }, {
        key: '_calculatedAccelerationDecay',
        get: function get() {
          return Math.exp(-2 * Math.PI * this.accelerationIncludingGravity.period / this._calculatedAccelerationTimeConstant);
        }
      }]);

      return DeviceMotionModule;
    }(_InputModule3.default);

    exports.default = new DeviceMotionModule();
  });
  unwrapExports(DeviceMotionModule_1);

  var EnergyModule_1 = createCommonjsModule(function (module, exports) {

    Object.defineProperty(exports, "__esModule", {
      value: true
    });

    var _slicedToArray = function () {
      function sliceIterator(arr, i) {
        var _arr = [];
        var _n = true;
        var _d = false;
        var _e = undefined;

        try {
          for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {
            _arr.push(_s.value);

            if (i && _arr.length === i) break;
          }
        } catch (err) {
          _d = true;
          _e = err;
        } finally {
          try {
            if (!_n && _i["return"]) _i["return"]();
          } finally {
            if (_d) throw _e;
          }
        }

        return _arr;
      }

      return function (arr, i) {
        if (Array.isArray(arr)) {
          return arr;
        } else if (Symbol.iterator in Object(arr)) {
          return sliceIterator(arr, i);
        } else {
          throw new TypeError("Invalid attempt to destructure non-iterable instance");
        }
      };
    }();

    var _createClass = function () {
      function defineProperties(target, props) {
        for (var i = 0; i < props.length; i++) {
          var descriptor = props[i];
          descriptor.enumerable = descriptor.enumerable || false;
          descriptor.configurable = true;
          if ("value" in descriptor) descriptor.writable = true;
          Object.defineProperty(target, descriptor.key, descriptor);
        }
      }

      return function (Constructor, protoProps, staticProps) {
        if (protoProps) defineProperties(Constructor.prototype, protoProps);
        if (staticProps) defineProperties(Constructor, staticProps);
        return Constructor;
      };
    }();

    var _get = function get(object, property, receiver) {
      if (object === null) object = Function.prototype;
      var desc = Object.getOwnPropertyDescriptor(object, property);

      if (desc === undefined) {
        var parent = Object.getPrototypeOf(object);

        if (parent === null) {
          return undefined;
        } else {
          return get(parent, property, receiver);
        }
      } else if ("value" in desc) {
        return desc.value;
      } else {
        var getter = desc.get;

        if (getter === undefined) {
          return undefined;
        }

        return getter.call(receiver);
      }
    };

    var _InputModule3 = _interopRequireDefault(InputModule_1);

    var _MotionInput2 = _interopRequireDefault(MotionInput_1);

    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : {
        default: obj
      };
    }

    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }

    function _possibleConstructorReturn(self, call) {
      if (!self) {
        throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
      }

      return call && (typeof call === "object" || typeof call === "function") ? call : self;
    }

    function _inherits(subClass, superClass) {
      if (typeof superClass !== "function" && superClass !== null) {
        throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
      }

      subClass.prototype = Object.create(superClass && superClass.prototype, {
        constructor: {
          value: subClass,
          enumerable: false,
          writable: true,
          configurable: true
        }
      });
      if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
    }
    /**
     * Energy module singleton.
     * The energy module singleton provides energy values (between 0 and 1)
     * based on the acceleration and the rotation rate of the device.
     * The period of the energy values is the same as the period of the
     * acceleration and the rotation rate values.
     *
     * @class EnergyModule
     * @extends InputModule
     */


    var EnergyModule = function (_InputModule) {
      _inherits(EnergyModule, _InputModule);
      /**
       * Creates the energy module instance.
       *
       * @constructor
       */


      function EnergyModule() {
        _classCallCheck(this, EnergyModule);
        /**
         * Event containing the value of the energy, sent by the energy module.
         *
         * @this EnergyModule
         * @type {number}
         * @default 0
         */


        var _this = _possibleConstructorReturn(this, (EnergyModule.__proto__ || Object.getPrototypeOf(EnergyModule)).call(this, 'energy'));

        _this.event = 0;
        /**
         * The acceleration module, used in the calculation of the energy.
         *
         * @this EnergyModule
         * @type {DOMEventSubmodule}
         * @default null
         * @see DevicemotionModule
         */

        _this._accelerationModule = null;
        /**
         * Latest acceleration value sent by the acceleration module.
         *
         * @this EnergyModule
         * @type {number[]}
         * @default null
         */

        _this._accelerationValues = null;
        /**
         * Maximum value reached by the acceleration magnitude, clipped at `this._accelerationMagnitudeThreshold`.
         *
         * @this EnergyModule
         * @type {number}
         * @default 9.81
         */

        _this._accelerationMagnitudeCurrentMax = 1 * 9.81;
        /**
         * Clipping value of the acceleration magnitude.
         *
         * @this EnergyModule
         * @type {number}
         * @default 20
         * @constant
         */

        _this._accelerationMagnitudeThreshold = 4 * 9.81;
        /**
         * The rotation rate module, used in the calculation of the energy.
         *
         * @this EnergyModule
         * @type {DOMEventSubmodule}
         * @default null
         * @see DevicemotionModule
         */

        _this._rotationRateModule = null;
        /**
         * Latest rotation rate value sent by the rotation rate module.
         *
         * @this EnergyModule
         * @type {number[]}
         * @default null
         */

        _this._rotationRateValues = null;
        /**
         * Maximum value reached by the rotation rate magnitude, clipped at `this._rotationRateMagnitudeThreshold`.
         *
         * @this EnergyModule
         * @type {number}
         * @default 400
         */

        _this._rotationRateMagnitudeCurrentMax = 400;
        /**
         * Clipping value of the rotation rate magnitude.
         *
         * @this EnergyModule
         * @type {number}
         * @default 600
         * @constant
         */

        _this._rotationRateMagnitudeThreshold = 600;
        /**
         * Time constant (half-life) of the low-pass filter used to smooth the energy values (in seconds).
         *
         * @this EnergyModule
         * @type {number}
         * @default 0.1
         * @constant
         */

        _this._energyTimeConstant = 0.1;
        _this._onAcceleration = _this._onAcceleration.bind(_this);
        _this._onRotationRate = _this._onRotationRate.bind(_this);
        return _this;
      }
      /**
       * Decay factor of the low-pass filter used to smooth the energy values.
       *
       * @type {number}
       * @readonly
       */


      _createClass(EnergyModule, [{
        key: 'init',

        /**
         * Initializes of the module.
         *
         * @return {Promise}
         */
        value: function init() {
          var _this2 = this;

          return _get(EnergyModule.prototype.__proto__ || Object.getPrototypeOf(EnergyModule.prototype), 'init', this).call(this, function (resolve) {
            // The energy module requires the acceleration and the rotation rate modules
            Promise.all([_MotionInput2.default.requireModule('acceleration'), _MotionInput2.default.requireModule('rotationRate')]).then(function (modules) {
              var _modules = _slicedToArray(modules, 2),
                  acceleration = _modules[0],
                  rotationRate = _modules[1];

              _this2._accelerationModule = acceleration;
              _this2._rotationRateModule = rotationRate;
              _this2.isCalculated = _this2._accelerationModule.isValid || _this2._rotationRateModule.isValid;
              if (_this2._accelerationModule.isValid) _this2.period = _this2._accelerationModule.period;else if (_this2._rotationRateModule.isValid) _this2.period = _this2._rotationRateModule.period;
              resolve(_this2);
            });
          });
        }
      }, {
        key: 'addListener',
        value: function addListener(listener) {
          if (this.listeners.size === 0) {
            if (this._accelerationModule.isValid) this._accelerationModule.addListener(this._onAcceleration);
            if (this._rotationRateModule.isValid) this._rotationRateModule.addListener(this._onRotationRate);
          }

          _get(EnergyModule.prototype.__proto__ || Object.getPrototypeOf(EnergyModule.prototype), 'addListener', this).call(this, listener);
        }
      }, {
        key: 'removeListener',
        value: function removeListener(listener) {
          _get(EnergyModule.prototype.__proto__ || Object.getPrototypeOf(EnergyModule.prototype), 'removeListener', this).call(this, listener);

          if (this.listeners.size === 0) {
            if (this._accelerationModule.isValid) this._accelerationModule.removeListener(this._onAcceleration);
            if (this._rotationRateModule.isValid) this._rotationRateModule.removeListener(this._onRotationRate);
          }
        }
        /**
         * Acceleration values handler.
         *
         * @param {number[]} acceleration - Latest acceleration value.
         */

      }, {
        key: '_onAcceleration',
        value: function _onAcceleration(acceleration) {
          this._accelerationValues = acceleration; // If the rotation rate values are not available, we calculate the energy right away.

          if (!this._rotationRateModule.isValid) this._calculateEnergy();
        }
        /**
         * Rotation rate values handler.
         *
         * @param {number[]} rotationRate - Latest rotation rate value.
         */

      }, {
        key: '_onRotationRate',
        value: function _onRotationRate(rotationRate) {
          this._rotationRateValues = rotationRate; // We know that the acceleration and rotation rate values coming from the
          // same `devicemotion` event are sent in that order (acceleration > rotation rate)
          // so when the rotation rate is provided, we calculate the energy value of the
          // latest `devicemotion` event when we receive the rotation rate values.

          this._calculateEnergy();
        }
        /**
         * Energy calculation: emits an energy value between 0 and 1.
         *
         * This method checks if the acceleration modules is valid. If that is the case,
         * it calculates an estimation of the energy (between 0 and 1) based on the ratio
         * of the current acceleration magnitude and the maximum acceleration magnitude
         * reached so far (clipped at the `this._accelerationMagnitudeThreshold` value).
         * (We use this trick to get uniform behaviors among devices. If we calculated
         * the ratio based on a fixed value independent of what the device is capable of
         * providing, we could get inconsistent behaviors. For instance, the devices
         * whose accelerometers are limited at 2g would always provide very low values
         * compared to devices with accelerometers capable of measuring 4g accelerations.)
         * The same checks and calculations are made on the rotation rate module.
         * Finally, the energy value is the maximum between the energy value estimated
         * from the acceleration, and the one estimated from the rotation rate. It is
         * smoothed through a low-pass filter.
         */

      }, {
        key: '_calculateEnergy',
        value: function _calculateEnergy() {
          var accelerationEnergy = 0;
          var rotationRateEnergy = 0; // Check the acceleration module and calculate an estimation of the energy value from the latest acceleration value

          if (this._accelerationModule.isValid) {
            var aX = this._accelerationValues[0];
            var aY = this._accelerationValues[1];
            var aZ = this._accelerationValues[2];
            var accelerationMagnitude = Math.sqrt(aX * aX + aY * aY + aZ * aZ); // Store the maximum acceleration magnitude reached so far, clipped at `this._accelerationMagnitudeThreshold`

            if (this._accelerationMagnitudeCurrentMax < accelerationMagnitude) this._accelerationMagnitudeCurrentMax = Math.min(accelerationMagnitude, this._accelerationMagnitudeThreshold); // TODO(?): remove ouliers --- on some Android devices, the magnitude is very high on a few isolated datapoints,
            // which make the threshold very high as well => the energy remains around 0.5, even when you shake very hard.

            accelerationEnergy = Math.min(accelerationMagnitude / this._accelerationMagnitudeCurrentMax, 1);
          } // Check the rotation rate module and calculate an estimation of the energy value from the latest rotation rate value


          if (this._rotationRateModule.isValid) {
            var rA = this._rotationRateValues[0];
            var rB = this._rotationRateValues[1];
            var rG = this._rotationRateValues[2];
            var rotationRateMagnitude = Math.sqrt(rA * rA + rB * rB + rG * rG); // Store the maximum rotation rate magnitude reached so far, clipped at `this._rotationRateMagnitudeThreshold`

            if (this._rotationRateMagnitudeCurrentMax < rotationRateMagnitude) this._rotationRateMagnitudeCurrentMax = Math.min(rotationRateMagnitude, this._rotationRateMagnitudeThreshold);
            rotationRateEnergy = Math.min(rotationRateMagnitude / this._rotationRateMagnitudeCurrentMax, 1);
          }

          var energy = Math.max(accelerationEnergy, rotationRateEnergy); // Low-pass filter to smooth the energy values

          var k = this._energyDecay;
          this.event = k * this.event + (1 - k) * energy; // Emit the energy value

          this.emit(this.event);
        }
      }, {
        key: '_energyDecay',
        get: function get() {
          return Math.exp(-2 * Math.PI * this.period / this._energyTimeConstant);
        }
      }]);

      return EnergyModule;
    }(_InputModule3.default);

    exports.default = new EnergyModule();
  });
  unwrapExports(EnergyModule_1);

  var dist$2 = createCommonjsModule(function (module, exports) {

    Object.defineProperty(exports, "__esModule", {
      value: true
    });

    var _MotionInput2 = _interopRequireDefault(MotionInput_1);

    var _DeviceOrientationModule2 = _interopRequireDefault(DeviceOrientationModule_1);

    var _DeviceMotionModule2 = _interopRequireDefault(DeviceMotionModule_1);

    var _EnergyModule2 = _interopRequireDefault(EnergyModule_1);

    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : {
        default: obj
      };
    }
    /**
     * The motion input module can be used as follows
     *
     * @example
     * import motionInput from 'motion-input';
     * const requiredEvents = ;
     *
     * motionInput
     *  .init(['acceleration', 'orientation', 'energy'])
     *  .then(([acceleration, orientation, energy]) => {
     *    if (acceleration.isValid) {
     *      acceleration.addListener((data) => {
     *        console.log('acceleration', data);
     *        // do something with the acceleration values
     *      });
     *    }
     *
     *    // ...
     *  });
     */


    _MotionInput2.default.addModule('devicemotion', _DeviceMotionModule2.default);

    _MotionInput2.default.addModule('deviceorientation', _DeviceOrientationModule2.default);

    _MotionInput2.default.addModule('accelerationIncludingGravity', _DeviceMotionModule2.default.accelerationIncludingGravity);

    _MotionInput2.default.addModule('acceleration', _DeviceMotionModule2.default.acceleration);

    _MotionInput2.default.addModule('rotationRate', _DeviceMotionModule2.default.rotationRate);

    _MotionInput2.default.addModule('orientation', _DeviceOrientationModule2.default.orientation);

    _MotionInput2.default.addModule('orientationAlt', _DeviceOrientationModule2.default.orientationAlt);

    _MotionInput2.default.addModule('energy', _EnergyModule2.default);

    exports.default = _MotionInput2.default;
  });
  unwrapExports(dist$2);

  var audioContext$3 = audio.audioContext;

  function setupOverlay(id) {
    var hasButton = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;
    var callback = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;
    var overlay = document.getElementById("".concat(id, "-overlay"));
    overlay.addEventListener('click', function () {
      if (callback) callback();else overlay.classList.remove('open');
    });

    if (hasButton) {
      var button = document.getElementById("".concat(id, "-button"));
      button.addEventListener('click', function () {
        return overlay.classList.add('open');
      });
    } else {
      overlay.classList.add('open');
    }

    return overlay;
  }

  function setupAudioInput() {
    return new Promise(function (resolve, reject) {
      if (navigator.mediaDevices) {
        navigator.mediaDevices.getUserMedia({
          audio: true
        }).then(function (stream) {
          resolve(stream);
        }).catch(function (e) {
          return reject('cannot access audio input');
        });
      } else {
        reject('cannot find audio input');
      }
    });
  }

  function resumeAudioContext() {
    if (audioContext$3) {
      if (audioContext$3.state === 'suspended') {
        return audioContext$3.resume();
      } else {
        return Promise.resolve();
      }
    } else {
      return Promise.reject('audio unavailable');
    }
  }

  var setup = [{
    id: [2730.000, 2275.000],
    re: [210.000, 212.317, 212.563, 212.809]
  }, {
    id: [5616.000, 4680.000],
    re: [432.000, 437.272, 437.778, 438.031]
  }, {
    id: [8528.000, 7106.667],
    re: [656.000, 663.239, 664.006, 664.773]
  }, {
    id: [11440.000, 9533.333],
    re: [880.000, 890.739, 891.769, 892.284]
  }, {
    id: [4095.000, 3412.500],
    re: [315.000, 318.476, 318.844, 319.213]
  }, {
    id: [8424.000, 7020.000],
    re: [648.000, 655.908, 656.666, 657.046]
  }, {
    id: [12792.000, 10660.000],
    re: [984.000, 994.859, 996.009, 997.160]
  }, {
    id: [17160.000, 14300.000],
    re: [1320.000, 1336.109, 1337.654, 1338.427]
  }, {
    id: [3412.500, 2843.750],
    re: [262.500, 265.397, 265.704, 266.011]
  }, {
    id: [7020.000, 5850.000],
    re: [540.000, 546.590, 547.222, 547.538]
  }, {
    id: [10660.000, 8883.333],
    re: [820.000, 829.049, 830.007, 830.967]
  }, {
    id: [14300.000, 11916.667],
    re: [1100.000, 1113.424, 1114.711, 1115.355]
  }];

  var os = null;
  var runningOnMobile = true;
  var selectorButtons = null;
  var welcomeOverlay = null;
  var errorOverlay = null;
  var currentIndex = -1;
  var currentIdFreqs = null;
  var audioContext$4 = audio.audioContext;
  var idSynth = null;
  var reSynth = null;
  var analyser = null;
  var analyserMin = -120;
  var analyserMax = 12;
  var analyserScale = 1 / (analyserMax - analyserMin);
  var canvasContainer = null;
  var canvas = null;
  var fftSize = 2048;
  var idFreqs = [];

  var _iterator = _createForOfIteratorHelper(setup),
      _step;

  try {
    for (_iterator.s(); !(_step = _iterator.n()).done;) {
      var s$1 = _step.value;

      var _iterator4 = _createForOfIteratorHelper(s$1.id),
          _step4;

      try {
        for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {
          var freq = _step4.value;
          idFreqs.push(freq);
        }
      } catch (err) {
        _iterator4.e(err);
      } finally {
        _iterator4.f();
      }
    }
  } catch (err) {
    _iterator.e(err);
  } finally {
    _iterator.f();
  }

  idFreqs.sort(function (a, b) {
    return a - b;
  });
  console.log(idFreqs);

  function decibelToPower$1(val) {
    return Math.exp(0.23025850929940458 * val); // pow(10, val / 10)
  }

  function initAudioInput() {
    Promise.all([resumeAudioContext(), setupAudioInput()]).then(function (_ref) {
      var _ref2 = _slicedToArray(_ref, 2),
          undefined$1 = _ref2[0],
          stream = _ref2[1];

      analyser = new SpectrumAnalyser(fftSize, idFreqs, 0.2, updateSpectrum);
      analyser.start();
      var mediaStreamSource = audioContext$4.createMediaStreamSource(stream);
      mediaStreamSource.connect(analyser.input);
      welcomeOverlay.classList.remove('open');
    }).catch(function (err) {
      // idSynth.stop();
      // reSynth.stop();
      // selectorButtons.deselect();
      errorOverlay.innerHTML = "Oops, ".concat(err, " (").concat(err.stack, ").");
      errorOverlay.classList.add('open');
    });
  }

  function onStart(index) {
    if (index !== currentIndex) {
      onStop(); // if (!initializedAudioInput) {
      //   initializedAudioInput = true;
      //   initAudioInput(index);
      // }

      var currentSet = setup[index];
      idSynth.start(currentSet.id, 0.1);
      reSynth.start(currentSet.re, 0);
      currentIndex = index;
      currentIdFreqs = currentSet.id;
    }
  }

  function onStop(index) {
    idSynth.stop();
    reSynth.stop();
    currentIndex = -1;
    currentIdFreqs = null;
  }

  function displaySpectrum(array) {
    var ctx = canvas.getContext('2d');
    var width = array.length;
    var height = canvas.height;
    canvas.width = width;
    ctx.strokeStyle = '#fff';
    ctx.lineWidth = 1;
    ctx.globalAlpha = 1;
    ctx.clearRect(0, 0, width, height);

    for (var i = 0; i < width; i++) {
      var y = analyserScale * (array[i] - analyserMin);
      ctx.beginPath();
      ctx.moveTo(i, canvas.height);
      ctx.lineTo(i, canvas.height * (1 - y));
      ctx.stroke();
    }
  }

  function displayPeaks(peaks) {
    var ctx = canvas.getContext('2d');
    ctx.lineWidth = 1;
    ctx.globalAlpha = 1;

    var _iterator2 = _createForOfIteratorHelper(peaks),
        _step2;

    try {
      for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
        var peak = _step2.value;
        var freq = peak.freq;
        if (!currentIdFreqs || freq !== currentIdFreqs[0] && freq !== currentIdFreqs[1]) ctx.strokeStyle = '#f00';else ctx.strokeStyle = '#0f0';
        var x = peak.bin;
        var y = analyserScale * (peak.level - analyserMin);
        ctx.beginPath();
        ctx.moveTo(x, canvas.height);
        ctx.lineTo(x, canvas.height * (1 - y));
        ctx.stroke();
      }
    } catch (err) {
      _iterator2.e(err);
    } finally {
      _iterator2.f();
    }
  }

  function updateSpectrum(array, peaks) {
    if (!runningOnMobile) {
      displaySpectrum(array);
      displayPeaks(peaks);
    }

    var power = 0;

    var _iterator3 = _createForOfIteratorHelper(peaks),
        _step3;

    try {
      for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {
        var peak = _step3.value;
        var freq = peak.freq;
        if (!currentIdFreqs || freq !== currentIdFreqs[0] && freq !== currentIdFreqs[1]) power += decibelToPower$1(peak.level);
      }
    } catch (err) {
      _iterator3.e(err);
    } finally {
      _iterator3.f();
    }

    var amp = Math.max(0, Math.min(0.5, 1000 * Math.sqrt(power)));
    reSynth.gain = amp;
  }

  function main() {
    var ua = window.navigator.userAgent;
    var md = new mobileDetect(ua);
    os = md.os();
    runningOnMobile = os === 'AndroidOS' || os === 'iOS';
    canvasContainer = document.getElementById('canvas-container');
    canvas = document.getElementById('spectrum-canvas');
    canvas.height = analyserMax - analyserMin;
    idSynth = new QuadSynth$1();
    reSynth = new QuadSynth();
    selectorButtons = new SelectorButtons('button-container', onStart, onStop);

    for (var i = 0; i < setup.length; i++) {
      var buttonIndex = i + 1;
      selectorButtons.add(buttonIndex.toString());
    }

    selectorButtons.enable();
    welcomeOverlay = document.getElementById('welcome-overlay');
    errorOverlay = document.getElementById('error-overlay');
    setupOverlay('welcome', false, initAudioInput);
    setupOverlay('help');
    setupOverlay('info');
  }

  window.addEventListener('load', main);

}());
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VzIjpbIi4uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2dsb2JhbC5qcyIsIi4uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2hhcy5qcyIsIi4uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2ZhaWxzLmpzIiwiLi4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fZGVzY3JpcHRvcnMuanMiLCIuLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19jb3JlLmpzIiwiLi4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9faXMtb2JqZWN0LmpzIiwiLi4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fYW4tb2JqZWN0LmpzIiwiLi4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fZG9tLWNyZWF0ZS5qcyIsIi4uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2llOC1kb20tZGVmaW5lLmpzIiwiLi4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fdG8tcHJpbWl0aXZlLmpzIiwiLi4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fb2JqZWN0LWRwLmpzIiwiLi4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fcHJvcGVydHktZGVzYy5qcyIsIi4uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2hpZGUuanMiLCIuLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL191aWQuanMiLCIuLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19saWJyYXJ5LmpzIiwiLi4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fc2hhcmVkLmpzIiwiLi4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fZnVuY3Rpb24tdG8tc3RyaW5nLmpzIiwiLi4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fcmVkZWZpbmUuanMiLCIuLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19hLWZ1bmN0aW9uLmpzIiwiLi4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fY3R4LmpzIiwiLi4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fZXhwb3J0LmpzIiwiLi4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fbWV0YS5qcyIsIi4uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3drcy5qcyIsIi4uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3NldC10by1zdHJpbmctdGFnLmpzIiwiLi4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fd2tzLWV4dC5qcyIsIi4uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3drcy1kZWZpbmUuanMiLCIuLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19jb2YuanMiLCIuLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19pb2JqZWN0LmpzIiwiLi4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fZGVmaW5lZC5qcyIsIi4uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3RvLWlvYmplY3QuanMiLCIuLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL190by1pbnRlZ2VyLmpzIiwiLi4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fdG8tbGVuZ3RoLmpzIiwiLi4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fdG8tYWJzb2x1dGUtaW5kZXguanMiLCIuLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19hcnJheS1pbmNsdWRlcy5qcyIsIi4uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3NoYXJlZC1rZXkuanMiLCIuLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19vYmplY3Qta2V5cy1pbnRlcm5hbC5qcyIsIi4uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2VudW0tYnVnLWtleXMuanMiLCIuLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19vYmplY3Qta2V5cy5qcyIsIi4uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX29iamVjdC1nb3BzLmpzIiwiLi4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fb2JqZWN0LXBpZS5qcyIsIi4uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2VudW0ta2V5cy5qcyIsIi4uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2lzLWFycmF5LmpzIiwiLi4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fdG8tb2JqZWN0LmpzIiwiLi4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fb2JqZWN0LWRwcy5qcyIsIi4uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2h0bWwuanMiLCIuLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19vYmplY3QtY3JlYXRlLmpzIiwiLi4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fb2JqZWN0LWdvcG4uanMiLCIuLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19vYmplY3QtZ29wbi1leHQuanMiLCIuLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19vYmplY3QtZ29wZC5qcyIsIi4uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnN5bWJvbC5qcyIsIi4uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm9iamVjdC5jcmVhdGUuanMiLCIuLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5vYmplY3QuZGVmaW5lLXByb3BlcnR5LmpzIiwiLi4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYub2JqZWN0LmRlZmluZS1wcm9wZXJ0aWVzLmpzIiwiLi4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fb2JqZWN0LXNhcC5qcyIsIi4uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm9iamVjdC5nZXQtb3duLXByb3BlcnR5LWRlc2NyaXB0b3IuanMiLCIuLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19vYmplY3QtZ3BvLmpzIiwiLi4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYub2JqZWN0LmdldC1wcm90b3R5cGUtb2YuanMiLCIuLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5vYmplY3Qua2V5cy5qcyIsIi4uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm9iamVjdC5nZXQtb3duLXByb3BlcnR5LW5hbWVzLmpzIiwiLi4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYub2JqZWN0LmZyZWV6ZS5qcyIsIi4uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm9iamVjdC5zZWFsLmpzIiwiLi4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYub2JqZWN0LnByZXZlbnQtZXh0ZW5zaW9ucy5qcyIsIi4uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm9iamVjdC5pcy1mcm96ZW4uanMiLCIuLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5vYmplY3QuaXMtc2VhbGVkLmpzIiwiLi4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYub2JqZWN0LmlzLWV4dGVuc2libGUuanMiLCIuLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19vYmplY3QtYXNzaWduLmpzIiwiLi4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYub2JqZWN0LmFzc2lnbi5qcyIsIi4uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3NhbWUtdmFsdWUuanMiLCIuLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5vYmplY3QuaXMuanMiLCIuLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19zZXQtcHJvdG8uanMiLCIuLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5vYmplY3Quc2V0LXByb3RvdHlwZS1vZi5qcyIsIi4uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2NsYXNzb2YuanMiLCIuLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5vYmplY3QudG8tc3RyaW5nLmpzIiwiLi4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9faW52b2tlLmpzIiwiLi4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fYmluZC5qcyIsIi4uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LmZ1bmN0aW9uLmJpbmQuanMiLCIuLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5mdW5jdGlvbi5uYW1lLmpzIiwiLi4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuZnVuY3Rpb24uaGFzLWluc3RhbmNlLmpzIiwiLi4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fc3RyaW5nLXdzLmpzIiwiLi4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fc3RyaW5nLXRyaW0uanMiLCIuLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19wYXJzZS1pbnQuanMiLCIuLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5wYXJzZS1pbnQuanMiLCIuLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19wYXJzZS1mbG9hdC5qcyIsIi4uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnBhcnNlLWZsb2F0LmpzIiwiLi4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9faW5oZXJpdC1pZi1yZXF1aXJlZC5qcyIsIi4uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm51bWJlci5jb25zdHJ1Y3Rvci5qcyIsIi4uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2EtbnVtYmVyLXZhbHVlLmpzIiwiLi4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fc3RyaW5nLXJlcGVhdC5qcyIsIi4uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm51bWJlci50by1maXhlZC5qcyIsIi4uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm51bWJlci50by1wcmVjaXNpb24uanMiLCIuLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5udW1iZXIuZXBzaWxvbi5qcyIsIi4uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm51bWJlci5pcy1maW5pdGUuanMiLCIuLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19pcy1pbnRlZ2VyLmpzIiwiLi4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYubnVtYmVyLmlzLWludGVnZXIuanMiLCIuLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5udW1iZXIuaXMtbmFuLmpzIiwiLi4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYubnVtYmVyLmlzLXNhZmUtaW50ZWdlci5qcyIsIi4uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm51bWJlci5tYXgtc2FmZS1pbnRlZ2VyLmpzIiwiLi4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYubnVtYmVyLm1pbi1zYWZlLWludGVnZXIuanMiLCIuLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5udW1iZXIucGFyc2UtZmxvYXQuanMiLCIuLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5udW1iZXIucGFyc2UtaW50LmpzIiwiLi4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fbWF0aC1sb2cxcC5qcyIsIi4uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm1hdGguYWNvc2guanMiLCIuLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5tYXRoLmFzaW5oLmpzIiwiLi4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYubWF0aC5hdGFuaC5qcyIsIi4uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX21hdGgtc2lnbi5qcyIsIi4uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm1hdGguY2JydC5qcyIsIi4uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm1hdGguY2x6MzIuanMiLCIuLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5tYXRoLmNvc2guanMiLCIuLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19tYXRoLWV4cG0xLmpzIiwiLi4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYubWF0aC5leHBtMS5qcyIsIi4uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX21hdGgtZnJvdW5kLmpzIiwiLi4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYubWF0aC5mcm91bmQuanMiLCIuLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5tYXRoLmh5cG90LmpzIiwiLi4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYubWF0aC5pbXVsLmpzIiwiLi4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYubWF0aC5sb2cxMC5qcyIsIi4uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm1hdGgubG9nMXAuanMiLCIuLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5tYXRoLmxvZzIuanMiLCIuLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5tYXRoLnNpZ24uanMiLCIuLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5tYXRoLnNpbmguanMiLCIuLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5tYXRoLnRhbmguanMiLCIuLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5tYXRoLnRydW5jLmpzIiwiLi4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuc3RyaW5nLmZyb20tY29kZS1wb2ludC5qcyIsIi4uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnN0cmluZy5yYXcuanMiLCIuLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5zdHJpbmcudHJpbS5qcyIsIi4uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3N0cmluZy1hdC5qcyIsIi4uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2l0ZXJhdG9ycy5qcyIsIi4uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2l0ZXItY3JlYXRlLmpzIiwiLi4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9faXRlci1kZWZpbmUuanMiLCIuLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5zdHJpbmcuaXRlcmF0b3IuanMiLCIuLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5zdHJpbmcuY29kZS1wb2ludC1hdC5qcyIsIi4uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2lzLXJlZ2V4cC5qcyIsIi4uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3N0cmluZy1jb250ZXh0LmpzIiwiLi4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fZmFpbHMtaXMtcmVnZXhwLmpzIiwiLi4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuc3RyaW5nLmVuZHMtd2l0aC5qcyIsIi4uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnN0cmluZy5pbmNsdWRlcy5qcyIsIi4uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnN0cmluZy5yZXBlYXQuanMiLCIuLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5zdHJpbmcuc3RhcnRzLXdpdGguanMiLCIuLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19zdHJpbmctaHRtbC5qcyIsIi4uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnN0cmluZy5hbmNob3IuanMiLCIuLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5zdHJpbmcuYmlnLmpzIiwiLi4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuc3RyaW5nLmJsaW5rLmpzIiwiLi4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuc3RyaW5nLmJvbGQuanMiLCIuLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5zdHJpbmcuZml4ZWQuanMiLCIuLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5zdHJpbmcuZm9udGNvbG9yLmpzIiwiLi4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuc3RyaW5nLmZvbnRzaXplLmpzIiwiLi4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuc3RyaW5nLml0YWxpY3MuanMiLCIuLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5zdHJpbmcubGluay5qcyIsIi4uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnN0cmluZy5zbWFsbC5qcyIsIi4uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnN0cmluZy5zdHJpa2UuanMiLCIuLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5zdHJpbmcuc3ViLmpzIiwiLi4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuc3RyaW5nLnN1cC5qcyIsIi4uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LmRhdGUubm93LmpzIiwiLi4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuZGF0ZS50by1qc29uLmpzIiwiLi4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fZGF0ZS10by1pc28tc3RyaW5nLmpzIiwiLi4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuZGF0ZS50by1pc28tc3RyaW5nLmpzIiwiLi4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuZGF0ZS50by1zdHJpbmcuanMiLCIuLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19kYXRlLXRvLXByaW1pdGl2ZS5qcyIsIi4uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LmRhdGUudG8tcHJpbWl0aXZlLmpzIiwiLi4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuYXJyYXkuaXMtYXJyYXkuanMiLCIuLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19pdGVyLWNhbGwuanMiLCIuLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19pcy1hcnJheS1pdGVyLmpzIiwiLi4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fY3JlYXRlLXByb3BlcnR5LmpzIiwiLi4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9jb3JlLmdldC1pdGVyYXRvci1tZXRob2QuanMiLCIuLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19pdGVyLWRldGVjdC5qcyIsIi4uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LmFycmF5LmZyb20uanMiLCIuLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5hcnJheS5vZi5qcyIsIi4uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3N0cmljdC1tZXRob2QuanMiLCIuLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5hcnJheS5qb2luLmpzIiwiLi4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuYXJyYXkuc2xpY2UuanMiLCIuLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5hcnJheS5zb3J0LmpzIiwiLi4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fYXJyYXktc3BlY2llcy1jb25zdHJ1Y3Rvci5qcyIsIi4uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2FycmF5LXNwZWNpZXMtY3JlYXRlLmpzIiwiLi4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fYXJyYXktbWV0aG9kcy5qcyIsIi4uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LmFycmF5LmZvci1lYWNoLmpzIiwiLi4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuYXJyYXkubWFwLmpzIiwiLi4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuYXJyYXkuZmlsdGVyLmpzIiwiLi4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuYXJyYXkuc29tZS5qcyIsIi4uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LmFycmF5LmV2ZXJ5LmpzIiwiLi4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fYXJyYXktcmVkdWNlLmpzIiwiLi4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuYXJyYXkucmVkdWNlLmpzIiwiLi4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuYXJyYXkucmVkdWNlLXJpZ2h0LmpzIiwiLi4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuYXJyYXkuaW5kZXgtb2YuanMiLCIuLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5hcnJheS5sYXN0LWluZGV4LW9mLmpzIiwiLi4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fYXJyYXktY29weS13aXRoaW4uanMiLCIuLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19hZGQtdG8tdW5zY29wYWJsZXMuanMiLCIuLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5hcnJheS5jb3B5LXdpdGhpbi5qcyIsIi4uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2FycmF5LWZpbGwuanMiLCIuLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5hcnJheS5maWxsLmpzIiwiLi4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuYXJyYXkuZmluZC5qcyIsIi4uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LmFycmF5LmZpbmQtaW5kZXguanMiLCIuLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19zZXQtc3BlY2llcy5qcyIsIi4uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LmFycmF5LnNwZWNpZXMuanMiLCIuLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19pdGVyLXN0ZXAuanMiLCIuLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5hcnJheS5pdGVyYXRvci5qcyIsIi4uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2ZsYWdzLmpzIiwiLi4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYucmVnZXhwLmNvbnN0cnVjdG9yLmpzIiwiLi4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fcmVnZXhwLWV4ZWMuanMiLCIuLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5yZWdleHAuZXhlYy5qcyIsIi4uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnJlZ2V4cC5mbGFncy5qcyIsIi4uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnJlZ2V4cC50by1zdHJpbmcuanMiLCIuLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19hZHZhbmNlLXN0cmluZy1pbmRleC5qcyIsIi4uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3JlZ2V4cC1leGVjLWFic3RyYWN0LmpzIiwiLi4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fZml4LXJlLXdrcy5qcyIsIi4uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnJlZ2V4cC5tYXRjaC5qcyIsIi4uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnJlZ2V4cC5yZXBsYWNlLmpzIiwiLi4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYucmVnZXhwLnNlYXJjaC5qcyIsIi4uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3NwZWNpZXMtY29uc3RydWN0b3IuanMiLCIuLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5yZWdleHAuc3BsaXQuanMiLCIuLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19hbi1pbnN0YW5jZS5qcyIsIi4uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2Zvci1vZi5qcyIsIi4uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3Rhc2suanMiLCIuLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19taWNyb3Rhc2suanMiLCIuLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19uZXctcHJvbWlzZS1jYXBhYmlsaXR5LmpzIiwiLi4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fcGVyZm9ybS5qcyIsIi4uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3VzZXItYWdlbnQuanMiLCIuLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19wcm9taXNlLXJlc29sdmUuanMiLCIuLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19yZWRlZmluZS1hbGwuanMiLCIuLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5wcm9taXNlLmpzIiwiLi4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fdmFsaWRhdGUtY29sbGVjdGlvbi5qcyIsIi4uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2NvbGxlY3Rpb24tc3Ryb25nLmpzIiwiLi4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fY29sbGVjdGlvbi5qcyIsIi4uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm1hcC5qcyIsIi4uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnNldC5qcyIsIi4uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2NvbGxlY3Rpb24td2Vhay5qcyIsIi4uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LndlYWstbWFwLmpzIiwiLi4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYud2Vhay1zZXQuanMiLCIuLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL190eXBlZC5qcyIsIi4uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3RvLWluZGV4LmpzIiwiLi4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fdHlwZWQtYnVmZmVyLmpzIiwiLi4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYudHlwZWQuYXJyYXktYnVmZmVyLmpzIiwiLi4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYudHlwZWQuZGF0YS12aWV3LmpzIiwiLi4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fdHlwZWQtYXJyYXkuanMiLCIuLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi50eXBlZC5pbnQ4LWFycmF5LmpzIiwiLi4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYudHlwZWQudWludDgtYXJyYXkuanMiLCIuLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi50eXBlZC51aW50OC1jbGFtcGVkLWFycmF5LmpzIiwiLi4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYudHlwZWQuaW50MTYtYXJyYXkuanMiLCIuLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi50eXBlZC51aW50MTYtYXJyYXkuanMiLCIuLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi50eXBlZC5pbnQzMi1hcnJheS5qcyIsIi4uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnR5cGVkLnVpbnQzMi1hcnJheS5qcyIsIi4uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnR5cGVkLmZsb2F0MzItYXJyYXkuanMiLCIuLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi50eXBlZC5mbG9hdDY0LWFycmF5LmpzIiwiLi4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYucmVmbGVjdC5hcHBseS5qcyIsIi4uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnJlZmxlY3QuY29uc3RydWN0LmpzIiwiLi4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYucmVmbGVjdC5kZWZpbmUtcHJvcGVydHkuanMiLCIuLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5yZWZsZWN0LmRlbGV0ZS1wcm9wZXJ0eS5qcyIsIi4uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnJlZmxlY3QuZW51bWVyYXRlLmpzIiwiLi4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYucmVmbGVjdC5nZXQuanMiLCIuLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5yZWZsZWN0LmdldC1vd24tcHJvcGVydHktZGVzY3JpcHRvci5qcyIsIi4uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnJlZmxlY3QuZ2V0LXByb3RvdHlwZS1vZi5qcyIsIi4uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnJlZmxlY3QuaGFzLmpzIiwiLi4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYucmVmbGVjdC5pcy1leHRlbnNpYmxlLmpzIiwiLi4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fb3duLWtleXMuanMiLCIuLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5yZWZsZWN0Lm93bi1rZXlzLmpzIiwiLi4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYucmVmbGVjdC5wcmV2ZW50LWV4dGVuc2lvbnMuanMiLCIuLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5yZWZsZWN0LnNldC5qcyIsIi4uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnJlZmxlY3Quc2V0LXByb3RvdHlwZS1vZi5qcyIsIi4uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM3LmFycmF5LmluY2x1ZGVzLmpzIiwiLi4vbm9kZV9tb2R1bGVzL2NvcmUtanMvZm4vYXJyYXkvaW5jbHVkZXMuanMiLCIuLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19mbGF0dGVuLWludG8tYXJyYXkuanMiLCIuLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNy5hcnJheS5mbGF0LW1hcC5qcyIsIi4uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ZuL2FycmF5L2ZsYXQtbWFwLmpzIiwiLi4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fc3RyaW5nLXBhZC5qcyIsIi4uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM3LnN0cmluZy5wYWQtc3RhcnQuanMiLCIuLi9ub2RlX21vZHVsZXMvY29yZS1qcy9mbi9zdHJpbmcvcGFkLXN0YXJ0LmpzIiwiLi4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczcuc3RyaW5nLnBhZC1lbmQuanMiLCIuLi9ub2RlX21vZHVsZXMvY29yZS1qcy9mbi9zdHJpbmcvcGFkLWVuZC5qcyIsIi4uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM3LnN0cmluZy50cmltLWxlZnQuanMiLCIuLi9ub2RlX21vZHVsZXMvY29yZS1qcy9mbi9zdHJpbmcvdHJpbS1zdGFydC5qcyIsIi4uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM3LnN0cmluZy50cmltLXJpZ2h0LmpzIiwiLi4vbm9kZV9tb2R1bGVzL2NvcmUtanMvZm4vc3RyaW5nL3RyaW0tZW5kLmpzIiwiLi4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczcuc3ltYm9sLmFzeW5jLWl0ZXJhdG9yLmpzIiwiLi4vbm9kZV9tb2R1bGVzL2NvcmUtanMvZm4vc3ltYm9sL2FzeW5jLWl0ZXJhdG9yLmpzIiwiLi4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczcub2JqZWN0LmdldC1vd24tcHJvcGVydHktZGVzY3JpcHRvcnMuanMiLCIuLi9ub2RlX21vZHVsZXMvY29yZS1qcy9mbi9vYmplY3QvZ2V0LW93bi1wcm9wZXJ0eS1kZXNjcmlwdG9ycy5qcyIsIi4uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX29iamVjdC10by1hcnJheS5qcyIsIi4uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM3Lm9iamVjdC52YWx1ZXMuanMiLCIuLi9ub2RlX21vZHVsZXMvY29yZS1qcy9mbi9vYmplY3QvdmFsdWVzLmpzIiwiLi4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczcub2JqZWN0LmVudHJpZXMuanMiLCIuLi9ub2RlX21vZHVsZXMvY29yZS1qcy9mbi9vYmplY3QvZW50cmllcy5qcyIsIi4uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM3LnByb21pc2UuZmluYWxseS5qcyIsIi4uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ZuL3Byb21pc2UvZmluYWxseS5qcyIsIi4uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvd2ViLnRpbWVycy5qcyIsIi4uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvd2ViLmltbWVkaWF0ZS5qcyIsIi4uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvd2ViLmRvbS5pdGVyYWJsZS5qcyIsIi4uL25vZGVfbW9kdWxlcy9yZWdlbmVyYXRvci1ydW50aW1lL3J1bnRpbWUuanMiLCIuLi9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX2dsb2JhbC5qcyIsIi4uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fY29yZS5qcyIsIi4uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fYS1mdW5jdGlvbi5qcyIsIi4uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fY3R4LmpzIiwiLi4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19pcy1vYmplY3QuanMiLCIuLi9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX2FuLW9iamVjdC5qcyIsIi4uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fZmFpbHMuanMiLCIuLi9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX2Rlc2NyaXB0b3JzLmpzIiwiLi4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19kb20tY3JlYXRlLmpzIiwiLi4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19pZTgtZG9tLWRlZmluZS5qcyIsIi4uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fdG8tcHJpbWl0aXZlLmpzIiwiLi4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19vYmplY3QtZHAuanMiLCIuLi9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX3Byb3BlcnR5LWRlc2MuanMiLCIuLi9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX2hpZGUuanMiLCIuLi9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX2hhcy5qcyIsIi4uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fZXhwb3J0LmpzIiwiLi4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL2VzNy5nbG9iYWwuanMiLCIuLi9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L2ZuL2dsb2JhbC5qcyIsIi4uL25vZGVfbW9kdWxlcy9AYmFiZWwvcG9seWZpbGwvbGliL2luZGV4LmpzIiwiLi4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19kZWZpbmVkLmpzIiwiLi4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL190by1vYmplY3QuanMiLCIuLi9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX2xpYnJhcnkuanMiLCIuLi9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX3NoYXJlZC5qcyIsIi4uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fdWlkLmpzIiwiLi4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19zaGFyZWQta2V5LmpzIiwiLi4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19vYmplY3QtZ3BvLmpzIiwiLi4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19vYmplY3Qtc2FwLmpzIiwiLi4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL2VzNi5vYmplY3QuZ2V0LXByb3RvdHlwZS1vZi5qcyIsIi4uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvZm4vb2JqZWN0L2dldC1wcm90b3R5cGUtb2YuanMiLCIuLi9ub2RlX21vZHVsZXMvYmFiZWwtcnVudGltZS9jb3JlLWpzL29iamVjdC9nZXQtcHJvdG90eXBlLW9mLmpzIiwiLi4vbm9kZV9tb2R1bGVzL2JhYmVsLXJ1bnRpbWUvaGVscGVycy9jbGFzc0NhbGxDaGVjay5qcyIsIi4uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9lczYub2JqZWN0LmRlZmluZS1wcm9wZXJ0eS5qcyIsIi4uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvZm4vb2JqZWN0L2RlZmluZS1wcm9wZXJ0eS5qcyIsIi4uL25vZGVfbW9kdWxlcy9iYWJlbC1ydW50aW1lL2NvcmUtanMvb2JqZWN0L2RlZmluZS1wcm9wZXJ0eS5qcyIsIi4uL25vZGVfbW9kdWxlcy9iYWJlbC1ydW50aW1lL2hlbHBlcnMvY3JlYXRlQ2xhc3MuanMiLCIuLi9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX3RvLWludGVnZXIuanMiLCIuLi9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX3N0cmluZy1hdC5qcyIsIi4uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fcmVkZWZpbmUuanMiLCIuLi9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX2l0ZXJhdG9ycy5qcyIsIi4uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fY29mLmpzIiwiLi4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19pb2JqZWN0LmpzIiwiLi4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL190by1pb2JqZWN0LmpzIiwiLi4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL190by1sZW5ndGguanMiLCIuLi9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX3RvLWFic29sdXRlLWluZGV4LmpzIiwiLi4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19hcnJheS1pbmNsdWRlcy5qcyIsIi4uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fb2JqZWN0LWtleXMtaW50ZXJuYWwuanMiLCIuLi9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX2VudW0tYnVnLWtleXMuanMiLCIuLi9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX29iamVjdC1rZXlzLmpzIiwiLi4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19vYmplY3QtZHBzLmpzIiwiLi4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19odG1sLmpzIiwiLi4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19vYmplY3QtY3JlYXRlLmpzIiwiLi4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL193a3MuanMiLCIuLi9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX3NldC10by1zdHJpbmctdGFnLmpzIiwiLi4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19pdGVyLWNyZWF0ZS5qcyIsIi4uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9faXRlci1kZWZpbmUuanMiLCIuLi9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvZXM2LnN0cmluZy5pdGVyYXRvci5qcyIsIi4uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9faXRlci1zdGVwLmpzIiwiLi4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL2VzNi5hcnJheS5pdGVyYXRvci5qcyIsIi4uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy93ZWIuZG9tLml0ZXJhYmxlLmpzIiwiLi4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL193a3MtZXh0LmpzIiwiLi4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9mbi9zeW1ib2wvaXRlcmF0b3IuanMiLCIuLi9ub2RlX21vZHVsZXMvYmFiZWwtcnVudGltZS9jb3JlLWpzL3N5bWJvbC9pdGVyYXRvci5qcyIsIi4uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fbWV0YS5qcyIsIi4uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fd2tzLWRlZmluZS5qcyIsIi4uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fb2JqZWN0LWdvcHMuanMiLCIuLi9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX29iamVjdC1waWUuanMiLCIuLi9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX2VudW0ta2V5cy5qcyIsIi4uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9faXMtYXJyYXkuanMiLCIuLi9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX29iamVjdC1nb3BuLmpzIiwiLi4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19vYmplY3QtZ29wbi1leHQuanMiLCIuLi9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX29iamVjdC1nb3BkLmpzIiwiLi4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL2VzNi5zeW1ib2wuanMiLCIuLi9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvZXM3LnN5bWJvbC5hc3luYy1pdGVyYXRvci5qcyIsIi4uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9lczcuc3ltYm9sLm9ic2VydmFibGUuanMiLCIuLi9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L2ZuL3N5bWJvbC9pbmRleC5qcyIsIi4uL25vZGVfbW9kdWxlcy9iYWJlbC1ydW50aW1lL2NvcmUtanMvc3ltYm9sLmpzIiwiLi4vbm9kZV9tb2R1bGVzL2JhYmVsLXJ1bnRpbWUvaGVscGVycy90eXBlb2YuanMiLCIuLi9ub2RlX21vZHVsZXMvYmFiZWwtcnVudGltZS9oZWxwZXJzL3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4uanMiLCIuLi9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX3NldC1wcm90by5qcyIsIi4uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9lczYub2JqZWN0LnNldC1wcm90b3R5cGUtb2YuanMiLCIuLi9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L2ZuL29iamVjdC9zZXQtcHJvdG90eXBlLW9mLmpzIiwiLi4vbm9kZV9tb2R1bGVzL2JhYmVsLXJ1bnRpbWUvY29yZS1qcy9vYmplY3Qvc2V0LXByb3RvdHlwZS1vZi5qcyIsIi4uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9lczYub2JqZWN0LmNyZWF0ZS5qcyIsIi4uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvZm4vb2JqZWN0L2NyZWF0ZS5qcyIsIi4uL25vZGVfbW9kdWxlcy9iYWJlbC1ydW50aW1lL2NvcmUtanMvb2JqZWN0L2NyZWF0ZS5qcyIsIi4uL25vZGVfbW9kdWxlcy9iYWJlbC1ydW50aW1lL2hlbHBlcnMvaW5oZXJpdHMuanMiLCIuLi9ub2RlX21vZHVsZXMvd2F2ZXMtbWFzdGVycy9kaXN0L2NvcmUvVGltZUVuZ2luZS5qcyIsIi4uL25vZGVfbW9kdWxlcy93YXZlcy1tYXN0ZXJzL2Rpc3QvY29yZS9Qcmlvcml0eVF1ZXVlLmpzIiwiLi4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19jbGFzc29mLmpzIiwiLi4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL2NvcmUuZ2V0LWl0ZXJhdG9yLW1ldGhvZC5qcyIsIi4uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9jb3JlLmdldC1pdGVyYXRvci5qcyIsIi4uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvZm4vZ2V0LWl0ZXJhdG9yLmpzIiwiLi4vbm9kZV9tb2R1bGVzL2JhYmVsLXJ1bnRpbWUvY29yZS1qcy9nZXQtaXRlcmF0b3IuanMiLCIuLi9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX3JlZGVmaW5lLWFsbC5qcyIsIi4uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fYW4taW5zdGFuY2UuanMiLCIuLi9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX2l0ZXItY2FsbC5qcyIsIi4uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9faXMtYXJyYXktaXRlci5qcyIsIi4uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fZm9yLW9mLmpzIiwiLi4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19zZXQtc3BlY2llcy5qcyIsIi4uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fdmFsaWRhdGUtY29sbGVjdGlvbi5qcyIsIi4uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fY29sbGVjdGlvbi1zdHJvbmcuanMiLCIuLi9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX2FycmF5LXNwZWNpZXMtY29uc3RydWN0b3IuanMiLCIuLi9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX2FycmF5LXNwZWNpZXMtY3JlYXRlLmpzIiwiLi4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19hcnJheS1tZXRob2RzLmpzIiwiLi4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19jb2xsZWN0aW9uLmpzIiwiLi4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL2VzNi5zZXQuanMiLCIuLi9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX2FycmF5LWZyb20taXRlcmFibGUuanMiLCIuLi9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX2NvbGxlY3Rpb24tdG8tanNvbi5qcyIsIi4uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9lczcuc2V0LnRvLWpzb24uanMiLCIuLi9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX3NldC1jb2xsZWN0aW9uLW9mLmpzIiwiLi4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL2VzNy5zZXQub2YuanMiLCIuLi9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX3NldC1jb2xsZWN0aW9uLWZyb20uanMiLCIuLi9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvZXM3LnNldC5mcm9tLmpzIiwiLi4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9mbi9zZXQuanMiLCIuLi9ub2RlX21vZHVsZXMvYmFiZWwtcnVudGltZS9jb3JlLWpzL3NldC5qcyIsIi4uL25vZGVfbW9kdWxlcy93YXZlcy1tYXN0ZXJzL2Rpc3QvY29yZS9TY2hlZHVsaW5nUXVldWUuanMiLCIuLi9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvZXM2Lm9iamVjdC5nZXQtb3duLXByb3BlcnR5LWRlc2NyaXB0b3IuanMiLCIuLi9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L2ZuL29iamVjdC9nZXQtb3duLXByb3BlcnR5LWRlc2NyaXB0b3IuanMiLCIuLi9ub2RlX21vZHVsZXMvYmFiZWwtcnVudGltZS9jb3JlLWpzL29iamVjdC9nZXQtb3duLXByb3BlcnR5LWRlc2NyaXB0b3IuanMiLCIuLi9ub2RlX21vZHVsZXMvYmFiZWwtcnVudGltZS9oZWxwZXJzL2dldC5qcyIsIi4uL25vZGVfbW9kdWxlcy93YXZlcy1tYXN0ZXJzL2Rpc3QvbWFzdGVycy9QbGF5Q29udHJvbC5qcyIsIi4uL25vZGVfbW9kdWxlcy93YXZlcy1tYXN0ZXJzL2Rpc3QvbWFzdGVycy9UcmFuc3BvcnQuanMiLCIuLi9ub2RlX21vZHVsZXMvcm9sbHVwLXBsdWdpbi1ub2RlLWdsb2JhbHMvc3JjL2dsb2JhbC5qcyIsIi4uL25vZGVfbW9kdWxlcy9wcm9jZXNzLWVzNi9icm93c2VyLmpzIiwiLi4vbm9kZV9tb2R1bGVzL21zL2luZGV4LmpzIiwiLi4vbm9kZV9tb2R1bGVzL2RlYnVnL3NyYy9kZWJ1Zy5qcyIsIi4uL25vZGVfbW9kdWxlcy9kZWJ1Zy9zcmMvYnJvd3Nlci5qcyIsIi4uL25vZGVfbW9kdWxlcy9yb2xsdXAtcGx1Z2luLW5vZGUtYnVpbHRpbnMvc3JjL2VzNi90dHkuanMiLCIuLi9ub2RlX21vZHVsZXMvYnVmZmVyLWVzNi9iYXNlNjQuanMiLCIuLi9ub2RlX21vZHVsZXMvYnVmZmVyLWVzNi9pZWVlNzU0LmpzIiwiLi4vbm9kZV9tb2R1bGVzL2J1ZmZlci1lczYvaXNBcnJheS5qcyIsIi4uL25vZGVfbW9kdWxlcy9idWZmZXItZXM2L2luZGV4LmpzIiwiLi4vbm9kZV9tb2R1bGVzL3JvbGx1cC1wbHVnaW4tbm9kZS1idWlsdGlucy9zcmMvZXM2L2luaGVyaXRzLmpzIiwiLi4vbm9kZV9tb2R1bGVzL3JvbGx1cC1wbHVnaW4tbm9kZS1idWlsdGlucy9zcmMvZXM2L3V0aWwuanMiLCIuLi9ub2RlX21vZHVsZXMvcm9sbHVwLXBsdWdpbi1ub2RlLWJ1aWx0aW5zL3NyYy9lczYvZW1wdHkuanMiLCIuLi9ub2RlX21vZHVsZXMvZGVidWcvc3JjL25vZGUuanMiLCIuLi9ub2RlX21vZHVsZXMvZGVidWcvc3JjL2luZGV4LmpzIiwiLi4vbm9kZV9tb2R1bGVzL3dhdmVzLW1hc3RlcnMvZGlzdC9tYXN0ZXJzL1NjaGVkdWxlci5qcyIsIi4uL25vZGVfbW9kdWxlcy93YXZlcy1tYXN0ZXJzL2Rpc3QvbWFzdGVycy9TaW1wbGVTY2hlZHVsZXIuanMiLCIuLi9ub2RlX21vZHVsZXMvd2F2ZXMtYXVkaW8vZGlzdC9lbmdpbmVzL0dyYW51bGFyRW5naW5lLmpzIiwiLi4vbm9kZV9tb2R1bGVzL3dhdmVzLWF1ZGlvL2Rpc3QvZW5naW5lcy9NZXRyb25vbWUuanMiLCIuLi9ub2RlX21vZHVsZXMvd2F2ZXMtYXVkaW8vZGlzdC9lbmdpbmVzL1BsYXllckVuZ2luZS5qcyIsIi4uL25vZGVfbW9kdWxlcy93YXZlcy1hdWRpby9kaXN0L2VuZ2luZXMvU2VnbWVudEVuZ2luZS5qcyIsIi4uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9lczYubWFwLmpzIiwiLi4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL2VzNy5tYXAudG8tanNvbi5qcyIsIi4uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9lczcubWFwLm9mLmpzIiwiLi4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL2VzNy5tYXAuZnJvbS5qcyIsIi4uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvZm4vbWFwLmpzIiwiLi4vbm9kZV9tb2R1bGVzL2JhYmVsLXJ1bnRpbWUvY29yZS1qcy9tYXAuanMiLCIuLi9ub2RlX21vZHVsZXMvd2F2ZXMtYXVkaW8vZGlzdC9tYXN0ZXJzL2ZhY3Rvcmllcy5qcyIsIi4uL25vZGVfbW9kdWxlcy93YXZlcy1hdWRpby9kaXN0L21hc3RlcnMvUGxheUNvbnRyb2wuanMiLCIuLi9ub2RlX21vZHVsZXMvbW9iaWxlLWRldGVjdC9tb2JpbGUtZGV0ZWN0LmpzIiwiLi4vc3JjL3V0aWxzL1NlbGVjdG9yQnV0dG9ucy5qcyIsIi4uL3NyYy91dGlscy9Ub25lU3ludGguanMiLCIuLi9zcmMvdXRpbHMvUHVsc2VTeW50aC5qcyIsIi4uL3NyYy91dGlscy9TcGVjdHJ1bUFuYWx5c2VyLmpzIiwiLi4vbm9kZV9tb2R1bGVzL21vdGlvbi1pbnB1dC9kaXN0L01vdGlvbklucHV0LmpzIiwiLi4vbm9kZV9tb2R1bGVzL21vdGlvbi1pbnB1dC9kaXN0L0lucHV0TW9kdWxlLmpzIiwiLi4vbm9kZV9tb2R1bGVzL21vdGlvbi1pbnB1dC9kaXN0L0RPTUV2ZW50U3VibW9kdWxlLmpzIiwiLi4vbm9kZV9tb2R1bGVzL3BsYXRmb3JtL3BsYXRmb3JtLmpzIiwiLi4vbm9kZV9tb2R1bGVzL21vdGlvbi1pbnB1dC9kaXN0L0RldmljZU9yaWVudGF0aW9uTW9kdWxlLmpzIiwiLi4vbm9kZV9tb2R1bGVzL21vdGlvbi1pbnB1dC9kaXN0L0RldmljZU1vdGlvbk1vZHVsZS5qcyIsIi4uL25vZGVfbW9kdWxlcy9tb3Rpb24taW5wdXQvZGlzdC9FbmVyZ3lNb2R1bGUuanMiLCIuLi9ub2RlX21vZHVsZXMvbW90aW9uLWlucHV0L2Rpc3QvaW5kZXguanMiLCIuLi9zcmMvdXRpbHMvaGVscGVycy5qcyIsIi4uL3NyYy9zZXR1cC5qcyIsIi4uL3NyYy9pbmRleC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBodHRwczovL2dpdGh1Yi5jb20vemxvaXJvY2svY29yZS1qcy9pc3N1ZXMvODYjaXNzdWVjb21tZW50LTExNTc1OTAyOFxudmFyIGdsb2JhbCA9IG1vZHVsZS5leHBvcnRzID0gdHlwZW9mIHdpbmRvdyAhPSAndW5kZWZpbmVkJyAmJiB3aW5kb3cuTWF0aCA9PSBNYXRoXG4gID8gd2luZG93IDogdHlwZW9mIHNlbGYgIT0gJ3VuZGVmaW5lZCcgJiYgc2VsZi5NYXRoID09IE1hdGggPyBzZWxmXG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1uZXctZnVuY1xuICA6IEZ1bmN0aW9uKCdyZXR1cm4gdGhpcycpKCk7XG5pZiAodHlwZW9mIF9fZyA9PSAnbnVtYmVyJykgX19nID0gZ2xvYmFsOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXVuZGVmXG4iLCJ2YXIgaGFzT3duUHJvcGVydHkgPSB7fS5oYXNPd25Qcm9wZXJ0eTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0LCBrZXkpIHtcbiAgcmV0dXJuIGhhc093blByb3BlcnR5LmNhbGwoaXQsIGtleSk7XG59O1xuIiwibW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoZXhlYykge1xuICB0cnkge1xuICAgIHJldHVybiAhIWV4ZWMoKTtcbiAgfSBjYXRjaCAoZSkge1xuICAgIHJldHVybiB0cnVlO1xuICB9XG59O1xuIiwiLy8gVGhhbmsncyBJRTggZm9yIGhpcyBmdW5ueSBkZWZpbmVQcm9wZXJ0eVxubW9kdWxlLmV4cG9ydHMgPSAhcmVxdWlyZSgnLi9fZmFpbHMnKShmdW5jdGlvbiAoKSB7XG4gIHJldHVybiBPYmplY3QuZGVmaW5lUHJvcGVydHkoe30sICdhJywgeyBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIDc7IH0gfSkuYSAhPSA3O1xufSk7XG4iLCJ2YXIgY29yZSA9IG1vZHVsZS5leHBvcnRzID0geyB2ZXJzaW9uOiAnMi42LjExJyB9O1xuaWYgKHR5cGVvZiBfX2UgPT0gJ251bWJlcicpIF9fZSA9IGNvcmU7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tdW5kZWZcbiIsIm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0KSB7XG4gIHJldHVybiB0eXBlb2YgaXQgPT09ICdvYmplY3QnID8gaXQgIT09IG51bGwgOiB0eXBlb2YgaXQgPT09ICdmdW5jdGlvbic7XG59O1xuIiwidmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi9faXMtb2JqZWN0Jyk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCkge1xuICBpZiAoIWlzT2JqZWN0KGl0KSkgdGhyb3cgVHlwZUVycm9yKGl0ICsgJyBpcyBub3QgYW4gb2JqZWN0IScpO1xuICByZXR1cm4gaXQ7XG59O1xuIiwidmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi9faXMtb2JqZWN0Jyk7XG52YXIgZG9jdW1lbnQgPSByZXF1aXJlKCcuL19nbG9iYWwnKS5kb2N1bWVudDtcbi8vIHR5cGVvZiBkb2N1bWVudC5jcmVhdGVFbGVtZW50IGlzICdvYmplY3QnIGluIG9sZCBJRVxudmFyIGlzID0gaXNPYmplY3QoZG9jdW1lbnQpICYmIGlzT2JqZWN0KGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQpO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQpIHtcbiAgcmV0dXJuIGlzID8gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChpdCkgOiB7fTtcbn07XG4iLCJtb2R1bGUuZXhwb3J0cyA9ICFyZXF1aXJlKCcuL19kZXNjcmlwdG9ycycpICYmICFyZXF1aXJlKCcuL19mYWlscycpKGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShyZXF1aXJlKCcuL19kb20tY3JlYXRlJykoJ2RpdicpLCAnYScsIHsgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiA3OyB9IH0pLmEgIT0gNztcbn0pO1xuIiwiLy8gNy4xLjEgVG9QcmltaXRpdmUoaW5wdXQgWywgUHJlZmVycmVkVHlwZV0pXG52YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuL19pcy1vYmplY3QnKTtcbi8vIGluc3RlYWQgb2YgdGhlIEVTNiBzcGVjIHZlcnNpb24sIHdlIGRpZG4ndCBpbXBsZW1lbnQgQEB0b1ByaW1pdGl2ZSBjYXNlXG4vLyBhbmQgdGhlIHNlY29uZCBhcmd1bWVudCAtIGZsYWcgLSBwcmVmZXJyZWQgdHlwZSBpcyBhIHN0cmluZ1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQsIFMpIHtcbiAgaWYgKCFpc09iamVjdChpdCkpIHJldHVybiBpdDtcbiAgdmFyIGZuLCB2YWw7XG4gIGlmIChTICYmIHR5cGVvZiAoZm4gPSBpdC50b1N0cmluZykgPT0gJ2Z1bmN0aW9uJyAmJiAhaXNPYmplY3QodmFsID0gZm4uY2FsbChpdCkpKSByZXR1cm4gdmFsO1xuICBpZiAodHlwZW9mIChmbiA9IGl0LnZhbHVlT2YpID09ICdmdW5jdGlvbicgJiYgIWlzT2JqZWN0KHZhbCA9IGZuLmNhbGwoaXQpKSkgcmV0dXJuIHZhbDtcbiAgaWYgKCFTICYmIHR5cGVvZiAoZm4gPSBpdC50b1N0cmluZykgPT0gJ2Z1bmN0aW9uJyAmJiAhaXNPYmplY3QodmFsID0gZm4uY2FsbChpdCkpKSByZXR1cm4gdmFsO1xuICB0aHJvdyBUeXBlRXJyb3IoXCJDYW4ndCBjb252ZXJ0IG9iamVjdCB0byBwcmltaXRpdmUgdmFsdWVcIik7XG59O1xuIiwidmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi9fYW4tb2JqZWN0Jyk7XG52YXIgSUU4X0RPTV9ERUZJTkUgPSByZXF1aXJlKCcuL19pZTgtZG9tLWRlZmluZScpO1xudmFyIHRvUHJpbWl0aXZlID0gcmVxdWlyZSgnLi9fdG8tcHJpbWl0aXZlJyk7XG52YXIgZFAgPSBPYmplY3QuZGVmaW5lUHJvcGVydHk7XG5cbmV4cG9ydHMuZiA9IHJlcXVpcmUoJy4vX2Rlc2NyaXB0b3JzJykgPyBPYmplY3QuZGVmaW5lUHJvcGVydHkgOiBmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0eShPLCBQLCBBdHRyaWJ1dGVzKSB7XG4gIGFuT2JqZWN0KE8pO1xuICBQID0gdG9QcmltaXRpdmUoUCwgdHJ1ZSk7XG4gIGFuT2JqZWN0KEF0dHJpYnV0ZXMpO1xuICBpZiAoSUU4X0RPTV9ERUZJTkUpIHRyeSB7XG4gICAgcmV0dXJuIGRQKE8sIFAsIEF0dHJpYnV0ZXMpO1xuICB9IGNhdGNoIChlKSB7IC8qIGVtcHR5ICovIH1cbiAgaWYgKCdnZXQnIGluIEF0dHJpYnV0ZXMgfHwgJ3NldCcgaW4gQXR0cmlidXRlcykgdGhyb3cgVHlwZUVycm9yKCdBY2Nlc3NvcnMgbm90IHN1cHBvcnRlZCEnKTtcbiAgaWYgKCd2YWx1ZScgaW4gQXR0cmlidXRlcykgT1tQXSA9IEF0dHJpYnV0ZXMudmFsdWU7XG4gIHJldHVybiBPO1xufTtcbiIsIm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGJpdG1hcCwgdmFsdWUpIHtcbiAgcmV0dXJuIHtcbiAgICBlbnVtZXJhYmxlOiAhKGJpdG1hcCAmIDEpLFxuICAgIGNvbmZpZ3VyYWJsZTogIShiaXRtYXAgJiAyKSxcbiAgICB3cml0YWJsZTogIShiaXRtYXAgJiA0KSxcbiAgICB2YWx1ZTogdmFsdWVcbiAgfTtcbn07XG4iLCJ2YXIgZFAgPSByZXF1aXJlKCcuL19vYmplY3QtZHAnKTtcbnZhciBjcmVhdGVEZXNjID0gcmVxdWlyZSgnLi9fcHJvcGVydHktZGVzYycpO1xubW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL19kZXNjcmlwdG9ycycpID8gZnVuY3Rpb24gKG9iamVjdCwga2V5LCB2YWx1ZSkge1xuICByZXR1cm4gZFAuZihvYmplY3QsIGtleSwgY3JlYXRlRGVzYygxLCB2YWx1ZSkpO1xufSA6IGZ1bmN0aW9uIChvYmplY3QsIGtleSwgdmFsdWUpIHtcbiAgb2JqZWN0W2tleV0gPSB2YWx1ZTtcbiAgcmV0dXJuIG9iamVjdDtcbn07XG4iLCJ2YXIgaWQgPSAwO1xudmFyIHB4ID0gTWF0aC5yYW5kb20oKTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGtleSkge1xuICByZXR1cm4gJ1N5bWJvbCgnLmNvbmNhdChrZXkgPT09IHVuZGVmaW5lZCA/ICcnIDoga2V5LCAnKV8nLCAoKytpZCArIHB4KS50b1N0cmluZygzNikpO1xufTtcbiIsIm1vZHVsZS5leHBvcnRzID0gZmFsc2U7XG4iLCJ2YXIgY29yZSA9IHJlcXVpcmUoJy4vX2NvcmUnKTtcbnZhciBnbG9iYWwgPSByZXF1aXJlKCcuL19nbG9iYWwnKTtcbnZhciBTSEFSRUQgPSAnX19jb3JlLWpzX3NoYXJlZF9fJztcbnZhciBzdG9yZSA9IGdsb2JhbFtTSEFSRURdIHx8IChnbG9iYWxbU0hBUkVEXSA9IHt9KTtcblxuKG1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGtleSwgdmFsdWUpIHtcbiAgcmV0dXJuIHN0b3JlW2tleV0gfHwgKHN0b3JlW2tleV0gPSB2YWx1ZSAhPT0gdW5kZWZpbmVkID8gdmFsdWUgOiB7fSk7XG59KSgndmVyc2lvbnMnLCBbXSkucHVzaCh7XG4gIHZlcnNpb246IGNvcmUudmVyc2lvbixcbiAgbW9kZTogcmVxdWlyZSgnLi9fbGlicmFyeScpID8gJ3B1cmUnIDogJ2dsb2JhbCcsXG4gIGNvcHlyaWdodDogJ8KpIDIwMTkgRGVuaXMgUHVzaGthcmV2ICh6bG9pcm9jay5ydSknXG59KTtcbiIsIm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9fc2hhcmVkJykoJ25hdGl2ZS1mdW5jdGlvbi10by1zdHJpbmcnLCBGdW5jdGlvbi50b1N0cmluZyk7XG4iLCJ2YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi9fZ2xvYmFsJyk7XG52YXIgaGlkZSA9IHJlcXVpcmUoJy4vX2hpZGUnKTtcbnZhciBoYXMgPSByZXF1aXJlKCcuL19oYXMnKTtcbnZhciBTUkMgPSByZXF1aXJlKCcuL191aWQnKSgnc3JjJyk7XG52YXIgJHRvU3RyaW5nID0gcmVxdWlyZSgnLi9fZnVuY3Rpb24tdG8tc3RyaW5nJyk7XG52YXIgVE9fU1RSSU5HID0gJ3RvU3RyaW5nJztcbnZhciBUUEwgPSAoJycgKyAkdG9TdHJpbmcpLnNwbGl0KFRPX1NUUklORyk7XG5cbnJlcXVpcmUoJy4vX2NvcmUnKS5pbnNwZWN0U291cmNlID0gZnVuY3Rpb24gKGl0KSB7XG4gIHJldHVybiAkdG9TdHJpbmcuY2FsbChpdCk7XG59O1xuXG4obW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoTywga2V5LCB2YWwsIHNhZmUpIHtcbiAgdmFyIGlzRnVuY3Rpb24gPSB0eXBlb2YgdmFsID09ICdmdW5jdGlvbic7XG4gIGlmIChpc0Z1bmN0aW9uKSBoYXModmFsLCAnbmFtZScpIHx8IGhpZGUodmFsLCAnbmFtZScsIGtleSk7XG4gIGlmIChPW2tleV0gPT09IHZhbCkgcmV0dXJuO1xuICBpZiAoaXNGdW5jdGlvbikgaGFzKHZhbCwgU1JDKSB8fCBoaWRlKHZhbCwgU1JDLCBPW2tleV0gPyAnJyArIE9ba2V5XSA6IFRQTC5qb2luKFN0cmluZyhrZXkpKSk7XG4gIGlmIChPID09PSBnbG9iYWwpIHtcbiAgICBPW2tleV0gPSB2YWw7XG4gIH0gZWxzZSBpZiAoIXNhZmUpIHtcbiAgICBkZWxldGUgT1trZXldO1xuICAgIGhpZGUoTywga2V5LCB2YWwpO1xuICB9IGVsc2UgaWYgKE9ba2V5XSkge1xuICAgIE9ba2V5XSA9IHZhbDtcbiAgfSBlbHNlIHtcbiAgICBoaWRlKE8sIGtleSwgdmFsKTtcbiAgfVxuLy8gYWRkIGZha2UgRnVuY3Rpb24jdG9TdHJpbmcgZm9yIGNvcnJlY3Qgd29yayB3cmFwcGVkIG1ldGhvZHMgLyBjb25zdHJ1Y3RvcnMgd2l0aCBtZXRob2RzIGxpa2UgTG9EYXNoIGlzTmF0aXZlXG59KShGdW5jdGlvbi5wcm90b3R5cGUsIFRPX1NUUklORywgZnVuY3Rpb24gdG9TdHJpbmcoKSB7XG4gIHJldHVybiB0eXBlb2YgdGhpcyA9PSAnZnVuY3Rpb24nICYmIHRoaXNbU1JDXSB8fCAkdG9TdHJpbmcuY2FsbCh0aGlzKTtcbn0pO1xuIiwibW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQpIHtcbiAgaWYgKHR5cGVvZiBpdCAhPSAnZnVuY3Rpb24nKSB0aHJvdyBUeXBlRXJyb3IoaXQgKyAnIGlzIG5vdCBhIGZ1bmN0aW9uIScpO1xuICByZXR1cm4gaXQ7XG59O1xuIiwiLy8gb3B0aW9uYWwgLyBzaW1wbGUgY29udGV4dCBiaW5kaW5nXG52YXIgYUZ1bmN0aW9uID0gcmVxdWlyZSgnLi9fYS1mdW5jdGlvbicpO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoZm4sIHRoYXQsIGxlbmd0aCkge1xuICBhRnVuY3Rpb24oZm4pO1xuICBpZiAodGhhdCA9PT0gdW5kZWZpbmVkKSByZXR1cm4gZm47XG4gIHN3aXRjaCAobGVuZ3RoKSB7XG4gICAgY2FzZSAxOiByZXR1cm4gZnVuY3Rpb24gKGEpIHtcbiAgICAgIHJldHVybiBmbi5jYWxsKHRoYXQsIGEpO1xuICAgIH07XG4gICAgY2FzZSAyOiByZXR1cm4gZnVuY3Rpb24gKGEsIGIpIHtcbiAgICAgIHJldHVybiBmbi5jYWxsKHRoYXQsIGEsIGIpO1xuICAgIH07XG4gICAgY2FzZSAzOiByZXR1cm4gZnVuY3Rpb24gKGEsIGIsIGMpIHtcbiAgICAgIHJldHVybiBmbi5jYWxsKHRoYXQsIGEsIGIsIGMpO1xuICAgIH07XG4gIH1cbiAgcmV0dXJuIGZ1bmN0aW9uICgvKiAuLi5hcmdzICovKSB7XG4gICAgcmV0dXJuIGZuLmFwcGx5KHRoYXQsIGFyZ3VtZW50cyk7XG4gIH07XG59O1xuIiwidmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4vX2dsb2JhbCcpO1xudmFyIGNvcmUgPSByZXF1aXJlKCcuL19jb3JlJyk7XG52YXIgaGlkZSA9IHJlcXVpcmUoJy4vX2hpZGUnKTtcbnZhciByZWRlZmluZSA9IHJlcXVpcmUoJy4vX3JlZGVmaW5lJyk7XG52YXIgY3R4ID0gcmVxdWlyZSgnLi9fY3R4Jyk7XG52YXIgUFJPVE9UWVBFID0gJ3Byb3RvdHlwZSc7XG5cbnZhciAkZXhwb3J0ID0gZnVuY3Rpb24gKHR5cGUsIG5hbWUsIHNvdXJjZSkge1xuICB2YXIgSVNfRk9SQ0VEID0gdHlwZSAmICRleHBvcnQuRjtcbiAgdmFyIElTX0dMT0JBTCA9IHR5cGUgJiAkZXhwb3J0Lkc7XG4gIHZhciBJU19TVEFUSUMgPSB0eXBlICYgJGV4cG9ydC5TO1xuICB2YXIgSVNfUFJPVE8gPSB0eXBlICYgJGV4cG9ydC5QO1xuICB2YXIgSVNfQklORCA9IHR5cGUgJiAkZXhwb3J0LkI7XG4gIHZhciB0YXJnZXQgPSBJU19HTE9CQUwgPyBnbG9iYWwgOiBJU19TVEFUSUMgPyBnbG9iYWxbbmFtZV0gfHwgKGdsb2JhbFtuYW1lXSA9IHt9KSA6IChnbG9iYWxbbmFtZV0gfHwge30pW1BST1RPVFlQRV07XG4gIHZhciBleHBvcnRzID0gSVNfR0xPQkFMID8gY29yZSA6IGNvcmVbbmFtZV0gfHwgKGNvcmVbbmFtZV0gPSB7fSk7XG4gIHZhciBleHBQcm90byA9IGV4cG9ydHNbUFJPVE9UWVBFXSB8fCAoZXhwb3J0c1tQUk9UT1RZUEVdID0ge30pO1xuICB2YXIga2V5LCBvd24sIG91dCwgZXhwO1xuICBpZiAoSVNfR0xPQkFMKSBzb3VyY2UgPSBuYW1lO1xuICBmb3IgKGtleSBpbiBzb3VyY2UpIHtcbiAgICAvLyBjb250YWlucyBpbiBuYXRpdmVcbiAgICBvd24gPSAhSVNfRk9SQ0VEICYmIHRhcmdldCAmJiB0YXJnZXRba2V5XSAhPT0gdW5kZWZpbmVkO1xuICAgIC8vIGV4cG9ydCBuYXRpdmUgb3IgcGFzc2VkXG4gICAgb3V0ID0gKG93biA/IHRhcmdldCA6IHNvdXJjZSlba2V5XTtcbiAgICAvLyBiaW5kIHRpbWVycyB0byBnbG9iYWwgZm9yIGNhbGwgZnJvbSBleHBvcnQgY29udGV4dFxuICAgIGV4cCA9IElTX0JJTkQgJiYgb3duID8gY3R4KG91dCwgZ2xvYmFsKSA6IElTX1BST1RPICYmIHR5cGVvZiBvdXQgPT0gJ2Z1bmN0aW9uJyA/IGN0eChGdW5jdGlvbi5jYWxsLCBvdXQpIDogb3V0O1xuICAgIC8vIGV4dGVuZCBnbG9iYWxcbiAgICBpZiAodGFyZ2V0KSByZWRlZmluZSh0YXJnZXQsIGtleSwgb3V0LCB0eXBlICYgJGV4cG9ydC5VKTtcbiAgICAvLyBleHBvcnRcbiAgICBpZiAoZXhwb3J0c1trZXldICE9IG91dCkgaGlkZShleHBvcnRzLCBrZXksIGV4cCk7XG4gICAgaWYgKElTX1BST1RPICYmIGV4cFByb3RvW2tleV0gIT0gb3V0KSBleHBQcm90b1trZXldID0gb3V0O1xuICB9XG59O1xuZ2xvYmFsLmNvcmUgPSBjb3JlO1xuLy8gdHlwZSBiaXRtYXBcbiRleHBvcnQuRiA9IDE7ICAgLy8gZm9yY2VkXG4kZXhwb3J0LkcgPSAyOyAgIC8vIGdsb2JhbFxuJGV4cG9ydC5TID0gNDsgICAvLyBzdGF0aWNcbiRleHBvcnQuUCA9IDg7ICAgLy8gcHJvdG9cbiRleHBvcnQuQiA9IDE2OyAgLy8gYmluZFxuJGV4cG9ydC5XID0gMzI7ICAvLyB3cmFwXG4kZXhwb3J0LlUgPSA2NDsgIC8vIHNhZmVcbiRleHBvcnQuUiA9IDEyODsgLy8gcmVhbCBwcm90byBtZXRob2QgZm9yIGBsaWJyYXJ5YFxubW9kdWxlLmV4cG9ydHMgPSAkZXhwb3J0O1xuIiwidmFyIE1FVEEgPSByZXF1aXJlKCcuL191aWQnKSgnbWV0YScpO1xudmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi9faXMtb2JqZWN0Jyk7XG52YXIgaGFzID0gcmVxdWlyZSgnLi9faGFzJyk7XG52YXIgc2V0RGVzYyA9IHJlcXVpcmUoJy4vX29iamVjdC1kcCcpLmY7XG52YXIgaWQgPSAwO1xudmFyIGlzRXh0ZW5zaWJsZSA9IE9iamVjdC5pc0V4dGVuc2libGUgfHwgZnVuY3Rpb24gKCkge1xuICByZXR1cm4gdHJ1ZTtcbn07XG52YXIgRlJFRVpFID0gIXJlcXVpcmUoJy4vX2ZhaWxzJykoZnVuY3Rpb24gKCkge1xuICByZXR1cm4gaXNFeHRlbnNpYmxlKE9iamVjdC5wcmV2ZW50RXh0ZW5zaW9ucyh7fSkpO1xufSk7XG52YXIgc2V0TWV0YSA9IGZ1bmN0aW9uIChpdCkge1xuICBzZXREZXNjKGl0LCBNRVRBLCB7IHZhbHVlOiB7XG4gICAgaTogJ08nICsgKytpZCwgLy8gb2JqZWN0IElEXG4gICAgdzoge30gICAgICAgICAgLy8gd2VhayBjb2xsZWN0aW9ucyBJRHNcbiAgfSB9KTtcbn07XG52YXIgZmFzdEtleSA9IGZ1bmN0aW9uIChpdCwgY3JlYXRlKSB7XG4gIC8vIHJldHVybiBwcmltaXRpdmUgd2l0aCBwcmVmaXhcbiAgaWYgKCFpc09iamVjdChpdCkpIHJldHVybiB0eXBlb2YgaXQgPT0gJ3N5bWJvbCcgPyBpdCA6ICh0eXBlb2YgaXQgPT0gJ3N0cmluZycgPyAnUycgOiAnUCcpICsgaXQ7XG4gIGlmICghaGFzKGl0LCBNRVRBKSkge1xuICAgIC8vIGNhbid0IHNldCBtZXRhZGF0YSB0byB1bmNhdWdodCBmcm96ZW4gb2JqZWN0XG4gICAgaWYgKCFpc0V4dGVuc2libGUoaXQpKSByZXR1cm4gJ0YnO1xuICAgIC8vIG5vdCBuZWNlc3NhcnkgdG8gYWRkIG1ldGFkYXRhXG4gICAgaWYgKCFjcmVhdGUpIHJldHVybiAnRSc7XG4gICAgLy8gYWRkIG1pc3NpbmcgbWV0YWRhdGFcbiAgICBzZXRNZXRhKGl0KTtcbiAgLy8gcmV0dXJuIG9iamVjdCBJRFxuICB9IHJldHVybiBpdFtNRVRBXS5pO1xufTtcbnZhciBnZXRXZWFrID0gZnVuY3Rpb24gKGl0LCBjcmVhdGUpIHtcbiAgaWYgKCFoYXMoaXQsIE1FVEEpKSB7XG4gICAgLy8gY2FuJ3Qgc2V0IG1ldGFkYXRhIHRvIHVuY2F1Z2h0IGZyb3plbiBvYmplY3RcbiAgICBpZiAoIWlzRXh0ZW5zaWJsZShpdCkpIHJldHVybiB0cnVlO1xuICAgIC8vIG5vdCBuZWNlc3NhcnkgdG8gYWRkIG1ldGFkYXRhXG4gICAgaWYgKCFjcmVhdGUpIHJldHVybiBmYWxzZTtcbiAgICAvLyBhZGQgbWlzc2luZyBtZXRhZGF0YVxuICAgIHNldE1ldGEoaXQpO1xuICAvLyByZXR1cm4gaGFzaCB3ZWFrIGNvbGxlY3Rpb25zIElEc1xuICB9IHJldHVybiBpdFtNRVRBXS53O1xufTtcbi8vIGFkZCBtZXRhZGF0YSBvbiBmcmVlemUtZmFtaWx5IG1ldGhvZHMgY2FsbGluZ1xudmFyIG9uRnJlZXplID0gZnVuY3Rpb24gKGl0KSB7XG4gIGlmIChGUkVFWkUgJiYgbWV0YS5ORUVEICYmIGlzRXh0ZW5zaWJsZShpdCkgJiYgIWhhcyhpdCwgTUVUQSkpIHNldE1ldGEoaXQpO1xuICByZXR1cm4gaXQ7XG59O1xudmFyIG1ldGEgPSBtb2R1bGUuZXhwb3J0cyA9IHtcbiAgS0VZOiBNRVRBLFxuICBORUVEOiBmYWxzZSxcbiAgZmFzdEtleTogZmFzdEtleSxcbiAgZ2V0V2VhazogZ2V0V2VhayxcbiAgb25GcmVlemU6IG9uRnJlZXplXG59O1xuIiwidmFyIHN0b3JlID0gcmVxdWlyZSgnLi9fc2hhcmVkJykoJ3drcycpO1xudmFyIHVpZCA9IHJlcXVpcmUoJy4vX3VpZCcpO1xudmFyIFN5bWJvbCA9IHJlcXVpcmUoJy4vX2dsb2JhbCcpLlN5bWJvbDtcbnZhciBVU0VfU1lNQk9MID0gdHlwZW9mIFN5bWJvbCA9PSAnZnVuY3Rpb24nO1xuXG52YXIgJGV4cG9ydHMgPSBtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChuYW1lKSB7XG4gIHJldHVybiBzdG9yZVtuYW1lXSB8fCAoc3RvcmVbbmFtZV0gPVxuICAgIFVTRV9TWU1CT0wgJiYgU3ltYm9sW25hbWVdIHx8IChVU0VfU1lNQk9MID8gU3ltYm9sIDogdWlkKSgnU3ltYm9sLicgKyBuYW1lKSk7XG59O1xuXG4kZXhwb3J0cy5zdG9yZSA9IHN0b3JlO1xuIiwidmFyIGRlZiA9IHJlcXVpcmUoJy4vX29iamVjdC1kcCcpLmY7XG52YXIgaGFzID0gcmVxdWlyZSgnLi9faGFzJyk7XG52YXIgVEFHID0gcmVxdWlyZSgnLi9fd2tzJykoJ3RvU3RyaW5nVGFnJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0LCB0YWcsIHN0YXQpIHtcbiAgaWYgKGl0ICYmICFoYXMoaXQgPSBzdGF0ID8gaXQgOiBpdC5wcm90b3R5cGUsIFRBRykpIGRlZihpdCwgVEFHLCB7IGNvbmZpZ3VyYWJsZTogdHJ1ZSwgdmFsdWU6IHRhZyB9KTtcbn07XG4iLCJleHBvcnRzLmYgPSByZXF1aXJlKCcuL193a3MnKTtcbiIsInZhciBnbG9iYWwgPSByZXF1aXJlKCcuL19nbG9iYWwnKTtcbnZhciBjb3JlID0gcmVxdWlyZSgnLi9fY29yZScpO1xudmFyIExJQlJBUlkgPSByZXF1aXJlKCcuL19saWJyYXJ5Jyk7XG52YXIgd2tzRXh0ID0gcmVxdWlyZSgnLi9fd2tzLWV4dCcpO1xudmFyIGRlZmluZVByb3BlcnR5ID0gcmVxdWlyZSgnLi9fb2JqZWN0LWRwJykuZjtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKG5hbWUpIHtcbiAgdmFyICRTeW1ib2wgPSBjb3JlLlN5bWJvbCB8fCAoY29yZS5TeW1ib2wgPSBMSUJSQVJZID8ge30gOiBnbG9iYWwuU3ltYm9sIHx8IHt9KTtcbiAgaWYgKG5hbWUuY2hhckF0KDApICE9ICdfJyAmJiAhKG5hbWUgaW4gJFN5bWJvbCkpIGRlZmluZVByb3BlcnR5KCRTeW1ib2wsIG5hbWUsIHsgdmFsdWU6IHdrc0V4dC5mKG5hbWUpIH0pO1xufTtcbiIsInZhciB0b1N0cmluZyA9IHt9LnRvU3RyaW5nO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCkge1xuICByZXR1cm4gdG9TdHJpbmcuY2FsbChpdCkuc2xpY2UoOCwgLTEpO1xufTtcbiIsIi8vIGZhbGxiYWNrIGZvciBub24tYXJyYXktbGlrZSBFUzMgYW5kIG5vbi1lbnVtZXJhYmxlIG9sZCBWOCBzdHJpbmdzXG52YXIgY29mID0gcmVxdWlyZSgnLi9fY29mJyk7XG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tcHJvdG90eXBlLWJ1aWx0aW5zXG5tb2R1bGUuZXhwb3J0cyA9IE9iamVjdCgneicpLnByb3BlcnR5SXNFbnVtZXJhYmxlKDApID8gT2JqZWN0IDogZnVuY3Rpb24gKGl0KSB7XG4gIHJldHVybiBjb2YoaXQpID09ICdTdHJpbmcnID8gaXQuc3BsaXQoJycpIDogT2JqZWN0KGl0KTtcbn07XG4iLCIvLyA3LjIuMSBSZXF1aXJlT2JqZWN0Q29lcmNpYmxlKGFyZ3VtZW50KVxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQpIHtcbiAgaWYgKGl0ID09IHVuZGVmaW5lZCkgdGhyb3cgVHlwZUVycm9yKFwiQ2FuJ3QgY2FsbCBtZXRob2Qgb24gIFwiICsgaXQpO1xuICByZXR1cm4gaXQ7XG59O1xuIiwiLy8gdG8gaW5kZXhlZCBvYmplY3QsIHRvT2JqZWN0IHdpdGggZmFsbGJhY2sgZm9yIG5vbi1hcnJheS1saWtlIEVTMyBzdHJpbmdzXG52YXIgSU9iamVjdCA9IHJlcXVpcmUoJy4vX2lvYmplY3QnKTtcbnZhciBkZWZpbmVkID0gcmVxdWlyZSgnLi9fZGVmaW5lZCcpO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQpIHtcbiAgcmV0dXJuIElPYmplY3QoZGVmaW5lZChpdCkpO1xufTtcbiIsIi8vIDcuMS40IFRvSW50ZWdlclxudmFyIGNlaWwgPSBNYXRoLmNlaWw7XG52YXIgZmxvb3IgPSBNYXRoLmZsb29yO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQpIHtcbiAgcmV0dXJuIGlzTmFOKGl0ID0gK2l0KSA/IDAgOiAoaXQgPiAwID8gZmxvb3IgOiBjZWlsKShpdCk7XG59O1xuIiwiLy8gNy4xLjE1IFRvTGVuZ3RoXG52YXIgdG9JbnRlZ2VyID0gcmVxdWlyZSgnLi9fdG8taW50ZWdlcicpO1xudmFyIG1pbiA9IE1hdGgubWluO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQpIHtcbiAgcmV0dXJuIGl0ID4gMCA/IG1pbih0b0ludGVnZXIoaXQpLCAweDFmZmZmZmZmZmZmZmZmKSA6IDA7IC8vIHBvdygyLCA1MykgLSAxID09IDkwMDcxOTkyNTQ3NDA5OTFcbn07XG4iLCJ2YXIgdG9JbnRlZ2VyID0gcmVxdWlyZSgnLi9fdG8taW50ZWdlcicpO1xudmFyIG1heCA9IE1hdGgubWF4O1xudmFyIG1pbiA9IE1hdGgubWluO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaW5kZXgsIGxlbmd0aCkge1xuICBpbmRleCA9IHRvSW50ZWdlcihpbmRleCk7XG4gIHJldHVybiBpbmRleCA8IDAgPyBtYXgoaW5kZXggKyBsZW5ndGgsIDApIDogbWluKGluZGV4LCBsZW5ndGgpO1xufTtcbiIsIi8vIGZhbHNlIC0+IEFycmF5I2luZGV4T2Zcbi8vIHRydWUgIC0+IEFycmF5I2luY2x1ZGVzXG52YXIgdG9JT2JqZWN0ID0gcmVxdWlyZSgnLi9fdG8taW9iamVjdCcpO1xudmFyIHRvTGVuZ3RoID0gcmVxdWlyZSgnLi9fdG8tbGVuZ3RoJyk7XG52YXIgdG9BYnNvbHV0ZUluZGV4ID0gcmVxdWlyZSgnLi9fdG8tYWJzb2x1dGUtaW5kZXgnKTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKElTX0lOQ0xVREVTKSB7XG4gIHJldHVybiBmdW5jdGlvbiAoJHRoaXMsIGVsLCBmcm9tSW5kZXgpIHtcbiAgICB2YXIgTyA9IHRvSU9iamVjdCgkdGhpcyk7XG4gICAgdmFyIGxlbmd0aCA9IHRvTGVuZ3RoKE8ubGVuZ3RoKTtcbiAgICB2YXIgaW5kZXggPSB0b0Fic29sdXRlSW5kZXgoZnJvbUluZGV4LCBsZW5ndGgpO1xuICAgIHZhciB2YWx1ZTtcbiAgICAvLyBBcnJheSNpbmNsdWRlcyB1c2VzIFNhbWVWYWx1ZVplcm8gZXF1YWxpdHkgYWxnb3JpdGhtXG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXNlbGYtY29tcGFyZVxuICAgIGlmIChJU19JTkNMVURFUyAmJiBlbCAhPSBlbCkgd2hpbGUgKGxlbmd0aCA+IGluZGV4KSB7XG4gICAgICB2YWx1ZSA9IE9baW5kZXgrK107XG4gICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tc2VsZi1jb21wYXJlXG4gICAgICBpZiAodmFsdWUgIT0gdmFsdWUpIHJldHVybiB0cnVlO1xuICAgIC8vIEFycmF5I2luZGV4T2YgaWdub3JlcyBob2xlcywgQXJyYXkjaW5jbHVkZXMgLSBub3RcbiAgICB9IGVsc2UgZm9yICg7bGVuZ3RoID4gaW5kZXg7IGluZGV4KyspIGlmIChJU19JTkNMVURFUyB8fCBpbmRleCBpbiBPKSB7XG4gICAgICBpZiAoT1tpbmRleF0gPT09IGVsKSByZXR1cm4gSVNfSU5DTFVERVMgfHwgaW5kZXggfHwgMDtcbiAgICB9IHJldHVybiAhSVNfSU5DTFVERVMgJiYgLTE7XG4gIH07XG59O1xuIiwidmFyIHNoYXJlZCA9IHJlcXVpcmUoJy4vX3NoYXJlZCcpKCdrZXlzJyk7XG52YXIgdWlkID0gcmVxdWlyZSgnLi9fdWlkJyk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChrZXkpIHtcbiAgcmV0dXJuIHNoYXJlZFtrZXldIHx8IChzaGFyZWRba2V5XSA9IHVpZChrZXkpKTtcbn07XG4iLCJ2YXIgaGFzID0gcmVxdWlyZSgnLi9faGFzJyk7XG52YXIgdG9JT2JqZWN0ID0gcmVxdWlyZSgnLi9fdG8taW9iamVjdCcpO1xudmFyIGFycmF5SW5kZXhPZiA9IHJlcXVpcmUoJy4vX2FycmF5LWluY2x1ZGVzJykoZmFsc2UpO1xudmFyIElFX1BST1RPID0gcmVxdWlyZSgnLi9fc2hhcmVkLWtleScpKCdJRV9QUk9UTycpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChvYmplY3QsIG5hbWVzKSB7XG4gIHZhciBPID0gdG9JT2JqZWN0KG9iamVjdCk7XG4gIHZhciBpID0gMDtcbiAgdmFyIHJlc3VsdCA9IFtdO1xuICB2YXIga2V5O1xuICBmb3IgKGtleSBpbiBPKSBpZiAoa2V5ICE9IElFX1BST1RPKSBoYXMoTywga2V5KSAmJiByZXN1bHQucHVzaChrZXkpO1xuICAvLyBEb24ndCBlbnVtIGJ1ZyAmIGhpZGRlbiBrZXlzXG4gIHdoaWxlIChuYW1lcy5sZW5ndGggPiBpKSBpZiAoaGFzKE8sIGtleSA9IG5hbWVzW2krK10pKSB7XG4gICAgfmFycmF5SW5kZXhPZihyZXN1bHQsIGtleSkgfHwgcmVzdWx0LnB1c2goa2V5KTtcbiAgfVxuICByZXR1cm4gcmVzdWx0O1xufTtcbiIsIi8vIElFIDgtIGRvbid0IGVudW0gYnVnIGtleXNcbm1vZHVsZS5leHBvcnRzID0gKFxuICAnY29uc3RydWN0b3IsaGFzT3duUHJvcGVydHksaXNQcm90b3R5cGVPZixwcm9wZXJ0eUlzRW51bWVyYWJsZSx0b0xvY2FsZVN0cmluZyx0b1N0cmluZyx2YWx1ZU9mJ1xuKS5zcGxpdCgnLCcpO1xuIiwiLy8gMTkuMS4yLjE0IC8gMTUuMi4zLjE0IE9iamVjdC5rZXlzKE8pXG52YXIgJGtleXMgPSByZXF1aXJlKCcuL19vYmplY3Qta2V5cy1pbnRlcm5hbCcpO1xudmFyIGVudW1CdWdLZXlzID0gcmVxdWlyZSgnLi9fZW51bS1idWcta2V5cycpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IE9iamVjdC5rZXlzIHx8IGZ1bmN0aW9uIGtleXMoTykge1xuICByZXR1cm4gJGtleXMoTywgZW51bUJ1Z0tleXMpO1xufTtcbiIsImV4cG9ydHMuZiA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHM7XG4iLCJleHBvcnRzLmYgPSB7fS5wcm9wZXJ0eUlzRW51bWVyYWJsZTtcbiIsIi8vIGFsbCBlbnVtZXJhYmxlIG9iamVjdCBrZXlzLCBpbmNsdWRlcyBzeW1ib2xzXG52YXIgZ2V0S2V5cyA9IHJlcXVpcmUoJy4vX29iamVjdC1rZXlzJyk7XG52YXIgZ09QUyA9IHJlcXVpcmUoJy4vX29iamVjdC1nb3BzJyk7XG52YXIgcElFID0gcmVxdWlyZSgnLi9fb2JqZWN0LXBpZScpO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQpIHtcbiAgdmFyIHJlc3VsdCA9IGdldEtleXMoaXQpO1xuICB2YXIgZ2V0U3ltYm9scyA9IGdPUFMuZjtcbiAgaWYgKGdldFN5bWJvbHMpIHtcbiAgICB2YXIgc3ltYm9scyA9IGdldFN5bWJvbHMoaXQpO1xuICAgIHZhciBpc0VudW0gPSBwSUUuZjtcbiAgICB2YXIgaSA9IDA7XG4gICAgdmFyIGtleTtcbiAgICB3aGlsZSAoc3ltYm9scy5sZW5ndGggPiBpKSBpZiAoaXNFbnVtLmNhbGwoaXQsIGtleSA9IHN5bWJvbHNbaSsrXSkpIHJlc3VsdC5wdXNoKGtleSk7XG4gIH0gcmV0dXJuIHJlc3VsdDtcbn07XG4iLCIvLyA3LjIuMiBJc0FycmF5KGFyZ3VtZW50KVxudmFyIGNvZiA9IHJlcXVpcmUoJy4vX2NvZicpO1xubW9kdWxlLmV4cG9ydHMgPSBBcnJheS5pc0FycmF5IHx8IGZ1bmN0aW9uIGlzQXJyYXkoYXJnKSB7XG4gIHJldHVybiBjb2YoYXJnKSA9PSAnQXJyYXknO1xufTtcbiIsIi8vIDcuMS4xMyBUb09iamVjdChhcmd1bWVudClcbnZhciBkZWZpbmVkID0gcmVxdWlyZSgnLi9fZGVmaW5lZCcpO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQpIHtcbiAgcmV0dXJuIE9iamVjdChkZWZpbmVkKGl0KSk7XG59O1xuIiwidmFyIGRQID0gcmVxdWlyZSgnLi9fb2JqZWN0LWRwJyk7XG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKTtcbnZhciBnZXRLZXlzID0gcmVxdWlyZSgnLi9fb2JqZWN0LWtleXMnKTtcblxubW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL19kZXNjcmlwdG9ycycpID8gT2JqZWN0LmRlZmluZVByb3BlcnRpZXMgOiBmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0aWVzKE8sIFByb3BlcnRpZXMpIHtcbiAgYW5PYmplY3QoTyk7XG4gIHZhciBrZXlzID0gZ2V0S2V5cyhQcm9wZXJ0aWVzKTtcbiAgdmFyIGxlbmd0aCA9IGtleXMubGVuZ3RoO1xuICB2YXIgaSA9IDA7XG4gIHZhciBQO1xuICB3aGlsZSAobGVuZ3RoID4gaSkgZFAuZihPLCBQID0ga2V5c1tpKytdLCBQcm9wZXJ0aWVzW1BdKTtcbiAgcmV0dXJuIE87XG59O1xuIiwidmFyIGRvY3VtZW50ID0gcmVxdWlyZSgnLi9fZ2xvYmFsJykuZG9jdW1lbnQ7XG5tb2R1bGUuZXhwb3J0cyA9IGRvY3VtZW50ICYmIGRvY3VtZW50LmRvY3VtZW50RWxlbWVudDtcbiIsIi8vIDE5LjEuMi4yIC8gMTUuMi4zLjUgT2JqZWN0LmNyZWF0ZShPIFssIFByb3BlcnRpZXNdKVxudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi9fYW4tb2JqZWN0Jyk7XG52YXIgZFBzID0gcmVxdWlyZSgnLi9fb2JqZWN0LWRwcycpO1xudmFyIGVudW1CdWdLZXlzID0gcmVxdWlyZSgnLi9fZW51bS1idWcta2V5cycpO1xudmFyIElFX1BST1RPID0gcmVxdWlyZSgnLi9fc2hhcmVkLWtleScpKCdJRV9QUk9UTycpO1xudmFyIEVtcHR5ID0gZnVuY3Rpb24gKCkgeyAvKiBlbXB0eSAqLyB9O1xudmFyIFBST1RPVFlQRSA9ICdwcm90b3R5cGUnO1xuXG4vLyBDcmVhdGUgb2JqZWN0IHdpdGggZmFrZSBgbnVsbGAgcHJvdG90eXBlOiB1c2UgaWZyYW1lIE9iamVjdCB3aXRoIGNsZWFyZWQgcHJvdG90eXBlXG52YXIgY3JlYXRlRGljdCA9IGZ1bmN0aW9uICgpIHtcbiAgLy8gVGhyYXNoLCB3YXN0ZSBhbmQgc29kb215OiBJRSBHQyBidWdcbiAgdmFyIGlmcmFtZSA9IHJlcXVpcmUoJy4vX2RvbS1jcmVhdGUnKSgnaWZyYW1lJyk7XG4gIHZhciBpID0gZW51bUJ1Z0tleXMubGVuZ3RoO1xuICB2YXIgbHQgPSAnPCc7XG4gIHZhciBndCA9ICc+JztcbiAgdmFyIGlmcmFtZURvY3VtZW50O1xuICBpZnJhbWUuc3R5bGUuZGlzcGxheSA9ICdub25lJztcbiAgcmVxdWlyZSgnLi9faHRtbCcpLmFwcGVuZENoaWxkKGlmcmFtZSk7XG4gIGlmcmFtZS5zcmMgPSAnamF2YXNjcmlwdDonOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXNjcmlwdC11cmxcbiAgLy8gY3JlYXRlRGljdCA9IGlmcmFtZS5jb250ZW50V2luZG93Lk9iamVjdDtcbiAgLy8gaHRtbC5yZW1vdmVDaGlsZChpZnJhbWUpO1xuICBpZnJhbWVEb2N1bWVudCA9IGlmcmFtZS5jb250ZW50V2luZG93LmRvY3VtZW50O1xuICBpZnJhbWVEb2N1bWVudC5vcGVuKCk7XG4gIGlmcmFtZURvY3VtZW50LndyaXRlKGx0ICsgJ3NjcmlwdCcgKyBndCArICdkb2N1bWVudC5GPU9iamVjdCcgKyBsdCArICcvc2NyaXB0JyArIGd0KTtcbiAgaWZyYW1lRG9jdW1lbnQuY2xvc2UoKTtcbiAgY3JlYXRlRGljdCA9IGlmcmFtZURvY3VtZW50LkY7XG4gIHdoaWxlIChpLS0pIGRlbGV0ZSBjcmVhdGVEaWN0W1BST1RPVFlQRV1bZW51bUJ1Z0tleXNbaV1dO1xuICByZXR1cm4gY3JlYXRlRGljdCgpO1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSBPYmplY3QuY3JlYXRlIHx8IGZ1bmN0aW9uIGNyZWF0ZShPLCBQcm9wZXJ0aWVzKSB7XG4gIHZhciByZXN1bHQ7XG4gIGlmIChPICE9PSBudWxsKSB7XG4gICAgRW1wdHlbUFJPVE9UWVBFXSA9IGFuT2JqZWN0KE8pO1xuICAgIHJlc3VsdCA9IG5ldyBFbXB0eSgpO1xuICAgIEVtcHR5W1BST1RPVFlQRV0gPSBudWxsO1xuICAgIC8vIGFkZCBcIl9fcHJvdG9fX1wiIGZvciBPYmplY3QuZ2V0UHJvdG90eXBlT2YgcG9seWZpbGxcbiAgICByZXN1bHRbSUVfUFJPVE9dID0gTztcbiAgfSBlbHNlIHJlc3VsdCA9IGNyZWF0ZURpY3QoKTtcbiAgcmV0dXJuIFByb3BlcnRpZXMgPT09IHVuZGVmaW5lZCA/IHJlc3VsdCA6IGRQcyhyZXN1bHQsIFByb3BlcnRpZXMpO1xufTtcbiIsIi8vIDE5LjEuMi43IC8gMTUuMi4zLjQgT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXMoTylcbnZhciAka2V5cyA9IHJlcXVpcmUoJy4vX29iamVjdC1rZXlzLWludGVybmFsJyk7XG52YXIgaGlkZGVuS2V5cyA9IHJlcXVpcmUoJy4vX2VudW0tYnVnLWtleXMnKS5jb25jYXQoJ2xlbmd0aCcsICdwcm90b3R5cGUnKTtcblxuZXhwb3J0cy5mID0gT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXMgfHwgZnVuY3Rpb24gZ2V0T3duUHJvcGVydHlOYW1lcyhPKSB7XG4gIHJldHVybiAka2V5cyhPLCBoaWRkZW5LZXlzKTtcbn07XG4iLCIvLyBmYWxsYmFjayBmb3IgSUUxMSBidWdneSBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyB3aXRoIGlmcmFtZSBhbmQgd2luZG93XG52YXIgdG9JT2JqZWN0ID0gcmVxdWlyZSgnLi9fdG8taW9iamVjdCcpO1xudmFyIGdPUE4gPSByZXF1aXJlKCcuL19vYmplY3QtZ29wbicpLmY7XG52YXIgdG9TdHJpbmcgPSB7fS50b1N0cmluZztcblxudmFyIHdpbmRvd05hbWVzID0gdHlwZW9mIHdpbmRvdyA9PSAnb2JqZWN0JyAmJiB3aW5kb3cgJiYgT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXNcbiAgPyBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyh3aW5kb3cpIDogW107XG5cbnZhciBnZXRXaW5kb3dOYW1lcyA9IGZ1bmN0aW9uIChpdCkge1xuICB0cnkge1xuICAgIHJldHVybiBnT1BOKGl0KTtcbiAgfSBjYXRjaCAoZSkge1xuICAgIHJldHVybiB3aW5kb3dOYW1lcy5zbGljZSgpO1xuICB9XG59O1xuXG5tb2R1bGUuZXhwb3J0cy5mID0gZnVuY3Rpb24gZ2V0T3duUHJvcGVydHlOYW1lcyhpdCkge1xuICByZXR1cm4gd2luZG93TmFtZXMgJiYgdG9TdHJpbmcuY2FsbChpdCkgPT0gJ1tvYmplY3QgV2luZG93XScgPyBnZXRXaW5kb3dOYW1lcyhpdCkgOiBnT1BOKHRvSU9iamVjdChpdCkpO1xufTtcbiIsInZhciBwSUUgPSByZXF1aXJlKCcuL19vYmplY3QtcGllJyk7XG52YXIgY3JlYXRlRGVzYyA9IHJlcXVpcmUoJy4vX3Byb3BlcnR5LWRlc2MnKTtcbnZhciB0b0lPYmplY3QgPSByZXF1aXJlKCcuL190by1pb2JqZWN0Jyk7XG52YXIgdG9QcmltaXRpdmUgPSByZXF1aXJlKCcuL190by1wcmltaXRpdmUnKTtcbnZhciBoYXMgPSByZXF1aXJlKCcuL19oYXMnKTtcbnZhciBJRThfRE9NX0RFRklORSA9IHJlcXVpcmUoJy4vX2llOC1kb20tZGVmaW5lJyk7XG52YXIgZ09QRCA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3I7XG5cbmV4cG9ydHMuZiA9IHJlcXVpcmUoJy4vX2Rlc2NyaXB0b3JzJykgPyBnT1BEIDogZnVuY3Rpb24gZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKE8sIFApIHtcbiAgTyA9IHRvSU9iamVjdChPKTtcbiAgUCA9IHRvUHJpbWl0aXZlKFAsIHRydWUpO1xuICBpZiAoSUU4X0RPTV9ERUZJTkUpIHRyeSB7XG4gICAgcmV0dXJuIGdPUEQoTywgUCk7XG4gIH0gY2F0Y2ggKGUpIHsgLyogZW1wdHkgKi8gfVxuICBpZiAoaGFzKE8sIFApKSByZXR1cm4gY3JlYXRlRGVzYyghcElFLmYuY2FsbChPLCBQKSwgT1tQXSk7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuLy8gRUNNQVNjcmlwdCA2IHN5bWJvbHMgc2hpbVxudmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4vX2dsb2JhbCcpO1xudmFyIGhhcyA9IHJlcXVpcmUoJy4vX2hhcycpO1xudmFyIERFU0NSSVBUT1JTID0gcmVxdWlyZSgnLi9fZGVzY3JpcHRvcnMnKTtcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgcmVkZWZpbmUgPSByZXF1aXJlKCcuL19yZWRlZmluZScpO1xudmFyIE1FVEEgPSByZXF1aXJlKCcuL19tZXRhJykuS0VZO1xudmFyICRmYWlscyA9IHJlcXVpcmUoJy4vX2ZhaWxzJyk7XG52YXIgc2hhcmVkID0gcmVxdWlyZSgnLi9fc2hhcmVkJyk7XG52YXIgc2V0VG9TdHJpbmdUYWcgPSByZXF1aXJlKCcuL19zZXQtdG8tc3RyaW5nLXRhZycpO1xudmFyIHVpZCA9IHJlcXVpcmUoJy4vX3VpZCcpO1xudmFyIHdrcyA9IHJlcXVpcmUoJy4vX3drcycpO1xudmFyIHdrc0V4dCA9IHJlcXVpcmUoJy4vX3drcy1leHQnKTtcbnZhciB3a3NEZWZpbmUgPSByZXF1aXJlKCcuL193a3MtZGVmaW5lJyk7XG52YXIgZW51bUtleXMgPSByZXF1aXJlKCcuL19lbnVtLWtleXMnKTtcbnZhciBpc0FycmF5ID0gcmVxdWlyZSgnLi9faXMtYXJyYXknKTtcbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4vX2FuLW9iamVjdCcpO1xudmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi9faXMtb2JqZWN0Jyk7XG52YXIgdG9PYmplY3QgPSByZXF1aXJlKCcuL190by1vYmplY3QnKTtcbnZhciB0b0lPYmplY3QgPSByZXF1aXJlKCcuL190by1pb2JqZWN0Jyk7XG52YXIgdG9QcmltaXRpdmUgPSByZXF1aXJlKCcuL190by1wcmltaXRpdmUnKTtcbnZhciBjcmVhdGVEZXNjID0gcmVxdWlyZSgnLi9fcHJvcGVydHktZGVzYycpO1xudmFyIF9jcmVhdGUgPSByZXF1aXJlKCcuL19vYmplY3QtY3JlYXRlJyk7XG52YXIgZ09QTkV4dCA9IHJlcXVpcmUoJy4vX29iamVjdC1nb3BuLWV4dCcpO1xudmFyICRHT1BEID0gcmVxdWlyZSgnLi9fb2JqZWN0LWdvcGQnKTtcbnZhciAkR09QUyA9IHJlcXVpcmUoJy4vX29iamVjdC1nb3BzJyk7XG52YXIgJERQID0gcmVxdWlyZSgnLi9fb2JqZWN0LWRwJyk7XG52YXIgJGtleXMgPSByZXF1aXJlKCcuL19vYmplY3Qta2V5cycpO1xudmFyIGdPUEQgPSAkR09QRC5mO1xudmFyIGRQID0gJERQLmY7XG52YXIgZ09QTiA9IGdPUE5FeHQuZjtcbnZhciAkU3ltYm9sID0gZ2xvYmFsLlN5bWJvbDtcbnZhciAkSlNPTiA9IGdsb2JhbC5KU09OO1xudmFyIF9zdHJpbmdpZnkgPSAkSlNPTiAmJiAkSlNPTi5zdHJpbmdpZnk7XG52YXIgUFJPVE9UWVBFID0gJ3Byb3RvdHlwZSc7XG52YXIgSElEREVOID0gd2tzKCdfaGlkZGVuJyk7XG52YXIgVE9fUFJJTUlUSVZFID0gd2tzKCd0b1ByaW1pdGl2ZScpO1xudmFyIGlzRW51bSA9IHt9LnByb3BlcnR5SXNFbnVtZXJhYmxlO1xudmFyIFN5bWJvbFJlZ2lzdHJ5ID0gc2hhcmVkKCdzeW1ib2wtcmVnaXN0cnknKTtcbnZhciBBbGxTeW1ib2xzID0gc2hhcmVkKCdzeW1ib2xzJyk7XG52YXIgT1BTeW1ib2xzID0gc2hhcmVkKCdvcC1zeW1ib2xzJyk7XG52YXIgT2JqZWN0UHJvdG8gPSBPYmplY3RbUFJPVE9UWVBFXTtcbnZhciBVU0VfTkFUSVZFID0gdHlwZW9mICRTeW1ib2wgPT0gJ2Z1bmN0aW9uJyAmJiAhISRHT1BTLmY7XG52YXIgUU9iamVjdCA9IGdsb2JhbC5RT2JqZWN0O1xuLy8gRG9uJ3QgdXNlIHNldHRlcnMgaW4gUXQgU2NyaXB0LCBodHRwczovL2dpdGh1Yi5jb20vemxvaXJvY2svY29yZS1qcy9pc3N1ZXMvMTczXG52YXIgc2V0dGVyID0gIVFPYmplY3QgfHwgIVFPYmplY3RbUFJPVE9UWVBFXSB8fCAhUU9iamVjdFtQUk9UT1RZUEVdLmZpbmRDaGlsZDtcblxuLy8gZmFsbGJhY2sgZm9yIG9sZCBBbmRyb2lkLCBodHRwczovL2NvZGUuZ29vZ2xlLmNvbS9wL3Y4L2lzc3Vlcy9kZXRhaWw/aWQ9Njg3XG52YXIgc2V0U3ltYm9sRGVzYyA9IERFU0NSSVBUT1JTICYmICRmYWlscyhmdW5jdGlvbiAoKSB7XG4gIHJldHVybiBfY3JlYXRlKGRQKHt9LCAnYScsIHtcbiAgICBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGRQKHRoaXMsICdhJywgeyB2YWx1ZTogNyB9KS5hOyB9XG4gIH0pKS5hICE9IDc7XG59KSA/IGZ1bmN0aW9uIChpdCwga2V5LCBEKSB7XG4gIHZhciBwcm90b0Rlc2MgPSBnT1BEKE9iamVjdFByb3RvLCBrZXkpO1xuICBpZiAocHJvdG9EZXNjKSBkZWxldGUgT2JqZWN0UHJvdG9ba2V5XTtcbiAgZFAoaXQsIGtleSwgRCk7XG4gIGlmIChwcm90b0Rlc2MgJiYgaXQgIT09IE9iamVjdFByb3RvKSBkUChPYmplY3RQcm90bywga2V5LCBwcm90b0Rlc2MpO1xufSA6IGRQO1xuXG52YXIgd3JhcCA9IGZ1bmN0aW9uICh0YWcpIHtcbiAgdmFyIHN5bSA9IEFsbFN5bWJvbHNbdGFnXSA9IF9jcmVhdGUoJFN5bWJvbFtQUk9UT1RZUEVdKTtcbiAgc3ltLl9rID0gdGFnO1xuICByZXR1cm4gc3ltO1xufTtcblxudmFyIGlzU3ltYm9sID0gVVNFX05BVElWRSAmJiB0eXBlb2YgJFN5bWJvbC5pdGVyYXRvciA9PSAnc3ltYm9sJyA/IGZ1bmN0aW9uIChpdCkge1xuICByZXR1cm4gdHlwZW9mIGl0ID09ICdzeW1ib2wnO1xufSA6IGZ1bmN0aW9uIChpdCkge1xuICByZXR1cm4gaXQgaW5zdGFuY2VvZiAkU3ltYm9sO1xufTtcblxudmFyICRkZWZpbmVQcm9wZXJ0eSA9IGZ1bmN0aW9uIGRlZmluZVByb3BlcnR5KGl0LCBrZXksIEQpIHtcbiAgaWYgKGl0ID09PSBPYmplY3RQcm90bykgJGRlZmluZVByb3BlcnR5KE9QU3ltYm9scywga2V5LCBEKTtcbiAgYW5PYmplY3QoaXQpO1xuICBrZXkgPSB0b1ByaW1pdGl2ZShrZXksIHRydWUpO1xuICBhbk9iamVjdChEKTtcbiAgaWYgKGhhcyhBbGxTeW1ib2xzLCBrZXkpKSB7XG4gICAgaWYgKCFELmVudW1lcmFibGUpIHtcbiAgICAgIGlmICghaGFzKGl0LCBISURERU4pKSBkUChpdCwgSElEREVOLCBjcmVhdGVEZXNjKDEsIHt9KSk7XG4gICAgICBpdFtISURERU5dW2tleV0gPSB0cnVlO1xuICAgIH0gZWxzZSB7XG4gICAgICBpZiAoaGFzKGl0LCBISURERU4pICYmIGl0W0hJRERFTl1ba2V5XSkgaXRbSElEREVOXVtrZXldID0gZmFsc2U7XG4gICAgICBEID0gX2NyZWF0ZShELCB7IGVudW1lcmFibGU6IGNyZWF0ZURlc2MoMCwgZmFsc2UpIH0pO1xuICAgIH0gcmV0dXJuIHNldFN5bWJvbERlc2MoaXQsIGtleSwgRCk7XG4gIH0gcmV0dXJuIGRQKGl0LCBrZXksIEQpO1xufTtcbnZhciAkZGVmaW5lUHJvcGVydGllcyA9IGZ1bmN0aW9uIGRlZmluZVByb3BlcnRpZXMoaXQsIFApIHtcbiAgYW5PYmplY3QoaXQpO1xuICB2YXIga2V5cyA9IGVudW1LZXlzKFAgPSB0b0lPYmplY3QoUCkpO1xuICB2YXIgaSA9IDA7XG4gIHZhciBsID0ga2V5cy5sZW5ndGg7XG4gIHZhciBrZXk7XG4gIHdoaWxlIChsID4gaSkgJGRlZmluZVByb3BlcnR5KGl0LCBrZXkgPSBrZXlzW2krK10sIFBba2V5XSk7XG4gIHJldHVybiBpdDtcbn07XG52YXIgJGNyZWF0ZSA9IGZ1bmN0aW9uIGNyZWF0ZShpdCwgUCkge1xuICByZXR1cm4gUCA9PT0gdW5kZWZpbmVkID8gX2NyZWF0ZShpdCkgOiAkZGVmaW5lUHJvcGVydGllcyhfY3JlYXRlKGl0KSwgUCk7XG59O1xudmFyICRwcm9wZXJ0eUlzRW51bWVyYWJsZSA9IGZ1bmN0aW9uIHByb3BlcnR5SXNFbnVtZXJhYmxlKGtleSkge1xuICB2YXIgRSA9IGlzRW51bS5jYWxsKHRoaXMsIGtleSA9IHRvUHJpbWl0aXZlKGtleSwgdHJ1ZSkpO1xuICBpZiAodGhpcyA9PT0gT2JqZWN0UHJvdG8gJiYgaGFzKEFsbFN5bWJvbHMsIGtleSkgJiYgIWhhcyhPUFN5bWJvbHMsIGtleSkpIHJldHVybiBmYWxzZTtcbiAgcmV0dXJuIEUgfHwgIWhhcyh0aGlzLCBrZXkpIHx8ICFoYXMoQWxsU3ltYm9scywga2V5KSB8fCBoYXModGhpcywgSElEREVOKSAmJiB0aGlzW0hJRERFTl1ba2V5XSA/IEUgOiB0cnVlO1xufTtcbnZhciAkZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yID0gZnVuY3Rpb24gZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKGl0LCBrZXkpIHtcbiAgaXQgPSB0b0lPYmplY3QoaXQpO1xuICBrZXkgPSB0b1ByaW1pdGl2ZShrZXksIHRydWUpO1xuICBpZiAoaXQgPT09IE9iamVjdFByb3RvICYmIGhhcyhBbGxTeW1ib2xzLCBrZXkpICYmICFoYXMoT1BTeW1ib2xzLCBrZXkpKSByZXR1cm47XG4gIHZhciBEID0gZ09QRChpdCwga2V5KTtcbiAgaWYgKEQgJiYgaGFzKEFsbFN5bWJvbHMsIGtleSkgJiYgIShoYXMoaXQsIEhJRERFTikgJiYgaXRbSElEREVOXVtrZXldKSkgRC5lbnVtZXJhYmxlID0gdHJ1ZTtcbiAgcmV0dXJuIEQ7XG59O1xudmFyICRnZXRPd25Qcm9wZXJ0eU5hbWVzID0gZnVuY3Rpb24gZ2V0T3duUHJvcGVydHlOYW1lcyhpdCkge1xuICB2YXIgbmFtZXMgPSBnT1BOKHRvSU9iamVjdChpdCkpO1xuICB2YXIgcmVzdWx0ID0gW107XG4gIHZhciBpID0gMDtcbiAgdmFyIGtleTtcbiAgd2hpbGUgKG5hbWVzLmxlbmd0aCA+IGkpIHtcbiAgICBpZiAoIWhhcyhBbGxTeW1ib2xzLCBrZXkgPSBuYW1lc1tpKytdKSAmJiBrZXkgIT0gSElEREVOICYmIGtleSAhPSBNRVRBKSByZXN1bHQucHVzaChrZXkpO1xuICB9IHJldHVybiByZXN1bHQ7XG59O1xudmFyICRnZXRPd25Qcm9wZXJ0eVN5bWJvbHMgPSBmdW5jdGlvbiBnZXRPd25Qcm9wZXJ0eVN5bWJvbHMoaXQpIHtcbiAgdmFyIElTX09QID0gaXQgPT09IE9iamVjdFByb3RvO1xuICB2YXIgbmFtZXMgPSBnT1BOKElTX09QID8gT1BTeW1ib2xzIDogdG9JT2JqZWN0KGl0KSk7XG4gIHZhciByZXN1bHQgPSBbXTtcbiAgdmFyIGkgPSAwO1xuICB2YXIga2V5O1xuICB3aGlsZSAobmFtZXMubGVuZ3RoID4gaSkge1xuICAgIGlmIChoYXMoQWxsU3ltYm9scywga2V5ID0gbmFtZXNbaSsrXSkgJiYgKElTX09QID8gaGFzKE9iamVjdFByb3RvLCBrZXkpIDogdHJ1ZSkpIHJlc3VsdC5wdXNoKEFsbFN5bWJvbHNba2V5XSk7XG4gIH0gcmV0dXJuIHJlc3VsdDtcbn07XG5cbi8vIDE5LjQuMS4xIFN5bWJvbChbZGVzY3JpcHRpb25dKVxuaWYgKCFVU0VfTkFUSVZFKSB7XG4gICRTeW1ib2wgPSBmdW5jdGlvbiBTeW1ib2woKSB7XG4gICAgaWYgKHRoaXMgaW5zdGFuY2VvZiAkU3ltYm9sKSB0aHJvdyBUeXBlRXJyb3IoJ1N5bWJvbCBpcyBub3QgYSBjb25zdHJ1Y3RvciEnKTtcbiAgICB2YXIgdGFnID0gdWlkKGFyZ3VtZW50cy5sZW5ndGggPiAwID8gYXJndW1lbnRzWzBdIDogdW5kZWZpbmVkKTtcbiAgICB2YXIgJHNldCA9IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgaWYgKHRoaXMgPT09IE9iamVjdFByb3RvKSAkc2V0LmNhbGwoT1BTeW1ib2xzLCB2YWx1ZSk7XG4gICAgICBpZiAoaGFzKHRoaXMsIEhJRERFTikgJiYgaGFzKHRoaXNbSElEREVOXSwgdGFnKSkgdGhpc1tISURERU5dW3RhZ10gPSBmYWxzZTtcbiAgICAgIHNldFN5bWJvbERlc2ModGhpcywgdGFnLCBjcmVhdGVEZXNjKDEsIHZhbHVlKSk7XG4gICAgfTtcbiAgICBpZiAoREVTQ1JJUFRPUlMgJiYgc2V0dGVyKSBzZXRTeW1ib2xEZXNjKE9iamVjdFByb3RvLCB0YWcsIHsgY29uZmlndXJhYmxlOiB0cnVlLCBzZXQ6ICRzZXQgfSk7XG4gICAgcmV0dXJuIHdyYXAodGFnKTtcbiAgfTtcbiAgcmVkZWZpbmUoJFN5bWJvbFtQUk9UT1RZUEVdLCAndG9TdHJpbmcnLCBmdW5jdGlvbiB0b1N0cmluZygpIHtcbiAgICByZXR1cm4gdGhpcy5faztcbiAgfSk7XG5cbiAgJEdPUEQuZiA9ICRnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3I7XG4gICREUC5mID0gJGRlZmluZVByb3BlcnR5O1xuICByZXF1aXJlKCcuL19vYmplY3QtZ29wbicpLmYgPSBnT1BORXh0LmYgPSAkZ2V0T3duUHJvcGVydHlOYW1lcztcbiAgcmVxdWlyZSgnLi9fb2JqZWN0LXBpZScpLmYgPSAkcHJvcGVydHlJc0VudW1lcmFibGU7XG4gICRHT1BTLmYgPSAkZ2V0T3duUHJvcGVydHlTeW1ib2xzO1xuXG4gIGlmIChERVNDUklQVE9SUyAmJiAhcmVxdWlyZSgnLi9fbGlicmFyeScpKSB7XG4gICAgcmVkZWZpbmUoT2JqZWN0UHJvdG8sICdwcm9wZXJ0eUlzRW51bWVyYWJsZScsICRwcm9wZXJ0eUlzRW51bWVyYWJsZSwgdHJ1ZSk7XG4gIH1cblxuICB3a3NFeHQuZiA9IGZ1bmN0aW9uIChuYW1lKSB7XG4gICAgcmV0dXJuIHdyYXAod2tzKG5hbWUpKTtcbiAgfTtcbn1cblxuJGV4cG9ydCgkZXhwb3J0LkcgKyAkZXhwb3J0LlcgKyAkZXhwb3J0LkYgKiAhVVNFX05BVElWRSwgeyBTeW1ib2w6ICRTeW1ib2wgfSk7XG5cbmZvciAodmFyIGVzNlN5bWJvbHMgPSAoXG4gIC8vIDE5LjQuMi4yLCAxOS40LjIuMywgMTkuNC4yLjQsIDE5LjQuMi42LCAxOS40LjIuOCwgMTkuNC4yLjksIDE5LjQuMi4xMCwgMTkuNC4yLjExLCAxOS40LjIuMTIsIDE5LjQuMi4xMywgMTkuNC4yLjE0XG4gICdoYXNJbnN0YW5jZSxpc0NvbmNhdFNwcmVhZGFibGUsaXRlcmF0b3IsbWF0Y2gscmVwbGFjZSxzZWFyY2gsc3BlY2llcyxzcGxpdCx0b1ByaW1pdGl2ZSx0b1N0cmluZ1RhZyx1bnNjb3BhYmxlcydcbikuc3BsaXQoJywnKSwgaiA9IDA7IGVzNlN5bWJvbHMubGVuZ3RoID4gajspd2tzKGVzNlN5bWJvbHNbaisrXSk7XG5cbmZvciAodmFyIHdlbGxLbm93blN5bWJvbHMgPSAka2V5cyh3a3Muc3RvcmUpLCBrID0gMDsgd2VsbEtub3duU3ltYm9scy5sZW5ndGggPiBrOykgd2tzRGVmaW5lKHdlbGxLbm93blN5bWJvbHNbaysrXSk7XG5cbiRleHBvcnQoJGV4cG9ydC5TICsgJGV4cG9ydC5GICogIVVTRV9OQVRJVkUsICdTeW1ib2wnLCB7XG4gIC8vIDE5LjQuMi4xIFN5bWJvbC5mb3Ioa2V5KVxuICAnZm9yJzogZnVuY3Rpb24gKGtleSkge1xuICAgIHJldHVybiBoYXMoU3ltYm9sUmVnaXN0cnksIGtleSArPSAnJylcbiAgICAgID8gU3ltYm9sUmVnaXN0cnlba2V5XVxuICAgICAgOiBTeW1ib2xSZWdpc3RyeVtrZXldID0gJFN5bWJvbChrZXkpO1xuICB9LFxuICAvLyAxOS40LjIuNSBTeW1ib2wua2V5Rm9yKHN5bSlcbiAga2V5Rm9yOiBmdW5jdGlvbiBrZXlGb3Ioc3ltKSB7XG4gICAgaWYgKCFpc1N5bWJvbChzeW0pKSB0aHJvdyBUeXBlRXJyb3Ioc3ltICsgJyBpcyBub3QgYSBzeW1ib2whJyk7XG4gICAgZm9yICh2YXIga2V5IGluIFN5bWJvbFJlZ2lzdHJ5KSBpZiAoU3ltYm9sUmVnaXN0cnlba2V5XSA9PT0gc3ltKSByZXR1cm4ga2V5O1xuICB9LFxuICB1c2VTZXR0ZXI6IGZ1bmN0aW9uICgpIHsgc2V0dGVyID0gdHJ1ZTsgfSxcbiAgdXNlU2ltcGxlOiBmdW5jdGlvbiAoKSB7IHNldHRlciA9IGZhbHNlOyB9XG59KTtcblxuJGV4cG9ydCgkZXhwb3J0LlMgKyAkZXhwb3J0LkYgKiAhVVNFX05BVElWRSwgJ09iamVjdCcsIHtcbiAgLy8gMTkuMS4yLjIgT2JqZWN0LmNyZWF0ZShPIFssIFByb3BlcnRpZXNdKVxuICBjcmVhdGU6ICRjcmVhdGUsXG4gIC8vIDE5LjEuMi40IE9iamVjdC5kZWZpbmVQcm9wZXJ0eShPLCBQLCBBdHRyaWJ1dGVzKVxuICBkZWZpbmVQcm9wZXJ0eTogJGRlZmluZVByb3BlcnR5LFxuICAvLyAxOS4xLjIuMyBPYmplY3QuZGVmaW5lUHJvcGVydGllcyhPLCBQcm9wZXJ0aWVzKVxuICBkZWZpbmVQcm9wZXJ0aWVzOiAkZGVmaW5lUHJvcGVydGllcyxcbiAgLy8gMTkuMS4yLjYgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihPLCBQKVxuICBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3I6ICRnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IsXG4gIC8vIDE5LjEuMi43IE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKE8pXG4gIGdldE93blByb3BlcnR5TmFtZXM6ICRnZXRPd25Qcm9wZXJ0eU5hbWVzLFxuICAvLyAxOS4xLjIuOCBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKE8pXG4gIGdldE93blByb3BlcnR5U3ltYm9sczogJGdldE93blByb3BlcnR5U3ltYm9sc1xufSk7XG5cbi8vIENocm9tZSAzOCBhbmQgMzkgYE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHNgIGZhaWxzIG9uIHByaW1pdGl2ZXNcbi8vIGh0dHBzOi8vYnVncy5jaHJvbWl1bS5vcmcvcC92OC9pc3N1ZXMvZGV0YWlsP2lkPTM0NDNcbnZhciBGQUlMU19PTl9QUklNSVRJVkVTID0gJGZhaWxzKGZ1bmN0aW9uICgpIHsgJEdPUFMuZigxKTsgfSk7XG5cbiRleHBvcnQoJGV4cG9ydC5TICsgJGV4cG9ydC5GICogRkFJTFNfT05fUFJJTUlUSVZFUywgJ09iamVjdCcsIHtcbiAgZ2V0T3duUHJvcGVydHlTeW1ib2xzOiBmdW5jdGlvbiBnZXRPd25Qcm9wZXJ0eVN5bWJvbHMoaXQpIHtcbiAgICByZXR1cm4gJEdPUFMuZih0b09iamVjdChpdCkpO1xuICB9XG59KTtcblxuLy8gMjQuMy4yIEpTT04uc3RyaW5naWZ5KHZhbHVlIFssIHJlcGxhY2VyIFssIHNwYWNlXV0pXG4kSlNPTiAmJiAkZXhwb3J0KCRleHBvcnQuUyArICRleHBvcnQuRiAqICghVVNFX05BVElWRSB8fCAkZmFpbHMoZnVuY3Rpb24gKCkge1xuICB2YXIgUyA9ICRTeW1ib2woKTtcbiAgLy8gTVMgRWRnZSBjb252ZXJ0cyBzeW1ib2wgdmFsdWVzIHRvIEpTT04gYXMge31cbiAgLy8gV2ViS2l0IGNvbnZlcnRzIHN5bWJvbCB2YWx1ZXMgdG8gSlNPTiBhcyBudWxsXG4gIC8vIFY4IHRocm93cyBvbiBib3hlZCBzeW1ib2xzXG4gIHJldHVybiBfc3RyaW5naWZ5KFtTXSkgIT0gJ1tudWxsXScgfHwgX3N0cmluZ2lmeSh7IGE6IFMgfSkgIT0gJ3t9JyB8fCBfc3RyaW5naWZ5KE9iamVjdChTKSkgIT0gJ3t9Jztcbn0pKSwgJ0pTT04nLCB7XG4gIHN0cmluZ2lmeTogZnVuY3Rpb24gc3RyaW5naWZ5KGl0KSB7XG4gICAgdmFyIGFyZ3MgPSBbaXRdO1xuICAgIHZhciBpID0gMTtcbiAgICB2YXIgcmVwbGFjZXIsICRyZXBsYWNlcjtcbiAgICB3aGlsZSAoYXJndW1lbnRzLmxlbmd0aCA+IGkpIGFyZ3MucHVzaChhcmd1bWVudHNbaSsrXSk7XG4gICAgJHJlcGxhY2VyID0gcmVwbGFjZXIgPSBhcmdzWzFdO1xuICAgIGlmICghaXNPYmplY3QocmVwbGFjZXIpICYmIGl0ID09PSB1bmRlZmluZWQgfHwgaXNTeW1ib2woaXQpKSByZXR1cm47IC8vIElFOCByZXR1cm5zIHN0cmluZyBvbiB1bmRlZmluZWRcbiAgICBpZiAoIWlzQXJyYXkocmVwbGFjZXIpKSByZXBsYWNlciA9IGZ1bmN0aW9uIChrZXksIHZhbHVlKSB7XG4gICAgICBpZiAodHlwZW9mICRyZXBsYWNlciA9PSAnZnVuY3Rpb24nKSB2YWx1ZSA9ICRyZXBsYWNlci5jYWxsKHRoaXMsIGtleSwgdmFsdWUpO1xuICAgICAgaWYgKCFpc1N5bWJvbCh2YWx1ZSkpIHJldHVybiB2YWx1ZTtcbiAgICB9O1xuICAgIGFyZ3NbMV0gPSByZXBsYWNlcjtcbiAgICByZXR1cm4gX3N0cmluZ2lmeS5hcHBseSgkSlNPTiwgYXJncyk7XG4gIH1cbn0pO1xuXG4vLyAxOS40LjMuNCBTeW1ib2wucHJvdG90eXBlW0BAdG9QcmltaXRpdmVdKGhpbnQpXG4kU3ltYm9sW1BST1RPVFlQRV1bVE9fUFJJTUlUSVZFXSB8fCByZXF1aXJlKCcuL19oaWRlJykoJFN5bWJvbFtQUk9UT1RZUEVdLCBUT19QUklNSVRJVkUsICRTeW1ib2xbUFJPVE9UWVBFXS52YWx1ZU9mKTtcbi8vIDE5LjQuMy41IFN5bWJvbC5wcm90b3R5cGVbQEB0b1N0cmluZ1RhZ11cbnNldFRvU3RyaW5nVGFnKCRTeW1ib2wsICdTeW1ib2wnKTtcbi8vIDIwLjIuMS45IE1hdGhbQEB0b1N0cmluZ1RhZ11cbnNldFRvU3RyaW5nVGFnKE1hdGgsICdNYXRoJywgdHJ1ZSk7XG4vLyAyNC4zLjMgSlNPTltAQHRvU3RyaW5nVGFnXVxuc2V0VG9TdHJpbmdUYWcoZ2xvYmFsLkpTT04sICdKU09OJywgdHJ1ZSk7XG4iLCJ2YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xuLy8gMTkuMS4yLjIgLyAxNS4yLjMuNSBPYmplY3QuY3JlYXRlKE8gWywgUHJvcGVydGllc10pXG4kZXhwb3J0KCRleHBvcnQuUywgJ09iamVjdCcsIHsgY3JlYXRlOiByZXF1aXJlKCcuL19vYmplY3QtY3JlYXRlJykgfSk7XG4iLCJ2YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xuLy8gMTkuMS4yLjQgLyAxNS4yLjMuNiBPYmplY3QuZGVmaW5lUHJvcGVydHkoTywgUCwgQXR0cmlidXRlcylcbiRleHBvcnQoJGV4cG9ydC5TICsgJGV4cG9ydC5GICogIXJlcXVpcmUoJy4vX2Rlc2NyaXB0b3JzJyksICdPYmplY3QnLCB7IGRlZmluZVByb3BlcnR5OiByZXF1aXJlKCcuL19vYmplY3QtZHAnKS5mIH0pO1xuIiwidmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbi8vIDE5LjEuMi4zIC8gMTUuMi4zLjcgT2JqZWN0LmRlZmluZVByb3BlcnRpZXMoTywgUHJvcGVydGllcylcbiRleHBvcnQoJGV4cG9ydC5TICsgJGV4cG9ydC5GICogIXJlcXVpcmUoJy4vX2Rlc2NyaXB0b3JzJyksICdPYmplY3QnLCB7IGRlZmluZVByb3BlcnRpZXM6IHJlcXVpcmUoJy4vX29iamVjdC1kcHMnKSB9KTtcbiIsIi8vIG1vc3QgT2JqZWN0IG1ldGhvZHMgYnkgRVM2IHNob3VsZCBhY2NlcHQgcHJpbWl0aXZlc1xudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciBjb3JlID0gcmVxdWlyZSgnLi9fY29yZScpO1xudmFyIGZhaWxzID0gcmVxdWlyZSgnLi9fZmFpbHMnKTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKEtFWSwgZXhlYykge1xuICB2YXIgZm4gPSAoY29yZS5PYmplY3QgfHwge30pW0tFWV0gfHwgT2JqZWN0W0tFWV07XG4gIHZhciBleHAgPSB7fTtcbiAgZXhwW0tFWV0gPSBleGVjKGZuKTtcbiAgJGV4cG9ydCgkZXhwb3J0LlMgKyAkZXhwb3J0LkYgKiBmYWlscyhmdW5jdGlvbiAoKSB7IGZuKDEpOyB9KSwgJ09iamVjdCcsIGV4cCk7XG59O1xuIiwiLy8gMTkuMS4yLjYgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihPLCBQKVxudmFyIHRvSU9iamVjdCA9IHJlcXVpcmUoJy4vX3RvLWlvYmplY3QnKTtcbnZhciAkZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yID0gcmVxdWlyZSgnLi9fb2JqZWN0LWdvcGQnKS5mO1xuXG5yZXF1aXJlKCcuL19vYmplY3Qtc2FwJykoJ2dldE93blByb3BlcnR5RGVzY3JpcHRvcicsIGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIGdldE93blByb3BlcnR5RGVzY3JpcHRvcihpdCwga2V5KSB7XG4gICAgcmV0dXJuICRnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IodG9JT2JqZWN0KGl0KSwga2V5KTtcbiAgfTtcbn0pO1xuIiwiLy8gMTkuMS4yLjkgLyAxNS4yLjMuMiBPYmplY3QuZ2V0UHJvdG90eXBlT2YoTylcbnZhciBoYXMgPSByZXF1aXJlKCcuL19oYXMnKTtcbnZhciB0b09iamVjdCA9IHJlcXVpcmUoJy4vX3RvLW9iamVjdCcpO1xudmFyIElFX1BST1RPID0gcmVxdWlyZSgnLi9fc2hhcmVkLWtleScpKCdJRV9QUk9UTycpO1xudmFyIE9iamVjdFByb3RvID0gT2JqZWN0LnByb3RvdHlwZTtcblxubW9kdWxlLmV4cG9ydHMgPSBPYmplY3QuZ2V0UHJvdG90eXBlT2YgfHwgZnVuY3Rpb24gKE8pIHtcbiAgTyA9IHRvT2JqZWN0KE8pO1xuICBpZiAoaGFzKE8sIElFX1BST1RPKSkgcmV0dXJuIE9bSUVfUFJPVE9dO1xuICBpZiAodHlwZW9mIE8uY29uc3RydWN0b3IgPT0gJ2Z1bmN0aW9uJyAmJiBPIGluc3RhbmNlb2YgTy5jb25zdHJ1Y3Rvcikge1xuICAgIHJldHVybiBPLmNvbnN0cnVjdG9yLnByb3RvdHlwZTtcbiAgfSByZXR1cm4gTyBpbnN0YW5jZW9mIE9iamVjdCA/IE9iamVjdFByb3RvIDogbnVsbDtcbn07XG4iLCIvLyAxOS4xLjIuOSBPYmplY3QuZ2V0UHJvdG90eXBlT2YoTylcbnZhciB0b09iamVjdCA9IHJlcXVpcmUoJy4vX3RvLW9iamVjdCcpO1xudmFyICRnZXRQcm90b3R5cGVPZiA9IHJlcXVpcmUoJy4vX29iamVjdC1ncG8nKTtcblxucmVxdWlyZSgnLi9fb2JqZWN0LXNhcCcpKCdnZXRQcm90b3R5cGVPZicsIGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIGdldFByb3RvdHlwZU9mKGl0KSB7XG4gICAgcmV0dXJuICRnZXRQcm90b3R5cGVPZih0b09iamVjdChpdCkpO1xuICB9O1xufSk7XG4iLCIvLyAxOS4xLjIuMTQgT2JqZWN0LmtleXMoTylcbnZhciB0b09iamVjdCA9IHJlcXVpcmUoJy4vX3RvLW9iamVjdCcpO1xudmFyICRrZXlzID0gcmVxdWlyZSgnLi9fb2JqZWN0LWtleXMnKTtcblxucmVxdWlyZSgnLi9fb2JqZWN0LXNhcCcpKCdrZXlzJywgZnVuY3Rpb24gKCkge1xuICByZXR1cm4gZnVuY3Rpb24ga2V5cyhpdCkge1xuICAgIHJldHVybiAka2V5cyh0b09iamVjdChpdCkpO1xuICB9O1xufSk7XG4iLCIvLyAxOS4xLjIuNyBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyhPKVxucmVxdWlyZSgnLi9fb2JqZWN0LXNhcCcpKCdnZXRPd25Qcm9wZXJ0eU5hbWVzJywgZnVuY3Rpb24gKCkge1xuICByZXR1cm4gcmVxdWlyZSgnLi9fb2JqZWN0LWdvcG4tZXh0JykuZjtcbn0pO1xuIiwiLy8gMTkuMS4yLjUgT2JqZWN0LmZyZWV6ZShPKVxudmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi9faXMtb2JqZWN0Jyk7XG52YXIgbWV0YSA9IHJlcXVpcmUoJy4vX21ldGEnKS5vbkZyZWV6ZTtcblxucmVxdWlyZSgnLi9fb2JqZWN0LXNhcCcpKCdmcmVlemUnLCBmdW5jdGlvbiAoJGZyZWV6ZSkge1xuICByZXR1cm4gZnVuY3Rpb24gZnJlZXplKGl0KSB7XG4gICAgcmV0dXJuICRmcmVlemUgJiYgaXNPYmplY3QoaXQpID8gJGZyZWV6ZShtZXRhKGl0KSkgOiBpdDtcbiAgfTtcbn0pO1xuIiwiLy8gMTkuMS4yLjE3IE9iamVjdC5zZWFsKE8pXG52YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuL19pcy1vYmplY3QnKTtcbnZhciBtZXRhID0gcmVxdWlyZSgnLi9fbWV0YScpLm9uRnJlZXplO1xuXG5yZXF1aXJlKCcuL19vYmplY3Qtc2FwJykoJ3NlYWwnLCBmdW5jdGlvbiAoJHNlYWwpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIHNlYWwoaXQpIHtcbiAgICByZXR1cm4gJHNlYWwgJiYgaXNPYmplY3QoaXQpID8gJHNlYWwobWV0YShpdCkpIDogaXQ7XG4gIH07XG59KTtcbiIsIi8vIDE5LjEuMi4xNSBPYmplY3QucHJldmVudEV4dGVuc2lvbnMoTylcbnZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4vX2lzLW9iamVjdCcpO1xudmFyIG1ldGEgPSByZXF1aXJlKCcuL19tZXRhJykub25GcmVlemU7XG5cbnJlcXVpcmUoJy4vX29iamVjdC1zYXAnKSgncHJldmVudEV4dGVuc2lvbnMnLCBmdW5jdGlvbiAoJHByZXZlbnRFeHRlbnNpb25zKSB7XG4gIHJldHVybiBmdW5jdGlvbiBwcmV2ZW50RXh0ZW5zaW9ucyhpdCkge1xuICAgIHJldHVybiAkcHJldmVudEV4dGVuc2lvbnMgJiYgaXNPYmplY3QoaXQpID8gJHByZXZlbnRFeHRlbnNpb25zKG1ldGEoaXQpKSA6IGl0O1xuICB9O1xufSk7XG4iLCIvLyAxOS4xLjIuMTIgT2JqZWN0LmlzRnJvemVuKE8pXG52YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuL19pcy1vYmplY3QnKTtcblxucmVxdWlyZSgnLi9fb2JqZWN0LXNhcCcpKCdpc0Zyb3plbicsIGZ1bmN0aW9uICgkaXNGcm96ZW4pIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIGlzRnJvemVuKGl0KSB7XG4gICAgcmV0dXJuIGlzT2JqZWN0KGl0KSA/ICRpc0Zyb3plbiA/ICRpc0Zyb3plbihpdCkgOiBmYWxzZSA6IHRydWU7XG4gIH07XG59KTtcbiIsIi8vIDE5LjEuMi4xMyBPYmplY3QuaXNTZWFsZWQoTylcbnZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4vX2lzLW9iamVjdCcpO1xuXG5yZXF1aXJlKCcuL19vYmplY3Qtc2FwJykoJ2lzU2VhbGVkJywgZnVuY3Rpb24gKCRpc1NlYWxlZCkge1xuICByZXR1cm4gZnVuY3Rpb24gaXNTZWFsZWQoaXQpIHtcbiAgICByZXR1cm4gaXNPYmplY3QoaXQpID8gJGlzU2VhbGVkID8gJGlzU2VhbGVkKGl0KSA6IGZhbHNlIDogdHJ1ZTtcbiAgfTtcbn0pO1xuIiwiLy8gMTkuMS4yLjExIE9iamVjdC5pc0V4dGVuc2libGUoTylcbnZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4vX2lzLW9iamVjdCcpO1xuXG5yZXF1aXJlKCcuL19vYmplY3Qtc2FwJykoJ2lzRXh0ZW5zaWJsZScsIGZ1bmN0aW9uICgkaXNFeHRlbnNpYmxlKSB7XG4gIHJldHVybiBmdW5jdGlvbiBpc0V4dGVuc2libGUoaXQpIHtcbiAgICByZXR1cm4gaXNPYmplY3QoaXQpID8gJGlzRXh0ZW5zaWJsZSA/ICRpc0V4dGVuc2libGUoaXQpIDogdHJ1ZSA6IGZhbHNlO1xuICB9O1xufSk7XG4iLCIndXNlIHN0cmljdCc7XG4vLyAxOS4xLjIuMSBPYmplY3QuYXNzaWduKHRhcmdldCwgc291cmNlLCAuLi4pXG52YXIgREVTQ1JJUFRPUlMgPSByZXF1aXJlKCcuL19kZXNjcmlwdG9ycycpO1xudmFyIGdldEtleXMgPSByZXF1aXJlKCcuL19vYmplY3Qta2V5cycpO1xudmFyIGdPUFMgPSByZXF1aXJlKCcuL19vYmplY3QtZ29wcycpO1xudmFyIHBJRSA9IHJlcXVpcmUoJy4vX29iamVjdC1waWUnKTtcbnZhciB0b09iamVjdCA9IHJlcXVpcmUoJy4vX3RvLW9iamVjdCcpO1xudmFyIElPYmplY3QgPSByZXF1aXJlKCcuL19pb2JqZWN0Jyk7XG52YXIgJGFzc2lnbiA9IE9iamVjdC5hc3NpZ247XG5cbi8vIHNob3VsZCB3b3JrIHdpdGggc3ltYm9scyBhbmQgc2hvdWxkIGhhdmUgZGV0ZXJtaW5pc3RpYyBwcm9wZXJ0eSBvcmRlciAoVjggYnVnKVxubW9kdWxlLmV4cG9ydHMgPSAhJGFzc2lnbiB8fCByZXF1aXJlKCcuL19mYWlscycpKGZ1bmN0aW9uICgpIHtcbiAgdmFyIEEgPSB7fTtcbiAgdmFyIEIgPSB7fTtcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXVuZGVmXG4gIHZhciBTID0gU3ltYm9sKCk7XG4gIHZhciBLID0gJ2FiY2RlZmdoaWprbG1ub3BxcnN0JztcbiAgQVtTXSA9IDc7XG4gIEsuc3BsaXQoJycpLmZvckVhY2goZnVuY3Rpb24gKGspIHsgQltrXSA9IGs7IH0pO1xuICByZXR1cm4gJGFzc2lnbih7fSwgQSlbU10gIT0gNyB8fCBPYmplY3Qua2V5cygkYXNzaWduKHt9LCBCKSkuam9pbignJykgIT0gSztcbn0pID8gZnVuY3Rpb24gYXNzaWduKHRhcmdldCwgc291cmNlKSB7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tdW51c2VkLXZhcnNcbiAgdmFyIFQgPSB0b09iamVjdCh0YXJnZXQpO1xuICB2YXIgYUxlbiA9IGFyZ3VtZW50cy5sZW5ndGg7XG4gIHZhciBpbmRleCA9IDE7XG4gIHZhciBnZXRTeW1ib2xzID0gZ09QUy5mO1xuICB2YXIgaXNFbnVtID0gcElFLmY7XG4gIHdoaWxlIChhTGVuID4gaW5kZXgpIHtcbiAgICB2YXIgUyA9IElPYmplY3QoYXJndW1lbnRzW2luZGV4KytdKTtcbiAgICB2YXIga2V5cyA9IGdldFN5bWJvbHMgPyBnZXRLZXlzKFMpLmNvbmNhdChnZXRTeW1ib2xzKFMpKSA6IGdldEtleXMoUyk7XG4gICAgdmFyIGxlbmd0aCA9IGtleXMubGVuZ3RoO1xuICAgIHZhciBqID0gMDtcbiAgICB2YXIga2V5O1xuICAgIHdoaWxlIChsZW5ndGggPiBqKSB7XG4gICAgICBrZXkgPSBrZXlzW2orK107XG4gICAgICBpZiAoIURFU0NSSVBUT1JTIHx8IGlzRW51bS5jYWxsKFMsIGtleSkpIFRba2V5XSA9IFNba2V5XTtcbiAgICB9XG4gIH0gcmV0dXJuIFQ7XG59IDogJGFzc2lnbjtcbiIsIi8vIDE5LjEuMy4xIE9iamVjdC5hc3NpZ24odGFyZ2V0LCBzb3VyY2UpXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xuXG4kZXhwb3J0KCRleHBvcnQuUyArICRleHBvcnQuRiwgJ09iamVjdCcsIHsgYXNzaWduOiByZXF1aXJlKCcuL19vYmplY3QtYXNzaWduJykgfSk7XG4iLCIvLyA3LjIuOSBTYW1lVmFsdWUoeCwgeSlcbm1vZHVsZS5leHBvcnRzID0gT2JqZWN0LmlzIHx8IGZ1bmN0aW9uIGlzKHgsIHkpIHtcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXNlbGYtY29tcGFyZVxuICByZXR1cm4geCA9PT0geSA/IHggIT09IDAgfHwgMSAvIHggPT09IDEgLyB5IDogeCAhPSB4ICYmIHkgIT0geTtcbn07XG4iLCIvLyAxOS4xLjMuMTAgT2JqZWN0LmlzKHZhbHVlMSwgdmFsdWUyKVxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbiRleHBvcnQoJGV4cG9ydC5TLCAnT2JqZWN0JywgeyBpczogcmVxdWlyZSgnLi9fc2FtZS12YWx1ZScpIH0pO1xuIiwiLy8gV29ya3Mgd2l0aCBfX3Byb3RvX18gb25seS4gT2xkIHY4IGNhbid0IHdvcmsgd2l0aCBudWxsIHByb3RvIG9iamVjdHMuXG4vKiBlc2xpbnQtZGlzYWJsZSBuby1wcm90byAqL1xudmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi9faXMtb2JqZWN0Jyk7XG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKTtcbnZhciBjaGVjayA9IGZ1bmN0aW9uIChPLCBwcm90bykge1xuICBhbk9iamVjdChPKTtcbiAgaWYgKCFpc09iamVjdChwcm90bykgJiYgcHJvdG8gIT09IG51bGwpIHRocm93IFR5cGVFcnJvcihwcm90byArIFwiOiBjYW4ndCBzZXQgYXMgcHJvdG90eXBlIVwiKTtcbn07XG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgc2V0OiBPYmplY3Quc2V0UHJvdG90eXBlT2YgfHwgKCdfX3Byb3RvX18nIGluIHt9ID8gLy8gZXNsaW50LWRpc2FibGUtbGluZVxuICAgIGZ1bmN0aW9uICh0ZXN0LCBidWdneSwgc2V0KSB7XG4gICAgICB0cnkge1xuICAgICAgICBzZXQgPSByZXF1aXJlKCcuL19jdHgnKShGdW5jdGlvbi5jYWxsLCByZXF1aXJlKCcuL19vYmplY3QtZ29wZCcpLmYoT2JqZWN0LnByb3RvdHlwZSwgJ19fcHJvdG9fXycpLnNldCwgMik7XG4gICAgICAgIHNldCh0ZXN0LCBbXSk7XG4gICAgICAgIGJ1Z2d5ID0gISh0ZXN0IGluc3RhbmNlb2YgQXJyYXkpO1xuICAgICAgfSBjYXRjaCAoZSkgeyBidWdneSA9IHRydWU7IH1cbiAgICAgIHJldHVybiBmdW5jdGlvbiBzZXRQcm90b3R5cGVPZihPLCBwcm90bykge1xuICAgICAgICBjaGVjayhPLCBwcm90byk7XG4gICAgICAgIGlmIChidWdneSkgTy5fX3Byb3RvX18gPSBwcm90bztcbiAgICAgICAgZWxzZSBzZXQoTywgcHJvdG8pO1xuICAgICAgICByZXR1cm4gTztcbiAgICAgIH07XG4gICAgfSh7fSwgZmFsc2UpIDogdW5kZWZpbmVkKSxcbiAgY2hlY2s6IGNoZWNrXG59O1xuIiwiLy8gMTkuMS4zLjE5IE9iamVjdC5zZXRQcm90b3R5cGVPZihPLCBwcm90bylcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG4kZXhwb3J0KCRleHBvcnQuUywgJ09iamVjdCcsIHsgc2V0UHJvdG90eXBlT2Y6IHJlcXVpcmUoJy4vX3NldC1wcm90bycpLnNldCB9KTtcbiIsIi8vIGdldHRpbmcgdGFnIGZyb20gMTkuMS4zLjYgT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZygpXG52YXIgY29mID0gcmVxdWlyZSgnLi9fY29mJyk7XG52YXIgVEFHID0gcmVxdWlyZSgnLi9fd2tzJykoJ3RvU3RyaW5nVGFnJyk7XG4vLyBFUzMgd3JvbmcgaGVyZVxudmFyIEFSRyA9IGNvZihmdW5jdGlvbiAoKSB7IHJldHVybiBhcmd1bWVudHM7IH0oKSkgPT0gJ0FyZ3VtZW50cyc7XG5cbi8vIGZhbGxiYWNrIGZvciBJRTExIFNjcmlwdCBBY2Nlc3MgRGVuaWVkIGVycm9yXG52YXIgdHJ5R2V0ID0gZnVuY3Rpb24gKGl0LCBrZXkpIHtcbiAgdHJ5IHtcbiAgICByZXR1cm4gaXRba2V5XTtcbiAgfSBjYXRjaCAoZSkgeyAvKiBlbXB0eSAqLyB9XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCkge1xuICB2YXIgTywgVCwgQjtcbiAgcmV0dXJuIGl0ID09PSB1bmRlZmluZWQgPyAnVW5kZWZpbmVkJyA6IGl0ID09PSBudWxsID8gJ051bGwnXG4gICAgLy8gQEB0b1N0cmluZ1RhZyBjYXNlXG4gICAgOiB0eXBlb2YgKFQgPSB0cnlHZXQoTyA9IE9iamVjdChpdCksIFRBRykpID09ICdzdHJpbmcnID8gVFxuICAgIC8vIGJ1aWx0aW5UYWcgY2FzZVxuICAgIDogQVJHID8gY29mKE8pXG4gICAgLy8gRVMzIGFyZ3VtZW50cyBmYWxsYmFja1xuICAgIDogKEIgPSBjb2YoTykpID09ICdPYmplY3QnICYmIHR5cGVvZiBPLmNhbGxlZSA9PSAnZnVuY3Rpb24nID8gJ0FyZ3VtZW50cycgOiBCO1xufTtcbiIsIid1c2Ugc3RyaWN0Jztcbi8vIDE5LjEuMy42IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcoKVxudmFyIGNsYXNzb2YgPSByZXF1aXJlKCcuL19jbGFzc29mJyk7XG52YXIgdGVzdCA9IHt9O1xudGVzdFtyZXF1aXJlKCcuL193a3MnKSgndG9TdHJpbmdUYWcnKV0gPSAneic7XG5pZiAodGVzdCArICcnICE9ICdbb2JqZWN0IHpdJykge1xuICByZXF1aXJlKCcuL19yZWRlZmluZScpKE9iamVjdC5wcm90b3R5cGUsICd0b1N0cmluZycsIGZ1bmN0aW9uIHRvU3RyaW5nKCkge1xuICAgIHJldHVybiAnW29iamVjdCAnICsgY2xhc3NvZih0aGlzKSArICddJztcbiAgfSwgdHJ1ZSk7XG59XG4iLCIvLyBmYXN0IGFwcGx5LCBodHRwOi8vanNwZXJmLmxua2l0LmNvbS9mYXN0LWFwcGx5LzVcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGZuLCBhcmdzLCB0aGF0KSB7XG4gIHZhciB1biA9IHRoYXQgPT09IHVuZGVmaW5lZDtcbiAgc3dpdGNoIChhcmdzLmxlbmd0aCkge1xuICAgIGNhc2UgMDogcmV0dXJuIHVuID8gZm4oKVxuICAgICAgICAgICAgICAgICAgICAgIDogZm4uY2FsbCh0aGF0KTtcbiAgICBjYXNlIDE6IHJldHVybiB1biA/IGZuKGFyZ3NbMF0pXG4gICAgICAgICAgICAgICAgICAgICAgOiBmbi5jYWxsKHRoYXQsIGFyZ3NbMF0pO1xuICAgIGNhc2UgMjogcmV0dXJuIHVuID8gZm4oYXJnc1swXSwgYXJnc1sxXSlcbiAgICAgICAgICAgICAgICAgICAgICA6IGZuLmNhbGwodGhhdCwgYXJnc1swXSwgYXJnc1sxXSk7XG4gICAgY2FzZSAzOiByZXR1cm4gdW4gPyBmbihhcmdzWzBdLCBhcmdzWzFdLCBhcmdzWzJdKVxuICAgICAgICAgICAgICAgICAgICAgIDogZm4uY2FsbCh0aGF0LCBhcmdzWzBdLCBhcmdzWzFdLCBhcmdzWzJdKTtcbiAgICBjYXNlIDQ6IHJldHVybiB1biA/IGZuKGFyZ3NbMF0sIGFyZ3NbMV0sIGFyZ3NbMl0sIGFyZ3NbM10pXG4gICAgICAgICAgICAgICAgICAgICAgOiBmbi5jYWxsKHRoYXQsIGFyZ3NbMF0sIGFyZ3NbMV0sIGFyZ3NbMl0sIGFyZ3NbM10pO1xuICB9IHJldHVybiBmbi5hcHBseSh0aGF0LCBhcmdzKTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG52YXIgYUZ1bmN0aW9uID0gcmVxdWlyZSgnLi9fYS1mdW5jdGlvbicpO1xudmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi9faXMtb2JqZWN0Jyk7XG52YXIgaW52b2tlID0gcmVxdWlyZSgnLi9faW52b2tlJyk7XG52YXIgYXJyYXlTbGljZSA9IFtdLnNsaWNlO1xudmFyIGZhY3RvcmllcyA9IHt9O1xuXG52YXIgY29uc3RydWN0ID0gZnVuY3Rpb24gKEYsIGxlbiwgYXJncykge1xuICBpZiAoIShsZW4gaW4gZmFjdG9yaWVzKSkge1xuICAgIGZvciAodmFyIG4gPSBbXSwgaSA9IDA7IGkgPCBsZW47IGkrKykgbltpXSA9ICdhWycgKyBpICsgJ10nO1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1uZXctZnVuY1xuICAgIGZhY3Rvcmllc1tsZW5dID0gRnVuY3Rpb24oJ0YsYScsICdyZXR1cm4gbmV3IEYoJyArIG4uam9pbignLCcpICsgJyknKTtcbiAgfSByZXR1cm4gZmFjdG9yaWVzW2xlbl0oRiwgYXJncyk7XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IEZ1bmN0aW9uLmJpbmQgfHwgZnVuY3Rpb24gYmluZCh0aGF0IC8qICwgLi4uYXJncyAqLykge1xuICB2YXIgZm4gPSBhRnVuY3Rpb24odGhpcyk7XG4gIHZhciBwYXJ0QXJncyA9IGFycmF5U2xpY2UuY2FsbChhcmd1bWVudHMsIDEpO1xuICB2YXIgYm91bmQgPSBmdW5jdGlvbiAoLyogYXJncy4uLiAqLykge1xuICAgIHZhciBhcmdzID0gcGFydEFyZ3MuY29uY2F0KGFycmF5U2xpY2UuY2FsbChhcmd1bWVudHMpKTtcbiAgICByZXR1cm4gdGhpcyBpbnN0YW5jZW9mIGJvdW5kID8gY29uc3RydWN0KGZuLCBhcmdzLmxlbmd0aCwgYXJncykgOiBpbnZva2UoZm4sIGFyZ3MsIHRoYXQpO1xuICB9O1xuICBpZiAoaXNPYmplY3QoZm4ucHJvdG90eXBlKSkgYm91bmQucHJvdG90eXBlID0gZm4ucHJvdG90eXBlO1xuICByZXR1cm4gYm91bmQ7XG59O1xuIiwiLy8gMTkuMi4zLjIgLyAxNS4zLjQuNSBGdW5jdGlvbi5wcm90b3R5cGUuYmluZCh0aGlzQXJnLCBhcmdzLi4uKVxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcblxuJGV4cG9ydCgkZXhwb3J0LlAsICdGdW5jdGlvbicsIHsgYmluZDogcmVxdWlyZSgnLi9fYmluZCcpIH0pO1xuIiwidmFyIGRQID0gcmVxdWlyZSgnLi9fb2JqZWN0LWRwJykuZjtcbnZhciBGUHJvdG8gPSBGdW5jdGlvbi5wcm90b3R5cGU7XG52YXIgbmFtZVJFID0gL15cXHMqZnVuY3Rpb24gKFteIChdKikvO1xudmFyIE5BTUUgPSAnbmFtZSc7XG5cbi8vIDE5LjIuNC4yIG5hbWVcbk5BTUUgaW4gRlByb3RvIHx8IHJlcXVpcmUoJy4vX2Rlc2NyaXB0b3JzJykgJiYgZFAoRlByb3RvLCBOQU1FLCB7XG4gIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgdHJ5IHtcbiAgICAgIHJldHVybiAoJycgKyB0aGlzKS5tYXRjaChuYW1lUkUpWzFdO1xuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgIHJldHVybiAnJztcbiAgICB9XG4gIH1cbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi9faXMtb2JqZWN0Jyk7XG52YXIgZ2V0UHJvdG90eXBlT2YgPSByZXF1aXJlKCcuL19vYmplY3QtZ3BvJyk7XG52YXIgSEFTX0lOU1RBTkNFID0gcmVxdWlyZSgnLi9fd2tzJykoJ2hhc0luc3RhbmNlJyk7XG52YXIgRnVuY3Rpb25Qcm90byA9IEZ1bmN0aW9uLnByb3RvdHlwZTtcbi8vIDE5LjIuMy42IEZ1bmN0aW9uLnByb3RvdHlwZVtAQGhhc0luc3RhbmNlXShWKVxuaWYgKCEoSEFTX0lOU1RBTkNFIGluIEZ1bmN0aW9uUHJvdG8pKSByZXF1aXJlKCcuL19vYmplY3QtZHAnKS5mKEZ1bmN0aW9uUHJvdG8sIEhBU19JTlNUQU5DRSwgeyB2YWx1ZTogZnVuY3Rpb24gKE8pIHtcbiAgaWYgKHR5cGVvZiB0aGlzICE9ICdmdW5jdGlvbicgfHwgIWlzT2JqZWN0KE8pKSByZXR1cm4gZmFsc2U7XG4gIGlmICghaXNPYmplY3QodGhpcy5wcm90b3R5cGUpKSByZXR1cm4gTyBpbnN0YW5jZW9mIHRoaXM7XG4gIC8vIGZvciBlbnZpcm9ubWVudCB3L28gbmF0aXZlIGBAQGhhc0luc3RhbmNlYCBsb2dpYyBlbm91Z2ggYGluc3RhbmNlb2ZgLCBidXQgYWRkIHRoaXM6XG4gIHdoaWxlIChPID0gZ2V0UHJvdG90eXBlT2YoTykpIGlmICh0aGlzLnByb3RvdHlwZSA9PT0gTykgcmV0dXJuIHRydWU7XG4gIHJldHVybiBmYWxzZTtcbn0gfSk7XG4iLCJtb2R1bGUuZXhwb3J0cyA9ICdcXHgwOVxceDBBXFx4MEJcXHgwQ1xceDBEXFx4MjBcXHhBMFxcdTE2ODBcXHUxODBFXFx1MjAwMFxcdTIwMDFcXHUyMDAyXFx1MjAwMycgK1xuICAnXFx1MjAwNFxcdTIwMDVcXHUyMDA2XFx1MjAwN1xcdTIwMDhcXHUyMDA5XFx1MjAwQVxcdTIwMkZcXHUyMDVGXFx1MzAwMFxcdTIwMjhcXHUyMDI5XFx1RkVGRic7XG4iLCJ2YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIGRlZmluZWQgPSByZXF1aXJlKCcuL19kZWZpbmVkJyk7XG52YXIgZmFpbHMgPSByZXF1aXJlKCcuL19mYWlscycpO1xudmFyIHNwYWNlcyA9IHJlcXVpcmUoJy4vX3N0cmluZy13cycpO1xudmFyIHNwYWNlID0gJ1snICsgc3BhY2VzICsgJ10nO1xudmFyIG5vbiA9ICdcXHUyMDBiXFx1MDA4NSc7XG52YXIgbHRyaW0gPSBSZWdFeHAoJ14nICsgc3BhY2UgKyBzcGFjZSArICcqJyk7XG52YXIgcnRyaW0gPSBSZWdFeHAoc3BhY2UgKyBzcGFjZSArICcqJCcpO1xuXG52YXIgZXhwb3J0ZXIgPSBmdW5jdGlvbiAoS0VZLCBleGVjLCBBTElBUykge1xuICB2YXIgZXhwID0ge307XG4gIHZhciBGT1JDRSA9IGZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gISFzcGFjZXNbS0VZXSgpIHx8IG5vbltLRVldKCkgIT0gbm9uO1xuICB9KTtcbiAgdmFyIGZuID0gZXhwW0tFWV0gPSBGT1JDRSA/IGV4ZWModHJpbSkgOiBzcGFjZXNbS0VZXTtcbiAgaWYgKEFMSUFTKSBleHBbQUxJQVNdID0gZm47XG4gICRleHBvcnQoJGV4cG9ydC5QICsgJGV4cG9ydC5GICogRk9SQ0UsICdTdHJpbmcnLCBleHApO1xufTtcblxuLy8gMSAtPiBTdHJpbmcjdHJpbUxlZnRcbi8vIDIgLT4gU3RyaW5nI3RyaW1SaWdodFxuLy8gMyAtPiBTdHJpbmcjdHJpbVxudmFyIHRyaW0gPSBleHBvcnRlci50cmltID0gZnVuY3Rpb24gKHN0cmluZywgVFlQRSkge1xuICBzdHJpbmcgPSBTdHJpbmcoZGVmaW5lZChzdHJpbmcpKTtcbiAgaWYgKFRZUEUgJiAxKSBzdHJpbmcgPSBzdHJpbmcucmVwbGFjZShsdHJpbSwgJycpO1xuICBpZiAoVFlQRSAmIDIpIHN0cmluZyA9IHN0cmluZy5yZXBsYWNlKHJ0cmltLCAnJyk7XG4gIHJldHVybiBzdHJpbmc7XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IGV4cG9ydGVyO1xuIiwidmFyICRwYXJzZUludCA9IHJlcXVpcmUoJy4vX2dsb2JhbCcpLnBhcnNlSW50O1xudmFyICR0cmltID0gcmVxdWlyZSgnLi9fc3RyaW5nLXRyaW0nKS50cmltO1xudmFyIHdzID0gcmVxdWlyZSgnLi9fc3RyaW5nLXdzJyk7XG52YXIgaGV4ID0gL15bLStdPzBbeFhdLztcblxubW9kdWxlLmV4cG9ydHMgPSAkcGFyc2VJbnQod3MgKyAnMDgnKSAhPT0gOCB8fCAkcGFyc2VJbnQod3MgKyAnMHgxNicpICE9PSAyMiA/IGZ1bmN0aW9uIHBhcnNlSW50KHN0ciwgcmFkaXgpIHtcbiAgdmFyIHN0cmluZyA9ICR0cmltKFN0cmluZyhzdHIpLCAzKTtcbiAgcmV0dXJuICRwYXJzZUludChzdHJpbmcsIChyYWRpeCA+Pj4gMCkgfHwgKGhleC50ZXN0KHN0cmluZykgPyAxNiA6IDEwKSk7XG59IDogJHBhcnNlSW50O1xuIiwidmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciAkcGFyc2VJbnQgPSByZXF1aXJlKCcuL19wYXJzZS1pbnQnKTtcbi8vIDE4LjIuNSBwYXJzZUludChzdHJpbmcsIHJhZGl4KVxuJGV4cG9ydCgkZXhwb3J0LkcgKyAkZXhwb3J0LkYgKiAocGFyc2VJbnQgIT0gJHBhcnNlSW50KSwgeyBwYXJzZUludDogJHBhcnNlSW50IH0pO1xuIiwidmFyICRwYXJzZUZsb2F0ID0gcmVxdWlyZSgnLi9fZ2xvYmFsJykucGFyc2VGbG9hdDtcbnZhciAkdHJpbSA9IHJlcXVpcmUoJy4vX3N0cmluZy10cmltJykudHJpbTtcblxubW9kdWxlLmV4cG9ydHMgPSAxIC8gJHBhcnNlRmxvYXQocmVxdWlyZSgnLi9fc3RyaW5nLXdzJykgKyAnLTAnKSAhPT0gLUluZmluaXR5ID8gZnVuY3Rpb24gcGFyc2VGbG9hdChzdHIpIHtcbiAgdmFyIHN0cmluZyA9ICR0cmltKFN0cmluZyhzdHIpLCAzKTtcbiAgdmFyIHJlc3VsdCA9ICRwYXJzZUZsb2F0KHN0cmluZyk7XG4gIHJldHVybiByZXN1bHQgPT09IDAgJiYgc3RyaW5nLmNoYXJBdCgwKSA9PSAnLScgPyAtMCA6IHJlc3VsdDtcbn0gOiAkcGFyc2VGbG9hdDtcbiIsInZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgJHBhcnNlRmxvYXQgPSByZXF1aXJlKCcuL19wYXJzZS1mbG9hdCcpO1xuLy8gMTguMi40IHBhcnNlRmxvYXQoc3RyaW5nKVxuJGV4cG9ydCgkZXhwb3J0LkcgKyAkZXhwb3J0LkYgKiAocGFyc2VGbG9hdCAhPSAkcGFyc2VGbG9hdCksIHsgcGFyc2VGbG9hdDogJHBhcnNlRmxvYXQgfSk7XG4iLCJ2YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuL19pcy1vYmplY3QnKTtcbnZhciBzZXRQcm90b3R5cGVPZiA9IHJlcXVpcmUoJy4vX3NldC1wcm90bycpLnNldDtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKHRoYXQsIHRhcmdldCwgQykge1xuICB2YXIgUyA9IHRhcmdldC5jb25zdHJ1Y3RvcjtcbiAgdmFyIFA7XG4gIGlmIChTICE9PSBDICYmIHR5cGVvZiBTID09ICdmdW5jdGlvbicgJiYgKFAgPSBTLnByb3RvdHlwZSkgIT09IEMucHJvdG90eXBlICYmIGlzT2JqZWN0KFApICYmIHNldFByb3RvdHlwZU9mKSB7XG4gICAgc2V0UHJvdG90eXBlT2YodGhhdCwgUCk7XG4gIH0gcmV0dXJuIHRoYXQ7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4vX2dsb2JhbCcpO1xudmFyIGhhcyA9IHJlcXVpcmUoJy4vX2hhcycpO1xudmFyIGNvZiA9IHJlcXVpcmUoJy4vX2NvZicpO1xudmFyIGluaGVyaXRJZlJlcXVpcmVkID0gcmVxdWlyZSgnLi9faW5oZXJpdC1pZi1yZXF1aXJlZCcpO1xudmFyIHRvUHJpbWl0aXZlID0gcmVxdWlyZSgnLi9fdG8tcHJpbWl0aXZlJyk7XG52YXIgZmFpbHMgPSByZXF1aXJlKCcuL19mYWlscycpO1xudmFyIGdPUE4gPSByZXF1aXJlKCcuL19vYmplY3QtZ29wbicpLmY7XG52YXIgZ09QRCA9IHJlcXVpcmUoJy4vX29iamVjdC1nb3BkJykuZjtcbnZhciBkUCA9IHJlcXVpcmUoJy4vX29iamVjdC1kcCcpLmY7XG52YXIgJHRyaW0gPSByZXF1aXJlKCcuL19zdHJpbmctdHJpbScpLnRyaW07XG52YXIgTlVNQkVSID0gJ051bWJlcic7XG52YXIgJE51bWJlciA9IGdsb2JhbFtOVU1CRVJdO1xudmFyIEJhc2UgPSAkTnVtYmVyO1xudmFyIHByb3RvID0gJE51bWJlci5wcm90b3R5cGU7XG4vLyBPcGVyYSB+MTIgaGFzIGJyb2tlbiBPYmplY3QjdG9TdHJpbmdcbnZhciBCUk9LRU5fQ09GID0gY29mKHJlcXVpcmUoJy4vX29iamVjdC1jcmVhdGUnKShwcm90bykpID09IE5VTUJFUjtcbnZhciBUUklNID0gJ3RyaW0nIGluIFN0cmluZy5wcm90b3R5cGU7XG5cbi8vIDcuMS4zIFRvTnVtYmVyKGFyZ3VtZW50KVxudmFyIHRvTnVtYmVyID0gZnVuY3Rpb24gKGFyZ3VtZW50KSB7XG4gIHZhciBpdCA9IHRvUHJpbWl0aXZlKGFyZ3VtZW50LCBmYWxzZSk7XG4gIGlmICh0eXBlb2YgaXQgPT0gJ3N0cmluZycgJiYgaXQubGVuZ3RoID4gMikge1xuICAgIGl0ID0gVFJJTSA/IGl0LnRyaW0oKSA6ICR0cmltKGl0LCAzKTtcbiAgICB2YXIgZmlyc3QgPSBpdC5jaGFyQ29kZUF0KDApO1xuICAgIHZhciB0aGlyZCwgcmFkaXgsIG1heENvZGU7XG4gICAgaWYgKGZpcnN0ID09PSA0MyB8fCBmaXJzdCA9PT0gNDUpIHtcbiAgICAgIHRoaXJkID0gaXQuY2hhckNvZGVBdCgyKTtcbiAgICAgIGlmICh0aGlyZCA9PT0gODggfHwgdGhpcmQgPT09IDEyMCkgcmV0dXJuIE5hTjsgLy8gTnVtYmVyKCcrMHgxJykgc2hvdWxkIGJlIE5hTiwgb2xkIFY4IGZpeFxuICAgIH0gZWxzZSBpZiAoZmlyc3QgPT09IDQ4KSB7XG4gICAgICBzd2l0Y2ggKGl0LmNoYXJDb2RlQXQoMSkpIHtcbiAgICAgICAgY2FzZSA2NjogY2FzZSA5ODogcmFkaXggPSAyOyBtYXhDb2RlID0gNDk7IGJyZWFrOyAvLyBmYXN0IGVxdWFsIC9eMGJbMDFdKyQvaVxuICAgICAgICBjYXNlIDc5OiBjYXNlIDExMTogcmFkaXggPSA4OyBtYXhDb2RlID0gNTU7IGJyZWFrOyAvLyBmYXN0IGVxdWFsIC9eMG9bMC03XSskL2lcbiAgICAgICAgZGVmYXVsdDogcmV0dXJuICtpdDtcbiAgICAgIH1cbiAgICAgIGZvciAodmFyIGRpZ2l0cyA9IGl0LnNsaWNlKDIpLCBpID0gMCwgbCA9IGRpZ2l0cy5sZW5ndGgsIGNvZGU7IGkgPCBsOyBpKyspIHtcbiAgICAgICAgY29kZSA9IGRpZ2l0cy5jaGFyQ29kZUF0KGkpO1xuICAgICAgICAvLyBwYXJzZUludCBwYXJzZXMgYSBzdHJpbmcgdG8gYSBmaXJzdCB1bmF2YWlsYWJsZSBzeW1ib2xcbiAgICAgICAgLy8gYnV0IFRvTnVtYmVyIHNob3VsZCByZXR1cm4gTmFOIGlmIGEgc3RyaW5nIGNvbnRhaW5zIHVuYXZhaWxhYmxlIHN5bWJvbHNcbiAgICAgICAgaWYgKGNvZGUgPCA0OCB8fCBjb2RlID4gbWF4Q29kZSkgcmV0dXJuIE5hTjtcbiAgICAgIH0gcmV0dXJuIHBhcnNlSW50KGRpZ2l0cywgcmFkaXgpO1xuICAgIH1cbiAgfSByZXR1cm4gK2l0O1xufTtcblxuaWYgKCEkTnVtYmVyKCcgMG8xJykgfHwgISROdW1iZXIoJzBiMScpIHx8ICROdW1iZXIoJysweDEnKSkge1xuICAkTnVtYmVyID0gZnVuY3Rpb24gTnVtYmVyKHZhbHVlKSB7XG4gICAgdmFyIGl0ID0gYXJndW1lbnRzLmxlbmd0aCA8IDEgPyAwIDogdmFsdWU7XG4gICAgdmFyIHRoYXQgPSB0aGlzO1xuICAgIHJldHVybiB0aGF0IGluc3RhbmNlb2YgJE51bWJlclxuICAgICAgLy8gY2hlY2sgb24gMS4uY29uc3RydWN0b3IoZm9vKSBjYXNlXG4gICAgICAmJiAoQlJPS0VOX0NPRiA/IGZhaWxzKGZ1bmN0aW9uICgpIHsgcHJvdG8udmFsdWVPZi5jYWxsKHRoYXQpOyB9KSA6IGNvZih0aGF0KSAhPSBOVU1CRVIpXG4gICAgICAgID8gaW5oZXJpdElmUmVxdWlyZWQobmV3IEJhc2UodG9OdW1iZXIoaXQpKSwgdGhhdCwgJE51bWJlcikgOiB0b051bWJlcihpdCk7XG4gIH07XG4gIGZvciAodmFyIGtleXMgPSByZXF1aXJlKCcuL19kZXNjcmlwdG9ycycpID8gZ09QTihCYXNlKSA6IChcbiAgICAvLyBFUzM6XG4gICAgJ01BWF9WQUxVRSxNSU5fVkFMVUUsTmFOLE5FR0FUSVZFX0lORklOSVRZLFBPU0lUSVZFX0lORklOSVRZLCcgK1xuICAgIC8vIEVTNiAoaW4gY2FzZSwgaWYgbW9kdWxlcyB3aXRoIEVTNiBOdW1iZXIgc3RhdGljcyByZXF1aXJlZCBiZWZvcmUpOlxuICAgICdFUFNJTE9OLGlzRmluaXRlLGlzSW50ZWdlcixpc05hTixpc1NhZmVJbnRlZ2VyLE1BWF9TQUZFX0lOVEVHRVIsJyArXG4gICAgJ01JTl9TQUZFX0lOVEVHRVIscGFyc2VGbG9hdCxwYXJzZUludCxpc0ludGVnZXInXG4gICkuc3BsaXQoJywnKSwgaiA9IDAsIGtleTsga2V5cy5sZW5ndGggPiBqOyBqKyspIHtcbiAgICBpZiAoaGFzKEJhc2UsIGtleSA9IGtleXNbal0pICYmICFoYXMoJE51bWJlciwga2V5KSkge1xuICAgICAgZFAoJE51bWJlciwga2V5LCBnT1BEKEJhc2UsIGtleSkpO1xuICAgIH1cbiAgfVxuICAkTnVtYmVyLnByb3RvdHlwZSA9IHByb3RvO1xuICBwcm90by5jb25zdHJ1Y3RvciA9ICROdW1iZXI7XG4gIHJlcXVpcmUoJy4vX3JlZGVmaW5lJykoZ2xvYmFsLCBOVU1CRVIsICROdW1iZXIpO1xufVxuIiwidmFyIGNvZiA9IHJlcXVpcmUoJy4vX2NvZicpO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQsIG1zZykge1xuICBpZiAodHlwZW9mIGl0ICE9ICdudW1iZXInICYmIGNvZihpdCkgIT0gJ051bWJlcicpIHRocm93IFR5cGVFcnJvcihtc2cpO1xuICByZXR1cm4gK2l0O1xufTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciB0b0ludGVnZXIgPSByZXF1aXJlKCcuL190by1pbnRlZ2VyJyk7XG52YXIgZGVmaW5lZCA9IHJlcXVpcmUoJy4vX2RlZmluZWQnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiByZXBlYXQoY291bnQpIHtcbiAgdmFyIHN0ciA9IFN0cmluZyhkZWZpbmVkKHRoaXMpKTtcbiAgdmFyIHJlcyA9ICcnO1xuICB2YXIgbiA9IHRvSW50ZWdlcihjb3VudCk7XG4gIGlmIChuIDwgMCB8fCBuID09IEluZmluaXR5KSB0aHJvdyBSYW5nZUVycm9yKFwiQ291bnQgY2FuJ3QgYmUgbmVnYXRpdmVcIik7XG4gIGZvciAoO24gPiAwOyAobiA+Pj49IDEpICYmIChzdHIgKz0gc3RyKSkgaWYgKG4gJiAxKSByZXMgKz0gc3RyO1xuICByZXR1cm4gcmVzO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgdG9JbnRlZ2VyID0gcmVxdWlyZSgnLi9fdG8taW50ZWdlcicpO1xudmFyIGFOdW1iZXJWYWx1ZSA9IHJlcXVpcmUoJy4vX2EtbnVtYmVyLXZhbHVlJyk7XG52YXIgcmVwZWF0ID0gcmVxdWlyZSgnLi9fc3RyaW5nLXJlcGVhdCcpO1xudmFyICR0b0ZpeGVkID0gMS4wLnRvRml4ZWQ7XG52YXIgZmxvb3IgPSBNYXRoLmZsb29yO1xudmFyIGRhdGEgPSBbMCwgMCwgMCwgMCwgMCwgMF07XG52YXIgRVJST1IgPSAnTnVtYmVyLnRvRml4ZWQ6IGluY29ycmVjdCBpbnZvY2F0aW9uISc7XG52YXIgWkVSTyA9ICcwJztcblxudmFyIG11bHRpcGx5ID0gZnVuY3Rpb24gKG4sIGMpIHtcbiAgdmFyIGkgPSAtMTtcbiAgdmFyIGMyID0gYztcbiAgd2hpbGUgKCsraSA8IDYpIHtcbiAgICBjMiArPSBuICogZGF0YVtpXTtcbiAgICBkYXRhW2ldID0gYzIgJSAxZTc7XG4gICAgYzIgPSBmbG9vcihjMiAvIDFlNyk7XG4gIH1cbn07XG52YXIgZGl2aWRlID0gZnVuY3Rpb24gKG4pIHtcbiAgdmFyIGkgPSA2O1xuICB2YXIgYyA9IDA7XG4gIHdoaWxlICgtLWkgPj0gMCkge1xuICAgIGMgKz0gZGF0YVtpXTtcbiAgICBkYXRhW2ldID0gZmxvb3IoYyAvIG4pO1xuICAgIGMgPSAoYyAlIG4pICogMWU3O1xuICB9XG59O1xudmFyIG51bVRvU3RyaW5nID0gZnVuY3Rpb24gKCkge1xuICB2YXIgaSA9IDY7XG4gIHZhciBzID0gJyc7XG4gIHdoaWxlICgtLWkgPj0gMCkge1xuICAgIGlmIChzICE9PSAnJyB8fCBpID09PSAwIHx8IGRhdGFbaV0gIT09IDApIHtcbiAgICAgIHZhciB0ID0gU3RyaW5nKGRhdGFbaV0pO1xuICAgICAgcyA9IHMgPT09ICcnID8gdCA6IHMgKyByZXBlYXQuY2FsbChaRVJPLCA3IC0gdC5sZW5ndGgpICsgdDtcbiAgICB9XG4gIH0gcmV0dXJuIHM7XG59O1xudmFyIHBvdyA9IGZ1bmN0aW9uICh4LCBuLCBhY2MpIHtcbiAgcmV0dXJuIG4gPT09IDAgPyBhY2MgOiBuICUgMiA9PT0gMSA/IHBvdyh4LCBuIC0gMSwgYWNjICogeCkgOiBwb3coeCAqIHgsIG4gLyAyLCBhY2MpO1xufTtcbnZhciBsb2cgPSBmdW5jdGlvbiAoeCkge1xuICB2YXIgbiA9IDA7XG4gIHZhciB4MiA9IHg7XG4gIHdoaWxlICh4MiA+PSA0MDk2KSB7XG4gICAgbiArPSAxMjtcbiAgICB4MiAvPSA0MDk2O1xuICB9XG4gIHdoaWxlICh4MiA+PSAyKSB7XG4gICAgbiArPSAxO1xuICAgIHgyIC89IDI7XG4gIH0gcmV0dXJuIG47XG59O1xuXG4kZXhwb3J0KCRleHBvcnQuUCArICRleHBvcnQuRiAqICghISR0b0ZpeGVkICYmIChcbiAgMC4wMDAwOC50b0ZpeGVkKDMpICE9PSAnMC4wMDAnIHx8XG4gIDAuOS50b0ZpeGVkKDApICE9PSAnMScgfHxcbiAgMS4yNTUudG9GaXhlZCgyKSAhPT0gJzEuMjUnIHx8XG4gIDEwMDAwMDAwMDAwMDAwMDAxMjguMC50b0ZpeGVkKDApICE9PSAnMTAwMDAwMDAwMDAwMDAwMDEyOCdcbikgfHwgIXJlcXVpcmUoJy4vX2ZhaWxzJykoZnVuY3Rpb24gKCkge1xuICAvLyBWOCB+IEFuZHJvaWQgNC4zLVxuICAkdG9GaXhlZC5jYWxsKHt9KTtcbn0pKSwgJ051bWJlcicsIHtcbiAgdG9GaXhlZDogZnVuY3Rpb24gdG9GaXhlZChmcmFjdGlvbkRpZ2l0cykge1xuICAgIHZhciB4ID0gYU51bWJlclZhbHVlKHRoaXMsIEVSUk9SKTtcbiAgICB2YXIgZiA9IHRvSW50ZWdlcihmcmFjdGlvbkRpZ2l0cyk7XG4gICAgdmFyIHMgPSAnJztcbiAgICB2YXIgbSA9IFpFUk87XG4gICAgdmFyIGUsIHosIGosIGs7XG4gICAgaWYgKGYgPCAwIHx8IGYgPiAyMCkgdGhyb3cgUmFuZ2VFcnJvcihFUlJPUik7XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXNlbGYtY29tcGFyZVxuICAgIGlmICh4ICE9IHgpIHJldHVybiAnTmFOJztcbiAgICBpZiAoeCA8PSAtMWUyMSB8fCB4ID49IDFlMjEpIHJldHVybiBTdHJpbmcoeCk7XG4gICAgaWYgKHggPCAwKSB7XG4gICAgICBzID0gJy0nO1xuICAgICAgeCA9IC14O1xuICAgIH1cbiAgICBpZiAoeCA+IDFlLTIxKSB7XG4gICAgICBlID0gbG9nKHggKiBwb3coMiwgNjksIDEpKSAtIDY5O1xuICAgICAgeiA9IGUgPCAwID8geCAqIHBvdygyLCAtZSwgMSkgOiB4IC8gcG93KDIsIGUsIDEpO1xuICAgICAgeiAqPSAweDEwMDAwMDAwMDAwMDAwO1xuICAgICAgZSA9IDUyIC0gZTtcbiAgICAgIGlmIChlID4gMCkge1xuICAgICAgICBtdWx0aXBseSgwLCB6KTtcbiAgICAgICAgaiA9IGY7XG4gICAgICAgIHdoaWxlIChqID49IDcpIHtcbiAgICAgICAgICBtdWx0aXBseSgxZTcsIDApO1xuICAgICAgICAgIGogLT0gNztcbiAgICAgICAgfVxuICAgICAgICBtdWx0aXBseShwb3coMTAsIGosIDEpLCAwKTtcbiAgICAgICAgaiA9IGUgLSAxO1xuICAgICAgICB3aGlsZSAoaiA+PSAyMykge1xuICAgICAgICAgIGRpdmlkZSgxIDw8IDIzKTtcbiAgICAgICAgICBqIC09IDIzO1xuICAgICAgICB9XG4gICAgICAgIGRpdmlkZSgxIDw8IGopO1xuICAgICAgICBtdWx0aXBseSgxLCAxKTtcbiAgICAgICAgZGl2aWRlKDIpO1xuICAgICAgICBtID0gbnVtVG9TdHJpbmcoKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIG11bHRpcGx5KDAsIHopO1xuICAgICAgICBtdWx0aXBseSgxIDw8IC1lLCAwKTtcbiAgICAgICAgbSA9IG51bVRvU3RyaW5nKCkgKyByZXBlYXQuY2FsbChaRVJPLCBmKTtcbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKGYgPiAwKSB7XG4gICAgICBrID0gbS5sZW5ndGg7XG4gICAgICBtID0gcyArIChrIDw9IGYgPyAnMC4nICsgcmVwZWF0LmNhbGwoWkVSTywgZiAtIGspICsgbSA6IG0uc2xpY2UoMCwgayAtIGYpICsgJy4nICsgbS5zbGljZShrIC0gZikpO1xuICAgIH0gZWxzZSB7XG4gICAgICBtID0gcyArIG07XG4gICAgfSByZXR1cm4gbTtcbiAgfVxufSk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyICRmYWlscyA9IHJlcXVpcmUoJy4vX2ZhaWxzJyk7XG52YXIgYU51bWJlclZhbHVlID0gcmVxdWlyZSgnLi9fYS1udW1iZXItdmFsdWUnKTtcbnZhciAkdG9QcmVjaXNpb24gPSAxLjAudG9QcmVjaXNpb247XG5cbiRleHBvcnQoJGV4cG9ydC5QICsgJGV4cG9ydC5GICogKCRmYWlscyhmdW5jdGlvbiAoKSB7XG4gIC8vIElFNy1cbiAgcmV0dXJuICR0b1ByZWNpc2lvbi5jYWxsKDEsIHVuZGVmaW5lZCkgIT09ICcxJztcbn0pIHx8ICEkZmFpbHMoZnVuY3Rpb24gKCkge1xuICAvLyBWOCB+IEFuZHJvaWQgNC4zLVxuICAkdG9QcmVjaXNpb24uY2FsbCh7fSk7XG59KSksICdOdW1iZXInLCB7XG4gIHRvUHJlY2lzaW9uOiBmdW5jdGlvbiB0b1ByZWNpc2lvbihwcmVjaXNpb24pIHtcbiAgICB2YXIgdGhhdCA9IGFOdW1iZXJWYWx1ZSh0aGlzLCAnTnVtYmVyI3RvUHJlY2lzaW9uOiBpbmNvcnJlY3QgaW52b2NhdGlvbiEnKTtcbiAgICByZXR1cm4gcHJlY2lzaW9uID09PSB1bmRlZmluZWQgPyAkdG9QcmVjaXNpb24uY2FsbCh0aGF0KSA6ICR0b1ByZWNpc2lvbi5jYWxsKHRoYXQsIHByZWNpc2lvbik7XG4gIH1cbn0pO1xuIiwiLy8gMjAuMS4yLjEgTnVtYmVyLkVQU0lMT05cbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnTnVtYmVyJywgeyBFUFNJTE9OOiBNYXRoLnBvdygyLCAtNTIpIH0pO1xuIiwiLy8gMjAuMS4yLjIgTnVtYmVyLmlzRmluaXRlKG51bWJlcilcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgX2lzRmluaXRlID0gcmVxdWlyZSgnLi9fZ2xvYmFsJykuaXNGaW5pdGU7XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnTnVtYmVyJywge1xuICBpc0Zpbml0ZTogZnVuY3Rpb24gaXNGaW5pdGUoaXQpIHtcbiAgICByZXR1cm4gdHlwZW9mIGl0ID09ICdudW1iZXInICYmIF9pc0Zpbml0ZShpdCk7XG4gIH1cbn0pO1xuIiwiLy8gMjAuMS4yLjMgTnVtYmVyLmlzSW50ZWdlcihudW1iZXIpXG52YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuL19pcy1vYmplY3QnKTtcbnZhciBmbG9vciA9IE1hdGguZmxvb3I7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGlzSW50ZWdlcihpdCkge1xuICByZXR1cm4gIWlzT2JqZWN0KGl0KSAmJiBpc0Zpbml0ZShpdCkgJiYgZmxvb3IoaXQpID09PSBpdDtcbn07XG4iLCIvLyAyMC4xLjIuMyBOdW1iZXIuaXNJbnRlZ2VyKG51bWJlcilcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnTnVtYmVyJywgeyBpc0ludGVnZXI6IHJlcXVpcmUoJy4vX2lzLWludGVnZXInKSB9KTtcbiIsIi8vIDIwLjEuMi40IE51bWJlci5pc05hTihudW1iZXIpXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xuXG4kZXhwb3J0KCRleHBvcnQuUywgJ051bWJlcicsIHtcbiAgaXNOYU46IGZ1bmN0aW9uIGlzTmFOKG51bWJlcikge1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1zZWxmLWNvbXBhcmVcbiAgICByZXR1cm4gbnVtYmVyICE9IG51bWJlcjtcbiAgfVxufSk7XG4iLCIvLyAyMC4xLjIuNSBOdW1iZXIuaXNTYWZlSW50ZWdlcihudW1iZXIpXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIGlzSW50ZWdlciA9IHJlcXVpcmUoJy4vX2lzLWludGVnZXInKTtcbnZhciBhYnMgPSBNYXRoLmFicztcblxuJGV4cG9ydCgkZXhwb3J0LlMsICdOdW1iZXInLCB7XG4gIGlzU2FmZUludGVnZXI6IGZ1bmN0aW9uIGlzU2FmZUludGVnZXIobnVtYmVyKSB7XG4gICAgcmV0dXJuIGlzSW50ZWdlcihudW1iZXIpICYmIGFicyhudW1iZXIpIDw9IDB4MWZmZmZmZmZmZmZmZmY7XG4gIH1cbn0pO1xuIiwiLy8gMjAuMS4yLjYgTnVtYmVyLk1BWF9TQUZFX0lOVEVHRVJcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnTnVtYmVyJywgeyBNQVhfU0FGRV9JTlRFR0VSOiAweDFmZmZmZmZmZmZmZmZmIH0pO1xuIiwiLy8gMjAuMS4yLjEwIE51bWJlci5NSU5fU0FGRV9JTlRFR0VSXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xuXG4kZXhwb3J0KCRleHBvcnQuUywgJ051bWJlcicsIHsgTUlOX1NBRkVfSU5URUdFUjogLTB4MWZmZmZmZmZmZmZmZmYgfSk7XG4iLCJ2YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyICRwYXJzZUZsb2F0ID0gcmVxdWlyZSgnLi9fcGFyc2UtZmxvYXQnKTtcbi8vIDIwLjEuMi4xMiBOdW1iZXIucGFyc2VGbG9hdChzdHJpbmcpXG4kZXhwb3J0KCRleHBvcnQuUyArICRleHBvcnQuRiAqIChOdW1iZXIucGFyc2VGbG9hdCAhPSAkcGFyc2VGbG9hdCksICdOdW1iZXInLCB7IHBhcnNlRmxvYXQ6ICRwYXJzZUZsb2F0IH0pO1xuIiwidmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciAkcGFyc2VJbnQgPSByZXF1aXJlKCcuL19wYXJzZS1pbnQnKTtcbi8vIDIwLjEuMi4xMyBOdW1iZXIucGFyc2VJbnQoc3RyaW5nLCByYWRpeClcbiRleHBvcnQoJGV4cG9ydC5TICsgJGV4cG9ydC5GICogKE51bWJlci5wYXJzZUludCAhPSAkcGFyc2VJbnQpLCAnTnVtYmVyJywgeyBwYXJzZUludDogJHBhcnNlSW50IH0pO1xuIiwiLy8gMjAuMi4yLjIwIE1hdGgubG9nMXAoeClcbm1vZHVsZS5leHBvcnRzID0gTWF0aC5sb2cxcCB8fCBmdW5jdGlvbiBsb2cxcCh4KSB7XG4gIHJldHVybiAoeCA9ICt4KSA+IC0xZS04ICYmIHggPCAxZS04ID8geCAtIHggKiB4IC8gMiA6IE1hdGgubG9nKDEgKyB4KTtcbn07XG4iLCIvLyAyMC4yLjIuMyBNYXRoLmFjb3NoKHgpXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIGxvZzFwID0gcmVxdWlyZSgnLi9fbWF0aC1sb2cxcCcpO1xudmFyIHNxcnQgPSBNYXRoLnNxcnQ7XG52YXIgJGFjb3NoID0gTWF0aC5hY29zaDtcblxuJGV4cG9ydCgkZXhwb3J0LlMgKyAkZXhwb3J0LkYgKiAhKCRhY29zaFxuICAvLyBWOCBidWc6IGh0dHBzOi8vY29kZS5nb29nbGUuY29tL3AvdjgvaXNzdWVzL2RldGFpbD9pZD0zNTA5XG4gICYmIE1hdGguZmxvb3IoJGFjb3NoKE51bWJlci5NQVhfVkFMVUUpKSA9PSA3MTBcbiAgLy8gVG9yIEJyb3dzZXIgYnVnOiBNYXRoLmFjb3NoKEluZmluaXR5KSAtPiBOYU5cbiAgJiYgJGFjb3NoKEluZmluaXR5KSA9PSBJbmZpbml0eVxuKSwgJ01hdGgnLCB7XG4gIGFjb3NoOiBmdW5jdGlvbiBhY29zaCh4KSB7XG4gICAgcmV0dXJuICh4ID0gK3gpIDwgMSA/IE5hTiA6IHggPiA5NDkwNjI2NS42MjQyNTE1NlxuICAgICAgPyBNYXRoLmxvZyh4KSArIE1hdGguTE4yXG4gICAgICA6IGxvZzFwKHggLSAxICsgc3FydCh4IC0gMSkgKiBzcXJ0KHggKyAxKSk7XG4gIH1cbn0pO1xuIiwiLy8gMjAuMi4yLjUgTWF0aC5hc2luaCh4KVxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciAkYXNpbmggPSBNYXRoLmFzaW5oO1xuXG5mdW5jdGlvbiBhc2luaCh4KSB7XG4gIHJldHVybiAhaXNGaW5pdGUoeCA9ICt4KSB8fCB4ID09IDAgPyB4IDogeCA8IDAgPyAtYXNpbmgoLXgpIDogTWF0aC5sb2coeCArIE1hdGguc3FydCh4ICogeCArIDEpKTtcbn1cblxuLy8gVG9yIEJyb3dzZXIgYnVnOiBNYXRoLmFzaW5oKDApIC0+IC0wXG4kZXhwb3J0KCRleHBvcnQuUyArICRleHBvcnQuRiAqICEoJGFzaW5oICYmIDEgLyAkYXNpbmgoMCkgPiAwKSwgJ01hdGgnLCB7IGFzaW5oOiBhc2luaCB9KTtcbiIsIi8vIDIwLjIuMi43IE1hdGguYXRhbmgoeClcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgJGF0YW5oID0gTWF0aC5hdGFuaDtcblxuLy8gVG9yIEJyb3dzZXIgYnVnOiBNYXRoLmF0YW5oKC0wKSAtPiAwXG4kZXhwb3J0KCRleHBvcnQuUyArICRleHBvcnQuRiAqICEoJGF0YW5oICYmIDEgLyAkYXRhbmgoLTApIDwgMCksICdNYXRoJywge1xuICBhdGFuaDogZnVuY3Rpb24gYXRhbmgoeCkge1xuICAgIHJldHVybiAoeCA9ICt4KSA9PSAwID8geCA6IE1hdGgubG9nKCgxICsgeCkgLyAoMSAtIHgpKSAvIDI7XG4gIH1cbn0pO1xuIiwiLy8gMjAuMi4yLjI4IE1hdGguc2lnbih4KVxubW9kdWxlLmV4cG9ydHMgPSBNYXRoLnNpZ24gfHwgZnVuY3Rpb24gc2lnbih4KSB7XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1zZWxmLWNvbXBhcmVcbiAgcmV0dXJuICh4ID0gK3gpID09IDAgfHwgeCAhPSB4ID8geCA6IHggPCAwID8gLTEgOiAxO1xufTtcbiIsIi8vIDIwLjIuMi45IE1hdGguY2JydCh4KVxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciBzaWduID0gcmVxdWlyZSgnLi9fbWF0aC1zaWduJyk7XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnTWF0aCcsIHtcbiAgY2JydDogZnVuY3Rpb24gY2JydCh4KSB7XG4gICAgcmV0dXJuIHNpZ24oeCA9ICt4KSAqIE1hdGgucG93KE1hdGguYWJzKHgpLCAxIC8gMyk7XG4gIH1cbn0pO1xuIiwiLy8gMjAuMi4yLjExIE1hdGguY2x6MzIoeClcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnTWF0aCcsIHtcbiAgY2x6MzI6IGZ1bmN0aW9uIGNsejMyKHgpIHtcbiAgICByZXR1cm4gKHggPj4+PSAwKSA/IDMxIC0gTWF0aC5mbG9vcihNYXRoLmxvZyh4ICsgMC41KSAqIE1hdGguTE9HMkUpIDogMzI7XG4gIH1cbn0pO1xuIiwiLy8gMjAuMi4yLjEyIE1hdGguY29zaCh4KVxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciBleHAgPSBNYXRoLmV4cDtcblxuJGV4cG9ydCgkZXhwb3J0LlMsICdNYXRoJywge1xuICBjb3NoOiBmdW5jdGlvbiBjb3NoKHgpIHtcbiAgICByZXR1cm4gKGV4cCh4ID0gK3gpICsgZXhwKC14KSkgLyAyO1xuICB9XG59KTtcbiIsIi8vIDIwLjIuMi4xNCBNYXRoLmV4cG0xKHgpXG52YXIgJGV4cG0xID0gTWF0aC5leHBtMTtcbm1vZHVsZS5leHBvcnRzID0gKCEkZXhwbTFcbiAgLy8gT2xkIEZGIGJ1Z1xuICB8fCAkZXhwbTEoMTApID4gMjIwMjUuNDY1Nzk0ODA2NzE5IHx8ICRleHBtMSgxMCkgPCAyMjAyNS40NjU3OTQ4MDY3MTY1MTY4XG4gIC8vIFRvciBCcm93c2VyIGJ1Z1xuICB8fCAkZXhwbTEoLTJlLTE3KSAhPSAtMmUtMTdcbikgPyBmdW5jdGlvbiBleHBtMSh4KSB7XG4gIHJldHVybiAoeCA9ICt4KSA9PSAwID8geCA6IHggPiAtMWUtNiAmJiB4IDwgMWUtNiA/IHggKyB4ICogeCAvIDIgOiBNYXRoLmV4cCh4KSAtIDE7XG59IDogJGV4cG0xO1xuIiwiLy8gMjAuMi4yLjE0IE1hdGguZXhwbTEoeClcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgJGV4cG0xID0gcmVxdWlyZSgnLi9fbWF0aC1leHBtMScpO1xuXG4kZXhwb3J0KCRleHBvcnQuUyArICRleHBvcnQuRiAqICgkZXhwbTEgIT0gTWF0aC5leHBtMSksICdNYXRoJywgeyBleHBtMTogJGV4cG0xIH0pO1xuIiwiLy8gMjAuMi4yLjE2IE1hdGguZnJvdW5kKHgpXG52YXIgc2lnbiA9IHJlcXVpcmUoJy4vX21hdGgtc2lnbicpO1xudmFyIHBvdyA9IE1hdGgucG93O1xudmFyIEVQU0lMT04gPSBwb3coMiwgLTUyKTtcbnZhciBFUFNJTE9OMzIgPSBwb3coMiwgLTIzKTtcbnZhciBNQVgzMiA9IHBvdygyLCAxMjcpICogKDIgLSBFUFNJTE9OMzIpO1xudmFyIE1JTjMyID0gcG93KDIsIC0xMjYpO1xuXG52YXIgcm91bmRUaWVzVG9FdmVuID0gZnVuY3Rpb24gKG4pIHtcbiAgcmV0dXJuIG4gKyAxIC8gRVBTSUxPTiAtIDEgLyBFUFNJTE9OO1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSBNYXRoLmZyb3VuZCB8fCBmdW5jdGlvbiBmcm91bmQoeCkge1xuICB2YXIgJGFicyA9IE1hdGguYWJzKHgpO1xuICB2YXIgJHNpZ24gPSBzaWduKHgpO1xuICB2YXIgYSwgcmVzdWx0O1xuICBpZiAoJGFicyA8IE1JTjMyKSByZXR1cm4gJHNpZ24gKiByb3VuZFRpZXNUb0V2ZW4oJGFicyAvIE1JTjMyIC8gRVBTSUxPTjMyKSAqIE1JTjMyICogRVBTSUxPTjMyO1xuICBhID0gKDEgKyBFUFNJTE9OMzIgLyBFUFNJTE9OKSAqICRhYnM7XG4gIHJlc3VsdCA9IGEgLSAoYSAtICRhYnMpO1xuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tc2VsZi1jb21wYXJlXG4gIGlmIChyZXN1bHQgPiBNQVgzMiB8fCByZXN1bHQgIT0gcmVzdWx0KSByZXR1cm4gJHNpZ24gKiBJbmZpbml0eTtcbiAgcmV0dXJuICRzaWduICogcmVzdWx0O1xufTtcbiIsIi8vIDIwLjIuMi4xNiBNYXRoLmZyb3VuZCh4KVxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcblxuJGV4cG9ydCgkZXhwb3J0LlMsICdNYXRoJywgeyBmcm91bmQ6IHJlcXVpcmUoJy4vX21hdGgtZnJvdW5kJykgfSk7XG4iLCIvLyAyMC4yLjIuMTcgTWF0aC5oeXBvdChbdmFsdWUxWywgdmFsdWUyWywg4oCmIF1dXSlcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgYWJzID0gTWF0aC5hYnM7XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnTWF0aCcsIHtcbiAgaHlwb3Q6IGZ1bmN0aW9uIGh5cG90KHZhbHVlMSwgdmFsdWUyKSB7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tdW51c2VkLXZhcnNcbiAgICB2YXIgc3VtID0gMDtcbiAgICB2YXIgaSA9IDA7XG4gICAgdmFyIGFMZW4gPSBhcmd1bWVudHMubGVuZ3RoO1xuICAgIHZhciBsYXJnID0gMDtcbiAgICB2YXIgYXJnLCBkaXY7XG4gICAgd2hpbGUgKGkgPCBhTGVuKSB7XG4gICAgICBhcmcgPSBhYnMoYXJndW1lbnRzW2krK10pO1xuICAgICAgaWYgKGxhcmcgPCBhcmcpIHtcbiAgICAgICAgZGl2ID0gbGFyZyAvIGFyZztcbiAgICAgICAgc3VtID0gc3VtICogZGl2ICogZGl2ICsgMTtcbiAgICAgICAgbGFyZyA9IGFyZztcbiAgICAgIH0gZWxzZSBpZiAoYXJnID4gMCkge1xuICAgICAgICBkaXYgPSBhcmcgLyBsYXJnO1xuICAgICAgICBzdW0gKz0gZGl2ICogZGl2O1xuICAgICAgfSBlbHNlIHN1bSArPSBhcmc7XG4gICAgfVxuICAgIHJldHVybiBsYXJnID09PSBJbmZpbml0eSA/IEluZmluaXR5IDogbGFyZyAqIE1hdGguc3FydChzdW0pO1xuICB9XG59KTtcbiIsIi8vIDIwLjIuMi4xOCBNYXRoLmltdWwoeCwgeSlcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgJGltdWwgPSBNYXRoLmltdWw7XG5cbi8vIHNvbWUgV2ViS2l0IHZlcnNpb25zIGZhaWxzIHdpdGggYmlnIG51bWJlcnMsIHNvbWUgaGFzIHdyb25nIGFyaXR5XG4kZXhwb3J0KCRleHBvcnQuUyArICRleHBvcnQuRiAqIHJlcXVpcmUoJy4vX2ZhaWxzJykoZnVuY3Rpb24gKCkge1xuICByZXR1cm4gJGltdWwoMHhmZmZmZmZmZiwgNSkgIT0gLTUgfHwgJGltdWwubGVuZ3RoICE9IDI7XG59KSwgJ01hdGgnLCB7XG4gIGltdWw6IGZ1bmN0aW9uIGltdWwoeCwgeSkge1xuICAgIHZhciBVSU5UMTYgPSAweGZmZmY7XG4gICAgdmFyIHhuID0gK3g7XG4gICAgdmFyIHluID0gK3k7XG4gICAgdmFyIHhsID0gVUlOVDE2ICYgeG47XG4gICAgdmFyIHlsID0gVUlOVDE2ICYgeW47XG4gICAgcmV0dXJuIDAgfCB4bCAqIHlsICsgKChVSU5UMTYgJiB4biA+Pj4gMTYpICogeWwgKyB4bCAqIChVSU5UMTYgJiB5biA+Pj4gMTYpIDw8IDE2ID4+PiAwKTtcbiAgfVxufSk7XG4iLCIvLyAyMC4yLjIuMjEgTWF0aC5sb2cxMCh4KVxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcblxuJGV4cG9ydCgkZXhwb3J0LlMsICdNYXRoJywge1xuICBsb2cxMDogZnVuY3Rpb24gbG9nMTAoeCkge1xuICAgIHJldHVybiBNYXRoLmxvZyh4KSAqIE1hdGguTE9HMTBFO1xuICB9XG59KTtcbiIsIi8vIDIwLjIuMi4yMCBNYXRoLmxvZzFwKHgpXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xuXG4kZXhwb3J0KCRleHBvcnQuUywgJ01hdGgnLCB7IGxvZzFwOiByZXF1aXJlKCcuL19tYXRoLWxvZzFwJykgfSk7XG4iLCIvLyAyMC4yLjIuMjIgTWF0aC5sb2cyKHgpXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xuXG4kZXhwb3J0KCRleHBvcnQuUywgJ01hdGgnLCB7XG4gIGxvZzI6IGZ1bmN0aW9uIGxvZzIoeCkge1xuICAgIHJldHVybiBNYXRoLmxvZyh4KSAvIE1hdGguTE4yO1xuICB9XG59KTtcbiIsIi8vIDIwLjIuMi4yOCBNYXRoLnNpZ24oeClcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnTWF0aCcsIHsgc2lnbjogcmVxdWlyZSgnLi9fbWF0aC1zaWduJykgfSk7XG4iLCIvLyAyMC4yLjIuMzAgTWF0aC5zaW5oKHgpXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIGV4cG0xID0gcmVxdWlyZSgnLi9fbWF0aC1leHBtMScpO1xudmFyIGV4cCA9IE1hdGguZXhwO1xuXG4vLyBWOCBuZWFyIENocm9taXVtIDM4IGhhcyBhIHByb2JsZW0gd2l0aCB2ZXJ5IHNtYWxsIG51bWJlcnNcbiRleHBvcnQoJGV4cG9ydC5TICsgJGV4cG9ydC5GICogcmVxdWlyZSgnLi9fZmFpbHMnKShmdW5jdGlvbiAoKSB7XG4gIHJldHVybiAhTWF0aC5zaW5oKC0yZS0xNykgIT0gLTJlLTE3O1xufSksICdNYXRoJywge1xuICBzaW5oOiBmdW5jdGlvbiBzaW5oKHgpIHtcbiAgICByZXR1cm4gTWF0aC5hYnMoeCA9ICt4KSA8IDFcbiAgICAgID8gKGV4cG0xKHgpIC0gZXhwbTEoLXgpKSAvIDJcbiAgICAgIDogKGV4cCh4IC0gMSkgLSBleHAoLXggLSAxKSkgKiAoTWF0aC5FIC8gMik7XG4gIH1cbn0pO1xuIiwiLy8gMjAuMi4yLjMzIE1hdGgudGFuaCh4KVxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciBleHBtMSA9IHJlcXVpcmUoJy4vX21hdGgtZXhwbTEnKTtcbnZhciBleHAgPSBNYXRoLmV4cDtcblxuJGV4cG9ydCgkZXhwb3J0LlMsICdNYXRoJywge1xuICB0YW5oOiBmdW5jdGlvbiB0YW5oKHgpIHtcbiAgICB2YXIgYSA9IGV4cG0xKHggPSAreCk7XG4gICAgdmFyIGIgPSBleHBtMSgteCk7XG4gICAgcmV0dXJuIGEgPT0gSW5maW5pdHkgPyAxIDogYiA9PSBJbmZpbml0eSA/IC0xIDogKGEgLSBiKSAvIChleHAoeCkgKyBleHAoLXgpKTtcbiAgfVxufSk7XG4iLCIvLyAyMC4yLjIuMzQgTWF0aC50cnVuYyh4KVxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcblxuJGV4cG9ydCgkZXhwb3J0LlMsICdNYXRoJywge1xuICB0cnVuYzogZnVuY3Rpb24gdHJ1bmMoaXQpIHtcbiAgICByZXR1cm4gKGl0ID4gMCA/IE1hdGguZmxvb3IgOiBNYXRoLmNlaWwpKGl0KTtcbiAgfVxufSk7XG4iLCJ2YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIHRvQWJzb2x1dGVJbmRleCA9IHJlcXVpcmUoJy4vX3RvLWFic29sdXRlLWluZGV4Jyk7XG52YXIgZnJvbUNoYXJDb2RlID0gU3RyaW5nLmZyb21DaGFyQ29kZTtcbnZhciAkZnJvbUNvZGVQb2ludCA9IFN0cmluZy5mcm9tQ29kZVBvaW50O1xuXG4vLyBsZW5ndGggc2hvdWxkIGJlIDEsIG9sZCBGRiBwcm9ibGVtXG4kZXhwb3J0KCRleHBvcnQuUyArICRleHBvcnQuRiAqICghISRmcm9tQ29kZVBvaW50ICYmICRmcm9tQ29kZVBvaW50Lmxlbmd0aCAhPSAxKSwgJ1N0cmluZycsIHtcbiAgLy8gMjEuMS4yLjIgU3RyaW5nLmZyb21Db2RlUG9pbnQoLi4uY29kZVBvaW50cylcbiAgZnJvbUNvZGVQb2ludDogZnVuY3Rpb24gZnJvbUNvZGVQb2ludCh4KSB7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tdW51c2VkLXZhcnNcbiAgICB2YXIgcmVzID0gW107XG4gICAgdmFyIGFMZW4gPSBhcmd1bWVudHMubGVuZ3RoO1xuICAgIHZhciBpID0gMDtcbiAgICB2YXIgY29kZTtcbiAgICB3aGlsZSAoYUxlbiA+IGkpIHtcbiAgICAgIGNvZGUgPSArYXJndW1lbnRzW2krK107XG4gICAgICBpZiAodG9BYnNvbHV0ZUluZGV4KGNvZGUsIDB4MTBmZmZmKSAhPT0gY29kZSkgdGhyb3cgUmFuZ2VFcnJvcihjb2RlICsgJyBpcyBub3QgYSB2YWxpZCBjb2RlIHBvaW50Jyk7XG4gICAgICByZXMucHVzaChjb2RlIDwgMHgxMDAwMFxuICAgICAgICA/IGZyb21DaGFyQ29kZShjb2RlKVxuICAgICAgICA6IGZyb21DaGFyQ29kZSgoKGNvZGUgLT0gMHgxMDAwMCkgPj4gMTApICsgMHhkODAwLCBjb2RlICUgMHg0MDAgKyAweGRjMDApXG4gICAgICApO1xuICAgIH0gcmV0dXJuIHJlcy5qb2luKCcnKTtcbiAgfVxufSk7XG4iLCJ2YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIHRvSU9iamVjdCA9IHJlcXVpcmUoJy4vX3RvLWlvYmplY3QnKTtcbnZhciB0b0xlbmd0aCA9IHJlcXVpcmUoJy4vX3RvLWxlbmd0aCcpO1xuXG4kZXhwb3J0KCRleHBvcnQuUywgJ1N0cmluZycsIHtcbiAgLy8gMjEuMS4yLjQgU3RyaW5nLnJhdyhjYWxsU2l0ZSwgLi4uc3Vic3RpdHV0aW9ucylcbiAgcmF3OiBmdW5jdGlvbiByYXcoY2FsbFNpdGUpIHtcbiAgICB2YXIgdHBsID0gdG9JT2JqZWN0KGNhbGxTaXRlLnJhdyk7XG4gICAgdmFyIGxlbiA9IHRvTGVuZ3RoKHRwbC5sZW5ndGgpO1xuICAgIHZhciBhTGVuID0gYXJndW1lbnRzLmxlbmd0aDtcbiAgICB2YXIgcmVzID0gW107XG4gICAgdmFyIGkgPSAwO1xuICAgIHdoaWxlIChsZW4gPiBpKSB7XG4gICAgICByZXMucHVzaChTdHJpbmcodHBsW2krK10pKTtcbiAgICAgIGlmIChpIDwgYUxlbikgcmVzLnB1c2goU3RyaW5nKGFyZ3VtZW50c1tpXSkpO1xuICAgIH0gcmV0dXJuIHJlcy5qb2luKCcnKTtcbiAgfVxufSk7XG4iLCIndXNlIHN0cmljdCc7XG4vLyAyMS4xLjMuMjUgU3RyaW5nLnByb3RvdHlwZS50cmltKClcbnJlcXVpcmUoJy4vX3N0cmluZy10cmltJykoJ3RyaW0nLCBmdW5jdGlvbiAoJHRyaW0pIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIHRyaW0oKSB7XG4gICAgcmV0dXJuICR0cmltKHRoaXMsIDMpO1xuICB9O1xufSk7XG4iLCJ2YXIgdG9JbnRlZ2VyID0gcmVxdWlyZSgnLi9fdG8taW50ZWdlcicpO1xudmFyIGRlZmluZWQgPSByZXF1aXJlKCcuL19kZWZpbmVkJyk7XG4vLyB0cnVlICAtPiBTdHJpbmcjYXRcbi8vIGZhbHNlIC0+IFN0cmluZyNjb2RlUG9pbnRBdFxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoVE9fU1RSSU5HKSB7XG4gIHJldHVybiBmdW5jdGlvbiAodGhhdCwgcG9zKSB7XG4gICAgdmFyIHMgPSBTdHJpbmcoZGVmaW5lZCh0aGF0KSk7XG4gICAgdmFyIGkgPSB0b0ludGVnZXIocG9zKTtcbiAgICB2YXIgbCA9IHMubGVuZ3RoO1xuICAgIHZhciBhLCBiO1xuICAgIGlmIChpIDwgMCB8fCBpID49IGwpIHJldHVybiBUT19TVFJJTkcgPyAnJyA6IHVuZGVmaW5lZDtcbiAgICBhID0gcy5jaGFyQ29kZUF0KGkpO1xuICAgIHJldHVybiBhIDwgMHhkODAwIHx8IGEgPiAweGRiZmYgfHwgaSArIDEgPT09IGwgfHwgKGIgPSBzLmNoYXJDb2RlQXQoaSArIDEpKSA8IDB4ZGMwMCB8fCBiID4gMHhkZmZmXG4gICAgICA/IFRPX1NUUklORyA/IHMuY2hhckF0KGkpIDogYVxuICAgICAgOiBUT19TVFJJTkcgPyBzLnNsaWNlKGksIGkgKyAyKSA6IChhIC0gMHhkODAwIDw8IDEwKSArIChiIC0gMHhkYzAwKSArIDB4MTAwMDA7XG4gIH07XG59O1xuIiwibW9kdWxlLmV4cG9ydHMgPSB7fTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciBjcmVhdGUgPSByZXF1aXJlKCcuL19vYmplY3QtY3JlYXRlJyk7XG52YXIgZGVzY3JpcHRvciA9IHJlcXVpcmUoJy4vX3Byb3BlcnR5LWRlc2MnKTtcbnZhciBzZXRUb1N0cmluZ1RhZyA9IHJlcXVpcmUoJy4vX3NldC10by1zdHJpbmctdGFnJyk7XG52YXIgSXRlcmF0b3JQcm90b3R5cGUgPSB7fTtcblxuLy8gMjUuMS4yLjEuMSAlSXRlcmF0b3JQcm90b3R5cGUlW0BAaXRlcmF0b3JdKClcbnJlcXVpcmUoJy4vX2hpZGUnKShJdGVyYXRvclByb3RvdHlwZSwgcmVxdWlyZSgnLi9fd2tzJykoJ2l0ZXJhdG9yJyksIGZ1bmN0aW9uICgpIHsgcmV0dXJuIHRoaXM7IH0pO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChDb25zdHJ1Y3RvciwgTkFNRSwgbmV4dCkge1xuICBDb25zdHJ1Y3Rvci5wcm90b3R5cGUgPSBjcmVhdGUoSXRlcmF0b3JQcm90b3R5cGUsIHsgbmV4dDogZGVzY3JpcHRvcigxLCBuZXh0KSB9KTtcbiAgc2V0VG9TdHJpbmdUYWcoQ29uc3RydWN0b3IsIE5BTUUgKyAnIEl0ZXJhdG9yJyk7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIExJQlJBUlkgPSByZXF1aXJlKCcuL19saWJyYXJ5Jyk7XG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIHJlZGVmaW5lID0gcmVxdWlyZSgnLi9fcmVkZWZpbmUnKTtcbnZhciBoaWRlID0gcmVxdWlyZSgnLi9faGlkZScpO1xudmFyIEl0ZXJhdG9ycyA9IHJlcXVpcmUoJy4vX2l0ZXJhdG9ycycpO1xudmFyICRpdGVyQ3JlYXRlID0gcmVxdWlyZSgnLi9faXRlci1jcmVhdGUnKTtcbnZhciBzZXRUb1N0cmluZ1RhZyA9IHJlcXVpcmUoJy4vX3NldC10by1zdHJpbmctdGFnJyk7XG52YXIgZ2V0UHJvdG90eXBlT2YgPSByZXF1aXJlKCcuL19vYmplY3QtZ3BvJyk7XG52YXIgSVRFUkFUT1IgPSByZXF1aXJlKCcuL193a3MnKSgnaXRlcmF0b3InKTtcbnZhciBCVUdHWSA9ICEoW10ua2V5cyAmJiAnbmV4dCcgaW4gW10ua2V5cygpKTsgLy8gU2FmYXJpIGhhcyBidWdneSBpdGVyYXRvcnMgdy9vIGBuZXh0YFxudmFyIEZGX0lURVJBVE9SID0gJ0BAaXRlcmF0b3InO1xudmFyIEtFWVMgPSAna2V5cyc7XG52YXIgVkFMVUVTID0gJ3ZhbHVlcyc7XG5cbnZhciByZXR1cm5UaGlzID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gdGhpczsgfTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoQmFzZSwgTkFNRSwgQ29uc3RydWN0b3IsIG5leHQsIERFRkFVTFQsIElTX1NFVCwgRk9SQ0VEKSB7XG4gICRpdGVyQ3JlYXRlKENvbnN0cnVjdG9yLCBOQU1FLCBuZXh0KTtcbiAgdmFyIGdldE1ldGhvZCA9IGZ1bmN0aW9uIChraW5kKSB7XG4gICAgaWYgKCFCVUdHWSAmJiBraW5kIGluIHByb3RvKSByZXR1cm4gcHJvdG9ba2luZF07XG4gICAgc3dpdGNoIChraW5kKSB7XG4gICAgICBjYXNlIEtFWVM6IHJldHVybiBmdW5jdGlvbiBrZXlzKCkgeyByZXR1cm4gbmV3IENvbnN0cnVjdG9yKHRoaXMsIGtpbmQpOyB9O1xuICAgICAgY2FzZSBWQUxVRVM6IHJldHVybiBmdW5jdGlvbiB2YWx1ZXMoKSB7IHJldHVybiBuZXcgQ29uc3RydWN0b3IodGhpcywga2luZCk7IH07XG4gICAgfSByZXR1cm4gZnVuY3Rpb24gZW50cmllcygpIHsgcmV0dXJuIG5ldyBDb25zdHJ1Y3Rvcih0aGlzLCBraW5kKTsgfTtcbiAgfTtcbiAgdmFyIFRBRyA9IE5BTUUgKyAnIEl0ZXJhdG9yJztcbiAgdmFyIERFRl9WQUxVRVMgPSBERUZBVUxUID09IFZBTFVFUztcbiAgdmFyIFZBTFVFU19CVUcgPSBmYWxzZTtcbiAgdmFyIHByb3RvID0gQmFzZS5wcm90b3R5cGU7XG4gIHZhciAkbmF0aXZlID0gcHJvdG9bSVRFUkFUT1JdIHx8IHByb3RvW0ZGX0lURVJBVE9SXSB8fCBERUZBVUxUICYmIHByb3RvW0RFRkFVTFRdO1xuICB2YXIgJGRlZmF1bHQgPSAkbmF0aXZlIHx8IGdldE1ldGhvZChERUZBVUxUKTtcbiAgdmFyICRlbnRyaWVzID0gREVGQVVMVCA/ICFERUZfVkFMVUVTID8gJGRlZmF1bHQgOiBnZXRNZXRob2QoJ2VudHJpZXMnKSA6IHVuZGVmaW5lZDtcbiAgdmFyICRhbnlOYXRpdmUgPSBOQU1FID09ICdBcnJheScgPyBwcm90by5lbnRyaWVzIHx8ICRuYXRpdmUgOiAkbmF0aXZlO1xuICB2YXIgbWV0aG9kcywga2V5LCBJdGVyYXRvclByb3RvdHlwZTtcbiAgLy8gRml4IG5hdGl2ZVxuICBpZiAoJGFueU5hdGl2ZSkge1xuICAgIEl0ZXJhdG9yUHJvdG90eXBlID0gZ2V0UHJvdG90eXBlT2YoJGFueU5hdGl2ZS5jYWxsKG5ldyBCYXNlKCkpKTtcbiAgICBpZiAoSXRlcmF0b3JQcm90b3R5cGUgIT09IE9iamVjdC5wcm90b3R5cGUgJiYgSXRlcmF0b3JQcm90b3R5cGUubmV4dCkge1xuICAgICAgLy8gU2V0IEBAdG9TdHJpbmdUYWcgdG8gbmF0aXZlIGl0ZXJhdG9yc1xuICAgICAgc2V0VG9TdHJpbmdUYWcoSXRlcmF0b3JQcm90b3R5cGUsIFRBRywgdHJ1ZSk7XG4gICAgICAvLyBmaXggZm9yIHNvbWUgb2xkIGVuZ2luZXNcbiAgICAgIGlmICghTElCUkFSWSAmJiB0eXBlb2YgSXRlcmF0b3JQcm90b3R5cGVbSVRFUkFUT1JdICE9ICdmdW5jdGlvbicpIGhpZGUoSXRlcmF0b3JQcm90b3R5cGUsIElURVJBVE9SLCByZXR1cm5UaGlzKTtcbiAgICB9XG4gIH1cbiAgLy8gZml4IEFycmF5I3t2YWx1ZXMsIEBAaXRlcmF0b3J9Lm5hbWUgaW4gVjggLyBGRlxuICBpZiAoREVGX1ZBTFVFUyAmJiAkbmF0aXZlICYmICRuYXRpdmUubmFtZSAhPT0gVkFMVUVTKSB7XG4gICAgVkFMVUVTX0JVRyA9IHRydWU7XG4gICAgJGRlZmF1bHQgPSBmdW5jdGlvbiB2YWx1ZXMoKSB7IHJldHVybiAkbmF0aXZlLmNhbGwodGhpcyk7IH07XG4gIH1cbiAgLy8gRGVmaW5lIGl0ZXJhdG9yXG4gIGlmICgoIUxJQlJBUlkgfHwgRk9SQ0VEKSAmJiAoQlVHR1kgfHwgVkFMVUVTX0JVRyB8fCAhcHJvdG9bSVRFUkFUT1JdKSkge1xuICAgIGhpZGUocHJvdG8sIElURVJBVE9SLCAkZGVmYXVsdCk7XG4gIH1cbiAgLy8gUGx1ZyBmb3IgbGlicmFyeVxuICBJdGVyYXRvcnNbTkFNRV0gPSAkZGVmYXVsdDtcbiAgSXRlcmF0b3JzW1RBR10gPSByZXR1cm5UaGlzO1xuICBpZiAoREVGQVVMVCkge1xuICAgIG1ldGhvZHMgPSB7XG4gICAgICB2YWx1ZXM6IERFRl9WQUxVRVMgPyAkZGVmYXVsdCA6IGdldE1ldGhvZChWQUxVRVMpLFxuICAgICAga2V5czogSVNfU0VUID8gJGRlZmF1bHQgOiBnZXRNZXRob2QoS0VZUyksXG4gICAgICBlbnRyaWVzOiAkZW50cmllc1xuICAgIH07XG4gICAgaWYgKEZPUkNFRCkgZm9yIChrZXkgaW4gbWV0aG9kcykge1xuICAgICAgaWYgKCEoa2V5IGluIHByb3RvKSkgcmVkZWZpbmUocHJvdG8sIGtleSwgbWV0aG9kc1trZXldKTtcbiAgICB9IGVsc2UgJGV4cG9ydCgkZXhwb3J0LlAgKyAkZXhwb3J0LkYgKiAoQlVHR1kgfHwgVkFMVUVTX0JVRyksIE5BTUUsIG1ldGhvZHMpO1xuICB9XG4gIHJldHVybiBtZXRob2RzO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciAkYXQgPSByZXF1aXJlKCcuL19zdHJpbmctYXQnKSh0cnVlKTtcblxuLy8gMjEuMS4zLjI3IFN0cmluZy5wcm90b3R5cGVbQEBpdGVyYXRvcl0oKVxucmVxdWlyZSgnLi9faXRlci1kZWZpbmUnKShTdHJpbmcsICdTdHJpbmcnLCBmdW5jdGlvbiAoaXRlcmF0ZWQpIHtcbiAgdGhpcy5fdCA9IFN0cmluZyhpdGVyYXRlZCk7IC8vIHRhcmdldFxuICB0aGlzLl9pID0gMDsgICAgICAgICAgICAgICAgLy8gbmV4dCBpbmRleFxuLy8gMjEuMS41LjIuMSAlU3RyaW5nSXRlcmF0b3JQcm90b3R5cGUlLm5leHQoKVxufSwgZnVuY3Rpb24gKCkge1xuICB2YXIgTyA9IHRoaXMuX3Q7XG4gIHZhciBpbmRleCA9IHRoaXMuX2k7XG4gIHZhciBwb2ludDtcbiAgaWYgKGluZGV4ID49IE8ubGVuZ3RoKSByZXR1cm4geyB2YWx1ZTogdW5kZWZpbmVkLCBkb25lOiB0cnVlIH07XG4gIHBvaW50ID0gJGF0KE8sIGluZGV4KTtcbiAgdGhpcy5faSArPSBwb2ludC5sZW5ndGg7XG4gIHJldHVybiB7IHZhbHVlOiBwb2ludCwgZG9uZTogZmFsc2UgfTtcbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciAkYXQgPSByZXF1aXJlKCcuL19zdHJpbmctYXQnKShmYWxzZSk7XG4kZXhwb3J0KCRleHBvcnQuUCwgJ1N0cmluZycsIHtcbiAgLy8gMjEuMS4zLjMgU3RyaW5nLnByb3RvdHlwZS5jb2RlUG9pbnRBdChwb3MpXG4gIGNvZGVQb2ludEF0OiBmdW5jdGlvbiBjb2RlUG9pbnRBdChwb3MpIHtcbiAgICByZXR1cm4gJGF0KHRoaXMsIHBvcyk7XG4gIH1cbn0pO1xuIiwiLy8gNy4yLjggSXNSZWdFeHAoYXJndW1lbnQpXG52YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuL19pcy1vYmplY3QnKTtcbnZhciBjb2YgPSByZXF1aXJlKCcuL19jb2YnKTtcbnZhciBNQVRDSCA9IHJlcXVpcmUoJy4vX3drcycpKCdtYXRjaCcpO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQpIHtcbiAgdmFyIGlzUmVnRXhwO1xuICByZXR1cm4gaXNPYmplY3QoaXQpICYmICgoaXNSZWdFeHAgPSBpdFtNQVRDSF0pICE9PSB1bmRlZmluZWQgPyAhIWlzUmVnRXhwIDogY29mKGl0KSA9PSAnUmVnRXhwJyk7XG59O1xuIiwiLy8gaGVscGVyIGZvciBTdHJpbmcje3N0YXJ0c1dpdGgsIGVuZHNXaXRoLCBpbmNsdWRlc31cbnZhciBpc1JlZ0V4cCA9IHJlcXVpcmUoJy4vX2lzLXJlZ2V4cCcpO1xudmFyIGRlZmluZWQgPSByZXF1aXJlKCcuL19kZWZpbmVkJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKHRoYXQsIHNlYXJjaFN0cmluZywgTkFNRSkge1xuICBpZiAoaXNSZWdFeHAoc2VhcmNoU3RyaW5nKSkgdGhyb3cgVHlwZUVycm9yKCdTdHJpbmcjJyArIE5BTUUgKyBcIiBkb2Vzbid0IGFjY2VwdCByZWdleCFcIik7XG4gIHJldHVybiBTdHJpbmcoZGVmaW5lZCh0aGF0KSk7XG59O1xuIiwidmFyIE1BVENIID0gcmVxdWlyZSgnLi9fd2tzJykoJ21hdGNoJyk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChLRVkpIHtcbiAgdmFyIHJlID0gLy4vO1xuICB0cnkge1xuICAgICcvLi8nW0tFWV0ocmUpO1xuICB9IGNhdGNoIChlKSB7XG4gICAgdHJ5IHtcbiAgICAgIHJlW01BVENIXSA9IGZhbHNlO1xuICAgICAgcmV0dXJuICEnLy4vJ1tLRVldKHJlKTtcbiAgICB9IGNhdGNoIChmKSB7IC8qIGVtcHR5ICovIH1cbiAgfSByZXR1cm4gdHJ1ZTtcbn07XG4iLCIvLyAyMS4xLjMuNiBTdHJpbmcucHJvdG90eXBlLmVuZHNXaXRoKHNlYXJjaFN0cmluZyBbLCBlbmRQb3NpdGlvbl0pXG4ndXNlIHN0cmljdCc7XG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIHRvTGVuZ3RoID0gcmVxdWlyZSgnLi9fdG8tbGVuZ3RoJyk7XG52YXIgY29udGV4dCA9IHJlcXVpcmUoJy4vX3N0cmluZy1jb250ZXh0Jyk7XG52YXIgRU5EU19XSVRIID0gJ2VuZHNXaXRoJztcbnZhciAkZW5kc1dpdGggPSAnJ1tFTkRTX1dJVEhdO1xuXG4kZXhwb3J0KCRleHBvcnQuUCArICRleHBvcnQuRiAqIHJlcXVpcmUoJy4vX2ZhaWxzLWlzLXJlZ2V4cCcpKEVORFNfV0lUSCksICdTdHJpbmcnLCB7XG4gIGVuZHNXaXRoOiBmdW5jdGlvbiBlbmRzV2l0aChzZWFyY2hTdHJpbmcgLyogLCBlbmRQb3NpdGlvbiA9IEBsZW5ndGggKi8pIHtcbiAgICB2YXIgdGhhdCA9IGNvbnRleHQodGhpcywgc2VhcmNoU3RyaW5nLCBFTkRTX1dJVEgpO1xuICAgIHZhciBlbmRQb3NpdGlvbiA9IGFyZ3VtZW50cy5sZW5ndGggPiAxID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkO1xuICAgIHZhciBsZW4gPSB0b0xlbmd0aCh0aGF0Lmxlbmd0aCk7XG4gICAgdmFyIGVuZCA9IGVuZFBvc2l0aW9uID09PSB1bmRlZmluZWQgPyBsZW4gOiBNYXRoLm1pbih0b0xlbmd0aChlbmRQb3NpdGlvbiksIGxlbik7XG4gICAgdmFyIHNlYXJjaCA9IFN0cmluZyhzZWFyY2hTdHJpbmcpO1xuICAgIHJldHVybiAkZW5kc1dpdGhcbiAgICAgID8gJGVuZHNXaXRoLmNhbGwodGhhdCwgc2VhcmNoLCBlbmQpXG4gICAgICA6IHRoYXQuc2xpY2UoZW5kIC0gc2VhcmNoLmxlbmd0aCwgZW5kKSA9PT0gc2VhcmNoO1xuICB9XG59KTtcbiIsIi8vIDIxLjEuMy43IFN0cmluZy5wcm90b3R5cGUuaW5jbHVkZXMoc2VhcmNoU3RyaW5nLCBwb3NpdGlvbiA9IDApXG4ndXNlIHN0cmljdCc7XG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIGNvbnRleHQgPSByZXF1aXJlKCcuL19zdHJpbmctY29udGV4dCcpO1xudmFyIElOQ0xVREVTID0gJ2luY2x1ZGVzJztcblxuJGV4cG9ydCgkZXhwb3J0LlAgKyAkZXhwb3J0LkYgKiByZXF1aXJlKCcuL19mYWlscy1pcy1yZWdleHAnKShJTkNMVURFUyksICdTdHJpbmcnLCB7XG4gIGluY2x1ZGVzOiBmdW5jdGlvbiBpbmNsdWRlcyhzZWFyY2hTdHJpbmcgLyogLCBwb3NpdGlvbiA9IDAgKi8pIHtcbiAgICByZXR1cm4gISF+Y29udGV4dCh0aGlzLCBzZWFyY2hTdHJpbmcsIElOQ0xVREVTKVxuICAgICAgLmluZGV4T2Yoc2VhcmNoU3RyaW5nLCBhcmd1bWVudHMubGVuZ3RoID4gMSA/IGFyZ3VtZW50c1sxXSA6IHVuZGVmaW5lZCk7XG4gIH1cbn0pO1xuIiwidmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcblxuJGV4cG9ydCgkZXhwb3J0LlAsICdTdHJpbmcnLCB7XG4gIC8vIDIxLjEuMy4xMyBTdHJpbmcucHJvdG90eXBlLnJlcGVhdChjb3VudClcbiAgcmVwZWF0OiByZXF1aXJlKCcuL19zdHJpbmctcmVwZWF0Jylcbn0pO1xuIiwiLy8gMjEuMS4zLjE4IFN0cmluZy5wcm90b3R5cGUuc3RhcnRzV2l0aChzZWFyY2hTdHJpbmcgWywgcG9zaXRpb24gXSlcbid1c2Ugc3RyaWN0JztcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgdG9MZW5ndGggPSByZXF1aXJlKCcuL190by1sZW5ndGgnKTtcbnZhciBjb250ZXh0ID0gcmVxdWlyZSgnLi9fc3RyaW5nLWNvbnRleHQnKTtcbnZhciBTVEFSVFNfV0lUSCA9ICdzdGFydHNXaXRoJztcbnZhciAkc3RhcnRzV2l0aCA9ICcnW1NUQVJUU19XSVRIXTtcblxuJGV4cG9ydCgkZXhwb3J0LlAgKyAkZXhwb3J0LkYgKiByZXF1aXJlKCcuL19mYWlscy1pcy1yZWdleHAnKShTVEFSVFNfV0lUSCksICdTdHJpbmcnLCB7XG4gIHN0YXJ0c1dpdGg6IGZ1bmN0aW9uIHN0YXJ0c1dpdGgoc2VhcmNoU3RyaW5nIC8qICwgcG9zaXRpb24gPSAwICovKSB7XG4gICAgdmFyIHRoYXQgPSBjb250ZXh0KHRoaXMsIHNlYXJjaFN0cmluZywgU1RBUlRTX1dJVEgpO1xuICAgIHZhciBpbmRleCA9IHRvTGVuZ3RoKE1hdGgubWluKGFyZ3VtZW50cy5sZW5ndGggPiAxID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkLCB0aGF0Lmxlbmd0aCkpO1xuICAgIHZhciBzZWFyY2ggPSBTdHJpbmcoc2VhcmNoU3RyaW5nKTtcbiAgICByZXR1cm4gJHN0YXJ0c1dpdGhcbiAgICAgID8gJHN0YXJ0c1dpdGguY2FsbCh0aGF0LCBzZWFyY2gsIGluZGV4KVxuICAgICAgOiB0aGF0LnNsaWNlKGluZGV4LCBpbmRleCArIHNlYXJjaC5sZW5ndGgpID09PSBzZWFyY2g7XG4gIH1cbn0pO1xuIiwidmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciBmYWlscyA9IHJlcXVpcmUoJy4vX2ZhaWxzJyk7XG52YXIgZGVmaW5lZCA9IHJlcXVpcmUoJy4vX2RlZmluZWQnKTtcbnZhciBxdW90ID0gL1wiL2c7XG4vLyBCLjIuMy4yLjEgQ3JlYXRlSFRNTChzdHJpbmcsIHRhZywgYXR0cmlidXRlLCB2YWx1ZSlcbnZhciBjcmVhdGVIVE1MID0gZnVuY3Rpb24gKHN0cmluZywgdGFnLCBhdHRyaWJ1dGUsIHZhbHVlKSB7XG4gIHZhciBTID0gU3RyaW5nKGRlZmluZWQoc3RyaW5nKSk7XG4gIHZhciBwMSA9ICc8JyArIHRhZztcbiAgaWYgKGF0dHJpYnV0ZSAhPT0gJycpIHAxICs9ICcgJyArIGF0dHJpYnV0ZSArICc9XCInICsgU3RyaW5nKHZhbHVlKS5yZXBsYWNlKHF1b3QsICcmcXVvdDsnKSArICdcIic7XG4gIHJldHVybiBwMSArICc+JyArIFMgKyAnPC8nICsgdGFnICsgJz4nO1xufTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKE5BTUUsIGV4ZWMpIHtcbiAgdmFyIE8gPSB7fTtcbiAgT1tOQU1FXSA9IGV4ZWMoY3JlYXRlSFRNTCk7XG4gICRleHBvcnQoJGV4cG9ydC5QICsgJGV4cG9ydC5GICogZmFpbHMoZnVuY3Rpb24gKCkge1xuICAgIHZhciB0ZXN0ID0gJydbTkFNRV0oJ1wiJyk7XG4gICAgcmV0dXJuIHRlc3QgIT09IHRlc3QudG9Mb3dlckNhc2UoKSB8fCB0ZXN0LnNwbGl0KCdcIicpLmxlbmd0aCA+IDM7XG4gIH0pLCAnU3RyaW5nJywgTyk7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuLy8gQi4yLjMuMiBTdHJpbmcucHJvdG90eXBlLmFuY2hvcihuYW1lKVxucmVxdWlyZSgnLi9fc3RyaW5nLWh0bWwnKSgnYW5jaG9yJywgZnVuY3Rpb24gKGNyZWF0ZUhUTUwpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIGFuY2hvcihuYW1lKSB7XG4gICAgcmV0dXJuIGNyZWF0ZUhUTUwodGhpcywgJ2EnLCAnbmFtZScsIG5hbWUpO1xuICB9O1xufSk7XG4iLCIndXNlIHN0cmljdCc7XG4vLyBCLjIuMy4zIFN0cmluZy5wcm90b3R5cGUuYmlnKClcbnJlcXVpcmUoJy4vX3N0cmluZy1odG1sJykoJ2JpZycsIGZ1bmN0aW9uIChjcmVhdGVIVE1MKSB7XG4gIHJldHVybiBmdW5jdGlvbiBiaWcoKSB7XG4gICAgcmV0dXJuIGNyZWF0ZUhUTUwodGhpcywgJ2JpZycsICcnLCAnJyk7XG4gIH07XG59KTtcbiIsIid1c2Ugc3RyaWN0Jztcbi8vIEIuMi4zLjQgU3RyaW5nLnByb3RvdHlwZS5ibGluaygpXG5yZXF1aXJlKCcuL19zdHJpbmctaHRtbCcpKCdibGluaycsIGZ1bmN0aW9uIChjcmVhdGVIVE1MKSB7XG4gIHJldHVybiBmdW5jdGlvbiBibGluaygpIHtcbiAgICByZXR1cm4gY3JlYXRlSFRNTCh0aGlzLCAnYmxpbmsnLCAnJywgJycpO1xuICB9O1xufSk7XG4iLCIndXNlIHN0cmljdCc7XG4vLyBCLjIuMy41IFN0cmluZy5wcm90b3R5cGUuYm9sZCgpXG5yZXF1aXJlKCcuL19zdHJpbmctaHRtbCcpKCdib2xkJywgZnVuY3Rpb24gKGNyZWF0ZUhUTUwpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIGJvbGQoKSB7XG4gICAgcmV0dXJuIGNyZWF0ZUhUTUwodGhpcywgJ2InLCAnJywgJycpO1xuICB9O1xufSk7XG4iLCIndXNlIHN0cmljdCc7XG4vLyBCLjIuMy42IFN0cmluZy5wcm90b3R5cGUuZml4ZWQoKVxucmVxdWlyZSgnLi9fc3RyaW5nLWh0bWwnKSgnZml4ZWQnLCBmdW5jdGlvbiAoY3JlYXRlSFRNTCkge1xuICByZXR1cm4gZnVuY3Rpb24gZml4ZWQoKSB7XG4gICAgcmV0dXJuIGNyZWF0ZUhUTUwodGhpcywgJ3R0JywgJycsICcnKTtcbiAgfTtcbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xuLy8gQi4yLjMuNyBTdHJpbmcucHJvdG90eXBlLmZvbnRjb2xvcihjb2xvcilcbnJlcXVpcmUoJy4vX3N0cmluZy1odG1sJykoJ2ZvbnRjb2xvcicsIGZ1bmN0aW9uIChjcmVhdGVIVE1MKSB7XG4gIHJldHVybiBmdW5jdGlvbiBmb250Y29sb3IoY29sb3IpIHtcbiAgICByZXR1cm4gY3JlYXRlSFRNTCh0aGlzLCAnZm9udCcsICdjb2xvcicsIGNvbG9yKTtcbiAgfTtcbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xuLy8gQi4yLjMuOCBTdHJpbmcucHJvdG90eXBlLmZvbnRzaXplKHNpemUpXG5yZXF1aXJlKCcuL19zdHJpbmctaHRtbCcpKCdmb250c2l6ZScsIGZ1bmN0aW9uIChjcmVhdGVIVE1MKSB7XG4gIHJldHVybiBmdW5jdGlvbiBmb250c2l6ZShzaXplKSB7XG4gICAgcmV0dXJuIGNyZWF0ZUhUTUwodGhpcywgJ2ZvbnQnLCAnc2l6ZScsIHNpemUpO1xuICB9O1xufSk7XG4iLCIndXNlIHN0cmljdCc7XG4vLyBCLjIuMy45IFN0cmluZy5wcm90b3R5cGUuaXRhbGljcygpXG5yZXF1aXJlKCcuL19zdHJpbmctaHRtbCcpKCdpdGFsaWNzJywgZnVuY3Rpb24gKGNyZWF0ZUhUTUwpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIGl0YWxpY3MoKSB7XG4gICAgcmV0dXJuIGNyZWF0ZUhUTUwodGhpcywgJ2knLCAnJywgJycpO1xuICB9O1xufSk7XG4iLCIndXNlIHN0cmljdCc7XG4vLyBCLjIuMy4xMCBTdHJpbmcucHJvdG90eXBlLmxpbmsodXJsKVxucmVxdWlyZSgnLi9fc3RyaW5nLWh0bWwnKSgnbGluaycsIGZ1bmN0aW9uIChjcmVhdGVIVE1MKSB7XG4gIHJldHVybiBmdW5jdGlvbiBsaW5rKHVybCkge1xuICAgIHJldHVybiBjcmVhdGVIVE1MKHRoaXMsICdhJywgJ2hyZWYnLCB1cmwpO1xuICB9O1xufSk7XG4iLCIndXNlIHN0cmljdCc7XG4vLyBCLjIuMy4xMSBTdHJpbmcucHJvdG90eXBlLnNtYWxsKClcbnJlcXVpcmUoJy4vX3N0cmluZy1odG1sJykoJ3NtYWxsJywgZnVuY3Rpb24gKGNyZWF0ZUhUTUwpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIHNtYWxsKCkge1xuICAgIHJldHVybiBjcmVhdGVIVE1MKHRoaXMsICdzbWFsbCcsICcnLCAnJyk7XG4gIH07XG59KTtcbiIsIid1c2Ugc3RyaWN0Jztcbi8vIEIuMi4zLjEyIFN0cmluZy5wcm90b3R5cGUuc3RyaWtlKClcbnJlcXVpcmUoJy4vX3N0cmluZy1odG1sJykoJ3N0cmlrZScsIGZ1bmN0aW9uIChjcmVhdGVIVE1MKSB7XG4gIHJldHVybiBmdW5jdGlvbiBzdHJpa2UoKSB7XG4gICAgcmV0dXJuIGNyZWF0ZUhUTUwodGhpcywgJ3N0cmlrZScsICcnLCAnJyk7XG4gIH07XG59KTtcbiIsIid1c2Ugc3RyaWN0Jztcbi8vIEIuMi4zLjEzIFN0cmluZy5wcm90b3R5cGUuc3ViKClcbnJlcXVpcmUoJy4vX3N0cmluZy1odG1sJykoJ3N1YicsIGZ1bmN0aW9uIChjcmVhdGVIVE1MKSB7XG4gIHJldHVybiBmdW5jdGlvbiBzdWIoKSB7XG4gICAgcmV0dXJuIGNyZWF0ZUhUTUwodGhpcywgJ3N1YicsICcnLCAnJyk7XG4gIH07XG59KTtcbiIsIid1c2Ugc3RyaWN0Jztcbi8vIEIuMi4zLjE0IFN0cmluZy5wcm90b3R5cGUuc3VwKClcbnJlcXVpcmUoJy4vX3N0cmluZy1odG1sJykoJ3N1cCcsIGZ1bmN0aW9uIChjcmVhdGVIVE1MKSB7XG4gIHJldHVybiBmdW5jdGlvbiBzdXAoKSB7XG4gICAgcmV0dXJuIGNyZWF0ZUhUTUwodGhpcywgJ3N1cCcsICcnLCAnJyk7XG4gIH07XG59KTtcbiIsIi8vIDIwLjMuMy4xIC8gMTUuOS40LjQgRGF0ZS5ub3coKVxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcblxuJGV4cG9ydCgkZXhwb3J0LlMsICdEYXRlJywgeyBub3c6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIG5ldyBEYXRlKCkuZ2V0VGltZSgpOyB9IH0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciB0b09iamVjdCA9IHJlcXVpcmUoJy4vX3RvLW9iamVjdCcpO1xudmFyIHRvUHJpbWl0aXZlID0gcmVxdWlyZSgnLi9fdG8tcHJpbWl0aXZlJyk7XG5cbiRleHBvcnQoJGV4cG9ydC5QICsgJGV4cG9ydC5GICogcmVxdWlyZSgnLi9fZmFpbHMnKShmdW5jdGlvbiAoKSB7XG4gIHJldHVybiBuZXcgRGF0ZShOYU4pLnRvSlNPTigpICE9PSBudWxsXG4gICAgfHwgRGF0ZS5wcm90b3R5cGUudG9KU09OLmNhbGwoeyB0b0lTT1N0cmluZzogZnVuY3Rpb24gKCkgeyByZXR1cm4gMTsgfSB9KSAhPT0gMTtcbn0pLCAnRGF0ZScsIHtcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXVudXNlZC12YXJzXG4gIHRvSlNPTjogZnVuY3Rpb24gdG9KU09OKGtleSkge1xuICAgIHZhciBPID0gdG9PYmplY3QodGhpcyk7XG4gICAgdmFyIHB2ID0gdG9QcmltaXRpdmUoTyk7XG4gICAgcmV0dXJuIHR5cGVvZiBwdiA9PSAnbnVtYmVyJyAmJiAhaXNGaW5pdGUocHYpID8gbnVsbCA6IE8udG9JU09TdHJpbmcoKTtcbiAgfVxufSk7XG4iLCIndXNlIHN0cmljdCc7XG4vLyAyMC4zLjQuMzYgLyAxNS45LjUuNDMgRGF0ZS5wcm90b3R5cGUudG9JU09TdHJpbmcoKVxudmFyIGZhaWxzID0gcmVxdWlyZSgnLi9fZmFpbHMnKTtcbnZhciBnZXRUaW1lID0gRGF0ZS5wcm90b3R5cGUuZ2V0VGltZTtcbnZhciAkdG9JU09TdHJpbmcgPSBEYXRlLnByb3RvdHlwZS50b0lTT1N0cmluZztcblxudmFyIGx6ID0gZnVuY3Rpb24gKG51bSkge1xuICByZXR1cm4gbnVtID4gOSA/IG51bSA6ICcwJyArIG51bTtcbn07XG5cbi8vIFBoYW50b21KUyAvIG9sZCBXZWJLaXQgaGFzIGEgYnJva2VuIGltcGxlbWVudGF0aW9uc1xubW9kdWxlLmV4cG9ydHMgPSAoZmFpbHMoZnVuY3Rpb24gKCkge1xuICByZXR1cm4gJHRvSVNPU3RyaW5nLmNhbGwobmV3IERhdGUoLTVlMTMgLSAxKSkgIT0gJzAzODUtMDctMjVUMDc6MDY6MzkuOTk5Wic7XG59KSB8fCAhZmFpbHMoZnVuY3Rpb24gKCkge1xuICAkdG9JU09TdHJpbmcuY2FsbChuZXcgRGF0ZShOYU4pKTtcbn0pKSA/IGZ1bmN0aW9uIHRvSVNPU3RyaW5nKCkge1xuICBpZiAoIWlzRmluaXRlKGdldFRpbWUuY2FsbCh0aGlzKSkpIHRocm93IFJhbmdlRXJyb3IoJ0ludmFsaWQgdGltZSB2YWx1ZScpO1xuICB2YXIgZCA9IHRoaXM7XG4gIHZhciB5ID0gZC5nZXRVVENGdWxsWWVhcigpO1xuICB2YXIgbSA9IGQuZ2V0VVRDTWlsbGlzZWNvbmRzKCk7XG4gIHZhciBzID0geSA8IDAgPyAnLScgOiB5ID4gOTk5OSA/ICcrJyA6ICcnO1xuICByZXR1cm4gcyArICgnMDAwMDAnICsgTWF0aC5hYnMoeSkpLnNsaWNlKHMgPyAtNiA6IC00KSArXG4gICAgJy0nICsgbHooZC5nZXRVVENNb250aCgpICsgMSkgKyAnLScgKyBseihkLmdldFVUQ0RhdGUoKSkgK1xuICAgICdUJyArIGx6KGQuZ2V0VVRDSG91cnMoKSkgKyAnOicgKyBseihkLmdldFVUQ01pbnV0ZXMoKSkgK1xuICAgICc6JyArIGx6KGQuZ2V0VVRDU2Vjb25kcygpKSArICcuJyArIChtID4gOTkgPyBtIDogJzAnICsgbHoobSkpICsgJ1onO1xufSA6ICR0b0lTT1N0cmluZztcbiIsIi8vIDIwLjMuNC4zNiAvIDE1LjkuNS40MyBEYXRlLnByb3RvdHlwZS50b0lTT1N0cmluZygpXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIHRvSVNPU3RyaW5nID0gcmVxdWlyZSgnLi9fZGF0ZS10by1pc28tc3RyaW5nJyk7XG5cbi8vIFBoYW50b21KUyAvIG9sZCBXZWJLaXQgaGFzIGEgYnJva2VuIGltcGxlbWVudGF0aW9uc1xuJGV4cG9ydCgkZXhwb3J0LlAgKyAkZXhwb3J0LkYgKiAoRGF0ZS5wcm90b3R5cGUudG9JU09TdHJpbmcgIT09IHRvSVNPU3RyaW5nKSwgJ0RhdGUnLCB7XG4gIHRvSVNPU3RyaW5nOiB0b0lTT1N0cmluZ1xufSk7XG4iLCJ2YXIgRGF0ZVByb3RvID0gRGF0ZS5wcm90b3R5cGU7XG52YXIgSU5WQUxJRF9EQVRFID0gJ0ludmFsaWQgRGF0ZSc7XG52YXIgVE9fU1RSSU5HID0gJ3RvU3RyaW5nJztcbnZhciAkdG9TdHJpbmcgPSBEYXRlUHJvdG9bVE9fU1RSSU5HXTtcbnZhciBnZXRUaW1lID0gRGF0ZVByb3RvLmdldFRpbWU7XG5pZiAobmV3IERhdGUoTmFOKSArICcnICE9IElOVkFMSURfREFURSkge1xuICByZXF1aXJlKCcuL19yZWRlZmluZScpKERhdGVQcm90bywgVE9fU1RSSU5HLCBmdW5jdGlvbiB0b1N0cmluZygpIHtcbiAgICB2YXIgdmFsdWUgPSBnZXRUaW1lLmNhbGwodGhpcyk7XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXNlbGYtY29tcGFyZVxuICAgIHJldHVybiB2YWx1ZSA9PT0gdmFsdWUgPyAkdG9TdHJpbmcuY2FsbCh0aGlzKSA6IElOVkFMSURfREFURTtcbiAgfSk7XG59XG4iLCIndXNlIHN0cmljdCc7XG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKTtcbnZhciB0b1ByaW1pdGl2ZSA9IHJlcXVpcmUoJy4vX3RvLXByaW1pdGl2ZScpO1xudmFyIE5VTUJFUiA9ICdudW1iZXInO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChoaW50KSB7XG4gIGlmIChoaW50ICE9PSAnc3RyaW5nJyAmJiBoaW50ICE9PSBOVU1CRVIgJiYgaGludCAhPT0gJ2RlZmF1bHQnKSB0aHJvdyBUeXBlRXJyb3IoJ0luY29ycmVjdCBoaW50Jyk7XG4gIHJldHVybiB0b1ByaW1pdGl2ZShhbk9iamVjdCh0aGlzKSwgaGludCAhPSBOVU1CRVIpO1xufTtcbiIsInZhciBUT19QUklNSVRJVkUgPSByZXF1aXJlKCcuL193a3MnKSgndG9QcmltaXRpdmUnKTtcbnZhciBwcm90byA9IERhdGUucHJvdG90eXBlO1xuXG5pZiAoIShUT19QUklNSVRJVkUgaW4gcHJvdG8pKSByZXF1aXJlKCcuL19oaWRlJykocHJvdG8sIFRPX1BSSU1JVElWRSwgcmVxdWlyZSgnLi9fZGF0ZS10by1wcmltaXRpdmUnKSk7XG4iLCIvLyAyMi4xLjIuMiAvIDE1LjQuMy4yIEFycmF5LmlzQXJyYXkoYXJnKVxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcblxuJGV4cG9ydCgkZXhwb3J0LlMsICdBcnJheScsIHsgaXNBcnJheTogcmVxdWlyZSgnLi9faXMtYXJyYXknKSB9KTtcbiIsIi8vIGNhbGwgc29tZXRoaW5nIG9uIGl0ZXJhdG9yIHN0ZXAgd2l0aCBzYWZlIGNsb3Npbmcgb24gZXJyb3JcbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4vX2FuLW9iamVjdCcpO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXRlcmF0b3IsIGZuLCB2YWx1ZSwgZW50cmllcykge1xuICB0cnkge1xuICAgIHJldHVybiBlbnRyaWVzID8gZm4oYW5PYmplY3QodmFsdWUpWzBdLCB2YWx1ZVsxXSkgOiBmbih2YWx1ZSk7XG4gIC8vIDcuNC42IEl0ZXJhdG9yQ2xvc2UoaXRlcmF0b3IsIGNvbXBsZXRpb24pXG4gIH0gY2F0Y2ggKGUpIHtcbiAgICB2YXIgcmV0ID0gaXRlcmF0b3JbJ3JldHVybiddO1xuICAgIGlmIChyZXQgIT09IHVuZGVmaW5lZCkgYW5PYmplY3QocmV0LmNhbGwoaXRlcmF0b3IpKTtcbiAgICB0aHJvdyBlO1xuICB9XG59O1xuIiwiLy8gY2hlY2sgb24gZGVmYXVsdCBBcnJheSBpdGVyYXRvclxudmFyIEl0ZXJhdG9ycyA9IHJlcXVpcmUoJy4vX2l0ZXJhdG9ycycpO1xudmFyIElURVJBVE9SID0gcmVxdWlyZSgnLi9fd2tzJykoJ2l0ZXJhdG9yJyk7XG52YXIgQXJyYXlQcm90byA9IEFycmF5LnByb3RvdHlwZTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQpIHtcbiAgcmV0dXJuIGl0ICE9PSB1bmRlZmluZWQgJiYgKEl0ZXJhdG9ycy5BcnJheSA9PT0gaXQgfHwgQXJyYXlQcm90b1tJVEVSQVRPUl0gPT09IGl0KTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG52YXIgJGRlZmluZVByb3BlcnR5ID0gcmVxdWlyZSgnLi9fb2JqZWN0LWRwJyk7XG52YXIgY3JlYXRlRGVzYyA9IHJlcXVpcmUoJy4vX3Byb3BlcnR5LWRlc2MnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAob2JqZWN0LCBpbmRleCwgdmFsdWUpIHtcbiAgaWYgKGluZGV4IGluIG9iamVjdCkgJGRlZmluZVByb3BlcnR5LmYob2JqZWN0LCBpbmRleCwgY3JlYXRlRGVzYygwLCB2YWx1ZSkpO1xuICBlbHNlIG9iamVjdFtpbmRleF0gPSB2YWx1ZTtcbn07XG4iLCJ2YXIgY2xhc3NvZiA9IHJlcXVpcmUoJy4vX2NsYXNzb2YnKTtcbnZhciBJVEVSQVRPUiA9IHJlcXVpcmUoJy4vX3drcycpKCdpdGVyYXRvcicpO1xudmFyIEl0ZXJhdG9ycyA9IHJlcXVpcmUoJy4vX2l0ZXJhdG9ycycpO1xubW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL19jb3JlJykuZ2V0SXRlcmF0b3JNZXRob2QgPSBmdW5jdGlvbiAoaXQpIHtcbiAgaWYgKGl0ICE9IHVuZGVmaW5lZCkgcmV0dXJuIGl0W0lURVJBVE9SXVxuICAgIHx8IGl0WydAQGl0ZXJhdG9yJ11cbiAgICB8fCBJdGVyYXRvcnNbY2xhc3NvZihpdCldO1xufTtcbiIsInZhciBJVEVSQVRPUiA9IHJlcXVpcmUoJy4vX3drcycpKCdpdGVyYXRvcicpO1xudmFyIFNBRkVfQ0xPU0lORyA9IGZhbHNlO1xuXG50cnkge1xuICB2YXIgcml0ZXIgPSBbN11bSVRFUkFUT1JdKCk7XG4gIHJpdGVyWydyZXR1cm4nXSA9IGZ1bmN0aW9uICgpIHsgU0FGRV9DTE9TSU5HID0gdHJ1ZTsgfTtcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXRocm93LWxpdGVyYWxcbiAgQXJyYXkuZnJvbShyaXRlciwgZnVuY3Rpb24gKCkgeyB0aHJvdyAyOyB9KTtcbn0gY2F0Y2ggKGUpIHsgLyogZW1wdHkgKi8gfVxuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChleGVjLCBza2lwQ2xvc2luZykge1xuICBpZiAoIXNraXBDbG9zaW5nICYmICFTQUZFX0NMT1NJTkcpIHJldHVybiBmYWxzZTtcbiAgdmFyIHNhZmUgPSBmYWxzZTtcbiAgdHJ5IHtcbiAgICB2YXIgYXJyID0gWzddO1xuICAgIHZhciBpdGVyID0gYXJyW0lURVJBVE9SXSgpO1xuICAgIGl0ZXIubmV4dCA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHsgZG9uZTogc2FmZSA9IHRydWUgfTsgfTtcbiAgICBhcnJbSVRFUkFUT1JdID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gaXRlcjsgfTtcbiAgICBleGVjKGFycik7XG4gIH0gY2F0Y2ggKGUpIHsgLyogZW1wdHkgKi8gfVxuICByZXR1cm4gc2FmZTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG52YXIgY3R4ID0gcmVxdWlyZSgnLi9fY3R4Jyk7XG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIHRvT2JqZWN0ID0gcmVxdWlyZSgnLi9fdG8tb2JqZWN0Jyk7XG52YXIgY2FsbCA9IHJlcXVpcmUoJy4vX2l0ZXItY2FsbCcpO1xudmFyIGlzQXJyYXlJdGVyID0gcmVxdWlyZSgnLi9faXMtYXJyYXktaXRlcicpO1xudmFyIHRvTGVuZ3RoID0gcmVxdWlyZSgnLi9fdG8tbGVuZ3RoJyk7XG52YXIgY3JlYXRlUHJvcGVydHkgPSByZXF1aXJlKCcuL19jcmVhdGUtcHJvcGVydHknKTtcbnZhciBnZXRJdGVyRm4gPSByZXF1aXJlKCcuL2NvcmUuZ2V0LWl0ZXJhdG9yLW1ldGhvZCcpO1xuXG4kZXhwb3J0KCRleHBvcnQuUyArICRleHBvcnQuRiAqICFyZXF1aXJlKCcuL19pdGVyLWRldGVjdCcpKGZ1bmN0aW9uIChpdGVyKSB7IEFycmF5LmZyb20oaXRlcik7IH0pLCAnQXJyYXknLCB7XG4gIC8vIDIyLjEuMi4xIEFycmF5LmZyb20oYXJyYXlMaWtlLCBtYXBmbiA9IHVuZGVmaW5lZCwgdGhpc0FyZyA9IHVuZGVmaW5lZClcbiAgZnJvbTogZnVuY3Rpb24gZnJvbShhcnJheUxpa2UgLyogLCBtYXBmbiA9IHVuZGVmaW5lZCwgdGhpc0FyZyA9IHVuZGVmaW5lZCAqLykge1xuICAgIHZhciBPID0gdG9PYmplY3QoYXJyYXlMaWtlKTtcbiAgICB2YXIgQyA9IHR5cGVvZiB0aGlzID09ICdmdW5jdGlvbicgPyB0aGlzIDogQXJyYXk7XG4gICAgdmFyIGFMZW4gPSBhcmd1bWVudHMubGVuZ3RoO1xuICAgIHZhciBtYXBmbiA9IGFMZW4gPiAxID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkO1xuICAgIHZhciBtYXBwaW5nID0gbWFwZm4gIT09IHVuZGVmaW5lZDtcbiAgICB2YXIgaW5kZXggPSAwO1xuICAgIHZhciBpdGVyRm4gPSBnZXRJdGVyRm4oTyk7XG4gICAgdmFyIGxlbmd0aCwgcmVzdWx0LCBzdGVwLCBpdGVyYXRvcjtcbiAgICBpZiAobWFwcGluZykgbWFwZm4gPSBjdHgobWFwZm4sIGFMZW4gPiAyID8gYXJndW1lbnRzWzJdIDogdW5kZWZpbmVkLCAyKTtcbiAgICAvLyBpZiBvYmplY3QgaXNuJ3QgaXRlcmFibGUgb3IgaXQncyBhcnJheSB3aXRoIGRlZmF1bHQgaXRlcmF0b3IgLSB1c2Ugc2ltcGxlIGNhc2VcbiAgICBpZiAoaXRlckZuICE9IHVuZGVmaW5lZCAmJiAhKEMgPT0gQXJyYXkgJiYgaXNBcnJheUl0ZXIoaXRlckZuKSkpIHtcbiAgICAgIGZvciAoaXRlcmF0b3IgPSBpdGVyRm4uY2FsbChPKSwgcmVzdWx0ID0gbmV3IEMoKTsgIShzdGVwID0gaXRlcmF0b3IubmV4dCgpKS5kb25lOyBpbmRleCsrKSB7XG4gICAgICAgIGNyZWF0ZVByb3BlcnR5KHJlc3VsdCwgaW5kZXgsIG1hcHBpbmcgPyBjYWxsKGl0ZXJhdG9yLCBtYXBmbiwgW3N0ZXAudmFsdWUsIGluZGV4XSwgdHJ1ZSkgOiBzdGVwLnZhbHVlKTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgbGVuZ3RoID0gdG9MZW5ndGgoTy5sZW5ndGgpO1xuICAgICAgZm9yIChyZXN1bHQgPSBuZXcgQyhsZW5ndGgpOyBsZW5ndGggPiBpbmRleDsgaW5kZXgrKykge1xuICAgICAgICBjcmVhdGVQcm9wZXJ0eShyZXN1bHQsIGluZGV4LCBtYXBwaW5nID8gbWFwZm4oT1tpbmRleF0sIGluZGV4KSA6IE9baW5kZXhdKTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmVzdWx0Lmxlbmd0aCA9IGluZGV4O1xuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciBjcmVhdGVQcm9wZXJ0eSA9IHJlcXVpcmUoJy4vX2NyZWF0ZS1wcm9wZXJ0eScpO1xuXG4vLyBXZWJLaXQgQXJyYXkub2YgaXNuJ3QgZ2VuZXJpY1xuJGV4cG9ydCgkZXhwb3J0LlMgKyAkZXhwb3J0LkYgKiByZXF1aXJlKCcuL19mYWlscycpKGZ1bmN0aW9uICgpIHtcbiAgZnVuY3Rpb24gRigpIHsgLyogZW1wdHkgKi8gfVxuICByZXR1cm4gIShBcnJheS5vZi5jYWxsKEYpIGluc3RhbmNlb2YgRik7XG59KSwgJ0FycmF5Jywge1xuICAvLyAyMi4xLjIuMyBBcnJheS5vZiggLi4uaXRlbXMpXG4gIG9mOiBmdW5jdGlvbiBvZigvKiAuLi5hcmdzICovKSB7XG4gICAgdmFyIGluZGV4ID0gMDtcbiAgICB2YXIgYUxlbiA9IGFyZ3VtZW50cy5sZW5ndGg7XG4gICAgdmFyIHJlc3VsdCA9IG5ldyAodHlwZW9mIHRoaXMgPT0gJ2Z1bmN0aW9uJyA/IHRoaXMgOiBBcnJheSkoYUxlbik7XG4gICAgd2hpbGUgKGFMZW4gPiBpbmRleCkgY3JlYXRlUHJvcGVydHkocmVzdWx0LCBpbmRleCwgYXJndW1lbnRzW2luZGV4KytdKTtcbiAgICByZXN1bHQubGVuZ3RoID0gYUxlbjtcbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG59KTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciBmYWlscyA9IHJlcXVpcmUoJy4vX2ZhaWxzJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKG1ldGhvZCwgYXJnKSB7XG4gIHJldHVybiAhIW1ldGhvZCAmJiBmYWlscyhmdW5jdGlvbiAoKSB7XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXVzZWxlc3MtY2FsbFxuICAgIGFyZyA/IG1ldGhvZC5jYWxsKG51bGwsIGZ1bmN0aW9uICgpIHsgLyogZW1wdHkgKi8gfSwgMSkgOiBtZXRob2QuY2FsbChudWxsKTtcbiAgfSk7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuLy8gMjIuMS4zLjEzIEFycmF5LnByb3RvdHlwZS5qb2luKHNlcGFyYXRvcilcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgdG9JT2JqZWN0ID0gcmVxdWlyZSgnLi9fdG8taW9iamVjdCcpO1xudmFyIGFycmF5Sm9pbiA9IFtdLmpvaW47XG5cbi8vIGZhbGxiYWNrIGZvciBub3QgYXJyYXktbGlrZSBzdHJpbmdzXG4kZXhwb3J0KCRleHBvcnQuUCArICRleHBvcnQuRiAqIChyZXF1aXJlKCcuL19pb2JqZWN0JykgIT0gT2JqZWN0IHx8ICFyZXF1aXJlKCcuL19zdHJpY3QtbWV0aG9kJykoYXJyYXlKb2luKSksICdBcnJheScsIHtcbiAgam9pbjogZnVuY3Rpb24gam9pbihzZXBhcmF0b3IpIHtcbiAgICByZXR1cm4gYXJyYXlKb2luLmNhbGwodG9JT2JqZWN0KHRoaXMpLCBzZXBhcmF0b3IgPT09IHVuZGVmaW5lZCA/ICcsJyA6IHNlcGFyYXRvcik7XG4gIH1cbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciBodG1sID0gcmVxdWlyZSgnLi9faHRtbCcpO1xudmFyIGNvZiA9IHJlcXVpcmUoJy4vX2NvZicpO1xudmFyIHRvQWJzb2x1dGVJbmRleCA9IHJlcXVpcmUoJy4vX3RvLWFic29sdXRlLWluZGV4Jyk7XG52YXIgdG9MZW5ndGggPSByZXF1aXJlKCcuL190by1sZW5ndGgnKTtcbnZhciBhcnJheVNsaWNlID0gW10uc2xpY2U7XG5cbi8vIGZhbGxiYWNrIGZvciBub3QgYXJyYXktbGlrZSBFUzMgc3RyaW5ncyBhbmQgRE9NIG9iamVjdHNcbiRleHBvcnQoJGV4cG9ydC5QICsgJGV4cG9ydC5GICogcmVxdWlyZSgnLi9fZmFpbHMnKShmdW5jdGlvbiAoKSB7XG4gIGlmIChodG1sKSBhcnJheVNsaWNlLmNhbGwoaHRtbCk7XG59KSwgJ0FycmF5Jywge1xuICBzbGljZTogZnVuY3Rpb24gc2xpY2UoYmVnaW4sIGVuZCkge1xuICAgIHZhciBsZW4gPSB0b0xlbmd0aCh0aGlzLmxlbmd0aCk7XG4gICAgdmFyIGtsYXNzID0gY29mKHRoaXMpO1xuICAgIGVuZCA9IGVuZCA9PT0gdW5kZWZpbmVkID8gbGVuIDogZW5kO1xuICAgIGlmIChrbGFzcyA9PSAnQXJyYXknKSByZXR1cm4gYXJyYXlTbGljZS5jYWxsKHRoaXMsIGJlZ2luLCBlbmQpO1xuICAgIHZhciBzdGFydCA9IHRvQWJzb2x1dGVJbmRleChiZWdpbiwgbGVuKTtcbiAgICB2YXIgdXBUbyA9IHRvQWJzb2x1dGVJbmRleChlbmQsIGxlbik7XG4gICAgdmFyIHNpemUgPSB0b0xlbmd0aCh1cFRvIC0gc3RhcnQpO1xuICAgIHZhciBjbG9uZWQgPSBuZXcgQXJyYXkoc2l6ZSk7XG4gICAgdmFyIGkgPSAwO1xuICAgIGZvciAoOyBpIDwgc2l6ZTsgaSsrKSBjbG9uZWRbaV0gPSBrbGFzcyA9PSAnU3RyaW5nJ1xuICAgICAgPyB0aGlzLmNoYXJBdChzdGFydCArIGkpXG4gICAgICA6IHRoaXNbc3RhcnQgKyBpXTtcbiAgICByZXR1cm4gY2xvbmVkO1xuICB9XG59KTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgYUZ1bmN0aW9uID0gcmVxdWlyZSgnLi9fYS1mdW5jdGlvbicpO1xudmFyIHRvT2JqZWN0ID0gcmVxdWlyZSgnLi9fdG8tb2JqZWN0Jyk7XG52YXIgZmFpbHMgPSByZXF1aXJlKCcuL19mYWlscycpO1xudmFyICRzb3J0ID0gW10uc29ydDtcbnZhciB0ZXN0ID0gWzEsIDIsIDNdO1xuXG4kZXhwb3J0KCRleHBvcnQuUCArICRleHBvcnQuRiAqIChmYWlscyhmdW5jdGlvbiAoKSB7XG4gIC8vIElFOC1cbiAgdGVzdC5zb3J0KHVuZGVmaW5lZCk7XG59KSB8fCAhZmFpbHMoZnVuY3Rpb24gKCkge1xuICAvLyBWOCBidWdcbiAgdGVzdC5zb3J0KG51bGwpO1xuICAvLyBPbGQgV2ViS2l0XG59KSB8fCAhcmVxdWlyZSgnLi9fc3RyaWN0LW1ldGhvZCcpKCRzb3J0KSksICdBcnJheScsIHtcbiAgLy8gMjIuMS4zLjI1IEFycmF5LnByb3RvdHlwZS5zb3J0KGNvbXBhcmVmbilcbiAgc29ydDogZnVuY3Rpb24gc29ydChjb21wYXJlZm4pIHtcbiAgICByZXR1cm4gY29tcGFyZWZuID09PSB1bmRlZmluZWRcbiAgICAgID8gJHNvcnQuY2FsbCh0b09iamVjdCh0aGlzKSlcbiAgICAgIDogJHNvcnQuY2FsbCh0b09iamVjdCh0aGlzKSwgYUZ1bmN0aW9uKGNvbXBhcmVmbikpO1xuICB9XG59KTtcbiIsInZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4vX2lzLW9iamVjdCcpO1xudmFyIGlzQXJyYXkgPSByZXF1aXJlKCcuL19pcy1hcnJheScpO1xudmFyIFNQRUNJRVMgPSByZXF1aXJlKCcuL193a3MnKSgnc3BlY2llcycpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChvcmlnaW5hbCkge1xuICB2YXIgQztcbiAgaWYgKGlzQXJyYXkob3JpZ2luYWwpKSB7XG4gICAgQyA9IG9yaWdpbmFsLmNvbnN0cnVjdG9yO1xuICAgIC8vIGNyb3NzLXJlYWxtIGZhbGxiYWNrXG4gICAgaWYgKHR5cGVvZiBDID09ICdmdW5jdGlvbicgJiYgKEMgPT09IEFycmF5IHx8IGlzQXJyYXkoQy5wcm90b3R5cGUpKSkgQyA9IHVuZGVmaW5lZDtcbiAgICBpZiAoaXNPYmplY3QoQykpIHtcbiAgICAgIEMgPSBDW1NQRUNJRVNdO1xuICAgICAgaWYgKEMgPT09IG51bGwpIEMgPSB1bmRlZmluZWQ7XG4gICAgfVxuICB9IHJldHVybiBDID09PSB1bmRlZmluZWQgPyBBcnJheSA6IEM7XG59O1xuIiwiLy8gOS40LjIuMyBBcnJheVNwZWNpZXNDcmVhdGUob3JpZ2luYWxBcnJheSwgbGVuZ3RoKVxudmFyIHNwZWNpZXNDb25zdHJ1Y3RvciA9IHJlcXVpcmUoJy4vX2FycmF5LXNwZWNpZXMtY29uc3RydWN0b3InKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAob3JpZ2luYWwsIGxlbmd0aCkge1xuICByZXR1cm4gbmV3IChzcGVjaWVzQ29uc3RydWN0b3Iob3JpZ2luYWwpKShsZW5ndGgpO1xufTtcbiIsIi8vIDAgLT4gQXJyYXkjZm9yRWFjaFxuLy8gMSAtPiBBcnJheSNtYXBcbi8vIDIgLT4gQXJyYXkjZmlsdGVyXG4vLyAzIC0+IEFycmF5I3NvbWVcbi8vIDQgLT4gQXJyYXkjZXZlcnlcbi8vIDUgLT4gQXJyYXkjZmluZFxuLy8gNiAtPiBBcnJheSNmaW5kSW5kZXhcbnZhciBjdHggPSByZXF1aXJlKCcuL19jdHgnKTtcbnZhciBJT2JqZWN0ID0gcmVxdWlyZSgnLi9faW9iamVjdCcpO1xudmFyIHRvT2JqZWN0ID0gcmVxdWlyZSgnLi9fdG8tb2JqZWN0Jyk7XG52YXIgdG9MZW5ndGggPSByZXF1aXJlKCcuL190by1sZW5ndGgnKTtcbnZhciBhc2MgPSByZXF1aXJlKCcuL19hcnJheS1zcGVjaWVzLWNyZWF0ZScpO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoVFlQRSwgJGNyZWF0ZSkge1xuICB2YXIgSVNfTUFQID0gVFlQRSA9PSAxO1xuICB2YXIgSVNfRklMVEVSID0gVFlQRSA9PSAyO1xuICB2YXIgSVNfU09NRSA9IFRZUEUgPT0gMztcbiAgdmFyIElTX0VWRVJZID0gVFlQRSA9PSA0O1xuICB2YXIgSVNfRklORF9JTkRFWCA9IFRZUEUgPT0gNjtcbiAgdmFyIE5PX0hPTEVTID0gVFlQRSA9PSA1IHx8IElTX0ZJTkRfSU5ERVg7XG4gIHZhciBjcmVhdGUgPSAkY3JlYXRlIHx8IGFzYztcbiAgcmV0dXJuIGZ1bmN0aW9uICgkdGhpcywgY2FsbGJhY2tmbiwgdGhhdCkge1xuICAgIHZhciBPID0gdG9PYmplY3QoJHRoaXMpO1xuICAgIHZhciBzZWxmID0gSU9iamVjdChPKTtcbiAgICB2YXIgZiA9IGN0eChjYWxsYmFja2ZuLCB0aGF0LCAzKTtcbiAgICB2YXIgbGVuZ3RoID0gdG9MZW5ndGgoc2VsZi5sZW5ndGgpO1xuICAgIHZhciBpbmRleCA9IDA7XG4gICAgdmFyIHJlc3VsdCA9IElTX01BUCA/IGNyZWF0ZSgkdGhpcywgbGVuZ3RoKSA6IElTX0ZJTFRFUiA/IGNyZWF0ZSgkdGhpcywgMCkgOiB1bmRlZmluZWQ7XG4gICAgdmFyIHZhbCwgcmVzO1xuICAgIGZvciAoO2xlbmd0aCA+IGluZGV4OyBpbmRleCsrKSBpZiAoTk9fSE9MRVMgfHwgaW5kZXggaW4gc2VsZikge1xuICAgICAgdmFsID0gc2VsZltpbmRleF07XG4gICAgICByZXMgPSBmKHZhbCwgaW5kZXgsIE8pO1xuICAgICAgaWYgKFRZUEUpIHtcbiAgICAgICAgaWYgKElTX01BUCkgcmVzdWx0W2luZGV4XSA9IHJlczsgICAvLyBtYXBcbiAgICAgICAgZWxzZSBpZiAocmVzKSBzd2l0Y2ggKFRZUEUpIHtcbiAgICAgICAgICBjYXNlIDM6IHJldHVybiB0cnVlOyAgICAgICAgICAgICAvLyBzb21lXG4gICAgICAgICAgY2FzZSA1OiByZXR1cm4gdmFsOyAgICAgICAgICAgICAgLy8gZmluZFxuICAgICAgICAgIGNhc2UgNjogcmV0dXJuIGluZGV4OyAgICAgICAgICAgIC8vIGZpbmRJbmRleFxuICAgICAgICAgIGNhc2UgMjogcmVzdWx0LnB1c2godmFsKTsgICAgICAgIC8vIGZpbHRlclxuICAgICAgICB9IGVsc2UgaWYgKElTX0VWRVJZKSByZXR1cm4gZmFsc2U7IC8vIGV2ZXJ5XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBJU19GSU5EX0lOREVYID8gLTEgOiBJU19TT01FIHx8IElTX0VWRVJZID8gSVNfRVZFUlkgOiByZXN1bHQ7XG4gIH07XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciAkZm9yRWFjaCA9IHJlcXVpcmUoJy4vX2FycmF5LW1ldGhvZHMnKSgwKTtcbnZhciBTVFJJQ1QgPSByZXF1aXJlKCcuL19zdHJpY3QtbWV0aG9kJykoW10uZm9yRWFjaCwgdHJ1ZSk7XG5cbiRleHBvcnQoJGV4cG9ydC5QICsgJGV4cG9ydC5GICogIVNUUklDVCwgJ0FycmF5Jywge1xuICAvLyAyMi4xLjMuMTAgLyAxNS40LjQuMTggQXJyYXkucHJvdG90eXBlLmZvckVhY2goY2FsbGJhY2tmbiBbLCB0aGlzQXJnXSlcbiAgZm9yRWFjaDogZnVuY3Rpb24gZm9yRWFjaChjYWxsYmFja2ZuIC8qICwgdGhpc0FyZyAqLykge1xuICAgIHJldHVybiAkZm9yRWFjaCh0aGlzLCBjYWxsYmFja2ZuLCBhcmd1bWVudHNbMV0pO1xuICB9XG59KTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgJG1hcCA9IHJlcXVpcmUoJy4vX2FycmF5LW1ldGhvZHMnKSgxKTtcblxuJGV4cG9ydCgkZXhwb3J0LlAgKyAkZXhwb3J0LkYgKiAhcmVxdWlyZSgnLi9fc3RyaWN0LW1ldGhvZCcpKFtdLm1hcCwgdHJ1ZSksICdBcnJheScsIHtcbiAgLy8gMjIuMS4zLjE1IC8gMTUuNC40LjE5IEFycmF5LnByb3RvdHlwZS5tYXAoY2FsbGJhY2tmbiBbLCB0aGlzQXJnXSlcbiAgbWFwOiBmdW5jdGlvbiBtYXAoY2FsbGJhY2tmbiAvKiAsIHRoaXNBcmcgKi8pIHtcbiAgICByZXR1cm4gJG1hcCh0aGlzLCBjYWxsYmFja2ZuLCBhcmd1bWVudHNbMV0pO1xuICB9XG59KTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgJGZpbHRlciA9IHJlcXVpcmUoJy4vX2FycmF5LW1ldGhvZHMnKSgyKTtcblxuJGV4cG9ydCgkZXhwb3J0LlAgKyAkZXhwb3J0LkYgKiAhcmVxdWlyZSgnLi9fc3RyaWN0LW1ldGhvZCcpKFtdLmZpbHRlciwgdHJ1ZSksICdBcnJheScsIHtcbiAgLy8gMjIuMS4zLjcgLyAxNS40LjQuMjAgQXJyYXkucHJvdG90eXBlLmZpbHRlcihjYWxsYmFja2ZuIFssIHRoaXNBcmddKVxuICBmaWx0ZXI6IGZ1bmN0aW9uIGZpbHRlcihjYWxsYmFja2ZuIC8qICwgdGhpc0FyZyAqLykge1xuICAgIHJldHVybiAkZmlsdGVyKHRoaXMsIGNhbGxiYWNrZm4sIGFyZ3VtZW50c1sxXSk7XG4gIH1cbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciAkc29tZSA9IHJlcXVpcmUoJy4vX2FycmF5LW1ldGhvZHMnKSgzKTtcblxuJGV4cG9ydCgkZXhwb3J0LlAgKyAkZXhwb3J0LkYgKiAhcmVxdWlyZSgnLi9fc3RyaWN0LW1ldGhvZCcpKFtdLnNvbWUsIHRydWUpLCAnQXJyYXknLCB7XG4gIC8vIDIyLjEuMy4yMyAvIDE1LjQuNC4xNyBBcnJheS5wcm90b3R5cGUuc29tZShjYWxsYmFja2ZuIFssIHRoaXNBcmddKVxuICBzb21lOiBmdW5jdGlvbiBzb21lKGNhbGxiYWNrZm4gLyogLCB0aGlzQXJnICovKSB7XG4gICAgcmV0dXJuICRzb21lKHRoaXMsIGNhbGxiYWNrZm4sIGFyZ3VtZW50c1sxXSk7XG4gIH1cbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciAkZXZlcnkgPSByZXF1aXJlKCcuL19hcnJheS1tZXRob2RzJykoNCk7XG5cbiRleHBvcnQoJGV4cG9ydC5QICsgJGV4cG9ydC5GICogIXJlcXVpcmUoJy4vX3N0cmljdC1tZXRob2QnKShbXS5ldmVyeSwgdHJ1ZSksICdBcnJheScsIHtcbiAgLy8gMjIuMS4zLjUgLyAxNS40LjQuMTYgQXJyYXkucHJvdG90eXBlLmV2ZXJ5KGNhbGxiYWNrZm4gWywgdGhpc0FyZ10pXG4gIGV2ZXJ5OiBmdW5jdGlvbiBldmVyeShjYWxsYmFja2ZuIC8qICwgdGhpc0FyZyAqLykge1xuICAgIHJldHVybiAkZXZlcnkodGhpcywgY2FsbGJhY2tmbiwgYXJndW1lbnRzWzFdKTtcbiAgfVxufSk7XG4iLCJ2YXIgYUZ1bmN0aW9uID0gcmVxdWlyZSgnLi9fYS1mdW5jdGlvbicpO1xudmFyIHRvT2JqZWN0ID0gcmVxdWlyZSgnLi9fdG8tb2JqZWN0Jyk7XG52YXIgSU9iamVjdCA9IHJlcXVpcmUoJy4vX2lvYmplY3QnKTtcbnZhciB0b0xlbmd0aCA9IHJlcXVpcmUoJy4vX3RvLWxlbmd0aCcpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uICh0aGF0LCBjYWxsYmFja2ZuLCBhTGVuLCBtZW1vLCBpc1JpZ2h0KSB7XG4gIGFGdW5jdGlvbihjYWxsYmFja2ZuKTtcbiAgdmFyIE8gPSB0b09iamVjdCh0aGF0KTtcbiAgdmFyIHNlbGYgPSBJT2JqZWN0KE8pO1xuICB2YXIgbGVuZ3RoID0gdG9MZW5ndGgoTy5sZW5ndGgpO1xuICB2YXIgaW5kZXggPSBpc1JpZ2h0ID8gbGVuZ3RoIC0gMSA6IDA7XG4gIHZhciBpID0gaXNSaWdodCA/IC0xIDogMTtcbiAgaWYgKGFMZW4gPCAyKSBmb3IgKDs7KSB7XG4gICAgaWYgKGluZGV4IGluIHNlbGYpIHtcbiAgICAgIG1lbW8gPSBzZWxmW2luZGV4XTtcbiAgICAgIGluZGV4ICs9IGk7XG4gICAgICBicmVhaztcbiAgICB9XG4gICAgaW5kZXggKz0gaTtcbiAgICBpZiAoaXNSaWdodCA/IGluZGV4IDwgMCA6IGxlbmd0aCA8PSBpbmRleCkge1xuICAgICAgdGhyb3cgVHlwZUVycm9yKCdSZWR1Y2Ugb2YgZW1wdHkgYXJyYXkgd2l0aCBubyBpbml0aWFsIHZhbHVlJyk7XG4gICAgfVxuICB9XG4gIGZvciAoO2lzUmlnaHQgPyBpbmRleCA+PSAwIDogbGVuZ3RoID4gaW5kZXg7IGluZGV4ICs9IGkpIGlmIChpbmRleCBpbiBzZWxmKSB7XG4gICAgbWVtbyA9IGNhbGxiYWNrZm4obWVtbywgc2VsZltpbmRleF0sIGluZGV4LCBPKTtcbiAgfVxuICByZXR1cm4gbWVtbztcbn07XG4iLCIndXNlIHN0cmljdCc7XG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyICRyZWR1Y2UgPSByZXF1aXJlKCcuL19hcnJheS1yZWR1Y2UnKTtcblxuJGV4cG9ydCgkZXhwb3J0LlAgKyAkZXhwb3J0LkYgKiAhcmVxdWlyZSgnLi9fc3RyaWN0LW1ldGhvZCcpKFtdLnJlZHVjZSwgdHJ1ZSksICdBcnJheScsIHtcbiAgLy8gMjIuMS4zLjE4IC8gMTUuNC40LjIxIEFycmF5LnByb3RvdHlwZS5yZWR1Y2UoY2FsbGJhY2tmbiBbLCBpbml0aWFsVmFsdWVdKVxuICByZWR1Y2U6IGZ1bmN0aW9uIHJlZHVjZShjYWxsYmFja2ZuIC8qICwgaW5pdGlhbFZhbHVlICovKSB7XG4gICAgcmV0dXJuICRyZWR1Y2UodGhpcywgY2FsbGJhY2tmbiwgYXJndW1lbnRzLmxlbmd0aCwgYXJndW1lbnRzWzFdLCBmYWxzZSk7XG4gIH1cbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciAkcmVkdWNlID0gcmVxdWlyZSgnLi9fYXJyYXktcmVkdWNlJyk7XG5cbiRleHBvcnQoJGV4cG9ydC5QICsgJGV4cG9ydC5GICogIXJlcXVpcmUoJy4vX3N0cmljdC1tZXRob2QnKShbXS5yZWR1Y2VSaWdodCwgdHJ1ZSksICdBcnJheScsIHtcbiAgLy8gMjIuMS4zLjE5IC8gMTUuNC40LjIyIEFycmF5LnByb3RvdHlwZS5yZWR1Y2VSaWdodChjYWxsYmFja2ZuIFssIGluaXRpYWxWYWx1ZV0pXG4gIHJlZHVjZVJpZ2h0OiBmdW5jdGlvbiByZWR1Y2VSaWdodChjYWxsYmFja2ZuIC8qICwgaW5pdGlhbFZhbHVlICovKSB7XG4gICAgcmV0dXJuICRyZWR1Y2UodGhpcywgY2FsbGJhY2tmbiwgYXJndW1lbnRzLmxlbmd0aCwgYXJndW1lbnRzWzFdLCB0cnVlKTtcbiAgfVxufSk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyICRpbmRleE9mID0gcmVxdWlyZSgnLi9fYXJyYXktaW5jbHVkZXMnKShmYWxzZSk7XG52YXIgJG5hdGl2ZSA9IFtdLmluZGV4T2Y7XG52YXIgTkVHQVRJVkVfWkVSTyA9ICEhJG5hdGl2ZSAmJiAxIC8gWzFdLmluZGV4T2YoMSwgLTApIDwgMDtcblxuJGV4cG9ydCgkZXhwb3J0LlAgKyAkZXhwb3J0LkYgKiAoTkVHQVRJVkVfWkVSTyB8fCAhcmVxdWlyZSgnLi9fc3RyaWN0LW1ldGhvZCcpKCRuYXRpdmUpKSwgJ0FycmF5Jywge1xuICAvLyAyMi4xLjMuMTEgLyAxNS40LjQuMTQgQXJyYXkucHJvdG90eXBlLmluZGV4T2Yoc2VhcmNoRWxlbWVudCBbLCBmcm9tSW5kZXhdKVxuICBpbmRleE9mOiBmdW5jdGlvbiBpbmRleE9mKHNlYXJjaEVsZW1lbnQgLyogLCBmcm9tSW5kZXggPSAwICovKSB7XG4gICAgcmV0dXJuIE5FR0FUSVZFX1pFUk9cbiAgICAgIC8vIGNvbnZlcnQgLTAgdG8gKzBcbiAgICAgID8gJG5hdGl2ZS5hcHBseSh0aGlzLCBhcmd1bWVudHMpIHx8IDBcbiAgICAgIDogJGluZGV4T2YodGhpcywgc2VhcmNoRWxlbWVudCwgYXJndW1lbnRzWzFdKTtcbiAgfVxufSk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIHRvSU9iamVjdCA9IHJlcXVpcmUoJy4vX3RvLWlvYmplY3QnKTtcbnZhciB0b0ludGVnZXIgPSByZXF1aXJlKCcuL190by1pbnRlZ2VyJyk7XG52YXIgdG9MZW5ndGggPSByZXF1aXJlKCcuL190by1sZW5ndGgnKTtcbnZhciAkbmF0aXZlID0gW10ubGFzdEluZGV4T2Y7XG52YXIgTkVHQVRJVkVfWkVSTyA9ICEhJG5hdGl2ZSAmJiAxIC8gWzFdLmxhc3RJbmRleE9mKDEsIC0wKSA8IDA7XG5cbiRleHBvcnQoJGV4cG9ydC5QICsgJGV4cG9ydC5GICogKE5FR0FUSVZFX1pFUk8gfHwgIXJlcXVpcmUoJy4vX3N0cmljdC1tZXRob2QnKSgkbmF0aXZlKSksICdBcnJheScsIHtcbiAgLy8gMjIuMS4zLjE0IC8gMTUuNC40LjE1IEFycmF5LnByb3RvdHlwZS5sYXN0SW5kZXhPZihzZWFyY2hFbGVtZW50IFssIGZyb21JbmRleF0pXG4gIGxhc3RJbmRleE9mOiBmdW5jdGlvbiBsYXN0SW5kZXhPZihzZWFyY2hFbGVtZW50IC8qICwgZnJvbUluZGV4ID0gQFsqLTFdICovKSB7XG4gICAgLy8gY29udmVydCAtMCB0byArMFxuICAgIGlmIChORUdBVElWRV9aRVJPKSByZXR1cm4gJG5hdGl2ZS5hcHBseSh0aGlzLCBhcmd1bWVudHMpIHx8IDA7XG4gICAgdmFyIE8gPSB0b0lPYmplY3QodGhpcyk7XG4gICAgdmFyIGxlbmd0aCA9IHRvTGVuZ3RoKE8ubGVuZ3RoKTtcbiAgICB2YXIgaW5kZXggPSBsZW5ndGggLSAxO1xuICAgIGlmIChhcmd1bWVudHMubGVuZ3RoID4gMSkgaW5kZXggPSBNYXRoLm1pbihpbmRleCwgdG9JbnRlZ2VyKGFyZ3VtZW50c1sxXSkpO1xuICAgIGlmIChpbmRleCA8IDApIGluZGV4ID0gbGVuZ3RoICsgaW5kZXg7XG4gICAgZm9yICg7aW5kZXggPj0gMDsgaW5kZXgtLSkgaWYgKGluZGV4IGluIE8pIGlmIChPW2luZGV4XSA9PT0gc2VhcmNoRWxlbWVudCkgcmV0dXJuIGluZGV4IHx8IDA7XG4gICAgcmV0dXJuIC0xO1xuICB9XG59KTtcbiIsIi8vIDIyLjEuMy4zIEFycmF5LnByb3RvdHlwZS5jb3B5V2l0aGluKHRhcmdldCwgc3RhcnQsIGVuZCA9IHRoaXMubGVuZ3RoKVxuJ3VzZSBzdHJpY3QnO1xudmFyIHRvT2JqZWN0ID0gcmVxdWlyZSgnLi9fdG8tb2JqZWN0Jyk7XG52YXIgdG9BYnNvbHV0ZUluZGV4ID0gcmVxdWlyZSgnLi9fdG8tYWJzb2x1dGUtaW5kZXgnKTtcbnZhciB0b0xlbmd0aCA9IHJlcXVpcmUoJy4vX3RvLWxlbmd0aCcpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IFtdLmNvcHlXaXRoaW4gfHwgZnVuY3Rpb24gY29weVdpdGhpbih0YXJnZXQgLyogPSAwICovLCBzdGFydCAvKiA9IDAsIGVuZCA9IEBsZW5ndGggKi8pIHtcbiAgdmFyIE8gPSB0b09iamVjdCh0aGlzKTtcbiAgdmFyIGxlbiA9IHRvTGVuZ3RoKE8ubGVuZ3RoKTtcbiAgdmFyIHRvID0gdG9BYnNvbHV0ZUluZGV4KHRhcmdldCwgbGVuKTtcbiAgdmFyIGZyb20gPSB0b0Fic29sdXRlSW5kZXgoc3RhcnQsIGxlbik7XG4gIHZhciBlbmQgPSBhcmd1bWVudHMubGVuZ3RoID4gMiA/IGFyZ3VtZW50c1syXSA6IHVuZGVmaW5lZDtcbiAgdmFyIGNvdW50ID0gTWF0aC5taW4oKGVuZCA9PT0gdW5kZWZpbmVkID8gbGVuIDogdG9BYnNvbHV0ZUluZGV4KGVuZCwgbGVuKSkgLSBmcm9tLCBsZW4gLSB0byk7XG4gIHZhciBpbmMgPSAxO1xuICBpZiAoZnJvbSA8IHRvICYmIHRvIDwgZnJvbSArIGNvdW50KSB7XG4gICAgaW5jID0gLTE7XG4gICAgZnJvbSArPSBjb3VudCAtIDE7XG4gICAgdG8gKz0gY291bnQgLSAxO1xuICB9XG4gIHdoaWxlIChjb3VudC0tID4gMCkge1xuICAgIGlmIChmcm9tIGluIE8pIE9bdG9dID0gT1tmcm9tXTtcbiAgICBlbHNlIGRlbGV0ZSBPW3RvXTtcbiAgICB0byArPSBpbmM7XG4gICAgZnJvbSArPSBpbmM7XG4gIH0gcmV0dXJuIE87XG59O1xuIiwiLy8gMjIuMS4zLjMxIEFycmF5LnByb3RvdHlwZVtAQHVuc2NvcGFibGVzXVxudmFyIFVOU0NPUEFCTEVTID0gcmVxdWlyZSgnLi9fd2tzJykoJ3Vuc2NvcGFibGVzJyk7XG52YXIgQXJyYXlQcm90byA9IEFycmF5LnByb3RvdHlwZTtcbmlmIChBcnJheVByb3RvW1VOU0NPUEFCTEVTXSA9PSB1bmRlZmluZWQpIHJlcXVpcmUoJy4vX2hpZGUnKShBcnJheVByb3RvLCBVTlNDT1BBQkxFUywge30pO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoa2V5KSB7XG4gIEFycmF5UHJvdG9bVU5TQ09QQUJMRVNdW2tleV0gPSB0cnVlO1xufTtcbiIsIi8vIDIyLjEuMy4zIEFycmF5LnByb3RvdHlwZS5jb3B5V2l0aGluKHRhcmdldCwgc3RhcnQsIGVuZCA9IHRoaXMubGVuZ3RoKVxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcblxuJGV4cG9ydCgkZXhwb3J0LlAsICdBcnJheScsIHsgY29weVdpdGhpbjogcmVxdWlyZSgnLi9fYXJyYXktY29weS13aXRoaW4nKSB9KTtcblxucmVxdWlyZSgnLi9fYWRkLXRvLXVuc2NvcGFibGVzJykoJ2NvcHlXaXRoaW4nKTtcbiIsIi8vIDIyLjEuMy42IEFycmF5LnByb3RvdHlwZS5maWxsKHZhbHVlLCBzdGFydCA9IDAsIGVuZCA9IHRoaXMubGVuZ3RoKVxuJ3VzZSBzdHJpY3QnO1xudmFyIHRvT2JqZWN0ID0gcmVxdWlyZSgnLi9fdG8tb2JqZWN0Jyk7XG52YXIgdG9BYnNvbHV0ZUluZGV4ID0gcmVxdWlyZSgnLi9fdG8tYWJzb2x1dGUtaW5kZXgnKTtcbnZhciB0b0xlbmd0aCA9IHJlcXVpcmUoJy4vX3RvLWxlbmd0aCcpO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBmaWxsKHZhbHVlIC8qICwgc3RhcnQgPSAwLCBlbmQgPSBAbGVuZ3RoICovKSB7XG4gIHZhciBPID0gdG9PYmplY3QodGhpcyk7XG4gIHZhciBsZW5ndGggPSB0b0xlbmd0aChPLmxlbmd0aCk7XG4gIHZhciBhTGVuID0gYXJndW1lbnRzLmxlbmd0aDtcbiAgdmFyIGluZGV4ID0gdG9BYnNvbHV0ZUluZGV4KGFMZW4gPiAxID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkLCBsZW5ndGgpO1xuICB2YXIgZW5kID0gYUxlbiA+IDIgPyBhcmd1bWVudHNbMl0gOiB1bmRlZmluZWQ7XG4gIHZhciBlbmRQb3MgPSBlbmQgPT09IHVuZGVmaW5lZCA/IGxlbmd0aCA6IHRvQWJzb2x1dGVJbmRleChlbmQsIGxlbmd0aCk7XG4gIHdoaWxlIChlbmRQb3MgPiBpbmRleCkgT1tpbmRleCsrXSA9IHZhbHVlO1xuICByZXR1cm4gTztcbn07XG4iLCIvLyAyMi4xLjMuNiBBcnJheS5wcm90b3R5cGUuZmlsbCh2YWx1ZSwgc3RhcnQgPSAwLCBlbmQgPSB0aGlzLmxlbmd0aClcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG5cbiRleHBvcnQoJGV4cG9ydC5QLCAnQXJyYXknLCB7IGZpbGw6IHJlcXVpcmUoJy4vX2FycmF5LWZpbGwnKSB9KTtcblxucmVxdWlyZSgnLi9fYWRkLXRvLXVuc2NvcGFibGVzJykoJ2ZpbGwnKTtcbiIsIid1c2Ugc3RyaWN0Jztcbi8vIDIyLjEuMy44IEFycmF5LnByb3RvdHlwZS5maW5kKHByZWRpY2F0ZSwgdGhpc0FyZyA9IHVuZGVmaW5lZClcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgJGZpbmQgPSByZXF1aXJlKCcuL19hcnJheS1tZXRob2RzJykoNSk7XG52YXIgS0VZID0gJ2ZpbmQnO1xudmFyIGZvcmNlZCA9IHRydWU7XG4vLyBTaG91bGRuJ3Qgc2tpcCBob2xlc1xuaWYgKEtFWSBpbiBbXSkgQXJyYXkoMSlbS0VZXShmdW5jdGlvbiAoKSB7IGZvcmNlZCA9IGZhbHNlOyB9KTtcbiRleHBvcnQoJGV4cG9ydC5QICsgJGV4cG9ydC5GICogZm9yY2VkLCAnQXJyYXknLCB7XG4gIGZpbmQ6IGZ1bmN0aW9uIGZpbmQoY2FsbGJhY2tmbiAvKiAsIHRoYXQgPSB1bmRlZmluZWQgKi8pIHtcbiAgICByZXR1cm4gJGZpbmQodGhpcywgY2FsbGJhY2tmbiwgYXJndW1lbnRzLmxlbmd0aCA+IDEgPyBhcmd1bWVudHNbMV0gOiB1bmRlZmluZWQpO1xuICB9XG59KTtcbnJlcXVpcmUoJy4vX2FkZC10by11bnNjb3BhYmxlcycpKEtFWSk7XG4iLCIndXNlIHN0cmljdCc7XG4vLyAyMi4xLjMuOSBBcnJheS5wcm90b3R5cGUuZmluZEluZGV4KHByZWRpY2F0ZSwgdGhpc0FyZyA9IHVuZGVmaW5lZClcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgJGZpbmQgPSByZXF1aXJlKCcuL19hcnJheS1tZXRob2RzJykoNik7XG52YXIgS0VZID0gJ2ZpbmRJbmRleCc7XG52YXIgZm9yY2VkID0gdHJ1ZTtcbi8vIFNob3VsZG4ndCBza2lwIGhvbGVzXG5pZiAoS0VZIGluIFtdKSBBcnJheSgxKVtLRVldKGZ1bmN0aW9uICgpIHsgZm9yY2VkID0gZmFsc2U7IH0pO1xuJGV4cG9ydCgkZXhwb3J0LlAgKyAkZXhwb3J0LkYgKiBmb3JjZWQsICdBcnJheScsIHtcbiAgZmluZEluZGV4OiBmdW5jdGlvbiBmaW5kSW5kZXgoY2FsbGJhY2tmbiAvKiAsIHRoYXQgPSB1bmRlZmluZWQgKi8pIHtcbiAgICByZXR1cm4gJGZpbmQodGhpcywgY2FsbGJhY2tmbiwgYXJndW1lbnRzLmxlbmd0aCA+IDEgPyBhcmd1bWVudHNbMV0gOiB1bmRlZmluZWQpO1xuICB9XG59KTtcbnJlcXVpcmUoJy4vX2FkZC10by11bnNjb3BhYmxlcycpKEtFWSk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi9fZ2xvYmFsJyk7XG52YXIgZFAgPSByZXF1aXJlKCcuL19vYmplY3QtZHAnKTtcbnZhciBERVNDUklQVE9SUyA9IHJlcXVpcmUoJy4vX2Rlc2NyaXB0b3JzJyk7XG52YXIgU1BFQ0lFUyA9IHJlcXVpcmUoJy4vX3drcycpKCdzcGVjaWVzJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKEtFWSkge1xuICB2YXIgQyA9IGdsb2JhbFtLRVldO1xuICBpZiAoREVTQ1JJUFRPUlMgJiYgQyAmJiAhQ1tTUEVDSUVTXSkgZFAuZihDLCBTUEVDSUVTLCB7XG4gICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gdGhpczsgfVxuICB9KTtcbn07XG4iLCJyZXF1aXJlKCcuL19zZXQtc3BlY2llcycpKCdBcnJheScpO1xuIiwibW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoZG9uZSwgdmFsdWUpIHtcbiAgcmV0dXJuIHsgdmFsdWU6IHZhbHVlLCBkb25lOiAhIWRvbmUgfTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG52YXIgYWRkVG9VbnNjb3BhYmxlcyA9IHJlcXVpcmUoJy4vX2FkZC10by11bnNjb3BhYmxlcycpO1xudmFyIHN0ZXAgPSByZXF1aXJlKCcuL19pdGVyLXN0ZXAnKTtcbnZhciBJdGVyYXRvcnMgPSByZXF1aXJlKCcuL19pdGVyYXRvcnMnKTtcbnZhciB0b0lPYmplY3QgPSByZXF1aXJlKCcuL190by1pb2JqZWN0Jyk7XG5cbi8vIDIyLjEuMy40IEFycmF5LnByb3RvdHlwZS5lbnRyaWVzKClcbi8vIDIyLjEuMy4xMyBBcnJheS5wcm90b3R5cGUua2V5cygpXG4vLyAyMi4xLjMuMjkgQXJyYXkucHJvdG90eXBlLnZhbHVlcygpXG4vLyAyMi4xLjMuMzAgQXJyYXkucHJvdG90eXBlW0BAaXRlcmF0b3JdKClcbm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9faXRlci1kZWZpbmUnKShBcnJheSwgJ0FycmF5JywgZnVuY3Rpb24gKGl0ZXJhdGVkLCBraW5kKSB7XG4gIHRoaXMuX3QgPSB0b0lPYmplY3QoaXRlcmF0ZWQpOyAvLyB0YXJnZXRcbiAgdGhpcy5faSA9IDA7ICAgICAgICAgICAgICAgICAgIC8vIG5leHQgaW5kZXhcbiAgdGhpcy5fayA9IGtpbmQ7ICAgICAgICAgICAgICAgIC8vIGtpbmRcbi8vIDIyLjEuNS4yLjEgJUFycmF5SXRlcmF0b3JQcm90b3R5cGUlLm5leHQoKVxufSwgZnVuY3Rpb24gKCkge1xuICB2YXIgTyA9IHRoaXMuX3Q7XG4gIHZhciBraW5kID0gdGhpcy5faztcbiAgdmFyIGluZGV4ID0gdGhpcy5faSsrO1xuICBpZiAoIU8gfHwgaW5kZXggPj0gTy5sZW5ndGgpIHtcbiAgICB0aGlzLl90ID0gdW5kZWZpbmVkO1xuICAgIHJldHVybiBzdGVwKDEpO1xuICB9XG4gIGlmIChraW5kID09ICdrZXlzJykgcmV0dXJuIHN0ZXAoMCwgaW5kZXgpO1xuICBpZiAoa2luZCA9PSAndmFsdWVzJykgcmV0dXJuIHN0ZXAoMCwgT1tpbmRleF0pO1xuICByZXR1cm4gc3RlcCgwLCBbaW5kZXgsIE9baW5kZXhdXSk7XG59LCAndmFsdWVzJyk7XG5cbi8vIGFyZ3VtZW50c0xpc3RbQEBpdGVyYXRvcl0gaXMgJUFycmF5UHJvdG9fdmFsdWVzJSAoOS40LjQuNiwgOS40LjQuNylcbkl0ZXJhdG9ycy5Bcmd1bWVudHMgPSBJdGVyYXRvcnMuQXJyYXk7XG5cbmFkZFRvVW5zY29wYWJsZXMoJ2tleXMnKTtcbmFkZFRvVW5zY29wYWJsZXMoJ3ZhbHVlcycpO1xuYWRkVG9VbnNjb3BhYmxlcygnZW50cmllcycpO1xuIiwiJ3VzZSBzdHJpY3QnO1xuLy8gMjEuMi41LjMgZ2V0IFJlZ0V4cC5wcm90b3R5cGUuZmxhZ3NcbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4vX2FuLW9iamVjdCcpO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoKSB7XG4gIHZhciB0aGF0ID0gYW5PYmplY3QodGhpcyk7XG4gIHZhciByZXN1bHQgPSAnJztcbiAgaWYgKHRoYXQuZ2xvYmFsKSByZXN1bHQgKz0gJ2cnO1xuICBpZiAodGhhdC5pZ25vcmVDYXNlKSByZXN1bHQgKz0gJ2knO1xuICBpZiAodGhhdC5tdWx0aWxpbmUpIHJlc3VsdCArPSAnbSc7XG4gIGlmICh0aGF0LnVuaWNvZGUpIHJlc3VsdCArPSAndSc7XG4gIGlmICh0aGF0LnN0aWNreSkgcmVzdWx0ICs9ICd5JztcbiAgcmV0dXJuIHJlc3VsdDtcbn07XG4iLCJ2YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi9fZ2xvYmFsJyk7XG52YXIgaW5oZXJpdElmUmVxdWlyZWQgPSByZXF1aXJlKCcuL19pbmhlcml0LWlmLXJlcXVpcmVkJyk7XG52YXIgZFAgPSByZXF1aXJlKCcuL19vYmplY3QtZHAnKS5mO1xudmFyIGdPUE4gPSByZXF1aXJlKCcuL19vYmplY3QtZ29wbicpLmY7XG52YXIgaXNSZWdFeHAgPSByZXF1aXJlKCcuL19pcy1yZWdleHAnKTtcbnZhciAkZmxhZ3MgPSByZXF1aXJlKCcuL19mbGFncycpO1xudmFyICRSZWdFeHAgPSBnbG9iYWwuUmVnRXhwO1xudmFyIEJhc2UgPSAkUmVnRXhwO1xudmFyIHByb3RvID0gJFJlZ0V4cC5wcm90b3R5cGU7XG52YXIgcmUxID0gL2EvZztcbnZhciByZTIgPSAvYS9nO1xuLy8gXCJuZXdcIiBjcmVhdGVzIGEgbmV3IG9iamVjdCwgb2xkIHdlYmtpdCBidWdneSBoZXJlXG52YXIgQ09SUkVDVF9ORVcgPSBuZXcgJFJlZ0V4cChyZTEpICE9PSByZTE7XG5cbmlmIChyZXF1aXJlKCcuL19kZXNjcmlwdG9ycycpICYmICghQ09SUkVDVF9ORVcgfHwgcmVxdWlyZSgnLi9fZmFpbHMnKShmdW5jdGlvbiAoKSB7XG4gIHJlMltyZXF1aXJlKCcuL193a3MnKSgnbWF0Y2gnKV0gPSBmYWxzZTtcbiAgLy8gUmVnRXhwIGNvbnN0cnVjdG9yIGNhbiBhbHRlciBmbGFncyBhbmQgSXNSZWdFeHAgd29ya3MgY29ycmVjdCB3aXRoIEBAbWF0Y2hcbiAgcmV0dXJuICRSZWdFeHAocmUxKSAhPSByZTEgfHwgJFJlZ0V4cChyZTIpID09IHJlMiB8fCAkUmVnRXhwKHJlMSwgJ2knKSAhPSAnL2EvaSc7XG59KSkpIHtcbiAgJFJlZ0V4cCA9IGZ1bmN0aW9uIFJlZ0V4cChwLCBmKSB7XG4gICAgdmFyIHRpUkUgPSB0aGlzIGluc3RhbmNlb2YgJFJlZ0V4cDtcbiAgICB2YXIgcGlSRSA9IGlzUmVnRXhwKHApO1xuICAgIHZhciBmaVUgPSBmID09PSB1bmRlZmluZWQ7XG4gICAgcmV0dXJuICF0aVJFICYmIHBpUkUgJiYgcC5jb25zdHJ1Y3RvciA9PT0gJFJlZ0V4cCAmJiBmaVUgPyBwXG4gICAgICA6IGluaGVyaXRJZlJlcXVpcmVkKENPUlJFQ1RfTkVXXG4gICAgICAgID8gbmV3IEJhc2UocGlSRSAmJiAhZmlVID8gcC5zb3VyY2UgOiBwLCBmKVxuICAgICAgICA6IEJhc2UoKHBpUkUgPSBwIGluc3RhbmNlb2YgJFJlZ0V4cCkgPyBwLnNvdXJjZSA6IHAsIHBpUkUgJiYgZmlVID8gJGZsYWdzLmNhbGwocCkgOiBmKVxuICAgICAgLCB0aVJFID8gdGhpcyA6IHByb3RvLCAkUmVnRXhwKTtcbiAgfTtcbiAgdmFyIHByb3h5ID0gZnVuY3Rpb24gKGtleSkge1xuICAgIGtleSBpbiAkUmVnRXhwIHx8IGRQKCRSZWdFeHAsIGtleSwge1xuICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBCYXNlW2tleV07IH0sXG4gICAgICBzZXQ6IGZ1bmN0aW9uIChpdCkgeyBCYXNlW2tleV0gPSBpdDsgfVxuICAgIH0pO1xuICB9O1xuICBmb3IgKHZhciBrZXlzID0gZ09QTihCYXNlKSwgaSA9IDA7IGtleXMubGVuZ3RoID4gaTspIHByb3h5KGtleXNbaSsrXSk7XG4gIHByb3RvLmNvbnN0cnVjdG9yID0gJFJlZ0V4cDtcbiAgJFJlZ0V4cC5wcm90b3R5cGUgPSBwcm90bztcbiAgcmVxdWlyZSgnLi9fcmVkZWZpbmUnKShnbG9iYWwsICdSZWdFeHAnLCAkUmVnRXhwKTtcbn1cblxucmVxdWlyZSgnLi9fc2V0LXNwZWNpZXMnKSgnUmVnRXhwJyk7XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciByZWdleHBGbGFncyA9IHJlcXVpcmUoJy4vX2ZsYWdzJyk7XG5cbnZhciBuYXRpdmVFeGVjID0gUmVnRXhwLnByb3RvdHlwZS5leGVjO1xuLy8gVGhpcyBhbHdheXMgcmVmZXJzIHRvIHRoZSBuYXRpdmUgaW1wbGVtZW50YXRpb24sIGJlY2F1c2UgdGhlXG4vLyBTdHJpbmcjcmVwbGFjZSBwb2x5ZmlsbCB1c2VzIC4vZml4LXJlZ2V4cC13ZWxsLWtub3duLXN5bWJvbC1sb2dpYy5qcyxcbi8vIHdoaWNoIGxvYWRzIHRoaXMgZmlsZSBiZWZvcmUgcGF0Y2hpbmcgdGhlIG1ldGhvZC5cbnZhciBuYXRpdmVSZXBsYWNlID0gU3RyaW5nLnByb3RvdHlwZS5yZXBsYWNlO1xuXG52YXIgcGF0Y2hlZEV4ZWMgPSBuYXRpdmVFeGVjO1xuXG52YXIgTEFTVF9JTkRFWCA9ICdsYXN0SW5kZXgnO1xuXG52YXIgVVBEQVRFU19MQVNUX0lOREVYX1dST05HID0gKGZ1bmN0aW9uICgpIHtcbiAgdmFyIHJlMSA9IC9hLyxcbiAgICAgIHJlMiA9IC9iKi9nO1xuICBuYXRpdmVFeGVjLmNhbGwocmUxLCAnYScpO1xuICBuYXRpdmVFeGVjLmNhbGwocmUyLCAnYScpO1xuICByZXR1cm4gcmUxW0xBU1RfSU5ERVhdICE9PSAwIHx8IHJlMltMQVNUX0lOREVYXSAhPT0gMDtcbn0pKCk7XG5cbi8vIG5vbnBhcnRpY2lwYXRpbmcgY2FwdHVyaW5nIGdyb3VwLCBjb3BpZWQgZnJvbSBlczUtc2hpbSdzIFN0cmluZyNzcGxpdCBwYXRjaC5cbnZhciBOUENHX0lOQ0xVREVEID0gLygpPz8vLmV4ZWMoJycpWzFdICE9PSB1bmRlZmluZWQ7XG5cbnZhciBQQVRDSCA9IFVQREFURVNfTEFTVF9JTkRFWF9XUk9ORyB8fCBOUENHX0lOQ0xVREVEO1xuXG5pZiAoUEFUQ0gpIHtcbiAgcGF0Y2hlZEV4ZWMgPSBmdW5jdGlvbiBleGVjKHN0cikge1xuICAgIHZhciByZSA9IHRoaXM7XG4gICAgdmFyIGxhc3RJbmRleCwgcmVDb3B5LCBtYXRjaCwgaTtcblxuICAgIGlmIChOUENHX0lOQ0xVREVEKSB7XG4gICAgICByZUNvcHkgPSBuZXcgUmVnRXhwKCdeJyArIHJlLnNvdXJjZSArICckKD8hXFxcXHMpJywgcmVnZXhwRmxhZ3MuY2FsbChyZSkpO1xuICAgIH1cbiAgICBpZiAoVVBEQVRFU19MQVNUX0lOREVYX1dST05HKSBsYXN0SW5kZXggPSByZVtMQVNUX0lOREVYXTtcblxuICAgIG1hdGNoID0gbmF0aXZlRXhlYy5jYWxsKHJlLCBzdHIpO1xuXG4gICAgaWYgKFVQREFURVNfTEFTVF9JTkRFWF9XUk9ORyAmJiBtYXRjaCkge1xuICAgICAgcmVbTEFTVF9JTkRFWF0gPSByZS5nbG9iYWwgPyBtYXRjaC5pbmRleCArIG1hdGNoWzBdLmxlbmd0aCA6IGxhc3RJbmRleDtcbiAgICB9XG4gICAgaWYgKE5QQ0dfSU5DTFVERUQgJiYgbWF0Y2ggJiYgbWF0Y2gubGVuZ3RoID4gMSkge1xuICAgICAgLy8gRml4IGJyb3dzZXJzIHdob3NlIGBleGVjYCBtZXRob2RzIGRvbid0IGNvbnNpc3RlbnRseSByZXR1cm4gYHVuZGVmaW5lZGBcbiAgICAgIC8vIGZvciBOUENHLCBsaWtlIElFOC4gTk9URTogVGhpcyBkb2Vzbicgd29yayBmb3IgLyguPyk/L1xuICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLWxvb3AtZnVuY1xuICAgICAgbmF0aXZlUmVwbGFjZS5jYWxsKG1hdGNoWzBdLCByZUNvcHksIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgZm9yIChpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGggLSAyOyBpKyspIHtcbiAgICAgICAgICBpZiAoYXJndW1lbnRzW2ldID09PSB1bmRlZmluZWQpIG1hdGNoW2ldID0gdW5kZWZpbmVkO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICByZXR1cm4gbWF0Y2g7XG4gIH07XG59XG5cbm1vZHVsZS5leHBvcnRzID0gcGF0Y2hlZEV4ZWM7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgcmVnZXhwRXhlYyA9IHJlcXVpcmUoJy4vX3JlZ2V4cC1leGVjJyk7XG5yZXF1aXJlKCcuL19leHBvcnQnKSh7XG4gIHRhcmdldDogJ1JlZ0V4cCcsXG4gIHByb3RvOiB0cnVlLFxuICBmb3JjZWQ6IHJlZ2V4cEV4ZWMgIT09IC8uLy5leGVjXG59LCB7XG4gIGV4ZWM6IHJlZ2V4cEV4ZWNcbn0pO1xuIiwiLy8gMjEuMi41LjMgZ2V0IFJlZ0V4cC5wcm90b3R5cGUuZmxhZ3MoKVxuaWYgKHJlcXVpcmUoJy4vX2Rlc2NyaXB0b3JzJykgJiYgLy4vZy5mbGFncyAhPSAnZycpIHJlcXVpcmUoJy4vX29iamVjdC1kcCcpLmYoUmVnRXhwLnByb3RvdHlwZSwgJ2ZsYWdzJywge1xuICBjb25maWd1cmFibGU6IHRydWUsXG4gIGdldDogcmVxdWlyZSgnLi9fZmxhZ3MnKVxufSk7XG4iLCIndXNlIHN0cmljdCc7XG5yZXF1aXJlKCcuL2VzNi5yZWdleHAuZmxhZ3MnKTtcbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4vX2FuLW9iamVjdCcpO1xudmFyICRmbGFncyA9IHJlcXVpcmUoJy4vX2ZsYWdzJyk7XG52YXIgREVTQ1JJUFRPUlMgPSByZXF1aXJlKCcuL19kZXNjcmlwdG9ycycpO1xudmFyIFRPX1NUUklORyA9ICd0b1N0cmluZyc7XG52YXIgJHRvU3RyaW5nID0gLy4vW1RPX1NUUklOR107XG5cbnZhciBkZWZpbmUgPSBmdW5jdGlvbiAoZm4pIHtcbiAgcmVxdWlyZSgnLi9fcmVkZWZpbmUnKShSZWdFeHAucHJvdG90eXBlLCBUT19TVFJJTkcsIGZuLCB0cnVlKTtcbn07XG5cbi8vIDIxLjIuNS4xNCBSZWdFeHAucHJvdG90eXBlLnRvU3RyaW5nKClcbmlmIChyZXF1aXJlKCcuL19mYWlscycpKGZ1bmN0aW9uICgpIHsgcmV0dXJuICR0b1N0cmluZy5jYWxsKHsgc291cmNlOiAnYScsIGZsYWdzOiAnYicgfSkgIT0gJy9hL2InOyB9KSkge1xuICBkZWZpbmUoZnVuY3Rpb24gdG9TdHJpbmcoKSB7XG4gICAgdmFyIFIgPSBhbk9iamVjdCh0aGlzKTtcbiAgICByZXR1cm4gJy8nLmNvbmNhdChSLnNvdXJjZSwgJy8nLFxuICAgICAgJ2ZsYWdzJyBpbiBSID8gUi5mbGFncyA6ICFERVNDUklQVE9SUyAmJiBSIGluc3RhbmNlb2YgUmVnRXhwID8gJGZsYWdzLmNhbGwoUikgOiB1bmRlZmluZWQpO1xuICB9KTtcbi8vIEZGNDQtIFJlZ0V4cCN0b1N0cmluZyBoYXMgYSB3cm9uZyBuYW1lXG59IGVsc2UgaWYgKCR0b1N0cmluZy5uYW1lICE9IFRPX1NUUklORykge1xuICBkZWZpbmUoZnVuY3Rpb24gdG9TdHJpbmcoKSB7XG4gICAgcmV0dXJuICR0b1N0cmluZy5jYWxsKHRoaXMpO1xuICB9KTtcbn1cbiIsIid1c2Ugc3RyaWN0JztcbnZhciBhdCA9IHJlcXVpcmUoJy4vX3N0cmluZy1hdCcpKHRydWUpO1xuXG4gLy8gYEFkdmFuY2VTdHJpbmdJbmRleGAgYWJzdHJhY3Qgb3BlcmF0aW9uXG4vLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy1hZHZhbmNlc3RyaW5naW5kZXhcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKFMsIGluZGV4LCB1bmljb2RlKSB7XG4gIHJldHVybiBpbmRleCArICh1bmljb2RlID8gYXQoUywgaW5kZXgpLmxlbmd0aCA6IDEpO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIGNsYXNzb2YgPSByZXF1aXJlKCcuL19jbGFzc29mJyk7XG52YXIgYnVpbHRpbkV4ZWMgPSBSZWdFeHAucHJvdG90eXBlLmV4ZWM7XG5cbiAvLyBgUmVnRXhwRXhlY2AgYWJzdHJhY3Qgb3BlcmF0aW9uXG4vLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy1yZWdleHBleGVjXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChSLCBTKSB7XG4gIHZhciBleGVjID0gUi5leGVjO1xuICBpZiAodHlwZW9mIGV4ZWMgPT09ICdmdW5jdGlvbicpIHtcbiAgICB2YXIgcmVzdWx0ID0gZXhlYy5jYWxsKFIsIFMpO1xuICAgIGlmICh0eXBlb2YgcmVzdWx0ICE9PSAnb2JqZWN0Jykge1xuICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignUmVnRXhwIGV4ZWMgbWV0aG9kIHJldHVybmVkIHNvbWV0aGluZyBvdGhlciB0aGFuIGFuIE9iamVjdCBvciBudWxsJyk7XG4gICAgfVxuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cbiAgaWYgKGNsYXNzb2YoUikgIT09ICdSZWdFeHAnKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignUmVnRXhwI2V4ZWMgY2FsbGVkIG9uIGluY29tcGF0aWJsZSByZWNlaXZlcicpO1xuICB9XG4gIHJldHVybiBidWlsdGluRXhlYy5jYWxsKFIsIFMpO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcbnJlcXVpcmUoJy4vZXM2LnJlZ2V4cC5leGVjJyk7XG52YXIgcmVkZWZpbmUgPSByZXF1aXJlKCcuL19yZWRlZmluZScpO1xudmFyIGhpZGUgPSByZXF1aXJlKCcuL19oaWRlJyk7XG52YXIgZmFpbHMgPSByZXF1aXJlKCcuL19mYWlscycpO1xudmFyIGRlZmluZWQgPSByZXF1aXJlKCcuL19kZWZpbmVkJyk7XG52YXIgd2tzID0gcmVxdWlyZSgnLi9fd2tzJyk7XG52YXIgcmVnZXhwRXhlYyA9IHJlcXVpcmUoJy4vX3JlZ2V4cC1leGVjJyk7XG5cbnZhciBTUEVDSUVTID0gd2tzKCdzcGVjaWVzJyk7XG5cbnZhciBSRVBMQUNFX1NVUFBPUlRTX05BTUVEX0dST1VQUyA9ICFmYWlscyhmdW5jdGlvbiAoKSB7XG4gIC8vICNyZXBsYWNlIG5lZWRzIGJ1aWx0LWluIHN1cHBvcnQgZm9yIG5hbWVkIGdyb3Vwcy5cbiAgLy8gI21hdGNoIHdvcmtzIGZpbmUgYmVjYXVzZSBpdCBqdXN0IHJldHVybiB0aGUgZXhlYyByZXN1bHRzLCBldmVuIGlmIGl0IGhhc1xuICAvLyBhIFwiZ3JvcHNcIiBwcm9wZXJ0eS5cbiAgdmFyIHJlID0gLy4vO1xuICByZS5leGVjID0gZnVuY3Rpb24gKCkge1xuICAgIHZhciByZXN1bHQgPSBbXTtcbiAgICByZXN1bHQuZ3JvdXBzID0geyBhOiAnNycgfTtcbiAgICByZXR1cm4gcmVzdWx0O1xuICB9O1xuICByZXR1cm4gJycucmVwbGFjZShyZSwgJyQ8YT4nKSAhPT0gJzcnO1xufSk7XG5cbnZhciBTUExJVF9XT1JLU19XSVRIX09WRVJXUklUVEVOX0VYRUMgPSAoZnVuY3Rpb24gKCkge1xuICAvLyBDaHJvbWUgNTEgaGFzIGEgYnVnZ3kgXCJzcGxpdFwiIGltcGxlbWVudGF0aW9uIHdoZW4gUmVnRXhwI2V4ZWMgIT09IG5hdGl2ZUV4ZWNcbiAgdmFyIHJlID0gLyg/OikvO1xuICB2YXIgb3JpZ2luYWxFeGVjID0gcmUuZXhlYztcbiAgcmUuZXhlYyA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIG9yaWdpbmFsRXhlYy5hcHBseSh0aGlzLCBhcmd1bWVudHMpOyB9O1xuICB2YXIgcmVzdWx0ID0gJ2FiJy5zcGxpdChyZSk7XG4gIHJldHVybiByZXN1bHQubGVuZ3RoID09PSAyICYmIHJlc3VsdFswXSA9PT0gJ2EnICYmIHJlc3VsdFsxXSA9PT0gJ2InO1xufSkoKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoS0VZLCBsZW5ndGgsIGV4ZWMpIHtcbiAgdmFyIFNZTUJPTCA9IHdrcyhLRVkpO1xuXG4gIHZhciBERUxFR0FURVNfVE9fU1lNQk9MID0gIWZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgICAvLyBTdHJpbmcgbWV0aG9kcyBjYWxsIHN5bWJvbC1uYW1lZCBSZWdFcCBtZXRob2RzXG4gICAgdmFyIE8gPSB7fTtcbiAgICBPW1NZTUJPTF0gPSBmdW5jdGlvbiAoKSB7IHJldHVybiA3OyB9O1xuICAgIHJldHVybiAnJ1tLRVldKE8pICE9IDc7XG4gIH0pO1xuXG4gIHZhciBERUxFR0FURVNfVE9fRVhFQyA9IERFTEVHQVRFU19UT19TWU1CT0wgPyAhZmFpbHMoZnVuY3Rpb24gKCkge1xuICAgIC8vIFN5bWJvbC1uYW1lZCBSZWdFeHAgbWV0aG9kcyBjYWxsIC5leGVjXG4gICAgdmFyIGV4ZWNDYWxsZWQgPSBmYWxzZTtcbiAgICB2YXIgcmUgPSAvYS87XG4gICAgcmUuZXhlYyA9IGZ1bmN0aW9uICgpIHsgZXhlY0NhbGxlZCA9IHRydWU7IHJldHVybiBudWxsOyB9O1xuICAgIGlmIChLRVkgPT09ICdzcGxpdCcpIHtcbiAgICAgIC8vIFJlZ0V4cFtAQHNwbGl0XSBkb2Vzbid0IGNhbGwgdGhlIHJlZ2V4J3MgZXhlYyBtZXRob2QsIGJ1dCBmaXJzdCBjcmVhdGVzXG4gICAgICAvLyBhIG5ldyBvbmUuIFdlIG5lZWQgdG8gcmV0dXJuIHRoZSBwYXRjaGVkIHJlZ2V4IHdoZW4gY3JlYXRpbmcgdGhlIG5ldyBvbmUuXG4gICAgICByZS5jb25zdHJ1Y3RvciA9IHt9O1xuICAgICAgcmUuY29uc3RydWN0b3JbU1BFQ0lFU10gPSBmdW5jdGlvbiAoKSB7IHJldHVybiByZTsgfTtcbiAgICB9XG4gICAgcmVbU1lNQk9MXSgnJyk7XG4gICAgcmV0dXJuICFleGVjQ2FsbGVkO1xuICB9KSA6IHVuZGVmaW5lZDtcblxuICBpZiAoXG4gICAgIURFTEVHQVRFU19UT19TWU1CT0wgfHxcbiAgICAhREVMRUdBVEVTX1RPX0VYRUMgfHxcbiAgICAoS0VZID09PSAncmVwbGFjZScgJiYgIVJFUExBQ0VfU1VQUE9SVFNfTkFNRURfR1JPVVBTKSB8fFxuICAgIChLRVkgPT09ICdzcGxpdCcgJiYgIVNQTElUX1dPUktTX1dJVEhfT1ZFUldSSVRURU5fRVhFQylcbiAgKSB7XG4gICAgdmFyIG5hdGl2ZVJlZ0V4cE1ldGhvZCA9IC8uL1tTWU1CT0xdO1xuICAgIHZhciBmbnMgPSBleGVjKFxuICAgICAgZGVmaW5lZCxcbiAgICAgIFNZTUJPTCxcbiAgICAgICcnW0tFWV0sXG4gICAgICBmdW5jdGlvbiBtYXliZUNhbGxOYXRpdmUobmF0aXZlTWV0aG9kLCByZWdleHAsIHN0ciwgYXJnMiwgZm9yY2VTdHJpbmdNZXRob2QpIHtcbiAgICAgICAgaWYgKHJlZ2V4cC5leGVjID09PSByZWdleHBFeGVjKSB7XG4gICAgICAgICAgaWYgKERFTEVHQVRFU19UT19TWU1CT0wgJiYgIWZvcmNlU3RyaW5nTWV0aG9kKSB7XG4gICAgICAgICAgICAvLyBUaGUgbmF0aXZlIFN0cmluZyBtZXRob2QgYWxyZWFkeSBkZWxlZ2F0ZXMgdG8gQEBtZXRob2QgKHRoaXNcbiAgICAgICAgICAgIC8vIHBvbHlmaWxsZWQgZnVuY3Rpb24pLCBsZWFzaW5nIHRvIGluZmluaXRlIHJlY3Vyc2lvbi5cbiAgICAgICAgICAgIC8vIFdlIGF2b2lkIGl0IGJ5IGRpcmVjdGx5IGNhbGxpbmcgdGhlIG5hdGl2ZSBAQG1ldGhvZCBtZXRob2QuXG4gICAgICAgICAgICByZXR1cm4geyBkb25lOiB0cnVlLCB2YWx1ZTogbmF0aXZlUmVnRXhwTWV0aG9kLmNhbGwocmVnZXhwLCBzdHIsIGFyZzIpIH07XG4gICAgICAgICAgfVxuICAgICAgICAgIHJldHVybiB7IGRvbmU6IHRydWUsIHZhbHVlOiBuYXRpdmVNZXRob2QuY2FsbChzdHIsIHJlZ2V4cCwgYXJnMikgfTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4geyBkb25lOiBmYWxzZSB9O1xuICAgICAgfVxuICAgICk7XG4gICAgdmFyIHN0cmZuID0gZm5zWzBdO1xuICAgIHZhciByeGZuID0gZm5zWzFdO1xuXG4gICAgcmVkZWZpbmUoU3RyaW5nLnByb3RvdHlwZSwgS0VZLCBzdHJmbik7XG4gICAgaGlkZShSZWdFeHAucHJvdG90eXBlLCBTWU1CT0wsIGxlbmd0aCA9PSAyXG4gICAgICAvLyAyMS4yLjUuOCBSZWdFeHAucHJvdG90eXBlW0BAcmVwbGFjZV0oc3RyaW5nLCByZXBsYWNlVmFsdWUpXG4gICAgICAvLyAyMS4yLjUuMTEgUmVnRXhwLnByb3RvdHlwZVtAQHNwbGl0XShzdHJpbmcsIGxpbWl0KVxuICAgICAgPyBmdW5jdGlvbiAoc3RyaW5nLCBhcmcpIHsgcmV0dXJuIHJ4Zm4uY2FsbChzdHJpbmcsIHRoaXMsIGFyZyk7IH1cbiAgICAgIC8vIDIxLjIuNS42IFJlZ0V4cC5wcm90b3R5cGVbQEBtYXRjaF0oc3RyaW5nKVxuICAgICAgLy8gMjEuMi41LjkgUmVnRXhwLnByb3RvdHlwZVtAQHNlYXJjaF0oc3RyaW5nKVxuICAgICAgOiBmdW5jdGlvbiAoc3RyaW5nKSB7IHJldHVybiByeGZuLmNhbGwoc3RyaW5nLCB0aGlzKTsgfVxuICAgICk7XG4gIH1cbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4vX2FuLW9iamVjdCcpO1xudmFyIHRvTGVuZ3RoID0gcmVxdWlyZSgnLi9fdG8tbGVuZ3RoJyk7XG52YXIgYWR2YW5jZVN0cmluZ0luZGV4ID0gcmVxdWlyZSgnLi9fYWR2YW5jZS1zdHJpbmctaW5kZXgnKTtcbnZhciByZWdFeHBFeGVjID0gcmVxdWlyZSgnLi9fcmVnZXhwLWV4ZWMtYWJzdHJhY3QnKTtcblxuLy8gQEBtYXRjaCBsb2dpY1xucmVxdWlyZSgnLi9fZml4LXJlLXdrcycpKCdtYXRjaCcsIDEsIGZ1bmN0aW9uIChkZWZpbmVkLCBNQVRDSCwgJG1hdGNoLCBtYXliZUNhbGxOYXRpdmUpIHtcbiAgcmV0dXJuIFtcbiAgICAvLyBgU3RyaW5nLnByb3RvdHlwZS5tYXRjaGAgbWV0aG9kXG4gICAgLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtc3RyaW5nLnByb3RvdHlwZS5tYXRjaFxuICAgIGZ1bmN0aW9uIG1hdGNoKHJlZ2V4cCkge1xuICAgICAgdmFyIE8gPSBkZWZpbmVkKHRoaXMpO1xuICAgICAgdmFyIGZuID0gcmVnZXhwID09IHVuZGVmaW5lZCA/IHVuZGVmaW5lZCA6IHJlZ2V4cFtNQVRDSF07XG4gICAgICByZXR1cm4gZm4gIT09IHVuZGVmaW5lZCA/IGZuLmNhbGwocmVnZXhwLCBPKSA6IG5ldyBSZWdFeHAocmVnZXhwKVtNQVRDSF0oU3RyaW5nKE8pKTtcbiAgICB9LFxuICAgIC8vIGBSZWdFeHAucHJvdG90eXBlW0BAbWF0Y2hdYCBtZXRob2RcbiAgICAvLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy1yZWdleHAucHJvdG90eXBlLUBAbWF0Y2hcbiAgICBmdW5jdGlvbiAocmVnZXhwKSB7XG4gICAgICB2YXIgcmVzID0gbWF5YmVDYWxsTmF0aXZlKCRtYXRjaCwgcmVnZXhwLCB0aGlzKTtcbiAgICAgIGlmIChyZXMuZG9uZSkgcmV0dXJuIHJlcy52YWx1ZTtcbiAgICAgIHZhciByeCA9IGFuT2JqZWN0KHJlZ2V4cCk7XG4gICAgICB2YXIgUyA9IFN0cmluZyh0aGlzKTtcbiAgICAgIGlmICghcnguZ2xvYmFsKSByZXR1cm4gcmVnRXhwRXhlYyhyeCwgUyk7XG4gICAgICB2YXIgZnVsbFVuaWNvZGUgPSByeC51bmljb2RlO1xuICAgICAgcngubGFzdEluZGV4ID0gMDtcbiAgICAgIHZhciBBID0gW107XG4gICAgICB2YXIgbiA9IDA7XG4gICAgICB2YXIgcmVzdWx0O1xuICAgICAgd2hpbGUgKChyZXN1bHQgPSByZWdFeHBFeGVjKHJ4LCBTKSkgIT09IG51bGwpIHtcbiAgICAgICAgdmFyIG1hdGNoU3RyID0gU3RyaW5nKHJlc3VsdFswXSk7XG4gICAgICAgIEFbbl0gPSBtYXRjaFN0cjtcbiAgICAgICAgaWYgKG1hdGNoU3RyID09PSAnJykgcngubGFzdEluZGV4ID0gYWR2YW5jZVN0cmluZ0luZGV4KFMsIHRvTGVuZ3RoKHJ4Lmxhc3RJbmRleCksIGZ1bGxVbmljb2RlKTtcbiAgICAgICAgbisrO1xuICAgICAgfVxuICAgICAgcmV0dXJuIG4gPT09IDAgPyBudWxsIDogQTtcbiAgICB9XG4gIF07XG59KTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi9fYW4tb2JqZWN0Jyk7XG52YXIgdG9PYmplY3QgPSByZXF1aXJlKCcuL190by1vYmplY3QnKTtcbnZhciB0b0xlbmd0aCA9IHJlcXVpcmUoJy4vX3RvLWxlbmd0aCcpO1xudmFyIHRvSW50ZWdlciA9IHJlcXVpcmUoJy4vX3RvLWludGVnZXInKTtcbnZhciBhZHZhbmNlU3RyaW5nSW5kZXggPSByZXF1aXJlKCcuL19hZHZhbmNlLXN0cmluZy1pbmRleCcpO1xudmFyIHJlZ0V4cEV4ZWMgPSByZXF1aXJlKCcuL19yZWdleHAtZXhlYy1hYnN0cmFjdCcpO1xudmFyIG1heCA9IE1hdGgubWF4O1xudmFyIG1pbiA9IE1hdGgubWluO1xudmFyIGZsb29yID0gTWF0aC5mbG9vcjtcbnZhciBTVUJTVElUVVRJT05fU1lNQk9MUyA9IC9cXCQoWyQmYCddfFxcZFxcZD98PFtePl0qPikvZztcbnZhciBTVUJTVElUVVRJT05fU1lNQk9MU19OT19OQU1FRCA9IC9cXCQoWyQmYCddfFxcZFxcZD8pL2c7XG5cbnZhciBtYXliZVRvU3RyaW5nID0gZnVuY3Rpb24gKGl0KSB7XG4gIHJldHVybiBpdCA9PT0gdW5kZWZpbmVkID8gaXQgOiBTdHJpbmcoaXQpO1xufTtcblxuLy8gQEByZXBsYWNlIGxvZ2ljXG5yZXF1aXJlKCcuL19maXgtcmUtd2tzJykoJ3JlcGxhY2UnLCAyLCBmdW5jdGlvbiAoZGVmaW5lZCwgUkVQTEFDRSwgJHJlcGxhY2UsIG1heWJlQ2FsbE5hdGl2ZSkge1xuICByZXR1cm4gW1xuICAgIC8vIGBTdHJpbmcucHJvdG90eXBlLnJlcGxhY2VgIG1ldGhvZFxuICAgIC8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLXN0cmluZy5wcm90b3R5cGUucmVwbGFjZVxuICAgIGZ1bmN0aW9uIHJlcGxhY2Uoc2VhcmNoVmFsdWUsIHJlcGxhY2VWYWx1ZSkge1xuICAgICAgdmFyIE8gPSBkZWZpbmVkKHRoaXMpO1xuICAgICAgdmFyIGZuID0gc2VhcmNoVmFsdWUgPT0gdW5kZWZpbmVkID8gdW5kZWZpbmVkIDogc2VhcmNoVmFsdWVbUkVQTEFDRV07XG4gICAgICByZXR1cm4gZm4gIT09IHVuZGVmaW5lZFxuICAgICAgICA/IGZuLmNhbGwoc2VhcmNoVmFsdWUsIE8sIHJlcGxhY2VWYWx1ZSlcbiAgICAgICAgOiAkcmVwbGFjZS5jYWxsKFN0cmluZyhPKSwgc2VhcmNoVmFsdWUsIHJlcGxhY2VWYWx1ZSk7XG4gICAgfSxcbiAgICAvLyBgUmVnRXhwLnByb3RvdHlwZVtAQHJlcGxhY2VdYCBtZXRob2RcbiAgICAvLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy1yZWdleHAucHJvdG90eXBlLUBAcmVwbGFjZVxuICAgIGZ1bmN0aW9uIChyZWdleHAsIHJlcGxhY2VWYWx1ZSkge1xuICAgICAgdmFyIHJlcyA9IG1heWJlQ2FsbE5hdGl2ZSgkcmVwbGFjZSwgcmVnZXhwLCB0aGlzLCByZXBsYWNlVmFsdWUpO1xuICAgICAgaWYgKHJlcy5kb25lKSByZXR1cm4gcmVzLnZhbHVlO1xuXG4gICAgICB2YXIgcnggPSBhbk9iamVjdChyZWdleHApO1xuICAgICAgdmFyIFMgPSBTdHJpbmcodGhpcyk7XG4gICAgICB2YXIgZnVuY3Rpb25hbFJlcGxhY2UgPSB0eXBlb2YgcmVwbGFjZVZhbHVlID09PSAnZnVuY3Rpb24nO1xuICAgICAgaWYgKCFmdW5jdGlvbmFsUmVwbGFjZSkgcmVwbGFjZVZhbHVlID0gU3RyaW5nKHJlcGxhY2VWYWx1ZSk7XG4gICAgICB2YXIgZ2xvYmFsID0gcnguZ2xvYmFsO1xuICAgICAgaWYgKGdsb2JhbCkge1xuICAgICAgICB2YXIgZnVsbFVuaWNvZGUgPSByeC51bmljb2RlO1xuICAgICAgICByeC5sYXN0SW5kZXggPSAwO1xuICAgICAgfVxuICAgICAgdmFyIHJlc3VsdHMgPSBbXTtcbiAgICAgIHdoaWxlICh0cnVlKSB7XG4gICAgICAgIHZhciByZXN1bHQgPSByZWdFeHBFeGVjKHJ4LCBTKTtcbiAgICAgICAgaWYgKHJlc3VsdCA9PT0gbnVsbCkgYnJlYWs7XG4gICAgICAgIHJlc3VsdHMucHVzaChyZXN1bHQpO1xuICAgICAgICBpZiAoIWdsb2JhbCkgYnJlYWs7XG4gICAgICAgIHZhciBtYXRjaFN0ciA9IFN0cmluZyhyZXN1bHRbMF0pO1xuICAgICAgICBpZiAobWF0Y2hTdHIgPT09ICcnKSByeC5sYXN0SW5kZXggPSBhZHZhbmNlU3RyaW5nSW5kZXgoUywgdG9MZW5ndGgocngubGFzdEluZGV4KSwgZnVsbFVuaWNvZGUpO1xuICAgICAgfVxuICAgICAgdmFyIGFjY3VtdWxhdGVkUmVzdWx0ID0gJyc7XG4gICAgICB2YXIgbmV4dFNvdXJjZVBvc2l0aW9uID0gMDtcbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgcmVzdWx0cy5sZW5ndGg7IGkrKykge1xuICAgICAgICByZXN1bHQgPSByZXN1bHRzW2ldO1xuICAgICAgICB2YXIgbWF0Y2hlZCA9IFN0cmluZyhyZXN1bHRbMF0pO1xuICAgICAgICB2YXIgcG9zaXRpb24gPSBtYXgobWluKHRvSW50ZWdlcihyZXN1bHQuaW5kZXgpLCBTLmxlbmd0aCksIDApO1xuICAgICAgICB2YXIgY2FwdHVyZXMgPSBbXTtcbiAgICAgICAgLy8gTk9URTogVGhpcyBpcyBlcXVpdmFsZW50IHRvXG4gICAgICAgIC8vICAgY2FwdHVyZXMgPSByZXN1bHQuc2xpY2UoMSkubWFwKG1heWJlVG9TdHJpbmcpXG4gICAgICAgIC8vIGJ1dCBmb3Igc29tZSByZWFzb24gYG5hdGl2ZVNsaWNlLmNhbGwocmVzdWx0LCAxLCByZXN1bHQubGVuZ3RoKWAgKGNhbGxlZCBpblxuICAgICAgICAvLyB0aGUgc2xpY2UgcG9seWZpbGwgd2hlbiBzbGljaW5nIG5hdGl2ZSBhcnJheXMpIFwiZG9lc24ndCB3b3JrXCIgaW4gc2FmYXJpIDkgYW5kXG4gICAgICAgIC8vIGNhdXNlcyBhIGNyYXNoIChodHRwczovL3Bhc3RlYmluLmNvbS9OMjFRemVRQSkgd2hlbiB0cnlpbmcgdG8gZGVidWcgaXQuXG4gICAgICAgIGZvciAodmFyIGogPSAxOyBqIDwgcmVzdWx0Lmxlbmd0aDsgaisrKSBjYXB0dXJlcy5wdXNoKG1heWJlVG9TdHJpbmcocmVzdWx0W2pdKSk7XG4gICAgICAgIHZhciBuYW1lZENhcHR1cmVzID0gcmVzdWx0Lmdyb3VwcztcbiAgICAgICAgaWYgKGZ1bmN0aW9uYWxSZXBsYWNlKSB7XG4gICAgICAgICAgdmFyIHJlcGxhY2VyQXJncyA9IFttYXRjaGVkXS5jb25jYXQoY2FwdHVyZXMsIHBvc2l0aW9uLCBTKTtcbiAgICAgICAgICBpZiAobmFtZWRDYXB0dXJlcyAhPT0gdW5kZWZpbmVkKSByZXBsYWNlckFyZ3MucHVzaChuYW1lZENhcHR1cmVzKTtcbiAgICAgICAgICB2YXIgcmVwbGFjZW1lbnQgPSBTdHJpbmcocmVwbGFjZVZhbHVlLmFwcGx5KHVuZGVmaW5lZCwgcmVwbGFjZXJBcmdzKSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcmVwbGFjZW1lbnQgPSBnZXRTdWJzdGl0dXRpb24obWF0Y2hlZCwgUywgcG9zaXRpb24sIGNhcHR1cmVzLCBuYW1lZENhcHR1cmVzLCByZXBsYWNlVmFsdWUpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChwb3NpdGlvbiA+PSBuZXh0U291cmNlUG9zaXRpb24pIHtcbiAgICAgICAgICBhY2N1bXVsYXRlZFJlc3VsdCArPSBTLnNsaWNlKG5leHRTb3VyY2VQb3NpdGlvbiwgcG9zaXRpb24pICsgcmVwbGFjZW1lbnQ7XG4gICAgICAgICAgbmV4dFNvdXJjZVBvc2l0aW9uID0gcG9zaXRpb24gKyBtYXRjaGVkLmxlbmd0aDtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIGFjY3VtdWxhdGVkUmVzdWx0ICsgUy5zbGljZShuZXh0U291cmNlUG9zaXRpb24pO1xuICAgIH1cbiAgXTtcblxuICAgIC8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLWdldHN1YnN0aXR1dGlvblxuICBmdW5jdGlvbiBnZXRTdWJzdGl0dXRpb24obWF0Y2hlZCwgc3RyLCBwb3NpdGlvbiwgY2FwdHVyZXMsIG5hbWVkQ2FwdHVyZXMsIHJlcGxhY2VtZW50KSB7XG4gICAgdmFyIHRhaWxQb3MgPSBwb3NpdGlvbiArIG1hdGNoZWQubGVuZ3RoO1xuICAgIHZhciBtID0gY2FwdHVyZXMubGVuZ3RoO1xuICAgIHZhciBzeW1ib2xzID0gU1VCU1RJVFVUSU9OX1NZTUJPTFNfTk9fTkFNRUQ7XG4gICAgaWYgKG5hbWVkQ2FwdHVyZXMgIT09IHVuZGVmaW5lZCkge1xuICAgICAgbmFtZWRDYXB0dXJlcyA9IHRvT2JqZWN0KG5hbWVkQ2FwdHVyZXMpO1xuICAgICAgc3ltYm9scyA9IFNVQlNUSVRVVElPTl9TWU1CT0xTO1xuICAgIH1cbiAgICByZXR1cm4gJHJlcGxhY2UuY2FsbChyZXBsYWNlbWVudCwgc3ltYm9scywgZnVuY3Rpb24gKG1hdGNoLCBjaCkge1xuICAgICAgdmFyIGNhcHR1cmU7XG4gICAgICBzd2l0Y2ggKGNoLmNoYXJBdCgwKSkge1xuICAgICAgICBjYXNlICckJzogcmV0dXJuICckJztcbiAgICAgICAgY2FzZSAnJic6IHJldHVybiBtYXRjaGVkO1xuICAgICAgICBjYXNlICdgJzogcmV0dXJuIHN0ci5zbGljZSgwLCBwb3NpdGlvbik7XG4gICAgICAgIGNhc2UgXCInXCI6IHJldHVybiBzdHIuc2xpY2UodGFpbFBvcyk7XG4gICAgICAgIGNhc2UgJzwnOlxuICAgICAgICAgIGNhcHR1cmUgPSBuYW1lZENhcHR1cmVzW2NoLnNsaWNlKDEsIC0xKV07XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGRlZmF1bHQ6IC8vIFxcZFxcZD9cbiAgICAgICAgICB2YXIgbiA9ICtjaDtcbiAgICAgICAgICBpZiAobiA9PT0gMCkgcmV0dXJuIG1hdGNoO1xuICAgICAgICAgIGlmIChuID4gbSkge1xuICAgICAgICAgICAgdmFyIGYgPSBmbG9vcihuIC8gMTApO1xuICAgICAgICAgICAgaWYgKGYgPT09IDApIHJldHVybiBtYXRjaDtcbiAgICAgICAgICAgIGlmIChmIDw9IG0pIHJldHVybiBjYXB0dXJlc1tmIC0gMV0gPT09IHVuZGVmaW5lZCA/IGNoLmNoYXJBdCgxKSA6IGNhcHR1cmVzW2YgLSAxXSArIGNoLmNoYXJBdCgxKTtcbiAgICAgICAgICAgIHJldHVybiBtYXRjaDtcbiAgICAgICAgICB9XG4gICAgICAgICAgY2FwdHVyZSA9IGNhcHR1cmVzW24gLSAxXTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBjYXB0dXJlID09PSB1bmRlZmluZWQgPyAnJyA6IGNhcHR1cmU7XG4gICAgfSk7XG4gIH1cbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKTtcbnZhciBzYW1lVmFsdWUgPSByZXF1aXJlKCcuL19zYW1lLXZhbHVlJyk7XG52YXIgcmVnRXhwRXhlYyA9IHJlcXVpcmUoJy4vX3JlZ2V4cC1leGVjLWFic3RyYWN0Jyk7XG5cbi8vIEBAc2VhcmNoIGxvZ2ljXG5yZXF1aXJlKCcuL19maXgtcmUtd2tzJykoJ3NlYXJjaCcsIDEsIGZ1bmN0aW9uIChkZWZpbmVkLCBTRUFSQ0gsICRzZWFyY2gsIG1heWJlQ2FsbE5hdGl2ZSkge1xuICByZXR1cm4gW1xuICAgIC8vIGBTdHJpbmcucHJvdG90eXBlLnNlYXJjaGAgbWV0aG9kXG4gICAgLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtc3RyaW5nLnByb3RvdHlwZS5zZWFyY2hcbiAgICBmdW5jdGlvbiBzZWFyY2gocmVnZXhwKSB7XG4gICAgICB2YXIgTyA9IGRlZmluZWQodGhpcyk7XG4gICAgICB2YXIgZm4gPSByZWdleHAgPT0gdW5kZWZpbmVkID8gdW5kZWZpbmVkIDogcmVnZXhwW1NFQVJDSF07XG4gICAgICByZXR1cm4gZm4gIT09IHVuZGVmaW5lZCA/IGZuLmNhbGwocmVnZXhwLCBPKSA6IG5ldyBSZWdFeHAocmVnZXhwKVtTRUFSQ0hdKFN0cmluZyhPKSk7XG4gICAgfSxcbiAgICAvLyBgUmVnRXhwLnByb3RvdHlwZVtAQHNlYXJjaF1gIG1ldGhvZFxuICAgIC8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLXJlZ2V4cC5wcm90b3R5cGUtQEBzZWFyY2hcbiAgICBmdW5jdGlvbiAocmVnZXhwKSB7XG4gICAgICB2YXIgcmVzID0gbWF5YmVDYWxsTmF0aXZlKCRzZWFyY2gsIHJlZ2V4cCwgdGhpcyk7XG4gICAgICBpZiAocmVzLmRvbmUpIHJldHVybiByZXMudmFsdWU7XG4gICAgICB2YXIgcnggPSBhbk9iamVjdChyZWdleHApO1xuICAgICAgdmFyIFMgPSBTdHJpbmcodGhpcyk7XG4gICAgICB2YXIgcHJldmlvdXNMYXN0SW5kZXggPSByeC5sYXN0SW5kZXg7XG4gICAgICBpZiAoIXNhbWVWYWx1ZShwcmV2aW91c0xhc3RJbmRleCwgMCkpIHJ4Lmxhc3RJbmRleCA9IDA7XG4gICAgICB2YXIgcmVzdWx0ID0gcmVnRXhwRXhlYyhyeCwgUyk7XG4gICAgICBpZiAoIXNhbWVWYWx1ZShyeC5sYXN0SW5kZXgsIHByZXZpb3VzTGFzdEluZGV4KSkgcngubGFzdEluZGV4ID0gcHJldmlvdXNMYXN0SW5kZXg7XG4gICAgICByZXR1cm4gcmVzdWx0ID09PSBudWxsID8gLTEgOiByZXN1bHQuaW5kZXg7XG4gICAgfVxuICBdO1xufSk7XG4iLCIvLyA3LjMuMjAgU3BlY2llc0NvbnN0cnVjdG9yKE8sIGRlZmF1bHRDb25zdHJ1Y3RvcilcbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4vX2FuLW9iamVjdCcpO1xudmFyIGFGdW5jdGlvbiA9IHJlcXVpcmUoJy4vX2EtZnVuY3Rpb24nKTtcbnZhciBTUEVDSUVTID0gcmVxdWlyZSgnLi9fd2tzJykoJ3NwZWNpZXMnKTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKE8sIEQpIHtcbiAgdmFyIEMgPSBhbk9iamVjdChPKS5jb25zdHJ1Y3RvcjtcbiAgdmFyIFM7XG4gIHJldHVybiBDID09PSB1bmRlZmluZWQgfHwgKFMgPSBhbk9iamVjdChDKVtTUEVDSUVTXSkgPT0gdW5kZWZpbmVkID8gRCA6IGFGdW5jdGlvbihTKTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciBpc1JlZ0V4cCA9IHJlcXVpcmUoJy4vX2lzLXJlZ2V4cCcpO1xudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi9fYW4tb2JqZWN0Jyk7XG52YXIgc3BlY2llc0NvbnN0cnVjdG9yID0gcmVxdWlyZSgnLi9fc3BlY2llcy1jb25zdHJ1Y3RvcicpO1xudmFyIGFkdmFuY2VTdHJpbmdJbmRleCA9IHJlcXVpcmUoJy4vX2FkdmFuY2Utc3RyaW5nLWluZGV4Jyk7XG52YXIgdG9MZW5ndGggPSByZXF1aXJlKCcuL190by1sZW5ndGgnKTtcbnZhciBjYWxsUmVnRXhwRXhlYyA9IHJlcXVpcmUoJy4vX3JlZ2V4cC1leGVjLWFic3RyYWN0Jyk7XG52YXIgcmVnZXhwRXhlYyA9IHJlcXVpcmUoJy4vX3JlZ2V4cC1leGVjJyk7XG52YXIgZmFpbHMgPSByZXF1aXJlKCcuL19mYWlscycpO1xudmFyICRtaW4gPSBNYXRoLm1pbjtcbnZhciAkcHVzaCA9IFtdLnB1c2g7XG52YXIgJFNQTElUID0gJ3NwbGl0JztcbnZhciBMRU5HVEggPSAnbGVuZ3RoJztcbnZhciBMQVNUX0lOREVYID0gJ2xhc3RJbmRleCc7XG52YXIgTUFYX1VJTlQzMiA9IDB4ZmZmZmZmZmY7XG5cbi8vIGJhYmVsLW1pbmlmeSB0cmFuc3BpbGVzIFJlZ0V4cCgneCcsICd5JykgLT4gL3gveSBhbmQgaXQgY2F1c2VzIFN5bnRheEVycm9yXG52YXIgU1VQUE9SVFNfWSA9ICFmYWlscyhmdW5jdGlvbiAoKSB7IFJlZ0V4cChNQVhfVUlOVDMyLCAneScpOyB9KTtcblxuLy8gQEBzcGxpdCBsb2dpY1xucmVxdWlyZSgnLi9fZml4LXJlLXdrcycpKCdzcGxpdCcsIDIsIGZ1bmN0aW9uIChkZWZpbmVkLCBTUExJVCwgJHNwbGl0LCBtYXliZUNhbGxOYXRpdmUpIHtcbiAgdmFyIGludGVybmFsU3BsaXQ7XG4gIGlmIChcbiAgICAnYWJiYydbJFNQTElUXSgvKGIpKi8pWzFdID09ICdjJyB8fFxuICAgICd0ZXN0J1skU1BMSVRdKC8oPzopLywgLTEpW0xFTkdUSF0gIT0gNCB8fFxuICAgICdhYidbJFNQTElUXSgvKD86YWIpKi8pW0xFTkdUSF0gIT0gMiB8fFxuICAgICcuJ1skU1BMSVRdKC8oLj8pKC4/KS8pW0xFTkdUSF0gIT0gNCB8fFxuICAgICcuJ1skU1BMSVRdKC8oKSgpLylbTEVOR1RIXSA+IDEgfHxcbiAgICAnJ1skU1BMSVRdKC8uPy8pW0xFTkdUSF1cbiAgKSB7XG4gICAgLy8gYmFzZWQgb24gZXM1LXNoaW0gaW1wbGVtZW50YXRpb24sIG5lZWQgdG8gcmV3b3JrIGl0XG4gICAgaW50ZXJuYWxTcGxpdCA9IGZ1bmN0aW9uIChzZXBhcmF0b3IsIGxpbWl0KSB7XG4gICAgICB2YXIgc3RyaW5nID0gU3RyaW5nKHRoaXMpO1xuICAgICAgaWYgKHNlcGFyYXRvciA9PT0gdW5kZWZpbmVkICYmIGxpbWl0ID09PSAwKSByZXR1cm4gW107XG4gICAgICAvLyBJZiBgc2VwYXJhdG9yYCBpcyBub3QgYSByZWdleCwgdXNlIG5hdGl2ZSBzcGxpdFxuICAgICAgaWYgKCFpc1JlZ0V4cChzZXBhcmF0b3IpKSByZXR1cm4gJHNwbGl0LmNhbGwoc3RyaW5nLCBzZXBhcmF0b3IsIGxpbWl0KTtcbiAgICAgIHZhciBvdXRwdXQgPSBbXTtcbiAgICAgIHZhciBmbGFncyA9IChzZXBhcmF0b3IuaWdub3JlQ2FzZSA/ICdpJyA6ICcnKSArXG4gICAgICAgICAgICAgICAgICAoc2VwYXJhdG9yLm11bHRpbGluZSA/ICdtJyA6ICcnKSArXG4gICAgICAgICAgICAgICAgICAoc2VwYXJhdG9yLnVuaWNvZGUgPyAndScgOiAnJykgK1xuICAgICAgICAgICAgICAgICAgKHNlcGFyYXRvci5zdGlja3kgPyAneScgOiAnJyk7XG4gICAgICB2YXIgbGFzdExhc3RJbmRleCA9IDA7XG4gICAgICB2YXIgc3BsaXRMaW1pdCA9IGxpbWl0ID09PSB1bmRlZmluZWQgPyBNQVhfVUlOVDMyIDogbGltaXQgPj4+IDA7XG4gICAgICAvLyBNYWtlIGBnbG9iYWxgIGFuZCBhdm9pZCBgbGFzdEluZGV4YCBpc3N1ZXMgYnkgd29ya2luZyB3aXRoIGEgY29weVxuICAgICAgdmFyIHNlcGFyYXRvckNvcHkgPSBuZXcgUmVnRXhwKHNlcGFyYXRvci5zb3VyY2UsIGZsYWdzICsgJ2cnKTtcbiAgICAgIHZhciBtYXRjaCwgbGFzdEluZGV4LCBsYXN0TGVuZ3RoO1xuICAgICAgd2hpbGUgKG1hdGNoID0gcmVnZXhwRXhlYy5jYWxsKHNlcGFyYXRvckNvcHksIHN0cmluZykpIHtcbiAgICAgICAgbGFzdEluZGV4ID0gc2VwYXJhdG9yQ29weVtMQVNUX0lOREVYXTtcbiAgICAgICAgaWYgKGxhc3RJbmRleCA+IGxhc3RMYXN0SW5kZXgpIHtcbiAgICAgICAgICBvdXRwdXQucHVzaChzdHJpbmcuc2xpY2UobGFzdExhc3RJbmRleCwgbWF0Y2guaW5kZXgpKTtcbiAgICAgICAgICBpZiAobWF0Y2hbTEVOR1RIXSA+IDEgJiYgbWF0Y2guaW5kZXggPCBzdHJpbmdbTEVOR1RIXSkgJHB1c2guYXBwbHkob3V0cHV0LCBtYXRjaC5zbGljZSgxKSk7XG4gICAgICAgICAgbGFzdExlbmd0aCA9IG1hdGNoWzBdW0xFTkdUSF07XG4gICAgICAgICAgbGFzdExhc3RJbmRleCA9IGxhc3RJbmRleDtcbiAgICAgICAgICBpZiAob3V0cHV0W0xFTkdUSF0gPj0gc3BsaXRMaW1pdCkgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHNlcGFyYXRvckNvcHlbTEFTVF9JTkRFWF0gPT09IG1hdGNoLmluZGV4KSBzZXBhcmF0b3JDb3B5W0xBU1RfSU5ERVhdKys7IC8vIEF2b2lkIGFuIGluZmluaXRlIGxvb3BcbiAgICAgIH1cbiAgICAgIGlmIChsYXN0TGFzdEluZGV4ID09PSBzdHJpbmdbTEVOR1RIXSkge1xuICAgICAgICBpZiAobGFzdExlbmd0aCB8fCAhc2VwYXJhdG9yQ29weS50ZXN0KCcnKSkgb3V0cHV0LnB1c2goJycpO1xuICAgICAgfSBlbHNlIG91dHB1dC5wdXNoKHN0cmluZy5zbGljZShsYXN0TGFzdEluZGV4KSk7XG4gICAgICByZXR1cm4gb3V0cHV0W0xFTkdUSF0gPiBzcGxpdExpbWl0ID8gb3V0cHV0LnNsaWNlKDAsIHNwbGl0TGltaXQpIDogb3V0cHV0O1xuICAgIH07XG4gIC8vIENoYWtyYSwgVjhcbiAgfSBlbHNlIGlmICgnMCdbJFNQTElUXSh1bmRlZmluZWQsIDApW0xFTkdUSF0pIHtcbiAgICBpbnRlcm5hbFNwbGl0ID0gZnVuY3Rpb24gKHNlcGFyYXRvciwgbGltaXQpIHtcbiAgICAgIHJldHVybiBzZXBhcmF0b3IgPT09IHVuZGVmaW5lZCAmJiBsaW1pdCA9PT0gMCA/IFtdIDogJHNwbGl0LmNhbGwodGhpcywgc2VwYXJhdG9yLCBsaW1pdCk7XG4gICAgfTtcbiAgfSBlbHNlIHtcbiAgICBpbnRlcm5hbFNwbGl0ID0gJHNwbGl0O1xuICB9XG5cbiAgcmV0dXJuIFtcbiAgICAvLyBgU3RyaW5nLnByb3RvdHlwZS5zcGxpdGAgbWV0aG9kXG4gICAgLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtc3RyaW5nLnByb3RvdHlwZS5zcGxpdFxuICAgIGZ1bmN0aW9uIHNwbGl0KHNlcGFyYXRvciwgbGltaXQpIHtcbiAgICAgIHZhciBPID0gZGVmaW5lZCh0aGlzKTtcbiAgICAgIHZhciBzcGxpdHRlciA9IHNlcGFyYXRvciA9PSB1bmRlZmluZWQgPyB1bmRlZmluZWQgOiBzZXBhcmF0b3JbU1BMSVRdO1xuICAgICAgcmV0dXJuIHNwbGl0dGVyICE9PSB1bmRlZmluZWRcbiAgICAgICAgPyBzcGxpdHRlci5jYWxsKHNlcGFyYXRvciwgTywgbGltaXQpXG4gICAgICAgIDogaW50ZXJuYWxTcGxpdC5jYWxsKFN0cmluZyhPKSwgc2VwYXJhdG9yLCBsaW1pdCk7XG4gICAgfSxcbiAgICAvLyBgUmVnRXhwLnByb3RvdHlwZVtAQHNwbGl0XWAgbWV0aG9kXG4gICAgLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtcmVnZXhwLnByb3RvdHlwZS1AQHNwbGl0XG4gICAgLy9cbiAgICAvLyBOT1RFOiBUaGlzIGNhbm5vdCBiZSBwcm9wZXJseSBwb2x5ZmlsbGVkIGluIGVuZ2luZXMgdGhhdCBkb24ndCBzdXBwb3J0XG4gICAgLy8gdGhlICd5JyBmbGFnLlxuICAgIGZ1bmN0aW9uIChyZWdleHAsIGxpbWl0KSB7XG4gICAgICB2YXIgcmVzID0gbWF5YmVDYWxsTmF0aXZlKGludGVybmFsU3BsaXQsIHJlZ2V4cCwgdGhpcywgbGltaXQsIGludGVybmFsU3BsaXQgIT09ICRzcGxpdCk7XG4gICAgICBpZiAocmVzLmRvbmUpIHJldHVybiByZXMudmFsdWU7XG5cbiAgICAgIHZhciByeCA9IGFuT2JqZWN0KHJlZ2V4cCk7XG4gICAgICB2YXIgUyA9IFN0cmluZyh0aGlzKTtcbiAgICAgIHZhciBDID0gc3BlY2llc0NvbnN0cnVjdG9yKHJ4LCBSZWdFeHApO1xuXG4gICAgICB2YXIgdW5pY29kZU1hdGNoaW5nID0gcngudW5pY29kZTtcbiAgICAgIHZhciBmbGFncyA9IChyeC5pZ25vcmVDYXNlID8gJ2knIDogJycpICtcbiAgICAgICAgICAgICAgICAgIChyeC5tdWx0aWxpbmUgPyAnbScgOiAnJykgK1xuICAgICAgICAgICAgICAgICAgKHJ4LnVuaWNvZGUgPyAndScgOiAnJykgK1xuICAgICAgICAgICAgICAgICAgKFNVUFBPUlRTX1kgPyAneScgOiAnZycpO1xuXG4gICAgICAvLyBeKD8gKyByeCArICkgaXMgbmVlZGVkLCBpbiBjb21iaW5hdGlvbiB3aXRoIHNvbWUgUyBzbGljaW5nLCB0b1xuICAgICAgLy8gc2ltdWxhdGUgdGhlICd5JyBmbGFnLlxuICAgICAgdmFyIHNwbGl0dGVyID0gbmV3IEMoU1VQUE9SVFNfWSA/IHJ4IDogJ14oPzonICsgcnguc291cmNlICsgJyknLCBmbGFncyk7XG4gICAgICB2YXIgbGltID0gbGltaXQgPT09IHVuZGVmaW5lZCA/IE1BWF9VSU5UMzIgOiBsaW1pdCA+Pj4gMDtcbiAgICAgIGlmIChsaW0gPT09IDApIHJldHVybiBbXTtcbiAgICAgIGlmIChTLmxlbmd0aCA9PT0gMCkgcmV0dXJuIGNhbGxSZWdFeHBFeGVjKHNwbGl0dGVyLCBTKSA9PT0gbnVsbCA/IFtTXSA6IFtdO1xuICAgICAgdmFyIHAgPSAwO1xuICAgICAgdmFyIHEgPSAwO1xuICAgICAgdmFyIEEgPSBbXTtcbiAgICAgIHdoaWxlIChxIDwgUy5sZW5ndGgpIHtcbiAgICAgICAgc3BsaXR0ZXIubGFzdEluZGV4ID0gU1VQUE9SVFNfWSA/IHEgOiAwO1xuICAgICAgICB2YXIgeiA9IGNhbGxSZWdFeHBFeGVjKHNwbGl0dGVyLCBTVVBQT1JUU19ZID8gUyA6IFMuc2xpY2UocSkpO1xuICAgICAgICB2YXIgZTtcbiAgICAgICAgaWYgKFxuICAgICAgICAgIHogPT09IG51bGwgfHxcbiAgICAgICAgICAoZSA9ICRtaW4odG9MZW5ndGgoc3BsaXR0ZXIubGFzdEluZGV4ICsgKFNVUFBPUlRTX1kgPyAwIDogcSkpLCBTLmxlbmd0aCkpID09PSBwXG4gICAgICAgICkge1xuICAgICAgICAgIHEgPSBhZHZhbmNlU3RyaW5nSW5kZXgoUywgcSwgdW5pY29kZU1hdGNoaW5nKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBBLnB1c2goUy5zbGljZShwLCBxKSk7XG4gICAgICAgICAgaWYgKEEubGVuZ3RoID09PSBsaW0pIHJldHVybiBBO1xuICAgICAgICAgIGZvciAodmFyIGkgPSAxOyBpIDw9IHoubGVuZ3RoIC0gMTsgaSsrKSB7XG4gICAgICAgICAgICBBLnB1c2goeltpXSk7XG4gICAgICAgICAgICBpZiAoQS5sZW5ndGggPT09IGxpbSkgcmV0dXJuIEE7XG4gICAgICAgICAgfVxuICAgICAgICAgIHEgPSBwID0gZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgQS5wdXNoKFMuc2xpY2UocCkpO1xuICAgICAgcmV0dXJuIEE7XG4gICAgfVxuICBdO1xufSk7XG4iLCJtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCwgQ29uc3RydWN0b3IsIG5hbWUsIGZvcmJpZGRlbkZpZWxkKSB7XG4gIGlmICghKGl0IGluc3RhbmNlb2YgQ29uc3RydWN0b3IpIHx8IChmb3JiaWRkZW5GaWVsZCAhPT0gdW5kZWZpbmVkICYmIGZvcmJpZGRlbkZpZWxkIGluIGl0KSkge1xuICAgIHRocm93IFR5cGVFcnJvcihuYW1lICsgJzogaW5jb3JyZWN0IGludm9jYXRpb24hJyk7XG4gIH0gcmV0dXJuIGl0O1xufTtcbiIsInZhciBjdHggPSByZXF1aXJlKCcuL19jdHgnKTtcbnZhciBjYWxsID0gcmVxdWlyZSgnLi9faXRlci1jYWxsJyk7XG52YXIgaXNBcnJheUl0ZXIgPSByZXF1aXJlKCcuL19pcy1hcnJheS1pdGVyJyk7XG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKTtcbnZhciB0b0xlbmd0aCA9IHJlcXVpcmUoJy4vX3RvLWxlbmd0aCcpO1xudmFyIGdldEl0ZXJGbiA9IHJlcXVpcmUoJy4vY29yZS5nZXQtaXRlcmF0b3ItbWV0aG9kJyk7XG52YXIgQlJFQUsgPSB7fTtcbnZhciBSRVRVUk4gPSB7fTtcbnZhciBleHBvcnRzID0gbW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXRlcmFibGUsIGVudHJpZXMsIGZuLCB0aGF0LCBJVEVSQVRPUikge1xuICB2YXIgaXRlckZuID0gSVRFUkFUT1IgPyBmdW5jdGlvbiAoKSB7IHJldHVybiBpdGVyYWJsZTsgfSA6IGdldEl0ZXJGbihpdGVyYWJsZSk7XG4gIHZhciBmID0gY3R4KGZuLCB0aGF0LCBlbnRyaWVzID8gMiA6IDEpO1xuICB2YXIgaW5kZXggPSAwO1xuICB2YXIgbGVuZ3RoLCBzdGVwLCBpdGVyYXRvciwgcmVzdWx0O1xuICBpZiAodHlwZW9mIGl0ZXJGbiAhPSAnZnVuY3Rpb24nKSB0aHJvdyBUeXBlRXJyb3IoaXRlcmFibGUgKyAnIGlzIG5vdCBpdGVyYWJsZSEnKTtcbiAgLy8gZmFzdCBjYXNlIGZvciBhcnJheXMgd2l0aCBkZWZhdWx0IGl0ZXJhdG9yXG4gIGlmIChpc0FycmF5SXRlcihpdGVyRm4pKSBmb3IgKGxlbmd0aCA9IHRvTGVuZ3RoKGl0ZXJhYmxlLmxlbmd0aCk7IGxlbmd0aCA+IGluZGV4OyBpbmRleCsrKSB7XG4gICAgcmVzdWx0ID0gZW50cmllcyA/IGYoYW5PYmplY3Qoc3RlcCA9IGl0ZXJhYmxlW2luZGV4XSlbMF0sIHN0ZXBbMV0pIDogZihpdGVyYWJsZVtpbmRleF0pO1xuICAgIGlmIChyZXN1bHQgPT09IEJSRUFLIHx8IHJlc3VsdCA9PT0gUkVUVVJOKSByZXR1cm4gcmVzdWx0O1xuICB9IGVsc2UgZm9yIChpdGVyYXRvciA9IGl0ZXJGbi5jYWxsKGl0ZXJhYmxlKTsgIShzdGVwID0gaXRlcmF0b3IubmV4dCgpKS5kb25lOykge1xuICAgIHJlc3VsdCA9IGNhbGwoaXRlcmF0b3IsIGYsIHN0ZXAudmFsdWUsIGVudHJpZXMpO1xuICAgIGlmIChyZXN1bHQgPT09IEJSRUFLIHx8IHJlc3VsdCA9PT0gUkVUVVJOKSByZXR1cm4gcmVzdWx0O1xuICB9XG59O1xuZXhwb3J0cy5CUkVBSyA9IEJSRUFLO1xuZXhwb3J0cy5SRVRVUk4gPSBSRVRVUk47XG4iLCJ2YXIgY3R4ID0gcmVxdWlyZSgnLi9fY3R4Jyk7XG52YXIgaW52b2tlID0gcmVxdWlyZSgnLi9faW52b2tlJyk7XG52YXIgaHRtbCA9IHJlcXVpcmUoJy4vX2h0bWwnKTtcbnZhciBjZWwgPSByZXF1aXJlKCcuL19kb20tY3JlYXRlJyk7XG52YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi9fZ2xvYmFsJyk7XG52YXIgcHJvY2VzcyA9IGdsb2JhbC5wcm9jZXNzO1xudmFyIHNldFRhc2sgPSBnbG9iYWwuc2V0SW1tZWRpYXRlO1xudmFyIGNsZWFyVGFzayA9IGdsb2JhbC5jbGVhckltbWVkaWF0ZTtcbnZhciBNZXNzYWdlQ2hhbm5lbCA9IGdsb2JhbC5NZXNzYWdlQ2hhbm5lbDtcbnZhciBEaXNwYXRjaCA9IGdsb2JhbC5EaXNwYXRjaDtcbnZhciBjb3VudGVyID0gMDtcbnZhciBxdWV1ZSA9IHt9O1xudmFyIE9OUkVBRFlTVEFURUNIQU5HRSA9ICdvbnJlYWR5c3RhdGVjaGFuZ2UnO1xudmFyIGRlZmVyLCBjaGFubmVsLCBwb3J0O1xudmFyIHJ1biA9IGZ1bmN0aW9uICgpIHtcbiAgdmFyIGlkID0gK3RoaXM7XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1wcm90b3R5cGUtYnVpbHRpbnNcbiAgaWYgKHF1ZXVlLmhhc093blByb3BlcnR5KGlkKSkge1xuICAgIHZhciBmbiA9IHF1ZXVlW2lkXTtcbiAgICBkZWxldGUgcXVldWVbaWRdO1xuICAgIGZuKCk7XG4gIH1cbn07XG52YXIgbGlzdGVuZXIgPSBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgcnVuLmNhbGwoZXZlbnQuZGF0YSk7XG59O1xuLy8gTm9kZS5qcyAwLjkrICYgSUUxMCsgaGFzIHNldEltbWVkaWF0ZSwgb3RoZXJ3aXNlOlxuaWYgKCFzZXRUYXNrIHx8ICFjbGVhclRhc2spIHtcbiAgc2V0VGFzayA9IGZ1bmN0aW9uIHNldEltbWVkaWF0ZShmbikge1xuICAgIHZhciBhcmdzID0gW107XG4gICAgdmFyIGkgPSAxO1xuICAgIHdoaWxlIChhcmd1bWVudHMubGVuZ3RoID4gaSkgYXJncy5wdXNoKGFyZ3VtZW50c1tpKytdKTtcbiAgICBxdWV1ZVsrK2NvdW50ZXJdID0gZnVuY3Rpb24gKCkge1xuICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLW5ldy1mdW5jXG4gICAgICBpbnZva2UodHlwZW9mIGZuID09ICdmdW5jdGlvbicgPyBmbiA6IEZ1bmN0aW9uKGZuKSwgYXJncyk7XG4gICAgfTtcbiAgICBkZWZlcihjb3VudGVyKTtcbiAgICByZXR1cm4gY291bnRlcjtcbiAgfTtcbiAgY2xlYXJUYXNrID0gZnVuY3Rpb24gY2xlYXJJbW1lZGlhdGUoaWQpIHtcbiAgICBkZWxldGUgcXVldWVbaWRdO1xuICB9O1xuICAvLyBOb2RlLmpzIDAuOC1cbiAgaWYgKHJlcXVpcmUoJy4vX2NvZicpKHByb2Nlc3MpID09ICdwcm9jZXNzJykge1xuICAgIGRlZmVyID0gZnVuY3Rpb24gKGlkKSB7XG4gICAgICBwcm9jZXNzLm5leHRUaWNrKGN0eChydW4sIGlkLCAxKSk7XG4gICAgfTtcbiAgLy8gU3BoZXJlIChKUyBnYW1lIGVuZ2luZSkgRGlzcGF0Y2ggQVBJXG4gIH0gZWxzZSBpZiAoRGlzcGF0Y2ggJiYgRGlzcGF0Y2gubm93KSB7XG4gICAgZGVmZXIgPSBmdW5jdGlvbiAoaWQpIHtcbiAgICAgIERpc3BhdGNoLm5vdyhjdHgocnVuLCBpZCwgMSkpO1xuICAgIH07XG4gIC8vIEJyb3dzZXJzIHdpdGggTWVzc2FnZUNoYW5uZWwsIGluY2x1ZGVzIFdlYldvcmtlcnNcbiAgfSBlbHNlIGlmIChNZXNzYWdlQ2hhbm5lbCkge1xuICAgIGNoYW5uZWwgPSBuZXcgTWVzc2FnZUNoYW5uZWwoKTtcbiAgICBwb3J0ID0gY2hhbm5lbC5wb3J0MjtcbiAgICBjaGFubmVsLnBvcnQxLm9ubWVzc2FnZSA9IGxpc3RlbmVyO1xuICAgIGRlZmVyID0gY3R4KHBvcnQucG9zdE1lc3NhZ2UsIHBvcnQsIDEpO1xuICAvLyBCcm93c2VycyB3aXRoIHBvc3RNZXNzYWdlLCBza2lwIFdlYldvcmtlcnNcbiAgLy8gSUU4IGhhcyBwb3N0TWVzc2FnZSwgYnV0IGl0J3Mgc3luYyAmIHR5cGVvZiBpdHMgcG9zdE1lc3NhZ2UgaXMgJ29iamVjdCdcbiAgfSBlbHNlIGlmIChnbG9iYWwuYWRkRXZlbnRMaXN0ZW5lciAmJiB0eXBlb2YgcG9zdE1lc3NhZ2UgPT0gJ2Z1bmN0aW9uJyAmJiAhZ2xvYmFsLmltcG9ydFNjcmlwdHMpIHtcbiAgICBkZWZlciA9IGZ1bmN0aW9uIChpZCkge1xuICAgICAgZ2xvYmFsLnBvc3RNZXNzYWdlKGlkICsgJycsICcqJyk7XG4gICAgfTtcbiAgICBnbG9iYWwuYWRkRXZlbnRMaXN0ZW5lcignbWVzc2FnZScsIGxpc3RlbmVyLCBmYWxzZSk7XG4gIC8vIElFOC1cbiAgfSBlbHNlIGlmIChPTlJFQURZU1RBVEVDSEFOR0UgaW4gY2VsKCdzY3JpcHQnKSkge1xuICAgIGRlZmVyID0gZnVuY3Rpb24gKGlkKSB7XG4gICAgICBodG1sLmFwcGVuZENoaWxkKGNlbCgnc2NyaXB0JykpW09OUkVBRFlTVEFURUNIQU5HRV0gPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGh0bWwucmVtb3ZlQ2hpbGQodGhpcyk7XG4gICAgICAgIHJ1bi5jYWxsKGlkKTtcbiAgICAgIH07XG4gICAgfTtcbiAgLy8gUmVzdCBvbGQgYnJvd3NlcnNcbiAgfSBlbHNlIHtcbiAgICBkZWZlciA9IGZ1bmN0aW9uIChpZCkge1xuICAgICAgc2V0VGltZW91dChjdHgocnVuLCBpZCwgMSksIDApO1xuICAgIH07XG4gIH1cbn1cbm1vZHVsZS5leHBvcnRzID0ge1xuICBzZXQ6IHNldFRhc2ssXG4gIGNsZWFyOiBjbGVhclRhc2tcbn07XG4iLCJ2YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi9fZ2xvYmFsJyk7XG52YXIgbWFjcm90YXNrID0gcmVxdWlyZSgnLi9fdGFzaycpLnNldDtcbnZhciBPYnNlcnZlciA9IGdsb2JhbC5NdXRhdGlvbk9ic2VydmVyIHx8IGdsb2JhbC5XZWJLaXRNdXRhdGlvbk9ic2VydmVyO1xudmFyIHByb2Nlc3MgPSBnbG9iYWwucHJvY2VzcztcbnZhciBQcm9taXNlID0gZ2xvYmFsLlByb21pc2U7XG52YXIgaXNOb2RlID0gcmVxdWlyZSgnLi9fY29mJykocHJvY2VzcykgPT0gJ3Byb2Nlc3MnO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uICgpIHtcbiAgdmFyIGhlYWQsIGxhc3QsIG5vdGlmeTtcblxuICB2YXIgZmx1c2ggPSBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIHBhcmVudCwgZm47XG4gICAgaWYgKGlzTm9kZSAmJiAocGFyZW50ID0gcHJvY2Vzcy5kb21haW4pKSBwYXJlbnQuZXhpdCgpO1xuICAgIHdoaWxlIChoZWFkKSB7XG4gICAgICBmbiA9IGhlYWQuZm47XG4gICAgICBoZWFkID0gaGVhZC5uZXh0O1xuICAgICAgdHJ5IHtcbiAgICAgICAgZm4oKTtcbiAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgaWYgKGhlYWQpIG5vdGlmeSgpO1xuICAgICAgICBlbHNlIGxhc3QgPSB1bmRlZmluZWQ7XG4gICAgICAgIHRocm93IGU7XG4gICAgICB9XG4gICAgfSBsYXN0ID0gdW5kZWZpbmVkO1xuICAgIGlmIChwYXJlbnQpIHBhcmVudC5lbnRlcigpO1xuICB9O1xuXG4gIC8vIE5vZGUuanNcbiAgaWYgKGlzTm9kZSkge1xuICAgIG5vdGlmeSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIHByb2Nlc3MubmV4dFRpY2soZmx1c2gpO1xuICAgIH07XG4gIC8vIGJyb3dzZXJzIHdpdGggTXV0YXRpb25PYnNlcnZlciwgZXhjZXB0IGlPUyBTYWZhcmkgLSBodHRwczovL2dpdGh1Yi5jb20vemxvaXJvY2svY29yZS1qcy9pc3N1ZXMvMzM5XG4gIH0gZWxzZSBpZiAoT2JzZXJ2ZXIgJiYgIShnbG9iYWwubmF2aWdhdG9yICYmIGdsb2JhbC5uYXZpZ2F0b3Iuc3RhbmRhbG9uZSkpIHtcbiAgICB2YXIgdG9nZ2xlID0gdHJ1ZTtcbiAgICB2YXIgbm9kZSA9IGRvY3VtZW50LmNyZWF0ZVRleHROb2RlKCcnKTtcbiAgICBuZXcgT2JzZXJ2ZXIoZmx1c2gpLm9ic2VydmUobm9kZSwgeyBjaGFyYWN0ZXJEYXRhOiB0cnVlIH0pOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLW5ld1xuICAgIG5vdGlmeSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIG5vZGUuZGF0YSA9IHRvZ2dsZSA9ICF0b2dnbGU7XG4gICAgfTtcbiAgLy8gZW52aXJvbm1lbnRzIHdpdGggbWF5YmUgbm9uLWNvbXBsZXRlbHkgY29ycmVjdCwgYnV0IGV4aXN0ZW50IFByb21pc2VcbiAgfSBlbHNlIGlmIChQcm9taXNlICYmIFByb21pc2UucmVzb2x2ZSkge1xuICAgIC8vIFByb21pc2UucmVzb2x2ZSB3aXRob3V0IGFuIGFyZ3VtZW50IHRocm93cyBhbiBlcnJvciBpbiBMRyBXZWJPUyAyXG4gICAgdmFyIHByb21pc2UgPSBQcm9taXNlLnJlc29sdmUodW5kZWZpbmVkKTtcbiAgICBub3RpZnkgPSBmdW5jdGlvbiAoKSB7XG4gICAgICBwcm9taXNlLnRoZW4oZmx1c2gpO1xuICAgIH07XG4gIC8vIGZvciBvdGhlciBlbnZpcm9ubWVudHMgLSBtYWNyb3Rhc2sgYmFzZWQgb246XG4gIC8vIC0gc2V0SW1tZWRpYXRlXG4gIC8vIC0gTWVzc2FnZUNoYW5uZWxcbiAgLy8gLSB3aW5kb3cucG9zdE1lc3NhZ1xuICAvLyAtIG9ucmVhZHlzdGF0ZWNoYW5nZVxuICAvLyAtIHNldFRpbWVvdXRcbiAgfSBlbHNlIHtcbiAgICBub3RpZnkgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAvLyBzdHJhbmdlIElFICsgd2VicGFjayBkZXYgc2VydmVyIGJ1ZyAtIHVzZSAuY2FsbChnbG9iYWwpXG4gICAgICBtYWNyb3Rhc2suY2FsbChnbG9iYWwsIGZsdXNoKTtcbiAgICB9O1xuICB9XG5cbiAgcmV0dXJuIGZ1bmN0aW9uIChmbikge1xuICAgIHZhciB0YXNrID0geyBmbjogZm4sIG5leHQ6IHVuZGVmaW5lZCB9O1xuICAgIGlmIChsYXN0KSBsYXN0Lm5leHQgPSB0YXNrO1xuICAgIGlmICghaGVhZCkge1xuICAgICAgaGVhZCA9IHRhc2s7XG4gICAgICBub3RpZnkoKTtcbiAgICB9IGxhc3QgPSB0YXNrO1xuICB9O1xufTtcbiIsIid1c2Ugc3RyaWN0Jztcbi8vIDI1LjQuMS41IE5ld1Byb21pc2VDYXBhYmlsaXR5KEMpXG52YXIgYUZ1bmN0aW9uID0gcmVxdWlyZSgnLi9fYS1mdW5jdGlvbicpO1xuXG5mdW5jdGlvbiBQcm9taXNlQ2FwYWJpbGl0eShDKSB7XG4gIHZhciByZXNvbHZlLCByZWplY3Q7XG4gIHRoaXMucHJvbWlzZSA9IG5ldyBDKGZ1bmN0aW9uICgkJHJlc29sdmUsICQkcmVqZWN0KSB7XG4gICAgaWYgKHJlc29sdmUgIT09IHVuZGVmaW5lZCB8fCByZWplY3QgIT09IHVuZGVmaW5lZCkgdGhyb3cgVHlwZUVycm9yKCdCYWQgUHJvbWlzZSBjb25zdHJ1Y3RvcicpO1xuICAgIHJlc29sdmUgPSAkJHJlc29sdmU7XG4gICAgcmVqZWN0ID0gJCRyZWplY3Q7XG4gIH0pO1xuICB0aGlzLnJlc29sdmUgPSBhRnVuY3Rpb24ocmVzb2x2ZSk7XG4gIHRoaXMucmVqZWN0ID0gYUZ1bmN0aW9uKHJlamVjdCk7XG59XG5cbm1vZHVsZS5leHBvcnRzLmYgPSBmdW5jdGlvbiAoQykge1xuICByZXR1cm4gbmV3IFByb21pc2VDYXBhYmlsaXR5KEMpO1xufTtcbiIsIm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGV4ZWMpIHtcbiAgdHJ5IHtcbiAgICByZXR1cm4geyBlOiBmYWxzZSwgdjogZXhlYygpIH07XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICByZXR1cm4geyBlOiB0cnVlLCB2OiBlIH07XG4gIH1cbn07XG4iLCJ2YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi9fZ2xvYmFsJyk7XG52YXIgbmF2aWdhdG9yID0gZ2xvYmFsLm5hdmlnYXRvcjtcblxubW9kdWxlLmV4cG9ydHMgPSBuYXZpZ2F0b3IgJiYgbmF2aWdhdG9yLnVzZXJBZ2VudCB8fCAnJztcbiIsInZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4vX2FuLW9iamVjdCcpO1xudmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi9faXMtb2JqZWN0Jyk7XG52YXIgbmV3UHJvbWlzZUNhcGFiaWxpdHkgPSByZXF1aXJlKCcuL19uZXctcHJvbWlzZS1jYXBhYmlsaXR5Jyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKEMsIHgpIHtcbiAgYW5PYmplY3QoQyk7XG4gIGlmIChpc09iamVjdCh4KSAmJiB4LmNvbnN0cnVjdG9yID09PSBDKSByZXR1cm4geDtcbiAgdmFyIHByb21pc2VDYXBhYmlsaXR5ID0gbmV3UHJvbWlzZUNhcGFiaWxpdHkuZihDKTtcbiAgdmFyIHJlc29sdmUgPSBwcm9taXNlQ2FwYWJpbGl0eS5yZXNvbHZlO1xuICByZXNvbHZlKHgpO1xuICByZXR1cm4gcHJvbWlzZUNhcGFiaWxpdHkucHJvbWlzZTtcbn07XG4iLCJ2YXIgcmVkZWZpbmUgPSByZXF1aXJlKCcuL19yZWRlZmluZScpO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAodGFyZ2V0LCBzcmMsIHNhZmUpIHtcbiAgZm9yICh2YXIga2V5IGluIHNyYykgcmVkZWZpbmUodGFyZ2V0LCBrZXksIHNyY1trZXldLCBzYWZlKTtcbiAgcmV0dXJuIHRhcmdldDtcbn07XG4iLCIndXNlIHN0cmljdCc7XG52YXIgTElCUkFSWSA9IHJlcXVpcmUoJy4vX2xpYnJhcnknKTtcbnZhciBnbG9iYWwgPSByZXF1aXJlKCcuL19nbG9iYWwnKTtcbnZhciBjdHggPSByZXF1aXJlKCcuL19jdHgnKTtcbnZhciBjbGFzc29mID0gcmVxdWlyZSgnLi9fY2xhc3NvZicpO1xudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4vX2lzLW9iamVjdCcpO1xudmFyIGFGdW5jdGlvbiA9IHJlcXVpcmUoJy4vX2EtZnVuY3Rpb24nKTtcbnZhciBhbkluc3RhbmNlID0gcmVxdWlyZSgnLi9fYW4taW5zdGFuY2UnKTtcbnZhciBmb3JPZiA9IHJlcXVpcmUoJy4vX2Zvci1vZicpO1xudmFyIHNwZWNpZXNDb25zdHJ1Y3RvciA9IHJlcXVpcmUoJy4vX3NwZWNpZXMtY29uc3RydWN0b3InKTtcbnZhciB0YXNrID0gcmVxdWlyZSgnLi9fdGFzaycpLnNldDtcbnZhciBtaWNyb3Rhc2sgPSByZXF1aXJlKCcuL19taWNyb3Rhc2snKSgpO1xudmFyIG5ld1Byb21pc2VDYXBhYmlsaXR5TW9kdWxlID0gcmVxdWlyZSgnLi9fbmV3LXByb21pc2UtY2FwYWJpbGl0eScpO1xudmFyIHBlcmZvcm0gPSByZXF1aXJlKCcuL19wZXJmb3JtJyk7XG52YXIgdXNlckFnZW50ID0gcmVxdWlyZSgnLi9fdXNlci1hZ2VudCcpO1xudmFyIHByb21pc2VSZXNvbHZlID0gcmVxdWlyZSgnLi9fcHJvbWlzZS1yZXNvbHZlJyk7XG52YXIgUFJPTUlTRSA9ICdQcm9taXNlJztcbnZhciBUeXBlRXJyb3IgPSBnbG9iYWwuVHlwZUVycm9yO1xudmFyIHByb2Nlc3MgPSBnbG9iYWwucHJvY2VzcztcbnZhciB2ZXJzaW9ucyA9IHByb2Nlc3MgJiYgcHJvY2Vzcy52ZXJzaW9ucztcbnZhciB2OCA9IHZlcnNpb25zICYmIHZlcnNpb25zLnY4IHx8ICcnO1xudmFyICRQcm9taXNlID0gZ2xvYmFsW1BST01JU0VdO1xudmFyIGlzTm9kZSA9IGNsYXNzb2YocHJvY2VzcykgPT0gJ3Byb2Nlc3MnO1xudmFyIGVtcHR5ID0gZnVuY3Rpb24gKCkgeyAvKiBlbXB0eSAqLyB9O1xudmFyIEludGVybmFsLCBuZXdHZW5lcmljUHJvbWlzZUNhcGFiaWxpdHksIE93blByb21pc2VDYXBhYmlsaXR5LCBXcmFwcGVyO1xudmFyIG5ld1Byb21pc2VDYXBhYmlsaXR5ID0gbmV3R2VuZXJpY1Byb21pc2VDYXBhYmlsaXR5ID0gbmV3UHJvbWlzZUNhcGFiaWxpdHlNb2R1bGUuZjtcblxudmFyIFVTRV9OQVRJVkUgPSAhIWZ1bmN0aW9uICgpIHtcbiAgdHJ5IHtcbiAgICAvLyBjb3JyZWN0IHN1YmNsYXNzaW5nIHdpdGggQEBzcGVjaWVzIHN1cHBvcnRcbiAgICB2YXIgcHJvbWlzZSA9ICRQcm9taXNlLnJlc29sdmUoMSk7XG4gICAgdmFyIEZha2VQcm9taXNlID0gKHByb21pc2UuY29uc3RydWN0b3IgPSB7fSlbcmVxdWlyZSgnLi9fd2tzJykoJ3NwZWNpZXMnKV0gPSBmdW5jdGlvbiAoZXhlYykge1xuICAgICAgZXhlYyhlbXB0eSwgZW1wdHkpO1xuICAgIH07XG4gICAgLy8gdW5oYW5kbGVkIHJlamVjdGlvbnMgdHJhY2tpbmcgc3VwcG9ydCwgTm9kZUpTIFByb21pc2Ugd2l0aG91dCBpdCBmYWlscyBAQHNwZWNpZXMgdGVzdFxuICAgIHJldHVybiAoaXNOb2RlIHx8IHR5cGVvZiBQcm9taXNlUmVqZWN0aW9uRXZlbnQgPT0gJ2Z1bmN0aW9uJylcbiAgICAgICYmIHByb21pc2UudGhlbihlbXB0eSkgaW5zdGFuY2VvZiBGYWtlUHJvbWlzZVxuICAgICAgLy8gdjggNi42IChOb2RlIDEwIGFuZCBDaHJvbWUgNjYpIGhhdmUgYSBidWcgd2l0aCByZXNvbHZpbmcgY3VzdG9tIHRoZW5hYmxlc1xuICAgICAgLy8gaHR0cHM6Ly9idWdzLmNocm9taXVtLm9yZy9wL2Nocm9taXVtL2lzc3Vlcy9kZXRhaWw/aWQ9ODMwNTY1XG4gICAgICAvLyB3ZSBjYW4ndCBkZXRlY3QgaXQgc3luY2hyb25vdXNseSwgc28ganVzdCBjaGVjayB2ZXJzaW9uc1xuICAgICAgJiYgdjguaW5kZXhPZignNi42JykgIT09IDBcbiAgICAgICYmIHVzZXJBZ2VudC5pbmRleE9mKCdDaHJvbWUvNjYnKSA9PT0gLTE7XG4gIH0gY2F0Y2ggKGUpIHsgLyogZW1wdHkgKi8gfVxufSgpO1xuXG4vLyBoZWxwZXJzXG52YXIgaXNUaGVuYWJsZSA9IGZ1bmN0aW9uIChpdCkge1xuICB2YXIgdGhlbjtcbiAgcmV0dXJuIGlzT2JqZWN0KGl0KSAmJiB0eXBlb2YgKHRoZW4gPSBpdC50aGVuKSA9PSAnZnVuY3Rpb24nID8gdGhlbiA6IGZhbHNlO1xufTtcbnZhciBub3RpZnkgPSBmdW5jdGlvbiAocHJvbWlzZSwgaXNSZWplY3QpIHtcbiAgaWYgKHByb21pc2UuX24pIHJldHVybjtcbiAgcHJvbWlzZS5fbiA9IHRydWU7XG4gIHZhciBjaGFpbiA9IHByb21pc2UuX2M7XG4gIG1pY3JvdGFzayhmdW5jdGlvbiAoKSB7XG4gICAgdmFyIHZhbHVlID0gcHJvbWlzZS5fdjtcbiAgICB2YXIgb2sgPSBwcm9taXNlLl9zID09IDE7XG4gICAgdmFyIGkgPSAwO1xuICAgIHZhciBydW4gPSBmdW5jdGlvbiAocmVhY3Rpb24pIHtcbiAgICAgIHZhciBoYW5kbGVyID0gb2sgPyByZWFjdGlvbi5vayA6IHJlYWN0aW9uLmZhaWw7XG4gICAgICB2YXIgcmVzb2x2ZSA9IHJlYWN0aW9uLnJlc29sdmU7XG4gICAgICB2YXIgcmVqZWN0ID0gcmVhY3Rpb24ucmVqZWN0O1xuICAgICAgdmFyIGRvbWFpbiA9IHJlYWN0aW9uLmRvbWFpbjtcbiAgICAgIHZhciByZXN1bHQsIHRoZW4sIGV4aXRlZDtcbiAgICAgIHRyeSB7XG4gICAgICAgIGlmIChoYW5kbGVyKSB7XG4gICAgICAgICAgaWYgKCFvaykge1xuICAgICAgICAgICAgaWYgKHByb21pc2UuX2ggPT0gMikgb25IYW5kbGVVbmhhbmRsZWQocHJvbWlzZSk7XG4gICAgICAgICAgICBwcm9taXNlLl9oID0gMTtcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKGhhbmRsZXIgPT09IHRydWUpIHJlc3VsdCA9IHZhbHVlO1xuICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgaWYgKGRvbWFpbikgZG9tYWluLmVudGVyKCk7XG4gICAgICAgICAgICByZXN1bHQgPSBoYW5kbGVyKHZhbHVlKTsgLy8gbWF5IHRocm93XG4gICAgICAgICAgICBpZiAoZG9tYWluKSB7XG4gICAgICAgICAgICAgIGRvbWFpbi5leGl0KCk7XG4gICAgICAgICAgICAgIGV4aXRlZCA9IHRydWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmIChyZXN1bHQgPT09IHJlYWN0aW9uLnByb21pc2UpIHtcbiAgICAgICAgICAgIHJlamVjdChUeXBlRXJyb3IoJ1Byb21pc2UtY2hhaW4gY3ljbGUnKSk7XG4gICAgICAgICAgfSBlbHNlIGlmICh0aGVuID0gaXNUaGVuYWJsZShyZXN1bHQpKSB7XG4gICAgICAgICAgICB0aGVuLmNhbGwocmVzdWx0LCByZXNvbHZlLCByZWplY3QpO1xuICAgICAgICAgIH0gZWxzZSByZXNvbHZlKHJlc3VsdCk7XG4gICAgICAgIH0gZWxzZSByZWplY3QodmFsdWUpO1xuICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICBpZiAoZG9tYWluICYmICFleGl0ZWQpIGRvbWFpbi5leGl0KCk7XG4gICAgICAgIHJlamVjdChlKTtcbiAgICAgIH1cbiAgICB9O1xuICAgIHdoaWxlIChjaGFpbi5sZW5ndGggPiBpKSBydW4oY2hhaW5baSsrXSk7IC8vIHZhcmlhYmxlIGxlbmd0aCAtIGNhbid0IHVzZSBmb3JFYWNoXG4gICAgcHJvbWlzZS5fYyA9IFtdO1xuICAgIHByb21pc2UuX24gPSBmYWxzZTtcbiAgICBpZiAoaXNSZWplY3QgJiYgIXByb21pc2UuX2gpIG9uVW5oYW5kbGVkKHByb21pc2UpO1xuICB9KTtcbn07XG52YXIgb25VbmhhbmRsZWQgPSBmdW5jdGlvbiAocHJvbWlzZSkge1xuICB0YXNrLmNhbGwoZ2xvYmFsLCBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIHZhbHVlID0gcHJvbWlzZS5fdjtcbiAgICB2YXIgdW5oYW5kbGVkID0gaXNVbmhhbmRsZWQocHJvbWlzZSk7XG4gICAgdmFyIHJlc3VsdCwgaGFuZGxlciwgY29uc29sZTtcbiAgICBpZiAodW5oYW5kbGVkKSB7XG4gICAgICByZXN1bHQgPSBwZXJmb3JtKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaWYgKGlzTm9kZSkge1xuICAgICAgICAgIHByb2Nlc3MuZW1pdCgndW5oYW5kbGVkUmVqZWN0aW9uJywgdmFsdWUsIHByb21pc2UpO1xuICAgICAgICB9IGVsc2UgaWYgKGhhbmRsZXIgPSBnbG9iYWwub251bmhhbmRsZWRyZWplY3Rpb24pIHtcbiAgICAgICAgICBoYW5kbGVyKHsgcHJvbWlzZTogcHJvbWlzZSwgcmVhc29uOiB2YWx1ZSB9KTtcbiAgICAgICAgfSBlbHNlIGlmICgoY29uc29sZSA9IGdsb2JhbC5jb25zb2xlKSAmJiBjb25zb2xlLmVycm9yKSB7XG4gICAgICAgICAgY29uc29sZS5lcnJvcignVW5oYW5kbGVkIHByb21pc2UgcmVqZWN0aW9uJywgdmFsdWUpO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICAgIC8vIEJyb3dzZXJzIHNob3VsZCBub3QgdHJpZ2dlciBgcmVqZWN0aW9uSGFuZGxlZGAgZXZlbnQgaWYgaXQgd2FzIGhhbmRsZWQgaGVyZSwgTm9kZUpTIC0gc2hvdWxkXG4gICAgICBwcm9taXNlLl9oID0gaXNOb2RlIHx8IGlzVW5oYW5kbGVkKHByb21pc2UpID8gMiA6IDE7XG4gICAgfSBwcm9taXNlLl9hID0gdW5kZWZpbmVkO1xuICAgIGlmICh1bmhhbmRsZWQgJiYgcmVzdWx0LmUpIHRocm93IHJlc3VsdC52O1xuICB9KTtcbn07XG52YXIgaXNVbmhhbmRsZWQgPSBmdW5jdGlvbiAocHJvbWlzZSkge1xuICByZXR1cm4gcHJvbWlzZS5faCAhPT0gMSAmJiAocHJvbWlzZS5fYSB8fCBwcm9taXNlLl9jKS5sZW5ndGggPT09IDA7XG59O1xudmFyIG9uSGFuZGxlVW5oYW5kbGVkID0gZnVuY3Rpb24gKHByb21pc2UpIHtcbiAgdGFzay5jYWxsKGdsb2JhbCwgZnVuY3Rpb24gKCkge1xuICAgIHZhciBoYW5kbGVyO1xuICAgIGlmIChpc05vZGUpIHtcbiAgICAgIHByb2Nlc3MuZW1pdCgncmVqZWN0aW9uSGFuZGxlZCcsIHByb21pc2UpO1xuICAgIH0gZWxzZSBpZiAoaGFuZGxlciA9IGdsb2JhbC5vbnJlamVjdGlvbmhhbmRsZWQpIHtcbiAgICAgIGhhbmRsZXIoeyBwcm9taXNlOiBwcm9taXNlLCByZWFzb246IHByb21pc2UuX3YgfSk7XG4gICAgfVxuICB9KTtcbn07XG52YXIgJHJlamVjdCA9IGZ1bmN0aW9uICh2YWx1ZSkge1xuICB2YXIgcHJvbWlzZSA9IHRoaXM7XG4gIGlmIChwcm9taXNlLl9kKSByZXR1cm47XG4gIHByb21pc2UuX2QgPSB0cnVlO1xuICBwcm9taXNlID0gcHJvbWlzZS5fdyB8fCBwcm9taXNlOyAvLyB1bndyYXBcbiAgcHJvbWlzZS5fdiA9IHZhbHVlO1xuICBwcm9taXNlLl9zID0gMjtcbiAgaWYgKCFwcm9taXNlLl9hKSBwcm9taXNlLl9hID0gcHJvbWlzZS5fYy5zbGljZSgpO1xuICBub3RpZnkocHJvbWlzZSwgdHJ1ZSk7XG59O1xudmFyICRyZXNvbHZlID0gZnVuY3Rpb24gKHZhbHVlKSB7XG4gIHZhciBwcm9taXNlID0gdGhpcztcbiAgdmFyIHRoZW47XG4gIGlmIChwcm9taXNlLl9kKSByZXR1cm47XG4gIHByb21pc2UuX2QgPSB0cnVlO1xuICBwcm9taXNlID0gcHJvbWlzZS5fdyB8fCBwcm9taXNlOyAvLyB1bndyYXBcbiAgdHJ5IHtcbiAgICBpZiAocHJvbWlzZSA9PT0gdmFsdWUpIHRocm93IFR5cGVFcnJvcihcIlByb21pc2UgY2FuJ3QgYmUgcmVzb2x2ZWQgaXRzZWxmXCIpO1xuICAgIGlmICh0aGVuID0gaXNUaGVuYWJsZSh2YWx1ZSkpIHtcbiAgICAgIG1pY3JvdGFzayhmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciB3cmFwcGVyID0geyBfdzogcHJvbWlzZSwgX2Q6IGZhbHNlIH07IC8vIHdyYXBcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICB0aGVuLmNhbGwodmFsdWUsIGN0eCgkcmVzb2x2ZSwgd3JhcHBlciwgMSksIGN0eCgkcmVqZWN0LCB3cmFwcGVyLCAxKSk7XG4gICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICAkcmVqZWN0LmNhbGwod3JhcHBlciwgZSk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH0gZWxzZSB7XG4gICAgICBwcm9taXNlLl92ID0gdmFsdWU7XG4gICAgICBwcm9taXNlLl9zID0gMTtcbiAgICAgIG5vdGlmeShwcm9taXNlLCBmYWxzZSk7XG4gICAgfVxuICB9IGNhdGNoIChlKSB7XG4gICAgJHJlamVjdC5jYWxsKHsgX3c6IHByb21pc2UsIF9kOiBmYWxzZSB9LCBlKTsgLy8gd3JhcFxuICB9XG59O1xuXG4vLyBjb25zdHJ1Y3RvciBwb2x5ZmlsbFxuaWYgKCFVU0VfTkFUSVZFKSB7XG4gIC8vIDI1LjQuMy4xIFByb21pc2UoZXhlY3V0b3IpXG4gICRQcm9taXNlID0gZnVuY3Rpb24gUHJvbWlzZShleGVjdXRvcikge1xuICAgIGFuSW5zdGFuY2UodGhpcywgJFByb21pc2UsIFBST01JU0UsICdfaCcpO1xuICAgIGFGdW5jdGlvbihleGVjdXRvcik7XG4gICAgSW50ZXJuYWwuY2FsbCh0aGlzKTtcbiAgICB0cnkge1xuICAgICAgZXhlY3V0b3IoY3R4KCRyZXNvbHZlLCB0aGlzLCAxKSwgY3R4KCRyZWplY3QsIHRoaXMsIDEpKTtcbiAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgICRyZWplY3QuY2FsbCh0aGlzLCBlcnIpO1xuICAgIH1cbiAgfTtcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXVudXNlZC12YXJzXG4gIEludGVybmFsID0gZnVuY3Rpb24gUHJvbWlzZShleGVjdXRvcikge1xuICAgIHRoaXMuX2MgPSBbXTsgICAgICAgICAgICAgLy8gPC0gYXdhaXRpbmcgcmVhY3Rpb25zXG4gICAgdGhpcy5fYSA9IHVuZGVmaW5lZDsgICAgICAvLyA8LSBjaGVja2VkIGluIGlzVW5oYW5kbGVkIHJlYWN0aW9uc1xuICAgIHRoaXMuX3MgPSAwOyAgICAgICAgICAgICAgLy8gPC0gc3RhdGVcbiAgICB0aGlzLl9kID0gZmFsc2U7ICAgICAgICAgIC8vIDwtIGRvbmVcbiAgICB0aGlzLl92ID0gdW5kZWZpbmVkOyAgICAgIC8vIDwtIHZhbHVlXG4gICAgdGhpcy5faCA9IDA7ICAgICAgICAgICAgICAvLyA8LSByZWplY3Rpb24gc3RhdGUsIDAgLSBkZWZhdWx0LCAxIC0gaGFuZGxlZCwgMiAtIHVuaGFuZGxlZFxuICAgIHRoaXMuX24gPSBmYWxzZTsgICAgICAgICAgLy8gPC0gbm90aWZ5XG4gIH07XG4gIEludGVybmFsLnByb3RvdHlwZSA9IHJlcXVpcmUoJy4vX3JlZGVmaW5lLWFsbCcpKCRQcm9taXNlLnByb3RvdHlwZSwge1xuICAgIC8vIDI1LjQuNS4zIFByb21pc2UucHJvdG90eXBlLnRoZW4ob25GdWxmaWxsZWQsIG9uUmVqZWN0ZWQpXG4gICAgdGhlbjogZnVuY3Rpb24gdGhlbihvbkZ1bGZpbGxlZCwgb25SZWplY3RlZCkge1xuICAgICAgdmFyIHJlYWN0aW9uID0gbmV3UHJvbWlzZUNhcGFiaWxpdHkoc3BlY2llc0NvbnN0cnVjdG9yKHRoaXMsICRQcm9taXNlKSk7XG4gICAgICByZWFjdGlvbi5vayA9IHR5cGVvZiBvbkZ1bGZpbGxlZCA9PSAnZnVuY3Rpb24nID8gb25GdWxmaWxsZWQgOiB0cnVlO1xuICAgICAgcmVhY3Rpb24uZmFpbCA9IHR5cGVvZiBvblJlamVjdGVkID09ICdmdW5jdGlvbicgJiYgb25SZWplY3RlZDtcbiAgICAgIHJlYWN0aW9uLmRvbWFpbiA9IGlzTm9kZSA/IHByb2Nlc3MuZG9tYWluIDogdW5kZWZpbmVkO1xuICAgICAgdGhpcy5fYy5wdXNoKHJlYWN0aW9uKTtcbiAgICAgIGlmICh0aGlzLl9hKSB0aGlzLl9hLnB1c2gocmVhY3Rpb24pO1xuICAgICAgaWYgKHRoaXMuX3MpIG5vdGlmeSh0aGlzLCBmYWxzZSk7XG4gICAgICByZXR1cm4gcmVhY3Rpb24ucHJvbWlzZTtcbiAgICB9LFxuICAgIC8vIDI1LjQuNS4xIFByb21pc2UucHJvdG90eXBlLmNhdGNoKG9uUmVqZWN0ZWQpXG4gICAgJ2NhdGNoJzogZnVuY3Rpb24gKG9uUmVqZWN0ZWQpIHtcbiAgICAgIHJldHVybiB0aGlzLnRoZW4odW5kZWZpbmVkLCBvblJlamVjdGVkKTtcbiAgICB9XG4gIH0pO1xuICBPd25Qcm9taXNlQ2FwYWJpbGl0eSA9IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgcHJvbWlzZSA9IG5ldyBJbnRlcm5hbCgpO1xuICAgIHRoaXMucHJvbWlzZSA9IHByb21pc2U7XG4gICAgdGhpcy5yZXNvbHZlID0gY3R4KCRyZXNvbHZlLCBwcm9taXNlLCAxKTtcbiAgICB0aGlzLnJlamVjdCA9IGN0eCgkcmVqZWN0LCBwcm9taXNlLCAxKTtcbiAgfTtcbiAgbmV3UHJvbWlzZUNhcGFiaWxpdHlNb2R1bGUuZiA9IG5ld1Byb21pc2VDYXBhYmlsaXR5ID0gZnVuY3Rpb24gKEMpIHtcbiAgICByZXR1cm4gQyA9PT0gJFByb21pc2UgfHwgQyA9PT0gV3JhcHBlclxuICAgICAgPyBuZXcgT3duUHJvbWlzZUNhcGFiaWxpdHkoQylcbiAgICAgIDogbmV3R2VuZXJpY1Byb21pc2VDYXBhYmlsaXR5KEMpO1xuICB9O1xufVxuXG4kZXhwb3J0KCRleHBvcnQuRyArICRleHBvcnQuVyArICRleHBvcnQuRiAqICFVU0VfTkFUSVZFLCB7IFByb21pc2U6ICRQcm9taXNlIH0pO1xucmVxdWlyZSgnLi9fc2V0LXRvLXN0cmluZy10YWcnKSgkUHJvbWlzZSwgUFJPTUlTRSk7XG5yZXF1aXJlKCcuL19zZXQtc3BlY2llcycpKFBST01JU0UpO1xuV3JhcHBlciA9IHJlcXVpcmUoJy4vX2NvcmUnKVtQUk9NSVNFXTtcblxuLy8gc3RhdGljc1xuJGV4cG9ydCgkZXhwb3J0LlMgKyAkZXhwb3J0LkYgKiAhVVNFX05BVElWRSwgUFJPTUlTRSwge1xuICAvLyAyNS40LjQuNSBQcm9taXNlLnJlamVjdChyKVxuICByZWplY3Q6IGZ1bmN0aW9uIHJlamVjdChyKSB7XG4gICAgdmFyIGNhcGFiaWxpdHkgPSBuZXdQcm9taXNlQ2FwYWJpbGl0eSh0aGlzKTtcbiAgICB2YXIgJCRyZWplY3QgPSBjYXBhYmlsaXR5LnJlamVjdDtcbiAgICAkJHJlamVjdChyKTtcbiAgICByZXR1cm4gY2FwYWJpbGl0eS5wcm9taXNlO1xuICB9XG59KTtcbiRleHBvcnQoJGV4cG9ydC5TICsgJGV4cG9ydC5GICogKExJQlJBUlkgfHwgIVVTRV9OQVRJVkUpLCBQUk9NSVNFLCB7XG4gIC8vIDI1LjQuNC42IFByb21pc2UucmVzb2x2ZSh4KVxuICByZXNvbHZlOiBmdW5jdGlvbiByZXNvbHZlKHgpIHtcbiAgICByZXR1cm4gcHJvbWlzZVJlc29sdmUoTElCUkFSWSAmJiB0aGlzID09PSBXcmFwcGVyID8gJFByb21pc2UgOiB0aGlzLCB4KTtcbiAgfVxufSk7XG4kZXhwb3J0KCRleHBvcnQuUyArICRleHBvcnQuRiAqICEoVVNFX05BVElWRSAmJiByZXF1aXJlKCcuL19pdGVyLWRldGVjdCcpKGZ1bmN0aW9uIChpdGVyKSB7XG4gICRQcm9taXNlLmFsbChpdGVyKVsnY2F0Y2gnXShlbXB0eSk7XG59KSksIFBST01JU0UsIHtcbiAgLy8gMjUuNC40LjEgUHJvbWlzZS5hbGwoaXRlcmFibGUpXG4gIGFsbDogZnVuY3Rpb24gYWxsKGl0ZXJhYmxlKSB7XG4gICAgdmFyIEMgPSB0aGlzO1xuICAgIHZhciBjYXBhYmlsaXR5ID0gbmV3UHJvbWlzZUNhcGFiaWxpdHkoQyk7XG4gICAgdmFyIHJlc29sdmUgPSBjYXBhYmlsaXR5LnJlc29sdmU7XG4gICAgdmFyIHJlamVjdCA9IGNhcGFiaWxpdHkucmVqZWN0O1xuICAgIHZhciByZXN1bHQgPSBwZXJmb3JtKGZ1bmN0aW9uICgpIHtcbiAgICAgIHZhciB2YWx1ZXMgPSBbXTtcbiAgICAgIHZhciBpbmRleCA9IDA7XG4gICAgICB2YXIgcmVtYWluaW5nID0gMTtcbiAgICAgIGZvck9mKGl0ZXJhYmxlLCBmYWxzZSwgZnVuY3Rpb24gKHByb21pc2UpIHtcbiAgICAgICAgdmFyICRpbmRleCA9IGluZGV4Kys7XG4gICAgICAgIHZhciBhbHJlYWR5Q2FsbGVkID0gZmFsc2U7XG4gICAgICAgIHZhbHVlcy5wdXNoKHVuZGVmaW5lZCk7XG4gICAgICAgIHJlbWFpbmluZysrO1xuICAgICAgICBDLnJlc29sdmUocHJvbWlzZSkudGhlbihmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgICBpZiAoYWxyZWFkeUNhbGxlZCkgcmV0dXJuO1xuICAgICAgICAgIGFscmVhZHlDYWxsZWQgPSB0cnVlO1xuICAgICAgICAgIHZhbHVlc1skaW5kZXhdID0gdmFsdWU7XG4gICAgICAgICAgLS1yZW1haW5pbmcgfHwgcmVzb2x2ZSh2YWx1ZXMpO1xuICAgICAgICB9LCByZWplY3QpO1xuICAgICAgfSk7XG4gICAgICAtLXJlbWFpbmluZyB8fCByZXNvbHZlKHZhbHVlcyk7XG4gICAgfSk7XG4gICAgaWYgKHJlc3VsdC5lKSByZWplY3QocmVzdWx0LnYpO1xuICAgIHJldHVybiBjYXBhYmlsaXR5LnByb21pc2U7XG4gIH0sXG4gIC8vIDI1LjQuNC40IFByb21pc2UucmFjZShpdGVyYWJsZSlcbiAgcmFjZTogZnVuY3Rpb24gcmFjZShpdGVyYWJsZSkge1xuICAgIHZhciBDID0gdGhpcztcbiAgICB2YXIgY2FwYWJpbGl0eSA9IG5ld1Byb21pc2VDYXBhYmlsaXR5KEMpO1xuICAgIHZhciByZWplY3QgPSBjYXBhYmlsaXR5LnJlamVjdDtcbiAgICB2YXIgcmVzdWx0ID0gcGVyZm9ybShmdW5jdGlvbiAoKSB7XG4gICAgICBmb3JPZihpdGVyYWJsZSwgZmFsc2UsIGZ1bmN0aW9uIChwcm9taXNlKSB7XG4gICAgICAgIEMucmVzb2x2ZShwcm9taXNlKS50aGVuKGNhcGFiaWxpdHkucmVzb2x2ZSwgcmVqZWN0KTtcbiAgICAgIH0pO1xuICAgIH0pO1xuICAgIGlmIChyZXN1bHQuZSkgcmVqZWN0KHJlc3VsdC52KTtcbiAgICByZXR1cm4gY2FwYWJpbGl0eS5wcm9taXNlO1xuICB9XG59KTtcbiIsInZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4vX2lzLW9iamVjdCcpO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQsIFRZUEUpIHtcbiAgaWYgKCFpc09iamVjdChpdCkgfHwgaXQuX3QgIT09IFRZUEUpIHRocm93IFR5cGVFcnJvcignSW5jb21wYXRpYmxlIHJlY2VpdmVyLCAnICsgVFlQRSArICcgcmVxdWlyZWQhJyk7XG4gIHJldHVybiBpdDtcbn07XG4iLCIndXNlIHN0cmljdCc7XG52YXIgZFAgPSByZXF1aXJlKCcuL19vYmplY3QtZHAnKS5mO1xudmFyIGNyZWF0ZSA9IHJlcXVpcmUoJy4vX29iamVjdC1jcmVhdGUnKTtcbnZhciByZWRlZmluZUFsbCA9IHJlcXVpcmUoJy4vX3JlZGVmaW5lLWFsbCcpO1xudmFyIGN0eCA9IHJlcXVpcmUoJy4vX2N0eCcpO1xudmFyIGFuSW5zdGFuY2UgPSByZXF1aXJlKCcuL19hbi1pbnN0YW5jZScpO1xudmFyIGZvck9mID0gcmVxdWlyZSgnLi9fZm9yLW9mJyk7XG52YXIgJGl0ZXJEZWZpbmUgPSByZXF1aXJlKCcuL19pdGVyLWRlZmluZScpO1xudmFyIHN0ZXAgPSByZXF1aXJlKCcuL19pdGVyLXN0ZXAnKTtcbnZhciBzZXRTcGVjaWVzID0gcmVxdWlyZSgnLi9fc2V0LXNwZWNpZXMnKTtcbnZhciBERVNDUklQVE9SUyA9IHJlcXVpcmUoJy4vX2Rlc2NyaXB0b3JzJyk7XG52YXIgZmFzdEtleSA9IHJlcXVpcmUoJy4vX21ldGEnKS5mYXN0S2V5O1xudmFyIHZhbGlkYXRlID0gcmVxdWlyZSgnLi9fdmFsaWRhdGUtY29sbGVjdGlvbicpO1xudmFyIFNJWkUgPSBERVNDUklQVE9SUyA/ICdfcycgOiAnc2l6ZSc7XG5cbnZhciBnZXRFbnRyeSA9IGZ1bmN0aW9uICh0aGF0LCBrZXkpIHtcbiAgLy8gZmFzdCBjYXNlXG4gIHZhciBpbmRleCA9IGZhc3RLZXkoa2V5KTtcbiAgdmFyIGVudHJ5O1xuICBpZiAoaW5kZXggIT09ICdGJykgcmV0dXJuIHRoYXQuX2lbaW5kZXhdO1xuICAvLyBmcm96ZW4gb2JqZWN0IGNhc2VcbiAgZm9yIChlbnRyeSA9IHRoYXQuX2Y7IGVudHJ5OyBlbnRyeSA9IGVudHJ5Lm4pIHtcbiAgICBpZiAoZW50cnkuayA9PSBrZXkpIHJldHVybiBlbnRyeTtcbiAgfVxufTtcblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIGdldENvbnN0cnVjdG9yOiBmdW5jdGlvbiAod3JhcHBlciwgTkFNRSwgSVNfTUFQLCBBRERFUikge1xuICAgIHZhciBDID0gd3JhcHBlcihmdW5jdGlvbiAodGhhdCwgaXRlcmFibGUpIHtcbiAgICAgIGFuSW5zdGFuY2UodGhhdCwgQywgTkFNRSwgJ19pJyk7XG4gICAgICB0aGF0Ll90ID0gTkFNRTsgICAgICAgICAvLyBjb2xsZWN0aW9uIHR5cGVcbiAgICAgIHRoYXQuX2kgPSBjcmVhdGUobnVsbCk7IC8vIGluZGV4XG4gICAgICB0aGF0Ll9mID0gdW5kZWZpbmVkOyAgICAvLyBmaXJzdCBlbnRyeVxuICAgICAgdGhhdC5fbCA9IHVuZGVmaW5lZDsgICAgLy8gbGFzdCBlbnRyeVxuICAgICAgdGhhdFtTSVpFXSA9IDA7ICAgICAgICAgLy8gc2l6ZVxuICAgICAgaWYgKGl0ZXJhYmxlICE9IHVuZGVmaW5lZCkgZm9yT2YoaXRlcmFibGUsIElTX01BUCwgdGhhdFtBRERFUl0sIHRoYXQpO1xuICAgIH0pO1xuICAgIHJlZGVmaW5lQWxsKEMucHJvdG90eXBlLCB7XG4gICAgICAvLyAyMy4xLjMuMSBNYXAucHJvdG90eXBlLmNsZWFyKClcbiAgICAgIC8vIDIzLjIuMy4yIFNldC5wcm90b3R5cGUuY2xlYXIoKVxuICAgICAgY2xlYXI6IGZ1bmN0aW9uIGNsZWFyKCkge1xuICAgICAgICBmb3IgKHZhciB0aGF0ID0gdmFsaWRhdGUodGhpcywgTkFNRSksIGRhdGEgPSB0aGF0Ll9pLCBlbnRyeSA9IHRoYXQuX2Y7IGVudHJ5OyBlbnRyeSA9IGVudHJ5Lm4pIHtcbiAgICAgICAgICBlbnRyeS5yID0gdHJ1ZTtcbiAgICAgICAgICBpZiAoZW50cnkucCkgZW50cnkucCA9IGVudHJ5LnAubiA9IHVuZGVmaW5lZDtcbiAgICAgICAgICBkZWxldGUgZGF0YVtlbnRyeS5pXTtcbiAgICAgICAgfVxuICAgICAgICB0aGF0Ll9mID0gdGhhdC5fbCA9IHVuZGVmaW5lZDtcbiAgICAgICAgdGhhdFtTSVpFXSA9IDA7XG4gICAgICB9LFxuICAgICAgLy8gMjMuMS4zLjMgTWFwLnByb3RvdHlwZS5kZWxldGUoa2V5KVxuICAgICAgLy8gMjMuMi4zLjQgU2V0LnByb3RvdHlwZS5kZWxldGUodmFsdWUpXG4gICAgICAnZGVsZXRlJzogZnVuY3Rpb24gKGtleSkge1xuICAgICAgICB2YXIgdGhhdCA9IHZhbGlkYXRlKHRoaXMsIE5BTUUpO1xuICAgICAgICB2YXIgZW50cnkgPSBnZXRFbnRyeSh0aGF0LCBrZXkpO1xuICAgICAgICBpZiAoZW50cnkpIHtcbiAgICAgICAgICB2YXIgbmV4dCA9IGVudHJ5Lm47XG4gICAgICAgICAgdmFyIHByZXYgPSBlbnRyeS5wO1xuICAgICAgICAgIGRlbGV0ZSB0aGF0Ll9pW2VudHJ5LmldO1xuICAgICAgICAgIGVudHJ5LnIgPSB0cnVlO1xuICAgICAgICAgIGlmIChwcmV2KSBwcmV2Lm4gPSBuZXh0O1xuICAgICAgICAgIGlmIChuZXh0KSBuZXh0LnAgPSBwcmV2O1xuICAgICAgICAgIGlmICh0aGF0Ll9mID09IGVudHJ5KSB0aGF0Ll9mID0gbmV4dDtcbiAgICAgICAgICBpZiAodGhhdC5fbCA9PSBlbnRyeSkgdGhhdC5fbCA9IHByZXY7XG4gICAgICAgICAgdGhhdFtTSVpFXS0tO1xuICAgICAgICB9IHJldHVybiAhIWVudHJ5O1xuICAgICAgfSxcbiAgICAgIC8vIDIzLjIuMy42IFNldC5wcm90b3R5cGUuZm9yRWFjaChjYWxsYmFja2ZuLCB0aGlzQXJnID0gdW5kZWZpbmVkKVxuICAgICAgLy8gMjMuMS4zLjUgTWFwLnByb3RvdHlwZS5mb3JFYWNoKGNhbGxiYWNrZm4sIHRoaXNBcmcgPSB1bmRlZmluZWQpXG4gICAgICBmb3JFYWNoOiBmdW5jdGlvbiBmb3JFYWNoKGNhbGxiYWNrZm4gLyogLCB0aGF0ID0gdW5kZWZpbmVkICovKSB7XG4gICAgICAgIHZhbGlkYXRlKHRoaXMsIE5BTUUpO1xuICAgICAgICB2YXIgZiA9IGN0eChjYWxsYmFja2ZuLCBhcmd1bWVudHMubGVuZ3RoID4gMSA/IGFyZ3VtZW50c1sxXSA6IHVuZGVmaW5lZCwgMyk7XG4gICAgICAgIHZhciBlbnRyeTtcbiAgICAgICAgd2hpbGUgKGVudHJ5ID0gZW50cnkgPyBlbnRyeS5uIDogdGhpcy5fZikge1xuICAgICAgICAgIGYoZW50cnkudiwgZW50cnkuaywgdGhpcyk7XG4gICAgICAgICAgLy8gcmV2ZXJ0IHRvIHRoZSBsYXN0IGV4aXN0aW5nIGVudHJ5XG4gICAgICAgICAgd2hpbGUgKGVudHJ5ICYmIGVudHJ5LnIpIGVudHJ5ID0gZW50cnkucDtcbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgIC8vIDIzLjEuMy43IE1hcC5wcm90b3R5cGUuaGFzKGtleSlcbiAgICAgIC8vIDIzLjIuMy43IFNldC5wcm90b3R5cGUuaGFzKHZhbHVlKVxuICAgICAgaGFzOiBmdW5jdGlvbiBoYXMoa2V5KSB7XG4gICAgICAgIHJldHVybiAhIWdldEVudHJ5KHZhbGlkYXRlKHRoaXMsIE5BTUUpLCBrZXkpO1xuICAgICAgfVxuICAgIH0pO1xuICAgIGlmIChERVNDUklQVE9SUykgZFAoQy5wcm90b3R5cGUsICdzaXplJywge1xuICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiB2YWxpZGF0ZSh0aGlzLCBOQU1FKVtTSVpFXTtcbiAgICAgIH1cbiAgICB9KTtcbiAgICByZXR1cm4gQztcbiAgfSxcbiAgZGVmOiBmdW5jdGlvbiAodGhhdCwga2V5LCB2YWx1ZSkge1xuICAgIHZhciBlbnRyeSA9IGdldEVudHJ5KHRoYXQsIGtleSk7XG4gICAgdmFyIHByZXYsIGluZGV4O1xuICAgIC8vIGNoYW5nZSBleGlzdGluZyBlbnRyeVxuICAgIGlmIChlbnRyeSkge1xuICAgICAgZW50cnkudiA9IHZhbHVlO1xuICAgIC8vIGNyZWF0ZSBuZXcgZW50cnlcbiAgICB9IGVsc2Uge1xuICAgICAgdGhhdC5fbCA9IGVudHJ5ID0ge1xuICAgICAgICBpOiBpbmRleCA9IGZhc3RLZXkoa2V5LCB0cnVlKSwgLy8gPC0gaW5kZXhcbiAgICAgICAgazoga2V5LCAgICAgICAgICAgICAgICAgICAgICAgIC8vIDwtIGtleVxuICAgICAgICB2OiB2YWx1ZSwgICAgICAgICAgICAgICAgICAgICAgLy8gPC0gdmFsdWVcbiAgICAgICAgcDogcHJldiA9IHRoYXQuX2wsICAgICAgICAgICAgIC8vIDwtIHByZXZpb3VzIGVudHJ5XG4gICAgICAgIG46IHVuZGVmaW5lZCwgICAgICAgICAgICAgICAgICAvLyA8LSBuZXh0IGVudHJ5XG4gICAgICAgIHI6IGZhbHNlICAgICAgICAgICAgICAgICAgICAgICAvLyA8LSByZW1vdmVkXG4gICAgICB9O1xuICAgICAgaWYgKCF0aGF0Ll9mKSB0aGF0Ll9mID0gZW50cnk7XG4gICAgICBpZiAocHJldikgcHJldi5uID0gZW50cnk7XG4gICAgICB0aGF0W1NJWkVdKys7XG4gICAgICAvLyBhZGQgdG8gaW5kZXhcbiAgICAgIGlmIChpbmRleCAhPT0gJ0YnKSB0aGF0Ll9pW2luZGV4XSA9IGVudHJ5O1xuICAgIH0gcmV0dXJuIHRoYXQ7XG4gIH0sXG4gIGdldEVudHJ5OiBnZXRFbnRyeSxcbiAgc2V0U3Ryb25nOiBmdW5jdGlvbiAoQywgTkFNRSwgSVNfTUFQKSB7XG4gICAgLy8gYWRkIC5rZXlzLCAudmFsdWVzLCAuZW50cmllcywgW0BAaXRlcmF0b3JdXG4gICAgLy8gMjMuMS4zLjQsIDIzLjEuMy44LCAyMy4xLjMuMTEsIDIzLjEuMy4xMiwgMjMuMi4zLjUsIDIzLjIuMy44LCAyMy4yLjMuMTAsIDIzLjIuMy4xMVxuICAgICRpdGVyRGVmaW5lKEMsIE5BTUUsIGZ1bmN0aW9uIChpdGVyYXRlZCwga2luZCkge1xuICAgICAgdGhpcy5fdCA9IHZhbGlkYXRlKGl0ZXJhdGVkLCBOQU1FKTsgLy8gdGFyZ2V0XG4gICAgICB0aGlzLl9rID0ga2luZDsgICAgICAgICAgICAgICAgICAgICAvLyBraW5kXG4gICAgICB0aGlzLl9sID0gdW5kZWZpbmVkOyAgICAgICAgICAgICAgICAvLyBwcmV2aW91c1xuICAgIH0sIGZ1bmN0aW9uICgpIHtcbiAgICAgIHZhciB0aGF0ID0gdGhpcztcbiAgICAgIHZhciBraW5kID0gdGhhdC5faztcbiAgICAgIHZhciBlbnRyeSA9IHRoYXQuX2w7XG4gICAgICAvLyByZXZlcnQgdG8gdGhlIGxhc3QgZXhpc3RpbmcgZW50cnlcbiAgICAgIHdoaWxlIChlbnRyeSAmJiBlbnRyeS5yKSBlbnRyeSA9IGVudHJ5LnA7XG4gICAgICAvLyBnZXQgbmV4dCBlbnRyeVxuICAgICAgaWYgKCF0aGF0Ll90IHx8ICEodGhhdC5fbCA9IGVudHJ5ID0gZW50cnkgPyBlbnRyeS5uIDogdGhhdC5fdC5fZikpIHtcbiAgICAgICAgLy8gb3IgZmluaXNoIHRoZSBpdGVyYXRpb25cbiAgICAgICAgdGhhdC5fdCA9IHVuZGVmaW5lZDtcbiAgICAgICAgcmV0dXJuIHN0ZXAoMSk7XG4gICAgICB9XG4gICAgICAvLyByZXR1cm4gc3RlcCBieSBraW5kXG4gICAgICBpZiAoa2luZCA9PSAna2V5cycpIHJldHVybiBzdGVwKDAsIGVudHJ5LmspO1xuICAgICAgaWYgKGtpbmQgPT0gJ3ZhbHVlcycpIHJldHVybiBzdGVwKDAsIGVudHJ5LnYpO1xuICAgICAgcmV0dXJuIHN0ZXAoMCwgW2VudHJ5LmssIGVudHJ5LnZdKTtcbiAgICB9LCBJU19NQVAgPyAnZW50cmllcycgOiAndmFsdWVzJywgIUlTX01BUCwgdHJ1ZSk7XG5cbiAgICAvLyBhZGQgW0BAc3BlY2llc10sIDIzLjEuMi4yLCAyMy4yLjIuMlxuICAgIHNldFNwZWNpZXMoTkFNRSk7XG4gIH1cbn07XG4iLCIndXNlIHN0cmljdCc7XG52YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi9fZ2xvYmFsJyk7XG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIHJlZGVmaW5lID0gcmVxdWlyZSgnLi9fcmVkZWZpbmUnKTtcbnZhciByZWRlZmluZUFsbCA9IHJlcXVpcmUoJy4vX3JlZGVmaW5lLWFsbCcpO1xudmFyIG1ldGEgPSByZXF1aXJlKCcuL19tZXRhJyk7XG52YXIgZm9yT2YgPSByZXF1aXJlKCcuL19mb3Itb2YnKTtcbnZhciBhbkluc3RhbmNlID0gcmVxdWlyZSgnLi9fYW4taW5zdGFuY2UnKTtcbnZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4vX2lzLW9iamVjdCcpO1xudmFyIGZhaWxzID0gcmVxdWlyZSgnLi9fZmFpbHMnKTtcbnZhciAkaXRlckRldGVjdCA9IHJlcXVpcmUoJy4vX2l0ZXItZGV0ZWN0Jyk7XG52YXIgc2V0VG9TdHJpbmdUYWcgPSByZXF1aXJlKCcuL19zZXQtdG8tc3RyaW5nLXRhZycpO1xudmFyIGluaGVyaXRJZlJlcXVpcmVkID0gcmVxdWlyZSgnLi9faW5oZXJpdC1pZi1yZXF1aXJlZCcpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChOQU1FLCB3cmFwcGVyLCBtZXRob2RzLCBjb21tb24sIElTX01BUCwgSVNfV0VBSykge1xuICB2YXIgQmFzZSA9IGdsb2JhbFtOQU1FXTtcbiAgdmFyIEMgPSBCYXNlO1xuICB2YXIgQURERVIgPSBJU19NQVAgPyAnc2V0JyA6ICdhZGQnO1xuICB2YXIgcHJvdG8gPSBDICYmIEMucHJvdG90eXBlO1xuICB2YXIgTyA9IHt9O1xuICB2YXIgZml4TWV0aG9kID0gZnVuY3Rpb24gKEtFWSkge1xuICAgIHZhciBmbiA9IHByb3RvW0tFWV07XG4gICAgcmVkZWZpbmUocHJvdG8sIEtFWSxcbiAgICAgIEtFWSA9PSAnZGVsZXRlJyA/IGZ1bmN0aW9uIChhKSB7XG4gICAgICAgIHJldHVybiBJU19XRUFLICYmICFpc09iamVjdChhKSA/IGZhbHNlIDogZm4uY2FsbCh0aGlzLCBhID09PSAwID8gMCA6IGEpO1xuICAgICAgfSA6IEtFWSA9PSAnaGFzJyA/IGZ1bmN0aW9uIGhhcyhhKSB7XG4gICAgICAgIHJldHVybiBJU19XRUFLICYmICFpc09iamVjdChhKSA/IGZhbHNlIDogZm4uY2FsbCh0aGlzLCBhID09PSAwID8gMCA6IGEpO1xuICAgICAgfSA6IEtFWSA9PSAnZ2V0JyA/IGZ1bmN0aW9uIGdldChhKSB7XG4gICAgICAgIHJldHVybiBJU19XRUFLICYmICFpc09iamVjdChhKSA/IHVuZGVmaW5lZCA6IGZuLmNhbGwodGhpcywgYSA9PT0gMCA/IDAgOiBhKTtcbiAgICAgIH0gOiBLRVkgPT0gJ2FkZCcgPyBmdW5jdGlvbiBhZGQoYSkgeyBmbi5jYWxsKHRoaXMsIGEgPT09IDAgPyAwIDogYSk7IHJldHVybiB0aGlzOyB9XG4gICAgICAgIDogZnVuY3Rpb24gc2V0KGEsIGIpIHsgZm4uY2FsbCh0aGlzLCBhID09PSAwID8gMCA6IGEsIGIpOyByZXR1cm4gdGhpczsgfVxuICAgICk7XG4gIH07XG4gIGlmICh0eXBlb2YgQyAhPSAnZnVuY3Rpb24nIHx8ICEoSVNfV0VBSyB8fCBwcm90by5mb3JFYWNoICYmICFmYWlscyhmdW5jdGlvbiAoKSB7XG4gICAgbmV3IEMoKS5lbnRyaWVzKCkubmV4dCgpO1xuICB9KSkpIHtcbiAgICAvLyBjcmVhdGUgY29sbGVjdGlvbiBjb25zdHJ1Y3RvclxuICAgIEMgPSBjb21tb24uZ2V0Q29uc3RydWN0b3Iod3JhcHBlciwgTkFNRSwgSVNfTUFQLCBBRERFUik7XG4gICAgcmVkZWZpbmVBbGwoQy5wcm90b3R5cGUsIG1ldGhvZHMpO1xuICAgIG1ldGEuTkVFRCA9IHRydWU7XG4gIH0gZWxzZSB7XG4gICAgdmFyIGluc3RhbmNlID0gbmV3IEMoKTtcbiAgICAvLyBlYXJseSBpbXBsZW1lbnRhdGlvbnMgbm90IHN1cHBvcnRzIGNoYWluaW5nXG4gICAgdmFyIEhBU05UX0NIQUlOSU5HID0gaW5zdGFuY2VbQURERVJdKElTX1dFQUsgPyB7fSA6IC0wLCAxKSAhPSBpbnN0YW5jZTtcbiAgICAvLyBWOCB+ICBDaHJvbWl1bSA0MC0gd2Vhay1jb2xsZWN0aW9ucyB0aHJvd3Mgb24gcHJpbWl0aXZlcywgYnV0IHNob3VsZCByZXR1cm4gZmFsc2VcbiAgICB2YXIgVEhST1dTX09OX1BSSU1JVElWRVMgPSBmYWlscyhmdW5jdGlvbiAoKSB7IGluc3RhbmNlLmhhcygxKTsgfSk7XG4gICAgLy8gbW9zdCBlYXJseSBpbXBsZW1lbnRhdGlvbnMgZG9lc24ndCBzdXBwb3J0cyBpdGVyYWJsZXMsIG1vc3QgbW9kZXJuIC0gbm90IGNsb3NlIGl0IGNvcnJlY3RseVxuICAgIHZhciBBQ0NFUFRfSVRFUkFCTEVTID0gJGl0ZXJEZXRlY3QoZnVuY3Rpb24gKGl0ZXIpIHsgbmV3IEMoaXRlcik7IH0pOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLW5ld1xuICAgIC8vIGZvciBlYXJseSBpbXBsZW1lbnRhdGlvbnMgLTAgYW5kICswIG5vdCB0aGUgc2FtZVxuICAgIHZhciBCVUdHWV9aRVJPID0gIUlTX1dFQUsgJiYgZmFpbHMoZnVuY3Rpb24gKCkge1xuICAgICAgLy8gVjggfiBDaHJvbWl1bSA0Mi0gZmFpbHMgb25seSB3aXRoIDUrIGVsZW1lbnRzXG4gICAgICB2YXIgJGluc3RhbmNlID0gbmV3IEMoKTtcbiAgICAgIHZhciBpbmRleCA9IDU7XG4gICAgICB3aGlsZSAoaW5kZXgtLSkgJGluc3RhbmNlW0FEREVSXShpbmRleCwgaW5kZXgpO1xuICAgICAgcmV0dXJuICEkaW5zdGFuY2UuaGFzKC0wKTtcbiAgICB9KTtcbiAgICBpZiAoIUFDQ0VQVF9JVEVSQUJMRVMpIHtcbiAgICAgIEMgPSB3cmFwcGVyKGZ1bmN0aW9uICh0YXJnZXQsIGl0ZXJhYmxlKSB7XG4gICAgICAgIGFuSW5zdGFuY2UodGFyZ2V0LCBDLCBOQU1FKTtcbiAgICAgICAgdmFyIHRoYXQgPSBpbmhlcml0SWZSZXF1aXJlZChuZXcgQmFzZSgpLCB0YXJnZXQsIEMpO1xuICAgICAgICBpZiAoaXRlcmFibGUgIT0gdW5kZWZpbmVkKSBmb3JPZihpdGVyYWJsZSwgSVNfTUFQLCB0aGF0W0FEREVSXSwgdGhhdCk7XG4gICAgICAgIHJldHVybiB0aGF0O1xuICAgICAgfSk7XG4gICAgICBDLnByb3RvdHlwZSA9IHByb3RvO1xuICAgICAgcHJvdG8uY29uc3RydWN0b3IgPSBDO1xuICAgIH1cbiAgICBpZiAoVEhST1dTX09OX1BSSU1JVElWRVMgfHwgQlVHR1lfWkVSTykge1xuICAgICAgZml4TWV0aG9kKCdkZWxldGUnKTtcbiAgICAgIGZpeE1ldGhvZCgnaGFzJyk7XG4gICAgICBJU19NQVAgJiYgZml4TWV0aG9kKCdnZXQnKTtcbiAgICB9XG4gICAgaWYgKEJVR0dZX1pFUk8gfHwgSEFTTlRfQ0hBSU5JTkcpIGZpeE1ldGhvZChBRERFUik7XG4gICAgLy8gd2VhayBjb2xsZWN0aW9ucyBzaG91bGQgbm90IGNvbnRhaW5zIC5jbGVhciBtZXRob2RcbiAgICBpZiAoSVNfV0VBSyAmJiBwcm90by5jbGVhcikgZGVsZXRlIHByb3RvLmNsZWFyO1xuICB9XG5cbiAgc2V0VG9TdHJpbmdUYWcoQywgTkFNRSk7XG5cbiAgT1tOQU1FXSA9IEM7XG4gICRleHBvcnQoJGV4cG9ydC5HICsgJGV4cG9ydC5XICsgJGV4cG9ydC5GICogKEMgIT0gQmFzZSksIE8pO1xuXG4gIGlmICghSVNfV0VBSykgY29tbW9uLnNldFN0cm9uZyhDLCBOQU1FLCBJU19NQVApO1xuXG4gIHJldHVybiBDO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciBzdHJvbmcgPSByZXF1aXJlKCcuL19jb2xsZWN0aW9uLXN0cm9uZycpO1xudmFyIHZhbGlkYXRlID0gcmVxdWlyZSgnLi9fdmFsaWRhdGUtY29sbGVjdGlvbicpO1xudmFyIE1BUCA9ICdNYXAnO1xuXG4vLyAyMy4xIE1hcCBPYmplY3RzXG5tb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vX2NvbGxlY3Rpb24nKShNQVAsIGZ1bmN0aW9uIChnZXQpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIE1hcCgpIHsgcmV0dXJuIGdldCh0aGlzLCBhcmd1bWVudHMubGVuZ3RoID4gMCA/IGFyZ3VtZW50c1swXSA6IHVuZGVmaW5lZCk7IH07XG59LCB7XG4gIC8vIDIzLjEuMy42IE1hcC5wcm90b3R5cGUuZ2V0KGtleSlcbiAgZ2V0OiBmdW5jdGlvbiBnZXQoa2V5KSB7XG4gICAgdmFyIGVudHJ5ID0gc3Ryb25nLmdldEVudHJ5KHZhbGlkYXRlKHRoaXMsIE1BUCksIGtleSk7XG4gICAgcmV0dXJuIGVudHJ5ICYmIGVudHJ5LnY7XG4gIH0sXG4gIC8vIDIzLjEuMy45IE1hcC5wcm90b3R5cGUuc2V0KGtleSwgdmFsdWUpXG4gIHNldDogZnVuY3Rpb24gc2V0KGtleSwgdmFsdWUpIHtcbiAgICByZXR1cm4gc3Ryb25nLmRlZih2YWxpZGF0ZSh0aGlzLCBNQVApLCBrZXkgPT09IDAgPyAwIDoga2V5LCB2YWx1ZSk7XG4gIH1cbn0sIHN0cm9uZywgdHJ1ZSk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgc3Ryb25nID0gcmVxdWlyZSgnLi9fY29sbGVjdGlvbi1zdHJvbmcnKTtcbnZhciB2YWxpZGF0ZSA9IHJlcXVpcmUoJy4vX3ZhbGlkYXRlLWNvbGxlY3Rpb24nKTtcbnZhciBTRVQgPSAnU2V0JztcblxuLy8gMjMuMiBTZXQgT2JqZWN0c1xubW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL19jb2xsZWN0aW9uJykoU0VULCBmdW5jdGlvbiAoZ2V0KSB7XG4gIHJldHVybiBmdW5jdGlvbiBTZXQoKSB7IHJldHVybiBnZXQodGhpcywgYXJndW1lbnRzLmxlbmd0aCA+IDAgPyBhcmd1bWVudHNbMF0gOiB1bmRlZmluZWQpOyB9O1xufSwge1xuICAvLyAyMy4yLjMuMSBTZXQucHJvdG90eXBlLmFkZCh2YWx1ZSlcbiAgYWRkOiBmdW5jdGlvbiBhZGQodmFsdWUpIHtcbiAgICByZXR1cm4gc3Ryb25nLmRlZih2YWxpZGF0ZSh0aGlzLCBTRVQpLCB2YWx1ZSA9IHZhbHVlID09PSAwID8gMCA6IHZhbHVlLCB2YWx1ZSk7XG4gIH1cbn0sIHN0cm9uZyk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgcmVkZWZpbmVBbGwgPSByZXF1aXJlKCcuL19yZWRlZmluZS1hbGwnKTtcbnZhciBnZXRXZWFrID0gcmVxdWlyZSgnLi9fbWV0YScpLmdldFdlYWs7XG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKTtcbnZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4vX2lzLW9iamVjdCcpO1xudmFyIGFuSW5zdGFuY2UgPSByZXF1aXJlKCcuL19hbi1pbnN0YW5jZScpO1xudmFyIGZvck9mID0gcmVxdWlyZSgnLi9fZm9yLW9mJyk7XG52YXIgY3JlYXRlQXJyYXlNZXRob2QgPSByZXF1aXJlKCcuL19hcnJheS1tZXRob2RzJyk7XG52YXIgJGhhcyA9IHJlcXVpcmUoJy4vX2hhcycpO1xudmFyIHZhbGlkYXRlID0gcmVxdWlyZSgnLi9fdmFsaWRhdGUtY29sbGVjdGlvbicpO1xudmFyIGFycmF5RmluZCA9IGNyZWF0ZUFycmF5TWV0aG9kKDUpO1xudmFyIGFycmF5RmluZEluZGV4ID0gY3JlYXRlQXJyYXlNZXRob2QoNik7XG52YXIgaWQgPSAwO1xuXG4vLyBmYWxsYmFjayBmb3IgdW5jYXVnaHQgZnJvemVuIGtleXNcbnZhciB1bmNhdWdodEZyb3plblN0b3JlID0gZnVuY3Rpb24gKHRoYXQpIHtcbiAgcmV0dXJuIHRoYXQuX2wgfHwgKHRoYXQuX2wgPSBuZXcgVW5jYXVnaHRGcm96ZW5TdG9yZSgpKTtcbn07XG52YXIgVW5jYXVnaHRGcm96ZW5TdG9yZSA9IGZ1bmN0aW9uICgpIHtcbiAgdGhpcy5hID0gW107XG59O1xudmFyIGZpbmRVbmNhdWdodEZyb3plbiA9IGZ1bmN0aW9uIChzdG9yZSwga2V5KSB7XG4gIHJldHVybiBhcnJheUZpbmQoc3RvcmUuYSwgZnVuY3Rpb24gKGl0KSB7XG4gICAgcmV0dXJuIGl0WzBdID09PSBrZXk7XG4gIH0pO1xufTtcblVuY2F1Z2h0RnJvemVuU3RvcmUucHJvdG90eXBlID0ge1xuICBnZXQ6IGZ1bmN0aW9uIChrZXkpIHtcbiAgICB2YXIgZW50cnkgPSBmaW5kVW5jYXVnaHRGcm96ZW4odGhpcywga2V5KTtcbiAgICBpZiAoZW50cnkpIHJldHVybiBlbnRyeVsxXTtcbiAgfSxcbiAgaGFzOiBmdW5jdGlvbiAoa2V5KSB7XG4gICAgcmV0dXJuICEhZmluZFVuY2F1Z2h0RnJvemVuKHRoaXMsIGtleSk7XG4gIH0sXG4gIHNldDogZnVuY3Rpb24gKGtleSwgdmFsdWUpIHtcbiAgICB2YXIgZW50cnkgPSBmaW5kVW5jYXVnaHRGcm96ZW4odGhpcywga2V5KTtcbiAgICBpZiAoZW50cnkpIGVudHJ5WzFdID0gdmFsdWU7XG4gICAgZWxzZSB0aGlzLmEucHVzaChba2V5LCB2YWx1ZV0pO1xuICB9LFxuICAnZGVsZXRlJzogZnVuY3Rpb24gKGtleSkge1xuICAgIHZhciBpbmRleCA9IGFycmF5RmluZEluZGV4KHRoaXMuYSwgZnVuY3Rpb24gKGl0KSB7XG4gICAgICByZXR1cm4gaXRbMF0gPT09IGtleTtcbiAgICB9KTtcbiAgICBpZiAofmluZGV4KSB0aGlzLmEuc3BsaWNlKGluZGV4LCAxKTtcbiAgICByZXR1cm4gISF+aW5kZXg7XG4gIH1cbn07XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICBnZXRDb25zdHJ1Y3RvcjogZnVuY3Rpb24gKHdyYXBwZXIsIE5BTUUsIElTX01BUCwgQURERVIpIHtcbiAgICB2YXIgQyA9IHdyYXBwZXIoZnVuY3Rpb24gKHRoYXQsIGl0ZXJhYmxlKSB7XG4gICAgICBhbkluc3RhbmNlKHRoYXQsIEMsIE5BTUUsICdfaScpO1xuICAgICAgdGhhdC5fdCA9IE5BTUU7ICAgICAgLy8gY29sbGVjdGlvbiB0eXBlXG4gICAgICB0aGF0Ll9pID0gaWQrKzsgICAgICAvLyBjb2xsZWN0aW9uIGlkXG4gICAgICB0aGF0Ll9sID0gdW5kZWZpbmVkOyAvLyBsZWFrIHN0b3JlIGZvciB1bmNhdWdodCBmcm96ZW4gb2JqZWN0c1xuICAgICAgaWYgKGl0ZXJhYmxlICE9IHVuZGVmaW5lZCkgZm9yT2YoaXRlcmFibGUsIElTX01BUCwgdGhhdFtBRERFUl0sIHRoYXQpO1xuICAgIH0pO1xuICAgIHJlZGVmaW5lQWxsKEMucHJvdG90eXBlLCB7XG4gICAgICAvLyAyMy4zLjMuMiBXZWFrTWFwLnByb3RvdHlwZS5kZWxldGUoa2V5KVxuICAgICAgLy8gMjMuNC4zLjMgV2Vha1NldC5wcm90b3R5cGUuZGVsZXRlKHZhbHVlKVxuICAgICAgJ2RlbGV0ZSc6IGZ1bmN0aW9uIChrZXkpIHtcbiAgICAgICAgaWYgKCFpc09iamVjdChrZXkpKSByZXR1cm4gZmFsc2U7XG4gICAgICAgIHZhciBkYXRhID0gZ2V0V2VhayhrZXkpO1xuICAgICAgICBpZiAoZGF0YSA9PT0gdHJ1ZSkgcmV0dXJuIHVuY2F1Z2h0RnJvemVuU3RvcmUodmFsaWRhdGUodGhpcywgTkFNRSkpWydkZWxldGUnXShrZXkpO1xuICAgICAgICByZXR1cm4gZGF0YSAmJiAkaGFzKGRhdGEsIHRoaXMuX2kpICYmIGRlbGV0ZSBkYXRhW3RoaXMuX2ldO1xuICAgICAgfSxcbiAgICAgIC8vIDIzLjMuMy40IFdlYWtNYXAucHJvdG90eXBlLmhhcyhrZXkpXG4gICAgICAvLyAyMy40LjMuNCBXZWFrU2V0LnByb3RvdHlwZS5oYXModmFsdWUpXG4gICAgICBoYXM6IGZ1bmN0aW9uIGhhcyhrZXkpIHtcbiAgICAgICAgaWYgKCFpc09iamVjdChrZXkpKSByZXR1cm4gZmFsc2U7XG4gICAgICAgIHZhciBkYXRhID0gZ2V0V2VhayhrZXkpO1xuICAgICAgICBpZiAoZGF0YSA9PT0gdHJ1ZSkgcmV0dXJuIHVuY2F1Z2h0RnJvemVuU3RvcmUodmFsaWRhdGUodGhpcywgTkFNRSkpLmhhcyhrZXkpO1xuICAgICAgICByZXR1cm4gZGF0YSAmJiAkaGFzKGRhdGEsIHRoaXMuX2kpO1xuICAgICAgfVxuICAgIH0pO1xuICAgIHJldHVybiBDO1xuICB9LFxuICBkZWY6IGZ1bmN0aW9uICh0aGF0LCBrZXksIHZhbHVlKSB7XG4gICAgdmFyIGRhdGEgPSBnZXRXZWFrKGFuT2JqZWN0KGtleSksIHRydWUpO1xuICAgIGlmIChkYXRhID09PSB0cnVlKSB1bmNhdWdodEZyb3plblN0b3JlKHRoYXQpLnNldChrZXksIHZhbHVlKTtcbiAgICBlbHNlIGRhdGFbdGhhdC5faV0gPSB2YWx1ZTtcbiAgICByZXR1cm4gdGhhdDtcbiAgfSxcbiAgdWZzdG9yZTogdW5jYXVnaHRGcm96ZW5TdG9yZVxufTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciBnbG9iYWwgPSByZXF1aXJlKCcuL19nbG9iYWwnKTtcbnZhciBlYWNoID0gcmVxdWlyZSgnLi9fYXJyYXktbWV0aG9kcycpKDApO1xudmFyIHJlZGVmaW5lID0gcmVxdWlyZSgnLi9fcmVkZWZpbmUnKTtcbnZhciBtZXRhID0gcmVxdWlyZSgnLi9fbWV0YScpO1xudmFyIGFzc2lnbiA9IHJlcXVpcmUoJy4vX29iamVjdC1hc3NpZ24nKTtcbnZhciB3ZWFrID0gcmVxdWlyZSgnLi9fY29sbGVjdGlvbi13ZWFrJyk7XG52YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuL19pcy1vYmplY3QnKTtcbnZhciB2YWxpZGF0ZSA9IHJlcXVpcmUoJy4vX3ZhbGlkYXRlLWNvbGxlY3Rpb24nKTtcbnZhciBOQVRJVkVfV0VBS19NQVAgPSByZXF1aXJlKCcuL192YWxpZGF0ZS1jb2xsZWN0aW9uJyk7XG52YXIgSVNfSUUxMSA9ICFnbG9iYWwuQWN0aXZlWE9iamVjdCAmJiAnQWN0aXZlWE9iamVjdCcgaW4gZ2xvYmFsO1xudmFyIFdFQUtfTUFQID0gJ1dlYWtNYXAnO1xudmFyIGdldFdlYWsgPSBtZXRhLmdldFdlYWs7XG52YXIgaXNFeHRlbnNpYmxlID0gT2JqZWN0LmlzRXh0ZW5zaWJsZTtcbnZhciB1bmNhdWdodEZyb3plblN0b3JlID0gd2Vhay51ZnN0b3JlO1xudmFyIEludGVybmFsTWFwO1xuXG52YXIgd3JhcHBlciA9IGZ1bmN0aW9uIChnZXQpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIFdlYWtNYXAoKSB7XG4gICAgcmV0dXJuIGdldCh0aGlzLCBhcmd1bWVudHMubGVuZ3RoID4gMCA/IGFyZ3VtZW50c1swXSA6IHVuZGVmaW5lZCk7XG4gIH07XG59O1xuXG52YXIgbWV0aG9kcyA9IHtcbiAgLy8gMjMuMy4zLjMgV2Vha01hcC5wcm90b3R5cGUuZ2V0KGtleSlcbiAgZ2V0OiBmdW5jdGlvbiBnZXQoa2V5KSB7XG4gICAgaWYgKGlzT2JqZWN0KGtleSkpIHtcbiAgICAgIHZhciBkYXRhID0gZ2V0V2VhayhrZXkpO1xuICAgICAgaWYgKGRhdGEgPT09IHRydWUpIHJldHVybiB1bmNhdWdodEZyb3plblN0b3JlKHZhbGlkYXRlKHRoaXMsIFdFQUtfTUFQKSkuZ2V0KGtleSk7XG4gICAgICByZXR1cm4gZGF0YSA/IGRhdGFbdGhpcy5faV0gOiB1bmRlZmluZWQ7XG4gICAgfVxuICB9LFxuICAvLyAyMy4zLjMuNSBXZWFrTWFwLnByb3RvdHlwZS5zZXQoa2V5LCB2YWx1ZSlcbiAgc2V0OiBmdW5jdGlvbiBzZXQoa2V5LCB2YWx1ZSkge1xuICAgIHJldHVybiB3ZWFrLmRlZih2YWxpZGF0ZSh0aGlzLCBXRUFLX01BUCksIGtleSwgdmFsdWUpO1xuICB9XG59O1xuXG4vLyAyMy4zIFdlYWtNYXAgT2JqZWN0c1xudmFyICRXZWFrTWFwID0gbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL19jb2xsZWN0aW9uJykoV0VBS19NQVAsIHdyYXBwZXIsIG1ldGhvZHMsIHdlYWssIHRydWUsIHRydWUpO1xuXG4vLyBJRTExIFdlYWtNYXAgZnJvemVuIGtleXMgZml4XG5pZiAoTkFUSVZFX1dFQUtfTUFQICYmIElTX0lFMTEpIHtcbiAgSW50ZXJuYWxNYXAgPSB3ZWFrLmdldENvbnN0cnVjdG9yKHdyYXBwZXIsIFdFQUtfTUFQKTtcbiAgYXNzaWduKEludGVybmFsTWFwLnByb3RvdHlwZSwgbWV0aG9kcyk7XG4gIG1ldGEuTkVFRCA9IHRydWU7XG4gIGVhY2goWydkZWxldGUnLCAnaGFzJywgJ2dldCcsICdzZXQnXSwgZnVuY3Rpb24gKGtleSkge1xuICAgIHZhciBwcm90byA9ICRXZWFrTWFwLnByb3RvdHlwZTtcbiAgICB2YXIgbWV0aG9kID0gcHJvdG9ba2V5XTtcbiAgICByZWRlZmluZShwcm90bywga2V5LCBmdW5jdGlvbiAoYSwgYikge1xuICAgICAgLy8gc3RvcmUgZnJvemVuIG9iamVjdHMgb24gaW50ZXJuYWwgd2Vha21hcCBzaGltXG4gICAgICBpZiAoaXNPYmplY3QoYSkgJiYgIWlzRXh0ZW5zaWJsZShhKSkge1xuICAgICAgICBpZiAoIXRoaXMuX2YpIHRoaXMuX2YgPSBuZXcgSW50ZXJuYWxNYXAoKTtcbiAgICAgICAgdmFyIHJlc3VsdCA9IHRoaXMuX2Zba2V5XShhLCBiKTtcbiAgICAgICAgcmV0dXJuIGtleSA9PSAnc2V0JyA/IHRoaXMgOiByZXN1bHQ7XG4gICAgICAvLyBzdG9yZSBhbGwgdGhlIHJlc3Qgb24gbmF0aXZlIHdlYWttYXBcbiAgICAgIH0gcmV0dXJuIG1ldGhvZC5jYWxsKHRoaXMsIGEsIGIpO1xuICAgIH0pO1xuICB9KTtcbn1cbiIsIid1c2Ugc3RyaWN0JztcbnZhciB3ZWFrID0gcmVxdWlyZSgnLi9fY29sbGVjdGlvbi13ZWFrJyk7XG52YXIgdmFsaWRhdGUgPSByZXF1aXJlKCcuL192YWxpZGF0ZS1jb2xsZWN0aW9uJyk7XG52YXIgV0VBS19TRVQgPSAnV2Vha1NldCc7XG5cbi8vIDIzLjQgV2Vha1NldCBPYmplY3RzXG5yZXF1aXJlKCcuL19jb2xsZWN0aW9uJykoV0VBS19TRVQsIGZ1bmN0aW9uIChnZXQpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIFdlYWtTZXQoKSB7IHJldHVybiBnZXQodGhpcywgYXJndW1lbnRzLmxlbmd0aCA+IDAgPyBhcmd1bWVudHNbMF0gOiB1bmRlZmluZWQpOyB9O1xufSwge1xuICAvLyAyMy40LjMuMSBXZWFrU2V0LnByb3RvdHlwZS5hZGQodmFsdWUpXG4gIGFkZDogZnVuY3Rpb24gYWRkKHZhbHVlKSB7XG4gICAgcmV0dXJuIHdlYWsuZGVmKHZhbGlkYXRlKHRoaXMsIFdFQUtfU0VUKSwgdmFsdWUsIHRydWUpO1xuICB9XG59LCB3ZWFrLCBmYWxzZSwgdHJ1ZSk7XG4iLCJ2YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi9fZ2xvYmFsJyk7XG52YXIgaGlkZSA9IHJlcXVpcmUoJy4vX2hpZGUnKTtcbnZhciB1aWQgPSByZXF1aXJlKCcuL191aWQnKTtcbnZhciBUWVBFRCA9IHVpZCgndHlwZWRfYXJyYXknKTtcbnZhciBWSUVXID0gdWlkKCd2aWV3Jyk7XG52YXIgQUJWID0gISEoZ2xvYmFsLkFycmF5QnVmZmVyICYmIGdsb2JhbC5EYXRhVmlldyk7XG52YXIgQ09OU1RSID0gQUJWO1xudmFyIGkgPSAwO1xudmFyIGwgPSA5O1xudmFyIFR5cGVkO1xuXG52YXIgVHlwZWRBcnJheUNvbnN0cnVjdG9ycyA9IChcbiAgJ0ludDhBcnJheSxVaW50OEFycmF5LFVpbnQ4Q2xhbXBlZEFycmF5LEludDE2QXJyYXksVWludDE2QXJyYXksSW50MzJBcnJheSxVaW50MzJBcnJheSxGbG9hdDMyQXJyYXksRmxvYXQ2NEFycmF5J1xuKS5zcGxpdCgnLCcpO1xuXG53aGlsZSAoaSA8IGwpIHtcbiAgaWYgKFR5cGVkID0gZ2xvYmFsW1R5cGVkQXJyYXlDb25zdHJ1Y3RvcnNbaSsrXV0pIHtcbiAgICBoaWRlKFR5cGVkLnByb3RvdHlwZSwgVFlQRUQsIHRydWUpO1xuICAgIGhpZGUoVHlwZWQucHJvdG90eXBlLCBWSUVXLCB0cnVlKTtcbiAgfSBlbHNlIENPTlNUUiA9IGZhbHNlO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgQUJWOiBBQlYsXG4gIENPTlNUUjogQ09OU1RSLFxuICBUWVBFRDogVFlQRUQsXG4gIFZJRVc6IFZJRVdcbn07XG4iLCIvLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy10b2luZGV4XG52YXIgdG9JbnRlZ2VyID0gcmVxdWlyZSgnLi9fdG8taW50ZWdlcicpO1xudmFyIHRvTGVuZ3RoID0gcmVxdWlyZSgnLi9fdG8tbGVuZ3RoJyk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCkge1xuICBpZiAoaXQgPT09IHVuZGVmaW5lZCkgcmV0dXJuIDA7XG4gIHZhciBudW1iZXIgPSB0b0ludGVnZXIoaXQpO1xuICB2YXIgbGVuZ3RoID0gdG9MZW5ndGgobnVtYmVyKTtcbiAgaWYgKG51bWJlciAhPT0gbGVuZ3RoKSB0aHJvdyBSYW5nZUVycm9yKCdXcm9uZyBsZW5ndGghJyk7XG4gIHJldHVybiBsZW5ndGg7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4vX2dsb2JhbCcpO1xudmFyIERFU0NSSVBUT1JTID0gcmVxdWlyZSgnLi9fZGVzY3JpcHRvcnMnKTtcbnZhciBMSUJSQVJZID0gcmVxdWlyZSgnLi9fbGlicmFyeScpO1xudmFyICR0eXBlZCA9IHJlcXVpcmUoJy4vX3R5cGVkJyk7XG52YXIgaGlkZSA9IHJlcXVpcmUoJy4vX2hpZGUnKTtcbnZhciByZWRlZmluZUFsbCA9IHJlcXVpcmUoJy4vX3JlZGVmaW5lLWFsbCcpO1xudmFyIGZhaWxzID0gcmVxdWlyZSgnLi9fZmFpbHMnKTtcbnZhciBhbkluc3RhbmNlID0gcmVxdWlyZSgnLi9fYW4taW5zdGFuY2UnKTtcbnZhciB0b0ludGVnZXIgPSByZXF1aXJlKCcuL190by1pbnRlZ2VyJyk7XG52YXIgdG9MZW5ndGggPSByZXF1aXJlKCcuL190by1sZW5ndGgnKTtcbnZhciB0b0luZGV4ID0gcmVxdWlyZSgnLi9fdG8taW5kZXgnKTtcbnZhciBnT1BOID0gcmVxdWlyZSgnLi9fb2JqZWN0LWdvcG4nKS5mO1xudmFyIGRQID0gcmVxdWlyZSgnLi9fb2JqZWN0LWRwJykuZjtcbnZhciBhcnJheUZpbGwgPSByZXF1aXJlKCcuL19hcnJheS1maWxsJyk7XG52YXIgc2V0VG9TdHJpbmdUYWcgPSByZXF1aXJlKCcuL19zZXQtdG8tc3RyaW5nLXRhZycpO1xudmFyIEFSUkFZX0JVRkZFUiA9ICdBcnJheUJ1ZmZlcic7XG52YXIgREFUQV9WSUVXID0gJ0RhdGFWaWV3JztcbnZhciBQUk9UT1RZUEUgPSAncHJvdG90eXBlJztcbnZhciBXUk9OR19MRU5HVEggPSAnV3JvbmcgbGVuZ3RoISc7XG52YXIgV1JPTkdfSU5ERVggPSAnV3JvbmcgaW5kZXghJztcbnZhciAkQXJyYXlCdWZmZXIgPSBnbG9iYWxbQVJSQVlfQlVGRkVSXTtcbnZhciAkRGF0YVZpZXcgPSBnbG9iYWxbREFUQV9WSUVXXTtcbnZhciBNYXRoID0gZ2xvYmFsLk1hdGg7XG52YXIgUmFuZ2VFcnJvciA9IGdsb2JhbC5SYW5nZUVycm9yO1xuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXNoYWRvdy1yZXN0cmljdGVkLW5hbWVzXG52YXIgSW5maW5pdHkgPSBnbG9iYWwuSW5maW5pdHk7XG52YXIgQmFzZUJ1ZmZlciA9ICRBcnJheUJ1ZmZlcjtcbnZhciBhYnMgPSBNYXRoLmFicztcbnZhciBwb3cgPSBNYXRoLnBvdztcbnZhciBmbG9vciA9IE1hdGguZmxvb3I7XG52YXIgbG9nID0gTWF0aC5sb2c7XG52YXIgTE4yID0gTWF0aC5MTjI7XG52YXIgQlVGRkVSID0gJ2J1ZmZlcic7XG52YXIgQllURV9MRU5HVEggPSAnYnl0ZUxlbmd0aCc7XG52YXIgQllURV9PRkZTRVQgPSAnYnl0ZU9mZnNldCc7XG52YXIgJEJVRkZFUiA9IERFU0NSSVBUT1JTID8gJ19iJyA6IEJVRkZFUjtcbnZhciAkTEVOR1RIID0gREVTQ1JJUFRPUlMgPyAnX2wnIDogQllURV9MRU5HVEg7XG52YXIgJE9GRlNFVCA9IERFU0NSSVBUT1JTID8gJ19vJyA6IEJZVEVfT0ZGU0VUO1xuXG4vLyBJRUVFNzU0IGNvbnZlcnNpb25zIGJhc2VkIG9uIGh0dHBzOi8vZ2l0aHViLmNvbS9mZXJvc3MvaWVlZTc1NFxuZnVuY3Rpb24gcGFja0lFRUU3NTQodmFsdWUsIG1MZW4sIG5CeXRlcykge1xuICB2YXIgYnVmZmVyID0gbmV3IEFycmF5KG5CeXRlcyk7XG4gIHZhciBlTGVuID0gbkJ5dGVzICogOCAtIG1MZW4gLSAxO1xuICB2YXIgZU1heCA9ICgxIDw8IGVMZW4pIC0gMTtcbiAgdmFyIGVCaWFzID0gZU1heCA+PiAxO1xuICB2YXIgcnQgPSBtTGVuID09PSAyMyA/IHBvdygyLCAtMjQpIC0gcG93KDIsIC03NykgOiAwO1xuICB2YXIgaSA9IDA7XG4gIHZhciBzID0gdmFsdWUgPCAwIHx8IHZhbHVlID09PSAwICYmIDEgLyB2YWx1ZSA8IDAgPyAxIDogMDtcbiAgdmFyIGUsIG0sIGM7XG4gIHZhbHVlID0gYWJzKHZhbHVlKTtcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXNlbGYtY29tcGFyZVxuICBpZiAodmFsdWUgIT0gdmFsdWUgfHwgdmFsdWUgPT09IEluZmluaXR5KSB7XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXNlbGYtY29tcGFyZVxuICAgIG0gPSB2YWx1ZSAhPSB2YWx1ZSA/IDEgOiAwO1xuICAgIGUgPSBlTWF4O1xuICB9IGVsc2Uge1xuICAgIGUgPSBmbG9vcihsb2codmFsdWUpIC8gTE4yKTtcbiAgICBpZiAodmFsdWUgKiAoYyA9IHBvdygyLCAtZSkpIDwgMSkge1xuICAgICAgZS0tO1xuICAgICAgYyAqPSAyO1xuICAgIH1cbiAgICBpZiAoZSArIGVCaWFzID49IDEpIHtcbiAgICAgIHZhbHVlICs9IHJ0IC8gYztcbiAgICB9IGVsc2Uge1xuICAgICAgdmFsdWUgKz0gcnQgKiBwb3coMiwgMSAtIGVCaWFzKTtcbiAgICB9XG4gICAgaWYgKHZhbHVlICogYyA+PSAyKSB7XG4gICAgICBlKys7XG4gICAgICBjIC89IDI7XG4gICAgfVxuICAgIGlmIChlICsgZUJpYXMgPj0gZU1heCkge1xuICAgICAgbSA9IDA7XG4gICAgICBlID0gZU1heDtcbiAgICB9IGVsc2UgaWYgKGUgKyBlQmlhcyA+PSAxKSB7XG4gICAgICBtID0gKHZhbHVlICogYyAtIDEpICogcG93KDIsIG1MZW4pO1xuICAgICAgZSA9IGUgKyBlQmlhcztcbiAgICB9IGVsc2Uge1xuICAgICAgbSA9IHZhbHVlICogcG93KDIsIGVCaWFzIC0gMSkgKiBwb3coMiwgbUxlbik7XG4gICAgICBlID0gMDtcbiAgICB9XG4gIH1cbiAgZm9yICg7IG1MZW4gPj0gODsgYnVmZmVyW2krK10gPSBtICYgMjU1LCBtIC89IDI1NiwgbUxlbiAtPSA4KTtcbiAgZSA9IGUgPDwgbUxlbiB8IG07XG4gIGVMZW4gKz0gbUxlbjtcbiAgZm9yICg7IGVMZW4gPiAwOyBidWZmZXJbaSsrXSA9IGUgJiAyNTUsIGUgLz0gMjU2LCBlTGVuIC09IDgpO1xuICBidWZmZXJbLS1pXSB8PSBzICogMTI4O1xuICByZXR1cm4gYnVmZmVyO1xufVxuZnVuY3Rpb24gdW5wYWNrSUVFRTc1NChidWZmZXIsIG1MZW4sIG5CeXRlcykge1xuICB2YXIgZUxlbiA9IG5CeXRlcyAqIDggLSBtTGVuIC0gMTtcbiAgdmFyIGVNYXggPSAoMSA8PCBlTGVuKSAtIDE7XG4gIHZhciBlQmlhcyA9IGVNYXggPj4gMTtcbiAgdmFyIG5CaXRzID0gZUxlbiAtIDc7XG4gIHZhciBpID0gbkJ5dGVzIC0gMTtcbiAgdmFyIHMgPSBidWZmZXJbaS0tXTtcbiAgdmFyIGUgPSBzICYgMTI3O1xuICB2YXIgbTtcbiAgcyA+Pj0gNztcbiAgZm9yICg7IG5CaXRzID4gMDsgZSA9IGUgKiAyNTYgKyBidWZmZXJbaV0sIGktLSwgbkJpdHMgLT0gOCk7XG4gIG0gPSBlICYgKDEgPDwgLW5CaXRzKSAtIDE7XG4gIGUgPj49IC1uQml0cztcbiAgbkJpdHMgKz0gbUxlbjtcbiAgZm9yICg7IG5CaXRzID4gMDsgbSA9IG0gKiAyNTYgKyBidWZmZXJbaV0sIGktLSwgbkJpdHMgLT0gOCk7XG4gIGlmIChlID09PSAwKSB7XG4gICAgZSA9IDEgLSBlQmlhcztcbiAgfSBlbHNlIGlmIChlID09PSBlTWF4KSB7XG4gICAgcmV0dXJuIG0gPyBOYU4gOiBzID8gLUluZmluaXR5IDogSW5maW5pdHk7XG4gIH0gZWxzZSB7XG4gICAgbSA9IG0gKyBwb3coMiwgbUxlbik7XG4gICAgZSA9IGUgLSBlQmlhcztcbiAgfSByZXR1cm4gKHMgPyAtMSA6IDEpICogbSAqIHBvdygyLCBlIC0gbUxlbik7XG59XG5cbmZ1bmN0aW9uIHVucGFja0kzMihieXRlcykge1xuICByZXR1cm4gYnl0ZXNbM10gPDwgMjQgfCBieXRlc1syXSA8PCAxNiB8IGJ5dGVzWzFdIDw8IDggfCBieXRlc1swXTtcbn1cbmZ1bmN0aW9uIHBhY2tJOChpdCkge1xuICByZXR1cm4gW2l0ICYgMHhmZl07XG59XG5mdW5jdGlvbiBwYWNrSTE2KGl0KSB7XG4gIHJldHVybiBbaXQgJiAweGZmLCBpdCA+PiA4ICYgMHhmZl07XG59XG5mdW5jdGlvbiBwYWNrSTMyKGl0KSB7XG4gIHJldHVybiBbaXQgJiAweGZmLCBpdCA+PiA4ICYgMHhmZiwgaXQgPj4gMTYgJiAweGZmLCBpdCA+PiAyNCAmIDB4ZmZdO1xufVxuZnVuY3Rpb24gcGFja0Y2NChpdCkge1xuICByZXR1cm4gcGFja0lFRUU3NTQoaXQsIDUyLCA4KTtcbn1cbmZ1bmN0aW9uIHBhY2tGMzIoaXQpIHtcbiAgcmV0dXJuIHBhY2tJRUVFNzU0KGl0LCAyMywgNCk7XG59XG5cbmZ1bmN0aW9uIGFkZEdldHRlcihDLCBrZXksIGludGVybmFsKSB7XG4gIGRQKENbUFJPVE9UWVBFXSwga2V5LCB7IGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gdGhpc1tpbnRlcm5hbF07IH0gfSk7XG59XG5cbmZ1bmN0aW9uIGdldCh2aWV3LCBieXRlcywgaW5kZXgsIGlzTGl0dGxlRW5kaWFuKSB7XG4gIHZhciBudW1JbmRleCA9ICtpbmRleDtcbiAgdmFyIGludEluZGV4ID0gdG9JbmRleChudW1JbmRleCk7XG4gIGlmIChpbnRJbmRleCArIGJ5dGVzID4gdmlld1skTEVOR1RIXSkgdGhyb3cgUmFuZ2VFcnJvcihXUk9OR19JTkRFWCk7XG4gIHZhciBzdG9yZSA9IHZpZXdbJEJVRkZFUl0uX2I7XG4gIHZhciBzdGFydCA9IGludEluZGV4ICsgdmlld1skT0ZGU0VUXTtcbiAgdmFyIHBhY2sgPSBzdG9yZS5zbGljZShzdGFydCwgc3RhcnQgKyBieXRlcyk7XG4gIHJldHVybiBpc0xpdHRsZUVuZGlhbiA/IHBhY2sgOiBwYWNrLnJldmVyc2UoKTtcbn1cbmZ1bmN0aW9uIHNldCh2aWV3LCBieXRlcywgaW5kZXgsIGNvbnZlcnNpb24sIHZhbHVlLCBpc0xpdHRsZUVuZGlhbikge1xuICB2YXIgbnVtSW5kZXggPSAraW5kZXg7XG4gIHZhciBpbnRJbmRleCA9IHRvSW5kZXgobnVtSW5kZXgpO1xuICBpZiAoaW50SW5kZXggKyBieXRlcyA+IHZpZXdbJExFTkdUSF0pIHRocm93IFJhbmdlRXJyb3IoV1JPTkdfSU5ERVgpO1xuICB2YXIgc3RvcmUgPSB2aWV3WyRCVUZGRVJdLl9iO1xuICB2YXIgc3RhcnQgPSBpbnRJbmRleCArIHZpZXdbJE9GRlNFVF07XG4gIHZhciBwYWNrID0gY29udmVyc2lvbigrdmFsdWUpO1xuICBmb3IgKHZhciBpID0gMDsgaSA8IGJ5dGVzOyBpKyspIHN0b3JlW3N0YXJ0ICsgaV0gPSBwYWNrW2lzTGl0dGxlRW5kaWFuID8gaSA6IGJ5dGVzIC0gaSAtIDFdO1xufVxuXG5pZiAoISR0eXBlZC5BQlYpIHtcbiAgJEFycmF5QnVmZmVyID0gZnVuY3Rpb24gQXJyYXlCdWZmZXIobGVuZ3RoKSB7XG4gICAgYW5JbnN0YW5jZSh0aGlzLCAkQXJyYXlCdWZmZXIsIEFSUkFZX0JVRkZFUik7XG4gICAgdmFyIGJ5dGVMZW5ndGggPSB0b0luZGV4KGxlbmd0aCk7XG4gICAgdGhpcy5fYiA9IGFycmF5RmlsbC5jYWxsKG5ldyBBcnJheShieXRlTGVuZ3RoKSwgMCk7XG4gICAgdGhpc1skTEVOR1RIXSA9IGJ5dGVMZW5ndGg7XG4gIH07XG5cbiAgJERhdGFWaWV3ID0gZnVuY3Rpb24gRGF0YVZpZXcoYnVmZmVyLCBieXRlT2Zmc2V0LCBieXRlTGVuZ3RoKSB7XG4gICAgYW5JbnN0YW5jZSh0aGlzLCAkRGF0YVZpZXcsIERBVEFfVklFVyk7XG4gICAgYW5JbnN0YW5jZShidWZmZXIsICRBcnJheUJ1ZmZlciwgREFUQV9WSUVXKTtcbiAgICB2YXIgYnVmZmVyTGVuZ3RoID0gYnVmZmVyWyRMRU5HVEhdO1xuICAgIHZhciBvZmZzZXQgPSB0b0ludGVnZXIoYnl0ZU9mZnNldCk7XG4gICAgaWYgKG9mZnNldCA8IDAgfHwgb2Zmc2V0ID4gYnVmZmVyTGVuZ3RoKSB0aHJvdyBSYW5nZUVycm9yKCdXcm9uZyBvZmZzZXQhJyk7XG4gICAgYnl0ZUxlbmd0aCA9IGJ5dGVMZW5ndGggPT09IHVuZGVmaW5lZCA/IGJ1ZmZlckxlbmd0aCAtIG9mZnNldCA6IHRvTGVuZ3RoKGJ5dGVMZW5ndGgpO1xuICAgIGlmIChvZmZzZXQgKyBieXRlTGVuZ3RoID4gYnVmZmVyTGVuZ3RoKSB0aHJvdyBSYW5nZUVycm9yKFdST05HX0xFTkdUSCk7XG4gICAgdGhpc1skQlVGRkVSXSA9IGJ1ZmZlcjtcbiAgICB0aGlzWyRPRkZTRVRdID0gb2Zmc2V0O1xuICAgIHRoaXNbJExFTkdUSF0gPSBieXRlTGVuZ3RoO1xuICB9O1xuXG4gIGlmIChERVNDUklQVE9SUykge1xuICAgIGFkZEdldHRlcigkQXJyYXlCdWZmZXIsIEJZVEVfTEVOR1RILCAnX2wnKTtcbiAgICBhZGRHZXR0ZXIoJERhdGFWaWV3LCBCVUZGRVIsICdfYicpO1xuICAgIGFkZEdldHRlcigkRGF0YVZpZXcsIEJZVEVfTEVOR1RILCAnX2wnKTtcbiAgICBhZGRHZXR0ZXIoJERhdGFWaWV3LCBCWVRFX09GRlNFVCwgJ19vJyk7XG4gIH1cblxuICByZWRlZmluZUFsbCgkRGF0YVZpZXdbUFJPVE9UWVBFXSwge1xuICAgIGdldEludDg6IGZ1bmN0aW9uIGdldEludDgoYnl0ZU9mZnNldCkge1xuICAgICAgcmV0dXJuIGdldCh0aGlzLCAxLCBieXRlT2Zmc2V0KVswXSA8PCAyNCA+PiAyNDtcbiAgICB9LFxuICAgIGdldFVpbnQ4OiBmdW5jdGlvbiBnZXRVaW50OChieXRlT2Zmc2V0KSB7XG4gICAgICByZXR1cm4gZ2V0KHRoaXMsIDEsIGJ5dGVPZmZzZXQpWzBdO1xuICAgIH0sXG4gICAgZ2V0SW50MTY6IGZ1bmN0aW9uIGdldEludDE2KGJ5dGVPZmZzZXQgLyogLCBsaXR0bGVFbmRpYW4gKi8pIHtcbiAgICAgIHZhciBieXRlcyA9IGdldCh0aGlzLCAyLCBieXRlT2Zmc2V0LCBhcmd1bWVudHNbMV0pO1xuICAgICAgcmV0dXJuIChieXRlc1sxXSA8PCA4IHwgYnl0ZXNbMF0pIDw8IDE2ID4+IDE2O1xuICAgIH0sXG4gICAgZ2V0VWludDE2OiBmdW5jdGlvbiBnZXRVaW50MTYoYnl0ZU9mZnNldCAvKiAsIGxpdHRsZUVuZGlhbiAqLykge1xuICAgICAgdmFyIGJ5dGVzID0gZ2V0KHRoaXMsIDIsIGJ5dGVPZmZzZXQsIGFyZ3VtZW50c1sxXSk7XG4gICAgICByZXR1cm4gYnl0ZXNbMV0gPDwgOCB8IGJ5dGVzWzBdO1xuICAgIH0sXG4gICAgZ2V0SW50MzI6IGZ1bmN0aW9uIGdldEludDMyKGJ5dGVPZmZzZXQgLyogLCBsaXR0bGVFbmRpYW4gKi8pIHtcbiAgICAgIHJldHVybiB1bnBhY2tJMzIoZ2V0KHRoaXMsIDQsIGJ5dGVPZmZzZXQsIGFyZ3VtZW50c1sxXSkpO1xuICAgIH0sXG4gICAgZ2V0VWludDMyOiBmdW5jdGlvbiBnZXRVaW50MzIoYnl0ZU9mZnNldCAvKiAsIGxpdHRsZUVuZGlhbiAqLykge1xuICAgICAgcmV0dXJuIHVucGFja0kzMihnZXQodGhpcywgNCwgYnl0ZU9mZnNldCwgYXJndW1lbnRzWzFdKSkgPj4+IDA7XG4gICAgfSxcbiAgICBnZXRGbG9hdDMyOiBmdW5jdGlvbiBnZXRGbG9hdDMyKGJ5dGVPZmZzZXQgLyogLCBsaXR0bGVFbmRpYW4gKi8pIHtcbiAgICAgIHJldHVybiB1bnBhY2tJRUVFNzU0KGdldCh0aGlzLCA0LCBieXRlT2Zmc2V0LCBhcmd1bWVudHNbMV0pLCAyMywgNCk7XG4gICAgfSxcbiAgICBnZXRGbG9hdDY0OiBmdW5jdGlvbiBnZXRGbG9hdDY0KGJ5dGVPZmZzZXQgLyogLCBsaXR0bGVFbmRpYW4gKi8pIHtcbiAgICAgIHJldHVybiB1bnBhY2tJRUVFNzU0KGdldCh0aGlzLCA4LCBieXRlT2Zmc2V0LCBhcmd1bWVudHNbMV0pLCA1MiwgOCk7XG4gICAgfSxcbiAgICBzZXRJbnQ4OiBmdW5jdGlvbiBzZXRJbnQ4KGJ5dGVPZmZzZXQsIHZhbHVlKSB7XG4gICAgICBzZXQodGhpcywgMSwgYnl0ZU9mZnNldCwgcGFja0k4LCB2YWx1ZSk7XG4gICAgfSxcbiAgICBzZXRVaW50ODogZnVuY3Rpb24gc2V0VWludDgoYnl0ZU9mZnNldCwgdmFsdWUpIHtcbiAgICAgIHNldCh0aGlzLCAxLCBieXRlT2Zmc2V0LCBwYWNrSTgsIHZhbHVlKTtcbiAgICB9LFxuICAgIHNldEludDE2OiBmdW5jdGlvbiBzZXRJbnQxNihieXRlT2Zmc2V0LCB2YWx1ZSAvKiAsIGxpdHRsZUVuZGlhbiAqLykge1xuICAgICAgc2V0KHRoaXMsIDIsIGJ5dGVPZmZzZXQsIHBhY2tJMTYsIHZhbHVlLCBhcmd1bWVudHNbMl0pO1xuICAgIH0sXG4gICAgc2V0VWludDE2OiBmdW5jdGlvbiBzZXRVaW50MTYoYnl0ZU9mZnNldCwgdmFsdWUgLyogLCBsaXR0bGVFbmRpYW4gKi8pIHtcbiAgICAgIHNldCh0aGlzLCAyLCBieXRlT2Zmc2V0LCBwYWNrSTE2LCB2YWx1ZSwgYXJndW1lbnRzWzJdKTtcbiAgICB9LFxuICAgIHNldEludDMyOiBmdW5jdGlvbiBzZXRJbnQzMihieXRlT2Zmc2V0LCB2YWx1ZSAvKiAsIGxpdHRsZUVuZGlhbiAqLykge1xuICAgICAgc2V0KHRoaXMsIDQsIGJ5dGVPZmZzZXQsIHBhY2tJMzIsIHZhbHVlLCBhcmd1bWVudHNbMl0pO1xuICAgIH0sXG4gICAgc2V0VWludDMyOiBmdW5jdGlvbiBzZXRVaW50MzIoYnl0ZU9mZnNldCwgdmFsdWUgLyogLCBsaXR0bGVFbmRpYW4gKi8pIHtcbiAgICAgIHNldCh0aGlzLCA0LCBieXRlT2Zmc2V0LCBwYWNrSTMyLCB2YWx1ZSwgYXJndW1lbnRzWzJdKTtcbiAgICB9LFxuICAgIHNldEZsb2F0MzI6IGZ1bmN0aW9uIHNldEZsb2F0MzIoYnl0ZU9mZnNldCwgdmFsdWUgLyogLCBsaXR0bGVFbmRpYW4gKi8pIHtcbiAgICAgIHNldCh0aGlzLCA0LCBieXRlT2Zmc2V0LCBwYWNrRjMyLCB2YWx1ZSwgYXJndW1lbnRzWzJdKTtcbiAgICB9LFxuICAgIHNldEZsb2F0NjQ6IGZ1bmN0aW9uIHNldEZsb2F0NjQoYnl0ZU9mZnNldCwgdmFsdWUgLyogLCBsaXR0bGVFbmRpYW4gKi8pIHtcbiAgICAgIHNldCh0aGlzLCA4LCBieXRlT2Zmc2V0LCBwYWNrRjY0LCB2YWx1ZSwgYXJndW1lbnRzWzJdKTtcbiAgICB9XG4gIH0pO1xufSBlbHNlIHtcbiAgaWYgKCFmYWlscyhmdW5jdGlvbiAoKSB7XG4gICAgJEFycmF5QnVmZmVyKDEpO1xuICB9KSB8fCAhZmFpbHMoZnVuY3Rpb24gKCkge1xuICAgIG5ldyAkQXJyYXlCdWZmZXIoLTEpOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLW5ld1xuICB9KSB8fCBmYWlscyhmdW5jdGlvbiAoKSB7XG4gICAgbmV3ICRBcnJheUJ1ZmZlcigpOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLW5ld1xuICAgIG5ldyAkQXJyYXlCdWZmZXIoMS41KTsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1uZXdcbiAgICBuZXcgJEFycmF5QnVmZmVyKE5hTik7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tbmV3XG4gICAgcmV0dXJuICRBcnJheUJ1ZmZlci5uYW1lICE9IEFSUkFZX0JVRkZFUjtcbiAgfSkpIHtcbiAgICAkQXJyYXlCdWZmZXIgPSBmdW5jdGlvbiBBcnJheUJ1ZmZlcihsZW5ndGgpIHtcbiAgICAgIGFuSW5zdGFuY2UodGhpcywgJEFycmF5QnVmZmVyKTtcbiAgICAgIHJldHVybiBuZXcgQmFzZUJ1ZmZlcih0b0luZGV4KGxlbmd0aCkpO1xuICAgIH07XG4gICAgdmFyIEFycmF5QnVmZmVyUHJvdG8gPSAkQXJyYXlCdWZmZXJbUFJPVE9UWVBFXSA9IEJhc2VCdWZmZXJbUFJPVE9UWVBFXTtcbiAgICBmb3IgKHZhciBrZXlzID0gZ09QTihCYXNlQnVmZmVyKSwgaiA9IDAsIGtleTsga2V5cy5sZW5ndGggPiBqOykge1xuICAgICAgaWYgKCEoKGtleSA9IGtleXNbaisrXSkgaW4gJEFycmF5QnVmZmVyKSkgaGlkZSgkQXJyYXlCdWZmZXIsIGtleSwgQmFzZUJ1ZmZlcltrZXldKTtcbiAgICB9XG4gICAgaWYgKCFMSUJSQVJZKSBBcnJheUJ1ZmZlclByb3RvLmNvbnN0cnVjdG9yID0gJEFycmF5QnVmZmVyO1xuICB9XG4gIC8vIGlPUyBTYWZhcmkgNy54IGJ1Z1xuICB2YXIgdmlldyA9IG5ldyAkRGF0YVZpZXcobmV3ICRBcnJheUJ1ZmZlcigyKSk7XG4gIHZhciAkc2V0SW50OCA9ICREYXRhVmlld1tQUk9UT1RZUEVdLnNldEludDg7XG4gIHZpZXcuc2V0SW50OCgwLCAyMTQ3NDgzNjQ4KTtcbiAgdmlldy5zZXRJbnQ4KDEsIDIxNDc0ODM2NDkpO1xuICBpZiAodmlldy5nZXRJbnQ4KDApIHx8ICF2aWV3LmdldEludDgoMSkpIHJlZGVmaW5lQWxsKCREYXRhVmlld1tQUk9UT1RZUEVdLCB7XG4gICAgc2V0SW50ODogZnVuY3Rpb24gc2V0SW50OChieXRlT2Zmc2V0LCB2YWx1ZSkge1xuICAgICAgJHNldEludDguY2FsbCh0aGlzLCBieXRlT2Zmc2V0LCB2YWx1ZSA8PCAyNCA+PiAyNCk7XG4gICAgfSxcbiAgICBzZXRVaW50ODogZnVuY3Rpb24gc2V0VWludDgoYnl0ZU9mZnNldCwgdmFsdWUpIHtcbiAgICAgICRzZXRJbnQ4LmNhbGwodGhpcywgYnl0ZU9mZnNldCwgdmFsdWUgPDwgMjQgPj4gMjQpO1xuICAgIH1cbiAgfSwgdHJ1ZSk7XG59XG5zZXRUb1N0cmluZ1RhZygkQXJyYXlCdWZmZXIsIEFSUkFZX0JVRkZFUik7XG5zZXRUb1N0cmluZ1RhZygkRGF0YVZpZXcsIERBVEFfVklFVyk7XG5oaWRlKCREYXRhVmlld1tQUk9UT1RZUEVdLCAkdHlwZWQuVklFVywgdHJ1ZSk7XG5leHBvcnRzW0FSUkFZX0JVRkZFUl0gPSAkQXJyYXlCdWZmZXI7XG5leHBvcnRzW0RBVEFfVklFV10gPSAkRGF0YVZpZXc7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyICR0eXBlZCA9IHJlcXVpcmUoJy4vX3R5cGVkJyk7XG52YXIgYnVmZmVyID0gcmVxdWlyZSgnLi9fdHlwZWQtYnVmZmVyJyk7XG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKTtcbnZhciB0b0Fic29sdXRlSW5kZXggPSByZXF1aXJlKCcuL190by1hYnNvbHV0ZS1pbmRleCcpO1xudmFyIHRvTGVuZ3RoID0gcmVxdWlyZSgnLi9fdG8tbGVuZ3RoJyk7XG52YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuL19pcy1vYmplY3QnKTtcbnZhciBBcnJheUJ1ZmZlciA9IHJlcXVpcmUoJy4vX2dsb2JhbCcpLkFycmF5QnVmZmVyO1xudmFyIHNwZWNpZXNDb25zdHJ1Y3RvciA9IHJlcXVpcmUoJy4vX3NwZWNpZXMtY29uc3RydWN0b3InKTtcbnZhciAkQXJyYXlCdWZmZXIgPSBidWZmZXIuQXJyYXlCdWZmZXI7XG52YXIgJERhdGFWaWV3ID0gYnVmZmVyLkRhdGFWaWV3O1xudmFyICRpc1ZpZXcgPSAkdHlwZWQuQUJWICYmIEFycmF5QnVmZmVyLmlzVmlldztcbnZhciAkc2xpY2UgPSAkQXJyYXlCdWZmZXIucHJvdG90eXBlLnNsaWNlO1xudmFyIFZJRVcgPSAkdHlwZWQuVklFVztcbnZhciBBUlJBWV9CVUZGRVIgPSAnQXJyYXlCdWZmZXInO1xuXG4kZXhwb3J0KCRleHBvcnQuRyArICRleHBvcnQuVyArICRleHBvcnQuRiAqIChBcnJheUJ1ZmZlciAhPT0gJEFycmF5QnVmZmVyKSwgeyBBcnJheUJ1ZmZlcjogJEFycmF5QnVmZmVyIH0pO1xuXG4kZXhwb3J0KCRleHBvcnQuUyArICRleHBvcnQuRiAqICEkdHlwZWQuQ09OU1RSLCBBUlJBWV9CVUZGRVIsIHtcbiAgLy8gMjQuMS4zLjEgQXJyYXlCdWZmZXIuaXNWaWV3KGFyZylcbiAgaXNWaWV3OiBmdW5jdGlvbiBpc1ZpZXcoaXQpIHtcbiAgICByZXR1cm4gJGlzVmlldyAmJiAkaXNWaWV3KGl0KSB8fCBpc09iamVjdChpdCkgJiYgVklFVyBpbiBpdDtcbiAgfVxufSk7XG5cbiRleHBvcnQoJGV4cG9ydC5QICsgJGV4cG9ydC5VICsgJGV4cG9ydC5GICogcmVxdWlyZSgnLi9fZmFpbHMnKShmdW5jdGlvbiAoKSB7XG4gIHJldHVybiAhbmV3ICRBcnJheUJ1ZmZlcigyKS5zbGljZSgxLCB1bmRlZmluZWQpLmJ5dGVMZW5ndGg7XG59KSwgQVJSQVlfQlVGRkVSLCB7XG4gIC8vIDI0LjEuNC4zIEFycmF5QnVmZmVyLnByb3RvdHlwZS5zbGljZShzdGFydCwgZW5kKVxuICBzbGljZTogZnVuY3Rpb24gc2xpY2Uoc3RhcnQsIGVuZCkge1xuICAgIGlmICgkc2xpY2UgIT09IHVuZGVmaW5lZCAmJiBlbmQgPT09IHVuZGVmaW5lZCkgcmV0dXJuICRzbGljZS5jYWxsKGFuT2JqZWN0KHRoaXMpLCBzdGFydCk7IC8vIEZGIGZpeFxuICAgIHZhciBsZW4gPSBhbk9iamVjdCh0aGlzKS5ieXRlTGVuZ3RoO1xuICAgIHZhciBmaXJzdCA9IHRvQWJzb2x1dGVJbmRleChzdGFydCwgbGVuKTtcbiAgICB2YXIgZmluID0gdG9BYnNvbHV0ZUluZGV4KGVuZCA9PT0gdW5kZWZpbmVkID8gbGVuIDogZW5kLCBsZW4pO1xuICAgIHZhciByZXN1bHQgPSBuZXcgKHNwZWNpZXNDb25zdHJ1Y3Rvcih0aGlzLCAkQXJyYXlCdWZmZXIpKSh0b0xlbmd0aChmaW4gLSBmaXJzdCkpO1xuICAgIHZhciB2aWV3UyA9IG5ldyAkRGF0YVZpZXcodGhpcyk7XG4gICAgdmFyIHZpZXdUID0gbmV3ICREYXRhVmlldyhyZXN1bHQpO1xuICAgIHZhciBpbmRleCA9IDA7XG4gICAgd2hpbGUgKGZpcnN0IDwgZmluKSB7XG4gICAgICB2aWV3VC5zZXRVaW50OChpbmRleCsrLCB2aWV3Uy5nZXRVaW50OChmaXJzdCsrKSk7XG4gICAgfSByZXR1cm4gcmVzdWx0O1xuICB9XG59KTtcblxucmVxdWlyZSgnLi9fc2V0LXNwZWNpZXMnKShBUlJBWV9CVUZGRVIpO1xuIiwidmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbiRleHBvcnQoJGV4cG9ydC5HICsgJGV4cG9ydC5XICsgJGV4cG9ydC5GICogIXJlcXVpcmUoJy4vX3R5cGVkJykuQUJWLCB7XG4gIERhdGFWaWV3OiByZXF1aXJlKCcuL190eXBlZC1idWZmZXInKS5EYXRhVmlld1xufSk7XG4iLCIndXNlIHN0cmljdCc7XG5pZiAocmVxdWlyZSgnLi9fZGVzY3JpcHRvcnMnKSkge1xuICB2YXIgTElCUkFSWSA9IHJlcXVpcmUoJy4vX2xpYnJhcnknKTtcbiAgdmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4vX2dsb2JhbCcpO1xuICB2YXIgZmFpbHMgPSByZXF1aXJlKCcuL19mYWlscycpO1xuICB2YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xuICB2YXIgJHR5cGVkID0gcmVxdWlyZSgnLi9fdHlwZWQnKTtcbiAgdmFyICRidWZmZXIgPSByZXF1aXJlKCcuL190eXBlZC1idWZmZXInKTtcbiAgdmFyIGN0eCA9IHJlcXVpcmUoJy4vX2N0eCcpO1xuICB2YXIgYW5JbnN0YW5jZSA9IHJlcXVpcmUoJy4vX2FuLWluc3RhbmNlJyk7XG4gIHZhciBwcm9wZXJ0eURlc2MgPSByZXF1aXJlKCcuL19wcm9wZXJ0eS1kZXNjJyk7XG4gIHZhciBoaWRlID0gcmVxdWlyZSgnLi9faGlkZScpO1xuICB2YXIgcmVkZWZpbmVBbGwgPSByZXF1aXJlKCcuL19yZWRlZmluZS1hbGwnKTtcbiAgdmFyIHRvSW50ZWdlciA9IHJlcXVpcmUoJy4vX3RvLWludGVnZXInKTtcbiAgdmFyIHRvTGVuZ3RoID0gcmVxdWlyZSgnLi9fdG8tbGVuZ3RoJyk7XG4gIHZhciB0b0luZGV4ID0gcmVxdWlyZSgnLi9fdG8taW5kZXgnKTtcbiAgdmFyIHRvQWJzb2x1dGVJbmRleCA9IHJlcXVpcmUoJy4vX3RvLWFic29sdXRlLWluZGV4Jyk7XG4gIHZhciB0b1ByaW1pdGl2ZSA9IHJlcXVpcmUoJy4vX3RvLXByaW1pdGl2ZScpO1xuICB2YXIgaGFzID0gcmVxdWlyZSgnLi9faGFzJyk7XG4gIHZhciBjbGFzc29mID0gcmVxdWlyZSgnLi9fY2xhc3NvZicpO1xuICB2YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuL19pcy1vYmplY3QnKTtcbiAgdmFyIHRvT2JqZWN0ID0gcmVxdWlyZSgnLi9fdG8tb2JqZWN0Jyk7XG4gIHZhciBpc0FycmF5SXRlciA9IHJlcXVpcmUoJy4vX2lzLWFycmF5LWl0ZXInKTtcbiAgdmFyIGNyZWF0ZSA9IHJlcXVpcmUoJy4vX29iamVjdC1jcmVhdGUnKTtcbiAgdmFyIGdldFByb3RvdHlwZU9mID0gcmVxdWlyZSgnLi9fb2JqZWN0LWdwbycpO1xuICB2YXIgZ09QTiA9IHJlcXVpcmUoJy4vX29iamVjdC1nb3BuJykuZjtcbiAgdmFyIGdldEl0ZXJGbiA9IHJlcXVpcmUoJy4vY29yZS5nZXQtaXRlcmF0b3ItbWV0aG9kJyk7XG4gIHZhciB1aWQgPSByZXF1aXJlKCcuL191aWQnKTtcbiAgdmFyIHdrcyA9IHJlcXVpcmUoJy4vX3drcycpO1xuICB2YXIgY3JlYXRlQXJyYXlNZXRob2QgPSByZXF1aXJlKCcuL19hcnJheS1tZXRob2RzJyk7XG4gIHZhciBjcmVhdGVBcnJheUluY2x1ZGVzID0gcmVxdWlyZSgnLi9fYXJyYXktaW5jbHVkZXMnKTtcbiAgdmFyIHNwZWNpZXNDb25zdHJ1Y3RvciA9IHJlcXVpcmUoJy4vX3NwZWNpZXMtY29uc3RydWN0b3InKTtcbiAgdmFyIEFycmF5SXRlcmF0b3JzID0gcmVxdWlyZSgnLi9lczYuYXJyYXkuaXRlcmF0b3InKTtcbiAgdmFyIEl0ZXJhdG9ycyA9IHJlcXVpcmUoJy4vX2l0ZXJhdG9ycycpO1xuICB2YXIgJGl0ZXJEZXRlY3QgPSByZXF1aXJlKCcuL19pdGVyLWRldGVjdCcpO1xuICB2YXIgc2V0U3BlY2llcyA9IHJlcXVpcmUoJy4vX3NldC1zcGVjaWVzJyk7XG4gIHZhciBhcnJheUZpbGwgPSByZXF1aXJlKCcuL19hcnJheS1maWxsJyk7XG4gIHZhciBhcnJheUNvcHlXaXRoaW4gPSByZXF1aXJlKCcuL19hcnJheS1jb3B5LXdpdGhpbicpO1xuICB2YXIgJERQID0gcmVxdWlyZSgnLi9fb2JqZWN0LWRwJyk7XG4gIHZhciAkR09QRCA9IHJlcXVpcmUoJy4vX29iamVjdC1nb3BkJyk7XG4gIHZhciBkUCA9ICREUC5mO1xuICB2YXIgZ09QRCA9ICRHT1BELmY7XG4gIHZhciBSYW5nZUVycm9yID0gZ2xvYmFsLlJhbmdlRXJyb3I7XG4gIHZhciBUeXBlRXJyb3IgPSBnbG9iYWwuVHlwZUVycm9yO1xuICB2YXIgVWludDhBcnJheSA9IGdsb2JhbC5VaW50OEFycmF5O1xuICB2YXIgQVJSQVlfQlVGRkVSID0gJ0FycmF5QnVmZmVyJztcbiAgdmFyIFNIQVJFRF9CVUZGRVIgPSAnU2hhcmVkJyArIEFSUkFZX0JVRkZFUjtcbiAgdmFyIEJZVEVTX1BFUl9FTEVNRU5UID0gJ0JZVEVTX1BFUl9FTEVNRU5UJztcbiAgdmFyIFBST1RPVFlQRSA9ICdwcm90b3R5cGUnO1xuICB2YXIgQXJyYXlQcm90byA9IEFycmF5W1BST1RPVFlQRV07XG4gIHZhciAkQXJyYXlCdWZmZXIgPSAkYnVmZmVyLkFycmF5QnVmZmVyO1xuICB2YXIgJERhdGFWaWV3ID0gJGJ1ZmZlci5EYXRhVmlldztcbiAgdmFyIGFycmF5Rm9yRWFjaCA9IGNyZWF0ZUFycmF5TWV0aG9kKDApO1xuICB2YXIgYXJyYXlGaWx0ZXIgPSBjcmVhdGVBcnJheU1ldGhvZCgyKTtcbiAgdmFyIGFycmF5U29tZSA9IGNyZWF0ZUFycmF5TWV0aG9kKDMpO1xuICB2YXIgYXJyYXlFdmVyeSA9IGNyZWF0ZUFycmF5TWV0aG9kKDQpO1xuICB2YXIgYXJyYXlGaW5kID0gY3JlYXRlQXJyYXlNZXRob2QoNSk7XG4gIHZhciBhcnJheUZpbmRJbmRleCA9IGNyZWF0ZUFycmF5TWV0aG9kKDYpO1xuICB2YXIgYXJyYXlJbmNsdWRlcyA9IGNyZWF0ZUFycmF5SW5jbHVkZXModHJ1ZSk7XG4gIHZhciBhcnJheUluZGV4T2YgPSBjcmVhdGVBcnJheUluY2x1ZGVzKGZhbHNlKTtcbiAgdmFyIGFycmF5VmFsdWVzID0gQXJyYXlJdGVyYXRvcnMudmFsdWVzO1xuICB2YXIgYXJyYXlLZXlzID0gQXJyYXlJdGVyYXRvcnMua2V5cztcbiAgdmFyIGFycmF5RW50cmllcyA9IEFycmF5SXRlcmF0b3JzLmVudHJpZXM7XG4gIHZhciBhcnJheUxhc3RJbmRleE9mID0gQXJyYXlQcm90by5sYXN0SW5kZXhPZjtcbiAgdmFyIGFycmF5UmVkdWNlID0gQXJyYXlQcm90by5yZWR1Y2U7XG4gIHZhciBhcnJheVJlZHVjZVJpZ2h0ID0gQXJyYXlQcm90by5yZWR1Y2VSaWdodDtcbiAgdmFyIGFycmF5Sm9pbiA9IEFycmF5UHJvdG8uam9pbjtcbiAgdmFyIGFycmF5U29ydCA9IEFycmF5UHJvdG8uc29ydDtcbiAgdmFyIGFycmF5U2xpY2UgPSBBcnJheVByb3RvLnNsaWNlO1xuICB2YXIgYXJyYXlUb1N0cmluZyA9IEFycmF5UHJvdG8udG9TdHJpbmc7XG4gIHZhciBhcnJheVRvTG9jYWxlU3RyaW5nID0gQXJyYXlQcm90by50b0xvY2FsZVN0cmluZztcbiAgdmFyIElURVJBVE9SID0gd2tzKCdpdGVyYXRvcicpO1xuICB2YXIgVEFHID0gd2tzKCd0b1N0cmluZ1RhZycpO1xuICB2YXIgVFlQRURfQ09OU1RSVUNUT1IgPSB1aWQoJ3R5cGVkX2NvbnN0cnVjdG9yJyk7XG4gIHZhciBERUZfQ09OU1RSVUNUT1IgPSB1aWQoJ2RlZl9jb25zdHJ1Y3RvcicpO1xuICB2YXIgQUxMX0NPTlNUUlVDVE9SUyA9ICR0eXBlZC5DT05TVFI7XG4gIHZhciBUWVBFRF9BUlJBWSA9ICR0eXBlZC5UWVBFRDtcbiAgdmFyIFZJRVcgPSAkdHlwZWQuVklFVztcbiAgdmFyIFdST05HX0xFTkdUSCA9ICdXcm9uZyBsZW5ndGghJztcblxuICB2YXIgJG1hcCA9IGNyZWF0ZUFycmF5TWV0aG9kKDEsIGZ1bmN0aW9uIChPLCBsZW5ndGgpIHtcbiAgICByZXR1cm4gYWxsb2NhdGUoc3BlY2llc0NvbnN0cnVjdG9yKE8sIE9bREVGX0NPTlNUUlVDVE9SXSksIGxlbmd0aCk7XG4gIH0pO1xuXG4gIHZhciBMSVRUTEVfRU5ESUFOID0gZmFpbHMoZnVuY3Rpb24gKCkge1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby11bmRlZlxuICAgIHJldHVybiBuZXcgVWludDhBcnJheShuZXcgVWludDE2QXJyYXkoWzFdKS5idWZmZXIpWzBdID09PSAxO1xuICB9KTtcblxuICB2YXIgRk9SQ0VEX1NFVCA9ICEhVWludDhBcnJheSAmJiAhIVVpbnQ4QXJyYXlbUFJPVE9UWVBFXS5zZXQgJiYgZmFpbHMoZnVuY3Rpb24gKCkge1xuICAgIG5ldyBVaW50OEFycmF5KDEpLnNldCh7fSk7XG4gIH0pO1xuXG4gIHZhciB0b09mZnNldCA9IGZ1bmN0aW9uIChpdCwgQllURVMpIHtcbiAgICB2YXIgb2Zmc2V0ID0gdG9JbnRlZ2VyKGl0KTtcbiAgICBpZiAob2Zmc2V0IDwgMCB8fCBvZmZzZXQgJSBCWVRFUykgdGhyb3cgUmFuZ2VFcnJvcignV3Jvbmcgb2Zmc2V0IScpO1xuICAgIHJldHVybiBvZmZzZXQ7XG4gIH07XG5cbiAgdmFyIHZhbGlkYXRlID0gZnVuY3Rpb24gKGl0KSB7XG4gICAgaWYgKGlzT2JqZWN0KGl0KSAmJiBUWVBFRF9BUlJBWSBpbiBpdCkgcmV0dXJuIGl0O1xuICAgIHRocm93IFR5cGVFcnJvcihpdCArICcgaXMgbm90IGEgdHlwZWQgYXJyYXkhJyk7XG4gIH07XG5cbiAgdmFyIGFsbG9jYXRlID0gZnVuY3Rpb24gKEMsIGxlbmd0aCkge1xuICAgIGlmICghKGlzT2JqZWN0KEMpICYmIFRZUEVEX0NPTlNUUlVDVE9SIGluIEMpKSB7XG4gICAgICB0aHJvdyBUeXBlRXJyb3IoJ0l0IGlzIG5vdCBhIHR5cGVkIGFycmF5IGNvbnN0cnVjdG9yIScpO1xuICAgIH0gcmV0dXJuIG5ldyBDKGxlbmd0aCk7XG4gIH07XG5cbiAgdmFyIHNwZWNpZXNGcm9tTGlzdCA9IGZ1bmN0aW9uIChPLCBsaXN0KSB7XG4gICAgcmV0dXJuIGZyb21MaXN0KHNwZWNpZXNDb25zdHJ1Y3RvcihPLCBPW0RFRl9DT05TVFJVQ1RPUl0pLCBsaXN0KTtcbiAgfTtcblxuICB2YXIgZnJvbUxpc3QgPSBmdW5jdGlvbiAoQywgbGlzdCkge1xuICAgIHZhciBpbmRleCA9IDA7XG4gICAgdmFyIGxlbmd0aCA9IGxpc3QubGVuZ3RoO1xuICAgIHZhciByZXN1bHQgPSBhbGxvY2F0ZShDLCBsZW5ndGgpO1xuICAgIHdoaWxlIChsZW5ndGggPiBpbmRleCkgcmVzdWx0W2luZGV4XSA9IGxpc3RbaW5kZXgrK107XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfTtcblxuICB2YXIgYWRkR2V0dGVyID0gZnVuY3Rpb24gKGl0LCBrZXksIGludGVybmFsKSB7XG4gICAgZFAoaXQsIGtleSwgeyBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHRoaXMuX2RbaW50ZXJuYWxdOyB9IH0pO1xuICB9O1xuXG4gIHZhciAkZnJvbSA9IGZ1bmN0aW9uIGZyb20oc291cmNlIC8qICwgbWFwZm4sIHRoaXNBcmcgKi8pIHtcbiAgICB2YXIgTyA9IHRvT2JqZWN0KHNvdXJjZSk7XG4gICAgdmFyIGFMZW4gPSBhcmd1bWVudHMubGVuZ3RoO1xuICAgIHZhciBtYXBmbiA9IGFMZW4gPiAxID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkO1xuICAgIHZhciBtYXBwaW5nID0gbWFwZm4gIT09IHVuZGVmaW5lZDtcbiAgICB2YXIgaXRlckZuID0gZ2V0SXRlckZuKE8pO1xuICAgIHZhciBpLCBsZW5ndGgsIHZhbHVlcywgcmVzdWx0LCBzdGVwLCBpdGVyYXRvcjtcbiAgICBpZiAoaXRlckZuICE9IHVuZGVmaW5lZCAmJiAhaXNBcnJheUl0ZXIoaXRlckZuKSkge1xuICAgICAgZm9yIChpdGVyYXRvciA9IGl0ZXJGbi5jYWxsKE8pLCB2YWx1ZXMgPSBbXSwgaSA9IDA7ICEoc3RlcCA9IGl0ZXJhdG9yLm5leHQoKSkuZG9uZTsgaSsrKSB7XG4gICAgICAgIHZhbHVlcy5wdXNoKHN0ZXAudmFsdWUpO1xuICAgICAgfSBPID0gdmFsdWVzO1xuICAgIH1cbiAgICBpZiAobWFwcGluZyAmJiBhTGVuID4gMikgbWFwZm4gPSBjdHgobWFwZm4sIGFyZ3VtZW50c1syXSwgMik7XG4gICAgZm9yIChpID0gMCwgbGVuZ3RoID0gdG9MZW5ndGgoTy5sZW5ndGgpLCByZXN1bHQgPSBhbGxvY2F0ZSh0aGlzLCBsZW5ndGgpOyBsZW5ndGggPiBpOyBpKyspIHtcbiAgICAgIHJlc3VsdFtpXSA9IG1hcHBpbmcgPyBtYXBmbihPW2ldLCBpKSA6IE9baV07XG4gICAgfVxuICAgIHJldHVybiByZXN1bHQ7XG4gIH07XG5cbiAgdmFyICRvZiA9IGZ1bmN0aW9uIG9mKC8qIC4uLml0ZW1zICovKSB7XG4gICAgdmFyIGluZGV4ID0gMDtcbiAgICB2YXIgbGVuZ3RoID0gYXJndW1lbnRzLmxlbmd0aDtcbiAgICB2YXIgcmVzdWx0ID0gYWxsb2NhdGUodGhpcywgbGVuZ3RoKTtcbiAgICB3aGlsZSAobGVuZ3RoID4gaW5kZXgpIHJlc3VsdFtpbmRleF0gPSBhcmd1bWVudHNbaW5kZXgrK107XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfTtcblxuICAvLyBpT1MgU2FmYXJpIDYueCBmYWlscyBoZXJlXG4gIHZhciBUT19MT0NBTEVfQlVHID0gISFVaW50OEFycmF5ICYmIGZhaWxzKGZ1bmN0aW9uICgpIHsgYXJyYXlUb0xvY2FsZVN0cmluZy5jYWxsKG5ldyBVaW50OEFycmF5KDEpKTsgfSk7XG5cbiAgdmFyICR0b0xvY2FsZVN0cmluZyA9IGZ1bmN0aW9uIHRvTG9jYWxlU3RyaW5nKCkge1xuICAgIHJldHVybiBhcnJheVRvTG9jYWxlU3RyaW5nLmFwcGx5KFRPX0xPQ0FMRV9CVUcgPyBhcnJheVNsaWNlLmNhbGwodmFsaWRhdGUodGhpcykpIDogdmFsaWRhdGUodGhpcyksIGFyZ3VtZW50cyk7XG4gIH07XG5cbiAgdmFyIHByb3RvID0ge1xuICAgIGNvcHlXaXRoaW46IGZ1bmN0aW9uIGNvcHlXaXRoaW4odGFyZ2V0LCBzdGFydCAvKiAsIGVuZCAqLykge1xuICAgICAgcmV0dXJuIGFycmF5Q29weVdpdGhpbi5jYWxsKHZhbGlkYXRlKHRoaXMpLCB0YXJnZXQsIHN0YXJ0LCBhcmd1bWVudHMubGVuZ3RoID4gMiA/IGFyZ3VtZW50c1syXSA6IHVuZGVmaW5lZCk7XG4gICAgfSxcbiAgICBldmVyeTogZnVuY3Rpb24gZXZlcnkoY2FsbGJhY2tmbiAvKiAsIHRoaXNBcmcgKi8pIHtcbiAgICAgIHJldHVybiBhcnJheUV2ZXJ5KHZhbGlkYXRlKHRoaXMpLCBjYWxsYmFja2ZuLCBhcmd1bWVudHMubGVuZ3RoID4gMSA/IGFyZ3VtZW50c1sxXSA6IHVuZGVmaW5lZCk7XG4gICAgfSxcbiAgICBmaWxsOiBmdW5jdGlvbiBmaWxsKHZhbHVlIC8qICwgc3RhcnQsIGVuZCAqLykgeyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXVudXNlZC12YXJzXG4gICAgICByZXR1cm4gYXJyYXlGaWxsLmFwcGx5KHZhbGlkYXRlKHRoaXMpLCBhcmd1bWVudHMpO1xuICAgIH0sXG4gICAgZmlsdGVyOiBmdW5jdGlvbiBmaWx0ZXIoY2FsbGJhY2tmbiAvKiAsIHRoaXNBcmcgKi8pIHtcbiAgICAgIHJldHVybiBzcGVjaWVzRnJvbUxpc3QodGhpcywgYXJyYXlGaWx0ZXIodmFsaWRhdGUodGhpcyksIGNhbGxiYWNrZm4sXG4gICAgICAgIGFyZ3VtZW50cy5sZW5ndGggPiAxID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkKSk7XG4gICAgfSxcbiAgICBmaW5kOiBmdW5jdGlvbiBmaW5kKHByZWRpY2F0ZSAvKiAsIHRoaXNBcmcgKi8pIHtcbiAgICAgIHJldHVybiBhcnJheUZpbmQodmFsaWRhdGUodGhpcyksIHByZWRpY2F0ZSwgYXJndW1lbnRzLmxlbmd0aCA+IDEgPyBhcmd1bWVudHNbMV0gOiB1bmRlZmluZWQpO1xuICAgIH0sXG4gICAgZmluZEluZGV4OiBmdW5jdGlvbiBmaW5kSW5kZXgocHJlZGljYXRlIC8qICwgdGhpc0FyZyAqLykge1xuICAgICAgcmV0dXJuIGFycmF5RmluZEluZGV4KHZhbGlkYXRlKHRoaXMpLCBwcmVkaWNhdGUsIGFyZ3VtZW50cy5sZW5ndGggPiAxID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkKTtcbiAgICB9LFxuICAgIGZvckVhY2g6IGZ1bmN0aW9uIGZvckVhY2goY2FsbGJhY2tmbiAvKiAsIHRoaXNBcmcgKi8pIHtcbiAgICAgIGFycmF5Rm9yRWFjaCh2YWxpZGF0ZSh0aGlzKSwgY2FsbGJhY2tmbiwgYXJndW1lbnRzLmxlbmd0aCA+IDEgPyBhcmd1bWVudHNbMV0gOiB1bmRlZmluZWQpO1xuICAgIH0sXG4gICAgaW5kZXhPZjogZnVuY3Rpb24gaW5kZXhPZihzZWFyY2hFbGVtZW50IC8qICwgZnJvbUluZGV4ICovKSB7XG4gICAgICByZXR1cm4gYXJyYXlJbmRleE9mKHZhbGlkYXRlKHRoaXMpLCBzZWFyY2hFbGVtZW50LCBhcmd1bWVudHMubGVuZ3RoID4gMSA/IGFyZ3VtZW50c1sxXSA6IHVuZGVmaW5lZCk7XG4gICAgfSxcbiAgICBpbmNsdWRlczogZnVuY3Rpb24gaW5jbHVkZXMoc2VhcmNoRWxlbWVudCAvKiAsIGZyb21JbmRleCAqLykge1xuICAgICAgcmV0dXJuIGFycmF5SW5jbHVkZXModmFsaWRhdGUodGhpcyksIHNlYXJjaEVsZW1lbnQsIGFyZ3VtZW50cy5sZW5ndGggPiAxID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkKTtcbiAgICB9LFxuICAgIGpvaW46IGZ1bmN0aW9uIGpvaW4oc2VwYXJhdG9yKSB7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tdW51c2VkLXZhcnNcbiAgICAgIHJldHVybiBhcnJheUpvaW4uYXBwbHkodmFsaWRhdGUodGhpcyksIGFyZ3VtZW50cyk7XG4gICAgfSxcbiAgICBsYXN0SW5kZXhPZjogZnVuY3Rpb24gbGFzdEluZGV4T2Yoc2VhcmNoRWxlbWVudCAvKiAsIGZyb21JbmRleCAqLykgeyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXVudXNlZC12YXJzXG4gICAgICByZXR1cm4gYXJyYXlMYXN0SW5kZXhPZi5hcHBseSh2YWxpZGF0ZSh0aGlzKSwgYXJndW1lbnRzKTtcbiAgICB9LFxuICAgIG1hcDogZnVuY3Rpb24gbWFwKG1hcGZuIC8qICwgdGhpc0FyZyAqLykge1xuICAgICAgcmV0dXJuICRtYXAodmFsaWRhdGUodGhpcyksIG1hcGZuLCBhcmd1bWVudHMubGVuZ3RoID4gMSA/IGFyZ3VtZW50c1sxXSA6IHVuZGVmaW5lZCk7XG4gICAgfSxcbiAgICByZWR1Y2U6IGZ1bmN0aW9uIHJlZHVjZShjYWxsYmFja2ZuIC8qICwgaW5pdGlhbFZhbHVlICovKSB7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tdW51c2VkLXZhcnNcbiAgICAgIHJldHVybiBhcnJheVJlZHVjZS5hcHBseSh2YWxpZGF0ZSh0aGlzKSwgYXJndW1lbnRzKTtcbiAgICB9LFxuICAgIHJlZHVjZVJpZ2h0OiBmdW5jdGlvbiByZWR1Y2VSaWdodChjYWxsYmFja2ZuIC8qICwgaW5pdGlhbFZhbHVlICovKSB7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tdW51c2VkLXZhcnNcbiAgICAgIHJldHVybiBhcnJheVJlZHVjZVJpZ2h0LmFwcGx5KHZhbGlkYXRlKHRoaXMpLCBhcmd1bWVudHMpO1xuICAgIH0sXG4gICAgcmV2ZXJzZTogZnVuY3Rpb24gcmV2ZXJzZSgpIHtcbiAgICAgIHZhciB0aGF0ID0gdGhpcztcbiAgICAgIHZhciBsZW5ndGggPSB2YWxpZGF0ZSh0aGF0KS5sZW5ndGg7XG4gICAgICB2YXIgbWlkZGxlID0gTWF0aC5mbG9vcihsZW5ndGggLyAyKTtcbiAgICAgIHZhciBpbmRleCA9IDA7XG4gICAgICB2YXIgdmFsdWU7XG4gICAgICB3aGlsZSAoaW5kZXggPCBtaWRkbGUpIHtcbiAgICAgICAgdmFsdWUgPSB0aGF0W2luZGV4XTtcbiAgICAgICAgdGhhdFtpbmRleCsrXSA9IHRoYXRbLS1sZW5ndGhdO1xuICAgICAgICB0aGF0W2xlbmd0aF0gPSB2YWx1ZTtcbiAgICAgIH0gcmV0dXJuIHRoYXQ7XG4gICAgfSxcbiAgICBzb21lOiBmdW5jdGlvbiBzb21lKGNhbGxiYWNrZm4gLyogLCB0aGlzQXJnICovKSB7XG4gICAgICByZXR1cm4gYXJyYXlTb21lKHZhbGlkYXRlKHRoaXMpLCBjYWxsYmFja2ZuLCBhcmd1bWVudHMubGVuZ3RoID4gMSA/IGFyZ3VtZW50c1sxXSA6IHVuZGVmaW5lZCk7XG4gICAgfSxcbiAgICBzb3J0OiBmdW5jdGlvbiBzb3J0KGNvbXBhcmVmbikge1xuICAgICAgcmV0dXJuIGFycmF5U29ydC5jYWxsKHZhbGlkYXRlKHRoaXMpLCBjb21wYXJlZm4pO1xuICAgIH0sXG4gICAgc3ViYXJyYXk6IGZ1bmN0aW9uIHN1YmFycmF5KGJlZ2luLCBlbmQpIHtcbiAgICAgIHZhciBPID0gdmFsaWRhdGUodGhpcyk7XG4gICAgICB2YXIgbGVuZ3RoID0gTy5sZW5ndGg7XG4gICAgICB2YXIgJGJlZ2luID0gdG9BYnNvbHV0ZUluZGV4KGJlZ2luLCBsZW5ndGgpO1xuICAgICAgcmV0dXJuIG5ldyAoc3BlY2llc0NvbnN0cnVjdG9yKE8sIE9bREVGX0NPTlNUUlVDVE9SXSkpKFxuICAgICAgICBPLmJ1ZmZlcixcbiAgICAgICAgTy5ieXRlT2Zmc2V0ICsgJGJlZ2luICogTy5CWVRFU19QRVJfRUxFTUVOVCxcbiAgICAgICAgdG9MZW5ndGgoKGVuZCA9PT0gdW5kZWZpbmVkID8gbGVuZ3RoIDogdG9BYnNvbHV0ZUluZGV4KGVuZCwgbGVuZ3RoKSkgLSAkYmVnaW4pXG4gICAgICApO1xuICAgIH1cbiAgfTtcblxuICB2YXIgJHNsaWNlID0gZnVuY3Rpb24gc2xpY2Uoc3RhcnQsIGVuZCkge1xuICAgIHJldHVybiBzcGVjaWVzRnJvbUxpc3QodGhpcywgYXJyYXlTbGljZS5jYWxsKHZhbGlkYXRlKHRoaXMpLCBzdGFydCwgZW5kKSk7XG4gIH07XG5cbiAgdmFyICRzZXQgPSBmdW5jdGlvbiBzZXQoYXJyYXlMaWtlIC8qICwgb2Zmc2V0ICovKSB7XG4gICAgdmFsaWRhdGUodGhpcyk7XG4gICAgdmFyIG9mZnNldCA9IHRvT2Zmc2V0KGFyZ3VtZW50c1sxXSwgMSk7XG4gICAgdmFyIGxlbmd0aCA9IHRoaXMubGVuZ3RoO1xuICAgIHZhciBzcmMgPSB0b09iamVjdChhcnJheUxpa2UpO1xuICAgIHZhciBsZW4gPSB0b0xlbmd0aChzcmMubGVuZ3RoKTtcbiAgICB2YXIgaW5kZXggPSAwO1xuICAgIGlmIChsZW4gKyBvZmZzZXQgPiBsZW5ndGgpIHRocm93IFJhbmdlRXJyb3IoV1JPTkdfTEVOR1RIKTtcbiAgICB3aGlsZSAoaW5kZXggPCBsZW4pIHRoaXNbb2Zmc2V0ICsgaW5kZXhdID0gc3JjW2luZGV4KytdO1xuICB9O1xuXG4gIHZhciAkaXRlcmF0b3JzID0ge1xuICAgIGVudHJpZXM6IGZ1bmN0aW9uIGVudHJpZXMoKSB7XG4gICAgICByZXR1cm4gYXJyYXlFbnRyaWVzLmNhbGwodmFsaWRhdGUodGhpcykpO1xuICAgIH0sXG4gICAga2V5czogZnVuY3Rpb24ga2V5cygpIHtcbiAgICAgIHJldHVybiBhcnJheUtleXMuY2FsbCh2YWxpZGF0ZSh0aGlzKSk7XG4gICAgfSxcbiAgICB2YWx1ZXM6IGZ1bmN0aW9uIHZhbHVlcygpIHtcbiAgICAgIHJldHVybiBhcnJheVZhbHVlcy5jYWxsKHZhbGlkYXRlKHRoaXMpKTtcbiAgICB9XG4gIH07XG5cbiAgdmFyIGlzVEFJbmRleCA9IGZ1bmN0aW9uICh0YXJnZXQsIGtleSkge1xuICAgIHJldHVybiBpc09iamVjdCh0YXJnZXQpXG4gICAgICAmJiB0YXJnZXRbVFlQRURfQVJSQVldXG4gICAgICAmJiB0eXBlb2Yga2V5ICE9ICdzeW1ib2wnXG4gICAgICAmJiBrZXkgaW4gdGFyZ2V0XG4gICAgICAmJiBTdHJpbmcoK2tleSkgPT0gU3RyaW5nKGtleSk7XG4gIH07XG4gIHZhciAkZ2V0RGVzYyA9IGZ1bmN0aW9uIGdldE93blByb3BlcnR5RGVzY3JpcHRvcih0YXJnZXQsIGtleSkge1xuICAgIHJldHVybiBpc1RBSW5kZXgodGFyZ2V0LCBrZXkgPSB0b1ByaW1pdGl2ZShrZXksIHRydWUpKVxuICAgICAgPyBwcm9wZXJ0eURlc2MoMiwgdGFyZ2V0W2tleV0pXG4gICAgICA6IGdPUEQodGFyZ2V0LCBrZXkpO1xuICB9O1xuICB2YXIgJHNldERlc2MgPSBmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGtleSwgZGVzYykge1xuICAgIGlmIChpc1RBSW5kZXgodGFyZ2V0LCBrZXkgPSB0b1ByaW1pdGl2ZShrZXksIHRydWUpKVxuICAgICAgJiYgaXNPYmplY3QoZGVzYylcbiAgICAgICYmIGhhcyhkZXNjLCAndmFsdWUnKVxuICAgICAgJiYgIWhhcyhkZXNjLCAnZ2V0JylcbiAgICAgICYmICFoYXMoZGVzYywgJ3NldCcpXG4gICAgICAvLyBUT0RPOiBhZGQgdmFsaWRhdGlvbiBkZXNjcmlwdG9yIHcvbyBjYWxsaW5nIGFjY2Vzc29yc1xuICAgICAgJiYgIWRlc2MuY29uZmlndXJhYmxlXG4gICAgICAmJiAoIWhhcyhkZXNjLCAnd3JpdGFibGUnKSB8fCBkZXNjLndyaXRhYmxlKVxuICAgICAgJiYgKCFoYXMoZGVzYywgJ2VudW1lcmFibGUnKSB8fCBkZXNjLmVudW1lcmFibGUpXG4gICAgKSB7XG4gICAgICB0YXJnZXRba2V5XSA9IGRlc2MudmFsdWU7XG4gICAgICByZXR1cm4gdGFyZ2V0O1xuICAgIH0gcmV0dXJuIGRQKHRhcmdldCwga2V5LCBkZXNjKTtcbiAgfTtcblxuICBpZiAoIUFMTF9DT05TVFJVQ1RPUlMpIHtcbiAgICAkR09QRC5mID0gJGdldERlc2M7XG4gICAgJERQLmYgPSAkc2V0RGVzYztcbiAgfVxuXG4gICRleHBvcnQoJGV4cG9ydC5TICsgJGV4cG9ydC5GICogIUFMTF9DT05TVFJVQ1RPUlMsICdPYmplY3QnLCB7XG4gICAgZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yOiAkZ2V0RGVzYyxcbiAgICBkZWZpbmVQcm9wZXJ0eTogJHNldERlc2NcbiAgfSk7XG5cbiAgaWYgKGZhaWxzKGZ1bmN0aW9uICgpIHsgYXJyYXlUb1N0cmluZy5jYWxsKHt9KTsgfSkpIHtcbiAgICBhcnJheVRvU3RyaW5nID0gYXJyYXlUb0xvY2FsZVN0cmluZyA9IGZ1bmN0aW9uIHRvU3RyaW5nKCkge1xuICAgICAgcmV0dXJuIGFycmF5Sm9pbi5jYWxsKHRoaXMpO1xuICAgIH07XG4gIH1cblxuICB2YXIgJFR5cGVkQXJyYXlQcm90b3R5cGUkID0gcmVkZWZpbmVBbGwoe30sIHByb3RvKTtcbiAgcmVkZWZpbmVBbGwoJFR5cGVkQXJyYXlQcm90b3R5cGUkLCAkaXRlcmF0b3JzKTtcbiAgaGlkZSgkVHlwZWRBcnJheVByb3RvdHlwZSQsIElURVJBVE9SLCAkaXRlcmF0b3JzLnZhbHVlcyk7XG4gIHJlZGVmaW5lQWxsKCRUeXBlZEFycmF5UHJvdG90eXBlJCwge1xuICAgIHNsaWNlOiAkc2xpY2UsXG4gICAgc2V0OiAkc2V0LFxuICAgIGNvbnN0cnVjdG9yOiBmdW5jdGlvbiAoKSB7IC8qIG5vb3AgKi8gfSxcbiAgICB0b1N0cmluZzogYXJyYXlUb1N0cmluZyxcbiAgICB0b0xvY2FsZVN0cmluZzogJHRvTG9jYWxlU3RyaW5nXG4gIH0pO1xuICBhZGRHZXR0ZXIoJFR5cGVkQXJyYXlQcm90b3R5cGUkLCAnYnVmZmVyJywgJ2InKTtcbiAgYWRkR2V0dGVyKCRUeXBlZEFycmF5UHJvdG90eXBlJCwgJ2J5dGVPZmZzZXQnLCAnbycpO1xuICBhZGRHZXR0ZXIoJFR5cGVkQXJyYXlQcm90b3R5cGUkLCAnYnl0ZUxlbmd0aCcsICdsJyk7XG4gIGFkZEdldHRlcigkVHlwZWRBcnJheVByb3RvdHlwZSQsICdsZW5ndGgnLCAnZScpO1xuICBkUCgkVHlwZWRBcnJheVByb3RvdHlwZSQsIFRBRywge1xuICAgIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gdGhpc1tUWVBFRF9BUlJBWV07IH1cbiAgfSk7XG5cbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG1heC1zdGF0ZW1lbnRzXG4gIG1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKEtFWSwgQllURVMsIHdyYXBwZXIsIENMQU1QRUQpIHtcbiAgICBDTEFNUEVEID0gISFDTEFNUEVEO1xuICAgIHZhciBOQU1FID0gS0VZICsgKENMQU1QRUQgPyAnQ2xhbXBlZCcgOiAnJykgKyAnQXJyYXknO1xuICAgIHZhciBHRVRURVIgPSAnZ2V0JyArIEtFWTtcbiAgICB2YXIgU0VUVEVSID0gJ3NldCcgKyBLRVk7XG4gICAgdmFyIFR5cGVkQXJyYXkgPSBnbG9iYWxbTkFNRV07XG4gICAgdmFyIEJhc2UgPSBUeXBlZEFycmF5IHx8IHt9O1xuICAgIHZhciBUQUMgPSBUeXBlZEFycmF5ICYmIGdldFByb3RvdHlwZU9mKFR5cGVkQXJyYXkpO1xuICAgIHZhciBGT1JDRUQgPSAhVHlwZWRBcnJheSB8fCAhJHR5cGVkLkFCVjtcbiAgICB2YXIgTyA9IHt9O1xuICAgIHZhciBUeXBlZEFycmF5UHJvdG90eXBlID0gVHlwZWRBcnJheSAmJiBUeXBlZEFycmF5W1BST1RPVFlQRV07XG4gICAgdmFyIGdldHRlciA9IGZ1bmN0aW9uICh0aGF0LCBpbmRleCkge1xuICAgICAgdmFyIGRhdGEgPSB0aGF0Ll9kO1xuICAgICAgcmV0dXJuIGRhdGEudltHRVRURVJdKGluZGV4ICogQllURVMgKyBkYXRhLm8sIExJVFRMRV9FTkRJQU4pO1xuICAgIH07XG4gICAgdmFyIHNldHRlciA9IGZ1bmN0aW9uICh0aGF0LCBpbmRleCwgdmFsdWUpIHtcbiAgICAgIHZhciBkYXRhID0gdGhhdC5fZDtcbiAgICAgIGlmIChDTEFNUEVEKSB2YWx1ZSA9ICh2YWx1ZSA9IE1hdGgucm91bmQodmFsdWUpKSA8IDAgPyAwIDogdmFsdWUgPiAweGZmID8gMHhmZiA6IHZhbHVlICYgMHhmZjtcbiAgICAgIGRhdGEudltTRVRURVJdKGluZGV4ICogQllURVMgKyBkYXRhLm8sIHZhbHVlLCBMSVRUTEVfRU5ESUFOKTtcbiAgICB9O1xuICAgIHZhciBhZGRFbGVtZW50ID0gZnVuY3Rpb24gKHRoYXQsIGluZGV4KSB7XG4gICAgICBkUCh0aGF0LCBpbmRleCwge1xuICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICByZXR1cm4gZ2V0dGVyKHRoaXMsIGluZGV4KTtcbiAgICAgICAgfSxcbiAgICAgICAgc2V0OiBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgICByZXR1cm4gc2V0dGVyKHRoaXMsIGluZGV4LCB2YWx1ZSk7XG4gICAgICAgIH0sXG4gICAgICAgIGVudW1lcmFibGU6IHRydWVcbiAgICAgIH0pO1xuICAgIH07XG4gICAgaWYgKEZPUkNFRCkge1xuICAgICAgVHlwZWRBcnJheSA9IHdyYXBwZXIoZnVuY3Rpb24gKHRoYXQsIGRhdGEsICRvZmZzZXQsICRsZW5ndGgpIHtcbiAgICAgICAgYW5JbnN0YW5jZSh0aGF0LCBUeXBlZEFycmF5LCBOQU1FLCAnX2QnKTtcbiAgICAgICAgdmFyIGluZGV4ID0gMDtcbiAgICAgICAgdmFyIG9mZnNldCA9IDA7XG4gICAgICAgIHZhciBidWZmZXIsIGJ5dGVMZW5ndGgsIGxlbmd0aCwga2xhc3M7XG4gICAgICAgIGlmICghaXNPYmplY3QoZGF0YSkpIHtcbiAgICAgICAgICBsZW5ndGggPSB0b0luZGV4KGRhdGEpO1xuICAgICAgICAgIGJ5dGVMZW5ndGggPSBsZW5ndGggKiBCWVRFUztcbiAgICAgICAgICBidWZmZXIgPSBuZXcgJEFycmF5QnVmZmVyKGJ5dGVMZW5ndGgpO1xuICAgICAgICB9IGVsc2UgaWYgKGRhdGEgaW5zdGFuY2VvZiAkQXJyYXlCdWZmZXIgfHwgKGtsYXNzID0gY2xhc3NvZihkYXRhKSkgPT0gQVJSQVlfQlVGRkVSIHx8IGtsYXNzID09IFNIQVJFRF9CVUZGRVIpIHtcbiAgICAgICAgICBidWZmZXIgPSBkYXRhO1xuICAgICAgICAgIG9mZnNldCA9IHRvT2Zmc2V0KCRvZmZzZXQsIEJZVEVTKTtcbiAgICAgICAgICB2YXIgJGxlbiA9IGRhdGEuYnl0ZUxlbmd0aDtcbiAgICAgICAgICBpZiAoJGxlbmd0aCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICBpZiAoJGxlbiAlIEJZVEVTKSB0aHJvdyBSYW5nZUVycm9yKFdST05HX0xFTkdUSCk7XG4gICAgICAgICAgICBieXRlTGVuZ3RoID0gJGxlbiAtIG9mZnNldDtcbiAgICAgICAgICAgIGlmIChieXRlTGVuZ3RoIDwgMCkgdGhyb3cgUmFuZ2VFcnJvcihXUk9OR19MRU5HVEgpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBieXRlTGVuZ3RoID0gdG9MZW5ndGgoJGxlbmd0aCkgKiBCWVRFUztcbiAgICAgICAgICAgIGlmIChieXRlTGVuZ3RoICsgb2Zmc2V0ID4gJGxlbikgdGhyb3cgUmFuZ2VFcnJvcihXUk9OR19MRU5HVEgpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBsZW5ndGggPSBieXRlTGVuZ3RoIC8gQllURVM7XG4gICAgICAgIH0gZWxzZSBpZiAoVFlQRURfQVJSQVkgaW4gZGF0YSkge1xuICAgICAgICAgIHJldHVybiBmcm9tTGlzdChUeXBlZEFycmF5LCBkYXRhKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICByZXR1cm4gJGZyb20uY2FsbChUeXBlZEFycmF5LCBkYXRhKTtcbiAgICAgICAgfVxuICAgICAgICBoaWRlKHRoYXQsICdfZCcsIHtcbiAgICAgICAgICBiOiBidWZmZXIsXG4gICAgICAgICAgbzogb2Zmc2V0LFxuICAgICAgICAgIGw6IGJ5dGVMZW5ndGgsXG4gICAgICAgICAgZTogbGVuZ3RoLFxuICAgICAgICAgIHY6IG5ldyAkRGF0YVZpZXcoYnVmZmVyKVxuICAgICAgICB9KTtcbiAgICAgICAgd2hpbGUgKGluZGV4IDwgbGVuZ3RoKSBhZGRFbGVtZW50KHRoYXQsIGluZGV4KyspO1xuICAgICAgfSk7XG4gICAgICBUeXBlZEFycmF5UHJvdG90eXBlID0gVHlwZWRBcnJheVtQUk9UT1RZUEVdID0gY3JlYXRlKCRUeXBlZEFycmF5UHJvdG90eXBlJCk7XG4gICAgICBoaWRlKFR5cGVkQXJyYXlQcm90b3R5cGUsICdjb25zdHJ1Y3RvcicsIFR5cGVkQXJyYXkpO1xuICAgIH0gZWxzZSBpZiAoIWZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgICAgIFR5cGVkQXJyYXkoMSk7XG4gICAgfSkgfHwgIWZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgICAgIG5ldyBUeXBlZEFycmF5KC0xKTsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1uZXdcbiAgICB9KSB8fCAhJGl0ZXJEZXRlY3QoZnVuY3Rpb24gKGl0ZXIpIHtcbiAgICAgIG5ldyBUeXBlZEFycmF5KCk7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tbmV3XG4gICAgICBuZXcgVHlwZWRBcnJheShudWxsKTsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1uZXdcbiAgICAgIG5ldyBUeXBlZEFycmF5KDEuNSk7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tbmV3XG4gICAgICBuZXcgVHlwZWRBcnJheShpdGVyKTsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1uZXdcbiAgICB9LCB0cnVlKSkge1xuICAgICAgVHlwZWRBcnJheSA9IHdyYXBwZXIoZnVuY3Rpb24gKHRoYXQsIGRhdGEsICRvZmZzZXQsICRsZW5ndGgpIHtcbiAgICAgICAgYW5JbnN0YW5jZSh0aGF0LCBUeXBlZEFycmF5LCBOQU1FKTtcbiAgICAgICAgdmFyIGtsYXNzO1xuICAgICAgICAvLyBgd3NgIG1vZHVsZSBidWcsIHRlbXBvcmFyaWx5IHJlbW92ZSB2YWxpZGF0aW9uIGxlbmd0aCBmb3IgVWludDhBcnJheVxuICAgICAgICAvLyBodHRwczovL2dpdGh1Yi5jb20vd2Vic29ja2V0cy93cy9wdWxsLzY0NVxuICAgICAgICBpZiAoIWlzT2JqZWN0KGRhdGEpKSByZXR1cm4gbmV3IEJhc2UodG9JbmRleChkYXRhKSk7XG4gICAgICAgIGlmIChkYXRhIGluc3RhbmNlb2YgJEFycmF5QnVmZmVyIHx8IChrbGFzcyA9IGNsYXNzb2YoZGF0YSkpID09IEFSUkFZX0JVRkZFUiB8fCBrbGFzcyA9PSBTSEFSRURfQlVGRkVSKSB7XG4gICAgICAgICAgcmV0dXJuICRsZW5ndGggIT09IHVuZGVmaW5lZFxuICAgICAgICAgICAgPyBuZXcgQmFzZShkYXRhLCB0b09mZnNldCgkb2Zmc2V0LCBCWVRFUyksICRsZW5ndGgpXG4gICAgICAgICAgICA6ICRvZmZzZXQgIT09IHVuZGVmaW5lZFxuICAgICAgICAgICAgICA/IG5ldyBCYXNlKGRhdGEsIHRvT2Zmc2V0KCRvZmZzZXQsIEJZVEVTKSlcbiAgICAgICAgICAgICAgOiBuZXcgQmFzZShkYXRhKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoVFlQRURfQVJSQVkgaW4gZGF0YSkgcmV0dXJuIGZyb21MaXN0KFR5cGVkQXJyYXksIGRhdGEpO1xuICAgICAgICByZXR1cm4gJGZyb20uY2FsbChUeXBlZEFycmF5LCBkYXRhKTtcbiAgICAgIH0pO1xuICAgICAgYXJyYXlGb3JFYWNoKFRBQyAhPT0gRnVuY3Rpb24ucHJvdG90eXBlID8gZ09QTihCYXNlKS5jb25jYXQoZ09QTihUQUMpKSA6IGdPUE4oQmFzZSksIGZ1bmN0aW9uIChrZXkpIHtcbiAgICAgICAgaWYgKCEoa2V5IGluIFR5cGVkQXJyYXkpKSBoaWRlKFR5cGVkQXJyYXksIGtleSwgQmFzZVtrZXldKTtcbiAgICAgIH0pO1xuICAgICAgVHlwZWRBcnJheVtQUk9UT1RZUEVdID0gVHlwZWRBcnJheVByb3RvdHlwZTtcbiAgICAgIGlmICghTElCUkFSWSkgVHlwZWRBcnJheVByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IFR5cGVkQXJyYXk7XG4gICAgfVxuICAgIHZhciAkbmF0aXZlSXRlcmF0b3IgPSBUeXBlZEFycmF5UHJvdG90eXBlW0lURVJBVE9SXTtcbiAgICB2YXIgQ09SUkVDVF9JVEVSX05BTUUgPSAhISRuYXRpdmVJdGVyYXRvclxuICAgICAgJiYgKCRuYXRpdmVJdGVyYXRvci5uYW1lID09ICd2YWx1ZXMnIHx8ICRuYXRpdmVJdGVyYXRvci5uYW1lID09IHVuZGVmaW5lZCk7XG4gICAgdmFyICRpdGVyYXRvciA9ICRpdGVyYXRvcnMudmFsdWVzO1xuICAgIGhpZGUoVHlwZWRBcnJheSwgVFlQRURfQ09OU1RSVUNUT1IsIHRydWUpO1xuICAgIGhpZGUoVHlwZWRBcnJheVByb3RvdHlwZSwgVFlQRURfQVJSQVksIE5BTUUpO1xuICAgIGhpZGUoVHlwZWRBcnJheVByb3RvdHlwZSwgVklFVywgdHJ1ZSk7XG4gICAgaGlkZShUeXBlZEFycmF5UHJvdG90eXBlLCBERUZfQ09OU1RSVUNUT1IsIFR5cGVkQXJyYXkpO1xuXG4gICAgaWYgKENMQU1QRUQgPyBuZXcgVHlwZWRBcnJheSgxKVtUQUddICE9IE5BTUUgOiAhKFRBRyBpbiBUeXBlZEFycmF5UHJvdG90eXBlKSkge1xuICAgICAgZFAoVHlwZWRBcnJheVByb3RvdHlwZSwgVEFHLCB7XG4gICAgICAgIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gTkFNRTsgfVxuICAgICAgfSk7XG4gICAgfVxuXG4gICAgT1tOQU1FXSA9IFR5cGVkQXJyYXk7XG5cbiAgICAkZXhwb3J0KCRleHBvcnQuRyArICRleHBvcnQuVyArICRleHBvcnQuRiAqIChUeXBlZEFycmF5ICE9IEJhc2UpLCBPKTtcblxuICAgICRleHBvcnQoJGV4cG9ydC5TLCBOQU1FLCB7XG4gICAgICBCWVRFU19QRVJfRUxFTUVOVDogQllURVNcbiAgICB9KTtcblxuICAgICRleHBvcnQoJGV4cG9ydC5TICsgJGV4cG9ydC5GICogZmFpbHMoZnVuY3Rpb24gKCkgeyBCYXNlLm9mLmNhbGwoVHlwZWRBcnJheSwgMSk7IH0pLCBOQU1FLCB7XG4gICAgICBmcm9tOiAkZnJvbSxcbiAgICAgIG9mOiAkb2ZcbiAgICB9KTtcblxuICAgIGlmICghKEJZVEVTX1BFUl9FTEVNRU5UIGluIFR5cGVkQXJyYXlQcm90b3R5cGUpKSBoaWRlKFR5cGVkQXJyYXlQcm90b3R5cGUsIEJZVEVTX1BFUl9FTEVNRU5ULCBCWVRFUyk7XG5cbiAgICAkZXhwb3J0KCRleHBvcnQuUCwgTkFNRSwgcHJvdG8pO1xuXG4gICAgc2V0U3BlY2llcyhOQU1FKTtcblxuICAgICRleHBvcnQoJGV4cG9ydC5QICsgJGV4cG9ydC5GICogRk9SQ0VEX1NFVCwgTkFNRSwgeyBzZXQ6ICRzZXQgfSk7XG5cbiAgICAkZXhwb3J0KCRleHBvcnQuUCArICRleHBvcnQuRiAqICFDT1JSRUNUX0lURVJfTkFNRSwgTkFNRSwgJGl0ZXJhdG9ycyk7XG5cbiAgICBpZiAoIUxJQlJBUlkgJiYgVHlwZWRBcnJheVByb3RvdHlwZS50b1N0cmluZyAhPSBhcnJheVRvU3RyaW5nKSBUeXBlZEFycmF5UHJvdG90eXBlLnRvU3RyaW5nID0gYXJyYXlUb1N0cmluZztcblxuICAgICRleHBvcnQoJGV4cG9ydC5QICsgJGV4cG9ydC5GICogZmFpbHMoZnVuY3Rpb24gKCkge1xuICAgICAgbmV3IFR5cGVkQXJyYXkoMSkuc2xpY2UoKTtcbiAgICB9KSwgTkFNRSwgeyBzbGljZTogJHNsaWNlIH0pO1xuXG4gICAgJGV4cG9ydCgkZXhwb3J0LlAgKyAkZXhwb3J0LkYgKiAoZmFpbHMoZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIFsxLCAyXS50b0xvY2FsZVN0cmluZygpICE9IG5ldyBUeXBlZEFycmF5KFsxLCAyXSkudG9Mb2NhbGVTdHJpbmcoKTtcbiAgICB9KSB8fCAhZmFpbHMoZnVuY3Rpb24gKCkge1xuICAgICAgVHlwZWRBcnJheVByb3RvdHlwZS50b0xvY2FsZVN0cmluZy5jYWxsKFsxLCAyXSk7XG4gICAgfSkpLCBOQU1FLCB7IHRvTG9jYWxlU3RyaW5nOiAkdG9Mb2NhbGVTdHJpbmcgfSk7XG5cbiAgICBJdGVyYXRvcnNbTkFNRV0gPSBDT1JSRUNUX0lURVJfTkFNRSA/ICRuYXRpdmVJdGVyYXRvciA6ICRpdGVyYXRvcjtcbiAgICBpZiAoIUxJQlJBUlkgJiYgIUNPUlJFQ1RfSVRFUl9OQU1FKSBoaWRlKFR5cGVkQXJyYXlQcm90b3R5cGUsIElURVJBVE9SLCAkaXRlcmF0b3IpO1xuICB9O1xufSBlbHNlIG1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKCkgeyAvKiBlbXB0eSAqLyB9O1xuIiwicmVxdWlyZSgnLi9fdHlwZWQtYXJyYXknKSgnSW50OCcsIDEsIGZ1bmN0aW9uIChpbml0KSB7XG4gIHJldHVybiBmdW5jdGlvbiBJbnQ4QXJyYXkoZGF0YSwgYnl0ZU9mZnNldCwgbGVuZ3RoKSB7XG4gICAgcmV0dXJuIGluaXQodGhpcywgZGF0YSwgYnl0ZU9mZnNldCwgbGVuZ3RoKTtcbiAgfTtcbn0pO1xuIiwicmVxdWlyZSgnLi9fdHlwZWQtYXJyYXknKSgnVWludDgnLCAxLCBmdW5jdGlvbiAoaW5pdCkge1xuICByZXR1cm4gZnVuY3Rpb24gVWludDhBcnJheShkYXRhLCBieXRlT2Zmc2V0LCBsZW5ndGgpIHtcbiAgICByZXR1cm4gaW5pdCh0aGlzLCBkYXRhLCBieXRlT2Zmc2V0LCBsZW5ndGgpO1xuICB9O1xufSk7XG4iLCJyZXF1aXJlKCcuL190eXBlZC1hcnJheScpKCdVaW50OCcsIDEsIGZ1bmN0aW9uIChpbml0KSB7XG4gIHJldHVybiBmdW5jdGlvbiBVaW50OENsYW1wZWRBcnJheShkYXRhLCBieXRlT2Zmc2V0LCBsZW5ndGgpIHtcbiAgICByZXR1cm4gaW5pdCh0aGlzLCBkYXRhLCBieXRlT2Zmc2V0LCBsZW5ndGgpO1xuICB9O1xufSwgdHJ1ZSk7XG4iLCJyZXF1aXJlKCcuL190eXBlZC1hcnJheScpKCdJbnQxNicsIDIsIGZ1bmN0aW9uIChpbml0KSB7XG4gIHJldHVybiBmdW5jdGlvbiBJbnQxNkFycmF5KGRhdGEsIGJ5dGVPZmZzZXQsIGxlbmd0aCkge1xuICAgIHJldHVybiBpbml0KHRoaXMsIGRhdGEsIGJ5dGVPZmZzZXQsIGxlbmd0aCk7XG4gIH07XG59KTtcbiIsInJlcXVpcmUoJy4vX3R5cGVkLWFycmF5JykoJ1VpbnQxNicsIDIsIGZ1bmN0aW9uIChpbml0KSB7XG4gIHJldHVybiBmdW5jdGlvbiBVaW50MTZBcnJheShkYXRhLCBieXRlT2Zmc2V0LCBsZW5ndGgpIHtcbiAgICByZXR1cm4gaW5pdCh0aGlzLCBkYXRhLCBieXRlT2Zmc2V0LCBsZW5ndGgpO1xuICB9O1xufSk7XG4iLCJyZXF1aXJlKCcuL190eXBlZC1hcnJheScpKCdJbnQzMicsIDQsIGZ1bmN0aW9uIChpbml0KSB7XG4gIHJldHVybiBmdW5jdGlvbiBJbnQzMkFycmF5KGRhdGEsIGJ5dGVPZmZzZXQsIGxlbmd0aCkge1xuICAgIHJldHVybiBpbml0KHRoaXMsIGRhdGEsIGJ5dGVPZmZzZXQsIGxlbmd0aCk7XG4gIH07XG59KTtcbiIsInJlcXVpcmUoJy4vX3R5cGVkLWFycmF5JykoJ1VpbnQzMicsIDQsIGZ1bmN0aW9uIChpbml0KSB7XG4gIHJldHVybiBmdW5jdGlvbiBVaW50MzJBcnJheShkYXRhLCBieXRlT2Zmc2V0LCBsZW5ndGgpIHtcbiAgICByZXR1cm4gaW5pdCh0aGlzLCBkYXRhLCBieXRlT2Zmc2V0LCBsZW5ndGgpO1xuICB9O1xufSk7XG4iLCJyZXF1aXJlKCcuL190eXBlZC1hcnJheScpKCdGbG9hdDMyJywgNCwgZnVuY3Rpb24gKGluaXQpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIEZsb2F0MzJBcnJheShkYXRhLCBieXRlT2Zmc2V0LCBsZW5ndGgpIHtcbiAgICByZXR1cm4gaW5pdCh0aGlzLCBkYXRhLCBieXRlT2Zmc2V0LCBsZW5ndGgpO1xuICB9O1xufSk7XG4iLCJyZXF1aXJlKCcuL190eXBlZC1hcnJheScpKCdGbG9hdDY0JywgOCwgZnVuY3Rpb24gKGluaXQpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIEZsb2F0NjRBcnJheShkYXRhLCBieXRlT2Zmc2V0LCBsZW5ndGgpIHtcbiAgICByZXR1cm4gaW5pdCh0aGlzLCBkYXRhLCBieXRlT2Zmc2V0LCBsZW5ndGgpO1xuICB9O1xufSk7XG4iLCIvLyAyNi4xLjEgUmVmbGVjdC5hcHBseSh0YXJnZXQsIHRoaXNBcmd1bWVudCwgYXJndW1lbnRzTGlzdClcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgYUZ1bmN0aW9uID0gcmVxdWlyZSgnLi9fYS1mdW5jdGlvbicpO1xudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi9fYW4tb2JqZWN0Jyk7XG52YXIgckFwcGx5ID0gKHJlcXVpcmUoJy4vX2dsb2JhbCcpLlJlZmxlY3QgfHwge30pLmFwcGx5O1xudmFyIGZBcHBseSA9IEZ1bmN0aW9uLmFwcGx5O1xuLy8gTVMgRWRnZSBhcmd1bWVudHNMaXN0IGFyZ3VtZW50IGlzIG9wdGlvbmFsXG4kZXhwb3J0KCRleHBvcnQuUyArICRleHBvcnQuRiAqICFyZXF1aXJlKCcuL19mYWlscycpKGZ1bmN0aW9uICgpIHtcbiAgckFwcGx5KGZ1bmN0aW9uICgpIHsgLyogZW1wdHkgKi8gfSk7XG59KSwgJ1JlZmxlY3QnLCB7XG4gIGFwcGx5OiBmdW5jdGlvbiBhcHBseSh0YXJnZXQsIHRoaXNBcmd1bWVudCwgYXJndW1lbnRzTGlzdCkge1xuICAgIHZhciBUID0gYUZ1bmN0aW9uKHRhcmdldCk7XG4gICAgdmFyIEwgPSBhbk9iamVjdChhcmd1bWVudHNMaXN0KTtcbiAgICByZXR1cm4gckFwcGx5ID8gckFwcGx5KFQsIHRoaXNBcmd1bWVudCwgTCkgOiBmQXBwbHkuY2FsbChULCB0aGlzQXJndW1lbnQsIEwpO1xuICB9XG59KTtcbiIsIi8vIDI2LjEuMiBSZWZsZWN0LmNvbnN0cnVjdCh0YXJnZXQsIGFyZ3VtZW50c0xpc3QgWywgbmV3VGFyZ2V0XSlcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgY3JlYXRlID0gcmVxdWlyZSgnLi9fb2JqZWN0LWNyZWF0ZScpO1xudmFyIGFGdW5jdGlvbiA9IHJlcXVpcmUoJy4vX2EtZnVuY3Rpb24nKTtcbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4vX2FuLW9iamVjdCcpO1xudmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi9faXMtb2JqZWN0Jyk7XG52YXIgZmFpbHMgPSByZXF1aXJlKCcuL19mYWlscycpO1xudmFyIGJpbmQgPSByZXF1aXJlKCcuL19iaW5kJyk7XG52YXIgckNvbnN0cnVjdCA9IChyZXF1aXJlKCcuL19nbG9iYWwnKS5SZWZsZWN0IHx8IHt9KS5jb25zdHJ1Y3Q7XG5cbi8vIE1TIEVkZ2Ugc3VwcG9ydHMgb25seSAyIGFyZ3VtZW50cyBhbmQgYXJndW1lbnRzTGlzdCBhcmd1bWVudCBpcyBvcHRpb25hbFxuLy8gRkYgTmlnaHRseSBzZXRzIHRoaXJkIGFyZ3VtZW50IGFzIGBuZXcudGFyZ2V0YCwgYnV0IGRvZXMgbm90IGNyZWF0ZSBgdGhpc2AgZnJvbSBpdFxudmFyIE5FV19UQVJHRVRfQlVHID0gZmFpbHMoZnVuY3Rpb24gKCkge1xuICBmdW5jdGlvbiBGKCkgeyAvKiBlbXB0eSAqLyB9XG4gIHJldHVybiAhKHJDb25zdHJ1Y3QoZnVuY3Rpb24gKCkgeyAvKiBlbXB0eSAqLyB9LCBbXSwgRikgaW5zdGFuY2VvZiBGKTtcbn0pO1xudmFyIEFSR1NfQlVHID0gIWZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgckNvbnN0cnVjdChmdW5jdGlvbiAoKSB7IC8qIGVtcHR5ICovIH0pO1xufSk7XG5cbiRleHBvcnQoJGV4cG9ydC5TICsgJGV4cG9ydC5GICogKE5FV19UQVJHRVRfQlVHIHx8IEFSR1NfQlVHKSwgJ1JlZmxlY3QnLCB7XG4gIGNvbnN0cnVjdDogZnVuY3Rpb24gY29uc3RydWN0KFRhcmdldCwgYXJncyAvKiAsIG5ld1RhcmdldCAqLykge1xuICAgIGFGdW5jdGlvbihUYXJnZXQpO1xuICAgIGFuT2JqZWN0KGFyZ3MpO1xuICAgIHZhciBuZXdUYXJnZXQgPSBhcmd1bWVudHMubGVuZ3RoIDwgMyA/IFRhcmdldCA6IGFGdW5jdGlvbihhcmd1bWVudHNbMl0pO1xuICAgIGlmIChBUkdTX0JVRyAmJiAhTkVXX1RBUkdFVF9CVUcpIHJldHVybiByQ29uc3RydWN0KFRhcmdldCwgYXJncywgbmV3VGFyZ2V0KTtcbiAgICBpZiAoVGFyZ2V0ID09IG5ld1RhcmdldCkge1xuICAgICAgLy8gdy9vIGFsdGVyZWQgbmV3VGFyZ2V0LCBvcHRpbWl6YXRpb24gZm9yIDAtNCBhcmd1bWVudHNcbiAgICAgIHN3aXRjaCAoYXJncy5sZW5ndGgpIHtcbiAgICAgICAgY2FzZSAwOiByZXR1cm4gbmV3IFRhcmdldCgpO1xuICAgICAgICBjYXNlIDE6IHJldHVybiBuZXcgVGFyZ2V0KGFyZ3NbMF0pO1xuICAgICAgICBjYXNlIDI6IHJldHVybiBuZXcgVGFyZ2V0KGFyZ3NbMF0sIGFyZ3NbMV0pO1xuICAgICAgICBjYXNlIDM6IHJldHVybiBuZXcgVGFyZ2V0KGFyZ3NbMF0sIGFyZ3NbMV0sIGFyZ3NbMl0pO1xuICAgICAgICBjYXNlIDQ6IHJldHVybiBuZXcgVGFyZ2V0KGFyZ3NbMF0sIGFyZ3NbMV0sIGFyZ3NbMl0sIGFyZ3NbM10pO1xuICAgICAgfVxuICAgICAgLy8gdy9vIGFsdGVyZWQgbmV3VGFyZ2V0LCBsb3Qgb2YgYXJndW1lbnRzIGNhc2VcbiAgICAgIHZhciAkYXJncyA9IFtudWxsXTtcbiAgICAgICRhcmdzLnB1c2guYXBwbHkoJGFyZ3MsIGFyZ3MpO1xuICAgICAgcmV0dXJuIG5ldyAoYmluZC5hcHBseShUYXJnZXQsICRhcmdzKSkoKTtcbiAgICB9XG4gICAgLy8gd2l0aCBhbHRlcmVkIG5ld1RhcmdldCwgbm90IHN1cHBvcnQgYnVpbHQtaW4gY29uc3RydWN0b3JzXG4gICAgdmFyIHByb3RvID0gbmV3VGFyZ2V0LnByb3RvdHlwZTtcbiAgICB2YXIgaW5zdGFuY2UgPSBjcmVhdGUoaXNPYmplY3QocHJvdG8pID8gcHJvdG8gOiBPYmplY3QucHJvdG90eXBlKTtcbiAgICB2YXIgcmVzdWx0ID0gRnVuY3Rpb24uYXBwbHkuY2FsbChUYXJnZXQsIGluc3RhbmNlLCBhcmdzKTtcbiAgICByZXR1cm4gaXNPYmplY3QocmVzdWx0KSA/IHJlc3VsdCA6IGluc3RhbmNlO1xuICB9XG59KTtcbiIsIi8vIDI2LjEuMyBSZWZsZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgcHJvcGVydHlLZXksIGF0dHJpYnV0ZXMpXG52YXIgZFAgPSByZXF1aXJlKCcuL19vYmplY3QtZHAnKTtcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKTtcbnZhciB0b1ByaW1pdGl2ZSA9IHJlcXVpcmUoJy4vX3RvLXByaW1pdGl2ZScpO1xuXG4vLyBNUyBFZGdlIGhhcyBicm9rZW4gUmVmbGVjdC5kZWZpbmVQcm9wZXJ0eSAtIHRocm93aW5nIGluc3RlYWQgb2YgcmV0dXJuaW5nIGZhbHNlXG4kZXhwb3J0KCRleHBvcnQuUyArICRleHBvcnQuRiAqIHJlcXVpcmUoJy4vX2ZhaWxzJykoZnVuY3Rpb24gKCkge1xuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdW5kZWZcbiAgUmVmbGVjdC5kZWZpbmVQcm9wZXJ0eShkUC5mKHt9LCAxLCB7IHZhbHVlOiAxIH0pLCAxLCB7IHZhbHVlOiAyIH0pO1xufSksICdSZWZsZWN0Jywge1xuICBkZWZpbmVQcm9wZXJ0eTogZnVuY3Rpb24gZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBwcm9wZXJ0eUtleSwgYXR0cmlidXRlcykge1xuICAgIGFuT2JqZWN0KHRhcmdldCk7XG4gICAgcHJvcGVydHlLZXkgPSB0b1ByaW1pdGl2ZShwcm9wZXJ0eUtleSwgdHJ1ZSk7XG4gICAgYW5PYmplY3QoYXR0cmlidXRlcyk7XG4gICAgdHJ5IHtcbiAgICAgIGRQLmYodGFyZ2V0LCBwcm9wZXJ0eUtleSwgYXR0cmlidXRlcyk7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICB9XG59KTtcbiIsIi8vIDI2LjEuNCBSZWZsZWN0LmRlbGV0ZVByb3BlcnR5KHRhcmdldCwgcHJvcGVydHlLZXkpXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIGdPUEQgPSByZXF1aXJlKCcuL19vYmplY3QtZ29wZCcpLmY7XG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKTtcblxuJGV4cG9ydCgkZXhwb3J0LlMsICdSZWZsZWN0Jywge1xuICBkZWxldGVQcm9wZXJ0eTogZnVuY3Rpb24gZGVsZXRlUHJvcGVydHkodGFyZ2V0LCBwcm9wZXJ0eUtleSkge1xuICAgIHZhciBkZXNjID0gZ09QRChhbk9iamVjdCh0YXJnZXQpLCBwcm9wZXJ0eUtleSk7XG4gICAgcmV0dXJuIGRlc2MgJiYgIWRlc2MuY29uZmlndXJhYmxlID8gZmFsc2UgOiBkZWxldGUgdGFyZ2V0W3Byb3BlcnR5S2V5XTtcbiAgfVxufSk7XG4iLCIndXNlIHN0cmljdCc7XG4vLyAyNi4xLjUgUmVmbGVjdC5lbnVtZXJhdGUodGFyZ2V0KVxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4vX2FuLW9iamVjdCcpO1xudmFyIEVudW1lcmF0ZSA9IGZ1bmN0aW9uIChpdGVyYXRlZCkge1xuICB0aGlzLl90ID0gYW5PYmplY3QoaXRlcmF0ZWQpOyAvLyB0YXJnZXRcbiAgdGhpcy5faSA9IDA7ICAgICAgICAgICAgICAgICAgLy8gbmV4dCBpbmRleFxuICB2YXIga2V5cyA9IHRoaXMuX2sgPSBbXTsgICAgICAvLyBrZXlzXG4gIHZhciBrZXk7XG4gIGZvciAoa2V5IGluIGl0ZXJhdGVkKSBrZXlzLnB1c2goa2V5KTtcbn07XG5yZXF1aXJlKCcuL19pdGVyLWNyZWF0ZScpKEVudW1lcmF0ZSwgJ09iamVjdCcsIGZ1bmN0aW9uICgpIHtcbiAgdmFyIHRoYXQgPSB0aGlzO1xuICB2YXIga2V5cyA9IHRoYXQuX2s7XG4gIHZhciBrZXk7XG4gIGRvIHtcbiAgICBpZiAodGhhdC5faSA+PSBrZXlzLmxlbmd0aCkgcmV0dXJuIHsgdmFsdWU6IHVuZGVmaW5lZCwgZG9uZTogdHJ1ZSB9O1xuICB9IHdoaWxlICghKChrZXkgPSBrZXlzW3RoYXQuX2krK10pIGluIHRoYXQuX3QpKTtcbiAgcmV0dXJuIHsgdmFsdWU6IGtleSwgZG9uZTogZmFsc2UgfTtcbn0pO1xuXG4kZXhwb3J0KCRleHBvcnQuUywgJ1JlZmxlY3QnLCB7XG4gIGVudW1lcmF0ZTogZnVuY3Rpb24gZW51bWVyYXRlKHRhcmdldCkge1xuICAgIHJldHVybiBuZXcgRW51bWVyYXRlKHRhcmdldCk7XG4gIH1cbn0pO1xuIiwiLy8gMjYuMS42IFJlZmxlY3QuZ2V0KHRhcmdldCwgcHJvcGVydHlLZXkgWywgcmVjZWl2ZXJdKVxudmFyIGdPUEQgPSByZXF1aXJlKCcuL19vYmplY3QtZ29wZCcpO1xudmFyIGdldFByb3RvdHlwZU9mID0gcmVxdWlyZSgnLi9fb2JqZWN0LWdwbycpO1xudmFyIGhhcyA9IHJlcXVpcmUoJy4vX2hhcycpO1xudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4vX2lzLW9iamVjdCcpO1xudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi9fYW4tb2JqZWN0Jyk7XG5cbmZ1bmN0aW9uIGdldCh0YXJnZXQsIHByb3BlcnR5S2V5IC8qICwgcmVjZWl2ZXIgKi8pIHtcbiAgdmFyIHJlY2VpdmVyID0gYXJndW1lbnRzLmxlbmd0aCA8IDMgPyB0YXJnZXQgOiBhcmd1bWVudHNbMl07XG4gIHZhciBkZXNjLCBwcm90bztcbiAgaWYgKGFuT2JqZWN0KHRhcmdldCkgPT09IHJlY2VpdmVyKSByZXR1cm4gdGFyZ2V0W3Byb3BlcnR5S2V5XTtcbiAgaWYgKGRlc2MgPSBnT1BELmYodGFyZ2V0LCBwcm9wZXJ0eUtleSkpIHJldHVybiBoYXMoZGVzYywgJ3ZhbHVlJylcbiAgICA/IGRlc2MudmFsdWVcbiAgICA6IGRlc2MuZ2V0ICE9PSB1bmRlZmluZWRcbiAgICAgID8gZGVzYy5nZXQuY2FsbChyZWNlaXZlcilcbiAgICAgIDogdW5kZWZpbmVkO1xuICBpZiAoaXNPYmplY3QocHJvdG8gPSBnZXRQcm90b3R5cGVPZih0YXJnZXQpKSkgcmV0dXJuIGdldChwcm90bywgcHJvcGVydHlLZXksIHJlY2VpdmVyKTtcbn1cblxuJGV4cG9ydCgkZXhwb3J0LlMsICdSZWZsZWN0JywgeyBnZXQ6IGdldCB9KTtcbiIsIi8vIDI2LjEuNyBSZWZsZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcih0YXJnZXQsIHByb3BlcnR5S2V5KVxudmFyIGdPUEQgPSByZXF1aXJlKCcuL19vYmplY3QtZ29wZCcpO1xudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4vX2FuLW9iamVjdCcpO1xuXG4kZXhwb3J0KCRleHBvcnQuUywgJ1JlZmxlY3QnLCB7XG4gIGdldE93blByb3BlcnR5RGVzY3JpcHRvcjogZnVuY3Rpb24gZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHRhcmdldCwgcHJvcGVydHlLZXkpIHtcbiAgICByZXR1cm4gZ09QRC5mKGFuT2JqZWN0KHRhcmdldCksIHByb3BlcnR5S2V5KTtcbiAgfVxufSk7XG4iLCIvLyAyNi4xLjggUmVmbGVjdC5nZXRQcm90b3R5cGVPZih0YXJnZXQpXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIGdldFByb3RvID0gcmVxdWlyZSgnLi9fb2JqZWN0LWdwbycpO1xudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi9fYW4tb2JqZWN0Jyk7XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnUmVmbGVjdCcsIHtcbiAgZ2V0UHJvdG90eXBlT2Y6IGZ1bmN0aW9uIGdldFByb3RvdHlwZU9mKHRhcmdldCkge1xuICAgIHJldHVybiBnZXRQcm90byhhbk9iamVjdCh0YXJnZXQpKTtcbiAgfVxufSk7XG4iLCIvLyAyNi4xLjkgUmVmbGVjdC5oYXModGFyZ2V0LCBwcm9wZXJ0eUtleSlcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnUmVmbGVjdCcsIHtcbiAgaGFzOiBmdW5jdGlvbiBoYXModGFyZ2V0LCBwcm9wZXJ0eUtleSkge1xuICAgIHJldHVybiBwcm9wZXJ0eUtleSBpbiB0YXJnZXQ7XG4gIH1cbn0pO1xuIiwiLy8gMjYuMS4xMCBSZWZsZWN0LmlzRXh0ZW5zaWJsZSh0YXJnZXQpXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi9fYW4tb2JqZWN0Jyk7XG52YXIgJGlzRXh0ZW5zaWJsZSA9IE9iamVjdC5pc0V4dGVuc2libGU7XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnUmVmbGVjdCcsIHtcbiAgaXNFeHRlbnNpYmxlOiBmdW5jdGlvbiBpc0V4dGVuc2libGUodGFyZ2V0KSB7XG4gICAgYW5PYmplY3QodGFyZ2V0KTtcbiAgICByZXR1cm4gJGlzRXh0ZW5zaWJsZSA/ICRpc0V4dGVuc2libGUodGFyZ2V0KSA6IHRydWU7XG4gIH1cbn0pO1xuIiwiLy8gYWxsIG9iamVjdCBrZXlzLCBpbmNsdWRlcyBub24tZW51bWVyYWJsZSBhbmQgc3ltYm9sc1xudmFyIGdPUE4gPSByZXF1aXJlKCcuL19vYmplY3QtZ29wbicpO1xudmFyIGdPUFMgPSByZXF1aXJlKCcuL19vYmplY3QtZ29wcycpO1xudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi9fYW4tb2JqZWN0Jyk7XG52YXIgUmVmbGVjdCA9IHJlcXVpcmUoJy4vX2dsb2JhbCcpLlJlZmxlY3Q7XG5tb2R1bGUuZXhwb3J0cyA9IFJlZmxlY3QgJiYgUmVmbGVjdC5vd25LZXlzIHx8IGZ1bmN0aW9uIG93bktleXMoaXQpIHtcbiAgdmFyIGtleXMgPSBnT1BOLmYoYW5PYmplY3QoaXQpKTtcbiAgdmFyIGdldFN5bWJvbHMgPSBnT1BTLmY7XG4gIHJldHVybiBnZXRTeW1ib2xzID8ga2V5cy5jb25jYXQoZ2V0U3ltYm9scyhpdCkpIDoga2V5cztcbn07XG4iLCIvLyAyNi4xLjExIFJlZmxlY3Qub3duS2V5cyh0YXJnZXQpXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xuXG4kZXhwb3J0KCRleHBvcnQuUywgJ1JlZmxlY3QnLCB7IG93bktleXM6IHJlcXVpcmUoJy4vX293bi1rZXlzJykgfSk7XG4iLCIvLyAyNi4xLjEyIFJlZmxlY3QucHJldmVudEV4dGVuc2lvbnModGFyZ2V0KVxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4vX2FuLW9iamVjdCcpO1xudmFyICRwcmV2ZW50RXh0ZW5zaW9ucyA9IE9iamVjdC5wcmV2ZW50RXh0ZW5zaW9ucztcblxuJGV4cG9ydCgkZXhwb3J0LlMsICdSZWZsZWN0Jywge1xuICBwcmV2ZW50RXh0ZW5zaW9uczogZnVuY3Rpb24gcHJldmVudEV4dGVuc2lvbnModGFyZ2V0KSB7XG4gICAgYW5PYmplY3QodGFyZ2V0KTtcbiAgICB0cnkge1xuICAgICAgaWYgKCRwcmV2ZW50RXh0ZW5zaW9ucykgJHByZXZlbnRFeHRlbnNpb25zKHRhcmdldCk7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICB9XG59KTtcbiIsIi8vIDI2LjEuMTMgUmVmbGVjdC5zZXQodGFyZ2V0LCBwcm9wZXJ0eUtleSwgViBbLCByZWNlaXZlcl0pXG52YXIgZFAgPSByZXF1aXJlKCcuL19vYmplY3QtZHAnKTtcbnZhciBnT1BEID0gcmVxdWlyZSgnLi9fb2JqZWN0LWdvcGQnKTtcbnZhciBnZXRQcm90b3R5cGVPZiA9IHJlcXVpcmUoJy4vX29iamVjdC1ncG8nKTtcbnZhciBoYXMgPSByZXF1aXJlKCcuL19oYXMnKTtcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgY3JlYXRlRGVzYyA9IHJlcXVpcmUoJy4vX3Byb3BlcnR5LWRlc2MnKTtcbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4vX2FuLW9iamVjdCcpO1xudmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi9faXMtb2JqZWN0Jyk7XG5cbmZ1bmN0aW9uIHNldCh0YXJnZXQsIHByb3BlcnR5S2V5LCBWIC8qICwgcmVjZWl2ZXIgKi8pIHtcbiAgdmFyIHJlY2VpdmVyID0gYXJndW1lbnRzLmxlbmd0aCA8IDQgPyB0YXJnZXQgOiBhcmd1bWVudHNbM107XG4gIHZhciBvd25EZXNjID0gZ09QRC5mKGFuT2JqZWN0KHRhcmdldCksIHByb3BlcnR5S2V5KTtcbiAgdmFyIGV4aXN0aW5nRGVzY3JpcHRvciwgcHJvdG87XG4gIGlmICghb3duRGVzYykge1xuICAgIGlmIChpc09iamVjdChwcm90byA9IGdldFByb3RvdHlwZU9mKHRhcmdldCkpKSB7XG4gICAgICByZXR1cm4gc2V0KHByb3RvLCBwcm9wZXJ0eUtleSwgViwgcmVjZWl2ZXIpO1xuICAgIH1cbiAgICBvd25EZXNjID0gY3JlYXRlRGVzYygwKTtcbiAgfVxuICBpZiAoaGFzKG93bkRlc2MsICd2YWx1ZScpKSB7XG4gICAgaWYgKG93bkRlc2Mud3JpdGFibGUgPT09IGZhbHNlIHx8ICFpc09iamVjdChyZWNlaXZlcikpIHJldHVybiBmYWxzZTtcbiAgICBpZiAoZXhpc3RpbmdEZXNjcmlwdG9yID0gZ09QRC5mKHJlY2VpdmVyLCBwcm9wZXJ0eUtleSkpIHtcbiAgICAgIGlmIChleGlzdGluZ0Rlc2NyaXB0b3IuZ2V0IHx8IGV4aXN0aW5nRGVzY3JpcHRvci5zZXQgfHwgZXhpc3RpbmdEZXNjcmlwdG9yLndyaXRhYmxlID09PSBmYWxzZSkgcmV0dXJuIGZhbHNlO1xuICAgICAgZXhpc3RpbmdEZXNjcmlwdG9yLnZhbHVlID0gVjtcbiAgICAgIGRQLmYocmVjZWl2ZXIsIHByb3BlcnR5S2V5LCBleGlzdGluZ0Rlc2NyaXB0b3IpO1xuICAgIH0gZWxzZSBkUC5mKHJlY2VpdmVyLCBwcm9wZXJ0eUtleSwgY3JlYXRlRGVzYygwLCBWKSk7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cbiAgcmV0dXJuIG93bkRlc2Muc2V0ID09PSB1bmRlZmluZWQgPyBmYWxzZSA6IChvd25EZXNjLnNldC5jYWxsKHJlY2VpdmVyLCBWKSwgdHJ1ZSk7XG59XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnUmVmbGVjdCcsIHsgc2V0OiBzZXQgfSk7XG4iLCIvLyAyNi4xLjE0IFJlZmxlY3Quc2V0UHJvdG90eXBlT2YodGFyZ2V0LCBwcm90bylcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgc2V0UHJvdG8gPSByZXF1aXJlKCcuL19zZXQtcHJvdG8nKTtcblxuaWYgKHNldFByb3RvKSAkZXhwb3J0KCRleHBvcnQuUywgJ1JlZmxlY3QnLCB7XG4gIHNldFByb3RvdHlwZU9mOiBmdW5jdGlvbiBzZXRQcm90b3R5cGVPZih0YXJnZXQsIHByb3RvKSB7XG4gICAgc2V0UHJvdG8uY2hlY2sodGFyZ2V0LCBwcm90byk7XG4gICAgdHJ5IHtcbiAgICAgIHNldFByb3RvLnNldCh0YXJnZXQsIHByb3RvKTtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gIH1cbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xuLy8gaHR0cHM6Ly9naXRodWIuY29tL3RjMzkvQXJyYXkucHJvdG90eXBlLmluY2x1ZGVzXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyICRpbmNsdWRlcyA9IHJlcXVpcmUoJy4vX2FycmF5LWluY2x1ZGVzJykodHJ1ZSk7XG5cbiRleHBvcnQoJGV4cG9ydC5QLCAnQXJyYXknLCB7XG4gIGluY2x1ZGVzOiBmdW5jdGlvbiBpbmNsdWRlcyhlbCAvKiAsIGZyb21JbmRleCA9IDAgKi8pIHtcbiAgICByZXR1cm4gJGluY2x1ZGVzKHRoaXMsIGVsLCBhcmd1bWVudHMubGVuZ3RoID4gMSA/IGFyZ3VtZW50c1sxXSA6IHVuZGVmaW5lZCk7XG4gIH1cbn0pO1xuXG5yZXF1aXJlKCcuL19hZGQtdG8tdW5zY29wYWJsZXMnKSgnaW5jbHVkZXMnKTtcbiIsInJlcXVpcmUoJy4uLy4uL21vZHVsZXMvZXM3LmFycmF5LmluY2x1ZGVzJyk7XG5tb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4uLy4uL21vZHVsZXMvX2NvcmUnKS5BcnJheS5pbmNsdWRlcztcbiIsIid1c2Ugc3RyaWN0Jztcbi8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vcHJvcG9zYWwtZmxhdE1hcC8jc2VjLUZsYXR0ZW5JbnRvQXJyYXlcbnZhciBpc0FycmF5ID0gcmVxdWlyZSgnLi9faXMtYXJyYXknKTtcbnZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4vX2lzLW9iamVjdCcpO1xudmFyIHRvTGVuZ3RoID0gcmVxdWlyZSgnLi9fdG8tbGVuZ3RoJyk7XG52YXIgY3R4ID0gcmVxdWlyZSgnLi9fY3R4Jyk7XG52YXIgSVNfQ09OQ0FUX1NQUkVBREFCTEUgPSByZXF1aXJlKCcuL193a3MnKSgnaXNDb25jYXRTcHJlYWRhYmxlJyk7XG5cbmZ1bmN0aW9uIGZsYXR0ZW5JbnRvQXJyYXkodGFyZ2V0LCBvcmlnaW5hbCwgc291cmNlLCBzb3VyY2VMZW4sIHN0YXJ0LCBkZXB0aCwgbWFwcGVyLCB0aGlzQXJnKSB7XG4gIHZhciB0YXJnZXRJbmRleCA9IHN0YXJ0O1xuICB2YXIgc291cmNlSW5kZXggPSAwO1xuICB2YXIgbWFwRm4gPSBtYXBwZXIgPyBjdHgobWFwcGVyLCB0aGlzQXJnLCAzKSA6IGZhbHNlO1xuICB2YXIgZWxlbWVudCwgc3ByZWFkYWJsZTtcblxuICB3aGlsZSAoc291cmNlSW5kZXggPCBzb3VyY2VMZW4pIHtcbiAgICBpZiAoc291cmNlSW5kZXggaW4gc291cmNlKSB7XG4gICAgICBlbGVtZW50ID0gbWFwRm4gPyBtYXBGbihzb3VyY2Vbc291cmNlSW5kZXhdLCBzb3VyY2VJbmRleCwgb3JpZ2luYWwpIDogc291cmNlW3NvdXJjZUluZGV4XTtcblxuICAgICAgc3ByZWFkYWJsZSA9IGZhbHNlO1xuICAgICAgaWYgKGlzT2JqZWN0KGVsZW1lbnQpKSB7XG4gICAgICAgIHNwcmVhZGFibGUgPSBlbGVtZW50W0lTX0NPTkNBVF9TUFJFQURBQkxFXTtcbiAgICAgICAgc3ByZWFkYWJsZSA9IHNwcmVhZGFibGUgIT09IHVuZGVmaW5lZCA/ICEhc3ByZWFkYWJsZSA6IGlzQXJyYXkoZWxlbWVudCk7XG4gICAgICB9XG5cbiAgICAgIGlmIChzcHJlYWRhYmxlICYmIGRlcHRoID4gMCkge1xuICAgICAgICB0YXJnZXRJbmRleCA9IGZsYXR0ZW5JbnRvQXJyYXkodGFyZ2V0LCBvcmlnaW5hbCwgZWxlbWVudCwgdG9MZW5ndGgoZWxlbWVudC5sZW5ndGgpLCB0YXJnZXRJbmRleCwgZGVwdGggLSAxKSAtIDE7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBpZiAodGFyZ2V0SW5kZXggPj0gMHgxZmZmZmZmZmZmZmZmZikgdGhyb3cgVHlwZUVycm9yKCk7XG4gICAgICAgIHRhcmdldFt0YXJnZXRJbmRleF0gPSBlbGVtZW50O1xuICAgICAgfVxuXG4gICAgICB0YXJnZXRJbmRleCsrO1xuICAgIH1cbiAgICBzb3VyY2VJbmRleCsrO1xuICB9XG4gIHJldHVybiB0YXJnZXRJbmRleDtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBmbGF0dGVuSW50b0FycmF5O1xuIiwiJ3VzZSBzdHJpY3QnO1xuLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9wcm9wb3NhbC1mbGF0TWFwLyNzZWMtQXJyYXkucHJvdG90eXBlLmZsYXRNYXBcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgZmxhdHRlbkludG9BcnJheSA9IHJlcXVpcmUoJy4vX2ZsYXR0ZW4taW50by1hcnJheScpO1xudmFyIHRvT2JqZWN0ID0gcmVxdWlyZSgnLi9fdG8tb2JqZWN0Jyk7XG52YXIgdG9MZW5ndGggPSByZXF1aXJlKCcuL190by1sZW5ndGgnKTtcbnZhciBhRnVuY3Rpb24gPSByZXF1aXJlKCcuL19hLWZ1bmN0aW9uJyk7XG52YXIgYXJyYXlTcGVjaWVzQ3JlYXRlID0gcmVxdWlyZSgnLi9fYXJyYXktc3BlY2llcy1jcmVhdGUnKTtcblxuJGV4cG9ydCgkZXhwb3J0LlAsICdBcnJheScsIHtcbiAgZmxhdE1hcDogZnVuY3Rpb24gZmxhdE1hcChjYWxsYmFja2ZuIC8qICwgdGhpc0FyZyAqLykge1xuICAgIHZhciBPID0gdG9PYmplY3QodGhpcyk7XG4gICAgdmFyIHNvdXJjZUxlbiwgQTtcbiAgICBhRnVuY3Rpb24oY2FsbGJhY2tmbik7XG4gICAgc291cmNlTGVuID0gdG9MZW5ndGgoTy5sZW5ndGgpO1xuICAgIEEgPSBhcnJheVNwZWNpZXNDcmVhdGUoTywgMCk7XG4gICAgZmxhdHRlbkludG9BcnJheShBLCBPLCBPLCBzb3VyY2VMZW4sIDAsIDEsIGNhbGxiYWNrZm4sIGFyZ3VtZW50c1sxXSk7XG4gICAgcmV0dXJuIEE7XG4gIH1cbn0pO1xuXG5yZXF1aXJlKCcuL19hZGQtdG8tdW5zY29wYWJsZXMnKSgnZmxhdE1hcCcpO1xuIiwicmVxdWlyZSgnLi4vLi4vbW9kdWxlcy9lczcuYXJyYXkuZmxhdC1tYXAnKTtcbm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi4vLi4vbW9kdWxlcy9fY29yZScpLkFycmF5LmZsYXRNYXA7XG4iLCIvLyBodHRwczovL2dpdGh1Yi5jb20vdGMzOS9wcm9wb3NhbC1zdHJpbmctcGFkLXN0YXJ0LWVuZFxudmFyIHRvTGVuZ3RoID0gcmVxdWlyZSgnLi9fdG8tbGVuZ3RoJyk7XG52YXIgcmVwZWF0ID0gcmVxdWlyZSgnLi9fc3RyaW5nLXJlcGVhdCcpO1xudmFyIGRlZmluZWQgPSByZXF1aXJlKCcuL19kZWZpbmVkJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKHRoYXQsIG1heExlbmd0aCwgZmlsbFN0cmluZywgbGVmdCkge1xuICB2YXIgUyA9IFN0cmluZyhkZWZpbmVkKHRoYXQpKTtcbiAgdmFyIHN0cmluZ0xlbmd0aCA9IFMubGVuZ3RoO1xuICB2YXIgZmlsbFN0ciA9IGZpbGxTdHJpbmcgPT09IHVuZGVmaW5lZCA/ICcgJyA6IFN0cmluZyhmaWxsU3RyaW5nKTtcbiAgdmFyIGludE1heExlbmd0aCA9IHRvTGVuZ3RoKG1heExlbmd0aCk7XG4gIGlmIChpbnRNYXhMZW5ndGggPD0gc3RyaW5nTGVuZ3RoIHx8IGZpbGxTdHIgPT0gJycpIHJldHVybiBTO1xuICB2YXIgZmlsbExlbiA9IGludE1heExlbmd0aCAtIHN0cmluZ0xlbmd0aDtcbiAgdmFyIHN0cmluZ0ZpbGxlciA9IHJlcGVhdC5jYWxsKGZpbGxTdHIsIE1hdGguY2VpbChmaWxsTGVuIC8gZmlsbFN0ci5sZW5ndGgpKTtcbiAgaWYgKHN0cmluZ0ZpbGxlci5sZW5ndGggPiBmaWxsTGVuKSBzdHJpbmdGaWxsZXIgPSBzdHJpbmdGaWxsZXIuc2xpY2UoMCwgZmlsbExlbik7XG4gIHJldHVybiBsZWZ0ID8gc3RyaW5nRmlsbGVyICsgUyA6IFMgKyBzdHJpbmdGaWxsZXI7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuLy8gaHR0cHM6Ly9naXRodWIuY29tL3RjMzkvcHJvcG9zYWwtc3RyaW5nLXBhZC1zdGFydC1lbmRcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgJHBhZCA9IHJlcXVpcmUoJy4vX3N0cmluZy1wYWQnKTtcbnZhciB1c2VyQWdlbnQgPSByZXF1aXJlKCcuL191c2VyLWFnZW50Jyk7XG5cbi8vIGh0dHBzOi8vZ2l0aHViLmNvbS96bG9pcm9jay9jb3JlLWpzL2lzc3Vlcy8yODBcbnZhciBXRUJLSVRfQlVHID0gL1ZlcnNpb25cXC8xMFxcLlxcZCsoXFwuXFxkKyk/KCBNb2JpbGVcXC9cXHcrKT8gU2FmYXJpXFwvLy50ZXN0KHVzZXJBZ2VudCk7XG5cbiRleHBvcnQoJGV4cG9ydC5QICsgJGV4cG9ydC5GICogV0VCS0lUX0JVRywgJ1N0cmluZycsIHtcbiAgcGFkU3RhcnQ6IGZ1bmN0aW9uIHBhZFN0YXJ0KG1heExlbmd0aCAvKiAsIGZpbGxTdHJpbmcgPSAnICcgKi8pIHtcbiAgICByZXR1cm4gJHBhZCh0aGlzLCBtYXhMZW5ndGgsIGFyZ3VtZW50cy5sZW5ndGggPiAxID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkLCB0cnVlKTtcbiAgfVxufSk7XG4iLCJyZXF1aXJlKCcuLi8uLi9tb2R1bGVzL2VzNy5zdHJpbmcucGFkLXN0YXJ0Jyk7XG5tb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4uLy4uL21vZHVsZXMvX2NvcmUnKS5TdHJpbmcucGFkU3RhcnQ7XG4iLCIndXNlIHN0cmljdCc7XG4vLyBodHRwczovL2dpdGh1Yi5jb20vdGMzOS9wcm9wb3NhbC1zdHJpbmctcGFkLXN0YXJ0LWVuZFxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciAkcGFkID0gcmVxdWlyZSgnLi9fc3RyaW5nLXBhZCcpO1xudmFyIHVzZXJBZ2VudCA9IHJlcXVpcmUoJy4vX3VzZXItYWdlbnQnKTtcblxuLy8gaHR0cHM6Ly9naXRodWIuY29tL3psb2lyb2NrL2NvcmUtanMvaXNzdWVzLzI4MFxudmFyIFdFQktJVF9CVUcgPSAvVmVyc2lvblxcLzEwXFwuXFxkKyhcXC5cXGQrKT8oIE1vYmlsZVxcL1xcdyspPyBTYWZhcmlcXC8vLnRlc3QodXNlckFnZW50KTtcblxuJGV4cG9ydCgkZXhwb3J0LlAgKyAkZXhwb3J0LkYgKiBXRUJLSVRfQlVHLCAnU3RyaW5nJywge1xuICBwYWRFbmQ6IGZ1bmN0aW9uIHBhZEVuZChtYXhMZW5ndGggLyogLCBmaWxsU3RyaW5nID0gJyAnICovKSB7XG4gICAgcmV0dXJuICRwYWQodGhpcywgbWF4TGVuZ3RoLCBhcmd1bWVudHMubGVuZ3RoID4gMSA/IGFyZ3VtZW50c1sxXSA6IHVuZGVmaW5lZCwgZmFsc2UpO1xuICB9XG59KTtcbiIsInJlcXVpcmUoJy4uLy4uL21vZHVsZXMvZXM3LnN0cmluZy5wYWQtZW5kJyk7XG5tb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4uLy4uL21vZHVsZXMvX2NvcmUnKS5TdHJpbmcucGFkRW5kO1xuIiwiJ3VzZSBzdHJpY3QnO1xuLy8gaHR0cHM6Ly9naXRodWIuY29tL3NlYm1hcmtiYWdlL2VjbWFzY3JpcHQtc3RyaW5nLWxlZnQtcmlnaHQtdHJpbVxucmVxdWlyZSgnLi9fc3RyaW5nLXRyaW0nKSgndHJpbUxlZnQnLCBmdW5jdGlvbiAoJHRyaW0pIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIHRyaW1MZWZ0KCkge1xuICAgIHJldHVybiAkdHJpbSh0aGlzLCAxKTtcbiAgfTtcbn0sICd0cmltU3RhcnQnKTtcbiIsInJlcXVpcmUoJy4uLy4uL21vZHVsZXMvZXM3LnN0cmluZy50cmltLWxlZnQnKTtcbm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi4vLi4vbW9kdWxlcy9fY29yZScpLlN0cmluZy50cmltTGVmdDtcbiIsIid1c2Ugc3RyaWN0Jztcbi8vIGh0dHBzOi8vZ2l0aHViLmNvbS9zZWJtYXJrYmFnZS9lY21hc2NyaXB0LXN0cmluZy1sZWZ0LXJpZ2h0LXRyaW1cbnJlcXVpcmUoJy4vX3N0cmluZy10cmltJykoJ3RyaW1SaWdodCcsIGZ1bmN0aW9uICgkdHJpbSkge1xuICByZXR1cm4gZnVuY3Rpb24gdHJpbVJpZ2h0KCkge1xuICAgIHJldHVybiAkdHJpbSh0aGlzLCAyKTtcbiAgfTtcbn0sICd0cmltRW5kJyk7XG4iLCJyZXF1aXJlKCcuLi8uLi9tb2R1bGVzL2VzNy5zdHJpbmcudHJpbS1yaWdodCcpO1xubW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuLi8uLi9tb2R1bGVzL19jb3JlJykuU3RyaW5nLnRyaW1SaWdodDtcbiIsInJlcXVpcmUoJy4vX3drcy1kZWZpbmUnKSgnYXN5bmNJdGVyYXRvcicpO1xuIiwicmVxdWlyZSgnLi4vLi4vbW9kdWxlcy9lczcuc3ltYm9sLmFzeW5jLWl0ZXJhdG9yJyk7XG5tb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4uLy4uL21vZHVsZXMvX3drcy1leHQnKS5mKCdhc3luY0l0ZXJhdG9yJyk7XG4iLCIvLyBodHRwczovL2dpdGh1Yi5jb20vdGMzOS9wcm9wb3NhbC1vYmplY3QtZ2V0b3ducHJvcGVydHlkZXNjcmlwdG9yc1xudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciBvd25LZXlzID0gcmVxdWlyZSgnLi9fb3duLWtleXMnKTtcbnZhciB0b0lPYmplY3QgPSByZXF1aXJlKCcuL190by1pb2JqZWN0Jyk7XG52YXIgZ09QRCA9IHJlcXVpcmUoJy4vX29iamVjdC1nb3BkJyk7XG52YXIgY3JlYXRlUHJvcGVydHkgPSByZXF1aXJlKCcuL19jcmVhdGUtcHJvcGVydHknKTtcblxuJGV4cG9ydCgkZXhwb3J0LlMsICdPYmplY3QnLCB7XG4gIGdldE93blByb3BlcnR5RGVzY3JpcHRvcnM6IGZ1bmN0aW9uIGdldE93blByb3BlcnR5RGVzY3JpcHRvcnMob2JqZWN0KSB7XG4gICAgdmFyIE8gPSB0b0lPYmplY3Qob2JqZWN0KTtcbiAgICB2YXIgZ2V0RGVzYyA9IGdPUEQuZjtcbiAgICB2YXIga2V5cyA9IG93bktleXMoTyk7XG4gICAgdmFyIHJlc3VsdCA9IHt9O1xuICAgIHZhciBpID0gMDtcbiAgICB2YXIga2V5LCBkZXNjO1xuICAgIHdoaWxlIChrZXlzLmxlbmd0aCA+IGkpIHtcbiAgICAgIGRlc2MgPSBnZXREZXNjKE8sIGtleSA9IGtleXNbaSsrXSk7XG4gICAgICBpZiAoZGVzYyAhPT0gdW5kZWZpbmVkKSBjcmVhdGVQcm9wZXJ0eShyZXN1bHQsIGtleSwgZGVzYyk7XG4gICAgfVxuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cbn0pO1xuIiwicmVxdWlyZSgnLi4vLi4vbW9kdWxlcy9lczcub2JqZWN0LmdldC1vd24tcHJvcGVydHktZGVzY3JpcHRvcnMnKTtcbm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi4vLi4vbW9kdWxlcy9fY29yZScpLk9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JzO1xuIiwidmFyIERFU0NSSVBUT1JTID0gcmVxdWlyZSgnLi9fZGVzY3JpcHRvcnMnKTtcbnZhciBnZXRLZXlzID0gcmVxdWlyZSgnLi9fb2JqZWN0LWtleXMnKTtcbnZhciB0b0lPYmplY3QgPSByZXF1aXJlKCcuL190by1pb2JqZWN0Jyk7XG52YXIgaXNFbnVtID0gcmVxdWlyZSgnLi9fb2JqZWN0LXBpZScpLmY7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpc0VudHJpZXMpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIChpdCkge1xuICAgIHZhciBPID0gdG9JT2JqZWN0KGl0KTtcbiAgICB2YXIga2V5cyA9IGdldEtleXMoTyk7XG4gICAgdmFyIGxlbmd0aCA9IGtleXMubGVuZ3RoO1xuICAgIHZhciBpID0gMDtcbiAgICB2YXIgcmVzdWx0ID0gW107XG4gICAgdmFyIGtleTtcbiAgICB3aGlsZSAobGVuZ3RoID4gaSkge1xuICAgICAga2V5ID0ga2V5c1tpKytdO1xuICAgICAgaWYgKCFERVNDUklQVE9SUyB8fCBpc0VudW0uY2FsbChPLCBrZXkpKSB7XG4gICAgICAgIHJlc3VsdC5wdXNoKGlzRW50cmllcyA/IFtrZXksIE9ba2V5XV0gOiBPW2tleV0pO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0O1xuICB9O1xufTtcbiIsIi8vIGh0dHBzOi8vZ2l0aHViLmNvbS90YzM5L3Byb3Bvc2FsLW9iamVjdC12YWx1ZXMtZW50cmllc1xudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciAkdmFsdWVzID0gcmVxdWlyZSgnLi9fb2JqZWN0LXRvLWFycmF5JykoZmFsc2UpO1xuXG4kZXhwb3J0KCRleHBvcnQuUywgJ09iamVjdCcsIHtcbiAgdmFsdWVzOiBmdW5jdGlvbiB2YWx1ZXMoaXQpIHtcbiAgICByZXR1cm4gJHZhbHVlcyhpdCk7XG4gIH1cbn0pO1xuIiwicmVxdWlyZSgnLi4vLi4vbW9kdWxlcy9lczcub2JqZWN0LnZhbHVlcycpO1xubW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuLi8uLi9tb2R1bGVzL19jb3JlJykuT2JqZWN0LnZhbHVlcztcbiIsIi8vIGh0dHBzOi8vZ2l0aHViLmNvbS90YzM5L3Byb3Bvc2FsLW9iamVjdC12YWx1ZXMtZW50cmllc1xudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciAkZW50cmllcyA9IHJlcXVpcmUoJy4vX29iamVjdC10by1hcnJheScpKHRydWUpO1xuXG4kZXhwb3J0KCRleHBvcnQuUywgJ09iamVjdCcsIHtcbiAgZW50cmllczogZnVuY3Rpb24gZW50cmllcyhpdCkge1xuICAgIHJldHVybiAkZW50cmllcyhpdCk7XG4gIH1cbn0pO1xuIiwicmVxdWlyZSgnLi4vLi4vbW9kdWxlcy9lczcub2JqZWN0LmVudHJpZXMnKTtcbm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi4vLi4vbW9kdWxlcy9fY29yZScpLk9iamVjdC5lbnRyaWVzO1xuIiwiLy8gaHR0cHM6Ly9naXRodWIuY29tL3RjMzkvcHJvcG9zYWwtcHJvbWlzZS1maW5hbGx5XG4ndXNlIHN0cmljdCc7XG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIGNvcmUgPSByZXF1aXJlKCcuL19jb3JlJyk7XG52YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi9fZ2xvYmFsJyk7XG52YXIgc3BlY2llc0NvbnN0cnVjdG9yID0gcmVxdWlyZSgnLi9fc3BlY2llcy1jb25zdHJ1Y3RvcicpO1xudmFyIHByb21pc2VSZXNvbHZlID0gcmVxdWlyZSgnLi9fcHJvbWlzZS1yZXNvbHZlJyk7XG5cbiRleHBvcnQoJGV4cG9ydC5QICsgJGV4cG9ydC5SLCAnUHJvbWlzZScsIHsgJ2ZpbmFsbHknOiBmdW5jdGlvbiAob25GaW5hbGx5KSB7XG4gIHZhciBDID0gc3BlY2llc0NvbnN0cnVjdG9yKHRoaXMsIGNvcmUuUHJvbWlzZSB8fCBnbG9iYWwuUHJvbWlzZSk7XG4gIHZhciBpc0Z1bmN0aW9uID0gdHlwZW9mIG9uRmluYWxseSA9PSAnZnVuY3Rpb24nO1xuICByZXR1cm4gdGhpcy50aGVuKFxuICAgIGlzRnVuY3Rpb24gPyBmdW5jdGlvbiAoeCkge1xuICAgICAgcmV0dXJuIHByb21pc2VSZXNvbHZlKEMsIG9uRmluYWxseSgpKS50aGVuKGZ1bmN0aW9uICgpIHsgcmV0dXJuIHg7IH0pO1xuICAgIH0gOiBvbkZpbmFsbHksXG4gICAgaXNGdW5jdGlvbiA/IGZ1bmN0aW9uIChlKSB7XG4gICAgICByZXR1cm4gcHJvbWlzZVJlc29sdmUoQywgb25GaW5hbGx5KCkpLnRoZW4oZnVuY3Rpb24gKCkgeyB0aHJvdyBlOyB9KTtcbiAgICB9IDogb25GaW5hbGx5XG4gICk7XG59IH0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xucmVxdWlyZSgnLi4vLi4vbW9kdWxlcy9lczYucHJvbWlzZScpO1xucmVxdWlyZSgnLi4vLi4vbW9kdWxlcy9lczcucHJvbWlzZS5maW5hbGx5Jyk7XG5tb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4uLy4uL21vZHVsZXMvX2NvcmUnKS5Qcm9taXNlWydmaW5hbGx5J107XG4iLCIvLyBpZTktIHNldFRpbWVvdXQgJiBzZXRJbnRlcnZhbCBhZGRpdGlvbmFsIHBhcmFtZXRlcnMgZml4XG52YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi9fZ2xvYmFsJyk7XG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIHVzZXJBZ2VudCA9IHJlcXVpcmUoJy4vX3VzZXItYWdlbnQnKTtcbnZhciBzbGljZSA9IFtdLnNsaWNlO1xudmFyIE1TSUUgPSAvTVNJRSAuXFwuLy50ZXN0KHVzZXJBZ2VudCk7IC8vIDwtIGRpcnR5IGllOS0gY2hlY2tcbnZhciB3cmFwID0gZnVuY3Rpb24gKHNldCkge1xuICByZXR1cm4gZnVuY3Rpb24gKGZuLCB0aW1lIC8qICwgLi4uYXJncyAqLykge1xuICAgIHZhciBib3VuZEFyZ3MgPSBhcmd1bWVudHMubGVuZ3RoID4gMjtcbiAgICB2YXIgYXJncyA9IGJvdW5kQXJncyA/IHNsaWNlLmNhbGwoYXJndW1lbnRzLCAyKSA6IGZhbHNlO1xuICAgIHJldHVybiBzZXQoYm91bmRBcmdzID8gZnVuY3Rpb24gKCkge1xuICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLW5ldy1mdW5jXG4gICAgICAodHlwZW9mIGZuID09ICdmdW5jdGlvbicgPyBmbiA6IEZ1bmN0aW9uKGZuKSkuYXBwbHkodGhpcywgYXJncyk7XG4gICAgfSA6IGZuLCB0aW1lKTtcbiAgfTtcbn07XG4kZXhwb3J0KCRleHBvcnQuRyArICRleHBvcnQuQiArICRleHBvcnQuRiAqIE1TSUUsIHtcbiAgc2V0VGltZW91dDogd3JhcChnbG9iYWwuc2V0VGltZW91dCksXG4gIHNldEludGVydmFsOiB3cmFwKGdsb2JhbC5zZXRJbnRlcnZhbClcbn0pO1xuIiwidmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciAkdGFzayA9IHJlcXVpcmUoJy4vX3Rhc2snKTtcbiRleHBvcnQoJGV4cG9ydC5HICsgJGV4cG9ydC5CLCB7XG4gIHNldEltbWVkaWF0ZTogJHRhc2suc2V0LFxuICBjbGVhckltbWVkaWF0ZTogJHRhc2suY2xlYXJcbn0pO1xuIiwidmFyICRpdGVyYXRvcnMgPSByZXF1aXJlKCcuL2VzNi5hcnJheS5pdGVyYXRvcicpO1xudmFyIGdldEtleXMgPSByZXF1aXJlKCcuL19vYmplY3Qta2V5cycpO1xudmFyIHJlZGVmaW5lID0gcmVxdWlyZSgnLi9fcmVkZWZpbmUnKTtcbnZhciBnbG9iYWwgPSByZXF1aXJlKCcuL19nbG9iYWwnKTtcbnZhciBoaWRlID0gcmVxdWlyZSgnLi9faGlkZScpO1xudmFyIEl0ZXJhdG9ycyA9IHJlcXVpcmUoJy4vX2l0ZXJhdG9ycycpO1xudmFyIHdrcyA9IHJlcXVpcmUoJy4vX3drcycpO1xudmFyIElURVJBVE9SID0gd2tzKCdpdGVyYXRvcicpO1xudmFyIFRPX1NUUklOR19UQUcgPSB3a3MoJ3RvU3RyaW5nVGFnJyk7XG52YXIgQXJyYXlWYWx1ZXMgPSBJdGVyYXRvcnMuQXJyYXk7XG5cbnZhciBET01JdGVyYWJsZXMgPSB7XG4gIENTU1J1bGVMaXN0OiB0cnVlLCAvLyBUT0RPOiBOb3Qgc3BlYyBjb21wbGlhbnQsIHNob3VsZCBiZSBmYWxzZS5cbiAgQ1NTU3R5bGVEZWNsYXJhdGlvbjogZmFsc2UsXG4gIENTU1ZhbHVlTGlzdDogZmFsc2UsXG4gIENsaWVudFJlY3RMaXN0OiBmYWxzZSxcbiAgRE9NUmVjdExpc3Q6IGZhbHNlLFxuICBET01TdHJpbmdMaXN0OiBmYWxzZSxcbiAgRE9NVG9rZW5MaXN0OiB0cnVlLFxuICBEYXRhVHJhbnNmZXJJdGVtTGlzdDogZmFsc2UsXG4gIEZpbGVMaXN0OiBmYWxzZSxcbiAgSFRNTEFsbENvbGxlY3Rpb246IGZhbHNlLFxuICBIVE1MQ29sbGVjdGlvbjogZmFsc2UsXG4gIEhUTUxGb3JtRWxlbWVudDogZmFsc2UsXG4gIEhUTUxTZWxlY3RFbGVtZW50OiBmYWxzZSxcbiAgTWVkaWFMaXN0OiB0cnVlLCAvLyBUT0RPOiBOb3Qgc3BlYyBjb21wbGlhbnQsIHNob3VsZCBiZSBmYWxzZS5cbiAgTWltZVR5cGVBcnJheTogZmFsc2UsXG4gIE5hbWVkTm9kZU1hcDogZmFsc2UsXG4gIE5vZGVMaXN0OiB0cnVlLFxuICBQYWludFJlcXVlc3RMaXN0OiBmYWxzZSxcbiAgUGx1Z2luOiBmYWxzZSxcbiAgUGx1Z2luQXJyYXk6IGZhbHNlLFxuICBTVkdMZW5ndGhMaXN0OiBmYWxzZSxcbiAgU1ZHTnVtYmVyTGlzdDogZmFsc2UsXG4gIFNWR1BhdGhTZWdMaXN0OiBmYWxzZSxcbiAgU1ZHUG9pbnRMaXN0OiBmYWxzZSxcbiAgU1ZHU3RyaW5nTGlzdDogZmFsc2UsXG4gIFNWR1RyYW5zZm9ybUxpc3Q6IGZhbHNlLFxuICBTb3VyY2VCdWZmZXJMaXN0OiBmYWxzZSxcbiAgU3R5bGVTaGVldExpc3Q6IHRydWUsIC8vIFRPRE86IE5vdCBzcGVjIGNvbXBsaWFudCwgc2hvdWxkIGJlIGZhbHNlLlxuICBUZXh0VHJhY2tDdWVMaXN0OiBmYWxzZSxcbiAgVGV4dFRyYWNrTGlzdDogZmFsc2UsXG4gIFRvdWNoTGlzdDogZmFsc2Vcbn07XG5cbmZvciAodmFyIGNvbGxlY3Rpb25zID0gZ2V0S2V5cyhET01JdGVyYWJsZXMpLCBpID0gMDsgaSA8IGNvbGxlY3Rpb25zLmxlbmd0aDsgaSsrKSB7XG4gIHZhciBOQU1FID0gY29sbGVjdGlvbnNbaV07XG4gIHZhciBleHBsaWNpdCA9IERPTUl0ZXJhYmxlc1tOQU1FXTtcbiAgdmFyIENvbGxlY3Rpb24gPSBnbG9iYWxbTkFNRV07XG4gIHZhciBwcm90byA9IENvbGxlY3Rpb24gJiYgQ29sbGVjdGlvbi5wcm90b3R5cGU7XG4gIHZhciBrZXk7XG4gIGlmIChwcm90bykge1xuICAgIGlmICghcHJvdG9bSVRFUkFUT1JdKSBoaWRlKHByb3RvLCBJVEVSQVRPUiwgQXJyYXlWYWx1ZXMpO1xuICAgIGlmICghcHJvdG9bVE9fU1RSSU5HX1RBR10pIGhpZGUocHJvdG8sIFRPX1NUUklOR19UQUcsIE5BTUUpO1xuICAgIEl0ZXJhdG9yc1tOQU1FXSA9IEFycmF5VmFsdWVzO1xuICAgIGlmIChleHBsaWNpdCkgZm9yIChrZXkgaW4gJGl0ZXJhdG9ycykgaWYgKCFwcm90b1trZXldKSByZWRlZmluZShwcm90bywga2V5LCAkaXRlcmF0b3JzW2tleV0sIHRydWUpO1xuICB9XG59XG4iLCIvKipcbiAqIENvcHlyaWdodCAoYykgMjAxNC1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICovXG5cbnZhciBydW50aW1lID0gKGZ1bmN0aW9uIChleHBvcnRzKSB7XG4gIFwidXNlIHN0cmljdFwiO1xuXG4gIHZhciBPcCA9IE9iamVjdC5wcm90b3R5cGU7XG4gIHZhciBoYXNPd24gPSBPcC5oYXNPd25Qcm9wZXJ0eTtcbiAgdmFyIHVuZGVmaW5lZDsgLy8gTW9yZSBjb21wcmVzc2libGUgdGhhbiB2b2lkIDAuXG4gIHZhciAkU3ltYm9sID0gdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiID8gU3ltYm9sIDoge307XG4gIHZhciBpdGVyYXRvclN5bWJvbCA9ICRTeW1ib2wuaXRlcmF0b3IgfHwgXCJAQGl0ZXJhdG9yXCI7XG4gIHZhciBhc3luY0l0ZXJhdG9yU3ltYm9sID0gJFN5bWJvbC5hc3luY0l0ZXJhdG9yIHx8IFwiQEBhc3luY0l0ZXJhdG9yXCI7XG4gIHZhciB0b1N0cmluZ1RhZ1N5bWJvbCA9ICRTeW1ib2wudG9TdHJpbmdUYWcgfHwgXCJAQHRvU3RyaW5nVGFnXCI7XG5cbiAgZnVuY3Rpb24gZGVmaW5lKG9iaiwga2V5LCB2YWx1ZSkge1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvYmosIGtleSwge1xuICAgICAgdmFsdWU6IHZhbHVlLFxuICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICAgIHdyaXRhYmxlOiB0cnVlXG4gICAgfSk7XG4gICAgcmV0dXJuIG9ialtrZXldO1xuICB9XG4gIHRyeSB7XG4gICAgLy8gSUUgOCBoYXMgYSBicm9rZW4gT2JqZWN0LmRlZmluZVByb3BlcnR5IHRoYXQgb25seSB3b3JrcyBvbiBET00gb2JqZWN0cy5cbiAgICBkZWZpbmUoe30sIFwiXCIpO1xuICB9IGNhdGNoIChlcnIpIHtcbiAgICBkZWZpbmUgPSBmdW5jdGlvbihvYmosIGtleSwgdmFsdWUpIHtcbiAgICAgIHJldHVybiBvYmpba2V5XSA9IHZhbHVlO1xuICAgIH07XG4gIH1cblxuICBmdW5jdGlvbiB3cmFwKGlubmVyRm4sIG91dGVyRm4sIHNlbGYsIHRyeUxvY3NMaXN0KSB7XG4gICAgLy8gSWYgb3V0ZXJGbiBwcm92aWRlZCBhbmQgb3V0ZXJGbi5wcm90b3R5cGUgaXMgYSBHZW5lcmF0b3IsIHRoZW4gb3V0ZXJGbi5wcm90b3R5cGUgaW5zdGFuY2VvZiBHZW5lcmF0b3IuXG4gICAgdmFyIHByb3RvR2VuZXJhdG9yID0gb3V0ZXJGbiAmJiBvdXRlckZuLnByb3RvdHlwZSBpbnN0YW5jZW9mIEdlbmVyYXRvciA/IG91dGVyRm4gOiBHZW5lcmF0b3I7XG4gICAgdmFyIGdlbmVyYXRvciA9IE9iamVjdC5jcmVhdGUocHJvdG9HZW5lcmF0b3IucHJvdG90eXBlKTtcbiAgICB2YXIgY29udGV4dCA9IG5ldyBDb250ZXh0KHRyeUxvY3NMaXN0IHx8IFtdKTtcblxuICAgIC8vIFRoZSAuX2ludm9rZSBtZXRob2QgdW5pZmllcyB0aGUgaW1wbGVtZW50YXRpb25zIG9mIHRoZSAubmV4dCxcbiAgICAvLyAudGhyb3csIGFuZCAucmV0dXJuIG1ldGhvZHMuXG4gICAgZ2VuZXJhdG9yLl9pbnZva2UgPSBtYWtlSW52b2tlTWV0aG9kKGlubmVyRm4sIHNlbGYsIGNvbnRleHQpO1xuXG4gICAgcmV0dXJuIGdlbmVyYXRvcjtcbiAgfVxuICBleHBvcnRzLndyYXAgPSB3cmFwO1xuXG4gIC8vIFRyeS9jYXRjaCBoZWxwZXIgdG8gbWluaW1pemUgZGVvcHRpbWl6YXRpb25zLiBSZXR1cm5zIGEgY29tcGxldGlvblxuICAvLyByZWNvcmQgbGlrZSBjb250ZXh0LnRyeUVudHJpZXNbaV0uY29tcGxldGlvbi4gVGhpcyBpbnRlcmZhY2UgY291bGRcbiAgLy8gaGF2ZSBiZWVuIChhbmQgd2FzIHByZXZpb3VzbHkpIGRlc2lnbmVkIHRvIHRha2UgYSBjbG9zdXJlIHRvIGJlXG4gIC8vIGludm9rZWQgd2l0aG91dCBhcmd1bWVudHMsIGJ1dCBpbiBhbGwgdGhlIGNhc2VzIHdlIGNhcmUgYWJvdXQgd2VcbiAgLy8gYWxyZWFkeSBoYXZlIGFuIGV4aXN0aW5nIG1ldGhvZCB3ZSB3YW50IHRvIGNhbGwsIHNvIHRoZXJlJ3Mgbm8gbmVlZFxuICAvLyB0byBjcmVhdGUgYSBuZXcgZnVuY3Rpb24gb2JqZWN0LiBXZSBjYW4gZXZlbiBnZXQgYXdheSB3aXRoIGFzc3VtaW5nXG4gIC8vIHRoZSBtZXRob2QgdGFrZXMgZXhhY3RseSBvbmUgYXJndW1lbnQsIHNpbmNlIHRoYXQgaGFwcGVucyB0byBiZSB0cnVlXG4gIC8vIGluIGV2ZXJ5IGNhc2UsIHNvIHdlIGRvbid0IGhhdmUgdG8gdG91Y2ggdGhlIGFyZ3VtZW50cyBvYmplY3QuIFRoZVxuICAvLyBvbmx5IGFkZGl0aW9uYWwgYWxsb2NhdGlvbiByZXF1aXJlZCBpcyB0aGUgY29tcGxldGlvbiByZWNvcmQsIHdoaWNoXG4gIC8vIGhhcyBhIHN0YWJsZSBzaGFwZSBhbmQgc28gaG9wZWZ1bGx5IHNob3VsZCBiZSBjaGVhcCB0byBhbGxvY2F0ZS5cbiAgZnVuY3Rpb24gdHJ5Q2F0Y2goZm4sIG9iaiwgYXJnKSB7XG4gICAgdHJ5IHtcbiAgICAgIHJldHVybiB7IHR5cGU6IFwibm9ybWFsXCIsIGFyZzogZm4uY2FsbChvYmosIGFyZykgfTtcbiAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgIHJldHVybiB7IHR5cGU6IFwidGhyb3dcIiwgYXJnOiBlcnIgfTtcbiAgICB9XG4gIH1cblxuICB2YXIgR2VuU3RhdGVTdXNwZW5kZWRTdGFydCA9IFwic3VzcGVuZGVkU3RhcnRcIjtcbiAgdmFyIEdlblN0YXRlU3VzcGVuZGVkWWllbGQgPSBcInN1c3BlbmRlZFlpZWxkXCI7XG4gIHZhciBHZW5TdGF0ZUV4ZWN1dGluZyA9IFwiZXhlY3V0aW5nXCI7XG4gIHZhciBHZW5TdGF0ZUNvbXBsZXRlZCA9IFwiY29tcGxldGVkXCI7XG5cbiAgLy8gUmV0dXJuaW5nIHRoaXMgb2JqZWN0IGZyb20gdGhlIGlubmVyRm4gaGFzIHRoZSBzYW1lIGVmZmVjdCBhc1xuICAvLyBicmVha2luZyBvdXQgb2YgdGhlIGRpc3BhdGNoIHN3aXRjaCBzdGF0ZW1lbnQuXG4gIHZhciBDb250aW51ZVNlbnRpbmVsID0ge307XG5cbiAgLy8gRHVtbXkgY29uc3RydWN0b3IgZnVuY3Rpb25zIHRoYXQgd2UgdXNlIGFzIHRoZSAuY29uc3RydWN0b3IgYW5kXG4gIC8vIC5jb25zdHJ1Y3Rvci5wcm90b3R5cGUgcHJvcGVydGllcyBmb3IgZnVuY3Rpb25zIHRoYXQgcmV0dXJuIEdlbmVyYXRvclxuICAvLyBvYmplY3RzLiBGb3IgZnVsbCBzcGVjIGNvbXBsaWFuY2UsIHlvdSBtYXkgd2lzaCB0byBjb25maWd1cmUgeW91clxuICAvLyBtaW5pZmllciBub3QgdG8gbWFuZ2xlIHRoZSBuYW1lcyBvZiB0aGVzZSB0d28gZnVuY3Rpb25zLlxuICBmdW5jdGlvbiBHZW5lcmF0b3IoKSB7fVxuICBmdW5jdGlvbiBHZW5lcmF0b3JGdW5jdGlvbigpIHt9XG4gIGZ1bmN0aW9uIEdlbmVyYXRvckZ1bmN0aW9uUHJvdG90eXBlKCkge31cblxuICAvLyBUaGlzIGlzIGEgcG9seWZpbGwgZm9yICVJdGVyYXRvclByb3RvdHlwZSUgZm9yIGVudmlyb25tZW50cyB0aGF0XG4gIC8vIGRvbid0IG5hdGl2ZWx5IHN1cHBvcnQgaXQuXG4gIHZhciBJdGVyYXRvclByb3RvdHlwZSA9IHt9O1xuICBJdGVyYXRvclByb3RvdHlwZVtpdGVyYXRvclN5bWJvbF0gPSBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH07XG5cbiAgdmFyIGdldFByb3RvID0gT2JqZWN0LmdldFByb3RvdHlwZU9mO1xuICB2YXIgTmF0aXZlSXRlcmF0b3JQcm90b3R5cGUgPSBnZXRQcm90byAmJiBnZXRQcm90byhnZXRQcm90byh2YWx1ZXMoW10pKSk7XG4gIGlmIChOYXRpdmVJdGVyYXRvclByb3RvdHlwZSAmJlxuICAgICAgTmF0aXZlSXRlcmF0b3JQcm90b3R5cGUgIT09IE9wICYmXG4gICAgICBoYXNPd24uY2FsbChOYXRpdmVJdGVyYXRvclByb3RvdHlwZSwgaXRlcmF0b3JTeW1ib2wpKSB7XG4gICAgLy8gVGhpcyBlbnZpcm9ubWVudCBoYXMgYSBuYXRpdmUgJUl0ZXJhdG9yUHJvdG90eXBlJTsgdXNlIGl0IGluc3RlYWRcbiAgICAvLyBvZiB0aGUgcG9seWZpbGwuXG4gICAgSXRlcmF0b3JQcm90b3R5cGUgPSBOYXRpdmVJdGVyYXRvclByb3RvdHlwZTtcbiAgfVxuXG4gIHZhciBHcCA9IEdlbmVyYXRvckZ1bmN0aW9uUHJvdG90eXBlLnByb3RvdHlwZSA9XG4gICAgR2VuZXJhdG9yLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoSXRlcmF0b3JQcm90b3R5cGUpO1xuICBHZW5lcmF0b3JGdW5jdGlvbi5wcm90b3R5cGUgPSBHcC5jb25zdHJ1Y3RvciA9IEdlbmVyYXRvckZ1bmN0aW9uUHJvdG90eXBlO1xuICBHZW5lcmF0b3JGdW5jdGlvblByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IEdlbmVyYXRvckZ1bmN0aW9uO1xuICBHZW5lcmF0b3JGdW5jdGlvbi5kaXNwbGF5TmFtZSA9IGRlZmluZShcbiAgICBHZW5lcmF0b3JGdW5jdGlvblByb3RvdHlwZSxcbiAgICB0b1N0cmluZ1RhZ1N5bWJvbCxcbiAgICBcIkdlbmVyYXRvckZ1bmN0aW9uXCJcbiAgKTtcblxuICAvLyBIZWxwZXIgZm9yIGRlZmluaW5nIHRoZSAubmV4dCwgLnRocm93LCBhbmQgLnJldHVybiBtZXRob2RzIG9mIHRoZVxuICAvLyBJdGVyYXRvciBpbnRlcmZhY2UgaW4gdGVybXMgb2YgYSBzaW5nbGUgLl9pbnZva2UgbWV0aG9kLlxuICBmdW5jdGlvbiBkZWZpbmVJdGVyYXRvck1ldGhvZHMocHJvdG90eXBlKSB7XG4gICAgW1wibmV4dFwiLCBcInRocm93XCIsIFwicmV0dXJuXCJdLmZvckVhY2goZnVuY3Rpb24obWV0aG9kKSB7XG4gICAgICBkZWZpbmUocHJvdG90eXBlLCBtZXRob2QsIGZ1bmN0aW9uKGFyZykge1xuICAgICAgICByZXR1cm4gdGhpcy5faW52b2tlKG1ldGhvZCwgYXJnKTtcbiAgICAgIH0pO1xuICAgIH0pO1xuICB9XG5cbiAgZXhwb3J0cy5pc0dlbmVyYXRvckZ1bmN0aW9uID0gZnVuY3Rpb24oZ2VuRnVuKSB7XG4gICAgdmFyIGN0b3IgPSB0eXBlb2YgZ2VuRnVuID09PSBcImZ1bmN0aW9uXCIgJiYgZ2VuRnVuLmNvbnN0cnVjdG9yO1xuICAgIHJldHVybiBjdG9yXG4gICAgICA/IGN0b3IgPT09IEdlbmVyYXRvckZ1bmN0aW9uIHx8XG4gICAgICAgIC8vIEZvciB0aGUgbmF0aXZlIEdlbmVyYXRvckZ1bmN0aW9uIGNvbnN0cnVjdG9yLCB0aGUgYmVzdCB3ZSBjYW5cbiAgICAgICAgLy8gZG8gaXMgdG8gY2hlY2sgaXRzIC5uYW1lIHByb3BlcnR5LlxuICAgICAgICAoY3Rvci5kaXNwbGF5TmFtZSB8fCBjdG9yLm5hbWUpID09PSBcIkdlbmVyYXRvckZ1bmN0aW9uXCJcbiAgICAgIDogZmFsc2U7XG4gIH07XG5cbiAgZXhwb3J0cy5tYXJrID0gZnVuY3Rpb24oZ2VuRnVuKSB7XG4gICAgaWYgKE9iamVjdC5zZXRQcm90b3R5cGVPZikge1xuICAgICAgT2JqZWN0LnNldFByb3RvdHlwZU9mKGdlbkZ1biwgR2VuZXJhdG9yRnVuY3Rpb25Qcm90b3R5cGUpO1xuICAgIH0gZWxzZSB7XG4gICAgICBnZW5GdW4uX19wcm90b19fID0gR2VuZXJhdG9yRnVuY3Rpb25Qcm90b3R5cGU7XG4gICAgICBkZWZpbmUoZ2VuRnVuLCB0b1N0cmluZ1RhZ1N5bWJvbCwgXCJHZW5lcmF0b3JGdW5jdGlvblwiKTtcbiAgICB9XG4gICAgZ2VuRnVuLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoR3ApO1xuICAgIHJldHVybiBnZW5GdW47XG4gIH07XG5cbiAgLy8gV2l0aGluIHRoZSBib2R5IG9mIGFueSBhc3luYyBmdW5jdGlvbiwgYGF3YWl0IHhgIGlzIHRyYW5zZm9ybWVkIHRvXG4gIC8vIGB5aWVsZCByZWdlbmVyYXRvclJ1bnRpbWUuYXdyYXAoeClgLCBzbyB0aGF0IHRoZSBydW50aW1lIGNhbiB0ZXN0XG4gIC8vIGBoYXNPd24uY2FsbCh2YWx1ZSwgXCJfX2F3YWl0XCIpYCB0byBkZXRlcm1pbmUgaWYgdGhlIHlpZWxkZWQgdmFsdWUgaXNcbiAgLy8gbWVhbnQgdG8gYmUgYXdhaXRlZC5cbiAgZXhwb3J0cy5hd3JhcCA9IGZ1bmN0aW9uKGFyZykge1xuICAgIHJldHVybiB7IF9fYXdhaXQ6IGFyZyB9O1xuICB9O1xuXG4gIGZ1bmN0aW9uIEFzeW5jSXRlcmF0b3IoZ2VuZXJhdG9yLCBQcm9taXNlSW1wbCkge1xuICAgIGZ1bmN0aW9uIGludm9rZShtZXRob2QsIGFyZywgcmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgICB2YXIgcmVjb3JkID0gdHJ5Q2F0Y2goZ2VuZXJhdG9yW21ldGhvZF0sIGdlbmVyYXRvciwgYXJnKTtcbiAgICAgIGlmIChyZWNvcmQudHlwZSA9PT0gXCJ0aHJvd1wiKSB7XG4gICAgICAgIHJlamVjdChyZWNvcmQuYXJnKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHZhciByZXN1bHQgPSByZWNvcmQuYXJnO1xuICAgICAgICB2YXIgdmFsdWUgPSByZXN1bHQudmFsdWU7XG4gICAgICAgIGlmICh2YWx1ZSAmJlxuICAgICAgICAgICAgdHlwZW9mIHZhbHVlID09PSBcIm9iamVjdFwiICYmXG4gICAgICAgICAgICBoYXNPd24uY2FsbCh2YWx1ZSwgXCJfX2F3YWl0XCIpKSB7XG4gICAgICAgICAgcmV0dXJuIFByb21pc2VJbXBsLnJlc29sdmUodmFsdWUuX19hd2FpdCkudGhlbihmdW5jdGlvbih2YWx1ZSkge1xuICAgICAgICAgICAgaW52b2tlKFwibmV4dFwiLCB2YWx1ZSwgcmVzb2x2ZSwgcmVqZWN0KTtcbiAgICAgICAgICB9LCBmdW5jdGlvbihlcnIpIHtcbiAgICAgICAgICAgIGludm9rZShcInRocm93XCIsIGVyciwgcmVzb2x2ZSwgcmVqZWN0KTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBQcm9taXNlSW1wbC5yZXNvbHZlKHZhbHVlKS50aGVuKGZ1bmN0aW9uKHVud3JhcHBlZCkge1xuICAgICAgICAgIC8vIFdoZW4gYSB5aWVsZGVkIFByb21pc2UgaXMgcmVzb2x2ZWQsIGl0cyBmaW5hbCB2YWx1ZSBiZWNvbWVzXG4gICAgICAgICAgLy8gdGhlIC52YWx1ZSBvZiB0aGUgUHJvbWlzZTx7dmFsdWUsZG9uZX0+IHJlc3VsdCBmb3IgdGhlXG4gICAgICAgICAgLy8gY3VycmVudCBpdGVyYXRpb24uXG4gICAgICAgICAgcmVzdWx0LnZhbHVlID0gdW53cmFwcGVkO1xuICAgICAgICAgIHJlc29sdmUocmVzdWx0KTtcbiAgICAgICAgfSwgZnVuY3Rpb24oZXJyb3IpIHtcbiAgICAgICAgICAvLyBJZiBhIHJlamVjdGVkIFByb21pc2Ugd2FzIHlpZWxkZWQsIHRocm93IHRoZSByZWplY3Rpb24gYmFja1xuICAgICAgICAgIC8vIGludG8gdGhlIGFzeW5jIGdlbmVyYXRvciBmdW5jdGlvbiBzbyBpdCBjYW4gYmUgaGFuZGxlZCB0aGVyZS5cbiAgICAgICAgICByZXR1cm4gaW52b2tlKFwidGhyb3dcIiwgZXJyb3IsIHJlc29sdmUsIHJlamVjdCk7XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH1cblxuICAgIHZhciBwcmV2aW91c1Byb21pc2U7XG5cbiAgICBmdW5jdGlvbiBlbnF1ZXVlKG1ldGhvZCwgYXJnKSB7XG4gICAgICBmdW5jdGlvbiBjYWxsSW52b2tlV2l0aE1ldGhvZEFuZEFyZygpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlSW1wbChmdW5jdGlvbihyZXNvbHZlLCByZWplY3QpIHtcbiAgICAgICAgICBpbnZva2UobWV0aG9kLCBhcmcsIHJlc29sdmUsIHJlamVjdCk7XG4gICAgICAgIH0pO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gcHJldmlvdXNQcm9taXNlID1cbiAgICAgICAgLy8gSWYgZW5xdWV1ZSBoYXMgYmVlbiBjYWxsZWQgYmVmb3JlLCB0aGVuIHdlIHdhbnQgdG8gd2FpdCB1bnRpbFxuICAgICAgICAvLyBhbGwgcHJldmlvdXMgUHJvbWlzZXMgaGF2ZSBiZWVuIHJlc29sdmVkIGJlZm9yZSBjYWxsaW5nIGludm9rZSxcbiAgICAgICAgLy8gc28gdGhhdCByZXN1bHRzIGFyZSBhbHdheXMgZGVsaXZlcmVkIGluIHRoZSBjb3JyZWN0IG9yZGVyLiBJZlxuICAgICAgICAvLyBlbnF1ZXVlIGhhcyBub3QgYmVlbiBjYWxsZWQgYmVmb3JlLCB0aGVuIGl0IGlzIGltcG9ydGFudCB0b1xuICAgICAgICAvLyBjYWxsIGludm9rZSBpbW1lZGlhdGVseSwgd2l0aG91dCB3YWl0aW5nIG9uIGEgY2FsbGJhY2sgdG8gZmlyZSxcbiAgICAgICAgLy8gc28gdGhhdCB0aGUgYXN5bmMgZ2VuZXJhdG9yIGZ1bmN0aW9uIGhhcyB0aGUgb3Bwb3J0dW5pdHkgdG8gZG9cbiAgICAgICAgLy8gYW55IG5lY2Vzc2FyeSBzZXR1cCBpbiBhIHByZWRpY3RhYmxlIHdheS4gVGhpcyBwcmVkaWN0YWJpbGl0eVxuICAgICAgICAvLyBpcyB3aHkgdGhlIFByb21pc2UgY29uc3RydWN0b3Igc3luY2hyb25vdXNseSBpbnZva2VzIGl0c1xuICAgICAgICAvLyBleGVjdXRvciBjYWxsYmFjaywgYW5kIHdoeSBhc3luYyBmdW5jdGlvbnMgc3luY2hyb25vdXNseVxuICAgICAgICAvLyBleGVjdXRlIGNvZGUgYmVmb3JlIHRoZSBmaXJzdCBhd2FpdC4gU2luY2Ugd2UgaW1wbGVtZW50IHNpbXBsZVxuICAgICAgICAvLyBhc3luYyBmdW5jdGlvbnMgaW4gdGVybXMgb2YgYXN5bmMgZ2VuZXJhdG9ycywgaXQgaXMgZXNwZWNpYWxseVxuICAgICAgICAvLyBpbXBvcnRhbnQgdG8gZ2V0IHRoaXMgcmlnaHQsIGV2ZW4gdGhvdWdoIGl0IHJlcXVpcmVzIGNhcmUuXG4gICAgICAgIHByZXZpb3VzUHJvbWlzZSA/IHByZXZpb3VzUHJvbWlzZS50aGVuKFxuICAgICAgICAgIGNhbGxJbnZva2VXaXRoTWV0aG9kQW5kQXJnLFxuICAgICAgICAgIC8vIEF2b2lkIHByb3BhZ2F0aW5nIGZhaWx1cmVzIHRvIFByb21pc2VzIHJldHVybmVkIGJ5IGxhdGVyXG4gICAgICAgICAgLy8gaW52b2NhdGlvbnMgb2YgdGhlIGl0ZXJhdG9yLlxuICAgICAgICAgIGNhbGxJbnZva2VXaXRoTWV0aG9kQW5kQXJnXG4gICAgICAgICkgOiBjYWxsSW52b2tlV2l0aE1ldGhvZEFuZEFyZygpO1xuICAgIH1cblxuICAgIC8vIERlZmluZSB0aGUgdW5pZmllZCBoZWxwZXIgbWV0aG9kIHRoYXQgaXMgdXNlZCB0byBpbXBsZW1lbnQgLm5leHQsXG4gICAgLy8gLnRocm93LCBhbmQgLnJldHVybiAoc2VlIGRlZmluZUl0ZXJhdG9yTWV0aG9kcykuXG4gICAgdGhpcy5faW52b2tlID0gZW5xdWV1ZTtcbiAgfVxuXG4gIGRlZmluZUl0ZXJhdG9yTWV0aG9kcyhBc3luY0l0ZXJhdG9yLnByb3RvdHlwZSk7XG4gIEFzeW5jSXRlcmF0b3IucHJvdG90eXBlW2FzeW5jSXRlcmF0b3JTeW1ib2xdID0gZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiB0aGlzO1xuICB9O1xuICBleHBvcnRzLkFzeW5jSXRlcmF0b3IgPSBBc3luY0l0ZXJhdG9yO1xuXG4gIC8vIE5vdGUgdGhhdCBzaW1wbGUgYXN5bmMgZnVuY3Rpb25zIGFyZSBpbXBsZW1lbnRlZCBvbiB0b3Agb2ZcbiAgLy8gQXN5bmNJdGVyYXRvciBvYmplY3RzOyB0aGV5IGp1c3QgcmV0dXJuIGEgUHJvbWlzZSBmb3IgdGhlIHZhbHVlIG9mXG4gIC8vIHRoZSBmaW5hbCByZXN1bHQgcHJvZHVjZWQgYnkgdGhlIGl0ZXJhdG9yLlxuICBleHBvcnRzLmFzeW5jID0gZnVuY3Rpb24oaW5uZXJGbiwgb3V0ZXJGbiwgc2VsZiwgdHJ5TG9jc0xpc3QsIFByb21pc2VJbXBsKSB7XG4gICAgaWYgKFByb21pc2VJbXBsID09PSB2b2lkIDApIFByb21pc2VJbXBsID0gUHJvbWlzZTtcblxuICAgIHZhciBpdGVyID0gbmV3IEFzeW5jSXRlcmF0b3IoXG4gICAgICB3cmFwKGlubmVyRm4sIG91dGVyRm4sIHNlbGYsIHRyeUxvY3NMaXN0KSxcbiAgICAgIFByb21pc2VJbXBsXG4gICAgKTtcblxuICAgIHJldHVybiBleHBvcnRzLmlzR2VuZXJhdG9yRnVuY3Rpb24ob3V0ZXJGbilcbiAgICAgID8gaXRlciAvLyBJZiBvdXRlckZuIGlzIGEgZ2VuZXJhdG9yLCByZXR1cm4gdGhlIGZ1bGwgaXRlcmF0b3IuXG4gICAgICA6IGl0ZXIubmV4dCgpLnRoZW4oZnVuY3Rpb24ocmVzdWx0KSB7XG4gICAgICAgICAgcmV0dXJuIHJlc3VsdC5kb25lID8gcmVzdWx0LnZhbHVlIDogaXRlci5uZXh0KCk7XG4gICAgICAgIH0pO1xuICB9O1xuXG4gIGZ1bmN0aW9uIG1ha2VJbnZva2VNZXRob2QoaW5uZXJGbiwgc2VsZiwgY29udGV4dCkge1xuICAgIHZhciBzdGF0ZSA9IEdlblN0YXRlU3VzcGVuZGVkU3RhcnQ7XG5cbiAgICByZXR1cm4gZnVuY3Rpb24gaW52b2tlKG1ldGhvZCwgYXJnKSB7XG4gICAgICBpZiAoc3RhdGUgPT09IEdlblN0YXRlRXhlY3V0aW5nKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcIkdlbmVyYXRvciBpcyBhbHJlYWR5IHJ1bm5pbmdcIik7XG4gICAgICB9XG5cbiAgICAgIGlmIChzdGF0ZSA9PT0gR2VuU3RhdGVDb21wbGV0ZWQpIHtcbiAgICAgICAgaWYgKG1ldGhvZCA9PT0gXCJ0aHJvd1wiKSB7XG4gICAgICAgICAgdGhyb3cgYXJnO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gQmUgZm9yZ2l2aW5nLCBwZXIgMjUuMy4zLjMuMyBvZiB0aGUgc3BlYzpcbiAgICAgICAgLy8gaHR0cHM6Ly9wZW9wbGUubW96aWxsYS5vcmcvfmpvcmVuZG9yZmYvZXM2LWRyYWZ0Lmh0bWwjc2VjLWdlbmVyYXRvcnJlc3VtZVxuICAgICAgICByZXR1cm4gZG9uZVJlc3VsdCgpO1xuICAgICAgfVxuXG4gICAgICBjb250ZXh0Lm1ldGhvZCA9IG1ldGhvZDtcbiAgICAgIGNvbnRleHQuYXJnID0gYXJnO1xuXG4gICAgICB3aGlsZSAodHJ1ZSkge1xuICAgICAgICB2YXIgZGVsZWdhdGUgPSBjb250ZXh0LmRlbGVnYXRlO1xuICAgICAgICBpZiAoZGVsZWdhdGUpIHtcbiAgICAgICAgICB2YXIgZGVsZWdhdGVSZXN1bHQgPSBtYXliZUludm9rZURlbGVnYXRlKGRlbGVnYXRlLCBjb250ZXh0KTtcbiAgICAgICAgICBpZiAoZGVsZWdhdGVSZXN1bHQpIHtcbiAgICAgICAgICAgIGlmIChkZWxlZ2F0ZVJlc3VsdCA9PT0gQ29udGludWVTZW50aW5lbCkgY29udGludWU7XG4gICAgICAgICAgICByZXR1cm4gZGVsZWdhdGVSZXN1bHQ7XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGNvbnRleHQubWV0aG9kID09PSBcIm5leHRcIikge1xuICAgICAgICAgIC8vIFNldHRpbmcgY29udGV4dC5fc2VudCBmb3IgbGVnYWN5IHN1cHBvcnQgb2YgQmFiZWwnc1xuICAgICAgICAgIC8vIGZ1bmN0aW9uLnNlbnQgaW1wbGVtZW50YXRpb24uXG4gICAgICAgICAgY29udGV4dC5zZW50ID0gY29udGV4dC5fc2VudCA9IGNvbnRleHQuYXJnO1xuXG4gICAgICAgIH0gZWxzZSBpZiAoY29udGV4dC5tZXRob2QgPT09IFwidGhyb3dcIikge1xuICAgICAgICAgIGlmIChzdGF0ZSA9PT0gR2VuU3RhdGVTdXNwZW5kZWRTdGFydCkge1xuICAgICAgICAgICAgc3RhdGUgPSBHZW5TdGF0ZUNvbXBsZXRlZDtcbiAgICAgICAgICAgIHRocm93IGNvbnRleHQuYXJnO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGNvbnRleHQuZGlzcGF0Y2hFeGNlcHRpb24oY29udGV4dC5hcmcpO1xuXG4gICAgICAgIH0gZWxzZSBpZiAoY29udGV4dC5tZXRob2QgPT09IFwicmV0dXJuXCIpIHtcbiAgICAgICAgICBjb250ZXh0LmFicnVwdChcInJldHVyblwiLCBjb250ZXh0LmFyZyk7XG4gICAgICAgIH1cblxuICAgICAgICBzdGF0ZSA9IEdlblN0YXRlRXhlY3V0aW5nO1xuXG4gICAgICAgIHZhciByZWNvcmQgPSB0cnlDYXRjaChpbm5lckZuLCBzZWxmLCBjb250ZXh0KTtcbiAgICAgICAgaWYgKHJlY29yZC50eXBlID09PSBcIm5vcm1hbFwiKSB7XG4gICAgICAgICAgLy8gSWYgYW4gZXhjZXB0aW9uIGlzIHRocm93biBmcm9tIGlubmVyRm4sIHdlIGxlYXZlIHN0YXRlID09PVxuICAgICAgICAgIC8vIEdlblN0YXRlRXhlY3V0aW5nIGFuZCBsb29wIGJhY2sgZm9yIGFub3RoZXIgaW52b2NhdGlvbi5cbiAgICAgICAgICBzdGF0ZSA9IGNvbnRleHQuZG9uZVxuICAgICAgICAgICAgPyBHZW5TdGF0ZUNvbXBsZXRlZFxuICAgICAgICAgICAgOiBHZW5TdGF0ZVN1c3BlbmRlZFlpZWxkO1xuXG4gICAgICAgICAgaWYgKHJlY29yZC5hcmcgPT09IENvbnRpbnVlU2VudGluZWwpIHtcbiAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICB2YWx1ZTogcmVjb3JkLmFyZyxcbiAgICAgICAgICAgIGRvbmU6IGNvbnRleHQuZG9uZVxuICAgICAgICAgIH07XG5cbiAgICAgICAgfSBlbHNlIGlmIChyZWNvcmQudHlwZSA9PT0gXCJ0aHJvd1wiKSB7XG4gICAgICAgICAgc3RhdGUgPSBHZW5TdGF0ZUNvbXBsZXRlZDtcbiAgICAgICAgICAvLyBEaXNwYXRjaCB0aGUgZXhjZXB0aW9uIGJ5IGxvb3BpbmcgYmFjayBhcm91bmQgdG8gdGhlXG4gICAgICAgICAgLy8gY29udGV4dC5kaXNwYXRjaEV4Y2VwdGlvbihjb250ZXh0LmFyZykgY2FsbCBhYm92ZS5cbiAgICAgICAgICBjb250ZXh0Lm1ldGhvZCA9IFwidGhyb3dcIjtcbiAgICAgICAgICBjb250ZXh0LmFyZyA9IHJlY29yZC5hcmc7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9O1xuICB9XG5cbiAgLy8gQ2FsbCBkZWxlZ2F0ZS5pdGVyYXRvcltjb250ZXh0Lm1ldGhvZF0oY29udGV4dC5hcmcpIGFuZCBoYW5kbGUgdGhlXG4gIC8vIHJlc3VsdCwgZWl0aGVyIGJ5IHJldHVybmluZyBhIHsgdmFsdWUsIGRvbmUgfSByZXN1bHQgZnJvbSB0aGVcbiAgLy8gZGVsZWdhdGUgaXRlcmF0b3IsIG9yIGJ5IG1vZGlmeWluZyBjb250ZXh0Lm1ldGhvZCBhbmQgY29udGV4dC5hcmcsXG4gIC8vIHNldHRpbmcgY29udGV4dC5kZWxlZ2F0ZSB0byBudWxsLCBhbmQgcmV0dXJuaW5nIHRoZSBDb250aW51ZVNlbnRpbmVsLlxuICBmdW5jdGlvbiBtYXliZUludm9rZURlbGVnYXRlKGRlbGVnYXRlLCBjb250ZXh0KSB7XG4gICAgdmFyIG1ldGhvZCA9IGRlbGVnYXRlLml0ZXJhdG9yW2NvbnRleHQubWV0aG9kXTtcbiAgICBpZiAobWV0aG9kID09PSB1bmRlZmluZWQpIHtcbiAgICAgIC8vIEEgLnRocm93IG9yIC5yZXR1cm4gd2hlbiB0aGUgZGVsZWdhdGUgaXRlcmF0b3IgaGFzIG5vIC50aHJvd1xuICAgICAgLy8gbWV0aG9kIGFsd2F5cyB0ZXJtaW5hdGVzIHRoZSB5aWVsZCogbG9vcC5cbiAgICAgIGNvbnRleHQuZGVsZWdhdGUgPSBudWxsO1xuXG4gICAgICBpZiAoY29udGV4dC5tZXRob2QgPT09IFwidGhyb3dcIikge1xuICAgICAgICAvLyBOb3RlOiBbXCJyZXR1cm5cIl0gbXVzdCBiZSB1c2VkIGZvciBFUzMgcGFyc2luZyBjb21wYXRpYmlsaXR5LlxuICAgICAgICBpZiAoZGVsZWdhdGUuaXRlcmF0b3JbXCJyZXR1cm5cIl0pIHtcbiAgICAgICAgICAvLyBJZiB0aGUgZGVsZWdhdGUgaXRlcmF0b3IgaGFzIGEgcmV0dXJuIG1ldGhvZCwgZ2l2ZSBpdCBhXG4gICAgICAgICAgLy8gY2hhbmNlIHRvIGNsZWFuIHVwLlxuICAgICAgICAgIGNvbnRleHQubWV0aG9kID0gXCJyZXR1cm5cIjtcbiAgICAgICAgICBjb250ZXh0LmFyZyA9IHVuZGVmaW5lZDtcbiAgICAgICAgICBtYXliZUludm9rZURlbGVnYXRlKGRlbGVnYXRlLCBjb250ZXh0KTtcblxuICAgICAgICAgIGlmIChjb250ZXh0Lm1ldGhvZCA9PT0gXCJ0aHJvd1wiKSB7XG4gICAgICAgICAgICAvLyBJZiBtYXliZUludm9rZURlbGVnYXRlKGNvbnRleHQpIGNoYW5nZWQgY29udGV4dC5tZXRob2QgZnJvbVxuICAgICAgICAgICAgLy8gXCJyZXR1cm5cIiB0byBcInRocm93XCIsIGxldCB0aGF0IG92ZXJyaWRlIHRoZSBUeXBlRXJyb3IgYmVsb3cuXG4gICAgICAgICAgICByZXR1cm4gQ29udGludWVTZW50aW5lbDtcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBjb250ZXh0Lm1ldGhvZCA9IFwidGhyb3dcIjtcbiAgICAgICAgY29udGV4dC5hcmcgPSBuZXcgVHlwZUVycm9yKFxuICAgICAgICAgIFwiVGhlIGl0ZXJhdG9yIGRvZXMgbm90IHByb3ZpZGUgYSAndGhyb3cnIG1ldGhvZFwiKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIENvbnRpbnVlU2VudGluZWw7XG4gICAgfVxuXG4gICAgdmFyIHJlY29yZCA9IHRyeUNhdGNoKG1ldGhvZCwgZGVsZWdhdGUuaXRlcmF0b3IsIGNvbnRleHQuYXJnKTtcblxuICAgIGlmIChyZWNvcmQudHlwZSA9PT0gXCJ0aHJvd1wiKSB7XG4gICAgICBjb250ZXh0Lm1ldGhvZCA9IFwidGhyb3dcIjtcbiAgICAgIGNvbnRleHQuYXJnID0gcmVjb3JkLmFyZztcbiAgICAgIGNvbnRleHQuZGVsZWdhdGUgPSBudWxsO1xuICAgICAgcmV0dXJuIENvbnRpbnVlU2VudGluZWw7XG4gICAgfVxuXG4gICAgdmFyIGluZm8gPSByZWNvcmQuYXJnO1xuXG4gICAgaWYgKCEgaW5mbykge1xuICAgICAgY29udGV4dC5tZXRob2QgPSBcInRocm93XCI7XG4gICAgICBjb250ZXh0LmFyZyA9IG5ldyBUeXBlRXJyb3IoXCJpdGVyYXRvciByZXN1bHQgaXMgbm90IGFuIG9iamVjdFwiKTtcbiAgICAgIGNvbnRleHQuZGVsZWdhdGUgPSBudWxsO1xuICAgICAgcmV0dXJuIENvbnRpbnVlU2VudGluZWw7XG4gICAgfVxuXG4gICAgaWYgKGluZm8uZG9uZSkge1xuICAgICAgLy8gQXNzaWduIHRoZSByZXN1bHQgb2YgdGhlIGZpbmlzaGVkIGRlbGVnYXRlIHRvIHRoZSB0ZW1wb3JhcnlcbiAgICAgIC8vIHZhcmlhYmxlIHNwZWNpZmllZCBieSBkZWxlZ2F0ZS5yZXN1bHROYW1lIChzZWUgZGVsZWdhdGVZaWVsZCkuXG4gICAgICBjb250ZXh0W2RlbGVnYXRlLnJlc3VsdE5hbWVdID0gaW5mby52YWx1ZTtcblxuICAgICAgLy8gUmVzdW1lIGV4ZWN1dGlvbiBhdCB0aGUgZGVzaXJlZCBsb2NhdGlvbiAoc2VlIGRlbGVnYXRlWWllbGQpLlxuICAgICAgY29udGV4dC5uZXh0ID0gZGVsZWdhdGUubmV4dExvYztcblxuICAgICAgLy8gSWYgY29udGV4dC5tZXRob2Qgd2FzIFwidGhyb3dcIiBidXQgdGhlIGRlbGVnYXRlIGhhbmRsZWQgdGhlXG4gICAgICAvLyBleGNlcHRpb24sIGxldCB0aGUgb3V0ZXIgZ2VuZXJhdG9yIHByb2NlZWQgbm9ybWFsbHkuIElmXG4gICAgICAvLyBjb250ZXh0Lm1ldGhvZCB3YXMgXCJuZXh0XCIsIGZvcmdldCBjb250ZXh0LmFyZyBzaW5jZSBpdCBoYXMgYmVlblxuICAgICAgLy8gXCJjb25zdW1lZFwiIGJ5IHRoZSBkZWxlZ2F0ZSBpdGVyYXRvci4gSWYgY29udGV4dC5tZXRob2Qgd2FzXG4gICAgICAvLyBcInJldHVyblwiLCBhbGxvdyB0aGUgb3JpZ2luYWwgLnJldHVybiBjYWxsIHRvIGNvbnRpbnVlIGluIHRoZVxuICAgICAgLy8gb3V0ZXIgZ2VuZXJhdG9yLlxuICAgICAgaWYgKGNvbnRleHQubWV0aG9kICE9PSBcInJldHVyblwiKSB7XG4gICAgICAgIGNvbnRleHQubWV0aG9kID0gXCJuZXh0XCI7XG4gICAgICAgIGNvbnRleHQuYXJnID0gdW5kZWZpbmVkO1xuICAgICAgfVxuXG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIFJlLXlpZWxkIHRoZSByZXN1bHQgcmV0dXJuZWQgYnkgdGhlIGRlbGVnYXRlIG1ldGhvZC5cbiAgICAgIHJldHVybiBpbmZvO1xuICAgIH1cblxuICAgIC8vIFRoZSBkZWxlZ2F0ZSBpdGVyYXRvciBpcyBmaW5pc2hlZCwgc28gZm9yZ2V0IGl0IGFuZCBjb250aW51ZSB3aXRoXG4gICAgLy8gdGhlIG91dGVyIGdlbmVyYXRvci5cbiAgICBjb250ZXh0LmRlbGVnYXRlID0gbnVsbDtcbiAgICByZXR1cm4gQ29udGludWVTZW50aW5lbDtcbiAgfVxuXG4gIC8vIERlZmluZSBHZW5lcmF0b3IucHJvdG90eXBlLntuZXh0LHRocm93LHJldHVybn0gaW4gdGVybXMgb2YgdGhlXG4gIC8vIHVuaWZpZWQgLl9pbnZva2UgaGVscGVyIG1ldGhvZC5cbiAgZGVmaW5lSXRlcmF0b3JNZXRob2RzKEdwKTtcblxuICBkZWZpbmUoR3AsIHRvU3RyaW5nVGFnU3ltYm9sLCBcIkdlbmVyYXRvclwiKTtcblxuICAvLyBBIEdlbmVyYXRvciBzaG91bGQgYWx3YXlzIHJldHVybiBpdHNlbGYgYXMgdGhlIGl0ZXJhdG9yIG9iamVjdCB3aGVuIHRoZVxuICAvLyBAQGl0ZXJhdG9yIGZ1bmN0aW9uIGlzIGNhbGxlZCBvbiBpdC4gU29tZSBicm93c2VycycgaW1wbGVtZW50YXRpb25zIG9mIHRoZVxuICAvLyBpdGVyYXRvciBwcm90b3R5cGUgY2hhaW4gaW5jb3JyZWN0bHkgaW1wbGVtZW50IHRoaXMsIGNhdXNpbmcgdGhlIEdlbmVyYXRvclxuICAvLyBvYmplY3QgdG8gbm90IGJlIHJldHVybmVkIGZyb20gdGhpcyBjYWxsLiBUaGlzIGVuc3VyZXMgdGhhdCBkb2Vzbid0IGhhcHBlbi5cbiAgLy8gU2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9mYWNlYm9vay9yZWdlbmVyYXRvci9pc3N1ZXMvMjc0IGZvciBtb3JlIGRldGFpbHMuXG4gIEdwW2l0ZXJhdG9yU3ltYm9sXSA9IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiB0aGlzO1xuICB9O1xuXG4gIEdwLnRvU3RyaW5nID0gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIFwiW29iamVjdCBHZW5lcmF0b3JdXCI7XG4gIH07XG5cbiAgZnVuY3Rpb24gcHVzaFRyeUVudHJ5KGxvY3MpIHtcbiAgICB2YXIgZW50cnkgPSB7IHRyeUxvYzogbG9jc1swXSB9O1xuXG4gICAgaWYgKDEgaW4gbG9jcykge1xuICAgICAgZW50cnkuY2F0Y2hMb2MgPSBsb2NzWzFdO1xuICAgIH1cblxuICAgIGlmICgyIGluIGxvY3MpIHtcbiAgICAgIGVudHJ5LmZpbmFsbHlMb2MgPSBsb2NzWzJdO1xuICAgICAgZW50cnkuYWZ0ZXJMb2MgPSBsb2NzWzNdO1xuICAgIH1cblxuICAgIHRoaXMudHJ5RW50cmllcy5wdXNoKGVudHJ5KTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHJlc2V0VHJ5RW50cnkoZW50cnkpIHtcbiAgICB2YXIgcmVjb3JkID0gZW50cnkuY29tcGxldGlvbiB8fCB7fTtcbiAgICByZWNvcmQudHlwZSA9IFwibm9ybWFsXCI7XG4gICAgZGVsZXRlIHJlY29yZC5hcmc7XG4gICAgZW50cnkuY29tcGxldGlvbiA9IHJlY29yZDtcbiAgfVxuXG4gIGZ1bmN0aW9uIENvbnRleHQodHJ5TG9jc0xpc3QpIHtcbiAgICAvLyBUaGUgcm9vdCBlbnRyeSBvYmplY3QgKGVmZmVjdGl2ZWx5IGEgdHJ5IHN0YXRlbWVudCB3aXRob3V0IGEgY2F0Y2hcbiAgICAvLyBvciBhIGZpbmFsbHkgYmxvY2spIGdpdmVzIHVzIGEgcGxhY2UgdG8gc3RvcmUgdmFsdWVzIHRocm93biBmcm9tXG4gICAgLy8gbG9jYXRpb25zIHdoZXJlIHRoZXJlIGlzIG5vIGVuY2xvc2luZyB0cnkgc3RhdGVtZW50LlxuICAgIHRoaXMudHJ5RW50cmllcyA9IFt7IHRyeUxvYzogXCJyb290XCIgfV07XG4gICAgdHJ5TG9jc0xpc3QuZm9yRWFjaChwdXNoVHJ5RW50cnksIHRoaXMpO1xuICAgIHRoaXMucmVzZXQodHJ1ZSk7XG4gIH1cblxuICBleHBvcnRzLmtleXMgPSBmdW5jdGlvbihvYmplY3QpIHtcbiAgICB2YXIga2V5cyA9IFtdO1xuICAgIGZvciAodmFyIGtleSBpbiBvYmplY3QpIHtcbiAgICAgIGtleXMucHVzaChrZXkpO1xuICAgIH1cbiAgICBrZXlzLnJldmVyc2UoKTtcblxuICAgIC8vIFJhdGhlciB0aGFuIHJldHVybmluZyBhbiBvYmplY3Qgd2l0aCBhIG5leHQgbWV0aG9kLCB3ZSBrZWVwXG4gICAgLy8gdGhpbmdzIHNpbXBsZSBhbmQgcmV0dXJuIHRoZSBuZXh0IGZ1bmN0aW9uIGl0c2VsZi5cbiAgICByZXR1cm4gZnVuY3Rpb24gbmV4dCgpIHtcbiAgICAgIHdoaWxlIChrZXlzLmxlbmd0aCkge1xuICAgICAgICB2YXIga2V5ID0ga2V5cy5wb3AoKTtcbiAgICAgICAgaWYgKGtleSBpbiBvYmplY3QpIHtcbiAgICAgICAgICBuZXh0LnZhbHVlID0ga2V5O1xuICAgICAgICAgIG5leHQuZG9uZSA9IGZhbHNlO1xuICAgICAgICAgIHJldHVybiBuZXh0O1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIC8vIFRvIGF2b2lkIGNyZWF0aW5nIGFuIGFkZGl0aW9uYWwgb2JqZWN0LCB3ZSBqdXN0IGhhbmcgdGhlIC52YWx1ZVxuICAgICAgLy8gYW5kIC5kb25lIHByb3BlcnRpZXMgb2ZmIHRoZSBuZXh0IGZ1bmN0aW9uIG9iamVjdCBpdHNlbGYuIFRoaXNcbiAgICAgIC8vIGFsc28gZW5zdXJlcyB0aGF0IHRoZSBtaW5pZmllciB3aWxsIG5vdCBhbm9ueW1pemUgdGhlIGZ1bmN0aW9uLlxuICAgICAgbmV4dC5kb25lID0gdHJ1ZTtcbiAgICAgIHJldHVybiBuZXh0O1xuICAgIH07XG4gIH07XG5cbiAgZnVuY3Rpb24gdmFsdWVzKGl0ZXJhYmxlKSB7XG4gICAgaWYgKGl0ZXJhYmxlKSB7XG4gICAgICB2YXIgaXRlcmF0b3JNZXRob2QgPSBpdGVyYWJsZVtpdGVyYXRvclN5bWJvbF07XG4gICAgICBpZiAoaXRlcmF0b3JNZXRob2QpIHtcbiAgICAgICAgcmV0dXJuIGl0ZXJhdG9yTWV0aG9kLmNhbGwoaXRlcmFibGUpO1xuICAgICAgfVxuXG4gICAgICBpZiAodHlwZW9mIGl0ZXJhYmxlLm5leHQgPT09IFwiZnVuY3Rpb25cIikge1xuICAgICAgICByZXR1cm4gaXRlcmFibGU7XG4gICAgICB9XG5cbiAgICAgIGlmICghaXNOYU4oaXRlcmFibGUubGVuZ3RoKSkge1xuICAgICAgICB2YXIgaSA9IC0xLCBuZXh0ID0gZnVuY3Rpb24gbmV4dCgpIHtcbiAgICAgICAgICB3aGlsZSAoKytpIDwgaXRlcmFibGUubGVuZ3RoKSB7XG4gICAgICAgICAgICBpZiAoaGFzT3duLmNhbGwoaXRlcmFibGUsIGkpKSB7XG4gICAgICAgICAgICAgIG5leHQudmFsdWUgPSBpdGVyYWJsZVtpXTtcbiAgICAgICAgICAgICAgbmV4dC5kb25lID0gZmFsc2U7XG4gICAgICAgICAgICAgIHJldHVybiBuZXh0O1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cblxuICAgICAgICAgIG5leHQudmFsdWUgPSB1bmRlZmluZWQ7XG4gICAgICAgICAgbmV4dC5kb25lID0gdHJ1ZTtcblxuICAgICAgICAgIHJldHVybiBuZXh0O1xuICAgICAgICB9O1xuXG4gICAgICAgIHJldHVybiBuZXh0Lm5leHQgPSBuZXh0O1xuICAgICAgfVxuICAgIH1cblxuICAgIC8vIFJldHVybiBhbiBpdGVyYXRvciB3aXRoIG5vIHZhbHVlcy5cbiAgICByZXR1cm4geyBuZXh0OiBkb25lUmVzdWx0IH07XG4gIH1cbiAgZXhwb3J0cy52YWx1ZXMgPSB2YWx1ZXM7XG5cbiAgZnVuY3Rpb24gZG9uZVJlc3VsdCgpIHtcbiAgICByZXR1cm4geyB2YWx1ZTogdW5kZWZpbmVkLCBkb25lOiB0cnVlIH07XG4gIH1cblxuICBDb250ZXh0LnByb3RvdHlwZSA9IHtcbiAgICBjb25zdHJ1Y3RvcjogQ29udGV4dCxcblxuICAgIHJlc2V0OiBmdW5jdGlvbihza2lwVGVtcFJlc2V0KSB7XG4gICAgICB0aGlzLnByZXYgPSAwO1xuICAgICAgdGhpcy5uZXh0ID0gMDtcbiAgICAgIC8vIFJlc2V0dGluZyBjb250ZXh0Ll9zZW50IGZvciBsZWdhY3kgc3VwcG9ydCBvZiBCYWJlbCdzXG4gICAgICAvLyBmdW5jdGlvbi5zZW50IGltcGxlbWVudGF0aW9uLlxuICAgICAgdGhpcy5zZW50ID0gdGhpcy5fc2VudCA9IHVuZGVmaW5lZDtcbiAgICAgIHRoaXMuZG9uZSA9IGZhbHNlO1xuICAgICAgdGhpcy5kZWxlZ2F0ZSA9IG51bGw7XG5cbiAgICAgIHRoaXMubWV0aG9kID0gXCJuZXh0XCI7XG4gICAgICB0aGlzLmFyZyA9IHVuZGVmaW5lZDtcblxuICAgICAgdGhpcy50cnlFbnRyaWVzLmZvckVhY2gocmVzZXRUcnlFbnRyeSk7XG5cbiAgICAgIGlmICghc2tpcFRlbXBSZXNldCkge1xuICAgICAgICBmb3IgKHZhciBuYW1lIGluIHRoaXMpIHtcbiAgICAgICAgICAvLyBOb3Qgc3VyZSBhYm91dCB0aGUgb3B0aW1hbCBvcmRlciBvZiB0aGVzZSBjb25kaXRpb25zOlxuICAgICAgICAgIGlmIChuYW1lLmNoYXJBdCgwKSA9PT0gXCJ0XCIgJiZcbiAgICAgICAgICAgICAgaGFzT3duLmNhbGwodGhpcywgbmFtZSkgJiZcbiAgICAgICAgICAgICAgIWlzTmFOKCtuYW1lLnNsaWNlKDEpKSkge1xuICAgICAgICAgICAgdGhpc1tuYW1lXSA9IHVuZGVmaW5lZDtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9LFxuXG4gICAgc3RvcDogZnVuY3Rpb24oKSB7XG4gICAgICB0aGlzLmRvbmUgPSB0cnVlO1xuXG4gICAgICB2YXIgcm9vdEVudHJ5ID0gdGhpcy50cnlFbnRyaWVzWzBdO1xuICAgICAgdmFyIHJvb3RSZWNvcmQgPSByb290RW50cnkuY29tcGxldGlvbjtcbiAgICAgIGlmIChyb290UmVjb3JkLnR5cGUgPT09IFwidGhyb3dcIikge1xuICAgICAgICB0aHJvdyByb290UmVjb3JkLmFyZztcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHRoaXMucnZhbDtcbiAgICB9LFxuXG4gICAgZGlzcGF0Y2hFeGNlcHRpb246IGZ1bmN0aW9uKGV4Y2VwdGlvbikge1xuICAgICAgaWYgKHRoaXMuZG9uZSkge1xuICAgICAgICB0aHJvdyBleGNlcHRpb247XG4gICAgICB9XG5cbiAgICAgIHZhciBjb250ZXh0ID0gdGhpcztcbiAgICAgIGZ1bmN0aW9uIGhhbmRsZShsb2MsIGNhdWdodCkge1xuICAgICAgICByZWNvcmQudHlwZSA9IFwidGhyb3dcIjtcbiAgICAgICAgcmVjb3JkLmFyZyA9IGV4Y2VwdGlvbjtcbiAgICAgICAgY29udGV4dC5uZXh0ID0gbG9jO1xuXG4gICAgICAgIGlmIChjYXVnaHQpIHtcbiAgICAgICAgICAvLyBJZiB0aGUgZGlzcGF0Y2hlZCBleGNlcHRpb24gd2FzIGNhdWdodCBieSBhIGNhdGNoIGJsb2NrLFxuICAgICAgICAgIC8vIHRoZW4gbGV0IHRoYXQgY2F0Y2ggYmxvY2sgaGFuZGxlIHRoZSBleGNlcHRpb24gbm9ybWFsbHkuXG4gICAgICAgICAgY29udGV4dC5tZXRob2QgPSBcIm5leHRcIjtcbiAgICAgICAgICBjb250ZXh0LmFyZyA9IHVuZGVmaW5lZDtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiAhISBjYXVnaHQ7XG4gICAgICB9XG5cbiAgICAgIGZvciAodmFyIGkgPSB0aGlzLnRyeUVudHJpZXMubGVuZ3RoIC0gMTsgaSA+PSAwOyAtLWkpIHtcbiAgICAgICAgdmFyIGVudHJ5ID0gdGhpcy50cnlFbnRyaWVzW2ldO1xuICAgICAgICB2YXIgcmVjb3JkID0gZW50cnkuY29tcGxldGlvbjtcblxuICAgICAgICBpZiAoZW50cnkudHJ5TG9jID09PSBcInJvb3RcIikge1xuICAgICAgICAgIC8vIEV4Y2VwdGlvbiB0aHJvd24gb3V0c2lkZSBvZiBhbnkgdHJ5IGJsb2NrIHRoYXQgY291bGQgaGFuZGxlXG4gICAgICAgICAgLy8gaXQsIHNvIHNldCB0aGUgY29tcGxldGlvbiB2YWx1ZSBvZiB0aGUgZW50aXJlIGZ1bmN0aW9uIHRvXG4gICAgICAgICAgLy8gdGhyb3cgdGhlIGV4Y2VwdGlvbi5cbiAgICAgICAgICByZXR1cm4gaGFuZGxlKFwiZW5kXCIpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGVudHJ5LnRyeUxvYyA8PSB0aGlzLnByZXYpIHtcbiAgICAgICAgICB2YXIgaGFzQ2F0Y2ggPSBoYXNPd24uY2FsbChlbnRyeSwgXCJjYXRjaExvY1wiKTtcbiAgICAgICAgICB2YXIgaGFzRmluYWxseSA9IGhhc093bi5jYWxsKGVudHJ5LCBcImZpbmFsbHlMb2NcIik7XG5cbiAgICAgICAgICBpZiAoaGFzQ2F0Y2ggJiYgaGFzRmluYWxseSkge1xuICAgICAgICAgICAgaWYgKHRoaXMucHJldiA8IGVudHJ5LmNhdGNoTG9jKSB7XG4gICAgICAgICAgICAgIHJldHVybiBoYW5kbGUoZW50cnkuY2F0Y2hMb2MsIHRydWUpO1xuICAgICAgICAgICAgfSBlbHNlIGlmICh0aGlzLnByZXYgPCBlbnRyeS5maW5hbGx5TG9jKSB7XG4gICAgICAgICAgICAgIHJldHVybiBoYW5kbGUoZW50cnkuZmluYWxseUxvYyk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICB9IGVsc2UgaWYgKGhhc0NhdGNoKSB7XG4gICAgICAgICAgICBpZiAodGhpcy5wcmV2IDwgZW50cnkuY2F0Y2hMb2MpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIGhhbmRsZShlbnRyeS5jYXRjaExvYywgdHJ1ZSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICB9IGVsc2UgaWYgKGhhc0ZpbmFsbHkpIHtcbiAgICAgICAgICAgIGlmICh0aGlzLnByZXYgPCBlbnRyeS5maW5hbGx5TG9jKSB7XG4gICAgICAgICAgICAgIHJldHVybiBoYW5kbGUoZW50cnkuZmluYWxseUxvYyk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwidHJ5IHN0YXRlbWVudCB3aXRob3V0IGNhdGNoIG9yIGZpbmFsbHlcIik7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfSxcblxuICAgIGFicnVwdDogZnVuY3Rpb24odHlwZSwgYXJnKSB7XG4gICAgICBmb3IgKHZhciBpID0gdGhpcy50cnlFbnRyaWVzLmxlbmd0aCAtIDE7IGkgPj0gMDsgLS1pKSB7XG4gICAgICAgIHZhciBlbnRyeSA9IHRoaXMudHJ5RW50cmllc1tpXTtcbiAgICAgICAgaWYgKGVudHJ5LnRyeUxvYyA8PSB0aGlzLnByZXYgJiZcbiAgICAgICAgICAgIGhhc093bi5jYWxsKGVudHJ5LCBcImZpbmFsbHlMb2NcIikgJiZcbiAgICAgICAgICAgIHRoaXMucHJldiA8IGVudHJ5LmZpbmFsbHlMb2MpIHtcbiAgICAgICAgICB2YXIgZmluYWxseUVudHJ5ID0gZW50cnk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgaWYgKGZpbmFsbHlFbnRyeSAmJlxuICAgICAgICAgICh0eXBlID09PSBcImJyZWFrXCIgfHxcbiAgICAgICAgICAgdHlwZSA9PT0gXCJjb250aW51ZVwiKSAmJlxuICAgICAgICAgIGZpbmFsbHlFbnRyeS50cnlMb2MgPD0gYXJnICYmXG4gICAgICAgICAgYXJnIDw9IGZpbmFsbHlFbnRyeS5maW5hbGx5TG9jKSB7XG4gICAgICAgIC8vIElnbm9yZSB0aGUgZmluYWxseSBlbnRyeSBpZiBjb250cm9sIGlzIG5vdCBqdW1waW5nIHRvIGFcbiAgICAgICAgLy8gbG9jYXRpb24gb3V0c2lkZSB0aGUgdHJ5L2NhdGNoIGJsb2NrLlxuICAgICAgICBmaW5hbGx5RW50cnkgPSBudWxsO1xuICAgICAgfVxuXG4gICAgICB2YXIgcmVjb3JkID0gZmluYWxseUVudHJ5ID8gZmluYWxseUVudHJ5LmNvbXBsZXRpb24gOiB7fTtcbiAgICAgIHJlY29yZC50eXBlID0gdHlwZTtcbiAgICAgIHJlY29yZC5hcmcgPSBhcmc7XG5cbiAgICAgIGlmIChmaW5hbGx5RW50cnkpIHtcbiAgICAgICAgdGhpcy5tZXRob2QgPSBcIm5leHRcIjtcbiAgICAgICAgdGhpcy5uZXh0ID0gZmluYWxseUVudHJ5LmZpbmFsbHlMb2M7XG4gICAgICAgIHJldHVybiBDb250aW51ZVNlbnRpbmVsO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gdGhpcy5jb21wbGV0ZShyZWNvcmQpO1xuICAgIH0sXG5cbiAgICBjb21wbGV0ZTogZnVuY3Rpb24ocmVjb3JkLCBhZnRlckxvYykge1xuICAgICAgaWYgKHJlY29yZC50eXBlID09PSBcInRocm93XCIpIHtcbiAgICAgICAgdGhyb3cgcmVjb3JkLmFyZztcbiAgICAgIH1cblxuICAgICAgaWYgKHJlY29yZC50eXBlID09PSBcImJyZWFrXCIgfHxcbiAgICAgICAgICByZWNvcmQudHlwZSA9PT0gXCJjb250aW51ZVwiKSB7XG4gICAgICAgIHRoaXMubmV4dCA9IHJlY29yZC5hcmc7XG4gICAgICB9IGVsc2UgaWYgKHJlY29yZC50eXBlID09PSBcInJldHVyblwiKSB7XG4gICAgICAgIHRoaXMucnZhbCA9IHRoaXMuYXJnID0gcmVjb3JkLmFyZztcbiAgICAgICAgdGhpcy5tZXRob2QgPSBcInJldHVyblwiO1xuICAgICAgICB0aGlzLm5leHQgPSBcImVuZFwiO1xuICAgICAgfSBlbHNlIGlmIChyZWNvcmQudHlwZSA9PT0gXCJub3JtYWxcIiAmJiBhZnRlckxvYykge1xuICAgICAgICB0aGlzLm5leHQgPSBhZnRlckxvYztcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIENvbnRpbnVlU2VudGluZWw7XG4gICAgfSxcblxuICAgIGZpbmlzaDogZnVuY3Rpb24oZmluYWxseUxvYykge1xuICAgICAgZm9yICh2YXIgaSA9IHRoaXMudHJ5RW50cmllcy5sZW5ndGggLSAxOyBpID49IDA7IC0taSkge1xuICAgICAgICB2YXIgZW50cnkgPSB0aGlzLnRyeUVudHJpZXNbaV07XG4gICAgICAgIGlmIChlbnRyeS5maW5hbGx5TG9jID09PSBmaW5hbGx5TG9jKSB7XG4gICAgICAgICAgdGhpcy5jb21wbGV0ZShlbnRyeS5jb21wbGV0aW9uLCBlbnRyeS5hZnRlckxvYyk7XG4gICAgICAgICAgcmVzZXRUcnlFbnRyeShlbnRyeSk7XG4gICAgICAgICAgcmV0dXJuIENvbnRpbnVlU2VudGluZWw7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9LFxuXG4gICAgXCJjYXRjaFwiOiBmdW5jdGlvbih0cnlMb2MpIHtcbiAgICAgIGZvciAodmFyIGkgPSB0aGlzLnRyeUVudHJpZXMubGVuZ3RoIC0gMTsgaSA+PSAwOyAtLWkpIHtcbiAgICAgICAgdmFyIGVudHJ5ID0gdGhpcy50cnlFbnRyaWVzW2ldO1xuICAgICAgICBpZiAoZW50cnkudHJ5TG9jID09PSB0cnlMb2MpIHtcbiAgICAgICAgICB2YXIgcmVjb3JkID0gZW50cnkuY29tcGxldGlvbjtcbiAgICAgICAgICBpZiAocmVjb3JkLnR5cGUgPT09IFwidGhyb3dcIikge1xuICAgICAgICAgICAgdmFyIHRocm93biA9IHJlY29yZC5hcmc7XG4gICAgICAgICAgICByZXNldFRyeUVudHJ5KGVudHJ5KTtcbiAgICAgICAgICB9XG4gICAgICAgICAgcmV0dXJuIHRocm93bjtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICAvLyBUaGUgY29udGV4dC5jYXRjaCBtZXRob2QgbXVzdCBvbmx5IGJlIGNhbGxlZCB3aXRoIGEgbG9jYXRpb25cbiAgICAgIC8vIGFyZ3VtZW50IHRoYXQgY29ycmVzcG9uZHMgdG8gYSBrbm93biBjYXRjaCBibG9jay5cbiAgICAgIHRocm93IG5ldyBFcnJvcihcImlsbGVnYWwgY2F0Y2ggYXR0ZW1wdFwiKTtcbiAgICB9LFxuXG4gICAgZGVsZWdhdGVZaWVsZDogZnVuY3Rpb24oaXRlcmFibGUsIHJlc3VsdE5hbWUsIG5leHRMb2MpIHtcbiAgICAgIHRoaXMuZGVsZWdhdGUgPSB7XG4gICAgICAgIGl0ZXJhdG9yOiB2YWx1ZXMoaXRlcmFibGUpLFxuICAgICAgICByZXN1bHROYW1lOiByZXN1bHROYW1lLFxuICAgICAgICBuZXh0TG9jOiBuZXh0TG9jXG4gICAgICB9O1xuXG4gICAgICBpZiAodGhpcy5tZXRob2QgPT09IFwibmV4dFwiKSB7XG4gICAgICAgIC8vIERlbGliZXJhdGVseSBmb3JnZXQgdGhlIGxhc3Qgc2VudCB2YWx1ZSBzbyB0aGF0IHdlIGRvbid0XG4gICAgICAgIC8vIGFjY2lkZW50YWxseSBwYXNzIGl0IG9uIHRvIHRoZSBkZWxlZ2F0ZS5cbiAgICAgICAgdGhpcy5hcmcgPSB1bmRlZmluZWQ7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBDb250aW51ZVNlbnRpbmVsO1xuICAgIH1cbiAgfTtcblxuICAvLyBSZWdhcmRsZXNzIG9mIHdoZXRoZXIgdGhpcyBzY3JpcHQgaXMgZXhlY3V0aW5nIGFzIGEgQ29tbW9uSlMgbW9kdWxlXG4gIC8vIG9yIG5vdCwgcmV0dXJuIHRoZSBydW50aW1lIG9iamVjdCBzbyB0aGF0IHdlIGNhbiBkZWNsYXJlIHRoZSB2YXJpYWJsZVxuICAvLyByZWdlbmVyYXRvclJ1bnRpbWUgaW4gdGhlIG91dGVyIHNjb3BlLCB3aGljaCBhbGxvd3MgdGhpcyBtb2R1bGUgdG8gYmVcbiAgLy8gaW5qZWN0ZWQgZWFzaWx5IGJ5IGBiaW4vcmVnZW5lcmF0b3IgLS1pbmNsdWRlLXJ1bnRpbWUgc2NyaXB0LmpzYC5cbiAgcmV0dXJuIGV4cG9ydHM7XG5cbn0oXG4gIC8vIElmIHRoaXMgc2NyaXB0IGlzIGV4ZWN1dGluZyBhcyBhIENvbW1vbkpTIG1vZHVsZSwgdXNlIG1vZHVsZS5leHBvcnRzXG4gIC8vIGFzIHRoZSByZWdlbmVyYXRvclJ1bnRpbWUgbmFtZXNwYWNlLiBPdGhlcndpc2UgY3JlYXRlIGEgbmV3IGVtcHR5XG4gIC8vIG9iamVjdC4gRWl0aGVyIHdheSwgdGhlIHJlc3VsdGluZyBvYmplY3Qgd2lsbCBiZSB1c2VkIHRvIGluaXRpYWxpemVcbiAgLy8gdGhlIHJlZ2VuZXJhdG9yUnVudGltZSB2YXJpYWJsZSBhdCB0aGUgdG9wIG9mIHRoaXMgZmlsZS5cbiAgdHlwZW9mIG1vZHVsZSA9PT0gXCJvYmplY3RcIiA/IG1vZHVsZS5leHBvcnRzIDoge31cbikpO1xuXG50cnkge1xuICByZWdlbmVyYXRvclJ1bnRpbWUgPSBydW50aW1lO1xufSBjYXRjaCAoYWNjaWRlbnRhbFN0cmljdE1vZGUpIHtcbiAgLy8gVGhpcyBtb2R1bGUgc2hvdWxkIG5vdCBiZSBydW5uaW5nIGluIHN0cmljdCBtb2RlLCBzbyB0aGUgYWJvdmVcbiAgLy8gYXNzaWdubWVudCBzaG91bGQgYWx3YXlzIHdvcmsgdW5sZXNzIHNvbWV0aGluZyBpcyBtaXNjb25maWd1cmVkLiBKdXN0XG4gIC8vIGluIGNhc2UgcnVudGltZS5qcyBhY2NpZGVudGFsbHkgcnVucyBpbiBzdHJpY3QgbW9kZSwgd2UgY2FuIGVzY2FwZVxuICAvLyBzdHJpY3QgbW9kZSB1c2luZyBhIGdsb2JhbCBGdW5jdGlvbiBjYWxsLiBUaGlzIGNvdWxkIGNvbmNlaXZhYmx5IGZhaWxcbiAgLy8gaWYgYSBDb250ZW50IFNlY3VyaXR5IFBvbGljeSBmb3JiaWRzIHVzaW5nIEZ1bmN0aW9uLCBidXQgaW4gdGhhdCBjYXNlXG4gIC8vIHRoZSBwcm9wZXIgc29sdXRpb24gaXMgdG8gZml4IHRoZSBhY2NpZGVudGFsIHN0cmljdCBtb2RlIHByb2JsZW0uIElmXG4gIC8vIHlvdSd2ZSBtaXNjb25maWd1cmVkIHlvdXIgYnVuZGxlciB0byBmb3JjZSBzdHJpY3QgbW9kZSBhbmQgYXBwbGllZCBhXG4gIC8vIENTUCB0byBmb3JiaWQgRnVuY3Rpb24sIGFuZCB5b3UncmUgbm90IHdpbGxpbmcgdG8gZml4IGVpdGhlciBvZiB0aG9zZVxuICAvLyBwcm9ibGVtcywgcGxlYXNlIGRldGFpbCB5b3VyIHVuaXF1ZSBwcmVkaWNhbWVudCBpbiBhIEdpdEh1YiBpc3N1ZS5cbiAgRnVuY3Rpb24oXCJyXCIsIFwicmVnZW5lcmF0b3JSdW50aW1lID0gclwiKShydW50aW1lKTtcbn1cbiIsIi8vIGh0dHBzOi8vZ2l0aHViLmNvbS96bG9pcm9jay9jb3JlLWpzL2lzc3Vlcy84NiNpc3N1ZWNvbW1lbnQtMTE1NzU5MDI4XG52YXIgZ2xvYmFsID0gbW9kdWxlLmV4cG9ydHMgPSB0eXBlb2Ygd2luZG93ICE9ICd1bmRlZmluZWQnICYmIHdpbmRvdy5NYXRoID09IE1hdGhcbiAgPyB3aW5kb3cgOiB0eXBlb2Ygc2VsZiAhPSAndW5kZWZpbmVkJyAmJiBzZWxmLk1hdGggPT0gTWF0aCA/IHNlbGZcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLW5ldy1mdW5jXG4gIDogRnVuY3Rpb24oJ3JldHVybiB0aGlzJykoKTtcbmlmICh0eXBlb2YgX19nID09ICdudW1iZXInKSBfX2cgPSBnbG9iYWw7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tdW5kZWZcbiIsInZhciBjb3JlID0gbW9kdWxlLmV4cG9ydHMgPSB7IHZlcnNpb246ICcyLjYuMTEnIH07XG5pZiAodHlwZW9mIF9fZSA9PSAnbnVtYmVyJykgX19lID0gY29yZTsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby11bmRlZlxuIiwibW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQpIHtcbiAgaWYgKHR5cGVvZiBpdCAhPSAnZnVuY3Rpb24nKSB0aHJvdyBUeXBlRXJyb3IoaXQgKyAnIGlzIG5vdCBhIGZ1bmN0aW9uIScpO1xuICByZXR1cm4gaXQ7XG59O1xuIiwiLy8gb3B0aW9uYWwgLyBzaW1wbGUgY29udGV4dCBiaW5kaW5nXG52YXIgYUZ1bmN0aW9uID0gcmVxdWlyZSgnLi9fYS1mdW5jdGlvbicpO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoZm4sIHRoYXQsIGxlbmd0aCkge1xuICBhRnVuY3Rpb24oZm4pO1xuICBpZiAodGhhdCA9PT0gdW5kZWZpbmVkKSByZXR1cm4gZm47XG4gIHN3aXRjaCAobGVuZ3RoKSB7XG4gICAgY2FzZSAxOiByZXR1cm4gZnVuY3Rpb24gKGEpIHtcbiAgICAgIHJldHVybiBmbi5jYWxsKHRoYXQsIGEpO1xuICAgIH07XG4gICAgY2FzZSAyOiByZXR1cm4gZnVuY3Rpb24gKGEsIGIpIHtcbiAgICAgIHJldHVybiBmbi5jYWxsKHRoYXQsIGEsIGIpO1xuICAgIH07XG4gICAgY2FzZSAzOiByZXR1cm4gZnVuY3Rpb24gKGEsIGIsIGMpIHtcbiAgICAgIHJldHVybiBmbi5jYWxsKHRoYXQsIGEsIGIsIGMpO1xuICAgIH07XG4gIH1cbiAgcmV0dXJuIGZ1bmN0aW9uICgvKiAuLi5hcmdzICovKSB7XG4gICAgcmV0dXJuIGZuLmFwcGx5KHRoYXQsIGFyZ3VtZW50cyk7XG4gIH07XG59O1xuIiwibW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQpIHtcbiAgcmV0dXJuIHR5cGVvZiBpdCA9PT0gJ29iamVjdCcgPyBpdCAhPT0gbnVsbCA6IHR5cGVvZiBpdCA9PT0gJ2Z1bmN0aW9uJztcbn07XG4iLCJ2YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuL19pcy1vYmplY3QnKTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0KSB7XG4gIGlmICghaXNPYmplY3QoaXQpKSB0aHJvdyBUeXBlRXJyb3IoaXQgKyAnIGlzIG5vdCBhbiBvYmplY3QhJyk7XG4gIHJldHVybiBpdDtcbn07XG4iLCJtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChleGVjKSB7XG4gIHRyeSB7XG4gICAgcmV0dXJuICEhZXhlYygpO1xuICB9IGNhdGNoIChlKSB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cbn07XG4iLCIvLyBUaGFuaydzIElFOCBmb3IgaGlzIGZ1bm55IGRlZmluZVByb3BlcnR5XG5tb2R1bGUuZXhwb3J0cyA9ICFyZXF1aXJlKCcuL19mYWlscycpKGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh7fSwgJ2EnLCB7IGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gNzsgfSB9KS5hICE9IDc7XG59KTtcbiIsInZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4vX2lzLW9iamVjdCcpO1xudmFyIGRvY3VtZW50ID0gcmVxdWlyZSgnLi9fZ2xvYmFsJykuZG9jdW1lbnQ7XG4vLyB0eXBlb2YgZG9jdW1lbnQuY3JlYXRlRWxlbWVudCBpcyAnb2JqZWN0JyBpbiBvbGQgSUVcbnZhciBpcyA9IGlzT2JqZWN0KGRvY3VtZW50KSAmJiBpc09iamVjdChkb2N1bWVudC5jcmVhdGVFbGVtZW50KTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0KSB7XG4gIHJldHVybiBpcyA/IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoaXQpIDoge307XG59O1xuIiwibW9kdWxlLmV4cG9ydHMgPSAhcmVxdWlyZSgnLi9fZGVzY3JpcHRvcnMnKSAmJiAhcmVxdWlyZSgnLi9fZmFpbHMnKShmdW5jdGlvbiAoKSB7XG4gIHJldHVybiBPYmplY3QuZGVmaW5lUHJvcGVydHkocmVxdWlyZSgnLi9fZG9tLWNyZWF0ZScpKCdkaXYnKSwgJ2EnLCB7IGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gNzsgfSB9KS5hICE9IDc7XG59KTtcbiIsIi8vIDcuMS4xIFRvUHJpbWl0aXZlKGlucHV0IFssIFByZWZlcnJlZFR5cGVdKVxudmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi9faXMtb2JqZWN0Jyk7XG4vLyBpbnN0ZWFkIG9mIHRoZSBFUzYgc3BlYyB2ZXJzaW9uLCB3ZSBkaWRuJ3QgaW1wbGVtZW50IEBAdG9QcmltaXRpdmUgY2FzZVxuLy8gYW5kIHRoZSBzZWNvbmQgYXJndW1lbnQgLSBmbGFnIC0gcHJlZmVycmVkIHR5cGUgaXMgYSBzdHJpbmdcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0LCBTKSB7XG4gIGlmICghaXNPYmplY3QoaXQpKSByZXR1cm4gaXQ7XG4gIHZhciBmbiwgdmFsO1xuICBpZiAoUyAmJiB0eXBlb2YgKGZuID0gaXQudG9TdHJpbmcpID09ICdmdW5jdGlvbicgJiYgIWlzT2JqZWN0KHZhbCA9IGZuLmNhbGwoaXQpKSkgcmV0dXJuIHZhbDtcbiAgaWYgKHR5cGVvZiAoZm4gPSBpdC52YWx1ZU9mKSA9PSAnZnVuY3Rpb24nICYmICFpc09iamVjdCh2YWwgPSBmbi5jYWxsKGl0KSkpIHJldHVybiB2YWw7XG4gIGlmICghUyAmJiB0eXBlb2YgKGZuID0gaXQudG9TdHJpbmcpID09ICdmdW5jdGlvbicgJiYgIWlzT2JqZWN0KHZhbCA9IGZuLmNhbGwoaXQpKSkgcmV0dXJuIHZhbDtcbiAgdGhyb3cgVHlwZUVycm9yKFwiQ2FuJ3QgY29udmVydCBvYmplY3QgdG8gcHJpbWl0aXZlIHZhbHVlXCIpO1xufTtcbiIsInZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4vX2FuLW9iamVjdCcpO1xudmFyIElFOF9ET01fREVGSU5FID0gcmVxdWlyZSgnLi9faWU4LWRvbS1kZWZpbmUnKTtcbnZhciB0b1ByaW1pdGl2ZSA9IHJlcXVpcmUoJy4vX3RvLXByaW1pdGl2ZScpO1xudmFyIGRQID0gT2JqZWN0LmRlZmluZVByb3BlcnR5O1xuXG5leHBvcnRzLmYgPSByZXF1aXJlKCcuL19kZXNjcmlwdG9ycycpID8gT2JqZWN0LmRlZmluZVByb3BlcnR5IDogZnVuY3Rpb24gZGVmaW5lUHJvcGVydHkoTywgUCwgQXR0cmlidXRlcykge1xuICBhbk9iamVjdChPKTtcbiAgUCA9IHRvUHJpbWl0aXZlKFAsIHRydWUpO1xuICBhbk9iamVjdChBdHRyaWJ1dGVzKTtcbiAgaWYgKElFOF9ET01fREVGSU5FKSB0cnkge1xuICAgIHJldHVybiBkUChPLCBQLCBBdHRyaWJ1dGVzKTtcbiAgfSBjYXRjaCAoZSkgeyAvKiBlbXB0eSAqLyB9XG4gIGlmICgnZ2V0JyBpbiBBdHRyaWJ1dGVzIHx8ICdzZXQnIGluIEF0dHJpYnV0ZXMpIHRocm93IFR5cGVFcnJvcignQWNjZXNzb3JzIG5vdCBzdXBwb3J0ZWQhJyk7XG4gIGlmICgndmFsdWUnIGluIEF0dHJpYnV0ZXMpIE9bUF0gPSBBdHRyaWJ1dGVzLnZhbHVlO1xuICByZXR1cm4gTztcbn07XG4iLCJtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChiaXRtYXAsIHZhbHVlKSB7XG4gIHJldHVybiB7XG4gICAgZW51bWVyYWJsZTogIShiaXRtYXAgJiAxKSxcbiAgICBjb25maWd1cmFibGU6ICEoYml0bWFwICYgMiksXG4gICAgd3JpdGFibGU6ICEoYml0bWFwICYgNCksXG4gICAgdmFsdWU6IHZhbHVlXG4gIH07XG59O1xuIiwidmFyIGRQID0gcmVxdWlyZSgnLi9fb2JqZWN0LWRwJyk7XG52YXIgY3JlYXRlRGVzYyA9IHJlcXVpcmUoJy4vX3Byb3BlcnR5LWRlc2MnKTtcbm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9fZGVzY3JpcHRvcnMnKSA/IGZ1bmN0aW9uIChvYmplY3QsIGtleSwgdmFsdWUpIHtcbiAgcmV0dXJuIGRQLmYob2JqZWN0LCBrZXksIGNyZWF0ZURlc2MoMSwgdmFsdWUpKTtcbn0gOiBmdW5jdGlvbiAob2JqZWN0LCBrZXksIHZhbHVlKSB7XG4gIG9iamVjdFtrZXldID0gdmFsdWU7XG4gIHJldHVybiBvYmplY3Q7XG59O1xuIiwidmFyIGhhc093blByb3BlcnR5ID0ge30uaGFzT3duUHJvcGVydHk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCwga2V5KSB7XG4gIHJldHVybiBoYXNPd25Qcm9wZXJ0eS5jYWxsKGl0LCBrZXkpO1xufTtcbiIsInZhciBnbG9iYWwgPSByZXF1aXJlKCcuL19nbG9iYWwnKTtcbnZhciBjb3JlID0gcmVxdWlyZSgnLi9fY29yZScpO1xudmFyIGN0eCA9IHJlcXVpcmUoJy4vX2N0eCcpO1xudmFyIGhpZGUgPSByZXF1aXJlKCcuL19oaWRlJyk7XG52YXIgaGFzID0gcmVxdWlyZSgnLi9faGFzJyk7XG52YXIgUFJPVE9UWVBFID0gJ3Byb3RvdHlwZSc7XG5cbnZhciAkZXhwb3J0ID0gZnVuY3Rpb24gKHR5cGUsIG5hbWUsIHNvdXJjZSkge1xuICB2YXIgSVNfRk9SQ0VEID0gdHlwZSAmICRleHBvcnQuRjtcbiAgdmFyIElTX0dMT0JBTCA9IHR5cGUgJiAkZXhwb3J0Lkc7XG4gIHZhciBJU19TVEFUSUMgPSB0eXBlICYgJGV4cG9ydC5TO1xuICB2YXIgSVNfUFJPVE8gPSB0eXBlICYgJGV4cG9ydC5QO1xuICB2YXIgSVNfQklORCA9IHR5cGUgJiAkZXhwb3J0LkI7XG4gIHZhciBJU19XUkFQID0gdHlwZSAmICRleHBvcnQuVztcbiAgdmFyIGV4cG9ydHMgPSBJU19HTE9CQUwgPyBjb3JlIDogY29yZVtuYW1lXSB8fCAoY29yZVtuYW1lXSA9IHt9KTtcbiAgdmFyIGV4cFByb3RvID0gZXhwb3J0c1tQUk9UT1RZUEVdO1xuICB2YXIgdGFyZ2V0ID0gSVNfR0xPQkFMID8gZ2xvYmFsIDogSVNfU1RBVElDID8gZ2xvYmFsW25hbWVdIDogKGdsb2JhbFtuYW1lXSB8fCB7fSlbUFJPVE9UWVBFXTtcbiAgdmFyIGtleSwgb3duLCBvdXQ7XG4gIGlmIChJU19HTE9CQUwpIHNvdXJjZSA9IG5hbWU7XG4gIGZvciAoa2V5IGluIHNvdXJjZSkge1xuICAgIC8vIGNvbnRhaW5zIGluIG5hdGl2ZVxuICAgIG93biA9ICFJU19GT1JDRUQgJiYgdGFyZ2V0ICYmIHRhcmdldFtrZXldICE9PSB1bmRlZmluZWQ7XG4gICAgaWYgKG93biAmJiBoYXMoZXhwb3J0cywga2V5KSkgY29udGludWU7XG4gICAgLy8gZXhwb3J0IG5hdGl2ZSBvciBwYXNzZWRcbiAgICBvdXQgPSBvd24gPyB0YXJnZXRba2V5XSA6IHNvdXJjZVtrZXldO1xuICAgIC8vIHByZXZlbnQgZ2xvYmFsIHBvbGx1dGlvbiBmb3IgbmFtZXNwYWNlc1xuICAgIGV4cG9ydHNba2V5XSA9IElTX0dMT0JBTCAmJiB0eXBlb2YgdGFyZ2V0W2tleV0gIT0gJ2Z1bmN0aW9uJyA/IHNvdXJjZVtrZXldXG4gICAgLy8gYmluZCB0aW1lcnMgdG8gZ2xvYmFsIGZvciBjYWxsIGZyb20gZXhwb3J0IGNvbnRleHRcbiAgICA6IElTX0JJTkQgJiYgb3duID8gY3R4KG91dCwgZ2xvYmFsKVxuICAgIC8vIHdyYXAgZ2xvYmFsIGNvbnN0cnVjdG9ycyBmb3IgcHJldmVudCBjaGFuZ2UgdGhlbSBpbiBsaWJyYXJ5XG4gICAgOiBJU19XUkFQICYmIHRhcmdldFtrZXldID09IG91dCA/IChmdW5jdGlvbiAoQykge1xuICAgICAgdmFyIEYgPSBmdW5jdGlvbiAoYSwgYiwgYykge1xuICAgICAgICBpZiAodGhpcyBpbnN0YW5jZW9mIEMpIHtcbiAgICAgICAgICBzd2l0Y2ggKGFyZ3VtZW50cy5sZW5ndGgpIHtcbiAgICAgICAgICAgIGNhc2UgMDogcmV0dXJuIG5ldyBDKCk7XG4gICAgICAgICAgICBjYXNlIDE6IHJldHVybiBuZXcgQyhhKTtcbiAgICAgICAgICAgIGNhc2UgMjogcmV0dXJuIG5ldyBDKGEsIGIpO1xuICAgICAgICAgIH0gcmV0dXJuIG5ldyBDKGEsIGIsIGMpO1xuICAgICAgICB9IHJldHVybiBDLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgICB9O1xuICAgICAgRltQUk9UT1RZUEVdID0gQ1tQUk9UT1RZUEVdO1xuICAgICAgcmV0dXJuIEY7XG4gICAgLy8gbWFrZSBzdGF0aWMgdmVyc2lvbnMgZm9yIHByb3RvdHlwZSBtZXRob2RzXG4gICAgfSkob3V0KSA6IElTX1BST1RPICYmIHR5cGVvZiBvdXQgPT0gJ2Z1bmN0aW9uJyA/IGN0eChGdW5jdGlvbi5jYWxsLCBvdXQpIDogb3V0O1xuICAgIC8vIGV4cG9ydCBwcm90byBtZXRob2RzIHRvIGNvcmUuJUNPTlNUUlVDVE9SJS5tZXRob2RzLiVOQU1FJVxuICAgIGlmIChJU19QUk9UTykge1xuICAgICAgKGV4cG9ydHMudmlydHVhbCB8fCAoZXhwb3J0cy52aXJ0dWFsID0ge30pKVtrZXldID0gb3V0O1xuICAgICAgLy8gZXhwb3J0IHByb3RvIG1ldGhvZHMgdG8gY29yZS4lQ09OU1RSVUNUT1IlLnByb3RvdHlwZS4lTkFNRSVcbiAgICAgIGlmICh0eXBlICYgJGV4cG9ydC5SICYmIGV4cFByb3RvICYmICFleHBQcm90b1trZXldKSBoaWRlKGV4cFByb3RvLCBrZXksIG91dCk7XG4gICAgfVxuICB9XG59O1xuLy8gdHlwZSBiaXRtYXBcbiRleHBvcnQuRiA9IDE7ICAgLy8gZm9yY2VkXG4kZXhwb3J0LkcgPSAyOyAgIC8vIGdsb2JhbFxuJGV4cG9ydC5TID0gNDsgICAvLyBzdGF0aWNcbiRleHBvcnQuUCA9IDg7ICAgLy8gcHJvdG9cbiRleHBvcnQuQiA9IDE2OyAgLy8gYmluZFxuJGV4cG9ydC5XID0gMzI7ICAvLyB3cmFwXG4kZXhwb3J0LlUgPSA2NDsgIC8vIHNhZmVcbiRleHBvcnQuUiA9IDEyODsgLy8gcmVhbCBwcm90byBtZXRob2QgZm9yIGBsaWJyYXJ5YFxubW9kdWxlLmV4cG9ydHMgPSAkZXhwb3J0O1xuIiwiLy8gaHR0cHM6Ly9naXRodWIuY29tL3RjMzkvcHJvcG9zYWwtZ2xvYmFsXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xuXG4kZXhwb3J0KCRleHBvcnQuRywgeyBnbG9iYWw6IHJlcXVpcmUoJy4vX2dsb2JhbCcpIH0pO1xuIiwicmVxdWlyZSgnLi4vbW9kdWxlcy9lczcuZ2xvYmFsJyk7XG5tb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4uL21vZHVsZXMvX2NvcmUnKS5nbG9iYWw7XG4iLCJcInVzZSBzdHJpY3RcIjtcblxucmVxdWlyZShcIi4vbm9Db25mbGljdFwiKTtcblxudmFyIF9nbG9iYWwgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJjb3JlLWpzL2xpYnJhcnkvZm4vZ2xvYmFsXCIpKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgXCJkZWZhdWx0XCI6IG9iaiB9OyB9XG5cbmlmIChfZ2xvYmFsW1wiZGVmYXVsdFwiXS5fYmFiZWxQb2x5ZmlsbCAmJiB0eXBlb2YgY29uc29sZSAhPT0gXCJ1bmRlZmluZWRcIiAmJiBjb25zb2xlLndhcm4pIHtcbiAgY29uc29sZS53YXJuKFwiQGJhYmVsL3BvbHlmaWxsIGlzIGxvYWRlZCBtb3JlIHRoYW4gb25jZSBvbiB0aGlzIHBhZ2UuIFRoaXMgaXMgcHJvYmFibHkgbm90IGRlc2lyYWJsZS9pbnRlbmRlZCBcIiArIFwiYW5kIG1heSBoYXZlIGNvbnNlcXVlbmNlcyBpZiBkaWZmZXJlbnQgdmVyc2lvbnMgb2YgdGhlIHBvbHlmaWxscyBhcmUgYXBwbGllZCBzZXF1ZW50aWFsbHkuIFwiICsgXCJJZiB5b3UgZG8gbmVlZCB0byBsb2FkIHRoZSBwb2x5ZmlsbCBtb3JlIHRoYW4gb25jZSwgdXNlIEBiYWJlbC9wb2x5ZmlsbC9ub0NvbmZsaWN0IFwiICsgXCJpbnN0ZWFkIHRvIGJ5cGFzcyB0aGUgd2FybmluZy5cIik7XG59XG5cbl9nbG9iYWxbXCJkZWZhdWx0XCJdLl9iYWJlbFBvbHlmaWxsID0gdHJ1ZTsiLCIvLyA3LjIuMSBSZXF1aXJlT2JqZWN0Q29lcmNpYmxlKGFyZ3VtZW50KVxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQpIHtcbiAgaWYgKGl0ID09IHVuZGVmaW5lZCkgdGhyb3cgVHlwZUVycm9yKFwiQ2FuJ3QgY2FsbCBtZXRob2Qgb24gIFwiICsgaXQpO1xuICByZXR1cm4gaXQ7XG59O1xuIiwiLy8gNy4xLjEzIFRvT2JqZWN0KGFyZ3VtZW50KVxudmFyIGRlZmluZWQgPSByZXF1aXJlKCcuL19kZWZpbmVkJyk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCkge1xuICByZXR1cm4gT2JqZWN0KGRlZmluZWQoaXQpKTtcbn07XG4iLCJtb2R1bGUuZXhwb3J0cyA9IHRydWU7XG4iLCJ2YXIgY29yZSA9IHJlcXVpcmUoJy4vX2NvcmUnKTtcbnZhciBnbG9iYWwgPSByZXF1aXJlKCcuL19nbG9iYWwnKTtcbnZhciBTSEFSRUQgPSAnX19jb3JlLWpzX3NoYXJlZF9fJztcbnZhciBzdG9yZSA9IGdsb2JhbFtTSEFSRURdIHx8IChnbG9iYWxbU0hBUkVEXSA9IHt9KTtcblxuKG1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGtleSwgdmFsdWUpIHtcbiAgcmV0dXJuIHN0b3JlW2tleV0gfHwgKHN0b3JlW2tleV0gPSB2YWx1ZSAhPT0gdW5kZWZpbmVkID8gdmFsdWUgOiB7fSk7XG59KSgndmVyc2lvbnMnLCBbXSkucHVzaCh7XG4gIHZlcnNpb246IGNvcmUudmVyc2lvbixcbiAgbW9kZTogcmVxdWlyZSgnLi9fbGlicmFyeScpID8gJ3B1cmUnIDogJ2dsb2JhbCcsXG4gIGNvcHlyaWdodDogJ8KpIDIwMTkgRGVuaXMgUHVzaGthcmV2ICh6bG9pcm9jay5ydSknXG59KTtcbiIsInZhciBpZCA9IDA7XG52YXIgcHggPSBNYXRoLnJhbmRvbSgpO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoa2V5KSB7XG4gIHJldHVybiAnU3ltYm9sKCcuY29uY2F0KGtleSA9PT0gdW5kZWZpbmVkID8gJycgOiBrZXksICcpXycsICgrK2lkICsgcHgpLnRvU3RyaW5nKDM2KSk7XG59O1xuIiwidmFyIHNoYXJlZCA9IHJlcXVpcmUoJy4vX3NoYXJlZCcpKCdrZXlzJyk7XG52YXIgdWlkID0gcmVxdWlyZSgnLi9fdWlkJyk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChrZXkpIHtcbiAgcmV0dXJuIHNoYXJlZFtrZXldIHx8IChzaGFyZWRba2V5XSA9IHVpZChrZXkpKTtcbn07XG4iLCIvLyAxOS4xLjIuOSAvIDE1LjIuMy4yIE9iamVjdC5nZXRQcm90b3R5cGVPZihPKVxudmFyIGhhcyA9IHJlcXVpcmUoJy4vX2hhcycpO1xudmFyIHRvT2JqZWN0ID0gcmVxdWlyZSgnLi9fdG8tb2JqZWN0Jyk7XG52YXIgSUVfUFJPVE8gPSByZXF1aXJlKCcuL19zaGFyZWQta2V5JykoJ0lFX1BST1RPJyk7XG52YXIgT2JqZWN0UHJvdG8gPSBPYmplY3QucHJvdG90eXBlO1xuXG5tb2R1bGUuZXhwb3J0cyA9IE9iamVjdC5nZXRQcm90b3R5cGVPZiB8fCBmdW5jdGlvbiAoTykge1xuICBPID0gdG9PYmplY3QoTyk7XG4gIGlmIChoYXMoTywgSUVfUFJPVE8pKSByZXR1cm4gT1tJRV9QUk9UT107XG4gIGlmICh0eXBlb2YgTy5jb25zdHJ1Y3RvciA9PSAnZnVuY3Rpb24nICYmIE8gaW5zdGFuY2VvZiBPLmNvbnN0cnVjdG9yKSB7XG4gICAgcmV0dXJuIE8uY29uc3RydWN0b3IucHJvdG90eXBlO1xuICB9IHJldHVybiBPIGluc3RhbmNlb2YgT2JqZWN0ID8gT2JqZWN0UHJvdG8gOiBudWxsO1xufTtcbiIsIi8vIG1vc3QgT2JqZWN0IG1ldGhvZHMgYnkgRVM2IHNob3VsZCBhY2NlcHQgcHJpbWl0aXZlc1xudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciBjb3JlID0gcmVxdWlyZSgnLi9fY29yZScpO1xudmFyIGZhaWxzID0gcmVxdWlyZSgnLi9fZmFpbHMnKTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKEtFWSwgZXhlYykge1xuICB2YXIgZm4gPSAoY29yZS5PYmplY3QgfHwge30pW0tFWV0gfHwgT2JqZWN0W0tFWV07XG4gIHZhciBleHAgPSB7fTtcbiAgZXhwW0tFWV0gPSBleGVjKGZuKTtcbiAgJGV4cG9ydCgkZXhwb3J0LlMgKyAkZXhwb3J0LkYgKiBmYWlscyhmdW5jdGlvbiAoKSB7IGZuKDEpOyB9KSwgJ09iamVjdCcsIGV4cCk7XG59O1xuIiwiLy8gMTkuMS4yLjkgT2JqZWN0LmdldFByb3RvdHlwZU9mKE8pXG52YXIgdG9PYmplY3QgPSByZXF1aXJlKCcuL190by1vYmplY3QnKTtcbnZhciAkZ2V0UHJvdG90eXBlT2YgPSByZXF1aXJlKCcuL19vYmplY3QtZ3BvJyk7XG5cbnJlcXVpcmUoJy4vX29iamVjdC1zYXAnKSgnZ2V0UHJvdG90eXBlT2YnLCBmdW5jdGlvbiAoKSB7XG4gIHJldHVybiBmdW5jdGlvbiBnZXRQcm90b3R5cGVPZihpdCkge1xuICAgIHJldHVybiAkZ2V0UHJvdG90eXBlT2YodG9PYmplY3QoaXQpKTtcbiAgfTtcbn0pO1xuIiwicmVxdWlyZSgnLi4vLi4vbW9kdWxlcy9lczYub2JqZWN0LmdldC1wcm90b3R5cGUtb2YnKTtcbm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi4vLi4vbW9kdWxlcy9fY29yZScpLk9iamVjdC5nZXRQcm90b3R5cGVPZjtcbiIsIm1vZHVsZS5leHBvcnRzID0geyBcImRlZmF1bHRcIjogcmVxdWlyZShcImNvcmUtanMvbGlicmFyeS9mbi9vYmplY3QvZ2V0LXByb3RvdHlwZS1vZlwiKSwgX19lc01vZHVsZTogdHJ1ZSB9OyIsIlwidXNlIHN0cmljdFwiO1xuXG5leHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlO1xuXG5leHBvcnRzLmRlZmF1bHQgPSBmdW5jdGlvbiAoaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7XG4gIGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTtcbiAgfVxufTsiLCJ2YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xuLy8gMTkuMS4yLjQgLyAxNS4yLjMuNiBPYmplY3QuZGVmaW5lUHJvcGVydHkoTywgUCwgQXR0cmlidXRlcylcbiRleHBvcnQoJGV4cG9ydC5TICsgJGV4cG9ydC5GICogIXJlcXVpcmUoJy4vX2Rlc2NyaXB0b3JzJyksICdPYmplY3QnLCB7IGRlZmluZVByb3BlcnR5OiByZXF1aXJlKCcuL19vYmplY3QtZHAnKS5mIH0pO1xuIiwicmVxdWlyZSgnLi4vLi4vbW9kdWxlcy9lczYub2JqZWN0LmRlZmluZS1wcm9wZXJ0eScpO1xudmFyICRPYmplY3QgPSByZXF1aXJlKCcuLi8uLi9tb2R1bGVzL19jb3JlJykuT2JqZWN0O1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0eShpdCwga2V5LCBkZXNjKSB7XG4gIHJldHVybiAkT2JqZWN0LmRlZmluZVByb3BlcnR5KGl0LCBrZXksIGRlc2MpO1xufTtcbiIsIm1vZHVsZS5leHBvcnRzID0geyBcImRlZmF1bHRcIjogcmVxdWlyZShcImNvcmUtanMvbGlicmFyeS9mbi9vYmplY3QvZGVmaW5lLXByb3BlcnR5XCIpLCBfX2VzTW9kdWxlOiB0cnVlIH07IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbmV4cG9ydHMuX19lc01vZHVsZSA9IHRydWU7XG5cbnZhciBfZGVmaW5lUHJvcGVydHkgPSByZXF1aXJlKFwiLi4vY29yZS1qcy9vYmplY3QvZGVmaW5lLXByb3BlcnR5XCIpO1xuXG52YXIgX2RlZmluZVByb3BlcnR5MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2RlZmluZVByb3BlcnR5KTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxuZXhwb3J0cy5kZWZhdWx0ID0gZnVuY3Rpb24gKCkge1xuICBmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgcHJvcHMpIHtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgZGVzY3JpcHRvciA9IHByb3BzW2ldO1xuICAgICAgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlO1xuICAgICAgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlO1xuICAgICAgaWYgKFwidmFsdWVcIiBpbiBkZXNjcmlwdG9yKSBkZXNjcmlwdG9yLndyaXRhYmxlID0gdHJ1ZTtcbiAgICAgICgwLCBfZGVmaW5lUHJvcGVydHkyLmRlZmF1bHQpKHRhcmdldCwgZGVzY3JpcHRvci5rZXksIGRlc2NyaXB0b3IpO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBmdW5jdGlvbiAoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7XG4gICAgaWYgKHByb3RvUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IucHJvdG90eXBlLCBwcm90b1Byb3BzKTtcbiAgICBpZiAoc3RhdGljUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTtcbiAgICByZXR1cm4gQ29uc3RydWN0b3I7XG4gIH07XG59KCk7IiwiLy8gNy4xLjQgVG9JbnRlZ2VyXG52YXIgY2VpbCA9IE1hdGguY2VpbDtcbnZhciBmbG9vciA9IE1hdGguZmxvb3I7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCkge1xuICByZXR1cm4gaXNOYU4oaXQgPSAraXQpID8gMCA6IChpdCA+IDAgPyBmbG9vciA6IGNlaWwpKGl0KTtcbn07XG4iLCJ2YXIgdG9JbnRlZ2VyID0gcmVxdWlyZSgnLi9fdG8taW50ZWdlcicpO1xudmFyIGRlZmluZWQgPSByZXF1aXJlKCcuL19kZWZpbmVkJyk7XG4vLyB0cnVlICAtPiBTdHJpbmcjYXRcbi8vIGZhbHNlIC0+IFN0cmluZyNjb2RlUG9pbnRBdFxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoVE9fU1RSSU5HKSB7XG4gIHJldHVybiBmdW5jdGlvbiAodGhhdCwgcG9zKSB7XG4gICAgdmFyIHMgPSBTdHJpbmcoZGVmaW5lZCh0aGF0KSk7XG4gICAgdmFyIGkgPSB0b0ludGVnZXIocG9zKTtcbiAgICB2YXIgbCA9IHMubGVuZ3RoO1xuICAgIHZhciBhLCBiO1xuICAgIGlmIChpIDwgMCB8fCBpID49IGwpIHJldHVybiBUT19TVFJJTkcgPyAnJyA6IHVuZGVmaW5lZDtcbiAgICBhID0gcy5jaGFyQ29kZUF0KGkpO1xuICAgIHJldHVybiBhIDwgMHhkODAwIHx8IGEgPiAweGRiZmYgfHwgaSArIDEgPT09IGwgfHwgKGIgPSBzLmNoYXJDb2RlQXQoaSArIDEpKSA8IDB4ZGMwMCB8fCBiID4gMHhkZmZmXG4gICAgICA/IFRPX1NUUklORyA/IHMuY2hhckF0KGkpIDogYVxuICAgICAgOiBUT19TVFJJTkcgPyBzLnNsaWNlKGksIGkgKyAyKSA6IChhIC0gMHhkODAwIDw8IDEwKSArIChiIC0gMHhkYzAwKSArIDB4MTAwMDA7XG4gIH07XG59O1xuIiwibW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL19oaWRlJyk7XG4iLCJtb2R1bGUuZXhwb3J0cyA9IHt9O1xuIiwidmFyIHRvU3RyaW5nID0ge30udG9TdHJpbmc7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0KSB7XG4gIHJldHVybiB0b1N0cmluZy5jYWxsKGl0KS5zbGljZSg4LCAtMSk7XG59O1xuIiwiLy8gZmFsbGJhY2sgZm9yIG5vbi1hcnJheS1saWtlIEVTMyBhbmQgbm9uLWVudW1lcmFibGUgb2xkIFY4IHN0cmluZ3NcbnZhciBjb2YgPSByZXF1aXJlKCcuL19jb2YnKTtcbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1wcm90b3R5cGUtYnVpbHRpbnNcbm1vZHVsZS5leHBvcnRzID0gT2JqZWN0KCd6JykucHJvcGVydHlJc0VudW1lcmFibGUoMCkgPyBPYmplY3QgOiBmdW5jdGlvbiAoaXQpIHtcbiAgcmV0dXJuIGNvZihpdCkgPT0gJ1N0cmluZycgPyBpdC5zcGxpdCgnJykgOiBPYmplY3QoaXQpO1xufTtcbiIsIi8vIHRvIGluZGV4ZWQgb2JqZWN0LCB0b09iamVjdCB3aXRoIGZhbGxiYWNrIGZvciBub24tYXJyYXktbGlrZSBFUzMgc3RyaW5nc1xudmFyIElPYmplY3QgPSByZXF1aXJlKCcuL19pb2JqZWN0Jyk7XG52YXIgZGVmaW5lZCA9IHJlcXVpcmUoJy4vX2RlZmluZWQnKTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0KSB7XG4gIHJldHVybiBJT2JqZWN0KGRlZmluZWQoaXQpKTtcbn07XG4iLCIvLyA3LjEuMTUgVG9MZW5ndGhcbnZhciB0b0ludGVnZXIgPSByZXF1aXJlKCcuL190by1pbnRlZ2VyJyk7XG52YXIgbWluID0gTWF0aC5taW47XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCkge1xuICByZXR1cm4gaXQgPiAwID8gbWluKHRvSW50ZWdlcihpdCksIDB4MWZmZmZmZmZmZmZmZmYpIDogMDsgLy8gcG93KDIsIDUzKSAtIDEgPT0gOTAwNzE5OTI1NDc0MDk5MVxufTtcbiIsInZhciB0b0ludGVnZXIgPSByZXF1aXJlKCcuL190by1pbnRlZ2VyJyk7XG52YXIgbWF4ID0gTWF0aC5tYXg7XG52YXIgbWluID0gTWF0aC5taW47XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpbmRleCwgbGVuZ3RoKSB7XG4gIGluZGV4ID0gdG9JbnRlZ2VyKGluZGV4KTtcbiAgcmV0dXJuIGluZGV4IDwgMCA/IG1heChpbmRleCArIGxlbmd0aCwgMCkgOiBtaW4oaW5kZXgsIGxlbmd0aCk7XG59O1xuIiwiLy8gZmFsc2UgLT4gQXJyYXkjaW5kZXhPZlxuLy8gdHJ1ZSAgLT4gQXJyYXkjaW5jbHVkZXNcbnZhciB0b0lPYmplY3QgPSByZXF1aXJlKCcuL190by1pb2JqZWN0Jyk7XG52YXIgdG9MZW5ndGggPSByZXF1aXJlKCcuL190by1sZW5ndGgnKTtcbnZhciB0b0Fic29sdXRlSW5kZXggPSByZXF1aXJlKCcuL190by1hYnNvbHV0ZS1pbmRleCcpO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoSVNfSU5DTFVERVMpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uICgkdGhpcywgZWwsIGZyb21JbmRleCkge1xuICAgIHZhciBPID0gdG9JT2JqZWN0KCR0aGlzKTtcbiAgICB2YXIgbGVuZ3RoID0gdG9MZW5ndGgoTy5sZW5ndGgpO1xuICAgIHZhciBpbmRleCA9IHRvQWJzb2x1dGVJbmRleChmcm9tSW5kZXgsIGxlbmd0aCk7XG4gICAgdmFyIHZhbHVlO1xuICAgIC8vIEFycmF5I2luY2x1ZGVzIHVzZXMgU2FtZVZhbHVlWmVybyBlcXVhbGl0eSBhbGdvcml0aG1cbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tc2VsZi1jb21wYXJlXG4gICAgaWYgKElTX0lOQ0xVREVTICYmIGVsICE9IGVsKSB3aGlsZSAobGVuZ3RoID4gaW5kZXgpIHtcbiAgICAgIHZhbHVlID0gT1tpbmRleCsrXTtcbiAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1zZWxmLWNvbXBhcmVcbiAgICAgIGlmICh2YWx1ZSAhPSB2YWx1ZSkgcmV0dXJuIHRydWU7XG4gICAgLy8gQXJyYXkjaW5kZXhPZiBpZ25vcmVzIGhvbGVzLCBBcnJheSNpbmNsdWRlcyAtIG5vdFxuICAgIH0gZWxzZSBmb3IgKDtsZW5ndGggPiBpbmRleDsgaW5kZXgrKykgaWYgKElTX0lOQ0xVREVTIHx8IGluZGV4IGluIE8pIHtcbiAgICAgIGlmIChPW2luZGV4XSA9PT0gZWwpIHJldHVybiBJU19JTkNMVURFUyB8fCBpbmRleCB8fCAwO1xuICAgIH0gcmV0dXJuICFJU19JTkNMVURFUyAmJiAtMTtcbiAgfTtcbn07XG4iLCJ2YXIgaGFzID0gcmVxdWlyZSgnLi9faGFzJyk7XG52YXIgdG9JT2JqZWN0ID0gcmVxdWlyZSgnLi9fdG8taW9iamVjdCcpO1xudmFyIGFycmF5SW5kZXhPZiA9IHJlcXVpcmUoJy4vX2FycmF5LWluY2x1ZGVzJykoZmFsc2UpO1xudmFyIElFX1BST1RPID0gcmVxdWlyZSgnLi9fc2hhcmVkLWtleScpKCdJRV9QUk9UTycpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChvYmplY3QsIG5hbWVzKSB7XG4gIHZhciBPID0gdG9JT2JqZWN0KG9iamVjdCk7XG4gIHZhciBpID0gMDtcbiAgdmFyIHJlc3VsdCA9IFtdO1xuICB2YXIga2V5O1xuICBmb3IgKGtleSBpbiBPKSBpZiAoa2V5ICE9IElFX1BST1RPKSBoYXMoTywga2V5KSAmJiByZXN1bHQucHVzaChrZXkpO1xuICAvLyBEb24ndCBlbnVtIGJ1ZyAmIGhpZGRlbiBrZXlzXG4gIHdoaWxlIChuYW1lcy5sZW5ndGggPiBpKSBpZiAoaGFzKE8sIGtleSA9IG5hbWVzW2krK10pKSB7XG4gICAgfmFycmF5SW5kZXhPZihyZXN1bHQsIGtleSkgfHwgcmVzdWx0LnB1c2goa2V5KTtcbiAgfVxuICByZXR1cm4gcmVzdWx0O1xufTtcbiIsIi8vIElFIDgtIGRvbid0IGVudW0gYnVnIGtleXNcbm1vZHVsZS5leHBvcnRzID0gKFxuICAnY29uc3RydWN0b3IsaGFzT3duUHJvcGVydHksaXNQcm90b3R5cGVPZixwcm9wZXJ0eUlzRW51bWVyYWJsZSx0b0xvY2FsZVN0cmluZyx0b1N0cmluZyx2YWx1ZU9mJ1xuKS5zcGxpdCgnLCcpO1xuIiwiLy8gMTkuMS4yLjE0IC8gMTUuMi4zLjE0IE9iamVjdC5rZXlzKE8pXG52YXIgJGtleXMgPSByZXF1aXJlKCcuL19vYmplY3Qta2V5cy1pbnRlcm5hbCcpO1xudmFyIGVudW1CdWdLZXlzID0gcmVxdWlyZSgnLi9fZW51bS1idWcta2V5cycpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IE9iamVjdC5rZXlzIHx8IGZ1bmN0aW9uIGtleXMoTykge1xuICByZXR1cm4gJGtleXMoTywgZW51bUJ1Z0tleXMpO1xufTtcbiIsInZhciBkUCA9IHJlcXVpcmUoJy4vX29iamVjdC1kcCcpO1xudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi9fYW4tb2JqZWN0Jyk7XG52YXIgZ2V0S2V5cyA9IHJlcXVpcmUoJy4vX29iamVjdC1rZXlzJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9fZGVzY3JpcHRvcnMnKSA/IE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzIDogZnVuY3Rpb24gZGVmaW5lUHJvcGVydGllcyhPLCBQcm9wZXJ0aWVzKSB7XG4gIGFuT2JqZWN0KE8pO1xuICB2YXIga2V5cyA9IGdldEtleXMoUHJvcGVydGllcyk7XG4gIHZhciBsZW5ndGggPSBrZXlzLmxlbmd0aDtcbiAgdmFyIGkgPSAwO1xuICB2YXIgUDtcbiAgd2hpbGUgKGxlbmd0aCA+IGkpIGRQLmYoTywgUCA9IGtleXNbaSsrXSwgUHJvcGVydGllc1tQXSk7XG4gIHJldHVybiBPO1xufTtcbiIsInZhciBkb2N1bWVudCA9IHJlcXVpcmUoJy4vX2dsb2JhbCcpLmRvY3VtZW50O1xubW9kdWxlLmV4cG9ydHMgPSBkb2N1bWVudCAmJiBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQ7XG4iLCIvLyAxOS4xLjIuMiAvIDE1LjIuMy41IE9iamVjdC5jcmVhdGUoTyBbLCBQcm9wZXJ0aWVzXSlcbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4vX2FuLW9iamVjdCcpO1xudmFyIGRQcyA9IHJlcXVpcmUoJy4vX29iamVjdC1kcHMnKTtcbnZhciBlbnVtQnVnS2V5cyA9IHJlcXVpcmUoJy4vX2VudW0tYnVnLWtleXMnKTtcbnZhciBJRV9QUk9UTyA9IHJlcXVpcmUoJy4vX3NoYXJlZC1rZXknKSgnSUVfUFJPVE8nKTtcbnZhciBFbXB0eSA9IGZ1bmN0aW9uICgpIHsgLyogZW1wdHkgKi8gfTtcbnZhciBQUk9UT1RZUEUgPSAncHJvdG90eXBlJztcblxuLy8gQ3JlYXRlIG9iamVjdCB3aXRoIGZha2UgYG51bGxgIHByb3RvdHlwZTogdXNlIGlmcmFtZSBPYmplY3Qgd2l0aCBjbGVhcmVkIHByb3RvdHlwZVxudmFyIGNyZWF0ZURpY3QgPSBmdW5jdGlvbiAoKSB7XG4gIC8vIFRocmFzaCwgd2FzdGUgYW5kIHNvZG9teTogSUUgR0MgYnVnXG4gIHZhciBpZnJhbWUgPSByZXF1aXJlKCcuL19kb20tY3JlYXRlJykoJ2lmcmFtZScpO1xuICB2YXIgaSA9IGVudW1CdWdLZXlzLmxlbmd0aDtcbiAgdmFyIGx0ID0gJzwnO1xuICB2YXIgZ3QgPSAnPic7XG4gIHZhciBpZnJhbWVEb2N1bWVudDtcbiAgaWZyYW1lLnN0eWxlLmRpc3BsYXkgPSAnbm9uZSc7XG4gIHJlcXVpcmUoJy4vX2h0bWwnKS5hcHBlbmRDaGlsZChpZnJhbWUpO1xuICBpZnJhbWUuc3JjID0gJ2phdmFzY3JpcHQ6JzsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1zY3JpcHQtdXJsXG4gIC8vIGNyZWF0ZURpY3QgPSBpZnJhbWUuY29udGVudFdpbmRvdy5PYmplY3Q7XG4gIC8vIGh0bWwucmVtb3ZlQ2hpbGQoaWZyYW1lKTtcbiAgaWZyYW1lRG9jdW1lbnQgPSBpZnJhbWUuY29udGVudFdpbmRvdy5kb2N1bWVudDtcbiAgaWZyYW1lRG9jdW1lbnQub3BlbigpO1xuICBpZnJhbWVEb2N1bWVudC53cml0ZShsdCArICdzY3JpcHQnICsgZ3QgKyAnZG9jdW1lbnQuRj1PYmplY3QnICsgbHQgKyAnL3NjcmlwdCcgKyBndCk7XG4gIGlmcmFtZURvY3VtZW50LmNsb3NlKCk7XG4gIGNyZWF0ZURpY3QgPSBpZnJhbWVEb2N1bWVudC5GO1xuICB3aGlsZSAoaS0tKSBkZWxldGUgY3JlYXRlRGljdFtQUk9UT1RZUEVdW2VudW1CdWdLZXlzW2ldXTtcbiAgcmV0dXJuIGNyZWF0ZURpY3QoKTtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gT2JqZWN0LmNyZWF0ZSB8fCBmdW5jdGlvbiBjcmVhdGUoTywgUHJvcGVydGllcykge1xuICB2YXIgcmVzdWx0O1xuICBpZiAoTyAhPT0gbnVsbCkge1xuICAgIEVtcHR5W1BST1RPVFlQRV0gPSBhbk9iamVjdChPKTtcbiAgICByZXN1bHQgPSBuZXcgRW1wdHkoKTtcbiAgICBFbXB0eVtQUk9UT1RZUEVdID0gbnVsbDtcbiAgICAvLyBhZGQgXCJfX3Byb3RvX19cIiBmb3IgT2JqZWN0LmdldFByb3RvdHlwZU9mIHBvbHlmaWxsXG4gICAgcmVzdWx0W0lFX1BST1RPXSA9IE87XG4gIH0gZWxzZSByZXN1bHQgPSBjcmVhdGVEaWN0KCk7XG4gIHJldHVybiBQcm9wZXJ0aWVzID09PSB1bmRlZmluZWQgPyByZXN1bHQgOiBkUHMocmVzdWx0LCBQcm9wZXJ0aWVzKTtcbn07XG4iLCJ2YXIgc3RvcmUgPSByZXF1aXJlKCcuL19zaGFyZWQnKSgnd2tzJyk7XG52YXIgdWlkID0gcmVxdWlyZSgnLi9fdWlkJyk7XG52YXIgU3ltYm9sID0gcmVxdWlyZSgnLi9fZ2xvYmFsJykuU3ltYm9sO1xudmFyIFVTRV9TWU1CT0wgPSB0eXBlb2YgU3ltYm9sID09ICdmdW5jdGlvbic7XG5cbnZhciAkZXhwb3J0cyA9IG1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKG5hbWUpIHtcbiAgcmV0dXJuIHN0b3JlW25hbWVdIHx8IChzdG9yZVtuYW1lXSA9XG4gICAgVVNFX1NZTUJPTCAmJiBTeW1ib2xbbmFtZV0gfHwgKFVTRV9TWU1CT0wgPyBTeW1ib2wgOiB1aWQpKCdTeW1ib2wuJyArIG5hbWUpKTtcbn07XG5cbiRleHBvcnRzLnN0b3JlID0gc3RvcmU7XG4iLCJ2YXIgZGVmID0gcmVxdWlyZSgnLi9fb2JqZWN0LWRwJykuZjtcbnZhciBoYXMgPSByZXF1aXJlKCcuL19oYXMnKTtcbnZhciBUQUcgPSByZXF1aXJlKCcuL193a3MnKSgndG9TdHJpbmdUYWcnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQsIHRhZywgc3RhdCkge1xuICBpZiAoaXQgJiYgIWhhcyhpdCA9IHN0YXQgPyBpdCA6IGl0LnByb3RvdHlwZSwgVEFHKSkgZGVmKGl0LCBUQUcsIHsgY29uZmlndXJhYmxlOiB0cnVlLCB2YWx1ZTogdGFnIH0pO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciBjcmVhdGUgPSByZXF1aXJlKCcuL19vYmplY3QtY3JlYXRlJyk7XG52YXIgZGVzY3JpcHRvciA9IHJlcXVpcmUoJy4vX3Byb3BlcnR5LWRlc2MnKTtcbnZhciBzZXRUb1N0cmluZ1RhZyA9IHJlcXVpcmUoJy4vX3NldC10by1zdHJpbmctdGFnJyk7XG52YXIgSXRlcmF0b3JQcm90b3R5cGUgPSB7fTtcblxuLy8gMjUuMS4yLjEuMSAlSXRlcmF0b3JQcm90b3R5cGUlW0BAaXRlcmF0b3JdKClcbnJlcXVpcmUoJy4vX2hpZGUnKShJdGVyYXRvclByb3RvdHlwZSwgcmVxdWlyZSgnLi9fd2tzJykoJ2l0ZXJhdG9yJyksIGZ1bmN0aW9uICgpIHsgcmV0dXJuIHRoaXM7IH0pO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChDb25zdHJ1Y3RvciwgTkFNRSwgbmV4dCkge1xuICBDb25zdHJ1Y3Rvci5wcm90b3R5cGUgPSBjcmVhdGUoSXRlcmF0b3JQcm90b3R5cGUsIHsgbmV4dDogZGVzY3JpcHRvcigxLCBuZXh0KSB9KTtcbiAgc2V0VG9TdHJpbmdUYWcoQ29uc3RydWN0b3IsIE5BTUUgKyAnIEl0ZXJhdG9yJyk7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIExJQlJBUlkgPSByZXF1aXJlKCcuL19saWJyYXJ5Jyk7XG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIHJlZGVmaW5lID0gcmVxdWlyZSgnLi9fcmVkZWZpbmUnKTtcbnZhciBoaWRlID0gcmVxdWlyZSgnLi9faGlkZScpO1xudmFyIEl0ZXJhdG9ycyA9IHJlcXVpcmUoJy4vX2l0ZXJhdG9ycycpO1xudmFyICRpdGVyQ3JlYXRlID0gcmVxdWlyZSgnLi9faXRlci1jcmVhdGUnKTtcbnZhciBzZXRUb1N0cmluZ1RhZyA9IHJlcXVpcmUoJy4vX3NldC10by1zdHJpbmctdGFnJyk7XG52YXIgZ2V0UHJvdG90eXBlT2YgPSByZXF1aXJlKCcuL19vYmplY3QtZ3BvJyk7XG52YXIgSVRFUkFUT1IgPSByZXF1aXJlKCcuL193a3MnKSgnaXRlcmF0b3InKTtcbnZhciBCVUdHWSA9ICEoW10ua2V5cyAmJiAnbmV4dCcgaW4gW10ua2V5cygpKTsgLy8gU2FmYXJpIGhhcyBidWdneSBpdGVyYXRvcnMgdy9vIGBuZXh0YFxudmFyIEZGX0lURVJBVE9SID0gJ0BAaXRlcmF0b3InO1xudmFyIEtFWVMgPSAna2V5cyc7XG52YXIgVkFMVUVTID0gJ3ZhbHVlcyc7XG5cbnZhciByZXR1cm5UaGlzID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gdGhpczsgfTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoQmFzZSwgTkFNRSwgQ29uc3RydWN0b3IsIG5leHQsIERFRkFVTFQsIElTX1NFVCwgRk9SQ0VEKSB7XG4gICRpdGVyQ3JlYXRlKENvbnN0cnVjdG9yLCBOQU1FLCBuZXh0KTtcbiAgdmFyIGdldE1ldGhvZCA9IGZ1bmN0aW9uIChraW5kKSB7XG4gICAgaWYgKCFCVUdHWSAmJiBraW5kIGluIHByb3RvKSByZXR1cm4gcHJvdG9ba2luZF07XG4gICAgc3dpdGNoIChraW5kKSB7XG4gICAgICBjYXNlIEtFWVM6IHJldHVybiBmdW5jdGlvbiBrZXlzKCkgeyByZXR1cm4gbmV3IENvbnN0cnVjdG9yKHRoaXMsIGtpbmQpOyB9O1xuICAgICAgY2FzZSBWQUxVRVM6IHJldHVybiBmdW5jdGlvbiB2YWx1ZXMoKSB7IHJldHVybiBuZXcgQ29uc3RydWN0b3IodGhpcywga2luZCk7IH07XG4gICAgfSByZXR1cm4gZnVuY3Rpb24gZW50cmllcygpIHsgcmV0dXJuIG5ldyBDb25zdHJ1Y3Rvcih0aGlzLCBraW5kKTsgfTtcbiAgfTtcbiAgdmFyIFRBRyA9IE5BTUUgKyAnIEl0ZXJhdG9yJztcbiAgdmFyIERFRl9WQUxVRVMgPSBERUZBVUxUID09IFZBTFVFUztcbiAgdmFyIFZBTFVFU19CVUcgPSBmYWxzZTtcbiAgdmFyIHByb3RvID0gQmFzZS5wcm90b3R5cGU7XG4gIHZhciAkbmF0aXZlID0gcHJvdG9bSVRFUkFUT1JdIHx8IHByb3RvW0ZGX0lURVJBVE9SXSB8fCBERUZBVUxUICYmIHByb3RvW0RFRkFVTFRdO1xuICB2YXIgJGRlZmF1bHQgPSAkbmF0aXZlIHx8IGdldE1ldGhvZChERUZBVUxUKTtcbiAgdmFyICRlbnRyaWVzID0gREVGQVVMVCA/ICFERUZfVkFMVUVTID8gJGRlZmF1bHQgOiBnZXRNZXRob2QoJ2VudHJpZXMnKSA6IHVuZGVmaW5lZDtcbiAgdmFyICRhbnlOYXRpdmUgPSBOQU1FID09ICdBcnJheScgPyBwcm90by5lbnRyaWVzIHx8ICRuYXRpdmUgOiAkbmF0aXZlO1xuICB2YXIgbWV0aG9kcywga2V5LCBJdGVyYXRvclByb3RvdHlwZTtcbiAgLy8gRml4IG5hdGl2ZVxuICBpZiAoJGFueU5hdGl2ZSkge1xuICAgIEl0ZXJhdG9yUHJvdG90eXBlID0gZ2V0UHJvdG90eXBlT2YoJGFueU5hdGl2ZS5jYWxsKG5ldyBCYXNlKCkpKTtcbiAgICBpZiAoSXRlcmF0b3JQcm90b3R5cGUgIT09IE9iamVjdC5wcm90b3R5cGUgJiYgSXRlcmF0b3JQcm90b3R5cGUubmV4dCkge1xuICAgICAgLy8gU2V0IEBAdG9TdHJpbmdUYWcgdG8gbmF0aXZlIGl0ZXJhdG9yc1xuICAgICAgc2V0VG9TdHJpbmdUYWcoSXRlcmF0b3JQcm90b3R5cGUsIFRBRywgdHJ1ZSk7XG4gICAgICAvLyBmaXggZm9yIHNvbWUgb2xkIGVuZ2luZXNcbiAgICAgIGlmICghTElCUkFSWSAmJiB0eXBlb2YgSXRlcmF0b3JQcm90b3R5cGVbSVRFUkFUT1JdICE9ICdmdW5jdGlvbicpIGhpZGUoSXRlcmF0b3JQcm90b3R5cGUsIElURVJBVE9SLCByZXR1cm5UaGlzKTtcbiAgICB9XG4gIH1cbiAgLy8gZml4IEFycmF5I3t2YWx1ZXMsIEBAaXRlcmF0b3J9Lm5hbWUgaW4gVjggLyBGRlxuICBpZiAoREVGX1ZBTFVFUyAmJiAkbmF0aXZlICYmICRuYXRpdmUubmFtZSAhPT0gVkFMVUVTKSB7XG4gICAgVkFMVUVTX0JVRyA9IHRydWU7XG4gICAgJGRlZmF1bHQgPSBmdW5jdGlvbiB2YWx1ZXMoKSB7IHJldHVybiAkbmF0aXZlLmNhbGwodGhpcyk7IH07XG4gIH1cbiAgLy8gRGVmaW5lIGl0ZXJhdG9yXG4gIGlmICgoIUxJQlJBUlkgfHwgRk9SQ0VEKSAmJiAoQlVHR1kgfHwgVkFMVUVTX0JVRyB8fCAhcHJvdG9bSVRFUkFUT1JdKSkge1xuICAgIGhpZGUocHJvdG8sIElURVJBVE9SLCAkZGVmYXVsdCk7XG4gIH1cbiAgLy8gUGx1ZyBmb3IgbGlicmFyeVxuICBJdGVyYXRvcnNbTkFNRV0gPSAkZGVmYXVsdDtcbiAgSXRlcmF0b3JzW1RBR10gPSByZXR1cm5UaGlzO1xuICBpZiAoREVGQVVMVCkge1xuICAgIG1ldGhvZHMgPSB7XG4gICAgICB2YWx1ZXM6IERFRl9WQUxVRVMgPyAkZGVmYXVsdCA6IGdldE1ldGhvZChWQUxVRVMpLFxuICAgICAga2V5czogSVNfU0VUID8gJGRlZmF1bHQgOiBnZXRNZXRob2QoS0VZUyksXG4gICAgICBlbnRyaWVzOiAkZW50cmllc1xuICAgIH07XG4gICAgaWYgKEZPUkNFRCkgZm9yIChrZXkgaW4gbWV0aG9kcykge1xuICAgICAgaWYgKCEoa2V5IGluIHByb3RvKSkgcmVkZWZpbmUocHJvdG8sIGtleSwgbWV0aG9kc1trZXldKTtcbiAgICB9IGVsc2UgJGV4cG9ydCgkZXhwb3J0LlAgKyAkZXhwb3J0LkYgKiAoQlVHR1kgfHwgVkFMVUVTX0JVRyksIE5BTUUsIG1ldGhvZHMpO1xuICB9XG4gIHJldHVybiBtZXRob2RzO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciAkYXQgPSByZXF1aXJlKCcuL19zdHJpbmctYXQnKSh0cnVlKTtcblxuLy8gMjEuMS4zLjI3IFN0cmluZy5wcm90b3R5cGVbQEBpdGVyYXRvcl0oKVxucmVxdWlyZSgnLi9faXRlci1kZWZpbmUnKShTdHJpbmcsICdTdHJpbmcnLCBmdW5jdGlvbiAoaXRlcmF0ZWQpIHtcbiAgdGhpcy5fdCA9IFN0cmluZyhpdGVyYXRlZCk7IC8vIHRhcmdldFxuICB0aGlzLl9pID0gMDsgICAgICAgICAgICAgICAgLy8gbmV4dCBpbmRleFxuLy8gMjEuMS41LjIuMSAlU3RyaW5nSXRlcmF0b3JQcm90b3R5cGUlLm5leHQoKVxufSwgZnVuY3Rpb24gKCkge1xuICB2YXIgTyA9IHRoaXMuX3Q7XG4gIHZhciBpbmRleCA9IHRoaXMuX2k7XG4gIHZhciBwb2ludDtcbiAgaWYgKGluZGV4ID49IE8ubGVuZ3RoKSByZXR1cm4geyB2YWx1ZTogdW5kZWZpbmVkLCBkb25lOiB0cnVlIH07XG4gIHBvaW50ID0gJGF0KE8sIGluZGV4KTtcbiAgdGhpcy5faSArPSBwb2ludC5sZW5ndGg7XG4gIHJldHVybiB7IHZhbHVlOiBwb2ludCwgZG9uZTogZmFsc2UgfTtcbn0pO1xuIiwibW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoZG9uZSwgdmFsdWUpIHtcbiAgcmV0dXJuIHsgdmFsdWU6IHZhbHVlLCBkb25lOiAhIWRvbmUgfTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG52YXIgYWRkVG9VbnNjb3BhYmxlcyA9IHJlcXVpcmUoJy4vX2FkZC10by11bnNjb3BhYmxlcycpO1xudmFyIHN0ZXAgPSByZXF1aXJlKCcuL19pdGVyLXN0ZXAnKTtcbnZhciBJdGVyYXRvcnMgPSByZXF1aXJlKCcuL19pdGVyYXRvcnMnKTtcbnZhciB0b0lPYmplY3QgPSByZXF1aXJlKCcuL190by1pb2JqZWN0Jyk7XG5cbi8vIDIyLjEuMy40IEFycmF5LnByb3RvdHlwZS5lbnRyaWVzKClcbi8vIDIyLjEuMy4xMyBBcnJheS5wcm90b3R5cGUua2V5cygpXG4vLyAyMi4xLjMuMjkgQXJyYXkucHJvdG90eXBlLnZhbHVlcygpXG4vLyAyMi4xLjMuMzAgQXJyYXkucHJvdG90eXBlW0BAaXRlcmF0b3JdKClcbm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9faXRlci1kZWZpbmUnKShBcnJheSwgJ0FycmF5JywgZnVuY3Rpb24gKGl0ZXJhdGVkLCBraW5kKSB7XG4gIHRoaXMuX3QgPSB0b0lPYmplY3QoaXRlcmF0ZWQpOyAvLyB0YXJnZXRcbiAgdGhpcy5faSA9IDA7ICAgICAgICAgICAgICAgICAgIC8vIG5leHQgaW5kZXhcbiAgdGhpcy5fayA9IGtpbmQ7ICAgICAgICAgICAgICAgIC8vIGtpbmRcbi8vIDIyLjEuNS4yLjEgJUFycmF5SXRlcmF0b3JQcm90b3R5cGUlLm5leHQoKVxufSwgZnVuY3Rpb24gKCkge1xuICB2YXIgTyA9IHRoaXMuX3Q7XG4gIHZhciBraW5kID0gdGhpcy5faztcbiAgdmFyIGluZGV4ID0gdGhpcy5faSsrO1xuICBpZiAoIU8gfHwgaW5kZXggPj0gTy5sZW5ndGgpIHtcbiAgICB0aGlzLl90ID0gdW5kZWZpbmVkO1xuICAgIHJldHVybiBzdGVwKDEpO1xuICB9XG4gIGlmIChraW5kID09ICdrZXlzJykgcmV0dXJuIHN0ZXAoMCwgaW5kZXgpO1xuICBpZiAoa2luZCA9PSAndmFsdWVzJykgcmV0dXJuIHN0ZXAoMCwgT1tpbmRleF0pO1xuICByZXR1cm4gc3RlcCgwLCBbaW5kZXgsIE9baW5kZXhdXSk7XG59LCAndmFsdWVzJyk7XG5cbi8vIGFyZ3VtZW50c0xpc3RbQEBpdGVyYXRvcl0gaXMgJUFycmF5UHJvdG9fdmFsdWVzJSAoOS40LjQuNiwgOS40LjQuNylcbkl0ZXJhdG9ycy5Bcmd1bWVudHMgPSBJdGVyYXRvcnMuQXJyYXk7XG5cbmFkZFRvVW5zY29wYWJsZXMoJ2tleXMnKTtcbmFkZFRvVW5zY29wYWJsZXMoJ3ZhbHVlcycpO1xuYWRkVG9VbnNjb3BhYmxlcygnZW50cmllcycpO1xuIiwicmVxdWlyZSgnLi9lczYuYXJyYXkuaXRlcmF0b3InKTtcbnZhciBnbG9iYWwgPSByZXF1aXJlKCcuL19nbG9iYWwnKTtcbnZhciBoaWRlID0gcmVxdWlyZSgnLi9faGlkZScpO1xudmFyIEl0ZXJhdG9ycyA9IHJlcXVpcmUoJy4vX2l0ZXJhdG9ycycpO1xudmFyIFRPX1NUUklOR19UQUcgPSByZXF1aXJlKCcuL193a3MnKSgndG9TdHJpbmdUYWcnKTtcblxudmFyIERPTUl0ZXJhYmxlcyA9ICgnQ1NTUnVsZUxpc3QsQ1NTU3R5bGVEZWNsYXJhdGlvbixDU1NWYWx1ZUxpc3QsQ2xpZW50UmVjdExpc3QsRE9NUmVjdExpc3QsRE9NU3RyaW5nTGlzdCwnICtcbiAgJ0RPTVRva2VuTGlzdCxEYXRhVHJhbnNmZXJJdGVtTGlzdCxGaWxlTGlzdCxIVE1MQWxsQ29sbGVjdGlvbixIVE1MQ29sbGVjdGlvbixIVE1MRm9ybUVsZW1lbnQsSFRNTFNlbGVjdEVsZW1lbnQsJyArXG4gICdNZWRpYUxpc3QsTWltZVR5cGVBcnJheSxOYW1lZE5vZGVNYXAsTm9kZUxpc3QsUGFpbnRSZXF1ZXN0TGlzdCxQbHVnaW4sUGx1Z2luQXJyYXksU1ZHTGVuZ3RoTGlzdCxTVkdOdW1iZXJMaXN0LCcgK1xuICAnU1ZHUGF0aFNlZ0xpc3QsU1ZHUG9pbnRMaXN0LFNWR1N0cmluZ0xpc3QsU1ZHVHJhbnNmb3JtTGlzdCxTb3VyY2VCdWZmZXJMaXN0LFN0eWxlU2hlZXRMaXN0LFRleHRUcmFja0N1ZUxpc3QsJyArXG4gICdUZXh0VHJhY2tMaXN0LFRvdWNoTGlzdCcpLnNwbGl0KCcsJyk7XG5cbmZvciAodmFyIGkgPSAwOyBpIDwgRE9NSXRlcmFibGVzLmxlbmd0aDsgaSsrKSB7XG4gIHZhciBOQU1FID0gRE9NSXRlcmFibGVzW2ldO1xuICB2YXIgQ29sbGVjdGlvbiA9IGdsb2JhbFtOQU1FXTtcbiAgdmFyIHByb3RvID0gQ29sbGVjdGlvbiAmJiBDb2xsZWN0aW9uLnByb3RvdHlwZTtcbiAgaWYgKHByb3RvICYmICFwcm90b1tUT19TVFJJTkdfVEFHXSkgaGlkZShwcm90bywgVE9fU1RSSU5HX1RBRywgTkFNRSk7XG4gIEl0ZXJhdG9yc1tOQU1FXSA9IEl0ZXJhdG9ycy5BcnJheTtcbn1cbiIsImV4cG9ydHMuZiA9IHJlcXVpcmUoJy4vX3drcycpO1xuIiwicmVxdWlyZSgnLi4vLi4vbW9kdWxlcy9lczYuc3RyaW5nLml0ZXJhdG9yJyk7XG5yZXF1aXJlKCcuLi8uLi9tb2R1bGVzL3dlYi5kb20uaXRlcmFibGUnKTtcbm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi4vLi4vbW9kdWxlcy9fd2tzLWV4dCcpLmYoJ2l0ZXJhdG9yJyk7XG4iLCJtb2R1bGUuZXhwb3J0cyA9IHsgXCJkZWZhdWx0XCI6IHJlcXVpcmUoXCJjb3JlLWpzL2xpYnJhcnkvZm4vc3ltYm9sL2l0ZXJhdG9yXCIpLCBfX2VzTW9kdWxlOiB0cnVlIH07IiwidmFyIE1FVEEgPSByZXF1aXJlKCcuL191aWQnKSgnbWV0YScpO1xudmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi9faXMtb2JqZWN0Jyk7XG52YXIgaGFzID0gcmVxdWlyZSgnLi9faGFzJyk7XG52YXIgc2V0RGVzYyA9IHJlcXVpcmUoJy4vX29iamVjdC1kcCcpLmY7XG52YXIgaWQgPSAwO1xudmFyIGlzRXh0ZW5zaWJsZSA9IE9iamVjdC5pc0V4dGVuc2libGUgfHwgZnVuY3Rpb24gKCkge1xuICByZXR1cm4gdHJ1ZTtcbn07XG52YXIgRlJFRVpFID0gIXJlcXVpcmUoJy4vX2ZhaWxzJykoZnVuY3Rpb24gKCkge1xuICByZXR1cm4gaXNFeHRlbnNpYmxlKE9iamVjdC5wcmV2ZW50RXh0ZW5zaW9ucyh7fSkpO1xufSk7XG52YXIgc2V0TWV0YSA9IGZ1bmN0aW9uIChpdCkge1xuICBzZXREZXNjKGl0LCBNRVRBLCB7IHZhbHVlOiB7XG4gICAgaTogJ08nICsgKytpZCwgLy8gb2JqZWN0IElEXG4gICAgdzoge30gICAgICAgICAgLy8gd2VhayBjb2xsZWN0aW9ucyBJRHNcbiAgfSB9KTtcbn07XG52YXIgZmFzdEtleSA9IGZ1bmN0aW9uIChpdCwgY3JlYXRlKSB7XG4gIC8vIHJldHVybiBwcmltaXRpdmUgd2l0aCBwcmVmaXhcbiAgaWYgKCFpc09iamVjdChpdCkpIHJldHVybiB0eXBlb2YgaXQgPT0gJ3N5bWJvbCcgPyBpdCA6ICh0eXBlb2YgaXQgPT0gJ3N0cmluZycgPyAnUycgOiAnUCcpICsgaXQ7XG4gIGlmICghaGFzKGl0LCBNRVRBKSkge1xuICAgIC8vIGNhbid0IHNldCBtZXRhZGF0YSB0byB1bmNhdWdodCBmcm96ZW4gb2JqZWN0XG4gICAgaWYgKCFpc0V4dGVuc2libGUoaXQpKSByZXR1cm4gJ0YnO1xuICAgIC8vIG5vdCBuZWNlc3NhcnkgdG8gYWRkIG1ldGFkYXRhXG4gICAgaWYgKCFjcmVhdGUpIHJldHVybiAnRSc7XG4gICAgLy8gYWRkIG1pc3NpbmcgbWV0YWRhdGFcbiAgICBzZXRNZXRhKGl0KTtcbiAgLy8gcmV0dXJuIG9iamVjdCBJRFxuICB9IHJldHVybiBpdFtNRVRBXS5pO1xufTtcbnZhciBnZXRXZWFrID0gZnVuY3Rpb24gKGl0LCBjcmVhdGUpIHtcbiAgaWYgKCFoYXMoaXQsIE1FVEEpKSB7XG4gICAgLy8gY2FuJ3Qgc2V0IG1ldGFkYXRhIHRvIHVuY2F1Z2h0IGZyb3plbiBvYmplY3RcbiAgICBpZiAoIWlzRXh0ZW5zaWJsZShpdCkpIHJldHVybiB0cnVlO1xuICAgIC8vIG5vdCBuZWNlc3NhcnkgdG8gYWRkIG1ldGFkYXRhXG4gICAgaWYgKCFjcmVhdGUpIHJldHVybiBmYWxzZTtcbiAgICAvLyBhZGQgbWlzc2luZyBtZXRhZGF0YVxuICAgIHNldE1ldGEoaXQpO1xuICAvLyByZXR1cm4gaGFzaCB3ZWFrIGNvbGxlY3Rpb25zIElEc1xuICB9IHJldHVybiBpdFtNRVRBXS53O1xufTtcbi8vIGFkZCBtZXRhZGF0YSBvbiBmcmVlemUtZmFtaWx5IG1ldGhvZHMgY2FsbGluZ1xudmFyIG9uRnJlZXplID0gZnVuY3Rpb24gKGl0KSB7XG4gIGlmIChGUkVFWkUgJiYgbWV0YS5ORUVEICYmIGlzRXh0ZW5zaWJsZShpdCkgJiYgIWhhcyhpdCwgTUVUQSkpIHNldE1ldGEoaXQpO1xuICByZXR1cm4gaXQ7XG59O1xudmFyIG1ldGEgPSBtb2R1bGUuZXhwb3J0cyA9IHtcbiAgS0VZOiBNRVRBLFxuICBORUVEOiBmYWxzZSxcbiAgZmFzdEtleTogZmFzdEtleSxcbiAgZ2V0V2VhazogZ2V0V2VhayxcbiAgb25GcmVlemU6IG9uRnJlZXplXG59O1xuIiwidmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4vX2dsb2JhbCcpO1xudmFyIGNvcmUgPSByZXF1aXJlKCcuL19jb3JlJyk7XG52YXIgTElCUkFSWSA9IHJlcXVpcmUoJy4vX2xpYnJhcnknKTtcbnZhciB3a3NFeHQgPSByZXF1aXJlKCcuL193a3MtZXh0Jyk7XG52YXIgZGVmaW5lUHJvcGVydHkgPSByZXF1aXJlKCcuL19vYmplY3QtZHAnKS5mO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAobmFtZSkge1xuICB2YXIgJFN5bWJvbCA9IGNvcmUuU3ltYm9sIHx8IChjb3JlLlN5bWJvbCA9IExJQlJBUlkgPyB7fSA6IGdsb2JhbC5TeW1ib2wgfHwge30pO1xuICBpZiAobmFtZS5jaGFyQXQoMCkgIT0gJ18nICYmICEobmFtZSBpbiAkU3ltYm9sKSkgZGVmaW5lUHJvcGVydHkoJFN5bWJvbCwgbmFtZSwgeyB2YWx1ZTogd2tzRXh0LmYobmFtZSkgfSk7XG59O1xuIiwiZXhwb3J0cy5mID0gT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scztcbiIsImV4cG9ydHMuZiA9IHt9LnByb3BlcnR5SXNFbnVtZXJhYmxlO1xuIiwiLy8gYWxsIGVudW1lcmFibGUgb2JqZWN0IGtleXMsIGluY2x1ZGVzIHN5bWJvbHNcbnZhciBnZXRLZXlzID0gcmVxdWlyZSgnLi9fb2JqZWN0LWtleXMnKTtcbnZhciBnT1BTID0gcmVxdWlyZSgnLi9fb2JqZWN0LWdvcHMnKTtcbnZhciBwSUUgPSByZXF1aXJlKCcuL19vYmplY3QtcGllJyk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCkge1xuICB2YXIgcmVzdWx0ID0gZ2V0S2V5cyhpdCk7XG4gIHZhciBnZXRTeW1ib2xzID0gZ09QUy5mO1xuICBpZiAoZ2V0U3ltYm9scykge1xuICAgIHZhciBzeW1ib2xzID0gZ2V0U3ltYm9scyhpdCk7XG4gICAgdmFyIGlzRW51bSA9IHBJRS5mO1xuICAgIHZhciBpID0gMDtcbiAgICB2YXIga2V5O1xuICAgIHdoaWxlIChzeW1ib2xzLmxlbmd0aCA+IGkpIGlmIChpc0VudW0uY2FsbChpdCwga2V5ID0gc3ltYm9sc1tpKytdKSkgcmVzdWx0LnB1c2goa2V5KTtcbiAgfSByZXR1cm4gcmVzdWx0O1xufTtcbiIsIi8vIDcuMi4yIElzQXJyYXkoYXJndW1lbnQpXG52YXIgY29mID0gcmVxdWlyZSgnLi9fY29mJyk7XG5tb2R1bGUuZXhwb3J0cyA9IEFycmF5LmlzQXJyYXkgfHwgZnVuY3Rpb24gaXNBcnJheShhcmcpIHtcbiAgcmV0dXJuIGNvZihhcmcpID09ICdBcnJheSc7XG59O1xuIiwiLy8gMTkuMS4yLjcgLyAxNS4yLjMuNCBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyhPKVxudmFyICRrZXlzID0gcmVxdWlyZSgnLi9fb2JqZWN0LWtleXMtaW50ZXJuYWwnKTtcbnZhciBoaWRkZW5LZXlzID0gcmVxdWlyZSgnLi9fZW51bS1idWcta2V5cycpLmNvbmNhdCgnbGVuZ3RoJywgJ3Byb3RvdHlwZScpO1xuXG5leHBvcnRzLmYgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyB8fCBmdW5jdGlvbiBnZXRPd25Qcm9wZXJ0eU5hbWVzKE8pIHtcbiAgcmV0dXJuICRrZXlzKE8sIGhpZGRlbktleXMpO1xufTtcbiIsIi8vIGZhbGxiYWNrIGZvciBJRTExIGJ1Z2d5IE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzIHdpdGggaWZyYW1lIGFuZCB3aW5kb3dcbnZhciB0b0lPYmplY3QgPSByZXF1aXJlKCcuL190by1pb2JqZWN0Jyk7XG52YXIgZ09QTiA9IHJlcXVpcmUoJy4vX29iamVjdC1nb3BuJykuZjtcbnZhciB0b1N0cmluZyA9IHt9LnRvU3RyaW5nO1xuXG52YXIgd2luZG93TmFtZXMgPSB0eXBlb2Ygd2luZG93ID09ICdvYmplY3QnICYmIHdpbmRvdyAmJiBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lc1xuICA/IE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKHdpbmRvdykgOiBbXTtcblxudmFyIGdldFdpbmRvd05hbWVzID0gZnVuY3Rpb24gKGl0KSB7XG4gIHRyeSB7XG4gICAgcmV0dXJuIGdPUE4oaXQpO1xuICB9IGNhdGNoIChlKSB7XG4gICAgcmV0dXJuIHdpbmRvd05hbWVzLnNsaWNlKCk7XG4gIH1cbn07XG5cbm1vZHVsZS5leHBvcnRzLmYgPSBmdW5jdGlvbiBnZXRPd25Qcm9wZXJ0eU5hbWVzKGl0KSB7XG4gIHJldHVybiB3aW5kb3dOYW1lcyAmJiB0b1N0cmluZy5jYWxsKGl0KSA9PSAnW29iamVjdCBXaW5kb3ddJyA/IGdldFdpbmRvd05hbWVzKGl0KSA6IGdPUE4odG9JT2JqZWN0KGl0KSk7XG59O1xuIiwidmFyIHBJRSA9IHJlcXVpcmUoJy4vX29iamVjdC1waWUnKTtcbnZhciBjcmVhdGVEZXNjID0gcmVxdWlyZSgnLi9fcHJvcGVydHktZGVzYycpO1xudmFyIHRvSU9iamVjdCA9IHJlcXVpcmUoJy4vX3RvLWlvYmplY3QnKTtcbnZhciB0b1ByaW1pdGl2ZSA9IHJlcXVpcmUoJy4vX3RvLXByaW1pdGl2ZScpO1xudmFyIGhhcyA9IHJlcXVpcmUoJy4vX2hhcycpO1xudmFyIElFOF9ET01fREVGSU5FID0gcmVxdWlyZSgnLi9faWU4LWRvbS1kZWZpbmUnKTtcbnZhciBnT1BEID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcjtcblxuZXhwb3J0cy5mID0gcmVxdWlyZSgnLi9fZGVzY3JpcHRvcnMnKSA/IGdPUEQgOiBmdW5jdGlvbiBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoTywgUCkge1xuICBPID0gdG9JT2JqZWN0KE8pO1xuICBQID0gdG9QcmltaXRpdmUoUCwgdHJ1ZSk7XG4gIGlmIChJRThfRE9NX0RFRklORSkgdHJ5IHtcbiAgICByZXR1cm4gZ09QRChPLCBQKTtcbiAgfSBjYXRjaCAoZSkgeyAvKiBlbXB0eSAqLyB9XG4gIGlmIChoYXMoTywgUCkpIHJldHVybiBjcmVhdGVEZXNjKCFwSUUuZi5jYWxsKE8sIFApLCBPW1BdKTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG4vLyBFQ01BU2NyaXB0IDYgc3ltYm9scyBzaGltXG52YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi9fZ2xvYmFsJyk7XG52YXIgaGFzID0gcmVxdWlyZSgnLi9faGFzJyk7XG52YXIgREVTQ1JJUFRPUlMgPSByZXF1aXJlKCcuL19kZXNjcmlwdG9ycycpO1xudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciByZWRlZmluZSA9IHJlcXVpcmUoJy4vX3JlZGVmaW5lJyk7XG52YXIgTUVUQSA9IHJlcXVpcmUoJy4vX21ldGEnKS5LRVk7XG52YXIgJGZhaWxzID0gcmVxdWlyZSgnLi9fZmFpbHMnKTtcbnZhciBzaGFyZWQgPSByZXF1aXJlKCcuL19zaGFyZWQnKTtcbnZhciBzZXRUb1N0cmluZ1RhZyA9IHJlcXVpcmUoJy4vX3NldC10by1zdHJpbmctdGFnJyk7XG52YXIgdWlkID0gcmVxdWlyZSgnLi9fdWlkJyk7XG52YXIgd2tzID0gcmVxdWlyZSgnLi9fd2tzJyk7XG52YXIgd2tzRXh0ID0gcmVxdWlyZSgnLi9fd2tzLWV4dCcpO1xudmFyIHdrc0RlZmluZSA9IHJlcXVpcmUoJy4vX3drcy1kZWZpbmUnKTtcbnZhciBlbnVtS2V5cyA9IHJlcXVpcmUoJy4vX2VudW0ta2V5cycpO1xudmFyIGlzQXJyYXkgPSByZXF1aXJlKCcuL19pcy1hcnJheScpO1xudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi9fYW4tb2JqZWN0Jyk7XG52YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuL19pcy1vYmplY3QnKTtcbnZhciB0b09iamVjdCA9IHJlcXVpcmUoJy4vX3RvLW9iamVjdCcpO1xudmFyIHRvSU9iamVjdCA9IHJlcXVpcmUoJy4vX3RvLWlvYmplY3QnKTtcbnZhciB0b1ByaW1pdGl2ZSA9IHJlcXVpcmUoJy4vX3RvLXByaW1pdGl2ZScpO1xudmFyIGNyZWF0ZURlc2MgPSByZXF1aXJlKCcuL19wcm9wZXJ0eS1kZXNjJyk7XG52YXIgX2NyZWF0ZSA9IHJlcXVpcmUoJy4vX29iamVjdC1jcmVhdGUnKTtcbnZhciBnT1BORXh0ID0gcmVxdWlyZSgnLi9fb2JqZWN0LWdvcG4tZXh0Jyk7XG52YXIgJEdPUEQgPSByZXF1aXJlKCcuL19vYmplY3QtZ29wZCcpO1xudmFyICRHT1BTID0gcmVxdWlyZSgnLi9fb2JqZWN0LWdvcHMnKTtcbnZhciAkRFAgPSByZXF1aXJlKCcuL19vYmplY3QtZHAnKTtcbnZhciAka2V5cyA9IHJlcXVpcmUoJy4vX29iamVjdC1rZXlzJyk7XG52YXIgZ09QRCA9ICRHT1BELmY7XG52YXIgZFAgPSAkRFAuZjtcbnZhciBnT1BOID0gZ09QTkV4dC5mO1xudmFyICRTeW1ib2wgPSBnbG9iYWwuU3ltYm9sO1xudmFyICRKU09OID0gZ2xvYmFsLkpTT047XG52YXIgX3N0cmluZ2lmeSA9ICRKU09OICYmICRKU09OLnN0cmluZ2lmeTtcbnZhciBQUk9UT1RZUEUgPSAncHJvdG90eXBlJztcbnZhciBISURERU4gPSB3a3MoJ19oaWRkZW4nKTtcbnZhciBUT19QUklNSVRJVkUgPSB3a3MoJ3RvUHJpbWl0aXZlJyk7XG52YXIgaXNFbnVtID0ge30ucHJvcGVydHlJc0VudW1lcmFibGU7XG52YXIgU3ltYm9sUmVnaXN0cnkgPSBzaGFyZWQoJ3N5bWJvbC1yZWdpc3RyeScpO1xudmFyIEFsbFN5bWJvbHMgPSBzaGFyZWQoJ3N5bWJvbHMnKTtcbnZhciBPUFN5bWJvbHMgPSBzaGFyZWQoJ29wLXN5bWJvbHMnKTtcbnZhciBPYmplY3RQcm90byA9IE9iamVjdFtQUk9UT1RZUEVdO1xudmFyIFVTRV9OQVRJVkUgPSB0eXBlb2YgJFN5bWJvbCA9PSAnZnVuY3Rpb24nICYmICEhJEdPUFMuZjtcbnZhciBRT2JqZWN0ID0gZ2xvYmFsLlFPYmplY3Q7XG4vLyBEb24ndCB1c2Ugc2V0dGVycyBpbiBRdCBTY3JpcHQsIGh0dHBzOi8vZ2l0aHViLmNvbS96bG9pcm9jay9jb3JlLWpzL2lzc3Vlcy8xNzNcbnZhciBzZXR0ZXIgPSAhUU9iamVjdCB8fCAhUU9iamVjdFtQUk9UT1RZUEVdIHx8ICFRT2JqZWN0W1BST1RPVFlQRV0uZmluZENoaWxkO1xuXG4vLyBmYWxsYmFjayBmb3Igb2xkIEFuZHJvaWQsIGh0dHBzOi8vY29kZS5nb29nbGUuY29tL3AvdjgvaXNzdWVzL2RldGFpbD9pZD02ODdcbnZhciBzZXRTeW1ib2xEZXNjID0gREVTQ1JJUFRPUlMgJiYgJGZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuIF9jcmVhdGUoZFAoe30sICdhJywge1xuICAgIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gZFAodGhpcywgJ2EnLCB7IHZhbHVlOiA3IH0pLmE7IH1cbiAgfSkpLmEgIT0gNztcbn0pID8gZnVuY3Rpb24gKGl0LCBrZXksIEQpIHtcbiAgdmFyIHByb3RvRGVzYyA9IGdPUEQoT2JqZWN0UHJvdG8sIGtleSk7XG4gIGlmIChwcm90b0Rlc2MpIGRlbGV0ZSBPYmplY3RQcm90b1trZXldO1xuICBkUChpdCwga2V5LCBEKTtcbiAgaWYgKHByb3RvRGVzYyAmJiBpdCAhPT0gT2JqZWN0UHJvdG8pIGRQKE9iamVjdFByb3RvLCBrZXksIHByb3RvRGVzYyk7XG59IDogZFA7XG5cbnZhciB3cmFwID0gZnVuY3Rpb24gKHRhZykge1xuICB2YXIgc3ltID0gQWxsU3ltYm9sc1t0YWddID0gX2NyZWF0ZSgkU3ltYm9sW1BST1RPVFlQRV0pO1xuICBzeW0uX2sgPSB0YWc7XG4gIHJldHVybiBzeW07XG59O1xuXG52YXIgaXNTeW1ib2wgPSBVU0VfTkFUSVZFICYmIHR5cGVvZiAkU3ltYm9sLml0ZXJhdG9yID09ICdzeW1ib2wnID8gZnVuY3Rpb24gKGl0KSB7XG4gIHJldHVybiB0eXBlb2YgaXQgPT0gJ3N5bWJvbCc7XG59IDogZnVuY3Rpb24gKGl0KSB7XG4gIHJldHVybiBpdCBpbnN0YW5jZW9mICRTeW1ib2w7XG59O1xuXG52YXIgJGRlZmluZVByb3BlcnR5ID0gZnVuY3Rpb24gZGVmaW5lUHJvcGVydHkoaXQsIGtleSwgRCkge1xuICBpZiAoaXQgPT09IE9iamVjdFByb3RvKSAkZGVmaW5lUHJvcGVydHkoT1BTeW1ib2xzLCBrZXksIEQpO1xuICBhbk9iamVjdChpdCk7XG4gIGtleSA9IHRvUHJpbWl0aXZlKGtleSwgdHJ1ZSk7XG4gIGFuT2JqZWN0KEQpO1xuICBpZiAoaGFzKEFsbFN5bWJvbHMsIGtleSkpIHtcbiAgICBpZiAoIUQuZW51bWVyYWJsZSkge1xuICAgICAgaWYgKCFoYXMoaXQsIEhJRERFTikpIGRQKGl0LCBISURERU4sIGNyZWF0ZURlc2MoMSwge30pKTtcbiAgICAgIGl0W0hJRERFTl1ba2V5XSA9IHRydWU7XG4gICAgfSBlbHNlIHtcbiAgICAgIGlmIChoYXMoaXQsIEhJRERFTikgJiYgaXRbSElEREVOXVtrZXldKSBpdFtISURERU5dW2tleV0gPSBmYWxzZTtcbiAgICAgIEQgPSBfY3JlYXRlKEQsIHsgZW51bWVyYWJsZTogY3JlYXRlRGVzYygwLCBmYWxzZSkgfSk7XG4gICAgfSByZXR1cm4gc2V0U3ltYm9sRGVzYyhpdCwga2V5LCBEKTtcbiAgfSByZXR1cm4gZFAoaXQsIGtleSwgRCk7XG59O1xudmFyICRkZWZpbmVQcm9wZXJ0aWVzID0gZnVuY3Rpb24gZGVmaW5lUHJvcGVydGllcyhpdCwgUCkge1xuICBhbk9iamVjdChpdCk7XG4gIHZhciBrZXlzID0gZW51bUtleXMoUCA9IHRvSU9iamVjdChQKSk7XG4gIHZhciBpID0gMDtcbiAgdmFyIGwgPSBrZXlzLmxlbmd0aDtcbiAgdmFyIGtleTtcbiAgd2hpbGUgKGwgPiBpKSAkZGVmaW5lUHJvcGVydHkoaXQsIGtleSA9IGtleXNbaSsrXSwgUFtrZXldKTtcbiAgcmV0dXJuIGl0O1xufTtcbnZhciAkY3JlYXRlID0gZnVuY3Rpb24gY3JlYXRlKGl0LCBQKSB7XG4gIHJldHVybiBQID09PSB1bmRlZmluZWQgPyBfY3JlYXRlKGl0KSA6ICRkZWZpbmVQcm9wZXJ0aWVzKF9jcmVhdGUoaXQpLCBQKTtcbn07XG52YXIgJHByb3BlcnR5SXNFbnVtZXJhYmxlID0gZnVuY3Rpb24gcHJvcGVydHlJc0VudW1lcmFibGUoa2V5KSB7XG4gIHZhciBFID0gaXNFbnVtLmNhbGwodGhpcywga2V5ID0gdG9QcmltaXRpdmUoa2V5LCB0cnVlKSk7XG4gIGlmICh0aGlzID09PSBPYmplY3RQcm90byAmJiBoYXMoQWxsU3ltYm9scywga2V5KSAmJiAhaGFzKE9QU3ltYm9scywga2V5KSkgcmV0dXJuIGZhbHNlO1xuICByZXR1cm4gRSB8fCAhaGFzKHRoaXMsIGtleSkgfHwgIWhhcyhBbGxTeW1ib2xzLCBrZXkpIHx8IGhhcyh0aGlzLCBISURERU4pICYmIHRoaXNbSElEREVOXVtrZXldID8gRSA6IHRydWU7XG59O1xudmFyICRnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IgPSBmdW5jdGlvbiBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoaXQsIGtleSkge1xuICBpdCA9IHRvSU9iamVjdChpdCk7XG4gIGtleSA9IHRvUHJpbWl0aXZlKGtleSwgdHJ1ZSk7XG4gIGlmIChpdCA9PT0gT2JqZWN0UHJvdG8gJiYgaGFzKEFsbFN5bWJvbHMsIGtleSkgJiYgIWhhcyhPUFN5bWJvbHMsIGtleSkpIHJldHVybjtcbiAgdmFyIEQgPSBnT1BEKGl0LCBrZXkpO1xuICBpZiAoRCAmJiBoYXMoQWxsU3ltYm9scywga2V5KSAmJiAhKGhhcyhpdCwgSElEREVOKSAmJiBpdFtISURERU5dW2tleV0pKSBELmVudW1lcmFibGUgPSB0cnVlO1xuICByZXR1cm4gRDtcbn07XG52YXIgJGdldE93blByb3BlcnR5TmFtZXMgPSBmdW5jdGlvbiBnZXRPd25Qcm9wZXJ0eU5hbWVzKGl0KSB7XG4gIHZhciBuYW1lcyA9IGdPUE4odG9JT2JqZWN0KGl0KSk7XG4gIHZhciByZXN1bHQgPSBbXTtcbiAgdmFyIGkgPSAwO1xuICB2YXIga2V5O1xuICB3aGlsZSAobmFtZXMubGVuZ3RoID4gaSkge1xuICAgIGlmICghaGFzKEFsbFN5bWJvbHMsIGtleSA9IG5hbWVzW2krK10pICYmIGtleSAhPSBISURERU4gJiYga2V5ICE9IE1FVEEpIHJlc3VsdC5wdXNoKGtleSk7XG4gIH0gcmV0dXJuIHJlc3VsdDtcbn07XG52YXIgJGdldE93blByb3BlcnR5U3ltYm9scyA9IGZ1bmN0aW9uIGdldE93blByb3BlcnR5U3ltYm9scyhpdCkge1xuICB2YXIgSVNfT1AgPSBpdCA9PT0gT2JqZWN0UHJvdG87XG4gIHZhciBuYW1lcyA9IGdPUE4oSVNfT1AgPyBPUFN5bWJvbHMgOiB0b0lPYmplY3QoaXQpKTtcbiAgdmFyIHJlc3VsdCA9IFtdO1xuICB2YXIgaSA9IDA7XG4gIHZhciBrZXk7XG4gIHdoaWxlIChuYW1lcy5sZW5ndGggPiBpKSB7XG4gICAgaWYgKGhhcyhBbGxTeW1ib2xzLCBrZXkgPSBuYW1lc1tpKytdKSAmJiAoSVNfT1AgPyBoYXMoT2JqZWN0UHJvdG8sIGtleSkgOiB0cnVlKSkgcmVzdWx0LnB1c2goQWxsU3ltYm9sc1trZXldKTtcbiAgfSByZXR1cm4gcmVzdWx0O1xufTtcblxuLy8gMTkuNC4xLjEgU3ltYm9sKFtkZXNjcmlwdGlvbl0pXG5pZiAoIVVTRV9OQVRJVkUpIHtcbiAgJFN5bWJvbCA9IGZ1bmN0aW9uIFN5bWJvbCgpIHtcbiAgICBpZiAodGhpcyBpbnN0YW5jZW9mICRTeW1ib2wpIHRocm93IFR5cGVFcnJvcignU3ltYm9sIGlzIG5vdCBhIGNvbnN0cnVjdG9yIScpO1xuICAgIHZhciB0YWcgPSB1aWQoYXJndW1lbnRzLmxlbmd0aCA+IDAgPyBhcmd1bWVudHNbMF0gOiB1bmRlZmluZWQpO1xuICAgIHZhciAkc2V0ID0gZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICBpZiAodGhpcyA9PT0gT2JqZWN0UHJvdG8pICRzZXQuY2FsbChPUFN5bWJvbHMsIHZhbHVlKTtcbiAgICAgIGlmIChoYXModGhpcywgSElEREVOKSAmJiBoYXModGhpc1tISURERU5dLCB0YWcpKSB0aGlzW0hJRERFTl1bdGFnXSA9IGZhbHNlO1xuICAgICAgc2V0U3ltYm9sRGVzYyh0aGlzLCB0YWcsIGNyZWF0ZURlc2MoMSwgdmFsdWUpKTtcbiAgICB9O1xuICAgIGlmIChERVNDUklQVE9SUyAmJiBzZXR0ZXIpIHNldFN5bWJvbERlc2MoT2JqZWN0UHJvdG8sIHRhZywgeyBjb25maWd1cmFibGU6IHRydWUsIHNldDogJHNldCB9KTtcbiAgICByZXR1cm4gd3JhcCh0YWcpO1xuICB9O1xuICByZWRlZmluZSgkU3ltYm9sW1BST1RPVFlQRV0sICd0b1N0cmluZycsIGZ1bmN0aW9uIHRvU3RyaW5nKCkge1xuICAgIHJldHVybiB0aGlzLl9rO1xuICB9KTtcblxuICAkR09QRC5mID0gJGdldE93blByb3BlcnR5RGVzY3JpcHRvcjtcbiAgJERQLmYgPSAkZGVmaW5lUHJvcGVydHk7XG4gIHJlcXVpcmUoJy4vX29iamVjdC1nb3BuJykuZiA9IGdPUE5FeHQuZiA9ICRnZXRPd25Qcm9wZXJ0eU5hbWVzO1xuICByZXF1aXJlKCcuL19vYmplY3QtcGllJykuZiA9ICRwcm9wZXJ0eUlzRW51bWVyYWJsZTtcbiAgJEdPUFMuZiA9ICRnZXRPd25Qcm9wZXJ0eVN5bWJvbHM7XG5cbiAgaWYgKERFU0NSSVBUT1JTICYmICFyZXF1aXJlKCcuL19saWJyYXJ5JykpIHtcbiAgICByZWRlZmluZShPYmplY3RQcm90bywgJ3Byb3BlcnR5SXNFbnVtZXJhYmxlJywgJHByb3BlcnR5SXNFbnVtZXJhYmxlLCB0cnVlKTtcbiAgfVxuXG4gIHdrc0V4dC5mID0gZnVuY3Rpb24gKG5hbWUpIHtcbiAgICByZXR1cm4gd3JhcCh3a3MobmFtZSkpO1xuICB9O1xufVxuXG4kZXhwb3J0KCRleHBvcnQuRyArICRleHBvcnQuVyArICRleHBvcnQuRiAqICFVU0VfTkFUSVZFLCB7IFN5bWJvbDogJFN5bWJvbCB9KTtcblxuZm9yICh2YXIgZXM2U3ltYm9scyA9IChcbiAgLy8gMTkuNC4yLjIsIDE5LjQuMi4zLCAxOS40LjIuNCwgMTkuNC4yLjYsIDE5LjQuMi44LCAxOS40LjIuOSwgMTkuNC4yLjEwLCAxOS40LjIuMTEsIDE5LjQuMi4xMiwgMTkuNC4yLjEzLCAxOS40LjIuMTRcbiAgJ2hhc0luc3RhbmNlLGlzQ29uY2F0U3ByZWFkYWJsZSxpdGVyYXRvcixtYXRjaCxyZXBsYWNlLHNlYXJjaCxzcGVjaWVzLHNwbGl0LHRvUHJpbWl0aXZlLHRvU3RyaW5nVGFnLHVuc2NvcGFibGVzJ1xuKS5zcGxpdCgnLCcpLCBqID0gMDsgZXM2U3ltYm9scy5sZW5ndGggPiBqOyl3a3MoZXM2U3ltYm9sc1tqKytdKTtcblxuZm9yICh2YXIgd2VsbEtub3duU3ltYm9scyA9ICRrZXlzKHdrcy5zdG9yZSksIGsgPSAwOyB3ZWxsS25vd25TeW1ib2xzLmxlbmd0aCA+IGs7KSB3a3NEZWZpbmUod2VsbEtub3duU3ltYm9sc1trKytdKTtcblxuJGV4cG9ydCgkZXhwb3J0LlMgKyAkZXhwb3J0LkYgKiAhVVNFX05BVElWRSwgJ1N5bWJvbCcsIHtcbiAgLy8gMTkuNC4yLjEgU3ltYm9sLmZvcihrZXkpXG4gICdmb3InOiBmdW5jdGlvbiAoa2V5KSB7XG4gICAgcmV0dXJuIGhhcyhTeW1ib2xSZWdpc3RyeSwga2V5ICs9ICcnKVxuICAgICAgPyBTeW1ib2xSZWdpc3RyeVtrZXldXG4gICAgICA6IFN5bWJvbFJlZ2lzdHJ5W2tleV0gPSAkU3ltYm9sKGtleSk7XG4gIH0sXG4gIC8vIDE5LjQuMi41IFN5bWJvbC5rZXlGb3Ioc3ltKVxuICBrZXlGb3I6IGZ1bmN0aW9uIGtleUZvcihzeW0pIHtcbiAgICBpZiAoIWlzU3ltYm9sKHN5bSkpIHRocm93IFR5cGVFcnJvcihzeW0gKyAnIGlzIG5vdCBhIHN5bWJvbCEnKTtcbiAgICBmb3IgKHZhciBrZXkgaW4gU3ltYm9sUmVnaXN0cnkpIGlmIChTeW1ib2xSZWdpc3RyeVtrZXldID09PSBzeW0pIHJldHVybiBrZXk7XG4gIH0sXG4gIHVzZVNldHRlcjogZnVuY3Rpb24gKCkgeyBzZXR0ZXIgPSB0cnVlOyB9LFxuICB1c2VTaW1wbGU6IGZ1bmN0aW9uICgpIHsgc2V0dGVyID0gZmFsc2U7IH1cbn0pO1xuXG4kZXhwb3J0KCRleHBvcnQuUyArICRleHBvcnQuRiAqICFVU0VfTkFUSVZFLCAnT2JqZWN0Jywge1xuICAvLyAxOS4xLjIuMiBPYmplY3QuY3JlYXRlKE8gWywgUHJvcGVydGllc10pXG4gIGNyZWF0ZTogJGNyZWF0ZSxcbiAgLy8gMTkuMS4yLjQgT2JqZWN0LmRlZmluZVByb3BlcnR5KE8sIFAsIEF0dHJpYnV0ZXMpXG4gIGRlZmluZVByb3BlcnR5OiAkZGVmaW5lUHJvcGVydHksXG4gIC8vIDE5LjEuMi4zIE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKE8sIFByb3BlcnRpZXMpXG4gIGRlZmluZVByb3BlcnRpZXM6ICRkZWZpbmVQcm9wZXJ0aWVzLFxuICAvLyAxOS4xLjIuNiBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKE8sIFApXG4gIGdldE93blByb3BlcnR5RGVzY3JpcHRvcjogJGdldE93blByb3BlcnR5RGVzY3JpcHRvcixcbiAgLy8gMTkuMS4yLjcgT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXMoTylcbiAgZ2V0T3duUHJvcGVydHlOYW1lczogJGdldE93blByb3BlcnR5TmFtZXMsXG4gIC8vIDE5LjEuMi44IE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMoTylcbiAgZ2V0T3duUHJvcGVydHlTeW1ib2xzOiAkZ2V0T3duUHJvcGVydHlTeW1ib2xzXG59KTtcblxuLy8gQ2hyb21lIDM4IGFuZCAzOSBgT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9sc2AgZmFpbHMgb24gcHJpbWl0aXZlc1xuLy8gaHR0cHM6Ly9idWdzLmNocm9taXVtLm9yZy9wL3Y4L2lzc3Vlcy9kZXRhaWw/aWQ9MzQ0M1xudmFyIEZBSUxTX09OX1BSSU1JVElWRVMgPSAkZmFpbHMoZnVuY3Rpb24gKCkgeyAkR09QUy5mKDEpOyB9KTtcblxuJGV4cG9ydCgkZXhwb3J0LlMgKyAkZXhwb3J0LkYgKiBGQUlMU19PTl9QUklNSVRJVkVTLCAnT2JqZWN0Jywge1xuICBnZXRPd25Qcm9wZXJ0eVN5bWJvbHM6IGZ1bmN0aW9uIGdldE93blByb3BlcnR5U3ltYm9scyhpdCkge1xuICAgIHJldHVybiAkR09QUy5mKHRvT2JqZWN0KGl0KSk7XG4gIH1cbn0pO1xuXG4vLyAyNC4zLjIgSlNPTi5zdHJpbmdpZnkodmFsdWUgWywgcmVwbGFjZXIgWywgc3BhY2VdXSlcbiRKU09OICYmICRleHBvcnQoJGV4cG9ydC5TICsgJGV4cG9ydC5GICogKCFVU0VfTkFUSVZFIHx8ICRmYWlscyhmdW5jdGlvbiAoKSB7XG4gIHZhciBTID0gJFN5bWJvbCgpO1xuICAvLyBNUyBFZGdlIGNvbnZlcnRzIHN5bWJvbCB2YWx1ZXMgdG8gSlNPTiBhcyB7fVxuICAvLyBXZWJLaXQgY29udmVydHMgc3ltYm9sIHZhbHVlcyB0byBKU09OIGFzIG51bGxcbiAgLy8gVjggdGhyb3dzIG9uIGJveGVkIHN5bWJvbHNcbiAgcmV0dXJuIF9zdHJpbmdpZnkoW1NdKSAhPSAnW251bGxdJyB8fCBfc3RyaW5naWZ5KHsgYTogUyB9KSAhPSAne30nIHx8IF9zdHJpbmdpZnkoT2JqZWN0KFMpKSAhPSAne30nO1xufSkpLCAnSlNPTicsIHtcbiAgc3RyaW5naWZ5OiBmdW5jdGlvbiBzdHJpbmdpZnkoaXQpIHtcbiAgICB2YXIgYXJncyA9IFtpdF07XG4gICAgdmFyIGkgPSAxO1xuICAgIHZhciByZXBsYWNlciwgJHJlcGxhY2VyO1xuICAgIHdoaWxlIChhcmd1bWVudHMubGVuZ3RoID4gaSkgYXJncy5wdXNoKGFyZ3VtZW50c1tpKytdKTtcbiAgICAkcmVwbGFjZXIgPSByZXBsYWNlciA9IGFyZ3NbMV07XG4gICAgaWYgKCFpc09iamVjdChyZXBsYWNlcikgJiYgaXQgPT09IHVuZGVmaW5lZCB8fCBpc1N5bWJvbChpdCkpIHJldHVybjsgLy8gSUU4IHJldHVybnMgc3RyaW5nIG9uIHVuZGVmaW5lZFxuICAgIGlmICghaXNBcnJheShyZXBsYWNlcikpIHJlcGxhY2VyID0gZnVuY3Rpb24gKGtleSwgdmFsdWUpIHtcbiAgICAgIGlmICh0eXBlb2YgJHJlcGxhY2VyID09ICdmdW5jdGlvbicpIHZhbHVlID0gJHJlcGxhY2VyLmNhbGwodGhpcywga2V5LCB2YWx1ZSk7XG4gICAgICBpZiAoIWlzU3ltYm9sKHZhbHVlKSkgcmV0dXJuIHZhbHVlO1xuICAgIH07XG4gICAgYXJnc1sxXSA9IHJlcGxhY2VyO1xuICAgIHJldHVybiBfc3RyaW5naWZ5LmFwcGx5KCRKU09OLCBhcmdzKTtcbiAgfVxufSk7XG5cbi8vIDE5LjQuMy40IFN5bWJvbC5wcm90b3R5cGVbQEB0b1ByaW1pdGl2ZV0oaGludClcbiRTeW1ib2xbUFJPVE9UWVBFXVtUT19QUklNSVRJVkVdIHx8IHJlcXVpcmUoJy4vX2hpZGUnKSgkU3ltYm9sW1BST1RPVFlQRV0sIFRPX1BSSU1JVElWRSwgJFN5bWJvbFtQUk9UT1RZUEVdLnZhbHVlT2YpO1xuLy8gMTkuNC4zLjUgU3ltYm9sLnByb3RvdHlwZVtAQHRvU3RyaW5nVGFnXVxuc2V0VG9TdHJpbmdUYWcoJFN5bWJvbCwgJ1N5bWJvbCcpO1xuLy8gMjAuMi4xLjkgTWF0aFtAQHRvU3RyaW5nVGFnXVxuc2V0VG9TdHJpbmdUYWcoTWF0aCwgJ01hdGgnLCB0cnVlKTtcbi8vIDI0LjMuMyBKU09OW0BAdG9TdHJpbmdUYWddXG5zZXRUb1N0cmluZ1RhZyhnbG9iYWwuSlNPTiwgJ0pTT04nLCB0cnVlKTtcbiIsInJlcXVpcmUoJy4vX3drcy1kZWZpbmUnKSgnYXN5bmNJdGVyYXRvcicpO1xuIiwicmVxdWlyZSgnLi9fd2tzLWRlZmluZScpKCdvYnNlcnZhYmxlJyk7XG4iLCJyZXF1aXJlKCcuLi8uLi9tb2R1bGVzL2VzNi5zeW1ib2wnKTtcbnJlcXVpcmUoJy4uLy4uL21vZHVsZXMvZXM2Lm9iamVjdC50by1zdHJpbmcnKTtcbnJlcXVpcmUoJy4uLy4uL21vZHVsZXMvZXM3LnN5bWJvbC5hc3luYy1pdGVyYXRvcicpO1xucmVxdWlyZSgnLi4vLi4vbW9kdWxlcy9lczcuc3ltYm9sLm9ic2VydmFibGUnKTtcbm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi4vLi4vbW9kdWxlcy9fY29yZScpLlN5bWJvbDtcbiIsIm1vZHVsZS5leHBvcnRzID0geyBcImRlZmF1bHRcIjogcmVxdWlyZShcImNvcmUtanMvbGlicmFyeS9mbi9zeW1ib2xcIiksIF9fZXNNb2R1bGU6IHRydWUgfTsiLCJcInVzZSBzdHJpY3RcIjtcblxuZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZTtcblxudmFyIF9pdGVyYXRvciA9IHJlcXVpcmUoXCIuLi9jb3JlLWpzL3N5bWJvbC9pdGVyYXRvclwiKTtcblxudmFyIF9pdGVyYXRvcjIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9pdGVyYXRvcik7XG5cbnZhciBfc3ltYm9sID0gcmVxdWlyZShcIi4uL2NvcmUtanMvc3ltYm9sXCIpO1xuXG52YXIgX3N5bWJvbDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9zeW1ib2wpO1xuXG52YXIgX3R5cGVvZiA9IHR5cGVvZiBfc3ltYm9sMi5kZWZhdWx0ID09PSBcImZ1bmN0aW9uXCIgJiYgdHlwZW9mIF9pdGVyYXRvcjIuZGVmYXVsdCA9PT0gXCJzeW1ib2xcIiA/IGZ1bmN0aW9uIChvYmopIHsgcmV0dXJuIHR5cGVvZiBvYmo7IH0gOiBmdW5jdGlvbiAob2JqKSB7IHJldHVybiBvYmogJiYgdHlwZW9mIF9zeW1ib2wyLmRlZmF1bHQgPT09IFwiZnVuY3Rpb25cIiAmJiBvYmouY29uc3RydWN0b3IgPT09IF9zeW1ib2wyLmRlZmF1bHQgJiYgb2JqICE9PSBfc3ltYm9sMi5kZWZhdWx0LnByb3RvdHlwZSA/IFwic3ltYm9sXCIgOiB0eXBlb2Ygb2JqOyB9O1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG5leHBvcnRzLmRlZmF1bHQgPSB0eXBlb2YgX3N5bWJvbDIuZGVmYXVsdCA9PT0gXCJmdW5jdGlvblwiICYmIF90eXBlb2YoX2l0ZXJhdG9yMi5kZWZhdWx0KSA9PT0gXCJzeW1ib2xcIiA/IGZ1bmN0aW9uIChvYmopIHtcbiAgcmV0dXJuIHR5cGVvZiBvYmogPT09IFwidW5kZWZpbmVkXCIgPyBcInVuZGVmaW5lZFwiIDogX3R5cGVvZihvYmopO1xufSA6IGZ1bmN0aW9uIChvYmopIHtcbiAgcmV0dXJuIG9iaiAmJiB0eXBlb2YgX3N5bWJvbDIuZGVmYXVsdCA9PT0gXCJmdW5jdGlvblwiICYmIG9iai5jb25zdHJ1Y3RvciA9PT0gX3N5bWJvbDIuZGVmYXVsdCAmJiBvYmogIT09IF9zeW1ib2wyLmRlZmF1bHQucHJvdG90eXBlID8gXCJzeW1ib2xcIiA6IHR5cGVvZiBvYmogPT09IFwidW5kZWZpbmVkXCIgPyBcInVuZGVmaW5lZFwiIDogX3R5cGVvZihvYmopO1xufTsiLCJcInVzZSBzdHJpY3RcIjtcblxuZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZTtcblxudmFyIF90eXBlb2YyID0gcmVxdWlyZShcIi4uL2hlbHBlcnMvdHlwZW9mXCIpO1xuXG52YXIgX3R5cGVvZjMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF90eXBlb2YyKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxuZXhwb3J0cy5kZWZhdWx0ID0gZnVuY3Rpb24gKHNlbGYsIGNhbGwpIHtcbiAgaWYgKCFzZWxmKSB7XG4gICAgdGhyb3cgbmV3IFJlZmVyZW5jZUVycm9yKFwidGhpcyBoYXNuJ3QgYmVlbiBpbml0aWFsaXNlZCAtIHN1cGVyKCkgaGFzbid0IGJlZW4gY2FsbGVkXCIpO1xuICB9XG5cbiAgcmV0dXJuIGNhbGwgJiYgKCh0eXBlb2YgY2FsbCA9PT0gXCJ1bmRlZmluZWRcIiA/IFwidW5kZWZpbmVkXCIgOiAoMCwgX3R5cGVvZjMuZGVmYXVsdCkoY2FsbCkpID09PSBcIm9iamVjdFwiIHx8IHR5cGVvZiBjYWxsID09PSBcImZ1bmN0aW9uXCIpID8gY2FsbCA6IHNlbGY7XG59OyIsIi8vIFdvcmtzIHdpdGggX19wcm90b19fIG9ubHkuIE9sZCB2OCBjYW4ndCB3b3JrIHdpdGggbnVsbCBwcm90byBvYmplY3RzLlxuLyogZXNsaW50LWRpc2FibGUgbm8tcHJvdG8gKi9cbnZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4vX2lzLW9iamVjdCcpO1xudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi9fYW4tb2JqZWN0Jyk7XG52YXIgY2hlY2sgPSBmdW5jdGlvbiAoTywgcHJvdG8pIHtcbiAgYW5PYmplY3QoTyk7XG4gIGlmICghaXNPYmplY3QocHJvdG8pICYmIHByb3RvICE9PSBudWxsKSB0aHJvdyBUeXBlRXJyb3IocHJvdG8gKyBcIjogY2FuJ3Qgc2V0IGFzIHByb3RvdHlwZSFcIik7XG59O1xubW9kdWxlLmV4cG9ydHMgPSB7XG4gIHNldDogT2JqZWN0LnNldFByb3RvdHlwZU9mIHx8ICgnX19wcm90b19fJyBpbiB7fSA/IC8vIGVzbGludC1kaXNhYmxlLWxpbmVcbiAgICBmdW5jdGlvbiAodGVzdCwgYnVnZ3ksIHNldCkge1xuICAgICAgdHJ5IHtcbiAgICAgICAgc2V0ID0gcmVxdWlyZSgnLi9fY3R4JykoRnVuY3Rpb24uY2FsbCwgcmVxdWlyZSgnLi9fb2JqZWN0LWdvcGQnKS5mKE9iamVjdC5wcm90b3R5cGUsICdfX3Byb3RvX18nKS5zZXQsIDIpO1xuICAgICAgICBzZXQodGVzdCwgW10pO1xuICAgICAgICBidWdneSA9ICEodGVzdCBpbnN0YW5jZW9mIEFycmF5KTtcbiAgICAgIH0gY2F0Y2ggKGUpIHsgYnVnZ3kgPSB0cnVlOyB9XG4gICAgICByZXR1cm4gZnVuY3Rpb24gc2V0UHJvdG90eXBlT2YoTywgcHJvdG8pIHtcbiAgICAgICAgY2hlY2soTywgcHJvdG8pO1xuICAgICAgICBpZiAoYnVnZ3kpIE8uX19wcm90b19fID0gcHJvdG87XG4gICAgICAgIGVsc2Ugc2V0KE8sIHByb3RvKTtcbiAgICAgICAgcmV0dXJuIE87XG4gICAgICB9O1xuICAgIH0oe30sIGZhbHNlKSA6IHVuZGVmaW5lZCksXG4gIGNoZWNrOiBjaGVja1xufTtcbiIsIi8vIDE5LjEuMy4xOSBPYmplY3Quc2V0UHJvdG90eXBlT2YoTywgcHJvdG8pXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xuJGV4cG9ydCgkZXhwb3J0LlMsICdPYmplY3QnLCB7IHNldFByb3RvdHlwZU9mOiByZXF1aXJlKCcuL19zZXQtcHJvdG8nKS5zZXQgfSk7XG4iLCJyZXF1aXJlKCcuLi8uLi9tb2R1bGVzL2VzNi5vYmplY3Quc2V0LXByb3RvdHlwZS1vZicpO1xubW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuLi8uLi9tb2R1bGVzL19jb3JlJykuT2JqZWN0LnNldFByb3RvdHlwZU9mO1xuIiwibW9kdWxlLmV4cG9ydHMgPSB7IFwiZGVmYXVsdFwiOiByZXF1aXJlKFwiY29yZS1qcy9saWJyYXJ5L2ZuL29iamVjdC9zZXQtcHJvdG90eXBlLW9mXCIpLCBfX2VzTW9kdWxlOiB0cnVlIH07IiwidmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbi8vIDE5LjEuMi4yIC8gMTUuMi4zLjUgT2JqZWN0LmNyZWF0ZShPIFssIFByb3BlcnRpZXNdKVxuJGV4cG9ydCgkZXhwb3J0LlMsICdPYmplY3QnLCB7IGNyZWF0ZTogcmVxdWlyZSgnLi9fb2JqZWN0LWNyZWF0ZScpIH0pO1xuIiwicmVxdWlyZSgnLi4vLi4vbW9kdWxlcy9lczYub2JqZWN0LmNyZWF0ZScpO1xudmFyICRPYmplY3QgPSByZXF1aXJlKCcuLi8uLi9tb2R1bGVzL19jb3JlJykuT2JqZWN0O1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBjcmVhdGUoUCwgRCkge1xuICByZXR1cm4gJE9iamVjdC5jcmVhdGUoUCwgRCk7XG59O1xuIiwibW9kdWxlLmV4cG9ydHMgPSB7IFwiZGVmYXVsdFwiOiByZXF1aXJlKFwiY29yZS1qcy9saWJyYXJ5L2ZuL29iamVjdC9jcmVhdGVcIiksIF9fZXNNb2R1bGU6IHRydWUgfTsiLCJcInVzZSBzdHJpY3RcIjtcblxuZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZTtcblxudmFyIF9zZXRQcm90b3R5cGVPZiA9IHJlcXVpcmUoXCIuLi9jb3JlLWpzL29iamVjdC9zZXQtcHJvdG90eXBlLW9mXCIpO1xuXG52YXIgX3NldFByb3RvdHlwZU9mMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3NldFByb3RvdHlwZU9mKTtcblxudmFyIF9jcmVhdGUgPSByZXF1aXJlKFwiLi4vY29yZS1qcy9vYmplY3QvY3JlYXRlXCIpO1xuXG52YXIgX2NyZWF0ZTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9jcmVhdGUpO1xuXG52YXIgX3R5cGVvZjIgPSByZXF1aXJlKFwiLi4vaGVscGVycy90eXBlb2ZcIik7XG5cbnZhciBfdHlwZW9mMyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3R5cGVvZjIpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG5leHBvcnRzLmRlZmF1bHQgPSBmdW5jdGlvbiAoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIHtcbiAgaWYgKHR5cGVvZiBzdXBlckNsYXNzICE9PSBcImZ1bmN0aW9uXCIgJiYgc3VwZXJDbGFzcyAhPT0gbnVsbCkge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXCJTdXBlciBleHByZXNzaW9uIG11c3QgZWl0aGVyIGJlIG51bGwgb3IgYSBmdW5jdGlvbiwgbm90IFwiICsgKHR5cGVvZiBzdXBlckNsYXNzID09PSBcInVuZGVmaW5lZFwiID8gXCJ1bmRlZmluZWRcIiA6ICgwLCBfdHlwZW9mMy5kZWZhdWx0KShzdXBlckNsYXNzKSkpO1xuICB9XG5cbiAgc3ViQ2xhc3MucHJvdG90eXBlID0gKDAsIF9jcmVhdGUyLmRlZmF1bHQpKHN1cGVyQ2xhc3MgJiYgc3VwZXJDbGFzcy5wcm90b3R5cGUsIHtcbiAgICBjb25zdHJ1Y3Rvcjoge1xuICAgICAgdmFsdWU6IHN1YkNsYXNzLFxuICAgICAgZW51bWVyYWJsZTogZmFsc2UsXG4gICAgICB3cml0YWJsZTogdHJ1ZSxcbiAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICAgIH1cbiAgfSk7XG4gIGlmIChzdXBlckNsYXNzKSBfc2V0UHJvdG90eXBlT2YyLmRlZmF1bHQgPyAoMCwgX3NldFByb3RvdHlwZU9mMi5kZWZhdWx0KShzdWJDbGFzcywgc3VwZXJDbGFzcykgOiBzdWJDbGFzcy5fX3Byb3RvX18gPSBzdXBlckNsYXNzO1xufTsiLCJcInVzZSBzdHJpY3RcIjtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcblxudmFyIF9jbGFzc0NhbGxDaGVjazIgPSByZXF1aXJlKFwiYmFiZWwtcnVudGltZS9oZWxwZXJzL2NsYXNzQ2FsbENoZWNrXCIpO1xuXG52YXIgX2NsYXNzQ2FsbENoZWNrMyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2NsYXNzQ2FsbENoZWNrMik7XG5cbnZhciBfY3JlYXRlQ2xhc3MyID0gcmVxdWlyZShcImJhYmVsLXJ1bnRpbWUvaGVscGVycy9jcmVhdGVDbGFzc1wiKTtcblxudmFyIF9jcmVhdGVDbGFzczMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9jcmVhdGVDbGFzczIpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG4vKipcbiAqIEJhc2UgY2xhc3MgZm9yIHRpbWUgZW5naW5lc1xuICpcbiAqIEEgdGltZSBlbmdpbmUgZ2VuZXJhdGVzIG1vcmUgb3IgbGVzcyByZWd1bGFyIGV2ZW50cyBhbmQvb3IgcGxheXMgYmFjayBhXG4gKiBtZWRpYSBzdHJlYW0uIEl0IGltcGxlbWVudHMgb25lIG9yIG11bHRpcGxlIGludGVyZmFjZXMgdG8gYmUgZHJpdmVuIGJ5IGFcbiAqIG1hc3RlciAoaS5lLiBhIFNjaGVkdWxlciwgYSBUcmFuc3BvcnQgb3IgYSBQbGF5Q29udHJvbCkgaW4gc3luY2hyb25pemF0aW9uXG4gKiB3aXRoIG90aGVyIGVuZ2luZXMuIFRoZSBwcm92aWRlZCBpbnRlcmZhY2VzIGFyZSBzY2hlZHVsZWQsIHRyYW5zcG9ydGVkLFxuICogYW5kIHBsYXktY29udHJvbGxlZC5cbiAqXG4gKlxuICogIyMjIyBUaGUgYHNjaGVkdWxlZGAgaW50ZXJmYWNlXG4gKlxuICogVGhlIHNjaGVkdWxlZCBpbnRlcmZhY2UgYWxsb3dzIGZvciBzeW5jaHJvbml6aW5nIGFuIGVuZ2luZSB0byBhIG1vbm90b25vdXMgdGltZVxuICogYXMgaXQgaXMgcHJvdmlkZWQgYnkgdGhlIFNjaGVkdWxlciBtYXN0ZXIuXG4gKlxuICogIyMjIyMjIGBhZHZhbmNlVGltZSh0aW1lIDpOdW1iZXIpIC0+IHtOdW1iZXJ9YFxuICpcbiAqIFRoZSBgYWR2YW5jZVRpbWVgIG1ldGhvZCBoYXMgdG8gYmUgaW1wbGVtZW50ZWQgYnkgYW4gYFRpbWVFbmdpbmVgIGFzIHBhcnQgb2YgdGhlXG4gKiBzY2hlZHVsZWQgaW50ZXJmYWNlLiBUaGUgbWV0aG9kIGlzIGNhbGxlZCBieSB0aGUgbWFzdGVyIChlLmcuIHRoZSBzY2hlZHVsZXIpLlxuICogSXQgZ2VuZXJhdGVzIGFuIGV2ZW50IGFuZCB0byByZXR1cm5zIHRoZSB0aW1lIG9mIHRoZSBuZXh0IGV2ZW50IChpLmUuIHRoZSBuZXh0XG4gKiBjYWxsIG9mIGFkdmFuY2VUaW1lKS4gVGhlIHJldHVybmVkIHRpbWUgaGFzIHRvIGJlIGdyZWF0ZXIgdGhhbiB0aGUgdGltZVxuICogcmVjZWl2ZWQgYXMgYXJndW1lbnQgb2YgdGhlIG1ldGhvZC4gSW4gY2FzZSB0aGF0IGEgVGltZUVuZ2luZSBoYXMgdG8gZ2VuZXJhdGVcbiAqIG11bHRpcGxlIGV2ZW50cyBhdCB0aGUgc2FtZSB0aW1lLCB0aGUgZW5naW5lIGhhcyB0byBpbXBsZW1lbnQgaXRzIG93biBsb29wXG4gKiB3aGlsZShldmVudC50aW1lIDw9IHRpbWUpIGFuZCByZXR1cm4gdGhlIHRpbWUgb2YgdGhlIG5leHQgZXZlbnQgKGlmIGFueSkuXG4gKlxuICogIyMjIyMjIGByZXNldFRpbWUodGltZT11bmRlZmluZWQgOk51bWJlcilgXG4gKlxuICogVGhlIGByZXNldFRpbWVgIG1ldGhvZCBpcyBwcm92aWRlZCBieSB0aGUgYFRpbWVFbmdpbmVgIGJhc2UgY2xhc3MuIEFuIGVuZ2luZSBtYXlcbiAqIGNhbGwgdGhpcyBtZXRob2QgdG8gcmVzZXQgaXRzIG5leHQgZXZlbnQgdGltZSAoZS5nLiB3aGVuIGEgcGFyYW1ldGVyIGlzXG4gKiBjaGFuZ2VkIHRoYXQgaW5mbHVlbmNlcyB0aGUgZW5naW5lJ3MgdGVtcG9yYWwgYmVoYXZpb3IpLiBXaGVuIG5vIGFyZ3VtZW50XG4gKiBpcyBnaXZlbiwgdGhlIHRpbWUgaXMgcmVzZXQgdG8gdGhlIGN1cnJlbnQgbWFzdGVyIHRpbWUuIFdoZW4gY2FsbGluZyB0aGVcbiAqIG1ldGhvZCB3aXRoIEluZmluaXR5IHRoZSBlbmdpbmUgaXMgc3VzcGVuZGVkIHdpdGhvdXQgYmVpbmcgcmVtb3ZlZCBmcm9tIHRoZVxuICogbWFzdGVyLlxuICpcbiAqXG4gKiAjIyMjIFRoZSBgdHJhbnNwb3J0ZWRgIGludGVyZmFjZVxuICpcbiAqIFRoZSB0cmFuc3BvcnRlZCBpbnRlcmZhY2UgYWxsb3dzIGZvciBzeW5jaHJvbml6aW5nIGFuIGVuZ2luZSB0byBhIHBvc2l0aW9uXG4gKiAoaS5lLiBtZWRpYSBwbGF5YmFjayB0aW1lKSB0aGF0IGNhbiBydW4gZm9yd2FyZCBhbmQgYmFja3dhcmQgYW5kIGp1bXAgYXMgaXRcbiAqIGlzIHByb3ZpZGVkIGJ5IHRoZSBUcmFuc3BvcnQgbWFzdGVyLlxuICpcbiAqICMjIyMjIyBgc3luY1Bvc2l0aW9uKHRpbWUgOk51bWJlciwgcG9zaXRpb24gOk51bWJlciwgc3BlZWQgOk51bWJlcikgLT4ge051bWJlcn1gXG4gKlxuICogVGhlIGBzeW5jUG9zaXRvbmAgbWV0aG9kIGhhcyB0byBiZSBpbXBsZW1lbnRlZCBieSBhIGBUaW1lRW5naW5lYCBhcyBwYXJ0IG9mIHRoZVxuICogdHJhbnNwb3J0ZWQgaW50ZXJmYWNlLiBUaGUgbWV0aG9kIHN5bmNQb3NpdG9uIGlzIGNhbGxlZCB3aGVuZXZlciB0aGUgbWFzdGVyXG4gKiBvZiBhIHRyYW5zcG9ydGVkIGVuZ2luZSBoYXMgdG8gKHJlLSlzeW5jaHJvbml6ZSB0aGUgZW5naW5lJ3MgcG9zaXRpb24uIFRoaXNcbiAqIGlzIGZvciBleGFtcGxlIHJlcXVpcmVkIHdoZW4gdGhlIG1hc3RlciAocmUtKXN0YXJ0cyBwbGF5YmFjaywganVtcHMgdG8gYW5cbiAqIGFyYml0cmFyeSBwb3NpdGlvbiwgYW5kIHdoZW4gcmV2ZXJzaW5nIHBsYXliYWNrIGRpcmVjdGlvbi4gVGhlIG1ldGhvZCByZXR1cm5zXG4gKiB0aGUgbmV4dCBwb3NpdGlvbiBvZiB0aGUgZW5naW5lIGluIHRoZSBnaXZlbiBwbGF5YmFjayBkaXJlY3Rpb25cbiAqIChpLmUuIGBzcGVlZCA8IDBgIG9yIGBzcGVlZCA+IDBgKS5cbiAqXG4gKiAjIyMjIyMgYGFkdmFuY2VQb3NpdGlvbih0aW1lIDpOdW1iZXIsIHBvc2l0aW9uIDpOdW1iZXIsIHNwZWVkIDpOdW1iZXIpIC0+IHtOdW1iZXJ9YFxuICpcbiAqIFRoZSBgYWR2YW5jZVBvc2l0aW9uYCBtZXRob2QgaGFzIHRvIGJlIGltcGxlbWVudGVkIGJ5IGEgYFRpbWVFbmdpbmVgIGFzIHBhcnRcbiAqIG9mIHRoZSB0cmFuc3BvcnRlZCBpbnRlcmZhY2UuIFRoZSBtYXN0ZXIgY2FsbHMgdGhlIGFkdmFuY2VQb3NpdG9uIG1ldGhvZCB3aGVuXG4gKiB0aGUgZW5naW5lJ3MgZXZlbnQgcG9zaXRpb24gaXMgcmVhY2hlZC4gVGhlIG1ldGhvZCBnZW5lcmF0ZXMgYW4gZXZlbnQgYW5kXG4gKiByZXR1cm5zIHRoZSBuZXh0IHBvc2l0aW9uIGluIHRoZSBnaXZlbiBwbGF5YmFjayBkaXJlY3Rpb24gKGkuZS4gc3BlZWQgPCAwIG9yXG4gKiBzcGVlZCA+IDApLiBUaGUgcmV0dXJuZWQgcG9zaXRpb24gaGFzIHRvIGJlIGdyZWF0ZXIgKGkuZS4gd2hlbiBzcGVlZCA+IDApXG4gKiBvciBsZXNzIChpLmUuIHdoZW4gc3BlZWQgPCAwKSB0aGFuIHRoZSBwb3NpdGlvbiByZWNlaXZlZCBhcyBhcmd1bWVudCBvZiB0aGVcbiAqIG1ldGhvZC5cbiAqXG4gKiAjIyMjIyMgYHJlc2V0UG9zaXRpb24ocG9zaXRpb249dW5kZWZpbmVkIDpOdW1iZXIpYFxuICpcbiAqIFRoZSByZXNldFBvc2l0aW9uIG1ldGhvZCBpcyBwcm92aWRlZCBieSB0aGUgVGltZUVuZ2luZSBiYXNlIGNsYXNzLiBBbiBlbmdpbmVcbiAqIG1heSBjYWxsIHRoaXMgbWV0aG9kIHRvIHJlc2V0IGl0cyBuZXh0IGV2ZW50IHBvc2l0aW9uLiBXaGVuIG5vIGFyZ3VtZW50XG4gKiBpcyBnaXZlbiwgdGhlIHRpbWUgaXMgcmVzZXQgdG8gdGhlIGN1cnJlbnQgbWFzdGVyIHRpbWUuIFdoZW4gY2FsbGluZyB0aGVcbiAqIG1ldGhvZCB3aXRoIEluZmluaXR5IHRoZSBlbmdpbmUgaXMgc3VzcGVuZGVkIHdpdGhvdXQgYmVpbmcgcmVtb3ZlZCBmcm9tXG4gKiB0aGUgbWFzdGVyLlxuICpcbiAqXG4gKiAjIyMjIFRoZSBzcGVlZC1jb250cm9sbGVkIGludGVyZmFjZVxuICpcbiAqIFRoZSBcInNwZWVkLWNvbnRyb2xsZWRcIiBpbnRlcmZhY2UgYWxsb3dzIGZvciBzeW5jcm9uaXppbmcgYW4gZW5naW5lIHRoYXQgaXNcbiAqIG5laXRoZXIgZHJpdmVuIHRocm91Z2ggdGhlIHNjaGVkdWxlZCBub3IgdGhlIHRyYW5zcG9ydGVkIGludGVyZmFjZS4gVGhlXG4gKiBpbnRlcmZhY2UgYWxsb3dzIGluIHBhcnRpY3VsYXIgdG8gc3luY2hyb25pemUgZW5naW5lcyB0aGF0IGFzc3VyZSB0aGVpciBvd25cbiAqIHNjaGVkdWxpbmcgKGkuZS4gYXVkaW8gcGxheWVyIG9yIGFuIG9zY2lsbGF0b3IpIHRvIHRoZSBldmVudC1iYXNlZCBzY2hlZHVsZWRcbiAqIGFuZCB0cmFuc3BvcnRlZCBlbmdpbmVzLlxuICpcbiAqICMjIyMjIyBgc3luY1NwZWVkKHRpbWUgOk51bWJlciwgcG9zaXRpb24gOk51bWJlciwgc3BlZWQgOk51bWJlciwgc2Vlaz1mYWxzZSA6Qm9vbGVhbilgXG4gKlxuICogVGhlIHN5bmNTcGVlZCBtZXRob2QgaGFzIHRvIGJlIGltcGxlbWVudGVkIGJ5IGEgVGltZUVuZ2luZSBhcyBwYXJ0IG9mIHRoZVxuICogc3BlZWQtY29udHJvbGxlZCBpbnRlcmZhY2UuIFRoZSBtZXRob2QgaXMgY2FsbGVkIGJ5IHRoZSBtYXN0ZXIgd2hlbmV2ZXIgdGhlXG4gKiBwbGF5YmFjayBzcGVlZCBjaGFuZ2VzIG9yIHRoZSBwb3NpdGlvbiBqdW1wcyBhcmJpdGFyaWx5IChpLmUuIG9uIGEgc2VlaykuXG4gKlxuICpcbiAqIDxociAvPlxuICpcbiAqIEV4YW1wbGUgdGhhdCBzaG93cyBhIGBUaW1lRW5naW5lYCBydW5uaW5nIGluIGEgYFNjaGVkdWxlcmAgdGhhdCBjb3VudHMgdXBcbiAqIGF0IGEgZ2l2ZW4gZnJlcXVlbmN5OlxuICoge0BsaW5rIGh0dHBzOi8vcmF3Z2l0LmNvbS93YXZlc2pzL3dhdmVzLWF1ZGlvL21hc3Rlci9leGFtcGxlcy90aW1lLWVuZ2luZS5odG1sfVxuICpcbiAqIEBleGFtcGxlXG4gKiBpbXBvcnQgKiBhcyBhdWRpbyBmcm9tICd3YXZlcy1hdWRpbyc7XG4gKlxuICogY2xhc3MgTXlFbmdpbmUgZXh0ZW5kcyBhdWRpby5UaW1lRW5naW5lIHtcbiAqICAgY29uc3RydWN0b3IoKSB7XG4gKiAgICAgc3VwZXIoKTtcbiAqICAgICAvLyAuLi5cbiAqICAgfVxuICogfVxuICpcbiAqL1xudmFyIFRpbWVFbmdpbmUgPSBmdW5jdGlvbiAoKSB7XG4gIGZ1bmN0aW9uIFRpbWVFbmdpbmUoKSB7XG4gICAgKDAsIF9jbGFzc0NhbGxDaGVjazMuZGVmYXVsdCkodGhpcywgVGltZUVuZ2luZSk7XG5cbiAgICAvKipcbiAgICAgKiBUaGUgZW5naW5lJ3MgbWFzdGVyLlxuICAgICAqXG4gICAgICogQHR5cGUge01peGVkfVxuICAgICAqIEBuYW1lIG1hc3RlclxuICAgICAqIEBtZW1iZXJvZiBUaW1lRW5naW5lXG4gICAgICovXG4gICAgdGhpcy5tYXN0ZXIgPSBudWxsO1xuICB9XG5cbiAgLyoqXG4gICAqIFRoZSB0aW1lIGVuZ2luZSdzIGN1cnJlbnQgKG1hc3RlcikgdGltZS5cbiAgICpcbiAgICogQHR5cGUge051bWJlcn1cbiAgICogQG1lbWJlcm9mIFRpbWVFbmdpbmVcbiAgICogQHJlYWRvbmx5XG4gICAqL1xuXG5cbiAgKDAsIF9jcmVhdGVDbGFzczMuZGVmYXVsdCkoVGltZUVuZ2luZSwgW3tcbiAgICBrZXk6IFwicmVzZXRUaW1lXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHJlc2V0VGltZSgpIHtcbiAgICAgIHZhciB0aW1lID0gYXJndW1lbnRzLmxlbmd0aCA+IDAgJiYgYXJndW1lbnRzWzBdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMF0gOiB1bmRlZmluZWQ7XG5cbiAgICAgIGlmICh0aGlzLm1hc3RlcikgdGhpcy5tYXN0ZXIucmVzZXRFbmdpbmVUaW1lKHRoaXMsIHRpbWUpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRyYW5zcG9ydGVkIGludGVyZmFjZVxuICAgICAqICAgLSBzeW5jUG9zaXRpb24odGltZSwgcG9zaXRpb24sIHNwZWVkKSwgY2FsbGVkIHRvIHJlcG9zaXRpb24gVGltZUVuZ2luZSwgcmV0dXJucyBuZXh0IHBvc2l0aW9uXG4gICAgICogICAtIGFkdmFuY2VQb3NpdGlvbih0aW1lLCBwb3NpdGlvbiwgc3BlZWQpLCBjYWxsZWQgdG8gZ2VuZXJhdGUgbmV4dCBldmVudCBhdCBnaXZlbiB0aW1lIGFuZCBwb3NpdGlvbiwgcmV0dXJucyBuZXh0IHBvc2l0aW9uXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlcm9mIFRpbWVFbmdpbmVcbiAgICAgKi9cblxuICB9LCB7XG4gICAga2V5OiBcInJlc2V0UG9zaXRpb25cIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gcmVzZXRQb3NpdGlvbigpIHtcbiAgICAgIHZhciBwb3NpdGlvbiA9IGFyZ3VtZW50cy5sZW5ndGggPiAwICYmIGFyZ3VtZW50c1swXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzBdIDogdW5kZWZpbmVkO1xuXG4gICAgICBpZiAodGhpcy5tYXN0ZXIpIHRoaXMubWFzdGVyLnJlc2V0RW5naW5lUG9zaXRpb24odGhpcywgcG9zaXRpb24pO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFNwZWVkLWNvbnRyb2xsZWQgaW50ZXJmYWNlXG4gICAgICogICAtIHN5bmNTcGVlZCh0aW1lLCBwb3NpdGlvbiwgc3BlZWQsICksIGNhbGxlZCB0b1xuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJvZiBUaW1lRW5naW5lXG4gICAgICovXG5cbiAgfSwge1xuICAgIGtleTogXCJjdXJyZW50VGltZVwiLFxuICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgaWYgKHRoaXMubWFzdGVyKSByZXR1cm4gdGhpcy5tYXN0ZXIuY3VycmVudFRpbWU7XG5cbiAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIHRpbWUgZW5naW5lJ3MgY3VycmVudCAobWFzdGVyKSBhdWRpbyB0aW1lLlxuICAgICAqXG4gICAgICogQHR5cGUge051bWJlcn1cbiAgICAgKiBAbWVtYmVyb2YgVGltZUVuZ2luZVxuICAgICAqIEByZWFkb25seVxuICAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6IFwiYXVkaW9UaW1lXCIsXG4gICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICBpZiAodGhpcy5tYXN0ZXIpIHJldHVybiB0aGlzLm1hc3Rlci5hdWRpb1RpbWU7XG5cbiAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIHRpbWUgZW5naW5lJ3MgY3VycmVudCAobWFzdGVyKSBwb3NpdGlvbi5cbiAgICAgKlxuICAgICAqIEB0eXBlIHtOdW1iZXJ9XG4gICAgICogQG1lbWJlcm9mIFRpbWVFbmdpbmVcbiAgICAgKiBAcmVhZG9ubHlcbiAgICAgKi9cblxuICB9LCB7XG4gICAga2V5OiBcImN1cnJlbnRQb3NpdGlvblwiLFxuICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgdmFyIG1hc3RlciA9IHRoaXMubWFzdGVyO1xuXG4gICAgICBpZiAobWFzdGVyICYmIG1hc3Rlci5jdXJyZW50UG9zaXRpb24gIT09IHVuZGVmaW5lZCkgcmV0dXJuIG1hc3Rlci5jdXJyZW50UG9zaXRpb247XG5cbiAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogU2NoZWR1bGVkIGludGVyZmFjZVxuICAgICAqICAgLSBhZHZhbmNlVGltZSh0aW1lKSwgY2FsbGVkIHRvIGdlbmVyYXRlIG5leHQgZXZlbnQgYXQgZ2l2ZW4gdGltZSwgcmV0dXJucyBuZXh0IHRpbWVcbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyb2YgVGltZUVuZ2luZVxuICAgICAqL1xuXG4gIH1dLCBbe1xuICAgIGtleTogXCJpbXBsZW1lbnRzU2NoZWR1bGVkXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGltcGxlbWVudHNTY2hlZHVsZWQoZW5naW5lKSB7XG4gICAgICByZXR1cm4gZW5naW5lLmFkdmFuY2VUaW1lICYmIGVuZ2luZS5hZHZhbmNlVGltZSBpbnN0YW5jZW9mIEZ1bmN0aW9uO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJpbXBsZW1lbnRzVHJhbnNwb3J0ZWRcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gaW1wbGVtZW50c1RyYW5zcG9ydGVkKGVuZ2luZSkge1xuICAgICAgcmV0dXJuIGVuZ2luZS5zeW5jUG9zaXRpb24gJiYgZW5naW5lLnN5bmNQb3NpdGlvbiBpbnN0YW5jZW9mIEZ1bmN0aW9uICYmIGVuZ2luZS5hZHZhbmNlUG9zaXRpb24gJiYgZW5naW5lLmFkdmFuY2VQb3NpdGlvbiBpbnN0YW5jZW9mIEZ1bmN0aW9uO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJpbXBsZW1lbnRzU3BlZWRDb250cm9sbGVkXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGltcGxlbWVudHNTcGVlZENvbnRyb2xsZWQoZW5naW5lKSB7XG4gICAgICByZXR1cm4gZW5naW5lLnN5bmNTcGVlZCAmJiBlbmdpbmUuc3luY1NwZWVkIGluc3RhbmNlb2YgRnVuY3Rpb247XG4gICAgfVxuICB9XSk7XG4gIHJldHVybiBUaW1lRW5naW5lO1xufSgpO1xuXG5leHBvcnRzLmRlZmF1bHQgPSBUaW1lRW5naW5lO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2NoYXJzZXQ9dXRmLTg7YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSWxScGJXVkZibWRwYm1VdWFuTWlYU3dpYm1GdFpYTWlPbHNpVkdsdFpVVnVaMmx1WlNJc0ltMWhjM1JsY2lJc0luUnBiV1VpTENKMWJtUmxabWx1WldRaUxDSnlaWE5sZEVWdVoybHVaVlJwYldVaUxDSndiM05wZEdsdmJpSXNJbkpsYzJWMFJXNW5hVzVsVUc5emFYUnBiMjRpTENKamRYSnlaVzUwVkdsdFpTSXNJbUYxWkdsdlZHbHRaU0lzSW1OMWNuSmxiblJRYjNOcGRHbHZiaUlzSW1WdVoybHVaU0lzSW1Ga2RtRnVZMlZVYVcxbElpd2lSblZ1WTNScGIyNGlMQ0p6ZVc1alVHOXphWFJwYjI0aUxDSmhaSFpoYm1ObFVHOXphWFJwYjI0aUxDSnplVzVqVTNCbFpXUWlYU3dpYldGd2NHbHVaM01pT2lJN096czdPenM3T3pzN096czdPenM3UVVGQlFUczdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPMGxCYzBkTlFTeFZPMEZCUTBvc2QwSkJRV003UVVGQlFUczdRVUZEV2pzN096czdPenRCUVU5QkxGTkJRVXRETEUxQlFVd3NSMEZCWXl4SlFVRmtPMEZCUTBRN08wRkJSVVE3T3pzN096czdPenM3TzJkRFFYVkVORUk3UVVGQlFTeFZRVUZzUWtNc1NVRkJhMElzZFVWQlFWaERMRk5CUVZjN08wRkJRekZDTEZWQlFVa3NTMEZCUzBZc1RVRkJWQ3hGUVVORkxFdEJRVXRCTEUxQlFVd3NRMEZCV1Vjc1pVRkJXaXhEUVVFMFFpeEpRVUUxUWl4RlFVRnJRMFlzU1VGQmJFTTdRVUZEU0RzN1FVRkZSRHM3T3pzN096czdPenM3YjBOQlpXOURPMEZCUVVFc1ZVRkJkRUpITEZGQlFYTkNMSFZGUVVGWVJpeFRRVUZYT3p0QlFVTnNReXhWUVVGSkxFdEJRVXRHTEUxQlFWUXNSVUZEUlN4TFFVRkxRU3hOUVVGTUxFTkJRVmxMTEcxQ1FVRmFMRU5CUVdkRExFbEJRV2hETEVWQlFYTkRSQ3hSUVVGMFF6dEJRVU5JT3p0QlFVVkVPenM3T3pzN096czdPM2RDUVhwRmEwSTdRVUZEYUVJc1ZVRkJTU3hMUVVGTFNpeE5RVUZVTEVWQlEwVXNUMEZCVHl4TFFVRkxRU3hOUVVGTUxFTkJRVmxOTEZkQlFXNUNPenRCUVVWR0xHRkJRVTlLTEZOQlFWQTdRVUZEUkRzN1FVRkZSRHM3T3pzN096czdPenQzUWtGUFowSTdRVUZEWkN4VlFVRkpMRXRCUVV0R0xFMUJRVlFzUlVGRFJTeFBRVUZQTEV0QlFVdEJMRTFCUVV3c1EwRkJXVThzVTBGQmJrSTdPMEZCUlVZc1lVRkJUMHdzVTBGQlVEdEJRVU5FT3p0QlFVVkVPenM3T3pzN096czdPM2RDUVU5elFqdEJRVU53UWl4VlFVRkpSaXhUUVVGVExFdEJRVXRCTEUxQlFXeENPenRCUVVWQkxGVkJRVWxCTEZWQlFWVkJMRTlCUVU5UkxHVkJRVkFzUzBGQk1rSk9MRk5CUVhwRExFVkJRMFVzVDBGQlQwWXNUMEZCVDFFc1pVRkJaRHM3UVVGRlJpeGhRVUZQVGl4VFFVRlFPMEZCUTBRN08wRkJSVVE3T3pzN096czdPenM3ZDBOQlR6SkNUeXhOTEVWQlFWRTdRVUZEYWtNc1lVRkJVVUVzVDBGQlQwTXNWMEZCVUN4SlFVRnpRa1FzVDBGQlQwTXNWMEZCVUN4WlFVRTRRa01zVVVGQk5VUTdRVUZEUkRzN096QkRRV1UwUWtZc1RTeEZRVUZSTzBGQlEyNURMR0ZCUTBWQkxFOUJRVTlITEZsQlFWQXNTVUZCZFVKSUxFOUJRVTlITEZsQlFWQXNXVUZCSzBKRUxGRkJRWFJFTEVsQlEwRkdMRTlCUVU5SkxHVkJSRkFzU1VGRE1FSktMRTlCUVU5SkxHVkJRVkFzV1VGQmEwTkdMRkZCUmpsRU8wRkJTVVE3T3pzNFEwRmpaME5HTEUwc1JVRkJVVHRCUVVOMlF5eGhRVUZSUVN4UFFVRlBTeXhUUVVGUUxFbEJRVzlDVEN4UFFVRlBTeXhUUVVGUUxGbEJRVFJDU0N4UlFVRjRSRHRCUVVORU96czdPenRyUWtGSFdWb3NWU0lzSW1acGJHVWlPaUpVYVcxbFJXNW5hVzVsTG1weklpd2ljMjkxY21ObGMwTnZiblJsYm5RaU9sc2lMeW9xWEc0Z0tpQkNZWE5sSUdOc1lYTnpJR1p2Y2lCMGFXMWxJR1Z1WjJsdVpYTmNiaUFxWEc0Z0tpQkJJSFJwYldVZ1pXNW5hVzVsSUdkbGJtVnlZWFJsY3lCdGIzSmxJRzl5SUd4bGMzTWdjbVZuZFd4aGNpQmxkbVZ1ZEhNZ1lXNWtMMjl5SUhCc1lYbHpJR0poWTJzZ1lWeHVJQ29nYldWa2FXRWdjM1J5WldGdExpQkpkQ0JwYlhCc1pXMWxiblJ6SUc5dVpTQnZjaUJ0ZFd4MGFYQnNaU0JwYm5SbGNtWmhZMlZ6SUhSdklHSmxJR1J5YVhabGJpQmllU0JoWEc0Z0tpQnRZWE4wWlhJZ0tHa3VaUzRnWVNCVFkyaGxaSFZzWlhJc0lHRWdWSEpoYm5Od2IzSjBJRzl5SUdFZ1VHeGhlVU52Ym5SeWIyd3BJR2x1SUhONWJtTm9jbTl1YVhwaGRHbHZibHh1SUNvZ2QybDBhQ0J2ZEdobGNpQmxibWRwYm1WekxpQlVhR1VnY0hKdmRtbGtaV1FnYVc1MFpYSm1ZV05sY3lCaGNtVWdjMk5vWldSMWJHVmtMQ0IwY21GdWMzQnZjblJsWkN4Y2JpQXFJR0Z1WkNCd2JHRjVMV052Ym5SeWIyeHNaV1F1WEc0Z0tseHVJQ3BjYmlBcUlDTWpJeU1nVkdobElHQnpZMmhsWkhWc1pXUmdJR2x1ZEdWeVptRmpaVnh1SUNwY2JpQXFJRlJvWlNCelkyaGxaSFZzWldRZ2FXNTBaWEptWVdObElHRnNiRzkzY3lCbWIzSWdjM2x1WTJoeWIyNXBlbWx1WnlCaGJpQmxibWRwYm1VZ2RHOGdZU0J0YjI1dmRHOXViM1Z6SUhScGJXVmNiaUFxSUdGeklHbDBJR2x6SUhCeWIzWnBaR1ZrSUdKNUlIUm9aU0JUWTJobFpIVnNaWElnYldGemRHVnlMbHh1SUNwY2JpQXFJQ01qSXlNakl5QmdZV1IyWVc1alpWUnBiV1VvZEdsdFpTQTZUblZ0WW1WeUtTQXRQaUI3VG5WdFltVnlmV0JjYmlBcVhHNGdLaUJVYUdVZ1lHRmtkbUZ1WTJWVWFXMWxZQ0J0WlhSb2IyUWdhR0Z6SUhSdklHSmxJR2x0Y0d4bGJXVnVkR1ZrSUdKNUlHRnVJR0JVYVcxbFJXNW5hVzVsWUNCaGN5QndZWEowSUc5bUlIUm9aVnh1SUNvZ2MyTm9aV1IxYkdWa0lHbHVkR1Z5Wm1GalpTNGdWR2hsSUcxbGRHaHZaQ0JwY3lCallXeHNaV1FnWW5rZ2RHaGxJRzFoYzNSbGNpQW9aUzVuTGlCMGFHVWdjMk5vWldSMWJHVnlLUzVjYmlBcUlFbDBJR2RsYm1WeVlYUmxjeUJoYmlCbGRtVnVkQ0JoYm1RZ2RHOGdjbVYwZFhKdWN5QjBhR1VnZEdsdFpTQnZaaUIwYUdVZ2JtVjRkQ0JsZG1WdWRDQW9hUzVsTGlCMGFHVWdibVY0ZEZ4dUlDb2dZMkZzYkNCdlppQmhaSFpoYm1ObFZHbHRaU2t1SUZSb1pTQnlaWFIxY201bFpDQjBhVzFsSUdoaGN5QjBieUJpWlNCbmNtVmhkR1Z5SUhSb1lXNGdkR2hsSUhScGJXVmNiaUFxSUhKbFkyVnBkbVZrSUdGeklHRnlaM1Z0Wlc1MElHOW1JSFJvWlNCdFpYUm9iMlF1SUVsdUlHTmhjMlVnZEdoaGRDQmhJRlJwYldWRmJtZHBibVVnYUdGeklIUnZJR2RsYm1WeVlYUmxYRzRnS2lCdGRXeDBhWEJzWlNCbGRtVnVkSE1nWVhRZ2RHaGxJSE5oYldVZ2RHbHRaU3dnZEdobElHVnVaMmx1WlNCb1lYTWdkRzhnYVcxd2JHVnRaVzUwSUdsMGN5QnZkMjRnYkc5dmNGeHVJQ29nZDJocGJHVW9aWFpsYm5RdWRHbHRaU0E4UFNCMGFXMWxLU0JoYm1RZ2NtVjBkWEp1SUhSb1pTQjBhVzFsSUc5bUlIUm9aU0J1WlhoMElHVjJaVzUwSUNocFppQmhibmtwTGx4dUlDcGNiaUFxSUNNakl5TWpJeUJnY21WelpYUlVhVzFsS0hScGJXVTlkVzVrWldacGJtVmtJRHBPZFcxaVpYSXBZRnh1SUNwY2JpQXFJRlJvWlNCZ2NtVnpaWFJVYVcxbFlDQnRaWFJvYjJRZ2FYTWdjSEp2ZG1sa1pXUWdZbmtnZEdobElHQlVhVzFsUlc1bmFXNWxZQ0JpWVhObElHTnNZWE56TGlCQmJpQmxibWRwYm1VZ2JXRjVYRzRnS2lCallXeHNJSFJvYVhNZ2JXVjBhRzlrSUhSdklISmxjMlYwSUdsMGN5QnVaWGgwSUdWMlpXNTBJSFJwYldVZ0tHVXVaeTRnZDJobGJpQmhJSEJoY21GdFpYUmxjaUJwYzF4dUlDb2dZMmhoYm1kbFpDQjBhR0YwSUdsdVpteDFaVzVqWlhNZ2RHaGxJR1Z1WjJsdVpTZHpJSFJsYlhCdmNtRnNJR0psYUdGMmFXOXlLUzRnVjJobGJpQnVieUJoY21kMWJXVnVkRnh1SUNvZ2FYTWdaMmwyWlc0c0lIUm9aU0IwYVcxbElHbHpJSEpsYzJWMElIUnZJSFJvWlNCamRYSnlaVzUwSUcxaGMzUmxjaUIwYVcxbExpQlhhR1Z1SUdOaGJHeHBibWNnZEdobFhHNGdLaUJ0WlhSb2IyUWdkMmwwYUNCSmJtWnBibWwwZVNCMGFHVWdaVzVuYVc1bElHbHpJSE4xYzNCbGJtUmxaQ0IzYVhSb2IzVjBJR0psYVc1bklISmxiVzkyWldRZ1puSnZiU0IwYUdWY2JpQXFJRzFoYzNSbGNpNWNiaUFxWEc0Z0tseHVJQ29nSXlNakl5QlVhR1VnWUhSeVlXNXpjRzl5ZEdWa1lDQnBiblJsY21aaFkyVmNiaUFxWEc0Z0tpQlVhR1VnZEhKaGJuTndiM0owWldRZ2FXNTBaWEptWVdObElHRnNiRzkzY3lCbWIzSWdjM2x1WTJoeWIyNXBlbWx1WnlCaGJpQmxibWRwYm1VZ2RHOGdZU0J3YjNOcGRHbHZibHh1SUNvZ0tHa3VaUzRnYldWa2FXRWdjR3hoZVdKaFkyc2dkR2x0WlNrZ2RHaGhkQ0JqWVc0Z2NuVnVJR1p2Y25kaGNtUWdZVzVrSUdKaFkydDNZWEprSUdGdVpDQnFkVzF3SUdGeklHbDBYRzRnS2lCcGN5QndjbTkyYVdSbFpDQmllU0IwYUdVZ1ZISmhibk53YjNKMElHMWhjM1JsY2k1Y2JpQXFYRzRnS2lBakl5TWpJeU1nWUhONWJtTlFiM05wZEdsdmJpaDBhVzFsSURwT2RXMWlaWElzSUhCdmMybDBhVzl1SURwT2RXMWlaWElzSUhOd1pXVmtJRHBPZFcxaVpYSXBJQzArSUh0T2RXMWlaWEo5WUZ4dUlDcGNiaUFxSUZSb1pTQmdjM2x1WTFCdmMybDBiMjVnSUcxbGRHaHZaQ0JvWVhNZ2RHOGdZbVVnYVcxd2JHVnRaVzUwWldRZ1lua2dZU0JnVkdsdFpVVnVaMmx1WldBZ1lYTWdjR0Z5ZENCdlppQjBhR1ZjYmlBcUlIUnlZVzV6Y0c5eWRHVmtJR2x1ZEdWeVptRmpaUzRnVkdobElHMWxkR2h2WkNCemVXNWpVRzl6YVhSdmJpQnBjeUJqWVd4c1pXUWdkMmhsYm1WMlpYSWdkR2hsSUcxaGMzUmxjbHh1SUNvZ2IyWWdZU0IwY21GdWMzQnZjblJsWkNCbGJtZHBibVVnYUdGeklIUnZJQ2h5WlMwcGMzbHVZMmh5YjI1cGVtVWdkR2hsSUdWdVoybHVaU2R6SUhCdmMybDBhVzl1TGlCVWFHbHpYRzRnS2lCcGN5Qm1iM0lnWlhoaGJYQnNaU0J5WlhGMWFYSmxaQ0IzYUdWdUlIUm9aU0J0WVhOMFpYSWdLSEpsTFNsemRHRnlkSE1nY0d4aGVXSmhZMnNzSUdwMWJYQnpJSFJ2SUdGdVhHNGdLaUJoY21KcGRISmhjbmtnY0c5emFYUnBiMjRzSUdGdVpDQjNhR1Z1SUhKbGRtVnljMmx1WnlCd2JHRjVZbUZqYXlCa2FYSmxZM1JwYjI0dUlGUm9aU0J0WlhSb2IyUWdjbVYwZFhKdWMxeHVJQ29nZEdobElHNWxlSFFnY0c5emFYUnBiMjRnYjJZZ2RHaGxJR1Z1WjJsdVpTQnBiaUIwYUdVZ1oybDJaVzRnY0d4aGVXSmhZMnNnWkdseVpXTjBhVzl1WEc0Z0tpQW9hUzVsTGlCZ2MzQmxaV1FnUENBd1lDQnZjaUJnYzNCbFpXUWdQaUF3WUNrdVhHNGdLbHh1SUNvZ0l5TWpJeU1qSUdCaFpIWmhibU5sVUc5emFYUnBiMjRvZEdsdFpTQTZUblZ0WW1WeUxDQndiM05wZEdsdmJpQTZUblZ0WW1WeUxDQnpjR1ZsWkNBNlRuVnRZbVZ5S1NBdFBpQjdUblZ0WW1WeWZXQmNiaUFxWEc0Z0tpQlVhR1VnWUdGa2RtRnVZMlZRYjNOcGRHbHZibUFnYldWMGFHOWtJR2hoY3lCMGJ5QmlaU0JwYlhCc1pXMWxiblJsWkNCaWVTQmhJR0JVYVcxbFJXNW5hVzVsWUNCaGN5QndZWEowWEc0Z0tpQnZaaUIwYUdVZ2RISmhibk53YjNKMFpXUWdhVzUwWlhKbVlXTmxMaUJVYUdVZ2JXRnpkR1Z5SUdOaGJHeHpJSFJvWlNCaFpIWmhibU5sVUc5emFYUnZiaUJ0WlhSb2IyUWdkMmhsYmx4dUlDb2dkR2hsSUdWdVoybHVaU2R6SUdWMlpXNTBJSEJ2YzJsMGFXOXVJR2x6SUhKbFlXTm9aV1F1SUZSb1pTQnRaWFJvYjJRZ1oyVnVaWEpoZEdWeklHRnVJR1YyWlc1MElHRnVaRnh1SUNvZ2NtVjBkWEp1Y3lCMGFHVWdibVY0ZENCd2IzTnBkR2x2YmlCcGJpQjBhR1VnWjJsMlpXNGdjR3hoZVdKaFkyc2daR2x5WldOMGFXOXVJQ2hwTG1VdUlITndaV1ZrSUR3Z01DQnZjbHh1SUNvZ2MzQmxaV1FnUGlBd0tTNGdWR2hsSUhKbGRIVnlibVZrSUhCdmMybDBhVzl1SUdoaGN5QjBieUJpWlNCbmNtVmhkR1Z5SUNocExtVXVJSGRvWlc0Z2MzQmxaV1FnUGlBd0tWeHVJQ29nYjNJZ2JHVnpjeUFvYVM1bExpQjNhR1Z1SUhOd1pXVmtJRHdnTUNrZ2RHaGhiaUIwYUdVZ2NHOXphWFJwYjI0Z2NtVmpaV2wyWldRZ1lYTWdZWEpuZFcxbGJuUWdiMllnZEdobFhHNGdLaUJ0WlhSb2IyUXVYRzRnS2x4dUlDb2dJeU1qSXlNaklHQnlaWE5sZEZCdmMybDBhVzl1S0hCdmMybDBhVzl1UFhWdVpHVm1hVzVsWkNBNlRuVnRZbVZ5S1dCY2JpQXFYRzRnS2lCVWFHVWdjbVZ6WlhSUWIzTnBkR2x2YmlCdFpYUm9iMlFnYVhNZ2NISnZkbWxrWldRZ1lua2dkR2hsSUZScGJXVkZibWRwYm1VZ1ltRnpaU0JqYkdGemN5NGdRVzRnWlc1bmFXNWxYRzRnS2lCdFlYa2dZMkZzYkNCMGFHbHpJRzFsZEdodlpDQjBieUJ5WlhObGRDQnBkSE1nYm1WNGRDQmxkbVZ1ZENCd2IzTnBkR2x2Ymk0Z1YyaGxiaUJ1YnlCaGNtZDFiV1Z1ZEZ4dUlDb2dhWE1nWjJsMlpXNHNJSFJvWlNCMGFXMWxJR2x6SUhKbGMyVjBJSFJ2SUhSb1pTQmpkWEp5Wlc1MElHMWhjM1JsY2lCMGFXMWxMaUJYYUdWdUlHTmhiR3hwYm1jZ2RHaGxYRzRnS2lCdFpYUm9iMlFnZDJsMGFDQkpibVpwYm1sMGVTQjBhR1VnWlc1bmFXNWxJR2x6SUhOMWMzQmxibVJsWkNCM2FYUm9iM1YwSUdKbGFXNW5JSEpsYlc5MlpXUWdabkp2YlZ4dUlDb2dkR2hsSUcxaGMzUmxjaTVjYmlBcVhHNGdLbHh1SUNvZ0l5TWpJeUJVYUdVZ2MzQmxaV1F0WTI5dWRISnZiR3hsWkNCcGJuUmxjbVpoWTJWY2JpQXFYRzRnS2lCVWFHVWdYQ0p6Y0dWbFpDMWpiMjUwY205c2JHVmtYQ0lnYVc1MFpYSm1ZV05sSUdGc2JHOTNjeUJtYjNJZ2MzbHVZM0p2Ym1sNmFXNW5JR0Z1SUdWdVoybHVaU0IwYUdGMElHbHpYRzRnS2lCdVpXbDBhR1Z5SUdSeWFYWmxiaUIwYUhKdmRXZG9JSFJvWlNCelkyaGxaSFZzWldRZ2JtOXlJSFJvWlNCMGNtRnVjM0J2Y25SbFpDQnBiblJsY21aaFkyVXVJRlJvWlZ4dUlDb2dhVzUwWlhKbVlXTmxJR0ZzYkc5M2N5QnBiaUJ3WVhKMGFXTjFiR0Z5SUhSdklITjVibU5vY205dWFYcGxJR1Z1WjJsdVpYTWdkR2hoZENCaGMzTjFjbVVnZEdobGFYSWdiM2R1WEc0Z0tpQnpZMmhsWkhWc2FXNW5JQ2hwTG1VdUlHRjFaR2x2SUhCc1lYbGxjaUJ2Y2lCaGJpQnZjMk5wYkd4aGRHOXlLU0IwYnlCMGFHVWdaWFpsYm5RdFltRnpaV1FnYzJOb1pXUjFiR1ZrWEc0Z0tpQmhibVFnZEhKaGJuTndiM0owWldRZ1pXNW5hVzVsY3k1Y2JpQXFYRzRnS2lBakl5TWpJeU1nWUhONWJtTlRjR1ZsWkNoMGFXMWxJRHBPZFcxaVpYSXNJSEJ2YzJsMGFXOXVJRHBPZFcxaVpYSXNJSE53WldWa0lEcE9kVzFpWlhJc0lITmxaV3M5Wm1Gc2MyVWdPa0p2YjJ4bFlXNHBZRnh1SUNwY2JpQXFJRlJvWlNCemVXNWpVM0JsWldRZ2JXVjBhRzlrSUdoaGN5QjBieUJpWlNCcGJYQnNaVzFsYm5SbFpDQmllU0JoSUZScGJXVkZibWRwYm1VZ1lYTWdjR0Z5ZENCdlppQjBhR1ZjYmlBcUlITndaV1ZrTFdOdmJuUnliMnhzWldRZ2FXNTBaWEptWVdObExpQlVhR1VnYldWMGFHOWtJR2x6SUdOaGJHeGxaQ0JpZVNCMGFHVWdiV0Z6ZEdWeUlIZG9aVzVsZG1WeUlIUm9aVnh1SUNvZ2NHeGhlV0poWTJzZ2MzQmxaV1FnWTJoaGJtZGxjeUJ2Y2lCMGFHVWdjRzl6YVhScGIyNGdhblZ0Y0hNZ1lYSmlhWFJoY21sc2VTQW9hUzVsTGlCdmJpQmhJSE5sWldzcExseHVJQ3BjYmlBcVhHNGdLaUE4YUhJZ0x6NWNiaUFxWEc0Z0tpQkZlR0Z0Y0d4bElIUm9ZWFFnYzJodmQzTWdZU0JnVkdsdFpVVnVaMmx1WldBZ2NuVnVibWx1WnlCcGJpQmhJR0JUWTJobFpIVnNaWEpnSUhSb1lYUWdZMjkxYm5SeklIVndYRzRnS2lCaGRDQmhJR2RwZG1WdUlHWnlaWEYxWlc1amVUcGNiaUFxSUh0QWJHbHVheUJvZEhSd2N6b3ZMM0poZDJkcGRDNWpiMjB2ZDJGMlpYTnFjeTkzWVhabGN5MWhkV1JwYnk5dFlYTjBaWEl2WlhoaGJYQnNaWE12ZEdsdFpTMWxibWRwYm1VdWFIUnRiSDFjYmlBcVhHNGdLaUJBWlhoaGJYQnNaVnh1SUNvZ2FXMXdiM0owSUNvZ1lYTWdZWFZrYVc4Z1puSnZiU0FuZDJGMlpYTXRZWFZrYVc4bk8xeHVJQ3BjYmlBcUlHTnNZWE56SUUxNVJXNW5hVzVsSUdWNGRHVnVaSE1nWVhWa2FXOHVWR2x0WlVWdVoybHVaU0I3WEc0Z0tpQWdJR052Ym5OMGNuVmpkRzl5S0NrZ2UxeHVJQ29nSUNBZ0lITjFjR1Z5S0NrN1hHNGdLaUFnSUNBZ0x5OGdMaTR1WEc0Z0tpQWdJSDFjYmlBcUlIMWNiaUFxWEc0Z0tpOWNibU5zWVhOeklGUnBiV1ZGYm1kcGJtVWdlMXh1SUNCamIyNXpkSEoxWTNSdmNpZ3BJSHRjYmlBZ0lDQXZLaXBjYmlBZ0lDQWdLaUJVYUdVZ1pXNW5hVzVsSjNNZ2JXRnpkR1Z5TGx4dUlDQWdJQ0FxWEc0Z0lDQWdJQ29nUUhSNWNHVWdlMDFwZUdWa2ZWeHVJQ0FnSUNBcUlFQnVZVzFsSUcxaGMzUmxjbHh1SUNBZ0lDQXFJRUJ0WlcxaVpYSnZaaUJVYVcxbFJXNW5hVzVsWEc0Z0lDQWdJQ292WEc0Z0lDQWdkR2hwY3k1dFlYTjBaWElnUFNCdWRXeHNPMXh1SUNCOVhHNWNiaUFnTHlvcVhHNGdJQ0FxSUZSb1pTQjBhVzFsSUdWdVoybHVaU2R6SUdOMWNuSmxiblFnS0cxaGMzUmxjaWtnZEdsdFpTNWNiaUFnSUNwY2JpQWdJQ29nUUhSNWNHVWdlMDUxYldKbGNuMWNiaUFnSUNvZ1FHMWxiV0psY205bUlGUnBiV1ZGYm1kcGJtVmNiaUFnSUNvZ1FISmxZV1J2Ym14NVhHNGdJQ0FxTDF4dUlDQm5aWFFnWTNWeWNtVnVkRlJwYldVb0tTQjdYRzRnSUNBZ2FXWWdLSFJvYVhNdWJXRnpkR1Z5S1Z4dUlDQWdJQ0FnY21WMGRYSnVJSFJvYVhNdWJXRnpkR1Z5TG1OMWNuSmxiblJVYVcxbE8xeHVYRzRnSUNBZ2NtVjBkWEp1SUhWdVpHVm1hVzVsWkR0Y2JpQWdmVnh1WEc0Z0lDOHFLbHh1SUNBZ0tpQlVhR1VnZEdsdFpTQmxibWRwYm1VbmN5QmpkWEp5Wlc1MElDaHRZWE4wWlhJcElHRjFaR2x2SUhScGJXVXVYRzRnSUNBcVhHNGdJQ0FxSUVCMGVYQmxJSHRPZFcxaVpYSjlYRzRnSUNBcUlFQnRaVzFpWlhKdlppQlVhVzFsUlc1bmFXNWxYRzRnSUNBcUlFQnlaV0ZrYjI1c2VWeHVJQ0FnS2k5Y2JpQWdaMlYwSUdGMVpHbHZWR2x0WlNncElIdGNiaUFnSUNCcFppQW9kR2hwY3k1dFlYTjBaWElwWEc0Z0lDQWdJQ0J5WlhSMWNtNGdkR2hwY3k1dFlYTjBaWEl1WVhWa2FXOVVhVzFsTzF4dVhHNGdJQ0FnY21WMGRYSnVJSFZ1WkdWbWFXNWxaRHRjYmlBZ2ZWeHVYRzRnSUM4cUtseHVJQ0FnS2lCVWFHVWdkR2x0WlNCbGJtZHBibVVuY3lCamRYSnlaVzUwSUNodFlYTjBaWElwSUhCdmMybDBhVzl1TGx4dUlDQWdLbHh1SUNBZ0tpQkFkSGx3WlNCN1RuVnRZbVZ5ZlZ4dUlDQWdLaUJBYldWdFltVnliMllnVkdsdFpVVnVaMmx1WlZ4dUlDQWdLaUJBY21WaFpHOXViSGxjYmlBZ0lDb3ZYRzRnSUdkbGRDQmpkWEp5Wlc1MFVHOXphWFJwYjI0b0tTQjdYRzRnSUNBZ2RtRnlJRzFoYzNSbGNpQTlJSFJvYVhNdWJXRnpkR1Z5TzF4dVhHNGdJQ0FnYVdZZ0tHMWhjM1JsY2lBbUppQnRZWE4wWlhJdVkzVnljbVZ1ZEZCdmMybDBhVzl1SUNFOVBTQjFibVJsWm1sdVpXUXBYRzRnSUNBZ0lDQnlaWFIxY200Z2JXRnpkR1Z5TG1OMWNuSmxiblJRYjNOcGRHbHZianRjYmx4dUlDQWdJSEpsZEhWeWJpQjFibVJsWm1sdVpXUTdYRzRnSUgxY2JseHVJQ0F2S2lwY2JpQWdJQ29nVTJOb1pXUjFiR1ZrSUdsdWRHVnlabUZqWlZ4dUlDQWdLaUFnSUMwZ1lXUjJZVzVqWlZScGJXVW9kR2x0WlNrc0lHTmhiR3hsWkNCMGJ5Qm5aVzVsY21GMFpTQnVaWGgwSUdWMlpXNTBJR0YwSUdkcGRtVnVJSFJwYldVc0lISmxkSFZ5Ym5NZ2JtVjRkQ0IwYVcxbFhHNGdJQ0FxWEc0Z0lDQXFJRUJ6ZEdGMGFXTmNiaUFnSUNvZ1FHMWxiV0psY205bUlGUnBiV1ZGYm1kcGJtVmNiaUFnSUNvdlhHNGdJSE4wWVhScFl5QnBiWEJzWlcxbGJuUnpVMk5vWldSMWJHVmtLR1Z1WjJsdVpTa2dlMXh1SUNBZ0lISmxkSFZ5YmlBb1pXNW5hVzVsTG1Ga2RtRnVZMlZVYVcxbElDWW1JR1Z1WjJsdVpTNWhaSFpoYm1ObFZHbHRaU0JwYm5OMFlXNWpaVzltSUVaMWJtTjBhVzl1S1R0Y2JpQWdmVnh1WEc0Z0lISmxjMlYwVkdsdFpTaDBhVzFsSUQwZ2RXNWtaV1pwYm1Wa0tTQjdYRzRnSUNBZ2FXWWdLSFJvYVhNdWJXRnpkR1Z5S1Z4dUlDQWdJQ0FnZEdocGN5NXRZWE4wWlhJdWNtVnpaWFJGYm1kcGJtVlVhVzFsS0hSb2FYTXNJSFJwYldVcE8xeHVJQ0I5WEc1Y2JpQWdMeW9xWEc0Z0lDQXFJRlJ5WVc1emNHOXlkR1ZrSUdsdWRHVnlabUZqWlZ4dUlDQWdLaUFnSUMwZ2MzbHVZMUJ2YzJsMGFXOXVLSFJwYldVc0lIQnZjMmwwYVc5dUxDQnpjR1ZsWkNrc0lHTmhiR3hsWkNCMGJ5QnlaWEJ2YzJsMGFXOXVJRlJwYldWRmJtZHBibVVzSUhKbGRIVnlibk1nYm1WNGRDQndiM05wZEdsdmJseHVJQ0FnS2lBZ0lDMGdZV1IyWVc1alpWQnZjMmwwYVc5dUtIUnBiV1VzSUhCdmMybDBhVzl1TENCemNHVmxaQ2tzSUdOaGJHeGxaQ0IwYnlCblpXNWxjbUYwWlNCdVpYaDBJR1YyWlc1MElHRjBJR2RwZG1WdUlIUnBiV1VnWVc1a0lIQnZjMmwwYVc5dUxDQnlaWFIxY201eklHNWxlSFFnY0c5emFYUnBiMjVjYmlBZ0lDcGNiaUFnSUNvZ1FITjBZWFJwWTF4dUlDQWdLaUJBYldWdFltVnliMllnVkdsdFpVVnVaMmx1WlZ4dUlDQWdLaTljYmlBZ2MzUmhkR2xqSUdsdGNHeGxiV1Z1ZEhOVWNtRnVjM0J2Y25SbFpDaGxibWRwYm1VcElIdGNiaUFnSUNCeVpYUjFjbTRnS0Z4dUlDQWdJQ0FnWlc1bmFXNWxMbk41Ym1OUWIzTnBkR2x2YmlBbUppQmxibWRwYm1VdWMzbHVZMUJ2YzJsMGFXOXVJR2x1YzNSaGJtTmxiMllnUm5WdVkzUnBiMjRnSmlaY2JpQWdJQ0FnSUdWdVoybHVaUzVoWkhaaGJtTmxVRzl6YVhScGIyNGdKaVlnWlc1bmFXNWxMbUZrZG1GdVkyVlFiM05wZEdsdmJpQnBibk4wWVc1alpXOW1JRVoxYm1OMGFXOXVYRzRnSUNBZ0tUdGNiaUFnZlZ4dVhHNGdJSEpsYzJWMFVHOXphWFJwYjI0b2NHOXphWFJwYjI0Z1BTQjFibVJsWm1sdVpXUXBJSHRjYmlBZ0lDQnBaaUFvZEdocGN5NXRZWE4wWlhJcFhHNGdJQ0FnSUNCMGFHbHpMbTFoYzNSbGNpNXlaWE5sZEVWdVoybHVaVkJ2YzJsMGFXOXVLSFJvYVhNc0lIQnZjMmwwYVc5dUtUdGNiaUFnZlZ4dVhHNGdJQzhxS2x4dUlDQWdLaUJUY0dWbFpDMWpiMjUwY205c2JHVmtJR2x1ZEdWeVptRmpaVnh1SUNBZ0tpQWdJQzBnYzNsdVkxTndaV1ZrS0hScGJXVXNJSEJ2YzJsMGFXOXVMQ0J6Y0dWbFpDd2dLU3dnWTJGc2JHVmtJSFJ2WEc0Z0lDQXFYRzRnSUNBcUlFQnpkR0YwYVdOY2JpQWdJQ29nUUcxbGJXSmxjbTltSUZScGJXVkZibWRwYm1WY2JpQWdJQ292WEc0Z0lITjBZWFJwWXlCcGJYQnNaVzFsYm5SelUzQmxaV1JEYjI1MGNtOXNiR1ZrS0dWdVoybHVaU2tnZTF4dUlDQWdJSEpsZEhWeWJpQW9aVzVuYVc1bExuTjVibU5UY0dWbFpDQW1KaUJsYm1kcGJtVXVjM2x1WTFOd1pXVmtJR2x1YzNSaGJtTmxiMllnUm5WdVkzUnBiMjRwTzF4dUlDQjlYRzU5WEc1Y2JtVjRjRzl5ZENCa1pXWmhkV3gwSUZScGJXVkZibWRwYm1VN1hHNGlYWDA9IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5cbnZhciBfY2xhc3NDYWxsQ2hlY2syID0gcmVxdWlyZShcImJhYmVsLXJ1bnRpbWUvaGVscGVycy9jbGFzc0NhbGxDaGVja1wiKTtcblxudmFyIF9jbGFzc0NhbGxDaGVjazMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9jbGFzc0NhbGxDaGVjazIpO1xuXG52YXIgX2NyZWF0ZUNsYXNzMiA9IHJlcXVpcmUoXCJiYWJlbC1ydW50aW1lL2hlbHBlcnMvY3JlYXRlQ2xhc3NcIik7XG5cbnZhciBfY3JlYXRlQ2xhc3MzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfY3JlYXRlQ2xhc3MyKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxuLy8gd29ya3MgYnkgcmVmZXJlbmNlXG5mdW5jdGlvbiBzd2FwKGFyciwgaTEsIGkyKSB7XG4gIHZhciB0bXAgPSBhcnJbaTFdO1xuICBhcnJbaTFdID0gYXJyW2kyXTtcbiAgYXJyW2kyXSA9IHRtcDtcbn1cblxuLy8gaHR0cHM6Ly9qc3BlcmYuY29tL2pzLWZvci1sb29wLXZzLWFycmF5LWluZGV4b2YvMzQ2XG5mdW5jdGlvbiBpbmRleE9mKGFyciwgZWwpIHtcbiAgdmFyIGwgPSBhcnIubGVuZ3RoO1xuICAvLyBpZ25vcmUgZmlyc3QgZWxlbWVudCBhcyBpdCBjYW4ndCBiZSBhIGVudHJ5XG4gIGZvciAodmFyIGkgPSAxOyBpIDwgbDsgaSsrKSB7XG4gICAgaWYgKGFycltpXSA9PT0gZWwpIHtcbiAgICAgIHJldHVybiBpO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiAtMTtcbn1cblxuLyoqXG4gKiBEZWZpbmUgaWYgYHRpbWUxYCBzaG91bGQgYmUgbG93ZXIgaW4gdGhlIHRvcG9ncmFwaHkgdGhhbiBgdGltZTJgLlxuICogSXMgZHluYW1pY2FsbHkgYWZmZWN0ZWQgdG8gdGhlIHByaW9yaXR5IHF1ZXVlIGFjY29yZGluZyB0byBoYW5kbGUgYG1pbmAgYW5kIGBtYXhgIGhlYXAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7TnVtYmVyfSB0aW1lMVxuICogQHBhcmFtIHtOdW1iZXJ9IHRpbWUyXG4gKiBAcmV0dXJuIHtCb29sZWFufVxuICovXG52YXIgX2lzTG93ZXJNYXhIZWFwID0gZnVuY3Rpb24gX2lzTG93ZXJNYXhIZWFwKHRpbWUxLCB0aW1lMikge1xuICByZXR1cm4gdGltZTEgPCB0aW1lMjtcbn07XG5cbnZhciBfaXNMb3dlck1pbkhlYXAgPSBmdW5jdGlvbiBfaXNMb3dlck1pbkhlYXAodGltZTEsIHRpbWUyKSB7XG4gIHJldHVybiB0aW1lMSA+IHRpbWUyO1xufTtcblxuLyoqXG4gKiBEZWZpbmUgaWYgYHRpbWUxYCBzaG91bGQgYmUgaGlnaGVyIGluIHRoZSB0b3BvZ3JhcGh5IHRoYW4gYHRpbWUyYC5cbiAqIElzIGR5bmFtaWNhbGx5IGFmZmVjdGVkIHRvIHRoZSBwcmlvcml0eSBxdWV1ZSBhY2NvcmRpbmcgdG8gaGFuZGxlIGBtaW5gIGFuZCBgbWF4YCBoZWFwLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge051bWJlcn0gdGltZTFcbiAqIEBwYXJhbSB7TnVtYmVyfSB0aW1lMlxuICogQHJldHVybiB7Qm9vbGVhbn1cbiAqL1xudmFyIF9pc0hpZ2hlck1heEhlYXAgPSBmdW5jdGlvbiBfaXNIaWdoZXJNYXhIZWFwKHRpbWUxLCB0aW1lMikge1xuICByZXR1cm4gdGltZTEgPiB0aW1lMjtcbn07XG5cbnZhciBfaXNIaWdoZXJNaW5IZWFwID0gZnVuY3Rpb24gX2lzSGlnaGVyTWluSGVhcCh0aW1lMSwgdGltZTIpIHtcbiAgcmV0dXJuIHRpbWUxIDwgdGltZTI7XG59O1xuXG52YXIgUE9TSVRJVkVfSU5GSU5JVFkgPSBOdW1iZXIuUE9TSVRJVkVfSU5GSU5JVFk7XG5cbi8qKlxuICogUHJpb3JpdHkgcXVldWUgaW1wbGVtZW50aW5nIGEgYmluYXJ5IGhlYXAuXG4gKiBBY3RzIGFzIGEgbWluIGhlYXAgYnkgZGVmYXVsdCwgY2FuIGJlIGR5bmFtaWNhbGx5IGNoYW5nZWQgdG8gYSBtYXggaGVhcFxuICogYnkgc2V0dGluZyBgcmV2ZXJzZWAgdG8gdHJ1ZS5cbiAqXG4gKiBfbm90ZV86IHRoZSBxdWV1ZSBjcmVhdGVzIGFuZCBtYWludGFpbnMgYSBuZXcgcHJvcGVydHkgKGkuZS4gYHF1ZXVlVGltZWApXG4gKiB0byBlYWNoIG9iamVjdCBhZGRlZC5cbiAqXG4gKiBAcGFyYW0ge051bWJlcn0gW2hlYXBMZW5ndGg9MTAwXSAtIERlZmF1bHQgc2l6ZSBvZiB0aGUgYXJyYXkgdXNlZCB0byBjcmVhdGUgdGhlIGhlYXAuXG4gKi9cblxudmFyIFByaW9yaXR5UXVldWUgPSBmdW5jdGlvbiAoKSB7XG4gIGZ1bmN0aW9uIFByaW9yaXR5UXVldWUoKSB7XG4gICAgdmFyIGhlYXBMZW5ndGggPSBhcmd1bWVudHMubGVuZ3RoID4gMCAmJiBhcmd1bWVudHNbMF0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1swXSA6IDEwMDtcbiAgICAoMCwgX2NsYXNzQ2FsbENoZWNrMy5kZWZhdWx0KSh0aGlzLCBQcmlvcml0eVF1ZXVlKTtcblxuICAgIC8qKlxuICAgICAqIFBvaW50ZXIgdG8gdGhlIGZpcnN0IGVtcHR5IGluZGV4IG9mIHRoZSBoZWFwLlxuICAgICAqIEB0eXBlIHtOdW1iZXJ9XG4gICAgICogQG1lbWJlcm9mIFByaW9yaXR5UXVldWVcbiAgICAgKiBAbmFtZSBfY3VycmVudExlbmd0aFxuICAgICAqIEBwcml2YXRlXG4gICAgICovXG4gICAgdGhpcy5fY3VycmVudExlbmd0aCA9IDE7XG5cbiAgICAvKipcbiAgICAgKiBBcnJheSBvZiB0aGUgc29ydGVkIGluZGV4ZXMgb2YgdGhlIGVudHJpZXMsIHRoZSBhY3R1YWwgaGVhcC4gSWdub3JlIHRoZSBpbmRleCAwLlxuICAgICAqIEB0eXBlIHtBcnJheX1cbiAgICAgKiBAbWVtYmVyb2YgUHJpb3JpdHlRdWV1ZVxuICAgICAqIEBuYW1lIF9oZWFwXG4gICAgICogQHByaXZhdGVcbiAgICAgKi9cbiAgICB0aGlzLl9oZWFwID0gbmV3IEFycmF5KGhlYXBMZW5ndGggKyAxKTtcblxuICAgIC8qKlxuICAgICAqIFR5cGUgb2YgdGhlIHF1ZXVlOiBgbWluYCBoZWFwIGlmIGBmYWxzZWAsIGBtYXhgIGhlYXAgaWYgYHRydWVgXG4gICAgICogQHR5cGUge0Jvb2xlYW59XG4gICAgICogQG1lbWJlcm9mIFByaW9yaXR5UXVldWVcbiAgICAgKiBAbmFtZSBfcmV2ZXJzZVxuICAgICAqIEBwcml2YXRlXG4gICAgICovXG4gICAgdGhpcy5fcmV2ZXJzZSA9IG51bGw7XG5cbiAgICAvLyBpbml0aWFsaXplIGNvbXBhcmUgZnVuY3Rpb25zXG4gICAgdGhpcy5yZXZlcnNlID0gZmFsc2U7XG4gIH1cblxuICAvKipcbiAgICogVGltZSBvZiB0aGUgZmlyc3QgZWxlbWVudCBpbiB0aGUgYmluYXJ5IGhlYXAuXG4gICAqIEByZXR1cm5zIHtOdW1iZXJ9XG4gICAqL1xuXG5cbiAgKDAsIF9jcmVhdGVDbGFzczMuZGVmYXVsdCkoUHJpb3JpdHlRdWV1ZSwgW3tcbiAgICBrZXk6IFwiX2J1YmJsZVVwXCIsXG5cblxuICAgIC8qKlxuICAgICAqIEZpeCB0aGUgaGVhcCBieSBtb3ZpbmcgYW4gZW50cnkgdG8gYSBuZXcgdXBwZXIgcG9zaXRpb24uXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBzdGFydEluZGV4IC0gVGhlIGluZGV4IG9mIHRoZSBlbnRyeSB0byBtb3ZlLlxuICAgICAqL1xuICAgIHZhbHVlOiBmdW5jdGlvbiBfYnViYmxlVXAoc3RhcnRJbmRleCkge1xuICAgICAgdmFyIGVudHJ5ID0gdGhpcy5faGVhcFtzdGFydEluZGV4XTtcblxuICAgICAgdmFyIGluZGV4ID0gc3RhcnRJbmRleDtcbiAgICAgIHZhciBwYXJlbnRJbmRleCA9IE1hdGguZmxvb3IoaW5kZXggLyAyKTtcbiAgICAgIHZhciBwYXJlbnQgPSB0aGlzLl9oZWFwW3BhcmVudEluZGV4XTtcblxuICAgICAgd2hpbGUgKHBhcmVudCAmJiB0aGlzLl9pc0hpZ2hlcihlbnRyeS5xdWV1ZVRpbWUsIHBhcmVudC5xdWV1ZVRpbWUpKSB7XG4gICAgICAgIHN3YXAodGhpcy5faGVhcCwgaW5kZXgsIHBhcmVudEluZGV4KTtcblxuICAgICAgICBpbmRleCA9IHBhcmVudEluZGV4O1xuICAgICAgICBwYXJlbnRJbmRleCA9IE1hdGguZmxvb3IoaW5kZXggLyAyKTtcbiAgICAgICAgcGFyZW50ID0gdGhpcy5faGVhcFtwYXJlbnRJbmRleF07XG4gICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogRml4IHRoZSBoZWFwIGJ5IG1vdmluZyBhbiBlbnRyeSB0byBhIG5ldyBsb3dlciBwb3NpdGlvbi5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IHN0YXJ0SW5kZXggLSBUaGUgaW5kZXggb2YgdGhlIGVudHJ5IHRvIG1vdmUuXG4gICAgICovXG5cbiAgfSwge1xuICAgIGtleTogXCJfYnViYmxlRG93blwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBfYnViYmxlRG93bihzdGFydEluZGV4KSB7XG4gICAgICB2YXIgZW50cnkgPSB0aGlzLl9oZWFwW3N0YXJ0SW5kZXhdO1xuXG4gICAgICB2YXIgaW5kZXggPSBzdGFydEluZGV4O1xuICAgICAgdmFyIGMxaW5kZXggPSBpbmRleCAqIDI7XG4gICAgICB2YXIgYzJpbmRleCA9IGMxaW5kZXggKyAxO1xuICAgICAgdmFyIGNoaWxkMSA9IHRoaXMuX2hlYXBbYzFpbmRleF07XG4gICAgICB2YXIgY2hpbGQyID0gdGhpcy5faGVhcFtjMmluZGV4XTtcblxuICAgICAgd2hpbGUgKGNoaWxkMSAmJiB0aGlzLl9pc0xvd2VyKGVudHJ5LnF1ZXVlVGltZSwgY2hpbGQxLnF1ZXVlVGltZSkgfHwgY2hpbGQyICYmIHRoaXMuX2lzTG93ZXIoZW50cnkucXVldWVUaW1lLCBjaGlsZDIucXVldWVUaW1lKSkge1xuICAgICAgICAvLyBzd2FwIHdpdGggdGhlIG1pbmltdW0gY2hpbGRcbiAgICAgICAgdmFyIHRhcmdldEluZGV4ID0gdm9pZCAwO1xuXG4gICAgICAgIGlmIChjaGlsZDIpIHRhcmdldEluZGV4ID0gdGhpcy5faXNIaWdoZXIoY2hpbGQxLnF1ZXVlVGltZSwgY2hpbGQyLnF1ZXVlVGltZSkgPyBjMWluZGV4IDogYzJpbmRleDtlbHNlIHRhcmdldEluZGV4ID0gYzFpbmRleDtcblxuICAgICAgICBzd2FwKHRoaXMuX2hlYXAsIGluZGV4LCB0YXJnZXRJbmRleCk7XG5cbiAgICAgICAgLy8gdXBkYXRlIHRvIGZpbmQgbmV4dCBjaGlsZHJlblxuICAgICAgICBpbmRleCA9IHRhcmdldEluZGV4O1xuICAgICAgICBjMWluZGV4ID0gaW5kZXggKiAyO1xuICAgICAgICBjMmluZGV4ID0gYzFpbmRleCArIDE7XG4gICAgICAgIGNoaWxkMSA9IHRoaXMuX2hlYXBbYzFpbmRleF07XG4gICAgICAgIGNoaWxkMiA9IHRoaXMuX2hlYXBbYzJpbmRleF07XG4gICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQnVpbGQgdGhlIGhlYXAgKGZyb20gYm90dG9tIHVwKS5cbiAgICAgKi9cblxuICB9LCB7XG4gICAga2V5OiBcImJ1aWxkSGVhcFwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBidWlsZEhlYXAoKSB7XG4gICAgICAvLyBmaW5kIHRoZSBpbmRleCBvZiB0aGUgbGFzdCBpbnRlcm5hbCBub2RlXG4gICAgICAvLyBAdG9kbyAtIG1ha2Ugc3VyZSB0aGF0J3MgdGhlIHJpZ2h0IHdheSB0byBkby5cbiAgICAgIHZhciBtYXhJbmRleCA9IE1hdGguZmxvb3IoKHRoaXMuX2N1cnJlbnRMZW5ndGggLSAxKSAvIDIpO1xuXG4gICAgICBmb3IgKHZhciBpID0gbWF4SW5kZXg7IGkgPiAwOyBpLS0pIHtcbiAgICAgICAgdGhpcy5fYnViYmxlRG93bihpKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBJbnNlcnQgYSBuZXcgb2JqZWN0IGluIHRoZSBiaW5hcnkgaGVhcCBhbmQgc29ydCBpdC5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBlbnRyeSAtIEVudHJ5IHRvIGluc2VydC5cbiAgICAgKiBAcGFyYW0ge051bWJlcn0gdGltZSAtIFRpbWUgYXQgd2hpY2ggdGhlIGVudHJ5IHNob3VsZCBiZSBvcmRlcmVyLlxuICAgICAqIEByZXR1cm5zIHtOdW1iZXJ9IC0gVGltZSBvZiB0aGUgZmlyc3QgZW50cnkgaW4gdGhlIGhlYXAuXG4gICAgICovXG5cbiAgfSwge1xuICAgIGtleTogXCJpbnNlcnRcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gaW5zZXJ0KGVudHJ5LCB0aW1lKSB7XG4gICAgICBpZiAoTWF0aC5hYnModGltZSkgIT09IFBPU0lUSVZFX0lORklOSVRZKSB7XG4gICAgICAgIGVudHJ5LnF1ZXVlVGltZSA9IHRpbWU7XG4gICAgICAgIC8vIGFkZCB0aGUgbmV3IGVudHJ5IGF0IHRoZSBlbmQgb2YgdGhlIGhlYXBcbiAgICAgICAgdGhpcy5faGVhcFt0aGlzLl9jdXJyZW50TGVuZ3RoXSA9IGVudHJ5O1xuICAgICAgICAvLyBidWJibGUgaXQgdXBcbiAgICAgICAgdGhpcy5fYnViYmxlVXAodGhpcy5fY3VycmVudExlbmd0aCk7XG4gICAgICAgIHRoaXMuX2N1cnJlbnRMZW5ndGggKz0gMTtcblxuICAgICAgICByZXR1cm4gdGhpcy50aW1lO1xuICAgICAgfVxuXG4gICAgICBlbnRyeS5xdWV1ZVRpbWUgPSB1bmRlZmluZWQ7XG4gICAgICByZXR1cm4gdGhpcy5yZW1vdmUoZW50cnkpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIE1vdmUgYSBnaXZlbiBlbnRyeSB0byBhIG5ldyBwb3NpdGlvbi5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBlbnRyeSAtIEVudHJ5IHRvIG1vdmUuXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IHRpbWUgLSBUaW1lIGF0IHdoaWNoIHRoZSBlbnRyeSBzaG91bGQgYmUgb3JkZXJlci5cbiAgICAgKiBAcmV0dXJuIHtOdW1iZXJ9IC0gVGltZSBvZiBmaXJzdCBlbnRyeSBpbiB0aGUgaGVhcC5cbiAgICAgKi9cblxuICB9LCB7XG4gICAga2V5OiBcIm1vdmVcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gbW92ZShlbnRyeSwgdGltZSkge1xuICAgICAgaWYgKE1hdGguYWJzKHRpbWUpICE9PSBQT1NJVElWRV9JTkZJTklUWSkge1xuICAgICAgICB2YXIgaW5kZXggPSBpbmRleE9mKHRoaXMuX2hlYXAsIGVudHJ5KTtcblxuICAgICAgICBpZiAoaW5kZXggIT09IC0xKSB7XG4gICAgICAgICAgZW50cnkucXVldWVUaW1lID0gdGltZTtcbiAgICAgICAgICAvLyBkZWZpbmUgaWYgdGhlIGVudHJ5IHNob3VsZCBiZSBidWJibGVkIHVwIG9yIGRvd25cbiAgICAgICAgICB2YXIgcGFyZW50ID0gdGhpcy5faGVhcFtNYXRoLmZsb29yKGluZGV4IC8gMildO1xuXG4gICAgICAgICAgaWYgKHBhcmVudCAmJiB0aGlzLl9pc0hpZ2hlcih0aW1lLCBwYXJlbnQucXVldWVUaW1lKSkgdGhpcy5fYnViYmxlVXAoaW5kZXgpO2Vsc2UgdGhpcy5fYnViYmxlRG93bihpbmRleCk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gdGhpcy50aW1lO1xuICAgICAgfVxuXG4gICAgICBlbnRyeS5xdWV1ZVRpbWUgPSB1bmRlZmluZWQ7XG4gICAgICByZXR1cm4gdGhpcy5yZW1vdmUoZW50cnkpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFJlbW92ZSBhbiBlbnRyeSBmcm9tIHRoZSBoZWFwIGFuZCBmaXggdGhlIGhlYXAuXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gZW50cnkgLSBFbnRyeSB0byByZW1vdmUuXG4gICAgICogQHJldHVybiB7TnVtYmVyfSAtIFRpbWUgb2YgZmlyc3QgZW50cnkgaW4gdGhlIGhlYXAuXG4gICAgICovXG5cbiAgfSwge1xuICAgIGtleTogXCJyZW1vdmVcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gcmVtb3ZlKGVudHJ5KSB7XG4gICAgICAvLyBmaW5kIHRoZSBpbmRleCBvZiB0aGUgZW50cnlcbiAgICAgIHZhciBpbmRleCA9IGluZGV4T2YodGhpcy5faGVhcCwgZW50cnkpO1xuXG4gICAgICBpZiAoaW5kZXggIT09IC0xKSB7XG4gICAgICAgIHZhciBsYXN0SW5kZXggPSB0aGlzLl9jdXJyZW50TGVuZ3RoIC0gMTtcblxuICAgICAgICAvLyBpZiB0aGUgZW50cnkgaXMgdGhlIGxhc3Qgb25lXG4gICAgICAgIGlmIChpbmRleCA9PT0gbGFzdEluZGV4KSB7XG4gICAgICAgICAgLy8gcmVtb3ZlIHRoZSBlbGVtZW50IGZyb20gaGVhcFxuICAgICAgICAgIHRoaXMuX2hlYXBbbGFzdEluZGV4XSA9IHVuZGVmaW5lZDtcbiAgICAgICAgICAvLyB1cGRhdGUgY3VycmVudCBsZW5ndGhcbiAgICAgICAgICB0aGlzLl9jdXJyZW50TGVuZ3RoID0gbGFzdEluZGV4O1xuXG4gICAgICAgICAgcmV0dXJuIHRoaXMudGltZTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAvLyBzd2FwIHdpdGggdGhlIGxhc3QgZWxlbWVudCBvZiB0aGUgaGVhcFxuICAgICAgICAgIHN3YXAodGhpcy5faGVhcCwgaW5kZXgsIGxhc3RJbmRleCk7XG4gICAgICAgICAgLy8gcmVtb3ZlIHRoZSBlbGVtZW50IGZyb20gaGVhcFxuICAgICAgICAgIHRoaXMuX2hlYXBbbGFzdEluZGV4XSA9IHVuZGVmaW5lZDtcblxuICAgICAgICAgIGlmIChpbmRleCA9PT0gMSkge1xuICAgICAgICAgICAgdGhpcy5fYnViYmxlRG93bigxKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgLy8gYnViYmxlIHRoZSAoZXggbGFzdCkgZWxlbWVudCB1cCBvciBkb3duIGFjY29yZGluZyB0byBpdHMgbmV3IGNvbnRleHRcbiAgICAgICAgICAgIHZhciBfZW50cnkgPSB0aGlzLl9oZWFwW2luZGV4XTtcbiAgICAgICAgICAgIHZhciBwYXJlbnQgPSB0aGlzLl9oZWFwW01hdGguZmxvb3IoaW5kZXggLyAyKV07XG5cbiAgICAgICAgICAgIGlmIChwYXJlbnQgJiYgdGhpcy5faXNIaWdoZXIoX2VudHJ5LnF1ZXVlVGltZSwgcGFyZW50LnF1ZXVlVGltZSkpIHRoaXMuX2J1YmJsZVVwKGluZGV4KTtlbHNlIHRoaXMuX2J1YmJsZURvd24oaW5kZXgpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIC8vIHVwZGF0ZSBjdXJyZW50IGxlbmd0aFxuICAgICAgICB0aGlzLl9jdXJyZW50TGVuZ3RoID0gbGFzdEluZGV4O1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gdGhpcy50aW1lO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENsZWFyIHRoZSBxdWV1ZS5cbiAgICAgKi9cblxuICB9LCB7XG4gICAga2V5OiBcImNsZWFyXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGNsZWFyKCkge1xuICAgICAgdGhpcy5fY3VycmVudExlbmd0aCA9IDE7XG4gICAgICB0aGlzLl9oZWFwID0gbmV3IEFycmF5KHRoaXMuX2hlYXAubGVuZ3RoKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBEZWZpbmVzIGlmIHRoZSBxdWV1ZSBjb250YWlucyB0aGUgZ2l2ZW4gYGVudHJ5YC5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBlbnRyeSAtIEVudHJ5IHRvIGJlIGNoZWNrZWRcbiAgICAgKiBAcmV0dXJuIHtCb29sZWFufVxuICAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6IFwiaGFzXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGhhcyhlbnRyeSkge1xuICAgICAgcmV0dXJuIHRoaXMuX2hlYXAuaW5kZXhPZihlbnRyeSkgIT09IC0xO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJ0aW1lXCIsXG4gICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICBpZiAodGhpcy5fY3VycmVudExlbmd0aCA+IDEpIHJldHVybiB0aGlzLl9oZWFwWzFdLnF1ZXVlVGltZTtcblxuICAgICAgcmV0dXJuIEluZmluaXR5O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEZpcnN0IGVsZW1lbnQgaW4gdGhlIGJpbmFyeSBoZWFwLlxuICAgICAqIEByZXR1cm5zIHtOdW1iZXJ9XG4gICAgICogQHJlYWRvbmx5XG4gICAgICovXG5cbiAgfSwge1xuICAgIGtleTogXCJoZWFkXCIsXG4gICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICByZXR1cm4gdGhpcy5faGVhcFsxXTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDaGFuZ2UgdGhlIG9yZGVyIG9mIHRoZSBxdWV1ZSAobWF4IGhlYXAgaWYgdHJ1ZSwgbWluIGhlYXAgaWYgZmFsc2UpLFxuICAgICAqIHJlYnVpbGQgdGhlIGhlYXAgd2l0aCB0aGUgZXhpc3RpbmcgZW50cmllcy5cbiAgICAgKlxuICAgICAqIEB0eXBlIHtCb29sZWFufVxuICAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6IFwicmV2ZXJzZVwiLFxuICAgIHNldDogZnVuY3Rpb24gc2V0KHZhbHVlKSB7XG4gICAgICBpZiAodmFsdWUgIT09IHRoaXMuX3JldmVyc2UpIHtcbiAgICAgICAgdGhpcy5fcmV2ZXJzZSA9IHZhbHVlO1xuXG4gICAgICAgIGlmICh0aGlzLl9yZXZlcnNlID09PSB0cnVlKSB7XG4gICAgICAgICAgdGhpcy5faXNMb3dlciA9IF9pc0xvd2VyTWF4SGVhcDtcbiAgICAgICAgICB0aGlzLl9pc0hpZ2hlciA9IF9pc0hpZ2hlck1heEhlYXA7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdGhpcy5faXNMb3dlciA9IF9pc0xvd2VyTWluSGVhcDtcbiAgICAgICAgICB0aGlzLl9pc0hpZ2hlciA9IF9pc0hpZ2hlck1pbkhlYXA7XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLmJ1aWxkSGVhcCgpO1xuICAgICAgfVxuICAgIH0sXG4gICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICByZXR1cm4gdGhpcy5fcmV2ZXJzZTtcbiAgICB9XG4gIH1dKTtcbiAgcmV0dXJuIFByaW9yaXR5UXVldWU7XG59KCk7XG5cbmV4cG9ydHMuZGVmYXVsdCA9IFByaW9yaXR5UXVldWU7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247Y2hhcnNldD11dGYtODtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJbEJ5YVc5eWFYUjVVWFZsZFdVdWFuTWlYU3dpYm1GdFpYTWlPbHNpYzNkaGNDSXNJbUZ5Y2lJc0lta3hJaXdpYVRJaUxDSjBiWEFpTENKcGJtUmxlRTltSWl3aVpXd2lMQ0pzSWl3aWJHVnVaM1JvSWl3aWFTSXNJbDlwYzB4dmQyVnlUV0Y0U0dWaGNDSXNJblJwYldVeElpd2lkR2x0WlRJaUxDSmZhWE5NYjNkbGNrMXBia2hsWVhBaUxDSmZhWE5JYVdkb1pYSk5ZWGhJWldGd0lpd2lYMmx6U0dsbmFHVnlUV2x1U0dWaGNDSXNJbEJQVTBsVVNWWkZYMGxPUmtsT1NWUlpJaXdpVG5WdFltVnlJaXdpVUhKcGIzSnBkSGxSZFdWMVpTSXNJbWhsWVhCTVpXNW5kR2dpTENKZlkzVnljbVZ1ZEV4bGJtZDBhQ0lzSWw5b1pXRndJaXdpUVhKeVlYa2lMQ0pmY21WMlpYSnpaU0lzSW5KbGRtVnljMlVpTENKemRHRnlkRWx1WkdWNElpd2laVzUwY25raUxDSnBibVJsZUNJc0luQmhjbVZ1ZEVsdVpHVjRJaXdpVFdGMGFDSXNJbVpzYjI5eUlpd2ljR0Z5Wlc1MElpd2lYMmx6U0dsbmFHVnlJaXdpY1hWbGRXVlVhVzFsSWl3aVl6RnBibVJsZUNJc0ltTXlhVzVrWlhnaUxDSmphR2xzWkRFaUxDSmphR2xzWkRJaUxDSmZhWE5NYjNkbGNpSXNJblJoY21kbGRFbHVaR1Y0SWl3aWJXRjRTVzVrWlhnaUxDSmZZblZpWW14bFJHOTNiaUlzSW5ScGJXVWlMQ0poWW5NaUxDSmZZblZpWW14bFZYQWlMQ0oxYm1SbFptbHVaV1FpTENKeVpXMXZkbVVpTENKc1lYTjBTVzVrWlhnaUxDSkpibVpwYm1sMGVTSXNJblpoYkhWbElpd2lZblZwYkdSSVpXRndJbDBzSW0xaGNIQnBibWR6SWpvaU96czdPenM3T3pzN096czdPenM3TzBGQlFVRTdRVUZEUVN4VFFVRlRRU3hKUVVGVUxFTkJRV05ETEVkQlFXUXNSVUZCYlVKRExFVkJRVzVDTEVWQlFYVkNReXhGUVVGMlFpeEZRVUV5UWp0QlFVTjZRaXhOUVVGTlF5eE5RVUZOU0N4SlFVRkpReXhGUVVGS0xFTkJRVm83UVVGRFFVUXNUVUZCU1VNc1JVRkJTaXhKUVVGVlJDeEpRVUZKUlN4RlFVRktMRU5CUVZZN1FVRkRRVVlzVFVGQlNVVXNSVUZCU2l4SlFVRlZReXhIUVVGV08wRkJRMFE3TzBGQlJVUTdRVUZEUVN4VFFVRlRReXhQUVVGVUxFTkJRV2xDU2l4SFFVRnFRaXhGUVVGelFrc3NSVUZCZEVJc1JVRkJNRUk3UVVGRGVFSXNUVUZCVFVNc1NVRkJTVTRzU1VGQlNVOHNUVUZCWkR0QlFVTkJPMEZCUTBFc1QwRkJTeXhKUVVGSlF5eEpRVUZKTEVOQlFXSXNSVUZCWjBKQkxFbEJRVWxHTEVOQlFYQkNMRVZCUVhWQ1JTeEhRVUYyUWl4RlFVRTBRanRCUVVNeFFpeFJRVUZKVWl4SlFVRkpVU3hEUVVGS0xFMUJRVmRJTEVWQlFXWXNSVUZCYlVJN1FVRkRha0lzWVVGQlQwY3NRMEZCVUR0QlFVTkVPMEZCUTBZN08wRkJSVVFzVTBGQlR5eERRVUZETEVOQlFWSTdRVUZEUkRzN1FVRkZSRHM3T3pzN096czdPMEZCVTBFc1NVRkJUVU1zYTBKQlFXdENMRk5CUVd4Q1FTeGxRVUZyUWl4RFFVRlRReXhMUVVGVUxFVkJRV2RDUXl4TFFVRm9RaXhGUVVGMVFqdEJRVU0zUXl4VFFVRlBSQ3hSUVVGUlF5eExRVUZtTzBGQlEwUXNRMEZHUkRzN1FVRkpRU3hKUVVGTlF5eHJRa0ZCYTBJc1UwRkJiRUpCTEdWQlFXdENMRU5CUVZOR0xFdEJRVlFzUlVGQlowSkRMRXRCUVdoQ0xFVkJRWFZDTzBGQlF6ZERMRk5CUVU5RUxGRkJRVkZETEV0QlFXWTdRVUZEUkN4RFFVWkVPenRCUVVsQk96czdPenM3T3pzN1FVRlRRU3hKUVVGTlJTeHRRa0ZCYlVJc1UwRkJia0pCTEdkQ1FVRnRRaXhEUVVGVFNDeExRVUZVTEVWQlFXZENReXhMUVVGb1FpeEZRVUYxUWp0QlFVTTVReXhUUVVGUFJDeFJRVUZSUXl4TFFVRm1PMEZCUTBRc1EwRkdSRHM3UVVGSlFTeEpRVUZOUnl4dFFrRkJiVUlzVTBGQmJrSkJMR2RDUVVGdFFpeERRVUZUU2l4TFFVRlVMRVZCUVdkQ1F5eExRVUZvUWl4RlFVRjFRanRCUVVNNVF5eFRRVUZQUkN4UlFVRlJReXhMUVVGbU8wRkJRMFFzUTBGR1JEczdRVUZKUVN4SlFVRk5TU3h2UWtGQmIwSkRMRTlCUVU5RUxHbENRVUZxUXpzN1FVRkZRVHM3T3pzN096czdPenM3U1VGVlRVVXNZVHRCUVVOS0xESkNRVUU0UWp0QlFVRkJMRkZCUVd4Q1F5eFZRVUZyUWl4MVJVRkJUQ3hIUVVGTE8wRkJRVUU3TzBGQlF6VkNPenM3T3pzN08wRkJUMEVzVTBGQlMwTXNZMEZCVEN4SFFVRnpRaXhEUVVGMFFqczdRVUZGUVRzN096czdPenRCUVU5QkxGTkJRVXRETEV0QlFVd3NSMEZCWVN4SlFVRkpReXhMUVVGS0xFTkJRVlZJTEdGQlFXRXNRMEZCZGtJc1EwRkJZanM3UVVGRlFUczdPenM3T3p0QlFVOUJMRk5CUVV0SkxGRkJRVXdzUjBGQlowSXNTVUZCYUVJN08wRkJSVUU3UVVGRFFTeFRRVUZMUXl4UFFVRk1MRWRCUVdVc1MwRkJaanRCUVVORU96dEJRVVZFT3pzN096czdPenM3TzBGQk9FTkJPenM3T3pzN09FSkJUVlZETEZVc1JVRkJXVHRCUVVOd1FpeFZRVUZKUXl4UlFVRlJMRXRCUVV0TUxFdEJRVXdzUTBGQlYwa3NWVUZCV0N4RFFVRmFPenRCUVVWQkxGVkJRVWxGTEZGQlFWRkdMRlZCUVZvN1FVRkRRU3hWUVVGSlJ5eGpRVUZqUXl4TFFVRkxReXhMUVVGTUxFTkJRVmRJTEZGQlFWRXNRMEZCYmtJc1EwRkJiRUk3UVVGRFFTeFZRVUZKU1N4VFFVRlRMRXRCUVV0V0xFdEJRVXdzUTBGQlYwOHNWMEZCV0N4RFFVRmlPenRCUVVWQkxHRkJRVTlITEZWQlFWVXNTMEZCUzBNc1UwRkJUQ3hEUVVGbFRpeE5RVUZOVHl4VFFVRnlRaXhGUVVGblEwWXNUMEZCVDBVc1UwRkJka01zUTBGQmFrSXNSVUZCYjBVN1FVRkRiRVZxUXl4aFFVRkxMRXRCUVV0eFFpeExRVUZXTEVWQlFXbENUU3hMUVVGcVFpeEZRVUYzUWtNc1YwRkJlRUk3TzBGQlJVRkVMR2RDUVVGUlF5eFhRVUZTTzBGQlEwRkJMSE5DUVVGalF5eExRVUZMUXl4TFFVRk1MRU5CUVZkSUxGRkJRVkVzUTBGQmJrSXNRMEZCWkR0QlFVTkJTU3hwUWtGQlV5eExRVUZMVml4TFFVRk1MRU5CUVZkUExGZEJRVmdzUTBGQlZEdEJRVU5FTzBGQlEwWTdPMEZCUlVRN096czdPenM3T3p0blEwRk5XVWdzVlN4RlFVRlpPMEZCUTNSQ0xGVkJRVWxETEZGQlFWRXNTMEZCUzB3c1MwRkJUQ3hEUVVGWFNTeFZRVUZZTEVOQlFWbzdPMEZCUlVFc1ZVRkJTVVVzVVVGQlVVWXNWVUZCV2p0QlFVTkJMRlZCUVVsVExGVkJRVlZRTEZGQlFWRXNRMEZCZEVJN1FVRkRRU3hWUVVGSlVTeFZRVUZWUkN4VlFVRlZMRU5CUVhoQ08wRkJRMEVzVlVGQlNVVXNVMEZCVXl4TFFVRkxaaXhMUVVGTUxFTkJRVmRoTEU5QlFWZ3NRMEZCWWp0QlFVTkJMRlZCUVVsSExGTkJRVk1zUzBGQlMyaENMRXRCUVV3c1EwRkJWMk1zVDBGQldDeERRVUZpT3p0QlFVVkJMR0ZCUVZGRExGVkJRVlVzUzBGQlMwVXNVVUZCVEN4RFFVRmpXaXhOUVVGTlR5eFRRVUZ3UWl4RlFVRXJRa2NzVDBGQlQwZ3NVMEZCZEVNc1EwRkJXQ3hKUVVORFNTeFZRVUZWTEV0QlFVdERMRkZCUVV3c1EwRkJZMW9zVFVGQlRVOHNVMEZCY0VJc1JVRkJLMEpKTEU5QlFVOUtMRk5CUVhSRExFTkJSR3hDTEVWQlJVRTdRVUZEUlR0QlFVTkJMRmxCUVVsTkxHOUNRVUZLT3p0QlFVVkJMRmxCUVVsR0xFMUJRVW9zUlVGRFJVVXNZMEZCWXl4TFFVRkxVQ3hUUVVGTUxFTkJRV1ZKTEU5QlFVOUlMRk5CUVhSQ0xFVkJRV2xEU1N4UFFVRlBTaXhUUVVGNFF5eEpRVUZ4UkVNc1QwRkJja1FzUjBGQkswUkRMRTlCUVRkRkxFTkJSRVlzUzBGSFJVa3NZMEZCWTB3c1QwRkJaRHM3UVVGRlJteERMR0ZCUVVzc1MwRkJTM0ZDTEV0QlFWWXNSVUZCYVVKTkxFdEJRV3BDTEVWQlFYZENXU3hYUVVGNFFqczdRVUZGUVR0QlFVTkJXaXhuUWtGQlVWa3NWMEZCVWp0QlFVTkJUQ3hyUWtGQlZWQXNVVUZCVVN4RFFVRnNRanRCUVVOQlVTeHJRa0ZCVlVRc1ZVRkJWU3hEUVVGd1FqdEJRVU5CUlN4cFFrRkJVeXhMUVVGTFppeExRVUZNTEVOQlFWZGhMRTlCUVZnc1EwRkJWRHRCUVVOQlJ5eHBRa0ZCVXl4TFFVRkxhRUlzUzBGQlRDeERRVUZYWXl4UFFVRllMRU5CUVZRN1FVRkRSRHRCUVVOR096dEJRVVZFT3pzN096czdaME5CUjFrN1FVRkRWanRCUVVOQk8wRkJRMEVzVlVGQlNVc3NWMEZCVjFnc1MwRkJTME1zUzBGQlRDeERRVUZYTEVOQlFVTXNTMEZCUzFZc1kwRkJUQ3hIUVVGelFpeERRVUYyUWl4SlFVRTBRaXhEUVVGMlF5eERRVUZtT3p0QlFVVkJMRmRCUVVzc1NVRkJTVmdzU1VGQlNTdENMRkZCUVdJc1JVRkJkVUl2UWl4SlFVRkpMRU5CUVROQ0xFVkJRVGhDUVN4SFFVRTVRanRCUVVORkxHRkJRVXRuUXl4WFFVRk1MRU5CUVdsQ2FFTXNRMEZCYWtJN1FVRkVSanRCUVVWRU96dEJRVVZFT3pzN096czdPenM3T3pKQ1FVOVBhVUlzU3l4RlFVRlBaMElzU1N4RlFVRk5PMEZCUTJ4Q0xGVkJRVWxpTEV0QlFVdGpMRWRCUVV3c1EwRkJVMFFzU1VGQlZDeE5RVUZ0UWpGQ0xHbENRVUYyUWl4RlFVRXdRenRCUVVONFExVXNZMEZCVFU4c1UwRkJUaXhIUVVGclFsTXNTVUZCYkVJN1FVRkRRVHRCUVVOQkxHRkJRVXR5UWl4TFFVRk1MRU5CUVZjc1MwRkJTMFFzWTBGQmFFSXNTVUZCYTBOTkxFdEJRV3hETzBGQlEwRTdRVUZEUVN4aFFVRkxhMElzVTBGQlRDeERRVUZsTEV0QlFVdDRRaXhqUVVGd1FqdEJRVU5CTEdGQlFVdEJMR05CUVV3c1NVRkJkVUlzUTBGQmRrSTdPMEZCUlVFc1pVRkJUeXhMUVVGTGMwSXNTVUZCV2p0QlFVTkVPenRCUVVWRWFFSXNXVUZCVFU4c1UwRkJUaXhIUVVGclFsa3NVMEZCYkVJN1FVRkRRU3hoUVVGUExFdEJRVXRETEUxQlFVd3NRMEZCV1hCQ0xFdEJRVm9zUTBGQlVEdEJRVU5FT3p0QlFVVkVPenM3T3pzN096czdPM2xDUVU5TFFTeExMRVZCUVU5blFpeEpMRVZCUVUwN1FVRkRhRUlzVlVGQlNXSXNTMEZCUzJNc1IwRkJUQ3hEUVVGVFJDeEpRVUZVTEUxQlFXMUNNVUlzYVVKQlFYWkNMRVZCUVRCRE8wRkJRM2hETEZsQlFVMVhMRkZCUVZGMFFpeFJRVUZSTEV0QlFVdG5RaXhMUVVGaUxFVkJRVzlDU3l4TFFVRndRaXhEUVVGa096dEJRVVZCTEZsQlFVbERMRlZCUVZVc1EwRkJReXhEUVVGbUxFVkJRV3RDTzBGQlEyaENSQ3huUWtGQlRVOHNVMEZCVGl4SFFVRnJRbE1zU1VGQmJFSTdRVUZEUVR0QlFVTkJMR05CUVUxWUxGTkJRVk1zUzBGQlMxWXNTMEZCVEN4RFFVRlhVU3hMUVVGTFF5eExRVUZNTEVOQlFWZElMRkZCUVZFc1EwRkJia0lzUTBGQldDeERRVUZtT3p0QlFVVkJMR05CUVVsSkxGVkJRVlVzUzBGQlMwTXNVMEZCVEN4RFFVRmxWU3hKUVVGbUxFVkJRWEZDV0N4UFFVRlBSU3hUUVVFMVFpeERRVUZrTEVWQlEwVXNTMEZCUzFjc1UwRkJUQ3hEUVVGbGFrSXNTMEZCWml4RlFVUkdMRXRCUjBVc1MwRkJTMk1zVjBGQlRDeERRVUZwUW1Rc1MwRkJha0k3UVVGRFNEczdRVUZGUkN4bFFVRlBMRXRCUVV0bExFbEJRVm83UVVGRFJEczdRVUZGUkdoQ0xGbEJRVTFQTEZOQlFVNHNSMEZCYTBKWkxGTkJRV3hDTzBGQlEwRXNZVUZCVHl4TFFVRkxReXhOUVVGTUxFTkJRVmx3UWl4TFFVRmFMRU5CUVZBN1FVRkRSRHM3UVVGRlJEczdPenM3T3pzN096SkNRVTFQUVN4TExFVkJRVTg3UVVGRFdqdEJRVU5CTEZWQlFVMURMRkZCUVZGMFFpeFJRVUZSTEV0QlFVdG5RaXhMUVVGaUxFVkJRVzlDU3l4TFFVRndRaXhEUVVGa096dEJRVVZCTEZWQlFVbERMRlZCUVZVc1EwRkJReXhEUVVGbUxFVkJRV3RDTzBGQlEyaENMRmxCUVUxdlFpeFpRVUZaTEV0QlFVc3pRaXhqUVVGTUxFZEJRWE5DTEVOQlFYaERPenRCUVVWQk8wRkJRMEVzV1VGQlNVOHNWVUZCVlc5Q0xGTkJRV1FzUlVGQmVVSTdRVUZEZGtJN1FVRkRRU3hsUVVGTE1VSXNTMEZCVEN4RFFVRlhNRUlzVTBGQldDeEpRVUYzUWtZc1UwRkJlRUk3UVVGRFFUdEJRVU5CTEdWQlFVdDZRaXhqUVVGTUxFZEJRWE5DTWtJc1UwRkJkRUk3TzBGQlJVRXNhVUpCUVU4c1MwRkJTMHdzU1VGQldqdEJRVU5FTEZOQlVFUXNUVUZQVHp0QlFVTk1PMEZCUTBFeFF5eGxRVUZMTEV0QlFVdHhRaXhMUVVGV0xFVkJRV2xDVFN4TFFVRnFRaXhGUVVGM1FtOUNMRk5CUVhoQ08wRkJRMEU3UVVGRFFTeGxRVUZMTVVJc1MwRkJUQ3hEUVVGWE1FSXNVMEZCV0N4SlFVRjNRa1lzVTBGQmVFSTdPMEZCUlVFc1kwRkJTV3hDTEZWQlFWVXNRMEZCWkN4RlFVRnBRanRCUVVObUxHbENRVUZMWXl4WFFVRk1MRU5CUVdsQ0xFTkJRV3BDTzBGQlEwUXNWMEZHUkN4TlFVVlBPMEZCUTB3N1FVRkRRU3huUWtGQlRXWXNVMEZCVVN4TFFVRkxUQ3hMUVVGTUxFTkJRVmROTEV0QlFWZ3NRMEZCWkR0QlFVTkJMR2RDUVVGTlNTeFRRVUZUTEV0QlFVdFdMRXRCUVV3c1EwRkJWMUVzUzBGQlMwTXNTMEZCVEN4RFFVRlhTQ3hSUVVGUkxFTkJRVzVDTEVOQlFWZ3NRMEZCWmpzN1FVRkZRU3huUWtGQlNVa3NWVUZCVlN4TFFVRkxReXhUUVVGTUxFTkJRV1ZPTEU5QlFVMVBMRk5CUVhKQ0xFVkJRV2REUml4UFFVRlBSU3hUUVVGMlF5eERRVUZrTEVWQlEwVXNTMEZCUzFjc1UwRkJUQ3hEUVVGbGFrSXNTMEZCWml4RlFVUkdMRXRCUjBVc1MwRkJTMk1zVjBGQlRDeERRVUZwUW1Rc1MwRkJha0k3UVVGRFNEdEJRVU5HT3p0QlFVVkVPMEZCUTBFc1lVRkJTMUFzWTBGQlRDeEhRVUZ6UWpKQ0xGTkJRWFJDTzBGQlEwUTdPMEZCUlVRc1lVRkJUeXhMUVVGTFRDeEpRVUZhTzBGQlEwUTdPMEZCUlVRN096czdPenMwUWtGSFVUdEJRVU5PTEZkQlFVdDBRaXhqUVVGTUxFZEJRWE5DTEVOQlFYUkNPMEZCUTBFc1YwRkJTME1zUzBGQlRDeEhRVUZoTEVsQlFVbERMRXRCUVVvc1EwRkJWU3hMUVVGTFJDeExRVUZNTEVOQlFWZGlMRTFCUVhKQ0xFTkJRV0k3UVVGRFJEczdRVUZGUkRzN096czdPenM3TzNkQ1FVMUphMElzU3l4RlFVRlBPMEZCUTFRc1lVRkJUeXhMUVVGTFRDeExRVUZNTEVOQlFWZG9RaXhQUVVGWUxFTkJRVzFDY1VJc1MwRkJia0lzVFVGQk9FSXNRMEZCUXl4RFFVRjBRenRCUVVORU96czdkMEpCY2s5Vk8wRkJRMVFzVlVGQlNTeExRVUZMVGl4alFVRk1MRWRCUVhOQ0xFTkJRVEZDTEVWQlEwVXNUMEZCVHl4TFFVRkxReXhMUVVGTUxFTkJRVmNzUTBGQldDeEZRVUZqV1N4VFFVRnlRanM3UVVGRlJpeGhRVUZQWlN4UlFVRlFPMEZCUTBRN08wRkJSVVE3T3pzN096czdPM2RDUVV0WE8wRkJRMVFzWVVGQlR5eExRVUZMTTBJc1MwRkJUQ3hEUVVGWExFTkJRVmdzUTBGQlVEdEJRVU5FT3p0QlFVVkVPenM3T3pzN096czdjMEpCVFZrMFFpeExMRVZCUVU4N1FVRkRha0lzVlVGQlNVRXNWVUZCVlN4TFFVRkxNVUlzVVVGQmJrSXNSVUZCTmtJN1FVRkRNMElzWVVGQlMwRXNVVUZCVEN4SFFVRm5RakJDTEV0QlFXaENPenRCUVVWQkxGbEJRVWtzUzBGQlN6RkNMRkZCUVV3c1MwRkJhMElzU1VGQmRFSXNSVUZCTkVJN1FVRkRNVUlzWlVGQlMyVXNVVUZCVEN4SFFVRm5RalZDTEdWQlFXaENPMEZCUTBFc1pVRkJTM05DTEZOQlFVd3NSMEZCYVVKc1FpeG5Ra0ZCYWtJN1FVRkRSQ3hUUVVoRUxFMUJSMDg3UVVGRFRDeGxRVUZMZDBJc1VVRkJUQ3hIUVVGblFucENMR1ZCUVdoQ08wRkJRMEVzWlVGQlMyMUNMRk5CUVV3c1IwRkJhVUpxUWl4blFrRkJha0k3UVVGRFJEczdRVUZGUkN4aFFVRkxiVU1zVTBGQlREdEJRVU5FTzBGQlEwWXNTenQzUWtGRllUdEJRVU5hTEdGQlFVOHNTMEZCU3pOQ0xGRkJRVm83UVVGRFJEczdPenM3YTBKQlowMVpUQ3hoSWl3aVptbHNaU0k2SWxCeWFXOXlhWFI1VVhWbGRXVXVhbk1pTENKemIzVnlZMlZ6UTI5dWRHVnVkQ0k2V3lJdkx5QjNiM0pyY3lCaWVTQnlaV1psY21WdVkyVmNibVoxYm1OMGFXOXVJSE4zWVhBb1lYSnlMQ0JwTVN3Z2FUSXBJSHRjYmlBZ1kyOXVjM1FnZEcxd0lEMGdZWEp5VzJreFhUdGNiaUFnWVhKeVcya3hYU0E5SUdGeWNsdHBNbDA3WEc0Z0lHRnljbHRwTWwwZ1BTQjBiWEE3WEc1OVhHNWNiaTh2SUdoMGRIQnpPaTh2YW5Od1pYSm1MbU52YlM5cWN5MW1iM0l0Ykc5dmNDMTJjeTFoY25KaGVTMXBibVJsZUc5bUx6TTBObHh1Wm5WdVkzUnBiMjRnYVc1a1pYaFBaaWhoY25Jc0lHVnNLU0I3WEc0Z0lHTnZibk4wSUd3Z1BTQmhjbkl1YkdWdVozUm9PMXh1SUNBdkx5QnBaMjV2Y21VZ1ptbHljM1FnWld4bGJXVnVkQ0JoY3lCcGRDQmpZVzRuZENCaVpTQmhJR1Z1ZEhKNVhHNGdJR1p2Y2lBb2JHVjBJR2tnUFNBeE95QnBJRHdnYkRzZ2FTc3JLU0I3WEc0Z0lDQWdhV1lnS0dGeWNsdHBYU0E5UFQwZ1pXd3BJSHRjYmlBZ0lDQWdJSEpsZEhWeWJpQnBPMXh1SUNBZ0lIMWNiaUFnZlZ4dVhHNGdJSEpsZEhWeWJpQXRNVHRjYm4xY2JseHVMeW9xWEc0Z0tpQkVaV1pwYm1VZ2FXWWdZSFJwYldVeFlDQnphRzkxYkdRZ1ltVWdiRzkzWlhJZ2FXNGdkR2hsSUhSdmNHOW5jbUZ3YUhrZ2RHaGhiaUJnZEdsdFpUSmdMbHh1SUNvZ1NYTWdaSGx1WVcxcFkyRnNiSGtnWVdabVpXTjBaV1FnZEc4Z2RHaGxJSEJ5YVc5eWFYUjVJSEYxWlhWbElHRmpZMjl5WkdsdVp5QjBieUJvWVc1a2JHVWdZRzFwYm1BZ1lXNWtJR0J0WVhoZ0lHaGxZWEF1WEc0Z0tseHVJQ29nUUhCeWFYWmhkR1ZjYmlBcUlFQndZWEpoYlNCN1RuVnRZbVZ5ZlNCMGFXMWxNVnh1SUNvZ1FIQmhjbUZ0SUh0T2RXMWlaWEo5SUhScGJXVXlYRzRnS2lCQWNtVjBkWEp1SUh0Q2IyOXNaV0Z1ZlZ4dUlDb3ZYRzVqYjI1emRDQmZhWE5NYjNkbGNrMWhlRWhsWVhBZ1BTQm1kVzVqZEdsdmJpaDBhVzFsTVN3Z2RHbHRaVElwSUh0Y2JpQWdjbVYwZFhKdUlIUnBiV1V4SUR3Z2RHbHRaVEk3WEc1OU8xeHVYRzVqYjI1emRDQmZhWE5NYjNkbGNrMXBia2hsWVhBZ1BTQm1kVzVqZEdsdmJpaDBhVzFsTVN3Z2RHbHRaVElwSUh0Y2JpQWdjbVYwZFhKdUlIUnBiV1V4SUQ0Z2RHbHRaVEk3WEc1OU8xeHVYRzR2S2lwY2JpQXFJRVJsWm1sdVpTQnBaaUJnZEdsdFpURmdJSE5vYjNWc1pDQmlaU0JvYVdkb1pYSWdhVzRnZEdobElIUnZjRzluY21Gd2FIa2dkR2hoYmlCZ2RHbHRaVEpnTGx4dUlDb2dTWE1nWkhsdVlXMXBZMkZzYkhrZ1lXWm1aV04wWldRZ2RHOGdkR2hsSUhCeWFXOXlhWFI1SUhGMVpYVmxJR0ZqWTI5eVpHbHVaeUIwYnlCb1lXNWtiR1VnWUcxcGJtQWdZVzVrSUdCdFlYaGdJR2hsWVhBdVhHNGdLbHh1SUNvZ1FIQnlhWFpoZEdWY2JpQXFJRUJ3WVhKaGJTQjdUblZ0WW1WeWZTQjBhVzFsTVZ4dUlDb2dRSEJoY21GdElIdE9kVzFpWlhKOUlIUnBiV1V5WEc0Z0tpQkFjbVYwZFhKdUlIdENiMjlzWldGdWZWeHVJQ292WEc1amIyNXpkQ0JmYVhOSWFXZG9aWEpOWVhoSVpXRndJRDBnWm5WdVkzUnBiMjRvZEdsdFpURXNJSFJwYldVeUtTQjdYRzRnSUhKbGRIVnliaUIwYVcxbE1TQStJSFJwYldVeU8xeHVmVHRjYmx4dVkyOXVjM1FnWDJselNHbG5hR1Z5VFdsdVNHVmhjQ0E5SUdaMWJtTjBhVzl1S0hScGJXVXhMQ0IwYVcxbE1pa2dlMXh1SUNCeVpYUjFjbTRnZEdsdFpURWdQQ0IwYVcxbE1qdGNibjA3WEc1Y2JtTnZibk4wSUZCUFUwbFVTVlpGWDBsT1JrbE9TVlJaSUQwZ1RuVnRZbVZ5TGxCUFUwbFVTVlpGWDBsT1JrbE9TVlJaTzF4dVhHNHZLaXBjYmlBcUlGQnlhVzl5YVhSNUlIRjFaWFZsSUdsdGNHeGxiV1Z1ZEdsdVp5QmhJR0pwYm1GeWVTQm9aV0Z3TGx4dUlDb2dRV04wY3lCaGN5QmhJRzFwYmlCb1pXRndJR0o1SUdSbFptRjFiSFFzSUdOaGJpQmlaU0JrZVc1aGJXbGpZV3hzZVNCamFHRnVaMlZrSUhSdklHRWdiV0Y0SUdobFlYQmNiaUFxSUdKNUlITmxkSFJwYm1jZ1lISmxkbVZ5YzJWZ0lIUnZJSFJ5ZFdVdVhHNGdLbHh1SUNvZ1gyNXZkR1ZmT2lCMGFHVWdjWFZsZFdVZ1kzSmxZWFJsY3lCaGJtUWdiV0ZwYm5SaGFXNXpJR0VnYm1WM0lIQnliM0JsY25SNUlDaHBMbVV1SUdCeGRXVjFaVlJwYldWZ0tWeHVJQ29nZEc4Z1pXRmphQ0J2WW1wbFkzUWdZV1JrWldRdVhHNGdLbHh1SUNvZ1FIQmhjbUZ0SUh0T2RXMWlaWEo5SUZ0b1pXRndUR1Z1WjNSb1BURXdNRjBnTFNCRVpXWmhkV3gwSUhOcGVtVWdiMllnZEdobElHRnljbUY1SUhWelpXUWdkRzhnWTNKbFlYUmxJSFJvWlNCb1pXRndMbHh1SUNvdlhHNWpiR0Z6Y3lCUWNtbHZjbWwwZVZGMVpYVmxJSHRjYmlBZ1kyOXVjM1J5ZFdOMGIzSW9hR1ZoY0V4bGJtZDBhQ0E5SURFd01Da2dlMXh1SUNBZ0lDOHFLbHh1SUNBZ0lDQXFJRkJ2YVc1MFpYSWdkRzhnZEdobElHWnBjbk4wSUdWdGNIUjVJR2x1WkdWNElHOW1JSFJvWlNCb1pXRndMbHh1SUNBZ0lDQXFJRUIwZVhCbElIdE9kVzFpWlhKOVhHNGdJQ0FnSUNvZ1FHMWxiV0psY205bUlGQnlhVzl5YVhSNVVYVmxkV1ZjYmlBZ0lDQWdLaUJBYm1GdFpTQmZZM1Z5Y21WdWRFeGxibWQwYUZ4dUlDQWdJQ0FxSUVCd2NtbDJZWFJsWEc0Z0lDQWdJQ292WEc0Z0lDQWdkR2hwY3k1ZlkzVnljbVZ1ZEV4bGJtZDBhQ0E5SURFN1hHNWNiaUFnSUNBdktpcGNiaUFnSUNBZ0tpQkJjbkpoZVNCdlppQjBhR1VnYzI5eWRHVmtJR2x1WkdWNFpYTWdiMllnZEdobElHVnVkSEpwWlhNc0lIUm9aU0JoWTNSMVlXd2dhR1ZoY0M0Z1NXZHViM0psSUhSb1pTQnBibVJsZUNBd0xseHVJQ0FnSUNBcUlFQjBlWEJsSUh0QmNuSmhlWDFjYmlBZ0lDQWdLaUJBYldWdFltVnliMllnVUhKcGIzSnBkSGxSZFdWMVpWeHVJQ0FnSUNBcUlFQnVZVzFsSUY5b1pXRndYRzRnSUNBZ0lDb2dRSEJ5YVhaaGRHVmNiaUFnSUNBZ0tpOWNiaUFnSUNCMGFHbHpMbDlvWldGd0lEMGdibVYzSUVGeWNtRjVLR2hsWVhCTVpXNW5kR2dnS3lBeEtUdGNibHh1SUNBZ0lDOHFLbHh1SUNBZ0lDQXFJRlI1Y0dVZ2IyWWdkR2hsSUhGMVpYVmxPaUJnYldsdVlDQm9aV0Z3SUdsbUlHQm1ZV3h6WldBc0lHQnRZWGhnSUdobFlYQWdhV1lnWUhSeWRXVmdYRzRnSUNBZ0lDb2dRSFI1Y0dVZ2UwSnZiMnhsWVc1OVhHNGdJQ0FnSUNvZ1FHMWxiV0psY205bUlGQnlhVzl5YVhSNVVYVmxkV1ZjYmlBZ0lDQWdLaUJBYm1GdFpTQmZjbVYyWlhKelpWeHVJQ0FnSUNBcUlFQndjbWwyWVhSbFhHNGdJQ0FnSUNvdlhHNGdJQ0FnZEdocGN5NWZjbVYyWlhKelpTQTlJRzUxYkd3N1hHNWNiaUFnSUNBdkx5QnBibWwwYVdGc2FYcGxJR052YlhCaGNtVWdablZ1WTNScGIyNXpYRzRnSUNBZ2RHaHBjeTV5WlhabGNuTmxJRDBnWm1Gc2MyVTdYRzRnSUgxY2JseHVJQ0F2S2lwY2JpQWdJQ29nVkdsdFpTQnZaaUIwYUdVZ1ptbHljM1FnWld4bGJXVnVkQ0JwYmlCMGFHVWdZbWx1WVhKNUlHaGxZWEF1WEc0Z0lDQXFJRUJ5WlhSMWNtNXpJSHRPZFcxaVpYSjlYRzRnSUNBcUwxeHVJQ0JuWlhRZ2RHbHRaU2dwSUh0Y2JpQWdJQ0JwWmlBb2RHaHBjeTVmWTNWeWNtVnVkRXhsYm1kMGFDQStJREVwWEc0Z0lDQWdJQ0J5WlhSMWNtNGdkR2hwY3k1ZmFHVmhjRnN4WFM1eGRXVjFaVlJwYldVN1hHNWNiaUFnSUNCeVpYUjFjbTRnU1c1bWFXNXBkSGs3WEc0Z0lIMWNibHh1SUNBdktpcGNiaUFnSUNvZ1JtbHljM1FnWld4bGJXVnVkQ0JwYmlCMGFHVWdZbWx1WVhKNUlHaGxZWEF1WEc0Z0lDQXFJRUJ5WlhSMWNtNXpJSHRPZFcxaVpYSjlYRzRnSUNBcUlFQnlaV0ZrYjI1c2VWeHVJQ0FnS2k5Y2JpQWdaMlYwSUdobFlXUW9LU0I3WEc0Z0lDQWdjbVYwZFhKdUlIUm9hWE11WDJobFlYQmJNVjA3WEc0Z0lIMWNibHh1SUNBdktpcGNiaUFnSUNvZ1EyaGhibWRsSUhSb1pTQnZjbVJsY2lCdlppQjBhR1VnY1hWbGRXVWdLRzFoZUNCb1pXRndJR2xtSUhSeWRXVXNJRzFwYmlCb1pXRndJR2xtSUdaaGJITmxLU3hjYmlBZ0lDb2djbVZpZFdsc1pDQjBhR1VnYUdWaGNDQjNhWFJvSUhSb1pTQmxlR2x6ZEdsdVp5QmxiblJ5YVdWekxseHVJQ0FnS2x4dUlDQWdLaUJBZEhsd1pTQjdRbTl2YkdWaGJuMWNiaUFnSUNvdlhHNGdJSE5sZENCeVpYWmxjbk5sS0haaGJIVmxLU0I3WEc0Z0lDQWdhV1lnS0haaGJIVmxJQ0U5UFNCMGFHbHpMbDl5WlhabGNuTmxLU0I3WEc0Z0lDQWdJQ0IwYUdsekxsOXlaWFpsY25ObElEMGdkbUZzZFdVN1hHNWNiaUFnSUNBZ0lHbG1JQ2gwYUdsekxsOXlaWFpsY25ObElEMDlQU0IwY25WbEtTQjdYRzRnSUNBZ0lDQWdJSFJvYVhNdVgybHpURzkzWlhJZ1BTQmZhWE5NYjNkbGNrMWhlRWhsWVhBN1hHNGdJQ0FnSUNBZ0lIUm9hWE11WDJselNHbG5hR1Z5SUQwZ1gybHpTR2xuYUdWeVRXRjRTR1ZoY0R0Y2JpQWdJQ0FnSUgwZ1pXeHpaU0I3WEc0Z0lDQWdJQ0FnSUhSb2FYTXVYMmx6VEc5M1pYSWdQU0JmYVhOTWIzZGxjazFwYmtobFlYQTdYRzRnSUNBZ0lDQWdJSFJvYVhNdVgybHpTR2xuYUdWeUlEMGdYMmx6U0dsbmFHVnlUV2x1U0dWaGNEdGNiaUFnSUNBZ0lIMWNibHh1SUNBZ0lDQWdkR2hwY3k1aWRXbHNaRWhsWVhBb0tUdGNiaUFnSUNCOVhHNGdJSDFjYmx4dUlDQm5aWFFnY21WMlpYSnpaU2dwSUh0Y2JpQWdJQ0J5WlhSMWNtNGdkR2hwY3k1ZmNtVjJaWEp6WlR0Y2JpQWdmVnh1WEc0Z0lDOHFLbHh1SUNBZ0tpQkdhWGdnZEdobElHaGxZWEFnWW5rZ2JXOTJhVzVuSUdGdUlHVnVkSEo1SUhSdklHRWdibVYzSUhWd2NHVnlJSEJ2YzJsMGFXOXVMbHh1SUNBZ0tseHVJQ0FnS2lCQWNISnBkbUYwWlZ4dUlDQWdLaUJBY0dGeVlXMGdlMDUxYldKbGNuMGdjM1JoY25SSmJtUmxlQ0F0SUZSb1pTQnBibVJsZUNCdlppQjBhR1VnWlc1MGNua2dkRzhnYlc5MlpTNWNiaUFnSUNvdlhHNGdJRjlpZFdKaWJHVlZjQ2h6ZEdGeWRFbHVaR1Y0S1NCN1hHNGdJQ0FnYkdWMElHVnVkSEo1SUQwZ2RHaHBjeTVmYUdWaGNGdHpkR0Z5ZEVsdVpHVjRYVHRjYmx4dUlDQWdJR3hsZENCcGJtUmxlQ0E5SUhOMFlYSjBTVzVrWlhnN1hHNGdJQ0FnYkdWMElIQmhjbVZ1ZEVsdVpHVjRJRDBnVFdGMGFDNW1iRzl2Y2locGJtUmxlQ0F2SURJcE8xeHVJQ0FnSUd4bGRDQndZWEpsYm5RZ1BTQjBhR2x6TGw5b1pXRndXM0JoY21WdWRFbHVaR1Y0WFR0Y2JseHVJQ0FnSUhkb2FXeGxJQ2h3WVhKbGJuUWdKaVlnZEdocGN5NWZhWE5JYVdkb1pYSW9aVzUwY25rdWNYVmxkV1ZVYVcxbExDQndZWEpsYm5RdWNYVmxkV1ZVYVcxbEtTa2dlMXh1SUNBZ0lDQWdjM2RoY0NoMGFHbHpMbDlvWldGd0xDQnBibVJsZUN3Z2NHRnlaVzUwU1c1a1pYZ3BPMXh1WEc0Z0lDQWdJQ0JwYm1SbGVDQTlJSEJoY21WdWRFbHVaR1Y0TzF4dUlDQWdJQ0FnY0dGeVpXNTBTVzVrWlhnZ1BTQk5ZWFJvTG1ac2IyOXlLR2x1WkdWNElDOGdNaWs3WEc0Z0lDQWdJQ0J3WVhKbGJuUWdQU0IwYUdsekxsOW9aV0Z3VzNCaGNtVnVkRWx1WkdWNFhUdGNiaUFnSUNCOVhHNGdJSDFjYmx4dUlDQXZLaXBjYmlBZ0lDb2dSbWw0SUhSb1pTQm9aV0Z3SUdKNUlHMXZkbWx1WnlCaGJpQmxiblJ5ZVNCMGJ5QmhJRzVsZHlCc2IzZGxjaUJ3YjNOcGRHbHZiaTVjYmlBZ0lDcGNiaUFnSUNvZ1FIQnlhWFpoZEdWY2JpQWdJQ29nUUhCaGNtRnRJSHRPZFcxaVpYSjlJSE4wWVhKMFNXNWtaWGdnTFNCVWFHVWdhVzVrWlhnZ2IyWWdkR2hsSUdWdWRISjVJSFJ2SUcxdmRtVXVYRzRnSUNBcUwxeHVJQ0JmWW5WaVlteGxSRzkzYmloemRHRnlkRWx1WkdWNEtTQjdYRzRnSUNBZ2JHVjBJR1Z1ZEhKNUlEMGdkR2hwY3k1ZmFHVmhjRnR6ZEdGeWRFbHVaR1Y0WFR0Y2JseHVJQ0FnSUd4bGRDQnBibVJsZUNBOUlITjBZWEowU1c1a1pYZzdYRzRnSUNBZ2JHVjBJR014YVc1a1pYZ2dQU0JwYm1SbGVDQXFJREk3WEc0Z0lDQWdiR1YwSUdNeWFXNWtaWGdnUFNCak1XbHVaR1Y0SUNzZ01UdGNiaUFnSUNCc1pYUWdZMmhwYkdReElEMGdkR2hwY3k1ZmFHVmhjRnRqTVdsdVpHVjRYVHRjYmlBZ0lDQnNaWFFnWTJocGJHUXlJRDBnZEdocGN5NWZhR1ZoY0Z0ak1tbHVaR1Y0WFR0Y2JseHVJQ0FnSUhkb2FXeGxJQ2dvWTJocGJHUXhJQ1ltSUhSb2FYTXVYMmx6VEc5M1pYSW9aVzUwY25rdWNYVmxkV1ZVYVcxbExDQmphR2xzWkRFdWNYVmxkV1ZVYVcxbEtTbkNvSHg4WEc0Z0lDQWdJQ0FnSUNBZ0lDaGphR2xzWkRJZ0ppWWdkR2hwY3k1ZmFYTk1iM2RsY2lobGJuUnllUzV4ZFdWMVpWUnBiV1VzSUdOb2FXeGtNaTV4ZFdWMVpWUnBiV1VwS1NsY2JpQWdJQ0I3WEc0Z0lDQWdJQ0F2THlCemQyRndJSGRwZEdnZ2RHaGxJRzFwYm1sdGRXMGdZMmhwYkdSY2JpQWdJQ0FnSUd4bGRDQjBZWEpuWlhSSmJtUmxlRHRjYmx4dUlDQWdJQ0FnYVdZZ0tHTm9hV3hrTWlsY2JpQWdJQ0FnSUNBZ2RHRnlaMlYwU1c1a1pYZ2dQU0IwYUdsekxsOXBjMGhwWjJobGNpaGphR2xzWkRFdWNYVmxkV1ZVYVcxbExDQmphR2xzWkRJdWNYVmxkV1ZVYVcxbEtTQS9JR014YVc1a1pYZ2dPaUJqTW1sdVpHVjRPMXh1SUNBZ0lDQWdaV3h6WlZ4dUlDQWdJQ0FnSUNCMFlYSm5aWFJKYm1SbGVDQTlJR014YVc1a1pYZzdYRzVjYmlBZ0lDQWdJSE4zWVhBb2RHaHBjeTVmYUdWaGNDd2dhVzVrWlhnc0lIUmhjbWRsZEVsdVpHVjRLVHRjYmx4dUlDQWdJQ0FnTHk4Z2RYQmtZWFJsSUhSdklHWnBibVFnYm1WNGRDQmphR2xzWkhKbGJseHVJQ0FnSUNBZ2FXNWtaWGdnUFNCMFlYSm5aWFJKYm1SbGVEdGNiaUFnSUNBZ0lHTXhhVzVrWlhnZ1BTQnBibVJsZUNBcUlESTdYRzRnSUNBZ0lDQmpNbWx1WkdWNElEMGdZekZwYm1SbGVDQXJJREU3WEc0Z0lDQWdJQ0JqYUdsc1pERWdQU0IwYUdsekxsOW9aV0Z3VzJNeGFXNWtaWGhkTzF4dUlDQWdJQ0FnWTJocGJHUXlJRDBnZEdocGN5NWZhR1ZoY0Z0ak1tbHVaR1Y0WFR0Y2JpQWdJQ0I5WEc0Z0lIMWNibHh1SUNBdktpcGNiaUFnSUNvZ1FuVnBiR1FnZEdobElHaGxZWEFnS0daeWIyMGdZbTkwZEc5dElIVndLUzVjYmlBZ0lDb3ZYRzRnSUdKMWFXeGtTR1ZoY0NncElIdGNiaUFnSUNBdkx5Qm1hVzVrSUhSb1pTQnBibVJsZUNCdlppQjBhR1VnYkdGemRDQnBiblJsY201aGJDQnViMlJsWEc0Z0lDQWdMeThnUUhSdlpHOGdMU0J0WVd0bElITjFjbVVnZEdoaGRDZHpJSFJvWlNCeWFXZG9kQ0IzWVhrZ2RHOGdaRzh1WEc0Z0lDQWdiR1YwSUcxaGVFbHVaR1Y0SUQwZ1RXRjBhQzVtYkc5dmNpZ29kR2hwY3k1ZlkzVnljbVZ1ZEV4bGJtZDBhQ0F0SURFcElDOGdNaWs3WEc1Y2JpQWdJQ0JtYjNJZ0tHeGxkQ0JwSUQwZ2JXRjRTVzVrWlhnN0lHa2dQaUF3T3lCcExTMHBYRzRnSUNBZ0lDQjBhR2x6TGw5aWRXSmliR1ZFYjNkdUtHa3BPMXh1SUNCOVhHNWNiaUFnTHlvcVhHNGdJQ0FxSUVsdWMyVnlkQ0JoSUc1bGR5QnZZbXBsWTNRZ2FXNGdkR2hsSUdKcGJtRnllU0JvWldGd0lHRnVaQ0J6YjNKMElHbDBMbHh1SUNBZ0tseHVJQ0FnS2lCQWNHRnlZVzBnZTA5aWFtVmpkSDBnWlc1MGNua2dMU0JGYm5SeWVTQjBieUJwYm5ObGNuUXVYRzRnSUNBcUlFQndZWEpoYlNCN1RuVnRZbVZ5ZlNCMGFXMWxJQzBnVkdsdFpTQmhkQ0IzYUdsamFDQjBhR1VnWlc1MGNua2djMmh2ZFd4a0lHSmxJRzl5WkdWeVpYSXVYRzRnSUNBcUlFQnlaWFIxY201eklIdE9kVzFpWlhKOUlDMGdWR2x0WlNCdlppQjBhR1VnWm1seWMzUWdaVzUwY25rZ2FXNGdkR2hsSUdobFlYQXVYRzRnSUNBcUwxeHVJQ0JwYm5ObGNuUW9aVzUwY25rc0lIUnBiV1VwSUh0Y2JpQWdJQ0JwWmlBb1RXRjBhQzVoWW5Nb2RHbHRaU2tnSVQwOUlGQlBVMGxVU1ZaRlgwbE9Sa2xPU1ZSWktTQjdYRzRnSUNBZ0lDQmxiblJ5ZVM1eGRXVjFaVlJwYldVZ1BTQjBhVzFsTzF4dUlDQWdJQ0FnTHk4Z1lXUmtJSFJvWlNCdVpYY2daVzUwY25rZ1lYUWdkR2hsSUdWdVpDQnZaaUIwYUdVZ2FHVmhjRnh1SUNBZ0lDQWdkR2hwY3k1ZmFHVmhjRnQwYUdsekxsOWpkWEp5Wlc1MFRHVnVaM1JvWFNBOUlHVnVkSEo1TzF4dUlDQWdJQ0FnTHk4Z1luVmlZbXhsSUdsMElIVndYRzRnSUNBZ0lDQjBhR2x6TGw5aWRXSmliR1ZWY0NoMGFHbHpMbDlqZFhKeVpXNTBUR1Z1WjNSb0tUdGNiaUFnSUNBZ0lIUm9hWE11WDJOMWNuSmxiblJNWlc1bmRHZ2dLejBnTVR0Y2JseHVJQ0FnSUNBZ2NtVjBkWEp1SUhSb2FYTXVkR2x0WlR0Y2JpQWdJQ0I5WEc1Y2JpQWdJQ0JsYm5SeWVTNXhkV1YxWlZScGJXVWdQU0IxYm1SbFptbHVaV1E3WEc0Z0lDQWdjbVYwZFhKdUlIUm9hWE11Y21WdGIzWmxLR1Z1ZEhKNUtUdGNiaUFnZlZ4dVhHNGdJQzhxS2x4dUlDQWdLaUJOYjNabElHRWdaMmwyWlc0Z1pXNTBjbmtnZEc4Z1lTQnVaWGNnY0c5emFYUnBiMjR1WEc0Z0lDQXFYRzRnSUNBcUlFQndZWEpoYlNCN1QySnFaV04wZlNCbGJuUnllU0F0SUVWdWRISjVJSFJ2SUcxdmRtVXVYRzRnSUNBcUlFQndZWEpoYlNCN1RuVnRZbVZ5ZlNCMGFXMWxJQzBnVkdsdFpTQmhkQ0IzYUdsamFDQjBhR1VnWlc1MGNua2djMmh2ZFd4a0lHSmxJRzl5WkdWeVpYSXVYRzRnSUNBcUlFQnlaWFIxY200Z2UwNTFiV0psY24wZ0xTQlVhVzFsSUc5bUlHWnBjbk4wSUdWdWRISjVJR2x1SUhSb1pTQm9aV0Z3TGx4dUlDQWdLaTljYmlBZ2JXOTJaU2hsYm5SeWVTd2dkR2x0WlNrZ2UxeHVJQ0FnSUdsbUlDaE5ZWFJvTG1GaWN5aDBhVzFsS1NBaFBUMGdVRTlUU1ZSSlZrVmZTVTVHU1U1SlZGa3BJSHRjYmlBZ0lDQWdJR052Ym5OMElHbHVaR1Y0SUQwZ2FXNWtaWGhQWmloMGFHbHpMbDlvWldGd0xDQmxiblJ5ZVNrN1hHNWNiaUFnSUNBZ0lHbG1JQ2hwYm1SbGVDQWhQVDBnTFRFcElIdGNiaUFnSUNBZ0lDQWdaVzUwY25rdWNYVmxkV1ZVYVcxbElEMGdkR2x0WlR0Y2JpQWdJQ0FnSUNBZ0x5OGdaR1ZtYVc1bElHbG1JSFJvWlNCbGJuUnllU0J6YUc5MWJHUWdZbVVnWW5WaVlteGxaQ0IxY0NCdmNpQmtiM2R1WEc0Z0lDQWdJQ0FnSUdOdmJuTjBJSEJoY21WdWRDQTlJSFJvYVhNdVgyaGxZWEJiVFdGMGFDNW1iRzl2Y2locGJtUmxlQ0F2SURJcFhUdGNibHh1SUNBZ0lDQWdJQ0JwWmlBb2NHRnlaVzUwSUNZbUlIUm9hWE11WDJselNHbG5hR1Z5S0hScGJXVXNJSEJoY21WdWRDNXhkV1YxWlZScGJXVXBLVnh1SUNBZ0lDQWdJQ0FnSUhSb2FYTXVYMkoxWW1Kc1pWVndLR2x1WkdWNEtUdGNiaUFnSUNBZ0lDQWdaV3h6WlZ4dUlDQWdJQ0FnSUNBZ0lIUm9hWE11WDJKMVltSnNaVVJ2ZDI0b2FXNWtaWGdwTzF4dUlDQWdJQ0FnZlZ4dVhHNGdJQ0FnSUNCeVpYUjFjbTRnZEdocGN5NTBhVzFsTzF4dUlDQWdJSDFjYmx4dUlDQWdJR1Z1ZEhKNUxuRjFaWFZsVkdsdFpTQTlJSFZ1WkdWbWFXNWxaRHRjYmlBZ0lDQnlaWFIxY200Z2RHaHBjeTV5WlcxdmRtVW9aVzUwY25rcE8xeHVJQ0I5WEc1Y2JpQWdMeW9xWEc0Z0lDQXFJRkpsYlc5MlpTQmhiaUJsYm5SeWVTQm1jbTl0SUhSb1pTQm9aV0Z3SUdGdVpDQm1hWGdnZEdobElHaGxZWEF1WEc0Z0lDQXFYRzRnSUNBcUlFQndZWEpoYlNCN1QySnFaV04wZlNCbGJuUnllU0F0SUVWdWRISjVJSFJ2SUhKbGJXOTJaUzVjYmlBZ0lDb2dRSEpsZEhWeWJpQjdUblZ0WW1WeWZTQXRJRlJwYldVZ2IyWWdabWx5YzNRZ1pXNTBjbmtnYVc0Z2RHaGxJR2hsWVhBdVhHNGdJQ0FxTDF4dUlDQnlaVzF2ZG1Vb1pXNTBjbmtwSUh0Y2JpQWdJQ0F2THlCbWFXNWtJSFJvWlNCcGJtUmxlQ0J2WmlCMGFHVWdaVzUwY25sY2JpQWdJQ0JqYjI1emRDQnBibVJsZUNBOUlHbHVaR1Y0VDJZb2RHaHBjeTVmYUdWaGNDd2daVzUwY25rcE8xeHVYRzRnSUNBZ2FXWWdLR2x1WkdWNElDRTlQU0F0TVNrZ2UxeHVJQ0FnSUNBZ1kyOXVjM1FnYkdGemRFbHVaR1Y0SUQwZ2RHaHBjeTVmWTNWeWNtVnVkRXhsYm1kMGFDQXRJREU3WEc1Y2JpQWdJQ0FnSUM4dklHbG1JSFJvWlNCbGJuUnllU0JwY3lCMGFHVWdiR0Z6ZENCdmJtVmNiaUFnSUNBZ0lHbG1JQ2hwYm1SbGVDQTlQVDBnYkdGemRFbHVaR1Y0S1NCN1hHNGdJQ0FnSUNBZ0lDOHZJSEpsYlc5MlpTQjBhR1VnWld4bGJXVnVkQ0JtY205dElHaGxZWEJjYmlBZ0lDQWdJQ0FnZEdocGN5NWZhR1ZoY0Z0c1lYTjBTVzVrWlhoZElEMGdkVzVrWldacGJtVmtPMXh1SUNBZ0lDQWdJQ0F2THlCMWNHUmhkR1VnWTNWeWNtVnVkQ0JzWlc1bmRHaGNiaUFnSUNBZ0lDQWdkR2hwY3k1ZlkzVnljbVZ1ZEV4bGJtZDBhQ0E5SUd4aGMzUkpibVJsZUR0Y2JseHVJQ0FnSUNBZ0lDQnlaWFIxY200Z2RHaHBjeTUwYVcxbE8xeHVJQ0FnSUNBZ2ZTQmxiSE5sSUh0Y2JpQWdJQ0FnSUNBZ0x5OGdjM2RoY0NCM2FYUm9JSFJvWlNCc1lYTjBJR1ZzWlcxbGJuUWdiMllnZEdobElHaGxZWEJjYmlBZ0lDQWdJQ0FnYzNkaGNDaDBhR2x6TGw5b1pXRndMQ0JwYm1SbGVDd2diR0Z6ZEVsdVpHVjRLVHRjYmlBZ0lDQWdJQ0FnTHk4Z2NtVnRiM1psSUhSb1pTQmxiR1Z0Wlc1MElHWnliMjBnYUdWaGNGeHVJQ0FnSUNBZ0lDQjBhR2x6TGw5b1pXRndXMnhoYzNSSmJtUmxlRjBnUFNCMWJtUmxabWx1WldRN1hHNWNiaUFnSUNBZ0lDQWdhV1lnS0dsdVpHVjRJRDA5UFNBeEtTQjdYRzRnSUNBZ0lDQWdJQ0FnZEdocGN5NWZZblZpWW14bFJHOTNiaWd4S1R0Y2JpQWdJQ0FnSUNBZ2ZTQmxiSE5sSUh0Y2JpQWdJQ0FnSUNBZ0lDQXZMeUJpZFdKaWJHVWdkR2hsSUNobGVDQnNZWE4wS1NCbGJHVnRaVzUwSUhWd0lHOXlJR1J2ZDI0Z1lXTmpiM0prYVc1bklIUnZJR2wwY3lCdVpYY2dZMjl1ZEdWNGRGeHVJQ0FnSUNBZ0lDQWdJR052Ym5OMElHVnVkSEo1SUQwZ2RHaHBjeTVmYUdWaGNGdHBibVJsZUYwN1hHNGdJQ0FnSUNBZ0lDQWdZMjl1YzNRZ2NHRnlaVzUwSUQwZ2RHaHBjeTVmYUdWaGNGdE5ZWFJvTG1ac2IyOXlLR2x1WkdWNElDOGdNaWxkTzF4dVhHNGdJQ0FnSUNBZ0lDQWdhV1lnS0hCaGNtVnVkQ0FtSmlCMGFHbHpMbDlwYzBocFoyaGxjaWhsYm5SeWVTNXhkV1YxWlZScGJXVXNJSEJoY21WdWRDNXhkV1YxWlZScGJXVXBLVnh1SUNBZ0lDQWdJQ0FnSUNBZ2RHaHBjeTVmWW5WaVlteGxWWEFvYVc1a1pYZ3BPMXh1SUNBZ0lDQWdJQ0FnSUdWc2MyVmNiaUFnSUNBZ0lDQWdJQ0FnSUhSb2FYTXVYMkoxWW1Kc1pVUnZkMjRvYVc1a1pYZ3BPMXh1SUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0I5WEc1Y2JpQWdJQ0FnSUM4dklIVndaR0YwWlNCamRYSnlaVzUwSUd4bGJtZDBhRnh1SUNBZ0lDQWdkR2hwY3k1ZlkzVnljbVZ1ZEV4bGJtZDBhQ0E5SUd4aGMzUkpibVJsZUR0Y2JpQWdJQ0I5WEc1Y2JpQWdJQ0J5WlhSMWNtNGdkR2hwY3k1MGFXMWxPMXh1SUNCOVhHNWNiaUFnTHlvcVhHNGdJQ0FxSUVOc1pXRnlJSFJvWlNCeGRXVjFaUzVjYmlBZ0lDb3ZYRzRnSUdOc1pXRnlLQ2tnZTF4dUlDQWdJSFJvYVhNdVgyTjFjbkpsYm5STVpXNW5kR2dnUFNBeE8xeHVJQ0FnSUhSb2FYTXVYMmhsWVhBZ1BTQnVaWGNnUVhKeVlYa29kR2hwY3k1ZmFHVmhjQzVzWlc1bmRHZ3BPMXh1SUNCOVhHNWNiaUFnTHlvcVhHNGdJQ0FxSUVSbFptbHVaWE1nYVdZZ2RHaGxJSEYxWlhWbElHTnZiblJoYVc1eklIUm9aU0JuYVhabGJpQmdaVzUwY25sZ0xseHVJQ0FnS2x4dUlDQWdLaUJBY0dGeVlXMGdlMDlpYW1WamRIMGdaVzUwY25rZ0xTQkZiblJ5ZVNCMGJ5QmlaU0JqYUdWamEyVmtYRzRnSUNBcUlFQnlaWFIxY200Z2UwSnZiMnhsWVc1OVhHNGdJQ0FxTDF4dUlDQm9ZWE1vWlc1MGNua3BJSHRjYmlBZ0lDQnlaWFIxY200Z2RHaHBjeTVmYUdWaGNDNXBibVJsZUU5bUtHVnVkSEo1S1NBaFBUMGdMVEU3WEc0Z0lIMWNibjFjYmx4dVpYaHdiM0owSUdSbFptRjFiSFFnVUhKcGIzSnBkSGxSZFdWMVpUdGNiaUpkZlE9PSIsIi8vIGdldHRpbmcgdGFnIGZyb20gMTkuMS4zLjYgT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZygpXG52YXIgY29mID0gcmVxdWlyZSgnLi9fY29mJyk7XG52YXIgVEFHID0gcmVxdWlyZSgnLi9fd2tzJykoJ3RvU3RyaW5nVGFnJyk7XG4vLyBFUzMgd3JvbmcgaGVyZVxudmFyIEFSRyA9IGNvZihmdW5jdGlvbiAoKSB7IHJldHVybiBhcmd1bWVudHM7IH0oKSkgPT0gJ0FyZ3VtZW50cyc7XG5cbi8vIGZhbGxiYWNrIGZvciBJRTExIFNjcmlwdCBBY2Nlc3MgRGVuaWVkIGVycm9yXG52YXIgdHJ5R2V0ID0gZnVuY3Rpb24gKGl0LCBrZXkpIHtcbiAgdHJ5IHtcbiAgICByZXR1cm4gaXRba2V5XTtcbiAgfSBjYXRjaCAoZSkgeyAvKiBlbXB0eSAqLyB9XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCkge1xuICB2YXIgTywgVCwgQjtcbiAgcmV0dXJuIGl0ID09PSB1bmRlZmluZWQgPyAnVW5kZWZpbmVkJyA6IGl0ID09PSBudWxsID8gJ051bGwnXG4gICAgLy8gQEB0b1N0cmluZ1RhZyBjYXNlXG4gICAgOiB0eXBlb2YgKFQgPSB0cnlHZXQoTyA9IE9iamVjdChpdCksIFRBRykpID09ICdzdHJpbmcnID8gVFxuICAgIC8vIGJ1aWx0aW5UYWcgY2FzZVxuICAgIDogQVJHID8gY29mKE8pXG4gICAgLy8gRVMzIGFyZ3VtZW50cyBmYWxsYmFja1xuICAgIDogKEIgPSBjb2YoTykpID09ICdPYmplY3QnICYmIHR5cGVvZiBPLmNhbGxlZSA9PSAnZnVuY3Rpb24nID8gJ0FyZ3VtZW50cycgOiBCO1xufTtcbiIsInZhciBjbGFzc29mID0gcmVxdWlyZSgnLi9fY2xhc3NvZicpO1xudmFyIElURVJBVE9SID0gcmVxdWlyZSgnLi9fd2tzJykoJ2l0ZXJhdG9yJyk7XG52YXIgSXRlcmF0b3JzID0gcmVxdWlyZSgnLi9faXRlcmF0b3JzJyk7XG5tb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vX2NvcmUnKS5nZXRJdGVyYXRvck1ldGhvZCA9IGZ1bmN0aW9uIChpdCkge1xuICBpZiAoaXQgIT0gdW5kZWZpbmVkKSByZXR1cm4gaXRbSVRFUkFUT1JdXG4gICAgfHwgaXRbJ0BAaXRlcmF0b3InXVxuICAgIHx8IEl0ZXJhdG9yc1tjbGFzc29mKGl0KV07XG59O1xuIiwidmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi9fYW4tb2JqZWN0Jyk7XG52YXIgZ2V0ID0gcmVxdWlyZSgnLi9jb3JlLmdldC1pdGVyYXRvci1tZXRob2QnKTtcbm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9fY29yZScpLmdldEl0ZXJhdG9yID0gZnVuY3Rpb24gKGl0KSB7XG4gIHZhciBpdGVyRm4gPSBnZXQoaXQpO1xuICBpZiAodHlwZW9mIGl0ZXJGbiAhPSAnZnVuY3Rpb24nKSB0aHJvdyBUeXBlRXJyb3IoaXQgKyAnIGlzIG5vdCBpdGVyYWJsZSEnKTtcbiAgcmV0dXJuIGFuT2JqZWN0KGl0ZXJGbi5jYWxsKGl0KSk7XG59O1xuIiwicmVxdWlyZSgnLi4vbW9kdWxlcy93ZWIuZG9tLml0ZXJhYmxlJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi5zdHJpbmcuaXRlcmF0b3InKTtcbm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi4vbW9kdWxlcy9jb3JlLmdldC1pdGVyYXRvcicpO1xuIiwibW9kdWxlLmV4cG9ydHMgPSB7IFwiZGVmYXVsdFwiOiByZXF1aXJlKFwiY29yZS1qcy9saWJyYXJ5L2ZuL2dldC1pdGVyYXRvclwiKSwgX19lc01vZHVsZTogdHJ1ZSB9OyIsInZhciBoaWRlID0gcmVxdWlyZSgnLi9faGlkZScpO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAodGFyZ2V0LCBzcmMsIHNhZmUpIHtcbiAgZm9yICh2YXIga2V5IGluIHNyYykge1xuICAgIGlmIChzYWZlICYmIHRhcmdldFtrZXldKSB0YXJnZXRba2V5XSA9IHNyY1trZXldO1xuICAgIGVsc2UgaGlkZSh0YXJnZXQsIGtleSwgc3JjW2tleV0pO1xuICB9IHJldHVybiB0YXJnZXQ7XG59O1xuIiwibW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQsIENvbnN0cnVjdG9yLCBuYW1lLCBmb3JiaWRkZW5GaWVsZCkge1xuICBpZiAoIShpdCBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSB8fCAoZm9yYmlkZGVuRmllbGQgIT09IHVuZGVmaW5lZCAmJiBmb3JiaWRkZW5GaWVsZCBpbiBpdCkpIHtcbiAgICB0aHJvdyBUeXBlRXJyb3IobmFtZSArICc6IGluY29ycmVjdCBpbnZvY2F0aW9uIScpO1xuICB9IHJldHVybiBpdDtcbn07XG4iLCIvLyBjYWxsIHNvbWV0aGluZyBvbiBpdGVyYXRvciBzdGVwIHdpdGggc2FmZSBjbG9zaW5nIG9uIGVycm9yXG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0ZXJhdG9yLCBmbiwgdmFsdWUsIGVudHJpZXMpIHtcbiAgdHJ5IHtcbiAgICByZXR1cm4gZW50cmllcyA/IGZuKGFuT2JqZWN0KHZhbHVlKVswXSwgdmFsdWVbMV0pIDogZm4odmFsdWUpO1xuICAvLyA3LjQuNiBJdGVyYXRvckNsb3NlKGl0ZXJhdG9yLCBjb21wbGV0aW9uKVxuICB9IGNhdGNoIChlKSB7XG4gICAgdmFyIHJldCA9IGl0ZXJhdG9yWydyZXR1cm4nXTtcbiAgICBpZiAocmV0ICE9PSB1bmRlZmluZWQpIGFuT2JqZWN0KHJldC5jYWxsKGl0ZXJhdG9yKSk7XG4gICAgdGhyb3cgZTtcbiAgfVxufTtcbiIsIi8vIGNoZWNrIG9uIGRlZmF1bHQgQXJyYXkgaXRlcmF0b3JcbnZhciBJdGVyYXRvcnMgPSByZXF1aXJlKCcuL19pdGVyYXRvcnMnKTtcbnZhciBJVEVSQVRPUiA9IHJlcXVpcmUoJy4vX3drcycpKCdpdGVyYXRvcicpO1xudmFyIEFycmF5UHJvdG8gPSBBcnJheS5wcm90b3R5cGU7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0KSB7XG4gIHJldHVybiBpdCAhPT0gdW5kZWZpbmVkICYmIChJdGVyYXRvcnMuQXJyYXkgPT09IGl0IHx8IEFycmF5UHJvdG9bSVRFUkFUT1JdID09PSBpdCk7XG59O1xuIiwidmFyIGN0eCA9IHJlcXVpcmUoJy4vX2N0eCcpO1xudmFyIGNhbGwgPSByZXF1aXJlKCcuL19pdGVyLWNhbGwnKTtcbnZhciBpc0FycmF5SXRlciA9IHJlcXVpcmUoJy4vX2lzLWFycmF5LWl0ZXInKTtcbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4vX2FuLW9iamVjdCcpO1xudmFyIHRvTGVuZ3RoID0gcmVxdWlyZSgnLi9fdG8tbGVuZ3RoJyk7XG52YXIgZ2V0SXRlckZuID0gcmVxdWlyZSgnLi9jb3JlLmdldC1pdGVyYXRvci1tZXRob2QnKTtcbnZhciBCUkVBSyA9IHt9O1xudmFyIFJFVFVSTiA9IHt9O1xudmFyIGV4cG9ydHMgPSBtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdGVyYWJsZSwgZW50cmllcywgZm4sIHRoYXQsIElURVJBVE9SKSB7XG4gIHZhciBpdGVyRm4gPSBJVEVSQVRPUiA/IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGl0ZXJhYmxlOyB9IDogZ2V0SXRlckZuKGl0ZXJhYmxlKTtcbiAgdmFyIGYgPSBjdHgoZm4sIHRoYXQsIGVudHJpZXMgPyAyIDogMSk7XG4gIHZhciBpbmRleCA9IDA7XG4gIHZhciBsZW5ndGgsIHN0ZXAsIGl0ZXJhdG9yLCByZXN1bHQ7XG4gIGlmICh0eXBlb2YgaXRlckZuICE9ICdmdW5jdGlvbicpIHRocm93IFR5cGVFcnJvcihpdGVyYWJsZSArICcgaXMgbm90IGl0ZXJhYmxlIScpO1xuICAvLyBmYXN0IGNhc2UgZm9yIGFycmF5cyB3aXRoIGRlZmF1bHQgaXRlcmF0b3JcbiAgaWYgKGlzQXJyYXlJdGVyKGl0ZXJGbikpIGZvciAobGVuZ3RoID0gdG9MZW5ndGgoaXRlcmFibGUubGVuZ3RoKTsgbGVuZ3RoID4gaW5kZXg7IGluZGV4KyspIHtcbiAgICByZXN1bHQgPSBlbnRyaWVzID8gZihhbk9iamVjdChzdGVwID0gaXRlcmFibGVbaW5kZXhdKVswXSwgc3RlcFsxXSkgOiBmKGl0ZXJhYmxlW2luZGV4XSk7XG4gICAgaWYgKHJlc3VsdCA9PT0gQlJFQUsgfHwgcmVzdWx0ID09PSBSRVRVUk4pIHJldHVybiByZXN1bHQ7XG4gIH0gZWxzZSBmb3IgKGl0ZXJhdG9yID0gaXRlckZuLmNhbGwoaXRlcmFibGUpOyAhKHN0ZXAgPSBpdGVyYXRvci5uZXh0KCkpLmRvbmU7KSB7XG4gICAgcmVzdWx0ID0gY2FsbChpdGVyYXRvciwgZiwgc3RlcC52YWx1ZSwgZW50cmllcyk7XG4gICAgaWYgKHJlc3VsdCA9PT0gQlJFQUsgfHwgcmVzdWx0ID09PSBSRVRVUk4pIHJldHVybiByZXN1bHQ7XG4gIH1cbn07XG5leHBvcnRzLkJSRUFLID0gQlJFQUs7XG5leHBvcnRzLlJFVFVSTiA9IFJFVFVSTjtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciBnbG9iYWwgPSByZXF1aXJlKCcuL19nbG9iYWwnKTtcbnZhciBjb3JlID0gcmVxdWlyZSgnLi9fY29yZScpO1xudmFyIGRQID0gcmVxdWlyZSgnLi9fb2JqZWN0LWRwJyk7XG52YXIgREVTQ1JJUFRPUlMgPSByZXF1aXJlKCcuL19kZXNjcmlwdG9ycycpO1xudmFyIFNQRUNJRVMgPSByZXF1aXJlKCcuL193a3MnKSgnc3BlY2llcycpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChLRVkpIHtcbiAgdmFyIEMgPSB0eXBlb2YgY29yZVtLRVldID09ICdmdW5jdGlvbicgPyBjb3JlW0tFWV0gOiBnbG9iYWxbS0VZXTtcbiAgaWYgKERFU0NSSVBUT1JTICYmIEMgJiYgIUNbU1BFQ0lFU10pIGRQLmYoQywgU1BFQ0lFUywge1xuICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHRoaXM7IH1cbiAgfSk7XG59O1xuIiwidmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi9faXMtb2JqZWN0Jyk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCwgVFlQRSkge1xuICBpZiAoIWlzT2JqZWN0KGl0KSB8fCBpdC5fdCAhPT0gVFlQRSkgdGhyb3cgVHlwZUVycm9yKCdJbmNvbXBhdGlibGUgcmVjZWl2ZXIsICcgKyBUWVBFICsgJyByZXF1aXJlZCEnKTtcbiAgcmV0dXJuIGl0O1xufTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciBkUCA9IHJlcXVpcmUoJy4vX29iamVjdC1kcCcpLmY7XG52YXIgY3JlYXRlID0gcmVxdWlyZSgnLi9fb2JqZWN0LWNyZWF0ZScpO1xudmFyIHJlZGVmaW5lQWxsID0gcmVxdWlyZSgnLi9fcmVkZWZpbmUtYWxsJyk7XG52YXIgY3R4ID0gcmVxdWlyZSgnLi9fY3R4Jyk7XG52YXIgYW5JbnN0YW5jZSA9IHJlcXVpcmUoJy4vX2FuLWluc3RhbmNlJyk7XG52YXIgZm9yT2YgPSByZXF1aXJlKCcuL19mb3Itb2YnKTtcbnZhciAkaXRlckRlZmluZSA9IHJlcXVpcmUoJy4vX2l0ZXItZGVmaW5lJyk7XG52YXIgc3RlcCA9IHJlcXVpcmUoJy4vX2l0ZXItc3RlcCcpO1xudmFyIHNldFNwZWNpZXMgPSByZXF1aXJlKCcuL19zZXQtc3BlY2llcycpO1xudmFyIERFU0NSSVBUT1JTID0gcmVxdWlyZSgnLi9fZGVzY3JpcHRvcnMnKTtcbnZhciBmYXN0S2V5ID0gcmVxdWlyZSgnLi9fbWV0YScpLmZhc3RLZXk7XG52YXIgdmFsaWRhdGUgPSByZXF1aXJlKCcuL192YWxpZGF0ZS1jb2xsZWN0aW9uJyk7XG52YXIgU0laRSA9IERFU0NSSVBUT1JTID8gJ19zJyA6ICdzaXplJztcblxudmFyIGdldEVudHJ5ID0gZnVuY3Rpb24gKHRoYXQsIGtleSkge1xuICAvLyBmYXN0IGNhc2VcbiAgdmFyIGluZGV4ID0gZmFzdEtleShrZXkpO1xuICB2YXIgZW50cnk7XG4gIGlmIChpbmRleCAhPT0gJ0YnKSByZXR1cm4gdGhhdC5faVtpbmRleF07XG4gIC8vIGZyb3plbiBvYmplY3QgY2FzZVxuICBmb3IgKGVudHJ5ID0gdGhhdC5fZjsgZW50cnk7IGVudHJ5ID0gZW50cnkubikge1xuICAgIGlmIChlbnRyeS5rID09IGtleSkgcmV0dXJuIGVudHJ5O1xuICB9XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgZ2V0Q29uc3RydWN0b3I6IGZ1bmN0aW9uICh3cmFwcGVyLCBOQU1FLCBJU19NQVAsIEFEREVSKSB7XG4gICAgdmFyIEMgPSB3cmFwcGVyKGZ1bmN0aW9uICh0aGF0LCBpdGVyYWJsZSkge1xuICAgICAgYW5JbnN0YW5jZSh0aGF0LCBDLCBOQU1FLCAnX2knKTtcbiAgICAgIHRoYXQuX3QgPSBOQU1FOyAgICAgICAgIC8vIGNvbGxlY3Rpb24gdHlwZVxuICAgICAgdGhhdC5faSA9IGNyZWF0ZShudWxsKTsgLy8gaW5kZXhcbiAgICAgIHRoYXQuX2YgPSB1bmRlZmluZWQ7ICAgIC8vIGZpcnN0IGVudHJ5XG4gICAgICB0aGF0Ll9sID0gdW5kZWZpbmVkOyAgICAvLyBsYXN0IGVudHJ5XG4gICAgICB0aGF0W1NJWkVdID0gMDsgICAgICAgICAvLyBzaXplXG4gICAgICBpZiAoaXRlcmFibGUgIT0gdW5kZWZpbmVkKSBmb3JPZihpdGVyYWJsZSwgSVNfTUFQLCB0aGF0W0FEREVSXSwgdGhhdCk7XG4gICAgfSk7XG4gICAgcmVkZWZpbmVBbGwoQy5wcm90b3R5cGUsIHtcbiAgICAgIC8vIDIzLjEuMy4xIE1hcC5wcm90b3R5cGUuY2xlYXIoKVxuICAgICAgLy8gMjMuMi4zLjIgU2V0LnByb3RvdHlwZS5jbGVhcigpXG4gICAgICBjbGVhcjogZnVuY3Rpb24gY2xlYXIoKSB7XG4gICAgICAgIGZvciAodmFyIHRoYXQgPSB2YWxpZGF0ZSh0aGlzLCBOQU1FKSwgZGF0YSA9IHRoYXQuX2ksIGVudHJ5ID0gdGhhdC5fZjsgZW50cnk7IGVudHJ5ID0gZW50cnkubikge1xuICAgICAgICAgIGVudHJ5LnIgPSB0cnVlO1xuICAgICAgICAgIGlmIChlbnRyeS5wKSBlbnRyeS5wID0gZW50cnkucC5uID0gdW5kZWZpbmVkO1xuICAgICAgICAgIGRlbGV0ZSBkYXRhW2VudHJ5LmldO1xuICAgICAgICB9XG4gICAgICAgIHRoYXQuX2YgPSB0aGF0Ll9sID0gdW5kZWZpbmVkO1xuICAgICAgICB0aGF0W1NJWkVdID0gMDtcbiAgICAgIH0sXG4gICAgICAvLyAyMy4xLjMuMyBNYXAucHJvdG90eXBlLmRlbGV0ZShrZXkpXG4gICAgICAvLyAyMy4yLjMuNCBTZXQucHJvdG90eXBlLmRlbGV0ZSh2YWx1ZSlcbiAgICAgICdkZWxldGUnOiBmdW5jdGlvbiAoa2V5KSB7XG4gICAgICAgIHZhciB0aGF0ID0gdmFsaWRhdGUodGhpcywgTkFNRSk7XG4gICAgICAgIHZhciBlbnRyeSA9IGdldEVudHJ5KHRoYXQsIGtleSk7XG4gICAgICAgIGlmIChlbnRyeSkge1xuICAgICAgICAgIHZhciBuZXh0ID0gZW50cnkubjtcbiAgICAgICAgICB2YXIgcHJldiA9IGVudHJ5LnA7XG4gICAgICAgICAgZGVsZXRlIHRoYXQuX2lbZW50cnkuaV07XG4gICAgICAgICAgZW50cnkuciA9IHRydWU7XG4gICAgICAgICAgaWYgKHByZXYpIHByZXYubiA9IG5leHQ7XG4gICAgICAgICAgaWYgKG5leHQpIG5leHQucCA9IHByZXY7XG4gICAgICAgICAgaWYgKHRoYXQuX2YgPT0gZW50cnkpIHRoYXQuX2YgPSBuZXh0O1xuICAgICAgICAgIGlmICh0aGF0Ll9sID09IGVudHJ5KSB0aGF0Ll9sID0gcHJldjtcbiAgICAgICAgICB0aGF0W1NJWkVdLS07XG4gICAgICAgIH0gcmV0dXJuICEhZW50cnk7XG4gICAgICB9LFxuICAgICAgLy8gMjMuMi4zLjYgU2V0LnByb3RvdHlwZS5mb3JFYWNoKGNhbGxiYWNrZm4sIHRoaXNBcmcgPSB1bmRlZmluZWQpXG4gICAgICAvLyAyMy4xLjMuNSBNYXAucHJvdG90eXBlLmZvckVhY2goY2FsbGJhY2tmbiwgdGhpc0FyZyA9IHVuZGVmaW5lZClcbiAgICAgIGZvckVhY2g6IGZ1bmN0aW9uIGZvckVhY2goY2FsbGJhY2tmbiAvKiAsIHRoYXQgPSB1bmRlZmluZWQgKi8pIHtcbiAgICAgICAgdmFsaWRhdGUodGhpcywgTkFNRSk7XG4gICAgICAgIHZhciBmID0gY3R4KGNhbGxiYWNrZm4sIGFyZ3VtZW50cy5sZW5ndGggPiAxID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkLCAzKTtcbiAgICAgICAgdmFyIGVudHJ5O1xuICAgICAgICB3aGlsZSAoZW50cnkgPSBlbnRyeSA/IGVudHJ5Lm4gOiB0aGlzLl9mKSB7XG4gICAgICAgICAgZihlbnRyeS52LCBlbnRyeS5rLCB0aGlzKTtcbiAgICAgICAgICAvLyByZXZlcnQgdG8gdGhlIGxhc3QgZXhpc3RpbmcgZW50cnlcbiAgICAgICAgICB3aGlsZSAoZW50cnkgJiYgZW50cnkucikgZW50cnkgPSBlbnRyeS5wO1xuICAgICAgICB9XG4gICAgICB9LFxuICAgICAgLy8gMjMuMS4zLjcgTWFwLnByb3RvdHlwZS5oYXMoa2V5KVxuICAgICAgLy8gMjMuMi4zLjcgU2V0LnByb3RvdHlwZS5oYXModmFsdWUpXG4gICAgICBoYXM6IGZ1bmN0aW9uIGhhcyhrZXkpIHtcbiAgICAgICAgcmV0dXJuICEhZ2V0RW50cnkodmFsaWRhdGUodGhpcywgTkFNRSksIGtleSk7XG4gICAgICB9XG4gICAgfSk7XG4gICAgaWYgKERFU0NSSVBUT1JTKSBkUChDLnByb3RvdHlwZSwgJ3NpemUnLCB7XG4gICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHZhbGlkYXRlKHRoaXMsIE5BTUUpW1NJWkVdO1xuICAgICAgfVxuICAgIH0pO1xuICAgIHJldHVybiBDO1xuICB9LFxuICBkZWY6IGZ1bmN0aW9uICh0aGF0LCBrZXksIHZhbHVlKSB7XG4gICAgdmFyIGVudHJ5ID0gZ2V0RW50cnkodGhhdCwga2V5KTtcbiAgICB2YXIgcHJldiwgaW5kZXg7XG4gICAgLy8gY2hhbmdlIGV4aXN0aW5nIGVudHJ5XG4gICAgaWYgKGVudHJ5KSB7XG4gICAgICBlbnRyeS52ID0gdmFsdWU7XG4gICAgLy8gY3JlYXRlIG5ldyBlbnRyeVxuICAgIH0gZWxzZSB7XG4gICAgICB0aGF0Ll9sID0gZW50cnkgPSB7XG4gICAgICAgIGk6IGluZGV4ID0gZmFzdEtleShrZXksIHRydWUpLCAvLyA8LSBpbmRleFxuICAgICAgICBrOiBrZXksICAgICAgICAgICAgICAgICAgICAgICAgLy8gPC0ga2V5XG4gICAgICAgIHY6IHZhbHVlLCAgICAgICAgICAgICAgICAgICAgICAvLyA8LSB2YWx1ZVxuICAgICAgICBwOiBwcmV2ID0gdGhhdC5fbCwgICAgICAgICAgICAgLy8gPC0gcHJldmlvdXMgZW50cnlcbiAgICAgICAgbjogdW5kZWZpbmVkLCAgICAgICAgICAgICAgICAgIC8vIDwtIG5leHQgZW50cnlcbiAgICAgICAgcjogZmFsc2UgICAgICAgICAgICAgICAgICAgICAgIC8vIDwtIHJlbW92ZWRcbiAgICAgIH07XG4gICAgICBpZiAoIXRoYXQuX2YpIHRoYXQuX2YgPSBlbnRyeTtcbiAgICAgIGlmIChwcmV2KSBwcmV2Lm4gPSBlbnRyeTtcbiAgICAgIHRoYXRbU0laRV0rKztcbiAgICAgIC8vIGFkZCB0byBpbmRleFxuICAgICAgaWYgKGluZGV4ICE9PSAnRicpIHRoYXQuX2lbaW5kZXhdID0gZW50cnk7XG4gICAgfSByZXR1cm4gdGhhdDtcbiAgfSxcbiAgZ2V0RW50cnk6IGdldEVudHJ5LFxuICBzZXRTdHJvbmc6IGZ1bmN0aW9uIChDLCBOQU1FLCBJU19NQVApIHtcbiAgICAvLyBhZGQgLmtleXMsIC52YWx1ZXMsIC5lbnRyaWVzLCBbQEBpdGVyYXRvcl1cbiAgICAvLyAyMy4xLjMuNCwgMjMuMS4zLjgsIDIzLjEuMy4xMSwgMjMuMS4zLjEyLCAyMy4yLjMuNSwgMjMuMi4zLjgsIDIzLjIuMy4xMCwgMjMuMi4zLjExXG4gICAgJGl0ZXJEZWZpbmUoQywgTkFNRSwgZnVuY3Rpb24gKGl0ZXJhdGVkLCBraW5kKSB7XG4gICAgICB0aGlzLl90ID0gdmFsaWRhdGUoaXRlcmF0ZWQsIE5BTUUpOyAvLyB0YXJnZXRcbiAgICAgIHRoaXMuX2sgPSBraW5kOyAgICAgICAgICAgICAgICAgICAgIC8vIGtpbmRcbiAgICAgIHRoaXMuX2wgPSB1bmRlZmluZWQ7ICAgICAgICAgICAgICAgIC8vIHByZXZpb3VzXG4gICAgfSwgZnVuY3Rpb24gKCkge1xuICAgICAgdmFyIHRoYXQgPSB0aGlzO1xuICAgICAgdmFyIGtpbmQgPSB0aGF0Ll9rO1xuICAgICAgdmFyIGVudHJ5ID0gdGhhdC5fbDtcbiAgICAgIC8vIHJldmVydCB0byB0aGUgbGFzdCBleGlzdGluZyBlbnRyeVxuICAgICAgd2hpbGUgKGVudHJ5ICYmIGVudHJ5LnIpIGVudHJ5ID0gZW50cnkucDtcbiAgICAgIC8vIGdldCBuZXh0IGVudHJ5XG4gICAgICBpZiAoIXRoYXQuX3QgfHwgISh0aGF0Ll9sID0gZW50cnkgPSBlbnRyeSA/IGVudHJ5Lm4gOiB0aGF0Ll90Ll9mKSkge1xuICAgICAgICAvLyBvciBmaW5pc2ggdGhlIGl0ZXJhdGlvblxuICAgICAgICB0aGF0Ll90ID0gdW5kZWZpbmVkO1xuICAgICAgICByZXR1cm4gc3RlcCgxKTtcbiAgICAgIH1cbiAgICAgIC8vIHJldHVybiBzdGVwIGJ5IGtpbmRcbiAgICAgIGlmIChraW5kID09ICdrZXlzJykgcmV0dXJuIHN0ZXAoMCwgZW50cnkuayk7XG4gICAgICBpZiAoa2luZCA9PSAndmFsdWVzJykgcmV0dXJuIHN0ZXAoMCwgZW50cnkudik7XG4gICAgICByZXR1cm4gc3RlcCgwLCBbZW50cnkuaywgZW50cnkudl0pO1xuICAgIH0sIElTX01BUCA/ICdlbnRyaWVzJyA6ICd2YWx1ZXMnLCAhSVNfTUFQLCB0cnVlKTtcblxuICAgIC8vIGFkZCBbQEBzcGVjaWVzXSwgMjMuMS4yLjIsIDIzLjIuMi4yXG4gICAgc2V0U3BlY2llcyhOQU1FKTtcbiAgfVxufTtcbiIsInZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4vX2lzLW9iamVjdCcpO1xudmFyIGlzQXJyYXkgPSByZXF1aXJlKCcuL19pcy1hcnJheScpO1xudmFyIFNQRUNJRVMgPSByZXF1aXJlKCcuL193a3MnKSgnc3BlY2llcycpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChvcmlnaW5hbCkge1xuICB2YXIgQztcbiAgaWYgKGlzQXJyYXkob3JpZ2luYWwpKSB7XG4gICAgQyA9IG9yaWdpbmFsLmNvbnN0cnVjdG9yO1xuICAgIC8vIGNyb3NzLXJlYWxtIGZhbGxiYWNrXG4gICAgaWYgKHR5cGVvZiBDID09ICdmdW5jdGlvbicgJiYgKEMgPT09IEFycmF5IHx8IGlzQXJyYXkoQy5wcm90b3R5cGUpKSkgQyA9IHVuZGVmaW5lZDtcbiAgICBpZiAoaXNPYmplY3QoQykpIHtcbiAgICAgIEMgPSBDW1NQRUNJRVNdO1xuICAgICAgaWYgKEMgPT09IG51bGwpIEMgPSB1bmRlZmluZWQ7XG4gICAgfVxuICB9IHJldHVybiBDID09PSB1bmRlZmluZWQgPyBBcnJheSA6IEM7XG59O1xuIiwiLy8gOS40LjIuMyBBcnJheVNwZWNpZXNDcmVhdGUob3JpZ2luYWxBcnJheSwgbGVuZ3RoKVxudmFyIHNwZWNpZXNDb25zdHJ1Y3RvciA9IHJlcXVpcmUoJy4vX2FycmF5LXNwZWNpZXMtY29uc3RydWN0b3InKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAob3JpZ2luYWwsIGxlbmd0aCkge1xuICByZXR1cm4gbmV3IChzcGVjaWVzQ29uc3RydWN0b3Iob3JpZ2luYWwpKShsZW5ndGgpO1xufTtcbiIsIi8vIDAgLT4gQXJyYXkjZm9yRWFjaFxuLy8gMSAtPiBBcnJheSNtYXBcbi8vIDIgLT4gQXJyYXkjZmlsdGVyXG4vLyAzIC0+IEFycmF5I3NvbWVcbi8vIDQgLT4gQXJyYXkjZXZlcnlcbi8vIDUgLT4gQXJyYXkjZmluZFxuLy8gNiAtPiBBcnJheSNmaW5kSW5kZXhcbnZhciBjdHggPSByZXF1aXJlKCcuL19jdHgnKTtcbnZhciBJT2JqZWN0ID0gcmVxdWlyZSgnLi9faW9iamVjdCcpO1xudmFyIHRvT2JqZWN0ID0gcmVxdWlyZSgnLi9fdG8tb2JqZWN0Jyk7XG52YXIgdG9MZW5ndGggPSByZXF1aXJlKCcuL190by1sZW5ndGgnKTtcbnZhciBhc2MgPSByZXF1aXJlKCcuL19hcnJheS1zcGVjaWVzLWNyZWF0ZScpO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoVFlQRSwgJGNyZWF0ZSkge1xuICB2YXIgSVNfTUFQID0gVFlQRSA9PSAxO1xuICB2YXIgSVNfRklMVEVSID0gVFlQRSA9PSAyO1xuICB2YXIgSVNfU09NRSA9IFRZUEUgPT0gMztcbiAgdmFyIElTX0VWRVJZID0gVFlQRSA9PSA0O1xuICB2YXIgSVNfRklORF9JTkRFWCA9IFRZUEUgPT0gNjtcbiAgdmFyIE5PX0hPTEVTID0gVFlQRSA9PSA1IHx8IElTX0ZJTkRfSU5ERVg7XG4gIHZhciBjcmVhdGUgPSAkY3JlYXRlIHx8IGFzYztcbiAgcmV0dXJuIGZ1bmN0aW9uICgkdGhpcywgY2FsbGJhY2tmbiwgdGhhdCkge1xuICAgIHZhciBPID0gdG9PYmplY3QoJHRoaXMpO1xuICAgIHZhciBzZWxmID0gSU9iamVjdChPKTtcbiAgICB2YXIgZiA9IGN0eChjYWxsYmFja2ZuLCB0aGF0LCAzKTtcbiAgICB2YXIgbGVuZ3RoID0gdG9MZW5ndGgoc2VsZi5sZW5ndGgpO1xuICAgIHZhciBpbmRleCA9IDA7XG4gICAgdmFyIHJlc3VsdCA9IElTX01BUCA/IGNyZWF0ZSgkdGhpcywgbGVuZ3RoKSA6IElTX0ZJTFRFUiA/IGNyZWF0ZSgkdGhpcywgMCkgOiB1bmRlZmluZWQ7XG4gICAgdmFyIHZhbCwgcmVzO1xuICAgIGZvciAoO2xlbmd0aCA+IGluZGV4OyBpbmRleCsrKSBpZiAoTk9fSE9MRVMgfHwgaW5kZXggaW4gc2VsZikge1xuICAgICAgdmFsID0gc2VsZltpbmRleF07XG4gICAgICByZXMgPSBmKHZhbCwgaW5kZXgsIE8pO1xuICAgICAgaWYgKFRZUEUpIHtcbiAgICAgICAgaWYgKElTX01BUCkgcmVzdWx0W2luZGV4XSA9IHJlczsgICAvLyBtYXBcbiAgICAgICAgZWxzZSBpZiAocmVzKSBzd2l0Y2ggKFRZUEUpIHtcbiAgICAgICAgICBjYXNlIDM6IHJldHVybiB0cnVlOyAgICAgICAgICAgICAvLyBzb21lXG4gICAgICAgICAgY2FzZSA1OiByZXR1cm4gdmFsOyAgICAgICAgICAgICAgLy8gZmluZFxuICAgICAgICAgIGNhc2UgNjogcmV0dXJuIGluZGV4OyAgICAgICAgICAgIC8vIGZpbmRJbmRleFxuICAgICAgICAgIGNhc2UgMjogcmVzdWx0LnB1c2godmFsKTsgICAgICAgIC8vIGZpbHRlclxuICAgICAgICB9IGVsc2UgaWYgKElTX0VWRVJZKSByZXR1cm4gZmFsc2U7IC8vIGV2ZXJ5XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBJU19GSU5EX0lOREVYID8gLTEgOiBJU19TT01FIHx8IElTX0VWRVJZID8gSVNfRVZFUlkgOiByZXN1bHQ7XG4gIH07XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4vX2dsb2JhbCcpO1xudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciBtZXRhID0gcmVxdWlyZSgnLi9fbWV0YScpO1xudmFyIGZhaWxzID0gcmVxdWlyZSgnLi9fZmFpbHMnKTtcbnZhciBoaWRlID0gcmVxdWlyZSgnLi9faGlkZScpO1xudmFyIHJlZGVmaW5lQWxsID0gcmVxdWlyZSgnLi9fcmVkZWZpbmUtYWxsJyk7XG52YXIgZm9yT2YgPSByZXF1aXJlKCcuL19mb3Itb2YnKTtcbnZhciBhbkluc3RhbmNlID0gcmVxdWlyZSgnLi9fYW4taW5zdGFuY2UnKTtcbnZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4vX2lzLW9iamVjdCcpO1xudmFyIHNldFRvU3RyaW5nVGFnID0gcmVxdWlyZSgnLi9fc2V0LXRvLXN0cmluZy10YWcnKTtcbnZhciBkUCA9IHJlcXVpcmUoJy4vX29iamVjdC1kcCcpLmY7XG52YXIgZWFjaCA9IHJlcXVpcmUoJy4vX2FycmF5LW1ldGhvZHMnKSgwKTtcbnZhciBERVNDUklQVE9SUyA9IHJlcXVpcmUoJy4vX2Rlc2NyaXB0b3JzJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKE5BTUUsIHdyYXBwZXIsIG1ldGhvZHMsIGNvbW1vbiwgSVNfTUFQLCBJU19XRUFLKSB7XG4gIHZhciBCYXNlID0gZ2xvYmFsW05BTUVdO1xuICB2YXIgQyA9IEJhc2U7XG4gIHZhciBBRERFUiA9IElTX01BUCA/ICdzZXQnIDogJ2FkZCc7XG4gIHZhciBwcm90byA9IEMgJiYgQy5wcm90b3R5cGU7XG4gIHZhciBPID0ge307XG4gIGlmICghREVTQ1JJUFRPUlMgfHwgdHlwZW9mIEMgIT0gJ2Z1bmN0aW9uJyB8fCAhKElTX1dFQUsgfHwgcHJvdG8uZm9yRWFjaCAmJiAhZmFpbHMoZnVuY3Rpb24gKCkge1xuICAgIG5ldyBDKCkuZW50cmllcygpLm5leHQoKTtcbiAgfSkpKSB7XG4gICAgLy8gY3JlYXRlIGNvbGxlY3Rpb24gY29uc3RydWN0b3JcbiAgICBDID0gY29tbW9uLmdldENvbnN0cnVjdG9yKHdyYXBwZXIsIE5BTUUsIElTX01BUCwgQURERVIpO1xuICAgIHJlZGVmaW5lQWxsKEMucHJvdG90eXBlLCBtZXRob2RzKTtcbiAgICBtZXRhLk5FRUQgPSB0cnVlO1xuICB9IGVsc2Uge1xuICAgIEMgPSB3cmFwcGVyKGZ1bmN0aW9uICh0YXJnZXQsIGl0ZXJhYmxlKSB7XG4gICAgICBhbkluc3RhbmNlKHRhcmdldCwgQywgTkFNRSwgJ19jJyk7XG4gICAgICB0YXJnZXQuX2MgPSBuZXcgQmFzZSgpO1xuICAgICAgaWYgKGl0ZXJhYmxlICE9IHVuZGVmaW5lZCkgZm9yT2YoaXRlcmFibGUsIElTX01BUCwgdGFyZ2V0W0FEREVSXSwgdGFyZ2V0KTtcbiAgICB9KTtcbiAgICBlYWNoKCdhZGQsY2xlYXIsZGVsZXRlLGZvckVhY2gsZ2V0LGhhcyxzZXQsa2V5cyx2YWx1ZXMsZW50cmllcyx0b0pTT04nLnNwbGl0KCcsJyksIGZ1bmN0aW9uIChLRVkpIHtcbiAgICAgIHZhciBJU19BRERFUiA9IEtFWSA9PSAnYWRkJyB8fCBLRVkgPT0gJ3NldCc7XG4gICAgICBpZiAoS0VZIGluIHByb3RvICYmICEoSVNfV0VBSyAmJiBLRVkgPT0gJ2NsZWFyJykpIGhpZGUoQy5wcm90b3R5cGUsIEtFWSwgZnVuY3Rpb24gKGEsIGIpIHtcbiAgICAgICAgYW5JbnN0YW5jZSh0aGlzLCBDLCBLRVkpO1xuICAgICAgICBpZiAoIUlTX0FEREVSICYmIElTX1dFQUsgJiYgIWlzT2JqZWN0KGEpKSByZXR1cm4gS0VZID09ICdnZXQnID8gdW5kZWZpbmVkIDogZmFsc2U7XG4gICAgICAgIHZhciByZXN1bHQgPSB0aGlzLl9jW0tFWV0oYSA9PT0gMCA/IDAgOiBhLCBiKTtcbiAgICAgICAgcmV0dXJuIElTX0FEREVSID8gdGhpcyA6IHJlc3VsdDtcbiAgICAgIH0pO1xuICAgIH0pO1xuICAgIElTX1dFQUsgfHwgZFAoQy5wcm90b3R5cGUsICdzaXplJywge1xuICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9jLnNpemU7XG4gICAgICB9XG4gICAgfSk7XG4gIH1cblxuICBzZXRUb1N0cmluZ1RhZyhDLCBOQU1FKTtcblxuICBPW05BTUVdID0gQztcbiAgJGV4cG9ydCgkZXhwb3J0LkcgKyAkZXhwb3J0LlcgKyAkZXhwb3J0LkYsIE8pO1xuXG4gIGlmICghSVNfV0VBSykgY29tbW9uLnNldFN0cm9uZyhDLCBOQU1FLCBJU19NQVApO1xuXG4gIHJldHVybiBDO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciBzdHJvbmcgPSByZXF1aXJlKCcuL19jb2xsZWN0aW9uLXN0cm9uZycpO1xudmFyIHZhbGlkYXRlID0gcmVxdWlyZSgnLi9fdmFsaWRhdGUtY29sbGVjdGlvbicpO1xudmFyIFNFVCA9ICdTZXQnO1xuXG4vLyAyMy4yIFNldCBPYmplY3RzXG5tb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vX2NvbGxlY3Rpb24nKShTRVQsIGZ1bmN0aW9uIChnZXQpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIFNldCgpIHsgcmV0dXJuIGdldCh0aGlzLCBhcmd1bWVudHMubGVuZ3RoID4gMCA/IGFyZ3VtZW50c1swXSA6IHVuZGVmaW5lZCk7IH07XG59LCB7XG4gIC8vIDIzLjIuMy4xIFNldC5wcm90b3R5cGUuYWRkKHZhbHVlKVxuICBhZGQ6IGZ1bmN0aW9uIGFkZCh2YWx1ZSkge1xuICAgIHJldHVybiBzdHJvbmcuZGVmKHZhbGlkYXRlKHRoaXMsIFNFVCksIHZhbHVlID0gdmFsdWUgPT09IDAgPyAwIDogdmFsdWUsIHZhbHVlKTtcbiAgfVxufSwgc3Ryb25nKTtcbiIsInZhciBmb3JPZiA9IHJlcXVpcmUoJy4vX2Zvci1vZicpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdGVyLCBJVEVSQVRPUikge1xuICB2YXIgcmVzdWx0ID0gW107XG4gIGZvck9mKGl0ZXIsIGZhbHNlLCByZXN1bHQucHVzaCwgcmVzdWx0LCBJVEVSQVRPUik7XG4gIHJldHVybiByZXN1bHQ7XG59O1xuIiwiLy8gaHR0cHM6Ly9naXRodWIuY29tL0RhdmlkQnJ1YW50L01hcC1TZXQucHJvdG90eXBlLnRvSlNPTlxudmFyIGNsYXNzb2YgPSByZXF1aXJlKCcuL19jbGFzc29mJyk7XG52YXIgZnJvbSA9IHJlcXVpcmUoJy4vX2FycmF5LWZyb20taXRlcmFibGUnKTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKE5BTUUpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIHRvSlNPTigpIHtcbiAgICBpZiAoY2xhc3NvZih0aGlzKSAhPSBOQU1FKSB0aHJvdyBUeXBlRXJyb3IoTkFNRSArIFwiI3RvSlNPTiBpc24ndCBnZW5lcmljXCIpO1xuICAgIHJldHVybiBmcm9tKHRoaXMpO1xuICB9O1xufTtcbiIsIi8vIGh0dHBzOi8vZ2l0aHViLmNvbS9EYXZpZEJydWFudC9NYXAtU2V0LnByb3RvdHlwZS50b0pTT05cbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG5cbiRleHBvcnQoJGV4cG9ydC5QICsgJGV4cG9ydC5SLCAnU2V0JywgeyB0b0pTT046IHJlcXVpcmUoJy4vX2NvbGxlY3Rpb24tdG8tanNvbicpKCdTZXQnKSB9KTtcbiIsIid1c2Ugc3RyaWN0Jztcbi8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vcHJvcG9zYWwtc2V0bWFwLW9mZnJvbS9cbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKENPTExFQ1RJT04pIHtcbiAgJGV4cG9ydCgkZXhwb3J0LlMsIENPTExFQ1RJT04sIHsgb2Y6IGZ1bmN0aW9uIG9mKCkge1xuICAgIHZhciBsZW5ndGggPSBhcmd1bWVudHMubGVuZ3RoO1xuICAgIHZhciBBID0gbmV3IEFycmF5KGxlbmd0aCk7XG4gICAgd2hpbGUgKGxlbmd0aC0tKSBBW2xlbmd0aF0gPSBhcmd1bWVudHNbbGVuZ3RoXTtcbiAgICByZXR1cm4gbmV3IHRoaXMoQSk7XG4gIH0gfSk7XG59O1xuIiwiLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9wcm9wb3NhbC1zZXRtYXAtb2Zmcm9tLyNzZWMtc2V0Lm9mXG5yZXF1aXJlKCcuL19zZXQtY29sbGVjdGlvbi1vZicpKCdTZXQnKTtcbiIsIid1c2Ugc3RyaWN0Jztcbi8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vcHJvcG9zYWwtc2V0bWFwLW9mZnJvbS9cbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgYUZ1bmN0aW9uID0gcmVxdWlyZSgnLi9fYS1mdW5jdGlvbicpO1xudmFyIGN0eCA9IHJlcXVpcmUoJy4vX2N0eCcpO1xudmFyIGZvck9mID0gcmVxdWlyZSgnLi9fZm9yLW9mJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKENPTExFQ1RJT04pIHtcbiAgJGV4cG9ydCgkZXhwb3J0LlMsIENPTExFQ1RJT04sIHsgZnJvbTogZnVuY3Rpb24gZnJvbShzb3VyY2UgLyogLCBtYXBGbiwgdGhpc0FyZyAqLykge1xuICAgIHZhciBtYXBGbiA9IGFyZ3VtZW50c1sxXTtcbiAgICB2YXIgbWFwcGluZywgQSwgbiwgY2I7XG4gICAgYUZ1bmN0aW9uKHRoaXMpO1xuICAgIG1hcHBpbmcgPSBtYXBGbiAhPT0gdW5kZWZpbmVkO1xuICAgIGlmIChtYXBwaW5nKSBhRnVuY3Rpb24obWFwRm4pO1xuICAgIGlmIChzb3VyY2UgPT0gdW5kZWZpbmVkKSByZXR1cm4gbmV3IHRoaXMoKTtcbiAgICBBID0gW107XG4gICAgaWYgKG1hcHBpbmcpIHtcbiAgICAgIG4gPSAwO1xuICAgICAgY2IgPSBjdHgobWFwRm4sIGFyZ3VtZW50c1syXSwgMik7XG4gICAgICBmb3JPZihzb3VyY2UsIGZhbHNlLCBmdW5jdGlvbiAobmV4dEl0ZW0pIHtcbiAgICAgICAgQS5wdXNoKGNiKG5leHRJdGVtLCBuKyspKTtcbiAgICAgIH0pO1xuICAgIH0gZWxzZSB7XG4gICAgICBmb3JPZihzb3VyY2UsIGZhbHNlLCBBLnB1c2gsIEEpO1xuICAgIH1cbiAgICByZXR1cm4gbmV3IHRoaXMoQSk7XG4gIH0gfSk7XG59O1xuIiwiLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9wcm9wb3NhbC1zZXRtYXAtb2Zmcm9tLyNzZWMtc2V0LmZyb21cbnJlcXVpcmUoJy4vX3NldC1jb2xsZWN0aW9uLWZyb20nKSgnU2V0Jyk7XG4iLCJyZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi5vYmplY3QudG8tc3RyaW5nJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi5zdHJpbmcuaXRlcmF0b3InKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvd2ViLmRvbS5pdGVyYWJsZScpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYuc2V0Jyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNy5zZXQudG8tanNvbicpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczcuc2V0Lm9mJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNy5zZXQuZnJvbScpO1xubW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuLi9tb2R1bGVzL19jb3JlJykuU2V0O1xuIiwibW9kdWxlLmV4cG9ydHMgPSB7IFwiZGVmYXVsdFwiOiByZXF1aXJlKFwiY29yZS1qcy9saWJyYXJ5L2ZuL3NldFwiKSwgX19lc01vZHVsZTogdHJ1ZSB9OyIsIid1c2Ugc3RyaWN0JztcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcblxudmFyIF9nZXRJdGVyYXRvcjIgPSByZXF1aXJlKCdiYWJlbC1ydW50aW1lL2NvcmUtanMvZ2V0LWl0ZXJhdG9yJyk7XG5cbnZhciBfZ2V0SXRlcmF0b3IzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfZ2V0SXRlcmF0b3IyKTtcblxudmFyIF9zZXQgPSByZXF1aXJlKCdiYWJlbC1ydW50aW1lL2NvcmUtanMvc2V0Jyk7XG5cbnZhciBfc2V0MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3NldCk7XG5cbnZhciBfZ2V0UHJvdG90eXBlT2YgPSByZXF1aXJlKCdiYWJlbC1ydW50aW1lL2NvcmUtanMvb2JqZWN0L2dldC1wcm90b3R5cGUtb2YnKTtcblxudmFyIF9nZXRQcm90b3R5cGVPZjIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9nZXRQcm90b3R5cGVPZik7XG5cbnZhciBfY2xhc3NDYWxsQ2hlY2syID0gcmVxdWlyZSgnYmFiZWwtcnVudGltZS9oZWxwZXJzL2NsYXNzQ2FsbENoZWNrJyk7XG5cbnZhciBfY2xhc3NDYWxsQ2hlY2szID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfY2xhc3NDYWxsQ2hlY2syKTtcblxudmFyIF9jcmVhdGVDbGFzczIgPSByZXF1aXJlKCdiYWJlbC1ydW50aW1lL2hlbHBlcnMvY3JlYXRlQ2xhc3MnKTtcblxudmFyIF9jcmVhdGVDbGFzczMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9jcmVhdGVDbGFzczIpO1xuXG52YXIgX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4yID0gcmVxdWlyZSgnYmFiZWwtcnVudGltZS9oZWxwZXJzL3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4nKTtcblxudmFyIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuMyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4yKTtcblxudmFyIF9pbmhlcml0czIgPSByZXF1aXJlKCdiYWJlbC1ydW50aW1lL2hlbHBlcnMvaW5oZXJpdHMnKTtcblxudmFyIF9pbmhlcml0czMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9pbmhlcml0czIpO1xuXG52YXIgX1ByaW9yaXR5UXVldWUgPSByZXF1aXJlKCcuL1ByaW9yaXR5UXVldWUnKTtcblxudmFyIF9Qcmlvcml0eVF1ZXVlMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX1ByaW9yaXR5UXVldWUpO1xuXG52YXIgX1RpbWVFbmdpbmUyID0gcmVxdWlyZSgnLi9UaW1lRW5naW5lJyk7XG5cbnZhciBfVGltZUVuZ2luZTMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9UaW1lRW5naW5lMik7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cbi8qKlxuICogQGNsYXNzIFNjaGVkdWxpbmdRdWV1ZVxuICogQGV4dGVuZHMgVGltZUVuZ2luZVxuICovXG4vKipcbiAqIFNjaGVkdWxpbmdRdWV1ZSBiYXNlIGNsYXNzXG4gKiBodHRwOi8vd2F2ZXNqcy5naXRodWIuaW8vYXVkaW8vI2F1ZGlvLXNjaGVkdWxpbmctcXVldWVcbiAqXG4gKiBOb3JiZXJ0LlNjaG5lbGxAaXJjYW0uZnJcbiAqIENvcHlyaWdodCAyMDE0LCAyMDE1IElSQ0FNIOKAk8KgQ2VudHJlIFBvbXBpZG91XG4gKi9cblxudmFyIFNjaGVkdWxpbmdRdWV1ZSA9IGZ1bmN0aW9uIChfVGltZUVuZ2luZSkge1xuICAoMCwgX2luaGVyaXRzMy5kZWZhdWx0KShTY2hlZHVsaW5nUXVldWUsIF9UaW1lRW5naW5lKTtcblxuICBmdW5jdGlvbiBTY2hlZHVsaW5nUXVldWUoKSB7XG4gICAgKDAsIF9jbGFzc0NhbGxDaGVjazMuZGVmYXVsdCkodGhpcywgU2NoZWR1bGluZ1F1ZXVlKTtcblxuICAgIHZhciBfdGhpcyA9ICgwLCBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybjMuZGVmYXVsdCkodGhpcywgKFNjaGVkdWxpbmdRdWV1ZS5fX3Byb3RvX18gfHwgKDAsIF9nZXRQcm90b3R5cGVPZjIuZGVmYXVsdCkoU2NoZWR1bGluZ1F1ZXVlKSkuY2FsbCh0aGlzKSk7XG5cbiAgICBfdGhpcy5fX3F1ZXVlID0gbmV3IF9Qcmlvcml0eVF1ZXVlMi5kZWZhdWx0KCk7XG4gICAgX3RoaXMuX19lbmdpbmVzID0gbmV3IF9zZXQyLmRlZmF1bHQoKTtcbiAgICByZXR1cm4gX3RoaXM7XG4gIH1cblxuICAvLyBUaW1lRW5naW5lICdzY2hlZHVsZWQnIGludGVyZmFjZVxuXG5cbiAgKDAsIF9jcmVhdGVDbGFzczMuZGVmYXVsdCkoU2NoZWR1bGluZ1F1ZXVlLCBbe1xuICAgIGtleTogJ2FkdmFuY2VUaW1lJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gYWR2YW5jZVRpbWUodGltZSkge1xuICAgICAgdmFyIGVuZ2luZSA9IHRoaXMuX19xdWV1ZS5oZWFkO1xuICAgICAgdmFyIG5leHRFbmdpbmVUaW1lID0gZW5naW5lLmFkdmFuY2VUaW1lKHRpbWUpO1xuXG4gICAgICBpZiAoIW5leHRFbmdpbmVUaW1lKSB7XG4gICAgICAgIGVuZ2luZS5tYXN0ZXIgPSBudWxsO1xuICAgICAgICB0aGlzLl9fZW5naW5lcy5kZWxldGUoZW5naW5lKTtcbiAgICAgICAgdGhpcy5fX3F1ZXVlLnJlbW92ZShlbmdpbmUpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy5fX3F1ZXVlLm1vdmUoZW5naW5lLCBuZXh0RW5naW5lVGltZSk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB0aGlzLl9fcXVldWUudGltZTtcbiAgICB9XG5cbiAgICAvLyBUaW1lRW5naW5lIG1hc3RlciBtZXRob2QgdG8gYmUgaW1wbGVtZW50ZWQgYnkgZGVyaXZlZCBjbGFzc1xuXG4gIH0sIHtcbiAgICBrZXk6ICdkZWZlcicsXG5cblxuICAgIC8vIGNhbGwgYSBmdW5jdGlvbiBhdCBhIGdpdmVuIHRpbWVcbiAgICB2YWx1ZTogZnVuY3Rpb24gZGVmZXIoZnVuKSB7XG4gICAgICB2YXIgdGltZSA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDogdGhpcy5jdXJyZW50VGltZTtcblxuICAgICAgaWYgKCEoZnVuIGluc3RhbmNlb2YgRnVuY3Rpb24pKSB0aHJvdyBuZXcgRXJyb3IoXCJvYmplY3QgY2Fubm90IGJlIGRlZmVyZWQgYnkgc2NoZWR1bGVyXCIpO1xuXG4gICAgICB0aGlzLmFkZCh7XG4gICAgICAgIGFkdmFuY2VUaW1lOiBmdW5jdGlvbiBhZHZhbmNlVGltZSh0aW1lKSB7XG4gICAgICAgICAgZnVuKHRpbWUpO1xuICAgICAgICB9IC8vIG1ha2Ugc3VyZSB0aGF0IHRoZSBhZHZhbmNlVGltZSBtZXRob2QgZG9lcyBub3QgcmV0dXJtIGFueXRoaW5nXG4gICAgICB9LCB0aW1lKTtcbiAgICB9XG5cbiAgICAvLyBhZGQgYSB0aW1lIGVuZ2luZSB0byB0aGUgc2NoZWR1bGVyXG5cbiAgfSwge1xuICAgIGtleTogJ2FkZCcsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGFkZChlbmdpbmUpIHtcbiAgICAgIHZhciB0aW1lID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMV0gOiB0aGlzLmN1cnJlbnRUaW1lO1xuXG4gICAgICBpZiAoIV9UaW1lRW5naW5lMy5kZWZhdWx0LmltcGxlbWVudHNTY2hlZHVsZWQoZW5naW5lKSkgdGhyb3cgbmV3IEVycm9yKFwib2JqZWN0IGNhbm5vdCBiZSBhZGRlZCB0byBzY2hlZHVsZXJcIik7XG5cbiAgICAgIGlmIChlbmdpbmUubWFzdGVyKSB0aHJvdyBuZXcgRXJyb3IoXCJvYmplY3QgaGFzIGFscmVhZHkgYmVlbiBhZGRlZCB0byBhIG1hc3RlclwiKTtcblxuICAgICAgZW5naW5lLm1hc3RlciA9IHRoaXM7XG5cbiAgICAgIC8vIGFkZCB0byBlbmdpbmVzIGFuZCBxdWV1ZVxuICAgICAgdGhpcy5fX2VuZ2luZXMuYWRkKGVuZ2luZSk7XG4gICAgICB2YXIgbmV4dFRpbWUgPSB0aGlzLl9fcXVldWUuaW5zZXJ0KGVuZ2luZSwgdGltZSk7XG5cbiAgICAgIC8vIHJlc2NoZWR1bGUgcXVldWVcbiAgICAgIHRoaXMucmVzZXRUaW1lKG5leHRUaW1lKTtcbiAgICB9XG5cbiAgICAvLyByZW1vdmUgYSB0aW1lIGVuZ2luZSBmcm9tIHRoZSBxdWV1ZVxuXG4gIH0sIHtcbiAgICBrZXk6ICdyZW1vdmUnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiByZW1vdmUoZW5naW5lKSB7XG4gICAgICBpZiAoZW5naW5lLm1hc3RlciAhPT0gdGhpcykgdGhyb3cgbmV3IEVycm9yKFwib2JqZWN0IGhhcyBub3QgYmVlbiBhZGRlZCB0byB0aGlzIHNjaGVkdWxlclwiKTtcblxuICAgICAgZW5naW5lLm1hc3RlciA9IG51bGw7XG5cbiAgICAgIC8vIHJlbW92ZSBmcm9tIGFycmF5IGFuZCBxdWV1ZVxuICAgICAgdGhpcy5fX2VuZ2luZXMuZGVsZXRlKGVuZ2luZSk7XG4gICAgICB2YXIgbmV4dFRpbWUgPSB0aGlzLl9fcXVldWUucmVtb3ZlKGVuZ2luZSk7XG5cbiAgICAgIC8vIHJlc2NoZWR1bGUgcXVldWVcbiAgICAgIHRoaXMucmVzZXRUaW1lKG5leHRUaW1lKTtcbiAgICB9XG5cbiAgICAvLyByZXNldCBuZXh0IGVuZ2luZSB0aW1lXG5cbiAgfSwge1xuICAgIGtleTogJ3Jlc2V0RW5naW5lVGltZScsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHJlc2V0RW5naW5lVGltZShlbmdpbmUpIHtcbiAgICAgIHZhciB0aW1lID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMV0gOiB0aGlzLmN1cnJlbnRUaW1lO1xuXG4gICAgICBpZiAoZW5naW5lLm1hc3RlciAhPT0gdGhpcykgdGhyb3cgbmV3IEVycm9yKFwib2JqZWN0IGhhcyBub3QgYmVlbiBhZGRlZCB0byB0aGlzIHNjaGVkdWxlclwiKTtcblxuICAgICAgdmFyIG5leHRUaW1lID0gdm9pZCAwO1xuXG4gICAgICBpZiAodGhpcy5fX3F1ZXVlLmhhcyhlbmdpbmUpKSBuZXh0VGltZSA9IHRoaXMuX19xdWV1ZS5tb3ZlKGVuZ2luZSwgdGltZSk7ZWxzZSBuZXh0VGltZSA9IHRoaXMuX19xdWV1ZS5pbnNlcnQoZW5naW5lLCB0aW1lKTtcblxuICAgICAgdGhpcy5yZXNldFRpbWUobmV4dFRpbWUpO1xuICAgIH1cblxuICAgIC8vIGNoZWNrIHdoZXRoZXIgYSBnaXZlbiBlbmdpbmUgaXMgc2NoZWR1bGVkXG5cbiAgfSwge1xuICAgIGtleTogJ2hhcycsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGhhcyhlbmdpbmUpIHtcbiAgICAgIHJldHVybiB0aGlzLl9fZW5naW5lcy5oYXMoZW5naW5lKTtcbiAgICB9XG5cbiAgICAvLyBjbGVhciBxdWV1ZVxuXG4gIH0sIHtcbiAgICBrZXk6ICdjbGVhcicsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGNsZWFyKCkge1xuICAgICAgdmFyIF9pdGVyYXRvck5vcm1hbENvbXBsZXRpb24gPSB0cnVlO1xuICAgICAgdmFyIF9kaWRJdGVyYXRvckVycm9yID0gZmFsc2U7XG4gICAgICB2YXIgX2l0ZXJhdG9yRXJyb3IgPSB1bmRlZmluZWQ7XG5cbiAgICAgIHRyeSB7XG4gICAgICAgIGZvciAodmFyIF9pdGVyYXRvciA9ICgwLCBfZ2V0SXRlcmF0b3IzLmRlZmF1bHQpKHRoaXMuX19lbmdpbmVzKSwgX3N0ZXA7ICEoX2l0ZXJhdG9yTm9ybWFsQ29tcGxldGlvbiA9IChfc3RlcCA9IF9pdGVyYXRvci5uZXh0KCkpLmRvbmUpOyBfaXRlcmF0b3JOb3JtYWxDb21wbGV0aW9uID0gdHJ1ZSkge1xuICAgICAgICAgIHZhciBlbmdpbmUgPSBfc3RlcC52YWx1ZTtcblxuICAgICAgICAgIGVuZ2luZS5tYXN0ZXIgPSBudWxsO1xuICAgICAgICB9XG4gICAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgICAgX2RpZEl0ZXJhdG9yRXJyb3IgPSB0cnVlO1xuICAgICAgICBfaXRlcmF0b3JFcnJvciA9IGVycjtcbiAgICAgIH0gZmluYWxseSB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgaWYgKCFfaXRlcmF0b3JOb3JtYWxDb21wbGV0aW9uICYmIF9pdGVyYXRvci5yZXR1cm4pIHtcbiAgICAgICAgICAgIF9pdGVyYXRvci5yZXR1cm4oKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0gZmluYWxseSB7XG4gICAgICAgICAgaWYgKF9kaWRJdGVyYXRvckVycm9yKSB7XG4gICAgICAgICAgICB0aHJvdyBfaXRlcmF0b3JFcnJvcjtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgdGhpcy5fX3F1ZXVlLmNsZWFyKCk7XG4gICAgICB0aGlzLl9fZW5naW5lcy5jbGVhcigpO1xuICAgICAgdGhpcy5yZXNldFRpbWUoSW5maW5pdHkpO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ2N1cnJlbnRUaW1lJyxcbiAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgIHJldHVybiAwO1xuICAgIH1cbiAgfV0pO1xuICByZXR1cm4gU2NoZWR1bGluZ1F1ZXVlO1xufShfVGltZUVuZ2luZTMuZGVmYXVsdCk7XG5cbmV4cG9ydHMuZGVmYXVsdCA9IFNjaGVkdWxpbmdRdWV1ZTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtjaGFyc2V0PXV0Zi04O2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZ6SWpwYklsTmphR1ZrZFd4cGJtZFJkV1YxWlM1cWN5SmRMQ0p1WVcxbGN5STZXeUpUWTJobFpIVnNhVzVuVVhWbGRXVWlMQ0pmWDNGMVpYVmxJaXdpVUhKcGIzSnBkSGxSZFdWMVpTSXNJbDlmWlc1bmFXNWxjeUlzSW5ScGJXVWlMQ0psYm1kcGJtVWlMQ0pvWldGa0lpd2libVY0ZEVWdVoybHVaVlJwYldVaUxDSmhaSFpoYm1ObFZHbHRaU0lzSW0xaGMzUmxjaUlzSW1SbGJHVjBaU0lzSW5KbGJXOTJaU0lzSW0xdmRtVWlMQ0ptZFc0aUxDSmpkWEp5Wlc1MFZHbHRaU0lzSWtaMWJtTjBhVzl1SWl3aVJYSnliM0lpTENKaFpHUWlMQ0pVYVcxbFJXNW5hVzVsSWl3aWFXMXdiR1Z0Wlc1MGMxTmphR1ZrZFd4bFpDSXNJbTVsZUhSVWFXMWxJaXdpYVc1elpYSjBJaXdpY21WelpYUlVhVzFsSWl3aWFHRnpJaXdpWTJ4bFlYSWlMQ0pKYm1acGJtbDBlU0pkTENKdFlYQndhVzVuY3lJNklqczdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3p0QlFWRkJPenM3TzBGQlEwRTdPenM3T3p0QlFVVkJPenM3TzBGQldFRTdPenM3T3pzN08wbEJaVTFCTEdVN096dEJRVU5LTERaQ1FVRmpPMEZCUVVFN08wRkJRVUU3TzBGQlIxb3NWVUZCUzBNc1QwRkJUQ3hIUVVGbExFbEJRVWxETEhWQ1FVRktMRVZCUVdZN1FVRkRRU3hWUVVGTFF5eFRRVUZNTEVkQlFXbENMRzFDUVVGcVFqdEJRVXBaTzBGQlMySTdPMEZCUlVRN096czdPMmREUVVOWlF5eEpMRVZCUVUwN1FVRkRhRUlzVlVGQlRVTXNVMEZCVXl4TFFVRkxTaXhQUVVGTUxFTkJRV0ZMTEVsQlFUVkNPMEZCUTBFc1ZVRkJUVU1zYVVKQlFXbENSaXhQUVVGUFJ5eFhRVUZRTEVOQlFXMUNTaXhKUVVGdVFpeERRVUYyUWpzN1FVRkZRU3hWUVVGSkxFTkJRVU5ITEdOQlFVd3NSVUZCY1VJN1FVRkRia0pHTEdWQlFVOUpMRTFCUVZBc1IwRkJaMElzU1VGQmFFSTdRVUZEUVN4aFFVRkxUaXhUUVVGTUxFTkJRV1ZQTEUxQlFXWXNRMEZCYzBKTUxFMUJRWFJDTzBGQlEwRXNZVUZCUzBvc1QwRkJUQ3hEUVVGaFZTeE5RVUZpTEVOQlFXOUNUaXhOUVVGd1FqdEJRVU5FTEU5QlNrUXNUVUZKVHp0QlFVTk1MR0ZCUVV0S0xFOUJRVXdzUTBGQllWY3NTVUZCWWl4RFFVRnJRbEFzVFVGQmJFSXNSVUZCTUVKRkxHTkJRVEZDTzBGQlEwUTdPMEZCUlVRc1lVRkJUeXhMUVVGTFRpeFBRVUZNTEVOQlFXRkhMRWxCUVhCQ08wRkJRMFE3TzBGQlJVUTdPenM3T3p0QlFVdEJPekJDUVVOTlV5eEhMRVZCUVRoQ08wRkJRVUVzVlVGQmVrSlVMRWxCUVhsQ0xIVkZRVUZzUWl4TFFVRkxWU3hYUVVGaE96dEJRVU5zUXl4VlFVRkpMRVZCUVVWRUxHVkJRV1ZGTEZGQlFXcENMRU5CUVVvc1JVRkRSU3hOUVVGTkxFbEJRVWxETEV0QlFVb3NRMEZCVlN4MVEwRkJWaXhEUVVGT096dEJRVVZHTEZkQlFVdERMRWRCUVV3c1EwRkJVenRCUVVOUVZDeHhRa0ZCWVN4eFFrRkJVMG9zU1VGQlZDeEZRVUZsTzBGQlFVVlRMR05CUVVsVUxFbEJRVW83UVVGQldTeFRRVVJ1UXl4RFFVTnhRenRCUVVSeVF5eFBRVUZVTEVWQlJVZEJMRWxCUmtnN1FVRkhSRHM3UVVGRlJEczdPenQzUWtGRFNVTXNUU3hGUVVGcFF6dEJRVUZCTEZWQlFYcENSQ3hKUVVGNVFpeDFSVUZCYkVJc1MwRkJTMVVzVjBGQllUczdRVUZEYmtNc1ZVRkJTU3hEUVVGRFNTeHhRa0ZCVjBNc2JVSkJRVmdzUTBGQkswSmtMRTFCUVM5Q0xFTkJRVXdzUlVGRFJTeE5RVUZOTEVsQlFVbFhMRXRCUVVvc1EwRkJWU3h4UTBGQlZpeERRVUZPT3p0QlFVVkdMRlZCUVVsWUxFOUJRVTlKTEUxQlFWZ3NSVUZEUlN4TlFVRk5MRWxCUVVsUExFdEJRVW9zUTBGQlZTd3lRMEZCVml4RFFVRk9PenRCUVVWR1dDeGhRVUZQU1N4TlFVRlFMRWRCUVdkQ0xFbEJRV2hDT3p0QlFVVkJPMEZCUTBFc1YwRkJTMDRzVTBGQlRDeERRVUZsWXl4SFFVRm1MRU5CUVcxQ1dpeE5RVUZ1UWp0QlFVTkJMRlZCUVUxbExGZEJRVmNzUzBGQlMyNUNMRTlCUVV3c1EwRkJZVzlDTEUxQlFXSXNRMEZCYjBKb1FpeE5RVUZ3UWl4RlFVRTBRa1FzU1VGQk5VSXNRMEZCYWtJN08wRkJSVUU3UVVGRFFTeFhRVUZMYTBJc1UwRkJUQ3hEUVVGbFJpeFJRVUZtTzBGQlEwUTdPMEZCUlVRN096czdNa0pCUTA5bUxFMHNSVUZCVVR0QlFVTmlMRlZCUVVsQkxFOUJRVTlKTEUxQlFWQXNTMEZCYTBJc1NVRkJkRUlzUlVGRFJTeE5RVUZOTEVsQlFVbFBMRXRCUVVvc1EwRkJWU3cyUTBGQlZpeERRVUZPT3p0QlFVVkdXQ3hoUVVGUFNTeE5RVUZRTEVkQlFXZENMRWxCUVdoQ096dEJRVVZCTzBGQlEwRXNWMEZCUzA0c1UwRkJUQ3hEUVVGbFR5eE5RVUZtTEVOQlFYTkNUQ3hOUVVGMFFqdEJRVU5CTEZWQlFVMWxMRmRCUVZjc1MwRkJTMjVDTEU5QlFVd3NRMEZCWVZVc1RVRkJZaXhEUVVGdlFrNHNUVUZCY0VJc1EwRkJha0k3TzBGQlJVRTdRVUZEUVN4WFFVRkxhVUlzVTBGQlRDeERRVUZsUml4UlFVRm1PMEZCUTBRN08wRkJSVVE3T3pzN2IwTkJRMmRDWml4TkxFVkJRV2xETzBGQlFVRXNWVUZCZWtKRUxFbEJRWGxDTEhWRlFVRnNRaXhMUVVGTFZTeFhRVUZoT3p0QlFVTXZReXhWUVVGSlZDeFBRVUZQU1N4TlFVRlFMRXRCUVd0Q0xFbEJRWFJDTEVWQlEwVXNUVUZCVFN4SlFVRkpUeXhMUVVGS0xFTkJRVlVzTmtOQlFWWXNRMEZCVGpzN1FVRkZSaXhWUVVGSlNTeHBRa0ZCU2pzN1FVRkZRU3hWUVVGSkxFdEJRVXR1UWl4UFFVRk1MRU5CUVdGelFpeEhRVUZpTEVOQlFXbENiRUlzVFVGQmFrSXNRMEZCU2l4RlFVTkZaU3hYUVVGWExFdEJRVXR1UWl4UFFVRk1MRU5CUVdGWExFbEJRV0lzUTBGQmEwSlFMRTFCUVd4Q0xFVkJRVEJDUkN4SlFVRXhRaXhEUVVGWUxFTkJSRVlzUzBGSFJXZENMRmRCUVZjc1MwRkJTMjVDTEU5QlFVd3NRMEZCWVc5Q0xFMUJRV0lzUTBGQmIwSm9RaXhOUVVGd1FpeEZRVUUwUWtRc1NVRkJOVUlzUTBGQldEczdRVUZGUml4WFFVRkxhMElzVTBGQlRDeERRVUZsUml4UlFVRm1PMEZCUTBRN08wRkJSVVE3T3pzN2QwSkJRMGxtTEUwc1JVRkJVVHRCUVVOV0xHRkJRVThzUzBGQlMwWXNVMEZCVEN4RFFVRmxiMElzUjBGQlppeERRVUZ0UW14Q0xFMUJRVzVDTEVOQlFWQTdRVUZEUkRzN1FVRkZSRHM3T3pzMFFrRkRVVHRCUVVGQk8wRkJRVUU3UVVGQlFUczdRVUZCUVR0QlFVTk9MSGRFUVVGclFpeExRVUZMUml4VFFVRjJRanRCUVVGQkxHTkJRVkZGTEUxQlFWSTdPMEZCUTBWQkxHbENRVUZQU1N4TlFVRlFMRWRCUVdkQ0xFbEJRV2hDTzBGQlJFWTdRVUZFVFR0QlFVRkJPMEZCUVVFN1FVRkJRVHRCUVVGQk8wRkJRVUU3UVVGQlFUdEJRVUZCTzBGQlFVRTdRVUZCUVR0QlFVRkJPMEZCUVVFN1FVRkJRVHRCUVVGQk96dEJRVWxPTEZkQlFVdFNMRTlCUVV3c1EwRkJZWFZDTEV0QlFXSTdRVUZEUVN4WFFVRkxja0lzVTBGQlRDeERRVUZsY1VJc1MwRkJaanRCUVVOQkxGZEJRVXRHTEZOQlFVd3NRMEZCWlVjc1VVRkJaanRCUVVORU96czdkMEpCTTBWcFFqdEJRVU5vUWl4aFFVRlBMRU5CUVZBN1FVRkRSRHM3TzBWQk0wSXlRbEFzYjBJN08ydENRWFZIWm14Q0xHVWlMQ0ptYVd4bElqb2lVMk5vWldSMWJHbHVaMUYxWlhWbExtcHpJaXdpYzI5MWNtTmxjME52Ym5SbGJuUWlPbHNpTHlvcVhHNGdLaUJUWTJobFpIVnNhVzVuVVhWbGRXVWdZbUZ6WlNCamJHRnpjMXh1SUNvZ2FIUjBjRG92TDNkaGRtVnphbk11WjJsMGFIVmlMbWx2TDJGMVpHbHZMeU5oZFdScGJ5MXpZMmhsWkhWc2FXNW5MWEYxWlhWbFhHNGdLbHh1SUNvZ1RtOXlZbVZ5ZEM1VFkyaHVaV3hzUUdseVkyRnRMbVp5WEc0Z0tpQkRiM0I1Y21sbmFIUWdNakF4TkN3Z01qQXhOU0JKVWtOQlRTRGlnSlBDb0VObGJuUnlaU0JRYjIxd2FXUnZkVnh1SUNvdlhHNWNibWx0Y0c5eWRDQlFjbWx2Y21sMGVWRjFaWFZsSUdaeWIyMGdKeTR2VUhKcGIzSnBkSGxSZFdWMVpTYzdYRzVwYlhCdmNuUWdWR2x0WlVWdVoybHVaU0JtY205dElDY3VMMVJwYldWRmJtZHBibVVuTzF4dVhHNHZLaXBjYmlBcUlFQmpiR0Z6Y3lCVFkyaGxaSFZzYVc1blVYVmxkV1ZjYmlBcUlFQmxlSFJsYm1SeklGUnBiV1ZGYm1kcGJtVmNiaUFxTDF4dVkyeGhjM01nVTJOb1pXUjFiR2x1WjFGMVpYVmxJR1Y0ZEdWdVpITWdWR2x0WlVWdVoybHVaU0I3WEc0Z0lHTnZibk4wY25WamRHOXlLQ2tnZTF4dUlDQWdJSE4xY0dWeUtDazdYRzVjYmlBZ0lDQjBhR2x6TGw5ZmNYVmxkV1VnUFNCdVpYY2dVSEpwYjNKcGRIbFJkV1YxWlNncE8xeHVJQ0FnSUhSb2FYTXVYMTlsYm1kcGJtVnpJRDBnYm1WM0lGTmxkQ2dwTzF4dUlDQjlYRzVjYmlBZ0x5OGdWR2x0WlVWdVoybHVaU0FuYzJOb1pXUjFiR1ZrSnlCcGJuUmxjbVpoWTJWY2JpQWdZV1IyWVc1alpWUnBiV1VvZEdsdFpTa2dlMXh1SUNBZ0lHTnZibk4wSUdWdVoybHVaU0E5SUhSb2FYTXVYMTl4ZFdWMVpTNW9aV0ZrTzF4dUlDQWdJR052Ym5OMElHNWxlSFJGYm1kcGJtVlVhVzFsSUQwZ1pXNW5hVzVsTG1Ga2RtRnVZMlZVYVcxbEtIUnBiV1VwTzF4dVhHNGdJQ0FnYVdZZ0tDRnVaWGgwUlc1bmFXNWxWR2x0WlNrZ2UxeHVJQ0FnSUNBZ1pXNW5hVzVsTG0xaGMzUmxjaUE5SUc1MWJHdzdYRzRnSUNBZ0lDQjBhR2x6TGw5ZlpXNW5hVzVsY3k1a1pXeGxkR1VvWlc1bmFXNWxLVHRjYmlBZ0lDQWdJSFJvYVhNdVgxOXhkV1YxWlM1eVpXMXZkbVVvWlc1bmFXNWxLVHRjYmlBZ0lDQjlJR1ZzYzJVZ2UxeHVJQ0FnSUNBZ2RHaHBjeTVmWDNGMVpYVmxMbTF2ZG1Vb1pXNW5hVzVsTENCdVpYaDBSVzVuYVc1bFZHbHRaU2s3WEc0Z0lDQWdmVnh1WEc0Z0lDQWdjbVYwZFhKdUlIUm9hWE11WDE5eGRXVjFaUzUwYVcxbE8xeHVJQ0I5WEc1Y2JpQWdMeThnVkdsdFpVVnVaMmx1WlNCdFlYTjBaWElnYldWMGFHOWtJSFJ2SUdKbElHbHRjR3hsYldWdWRHVmtJR0o1SUdSbGNtbDJaV1FnWTJ4aGMzTmNiaUFnWjJWMElHTjFjbkpsYm5SVWFXMWxLQ2tnZTF4dUlDQWdJSEpsZEhWeWJpQXdPMXh1SUNCOVhHNWNiaUFnTHk4Z1kyRnNiQ0JoSUdaMWJtTjBhVzl1SUdGMElHRWdaMmwyWlc0Z2RHbHRaVnh1SUNCa1pXWmxjaWhtZFc0c0lIUnBiV1VnUFNCMGFHbHpMbU4xY25KbGJuUlVhVzFsS1NCN1hHNGdJQ0FnYVdZZ0tDRW9ablZ1SUdsdWMzUmhibU5sYjJZZ1JuVnVZM1JwYjI0cEtWeHVJQ0FnSUNBZ2RHaHliM2NnYm1WM0lFVnljbTl5S0Z3aWIySnFaV04wSUdOaGJtNXZkQ0JpWlNCa1pXWmxjbVZrSUdKNUlITmphR1ZrZFd4bGNsd2lLVHRjYmx4dUlDQWdJSFJvYVhNdVlXUmtLSHRjYmlBZ0lDQWdJR0ZrZG1GdVkyVlVhVzFsT2lCbWRXNWpkR2x2YmloMGFXMWxLU0I3SUdaMWJpaDBhVzFsS1RzZ2ZTd2dMeThnYldGclpTQnpkWEpsSUhSb1lYUWdkR2hsSUdGa2RtRnVZMlZVYVcxbElHMWxkR2h2WkNCa2IyVnpJRzV2ZENCeVpYUjFjbTBnWVc1NWRHaHBibWRjYmlBZ0lDQjlMQ0IwYVcxbEtUdGNiaUFnZlZ4dVhHNGdJQzh2SUdGa1pDQmhJSFJwYldVZ1pXNW5hVzVsSUhSdklIUm9aU0J6WTJobFpIVnNaWEpjYmlBZ1lXUmtLR1Z1WjJsdVpTd2dkR2x0WlNBOUlIUm9hWE11WTNWeWNtVnVkRlJwYldVcElIdGNiaUFnSUNCcFppQW9JVlJwYldWRmJtZHBibVV1YVcxd2JHVnRaVzUwYzFOamFHVmtkV3hsWkNobGJtZHBibVVwS1Z4dUlDQWdJQ0FnZEdoeWIzY2dibVYzSUVWeWNtOXlLRndpYjJKcVpXTjBJR05oYm01dmRDQmlaU0JoWkdSbFpDQjBieUJ6WTJobFpIVnNaWEpjSWlrN1hHNWNiaUFnSUNCcFppQW9aVzVuYVc1bExtMWhjM1JsY2lsY2JpQWdJQ0FnSUhSb2NtOTNJRzVsZHlCRmNuSnZjaWhjSW05aWFtVmpkQ0JvWVhNZ1lXeHlaV0ZrZVNCaVpXVnVJR0ZrWkdWa0lIUnZJR0VnYldGemRHVnlYQ0lwTzF4dVhHNGdJQ0FnWlc1bmFXNWxMbTFoYzNSbGNpQTlJSFJvYVhNN1hHNWNiaUFnSUNBdkx5QmhaR1FnZEc4Z1pXNW5hVzVsY3lCaGJtUWdjWFZsZFdWY2JpQWdJQ0IwYUdsekxsOWZaVzVuYVc1bGN5NWhaR1FvWlc1bmFXNWxLVHRjYmlBZ0lDQmpiMjV6ZENCdVpYaDBWR2x0WlNBOUlIUm9hWE11WDE5eGRXVjFaUzVwYm5ObGNuUW9aVzVuYVc1bExDQjBhVzFsS1R0Y2JseHVJQ0FnSUM4dklISmxjMk5vWldSMWJHVWdjWFZsZFdWY2JpQWdJQ0IwYUdsekxuSmxjMlYwVkdsdFpTaHVaWGgwVkdsdFpTazdYRzRnSUgxY2JseHVJQ0F2THlCeVpXMXZkbVVnWVNCMGFXMWxJR1Z1WjJsdVpTQm1jbTl0SUhSb1pTQnhkV1YxWlZ4dUlDQnlaVzF2ZG1Vb1pXNW5hVzVsS1NCN1hHNGdJQ0FnYVdZZ0tHVnVaMmx1WlM1dFlYTjBaWElnSVQwOUlIUm9hWE1wWEc0Z0lDQWdJQ0IwYUhKdmR5QnVaWGNnUlhKeWIzSW9YQ0p2WW1wbFkzUWdhR0Z6SUc1dmRDQmlaV1Z1SUdGa1pHVmtJSFJ2SUhSb2FYTWdjMk5vWldSMWJHVnlYQ0lwTzF4dVhHNGdJQ0FnWlc1bmFXNWxMbTFoYzNSbGNpQTlJRzUxYkd3N1hHNWNiaUFnSUNBdkx5QnlaVzF2ZG1VZ1puSnZiU0JoY25KaGVTQmhibVFnY1hWbGRXVmNiaUFnSUNCMGFHbHpMbDlmWlc1bmFXNWxjeTVrWld4bGRHVW9aVzVuYVc1bEtUdGNiaUFnSUNCamIyNXpkQ0J1WlhoMFZHbHRaU0E5SUhSb2FYTXVYMTl4ZFdWMVpTNXlaVzF2ZG1Vb1pXNW5hVzVsS1R0Y2JseHVJQ0FnSUM4dklISmxjMk5vWldSMWJHVWdjWFZsZFdWY2JpQWdJQ0IwYUdsekxuSmxjMlYwVkdsdFpTaHVaWGgwVkdsdFpTazdYRzRnSUgxY2JseHVJQ0F2THlCeVpYTmxkQ0J1WlhoMElHVnVaMmx1WlNCMGFXMWxYRzRnSUhKbGMyVjBSVzVuYVc1bFZHbHRaU2hsYm1kcGJtVXNJSFJwYldVZ1BTQjBhR2x6TG1OMWNuSmxiblJVYVcxbEtTQjdYRzRnSUNBZ2FXWWdLR1Z1WjJsdVpTNXRZWE4wWlhJZ0lUMDlJSFJvYVhNcFhHNGdJQ0FnSUNCMGFISnZkeUJ1WlhjZ1JYSnliM0lvWENKdlltcGxZM1FnYUdGeklHNXZkQ0JpWldWdUlHRmtaR1ZrSUhSdklIUm9hWE1nYzJOb1pXUjFiR1Z5WENJcE8xeHVYRzRnSUNBZ2JHVjBJRzVsZUhSVWFXMWxPMXh1WEc0Z0lDQWdhV1lnS0hSb2FYTXVYMTl4ZFdWMVpTNW9ZWE1vWlc1bmFXNWxLU2xjYmlBZ0lDQWdJRzVsZUhSVWFXMWxJRDBnZEdocGN5NWZYM0YxWlhWbExtMXZkbVVvWlc1bmFXNWxMQ0IwYVcxbEtUdGNiaUFnSUNCbGJITmxYRzRnSUNBZ0lDQnVaWGgwVkdsdFpTQTlJSFJvYVhNdVgxOXhkV1YxWlM1cGJuTmxjblFvWlc1bmFXNWxMQ0IwYVcxbEtUdGNibHh1SUNBZ0lIUm9hWE11Y21WelpYUlVhVzFsS0c1bGVIUlVhVzFsS1R0Y2JpQWdmVnh1WEc0Z0lDOHZJR05vWldOcklIZG9aWFJvWlhJZ1lTQm5hWFpsYmlCbGJtZHBibVVnYVhNZ2MyTm9aV1IxYkdWa1hHNGdJR2hoY3lobGJtZHBibVVwSUh0Y2JpQWdJQ0J5WlhSMWNtNGdkR2hwY3k1ZlgyVnVaMmx1WlhNdWFHRnpLR1Z1WjJsdVpTazdYRzRnSUgxY2JseHVJQ0F2THlCamJHVmhjaUJ4ZFdWMVpWeHVJQ0JqYkdWaGNpZ3BJSHRjYmlBZ0lDQm1iM0lvYkdWMElHVnVaMmx1WlNCdlppQjBhR2x6TGw5ZlpXNW5hVzVsY3lsY2JpQWdJQ0FnSUdWdVoybHVaUzV0WVhOMFpYSWdQU0J1ZFd4c08xeHVYRzRnSUNBZ2RHaHBjeTVmWDNGMVpYVmxMbU5zWldGeUtDazdYRzRnSUNBZ2RHaHBjeTVmWDJWdVoybHVaWE11WTJ4bFlYSW9LVHRjYmlBZ0lDQjBhR2x6TG5KbGMyVjBWR2x0WlNoSmJtWnBibWwwZVNrN1hHNGdJSDFjYm4xY2JseHVaWGh3YjNKMElHUmxabUYxYkhRZ1UyTm9aV1IxYkdsdVoxRjFaWFZsWEc0aVhYMD0iLCIvLyAxOS4xLjIuNiBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKE8sIFApXG52YXIgdG9JT2JqZWN0ID0gcmVxdWlyZSgnLi9fdG8taW9iamVjdCcpO1xudmFyICRnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IgPSByZXF1aXJlKCcuL19vYmplY3QtZ29wZCcpLmY7XG5cbnJlcXVpcmUoJy4vX29iamVjdC1zYXAnKSgnZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yJywgZnVuY3Rpb24gKCkge1xuICByZXR1cm4gZnVuY3Rpb24gZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKGl0LCBrZXkpIHtcbiAgICByZXR1cm4gJGdldE93blByb3BlcnR5RGVzY3JpcHRvcih0b0lPYmplY3QoaXQpLCBrZXkpO1xuICB9O1xufSk7XG4iLCJyZXF1aXJlKCcuLi8uLi9tb2R1bGVzL2VzNi5vYmplY3QuZ2V0LW93bi1wcm9wZXJ0eS1kZXNjcmlwdG9yJyk7XG52YXIgJE9iamVjdCA9IHJlcXVpcmUoJy4uLy4uL21vZHVsZXMvX2NvcmUnKS5PYmplY3Q7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGdldE93blByb3BlcnR5RGVzY3JpcHRvcihpdCwga2V5KSB7XG4gIHJldHVybiAkT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihpdCwga2V5KTtcbn07XG4iLCJtb2R1bGUuZXhwb3J0cyA9IHsgXCJkZWZhdWx0XCI6IHJlcXVpcmUoXCJjb3JlLWpzL2xpYnJhcnkvZm4vb2JqZWN0L2dldC1vd24tcHJvcGVydHktZGVzY3JpcHRvclwiKSwgX19lc01vZHVsZTogdHJ1ZSB9OyIsIlwidXNlIHN0cmljdFwiO1xuXG5leHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlO1xuXG52YXIgX2dldFByb3RvdHlwZU9mID0gcmVxdWlyZShcIi4uL2NvcmUtanMvb2JqZWN0L2dldC1wcm90b3R5cGUtb2ZcIik7XG5cbnZhciBfZ2V0UHJvdG90eXBlT2YyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfZ2V0UHJvdG90eXBlT2YpO1xuXG52YXIgX2dldE93blByb3BlcnR5RGVzY3JpcHRvciA9IHJlcXVpcmUoXCIuLi9jb3JlLWpzL29iamVjdC9nZXQtb3duLXByb3BlcnR5LWRlc2NyaXB0b3JcIik7XG5cbnZhciBfZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2dldE93blByb3BlcnR5RGVzY3JpcHRvcik7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cbmV4cG9ydHMuZGVmYXVsdCA9IGZ1bmN0aW9uIGdldChvYmplY3QsIHByb3BlcnR5LCByZWNlaXZlcikge1xuICBpZiAob2JqZWN0ID09PSBudWxsKSBvYmplY3QgPSBGdW5jdGlvbi5wcm90b3R5cGU7XG4gIHZhciBkZXNjID0gKDAsIF9nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IyLmRlZmF1bHQpKG9iamVjdCwgcHJvcGVydHkpO1xuXG4gIGlmIChkZXNjID09PSB1bmRlZmluZWQpIHtcbiAgICB2YXIgcGFyZW50ID0gKDAsIF9nZXRQcm90b3R5cGVPZjIuZGVmYXVsdCkob2JqZWN0KTtcblxuICAgIGlmIChwYXJlbnQgPT09IG51bGwpIHtcbiAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBnZXQocGFyZW50LCBwcm9wZXJ0eSwgcmVjZWl2ZXIpO1xuICAgIH1cbiAgfSBlbHNlIGlmIChcInZhbHVlXCIgaW4gZGVzYykge1xuICAgIHJldHVybiBkZXNjLnZhbHVlO1xuICB9IGVsc2Uge1xuICAgIHZhciBnZXR0ZXIgPSBkZXNjLmdldDtcblxuICAgIGlmIChnZXR0ZXIgPT09IHVuZGVmaW5lZCkge1xuICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICB9XG5cbiAgICByZXR1cm4gZ2V0dGVyLmNhbGwocmVjZWl2ZXIpO1xuICB9XG59OyIsIid1c2Ugc3RyaWN0JztcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcblxudmFyIF9nZXQyID0gcmVxdWlyZSgnYmFiZWwtcnVudGltZS9oZWxwZXJzL2dldCcpO1xuXG52YXIgX2dldDMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9nZXQyKTtcblxudmFyIF9nZXRQcm90b3R5cGVPZiA9IHJlcXVpcmUoJ2JhYmVsLXJ1bnRpbWUvY29yZS1qcy9vYmplY3QvZ2V0LXByb3RvdHlwZS1vZicpO1xuXG52YXIgX2dldFByb3RvdHlwZU9mMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2dldFByb3RvdHlwZU9mKTtcblxudmFyIF9jbGFzc0NhbGxDaGVjazIgPSByZXF1aXJlKCdiYWJlbC1ydW50aW1lL2hlbHBlcnMvY2xhc3NDYWxsQ2hlY2snKTtcblxudmFyIF9jbGFzc0NhbGxDaGVjazMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9jbGFzc0NhbGxDaGVjazIpO1xuXG52YXIgX2NyZWF0ZUNsYXNzMiA9IHJlcXVpcmUoJ2JhYmVsLXJ1bnRpbWUvaGVscGVycy9jcmVhdGVDbGFzcycpO1xuXG52YXIgX2NyZWF0ZUNsYXNzMyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2NyZWF0ZUNsYXNzMik7XG5cbnZhciBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybjIgPSByZXF1aXJlKCdiYWJlbC1ydW50aW1lL2hlbHBlcnMvcG9zc2libGVDb25zdHJ1Y3RvclJldHVybicpO1xuXG52YXIgX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4zID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybjIpO1xuXG52YXIgX2luaGVyaXRzMiA9IHJlcXVpcmUoJ2JhYmVsLXJ1bnRpbWUvaGVscGVycy9pbmhlcml0cycpO1xuXG52YXIgX2luaGVyaXRzMyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2luaGVyaXRzMik7XG5cbnZhciBfU2NoZWR1bGluZ1F1ZXVlMiA9IHJlcXVpcmUoJy4uL2NvcmUvU2NoZWR1bGluZ1F1ZXVlJyk7XG5cbnZhciBfU2NoZWR1bGluZ1F1ZXVlMyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX1NjaGVkdWxpbmdRdWV1ZTIpO1xuXG52YXIgX1RpbWVFbmdpbmU0ID0gcmVxdWlyZSgnLi4vY29yZS9UaW1lRW5naW5lJyk7XG5cbnZhciBfVGltZUVuZ2luZTUgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9UaW1lRW5naW5lNCk7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cbnZhciBFUFNJTE9OID0gMWUtODtcblxudmFyIExvb3BDb250cm9sID0gZnVuY3Rpb24gKF9UaW1lRW5naW5lKSB7XG4gICgwLCBfaW5oZXJpdHMzLmRlZmF1bHQpKExvb3BDb250cm9sLCBfVGltZUVuZ2luZSk7XG5cbiAgZnVuY3Rpb24gTG9vcENvbnRyb2wocGxheUNvbnRyb2wpIHtcbiAgICAoMCwgX2NsYXNzQ2FsbENoZWNrMy5kZWZhdWx0KSh0aGlzLCBMb29wQ29udHJvbCk7XG5cbiAgICB2YXIgX3RoaXMgPSAoMCwgX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4zLmRlZmF1bHQpKHRoaXMsIChMb29wQ29udHJvbC5fX3Byb3RvX18gfHwgKDAsIF9nZXRQcm90b3R5cGVPZjIuZGVmYXVsdCkoTG9vcENvbnRyb2wpKS5jYWxsKHRoaXMpKTtcblxuICAgIF90aGlzLl9fcGxheUNvbnRyb2wgPSBwbGF5Q29udHJvbDtcbiAgICBfdGhpcy5zcGVlZCA9IDE7XG4gICAgX3RoaXMubG93ZXIgPSAtSW5maW5pdHk7XG4gICAgX3RoaXMudXBwZXIgPSBJbmZpbml0eTtcbiAgICByZXR1cm4gX3RoaXM7XG4gIH1cblxuICAvLyBUaW1lRW5naW5lIG1ldGhvZCAoc2NoZWR1bGVkIGludGVyZmFjZSlcblxuXG4gICgwLCBfY3JlYXRlQ2xhc3MzLmRlZmF1bHQpKExvb3BDb250cm9sLCBbe1xuICAgIGtleTogJ2FkdmFuY2VUaW1lJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gYWR2YW5jZVRpbWUodGltZSkge1xuICAgICAgdmFyIHBsYXlDb250cm9sID0gdGhpcy5fX3BsYXlDb250cm9sO1xuICAgICAgdmFyIHNwZWVkID0gdGhpcy5zcGVlZDtcbiAgICAgIHZhciBsb3dlciA9IHRoaXMubG93ZXI7XG4gICAgICB2YXIgdXBwZXIgPSB0aGlzLnVwcGVyO1xuXG4gICAgICBpZiAoc3BlZWQgPiAwKSB0aW1lICs9IEVQU0lMT047ZWxzZSB0aW1lIC09IEVQU0lMT047XG5cbiAgICAgIGlmIChzcGVlZCA+IDApIHtcbiAgICAgICAgcGxheUNvbnRyb2wuc3luY1NwZWVkKHRpbWUsIGxvd2VyLCBzcGVlZCwgdHJ1ZSk7XG4gICAgICAgIHJldHVybiBwbGF5Q29udHJvbC5fX2dldFRpbWVBdFBvc2l0aW9uKHVwcGVyKSAtIEVQU0lMT047XG4gICAgICB9IGVsc2UgaWYgKHNwZWVkIDwgMCkge1xuICAgICAgICBwbGF5Q29udHJvbC5zeW5jU3BlZWQodGltZSwgdXBwZXIsIHNwZWVkLCB0cnVlKTtcbiAgICAgICAgcmV0dXJuIHBsYXlDb250cm9sLl9fZ2V0VGltZUF0UG9zaXRpb24obG93ZXIpICsgRVBTSUxPTjtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIEluZmluaXR5O1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ3Jlc2NoZWR1bGUnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiByZXNjaGVkdWxlKHNwZWVkKSB7XG4gICAgICB2YXIgcGxheUNvbnRyb2wgPSB0aGlzLl9fcGxheUNvbnRyb2w7XG4gICAgICB2YXIgbG93ZXIgPSBNYXRoLm1pbihwbGF5Q29udHJvbC5fX2xvb3BTdGFydCwgcGxheUNvbnRyb2wuX19sb29wRW5kKTtcbiAgICAgIHZhciB1cHBlciA9IE1hdGgubWF4KHBsYXlDb250cm9sLl9fbG9vcFN0YXJ0LCBwbGF5Q29udHJvbC5fX2xvb3BFbmQpO1xuXG4gICAgICB0aGlzLnNwZWVkID0gc3BlZWQ7XG4gICAgICB0aGlzLmxvd2VyID0gbG93ZXI7XG4gICAgICB0aGlzLnVwcGVyID0gdXBwZXI7XG5cbiAgICAgIGlmIChsb3dlciA9PT0gdXBwZXIpIHNwZWVkID0gMDtcblxuICAgICAgaWYgKHNwZWVkID4gMCkgdGhpcy5yZXNldFRpbWUocGxheUNvbnRyb2wuX19nZXRUaW1lQXRQb3NpdGlvbih1cHBlcikgLSBFUFNJTE9OKTtlbHNlIGlmIChzcGVlZCA8IDApIHRoaXMucmVzZXRUaW1lKHBsYXlDb250cm9sLl9fZ2V0VGltZUF0UG9zaXRpb24obG93ZXIpICsgRVBTSUxPTik7ZWxzZSB0aGlzLnJlc2V0VGltZShJbmZpbml0eSk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAnYXBwbHlMb29wQm91bmRhcmllcycsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGFwcGx5TG9vcEJvdW5kYXJpZXMocG9zaXRpb24sIHNwZWVkKSB7XG4gICAgICB2YXIgbG93ZXIgPSB0aGlzLmxvd2VyO1xuICAgICAgdmFyIHVwcGVyID0gdGhpcy51cHBlcjtcblxuICAgICAgaWYgKHNwZWVkID4gMCAmJiBwb3NpdGlvbiA+PSB1cHBlcikgcmV0dXJuIGxvd2VyICsgKHBvc2l0aW9uIC0gbG93ZXIpICUgKHVwcGVyIC0gbG93ZXIpO2Vsc2UgaWYgKHNwZWVkIDwgMCAmJiBwb3NpdGlvbiA8IGxvd2VyKSByZXR1cm4gdXBwZXIgLSAodXBwZXIgLSBwb3NpdGlvbikgJSAodXBwZXIgLSBsb3dlcik7XG5cbiAgICAgIHJldHVybiBwb3NpdGlvbjtcbiAgICB9XG4gIH1dKTtcbiAgcmV0dXJuIExvb3BDb250cm9sO1xufShfVGltZUVuZ2luZTUuZGVmYXVsdCk7XG5cbi8vIHBsYXkgY29udHJvbGxlZCBiYXNlIGNsYXNzXG5cblxudmFyIFBsYXlDb250cm9sbGVkID0gZnVuY3Rpb24gKCkge1xuICBmdW5jdGlvbiBQbGF5Q29udHJvbGxlZChwbGF5Q29udHJvbCwgZW5naW5lKSB7XG4gICAgKDAsIF9jbGFzc0NhbGxDaGVjazMuZGVmYXVsdCkodGhpcywgUGxheUNvbnRyb2xsZWQpO1xuXG4gICAgdGhpcy5fX3BsYXlDb250cm9sID0gcGxheUNvbnRyb2w7XG5cbiAgICBlbmdpbmUubWFzdGVyID0gdGhpcztcbiAgICB0aGlzLl9fZW5naW5lID0gZW5naW5lO1xuICB9XG5cbiAgKDAsIF9jcmVhdGVDbGFzczMuZGVmYXVsdCkoUGxheUNvbnRyb2xsZWQsIFt7XG4gICAga2V5OiAnc3luY1NwZWVkJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gc3luY1NwZWVkKHRpbWUsIHBvc2l0aW9uLCBzcGVlZCwgc2VlaywgbGFzdFNwZWVkKSB7XG4gICAgICB0aGlzLl9fZW5naW5lLnN5bmNTcGVlZCh0aW1lLCBwb3NpdGlvbiwgc3BlZWQsIHNlZWspO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ2Rlc3Ryb3knLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBkZXN0cm95KCkge1xuICAgICAgdGhpcy5fX3BsYXlDb250cm9sID0gbnVsbDtcblxuICAgICAgdGhpcy5fX2VuZ2luZS5tYXN0ZXIgPSBudWxsO1xuICAgICAgdGhpcy5fX2VuZ2luZSA9IG51bGw7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAnY3VycmVudFRpbWUnLFxuICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgcmV0dXJuIHRoaXMuX19wbGF5Q29udHJvbC5jdXJyZW50VGltZTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6ICdhdWRpb1RpbWUnLFxuICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgcmV0dXJuIHRoaXMuX19wbGF5Q29udHJvbC5hdWRpb1RpbWU7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAnY3VycmVudFBvc2l0aW9uJyxcbiAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgIHJldHVybiB0aGlzLl9fcGxheUNvbnRyb2wuY3VycmVudFBvc2l0aW9uO1xuICAgIH1cbiAgfV0pO1xuICByZXR1cm4gUGxheUNvbnRyb2xsZWQ7XG59KCk7XG5cbi8vIHBsYXkgY29udHJvbCBmb3IgZW5naW5lcyBpbXBsZW1lbnRpbmcgdGhlICpzcGVlZC1jb250cm9sbGVkKiBpbnRlcmZhY2VcblxuXG52YXIgUGxheUNvbnRyb2xsZWRTcGVlZENvbnRyb2xsZWQgPSBmdW5jdGlvbiAoX1BsYXlDb250cm9sbGVkKSB7XG4gICgwLCBfaW5oZXJpdHMzLmRlZmF1bHQpKFBsYXlDb250cm9sbGVkU3BlZWRDb250cm9sbGVkLCBfUGxheUNvbnRyb2xsZWQpO1xuXG4gIGZ1bmN0aW9uIFBsYXlDb250cm9sbGVkU3BlZWRDb250cm9sbGVkKHBsYXlDb250cm9sLCBlbmdpbmUpIHtcbiAgICAoMCwgX2NsYXNzQ2FsbENoZWNrMy5kZWZhdWx0KSh0aGlzLCBQbGF5Q29udHJvbGxlZFNwZWVkQ29udHJvbGxlZCk7XG4gICAgcmV0dXJuICgwLCBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybjMuZGVmYXVsdCkodGhpcywgKFBsYXlDb250cm9sbGVkU3BlZWRDb250cm9sbGVkLl9fcHJvdG9fXyB8fCAoMCwgX2dldFByb3RvdHlwZU9mMi5kZWZhdWx0KShQbGF5Q29udHJvbGxlZFNwZWVkQ29udHJvbGxlZCkpLmNhbGwodGhpcywgcGxheUNvbnRyb2wsIGVuZ2luZSkpO1xuICB9XG5cbiAgcmV0dXJuIFBsYXlDb250cm9sbGVkU3BlZWRDb250cm9sbGVkO1xufShQbGF5Q29udHJvbGxlZCk7XG5cbi8vIHBsYXkgY29udHJvbCBmb3IgZW5naW5lcyBpbXBsbWVudGluZyB0aGUgKnRyYW5zcG9ydGVkKiBpbnRlcmZhY2VcblxuXG52YXIgUGxheUNvbnRyb2xsZWRUcmFuc3BvcnRlZCA9IGZ1bmN0aW9uIChfUGxheUNvbnRyb2xsZWQyKSB7XG4gICgwLCBfaW5oZXJpdHMzLmRlZmF1bHQpKFBsYXlDb250cm9sbGVkVHJhbnNwb3J0ZWQsIF9QbGF5Q29udHJvbGxlZDIpO1xuXG4gIGZ1bmN0aW9uIFBsYXlDb250cm9sbGVkVHJhbnNwb3J0ZWQocGxheUNvbnRyb2wsIGVuZ2luZSkge1xuICAgICgwLCBfY2xhc3NDYWxsQ2hlY2szLmRlZmF1bHQpKHRoaXMsIFBsYXlDb250cm9sbGVkVHJhbnNwb3J0ZWQpO1xuXG4gICAgdmFyIF90aGlzMyA9ICgwLCBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybjMuZGVmYXVsdCkodGhpcywgKFBsYXlDb250cm9sbGVkVHJhbnNwb3J0ZWQuX19wcm90b19fIHx8ICgwLCBfZ2V0UHJvdG90eXBlT2YyLmRlZmF1bHQpKFBsYXlDb250cm9sbGVkVHJhbnNwb3J0ZWQpKS5jYWxsKHRoaXMsIHBsYXlDb250cm9sLCBlbmdpbmUpKTtcblxuICAgIF90aGlzMy5fX3NjaGVkdWxlckhvb2sgPSBuZXcgUGxheUNvbnRyb2xsZWRTY2hlZHVsZXJIb29rKHBsYXlDb250cm9sLCBlbmdpbmUpO1xuICAgIHJldHVybiBfdGhpczM7XG4gIH1cblxuICAoMCwgX2NyZWF0ZUNsYXNzMy5kZWZhdWx0KShQbGF5Q29udHJvbGxlZFRyYW5zcG9ydGVkLCBbe1xuICAgIGtleTogJ3N5bmNTcGVlZCcsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHN5bmNTcGVlZCh0aW1lLCBwb3NpdGlvbiwgc3BlZWQsIHNlZWssIGxhc3RTcGVlZCkge1xuICAgICAgaWYgKHNwZWVkICE9PSBsYXN0U3BlZWQgfHwgc2Vlaykge1xuICAgICAgICB2YXIgbmV4dFBvc2l0aW9uO1xuXG4gICAgICAgIC8vIHJlc3luYyB0cmFuc3BvcnRlZCBlbmdpbmVzXG4gICAgICAgIGlmIChzZWVrIHx8IHNwZWVkICogbGFzdFNwZWVkIDwgMCkge1xuICAgICAgICAgIC8vIHNlZWsgb3IgcmV2ZXJzZSBkaXJlY3Rpb25cbiAgICAgICAgICBuZXh0UG9zaXRpb24gPSB0aGlzLl9fZW5naW5lLnN5bmNQb3NpdGlvbih0aW1lLCBwb3NpdGlvbiwgc3BlZWQpO1xuICAgICAgICB9IGVsc2UgaWYgKGxhc3RTcGVlZCA9PT0gMCkge1xuICAgICAgICAgIC8vIHN0YXJ0XG4gICAgICAgICAgbmV4dFBvc2l0aW9uID0gdGhpcy5fX2VuZ2luZS5zeW5jUG9zaXRpb24odGltZSwgcG9zaXRpb24sIHNwZWVkKTtcbiAgICAgICAgfSBlbHNlIGlmIChzcGVlZCA9PT0gMCkge1xuICAgICAgICAgIC8vIHN0b3AgLyBwYXVzZVxuICAgICAgICAgIHRoaXMuX19lbmdpbmUuc3luY1Bvc2l0aW9uKHRpbWUsIHBvc2l0aW9uLCBzcGVlZCk7XG4gICAgICAgICAgbmV4dFBvc2l0aW9uID0gSW5maW5pdHk7XG5cbiAgICAgICAgICAvLyBpZiAodGhpcy5fX2VuZ2luZS5zeW5jU3BlZWQpXG4gICAgICAgICAgLy8gICB0aGlzLl9fZW5naW5lLnN5bmNTcGVlZCh0aW1lLCBwb3NpdGlvbiwgMCk7XG4gICAgICAgIH0gZWxzZSBpZiAodGhpcy5fX2VuZ2luZS5zeW5jU3BlZWQpIHtcbiAgICAgICAgICAvLyBjaGFuZ2Ugc3BlZWQgd2l0aG91dCByZXZlcnNpbmcgZGlyZWN0aW9uXG4gICAgICAgICAgdGhpcy5fX2VuZ2luZS5zeW5jU3BlZWQodGltZSwgcG9zaXRpb24sIHNwZWVkKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMuX19zY2hlZHVsZXJIb29rLnJlc2V0UG9zaXRpb24obmV4dFBvc2l0aW9uKTtcbiAgICAgIH1cbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6ICdyZXNldEVuZ2luZVBvc2l0aW9uJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gcmVzZXRFbmdpbmVQb3NpdGlvbihlbmdpbmUpIHtcbiAgICAgIHZhciBwb3NpdGlvbiA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkO1xuXG4gICAgICBpZiAocG9zaXRpb24gPT09IHVuZGVmaW5lZCkge1xuICAgICAgICB2YXIgcGxheUNvbnRyb2wgPSB0aGlzLl9fcGxheUNvbnRyb2w7XG4gICAgICAgIHZhciB0aW1lID0gcGxheUNvbnRyb2wuX19zeW5jKCk7XG5cbiAgICAgICAgcG9zaXRpb24gPSB0aGlzLl9fZW5naW5lLnN5bmNQb3NpdGlvbih0aW1lLCBwbGF5Q29udHJvbC5fX3Bvc2l0aW9uLCBwbGF5Q29udHJvbC5fX3NwZWVkKTtcbiAgICAgIH1cblxuICAgICAgdGhpcy5fX3NjaGVkdWxlckhvb2sucmVzZXRQb3NpdGlvbihwb3NpdGlvbik7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAnZGVzdHJveScsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGRlc3Ryb3koKSB7XG4gICAgICB0aGlzLl9fc2NoZWR1bGVySG9vay5kZXN0cm95KCk7XG4gICAgICB0aGlzLl9fc2NoZWR1bGVySG9vayA9IG51bGw7XG5cbiAgICAgICgwLCBfZ2V0My5kZWZhdWx0KShQbGF5Q29udHJvbGxlZFRyYW5zcG9ydGVkLnByb3RvdHlwZS5fX3Byb3RvX18gfHwgKDAsIF9nZXRQcm90b3R5cGVPZjIuZGVmYXVsdCkoUGxheUNvbnRyb2xsZWRUcmFuc3BvcnRlZC5wcm90b3R5cGUpLCAnZGVzdHJveScsIHRoaXMpLmNhbGwodGhpcyk7XG4gICAgfVxuICB9XSk7XG4gIHJldHVybiBQbGF5Q29udHJvbGxlZFRyYW5zcG9ydGVkO1xufShQbGF5Q29udHJvbGxlZCk7XG5cbi8vIHBsYXkgY29udHJvbCBmb3IgdGltZSBlbmdpbmVzIGltcGxlbWVudGluZyB0aGUgKnNjaGVkdWxlZCogaW50ZXJmYWNlXG5cblxudmFyIFBsYXlDb250cm9sbGVkU2NoZWR1bGVkID0gZnVuY3Rpb24gKF9QbGF5Q29udHJvbGxlZDMpIHtcbiAgKDAsIF9pbmhlcml0czMuZGVmYXVsdCkoUGxheUNvbnRyb2xsZWRTY2hlZHVsZWQsIF9QbGF5Q29udHJvbGxlZDMpO1xuXG4gIGZ1bmN0aW9uIFBsYXlDb250cm9sbGVkU2NoZWR1bGVkKHBsYXlDb250cm9sLCBlbmdpbmUpIHtcbiAgICAoMCwgX2NsYXNzQ2FsbENoZWNrMy5kZWZhdWx0KSh0aGlzLCBQbGF5Q29udHJvbGxlZFNjaGVkdWxlZCk7XG5cbiAgICAvLyBzY2hlZHVsaW5nIHF1ZXVlIGJlY29tZXMgbWFzdGVyIG9mIGVuZ2luZVxuICAgIHZhciBfdGhpczQgPSAoMCwgX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4zLmRlZmF1bHQpKHRoaXMsIChQbGF5Q29udHJvbGxlZFNjaGVkdWxlZC5fX3Byb3RvX18gfHwgKDAsIF9nZXRQcm90b3R5cGVPZjIuZGVmYXVsdCkoUGxheUNvbnRyb2xsZWRTY2hlZHVsZWQpKS5jYWxsKHRoaXMsIHBsYXlDb250cm9sLCBlbmdpbmUpKTtcblxuICAgIGVuZ2luZS5tYXN0ZXIgPSBudWxsO1xuICAgIF90aGlzNC5fX3NjaGVkdWxpbmdRdWV1ZSA9IG5ldyBQbGF5Q29udHJvbGxlZFNjaGVkdWxpbmdRdWV1ZShwbGF5Q29udHJvbCwgZW5naW5lKTtcbiAgICByZXR1cm4gX3RoaXM0O1xuICB9XG5cbiAgKDAsIF9jcmVhdGVDbGFzczMuZGVmYXVsdCkoUGxheUNvbnRyb2xsZWRTY2hlZHVsZWQsIFt7XG4gICAga2V5OiAnc3luY1NwZWVkJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gc3luY1NwZWVkKHRpbWUsIHBvc2l0aW9uLCBzcGVlZCwgc2VlaywgbGFzdFNwZWVkKSB7XG4gICAgICBpZiAobGFzdFNwZWVkID09PSAwICYmIHNwZWVkICE9PSAwKSAvLyBzdGFydCBvciBzZWVrXG4gICAgICAgIHRoaXMuX19lbmdpbmUucmVzZXRUaW1lKCk7ZWxzZSBpZiAobGFzdFNwZWVkICE9PSAwICYmIHNwZWVkID09PSAwKSAvLyBzdG9wXG4gICAgICAgIHRoaXMuX19lbmdpbmUucmVzZXRUaW1lKEluZmluaXR5KTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6ICdkZXN0cm95JyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gZGVzdHJveSgpIHtcbiAgICAgIHRoaXMuX19zY2hlZHVsaW5nUXVldWUuZGVzdHJveSgpO1xuICAgICAgKDAsIF9nZXQzLmRlZmF1bHQpKFBsYXlDb250cm9sbGVkU2NoZWR1bGVkLnByb3RvdHlwZS5fX3Byb3RvX18gfHwgKDAsIF9nZXRQcm90b3R5cGVPZjIuZGVmYXVsdCkoUGxheUNvbnRyb2xsZWRTY2hlZHVsZWQucHJvdG90eXBlKSwgJ2Rlc3Ryb3knLCB0aGlzKS5jYWxsKHRoaXMpO1xuICAgIH1cbiAgfV0pO1xuICByZXR1cm4gUGxheUNvbnRyb2xsZWRTY2hlZHVsZWQ7XG59KFBsYXlDb250cm9sbGVkKTtcblxuLy8gdHJhbnNsYXRlcyB0cmFuc3BvcnRlZCBlbmdpbmUgYWR2YW5jZVBvc2l0aW9uIGludG8gZ2xvYmFsIHNjaGVkdWxlciB0aW1lc1xuXG5cbnZhciBQbGF5Q29udHJvbGxlZFNjaGVkdWxlckhvb2sgPSBmdW5jdGlvbiAoX1RpbWVFbmdpbmUyKSB7XG4gICgwLCBfaW5oZXJpdHMzLmRlZmF1bHQpKFBsYXlDb250cm9sbGVkU2NoZWR1bGVySG9vaywgX1RpbWVFbmdpbmUyKTtcblxuICBmdW5jdGlvbiBQbGF5Q29udHJvbGxlZFNjaGVkdWxlckhvb2socGxheUNvbnRyb2wsIGVuZ2luZSkge1xuICAgICgwLCBfY2xhc3NDYWxsQ2hlY2szLmRlZmF1bHQpKHRoaXMsIFBsYXlDb250cm9sbGVkU2NoZWR1bGVySG9vayk7XG5cbiAgICB2YXIgX3RoaXM1ID0gKDAsIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuMy5kZWZhdWx0KSh0aGlzLCAoUGxheUNvbnRyb2xsZWRTY2hlZHVsZXJIb29rLl9fcHJvdG9fXyB8fCAoMCwgX2dldFByb3RvdHlwZU9mMi5kZWZhdWx0KShQbGF5Q29udHJvbGxlZFNjaGVkdWxlckhvb2spKS5jYWxsKHRoaXMpKTtcblxuICAgIF90aGlzNS5fX3BsYXlDb250cm9sID0gcGxheUNvbnRyb2w7XG4gICAgX3RoaXM1Ll9fZW5naW5lID0gZW5naW5lO1xuXG4gICAgX3RoaXM1Ll9fbmV4dFBvc2l0aW9uID0gSW5maW5pdHk7XG4gICAgcGxheUNvbnRyb2wuX19zY2hlZHVsZXIuYWRkKF90aGlzNSwgSW5maW5pdHkpO1xuICAgIHJldHVybiBfdGhpczU7XG4gIH1cblxuICAoMCwgX2NyZWF0ZUNsYXNzMy5kZWZhdWx0KShQbGF5Q29udHJvbGxlZFNjaGVkdWxlckhvb2ssIFt7XG4gICAga2V5OiAnYWR2YW5jZVRpbWUnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBhZHZhbmNlVGltZSh0aW1lKSB7XG4gICAgICB2YXIgcGxheUNvbnRyb2wgPSB0aGlzLl9fcGxheUNvbnRyb2w7XG4gICAgICB2YXIgZW5naW5lID0gdGhpcy5fX2VuZ2luZTtcbiAgICAgIHZhciBwb3NpdGlvbiA9IHRoaXMuX19uZXh0UG9zaXRpb247XG4gICAgICB2YXIgbmV4dFBvc2l0aW9uID0gZW5naW5lLmFkdmFuY2VQb3NpdGlvbih0aW1lLCBwb3NpdGlvbiwgcGxheUNvbnRyb2wuX19zcGVlZCk7XG4gICAgICB2YXIgbmV4dFRpbWUgPSBwbGF5Q29udHJvbC5fX2dldFRpbWVBdFBvc2l0aW9uKG5leHRQb3NpdGlvbik7XG5cbiAgICAgIHRoaXMuX19uZXh0UG9zaXRpb24gPSBuZXh0UG9zaXRpb247XG4gICAgICByZXR1cm4gbmV4dFRpbWU7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAncmVzZXRQb3NpdGlvbicsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHJlc2V0UG9zaXRpb24oKSB7XG4gICAgICB2YXIgcG9zaXRpb24gPSBhcmd1bWVudHMubGVuZ3RoID4gMCAmJiBhcmd1bWVudHNbMF0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1swXSA6IHRoaXMuX19uZXh0UG9zaXRpb247XG5cbiAgICAgIHZhciB0aW1lID0gdGhpcy5fX3BsYXlDb250cm9sLl9fZ2V0VGltZUF0UG9zaXRpb24ocG9zaXRpb24pO1xuICAgICAgdGhpcy5fX25leHRQb3NpdGlvbiA9IHBvc2l0aW9uO1xuICAgICAgdGhpcy5yZXNldFRpbWUodGltZSk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAnZGVzdHJveScsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGRlc3Ryb3koKSB7XG4gICAgICB0aGlzLl9fcGxheUNvbnRyb2wuX19zY2hlZHVsZXIucmVtb3ZlKHRoaXMpO1xuICAgICAgdGhpcy5fX3BsYXlDb250cm9sID0gbnVsbDtcbiAgICAgIHRoaXMuX19lbmdpbmUgPSBudWxsO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ2N1cnJlbnRUaW1lJyxcbiAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgIHJldHVybiB0aGlzLl9fcGxheUNvbnRyb2wuY3VycmVudFRpbWU7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAnYXVkaW9UaW1lJyxcbiAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgIHJldHVybiB0aGlzLl9fcGxheUNvbnRyb2wuYXVkaW9UaW1lO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ2N1cnJlbnRQb3NpdGlvbicsXG4gICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICByZXR1cm4gdGhpcy5fX3BsYXlDb250cm9sLmN1cnJlbnRQb3NpdGlvbjtcbiAgICB9XG4gIH1dKTtcbiAgcmV0dXJuIFBsYXlDb250cm9sbGVkU2NoZWR1bGVySG9vaztcbn0oX1RpbWVFbmdpbmU1LmRlZmF1bHQpO1xuXG4vLyBpbnRlcm5hbCBzY2hlZHVsaW5nIHF1ZXVlIHRoYXQgcmV0dXJucyB0aGUgY3VycmVudCBwb3NpdGlvbiAoYW5kIHRpbWUpIG9mIHRoZSBwbGF5IGNvbnRyb2xcblxuXG52YXIgUGxheUNvbnRyb2xsZWRTY2hlZHVsaW5nUXVldWUgPSBmdW5jdGlvbiAoX1NjaGVkdWxpbmdRdWV1ZSkge1xuICAoMCwgX2luaGVyaXRzMy5kZWZhdWx0KShQbGF5Q29udHJvbGxlZFNjaGVkdWxpbmdRdWV1ZSwgX1NjaGVkdWxpbmdRdWV1ZSk7XG5cbiAgZnVuY3Rpb24gUGxheUNvbnRyb2xsZWRTY2hlZHVsaW5nUXVldWUocGxheUNvbnRyb2wsIGVuZ2luZSkge1xuICAgICgwLCBfY2xhc3NDYWxsQ2hlY2szLmRlZmF1bHQpKHRoaXMsIFBsYXlDb250cm9sbGVkU2NoZWR1bGluZ1F1ZXVlKTtcblxuICAgIHZhciBfdGhpczYgPSAoMCwgX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4zLmRlZmF1bHQpKHRoaXMsIChQbGF5Q29udHJvbGxlZFNjaGVkdWxpbmdRdWV1ZS5fX3Byb3RvX18gfHwgKDAsIF9nZXRQcm90b3R5cGVPZjIuZGVmYXVsdCkoUGxheUNvbnRyb2xsZWRTY2hlZHVsaW5nUXVldWUpKS5jYWxsKHRoaXMpKTtcblxuICAgIF90aGlzNi5fX3BsYXlDb250cm9sID0gcGxheUNvbnRyb2w7XG4gICAgX3RoaXM2Ll9fZW5naW5lID0gZW5naW5lO1xuXG4gICAgX3RoaXM2LmFkZChlbmdpbmUsIEluZmluaXR5KTtcbiAgICBwbGF5Q29udHJvbC5fX3NjaGVkdWxlci5hZGQoX3RoaXM2LCBJbmZpbml0eSk7XG4gICAgcmV0dXJuIF90aGlzNjtcbiAgfVxuXG4gICgwLCBfY3JlYXRlQ2xhc3MzLmRlZmF1bHQpKFBsYXlDb250cm9sbGVkU2NoZWR1bGluZ1F1ZXVlLCBbe1xuICAgIGtleTogJ2Rlc3Ryb3knLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBkZXN0cm95KCkge1xuICAgICAgdGhpcy5fX3BsYXlDb250cm9sLl9fc2NoZWR1bGVyLnJlbW92ZSh0aGlzKTtcbiAgICAgIHRoaXMucmVtb3ZlKHRoaXMuX19lbmdpbmUpO1xuXG4gICAgICB0aGlzLl9fcGxheUNvbnRyb2wgPSBudWxsO1xuICAgICAgdGhpcy5fX2VuZ2luZSA9IG51bGw7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAnY3VycmVudFRpbWUnLFxuICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgcmV0dXJuIHRoaXMuX19wbGF5Q29udHJvbC5jdXJyZW50VGltZTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6ICdhdWRpb1RpbWUnLFxuICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgcmV0dXJuIHRoaXMuX19wbGF5Q29udHJvbC5hdWRpb1RpbWU7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAnY3VycmVudFBvc2l0aW9uJyxcbiAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgIHJldHVybiB0aGlzLl9fcGxheUNvbnRyb2wuY3VycmVudFBvc2l0aW9uO1xuICAgIH1cbiAgfV0pO1xuICByZXR1cm4gUGxheUNvbnRyb2xsZWRTY2hlZHVsaW5nUXVldWU7XG59KF9TY2hlZHVsaW5nUXVldWUzLmRlZmF1bHQpO1xuXG4vKipcbiAqIEV4dGVuZHMgVGltZSBFbmdpbmUgdG8gcHJvdmlkZSBwbGF5YmFjayBjb250cm9sIG9mIGEgVGltZSBFbmdpbmUgaW5zdGFuY2UuXG4gKlxuICogW2V4YW1wbGVde0BsaW5rIGh0dHBzOi8vcmF3Z2l0LmNvbS93YXZlc2pzL3dhdmVzLW1hc3RlcnMvbWFzdGVyL2V4YW1wbGVzL3RyYW5zcG9ydC9pbmRleC5odG1sfVxuICpcbiAqIEBleHRlbmRzIFRpbWVFbmdpbmVcbiAqIEBwYXJhbSB7T2JqZWN0fSBzY2hlZHVsZXIgLSBpbnN0YW5jZSBvZiBTY2hlZHVsZXJcbiAqIEBwYXJhbSB7VGltZUVuZ2luZX0gZW5naW5lIC0gZW5naW5lIHRvIGNvbnRyb2xcbiAqXG4gKiBAZXhhbXBsZVxuICogaW1wb3J0ICogYXMgbWFzdGVycyBmcm9tICd3YXZlcy1tYXN0ZXJzJztcbiAqXG4gKiBjb25zdCBnZXRUaW1lRnVuY3Rpb24gPSAoKSA9PiB7XG4gKiAgIGNvbnN0IG5vdyA9IHByb2Nlc3MuaHJ0aW1lKCk7XG4gKiAgIHJldHVybiBub3dbMF0gKyBub3dbMV0gKiAxZS05O1xuICogfVxuICogY29uc3Qgc2NoZWR1bGVyID0gbmV3IG1hc3RlcnMuU2NoZWR1bGVyKGdldFRpbWVGdW5jdGlvbik7XG4gKiBjb25zdCBwbGF5ZXJFbmdpbmUgPSBuZXcgTXlUaW1lRW5naW5lKCk7XG4gKiBjb25zdCBwbGF5Q29udHJvbCA9IG5ldyBtYXN0ZXJzLlBsYXlDb250cm9sKHNjaGVkdWxlciwgcGxheWVyRW5naW5lKTtcbiAqXG4gKiBwbGF5Q29udHJvbC5zdGFydCgpO1xuICovXG5cblxudmFyIFBsYXlDb250cm9sID0gZnVuY3Rpb24gKF9UaW1lRW5naW5lMykge1xuICAoMCwgX2luaGVyaXRzMy5kZWZhdWx0KShQbGF5Q29udHJvbCwgX1RpbWVFbmdpbmUzKTtcblxuICBmdW5jdGlvbiBQbGF5Q29udHJvbChzY2hlZHVsZXIsIGVuZ2luZSkge1xuICAgIHZhciBvcHRpb25zID0gYXJndW1lbnRzLmxlbmd0aCA+IDIgJiYgYXJndW1lbnRzWzJdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMl0gOiB7fTtcbiAgICAoMCwgX2NsYXNzQ2FsbENoZWNrMy5kZWZhdWx0KSh0aGlzLCBQbGF5Q29udHJvbCk7XG5cbiAgICB2YXIgX3RoaXM3ID0gKDAsIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuMy5kZWZhdWx0KSh0aGlzLCAoUGxheUNvbnRyb2wuX19wcm90b19fIHx8ICgwLCBfZ2V0UHJvdG90eXBlT2YyLmRlZmF1bHQpKFBsYXlDb250cm9sKSkuY2FsbCh0aGlzKSk7XG5cbiAgICBfdGhpczcuX19zY2hlZHVsZXIgPSBzY2hlZHVsZXI7XG5cbiAgICBfdGhpczcuX19wbGF5Q29udHJvbGxlZCA9IG51bGw7XG4gICAgX3RoaXM3Ll9fbG9vcENvbnRyb2wgPSBudWxsO1xuICAgIF90aGlzNy5fX2xvb3BTdGFydCA9IDA7XG4gICAgX3RoaXM3Ll9fbG9vcEVuZCA9IDE7XG5cbiAgICAvLyBzeW5jaHJvbml6ZWQgdGllLCBwb3NpdGlvbiwgYW5kIHNwZWVkXG4gICAgX3RoaXM3Ll9fdGltZSA9IDA7XG4gICAgX3RoaXM3Ll9fcG9zaXRpb24gPSAwO1xuICAgIF90aGlzNy5fX3NwZWVkID0gMDtcblxuICAgIC8vIG5vbi16ZXJvIFwidXNlclwiIHNwZWVkXG4gICAgX3RoaXM3Ll9fcGxheWluZ1NwZWVkID0gMTtcblxuICAgIGlmIChlbmdpbmUpIF90aGlzNy5fX3NldEVuZ2luZShlbmdpbmUpO1xuICAgIHJldHVybiBfdGhpczc7XG4gIH1cblxuICAoMCwgX2NyZWF0ZUNsYXNzMy5kZWZhdWx0KShQbGF5Q29udHJvbCwgW3tcbiAgICBrZXk6ICdfX3NldEVuZ2luZScsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIF9fc2V0RW5naW5lKGVuZ2luZSkge1xuICAgICAgaWYgKGVuZ2luZS5tYXN0ZXIpIHRocm93IG5ldyBFcnJvcihcIm9iamVjdCBoYXMgYWxyZWFkeSBiZWVuIGFkZGVkIHRvIGEgbWFzdGVyXCIpO1xuXG4gICAgICBpZiAoX1RpbWVFbmdpbmU1LmRlZmF1bHQuaW1wbGVtZW50c1NwZWVkQ29udHJvbGxlZChlbmdpbmUpKSB0aGlzLl9fcGxheUNvbnRyb2xsZWQgPSBuZXcgUGxheUNvbnRyb2xsZWRTcGVlZENvbnRyb2xsZWQodGhpcywgZW5naW5lKTtlbHNlIGlmIChfVGltZUVuZ2luZTUuZGVmYXVsdC5pbXBsZW1lbnRzVHJhbnNwb3J0ZWQoZW5naW5lKSkgdGhpcy5fX3BsYXlDb250cm9sbGVkID0gbmV3IFBsYXlDb250cm9sbGVkVHJhbnNwb3J0ZWQodGhpcywgZW5naW5lKTtlbHNlIGlmIChfVGltZUVuZ2luZTUuZGVmYXVsdC5pbXBsZW1lbnRzU2NoZWR1bGVkKGVuZ2luZSkpIHRoaXMuX19wbGF5Q29udHJvbGxlZCA9IG5ldyBQbGF5Q29udHJvbGxlZFNjaGVkdWxlZCh0aGlzLCBlbmdpbmUpO2Vsc2UgdGhyb3cgbmV3IEVycm9yKFwib2JqZWN0IGNhbm5vdCBiZSBhZGRlZCB0byBwbGF5IGNvbnRyb2xcIik7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAnX19yZXNldEVuZ2luZScsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIF9fcmVzZXRFbmdpbmUoKSB7XG4gICAgICB0aGlzLl9fcGxheUNvbnRyb2xsZWQuZGVzdHJveSgpO1xuICAgICAgdGhpcy5fX3BsYXlDb250cm9sbGVkID0gbnVsbDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDYWxjdWxhdGUvZXh0cmFwb2xhdGUgcGxheWluZyB0aW1lIGZvciBnaXZlbiBwb3NpdGlvblxuICAgICAqXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IHBvc2l0aW9uIHBvc2l0aW9uXG4gICAgICogQHJldHVybiB7TnVtYmVyfSBleHRyYXBvbGF0ZWQgdGltZVxuICAgICAqIEBwcml2YXRlXG4gICAgICovXG5cbiAgfSwge1xuICAgIGtleTogJ19fZ2V0VGltZUF0UG9zaXRpb24nLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBfX2dldFRpbWVBdFBvc2l0aW9uKHBvc2l0aW9uKSB7XG4gICAgICByZXR1cm4gdGhpcy5fX3RpbWUgKyAocG9zaXRpb24gLSB0aGlzLl9fcG9zaXRpb24pIC8gdGhpcy5fX3NwZWVkO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENhbGN1bGF0ZS9leHRyYXBvbGF0ZSBwbGF5aW5nIHBvc2l0aW9uIGZvciBnaXZlbiB0aW1lXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gdGltZSB0aW1lXG4gICAgICogQHJldHVybiB7TnVtYmVyfSBleHRyYXBvbGF0ZWQgcG9zaXRpb25cbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6ICdfX2dldFBvc2l0aW9uQXRUaW1lJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gX19nZXRQb3NpdGlvbkF0VGltZSh0aW1lKSB7XG4gICAgICByZXR1cm4gdGhpcy5fX3Bvc2l0aW9uICsgKHRpbWUgLSB0aGlzLl9fdGltZSkgKiB0aGlzLl9fc3BlZWQ7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAnX19zeW5jJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gX19zeW5jKCkge1xuICAgICAgdmFyIG5vdyA9IHRoaXMuY3VycmVudFRpbWU7XG4gICAgICB0aGlzLl9fcG9zaXRpb24gKz0gKG5vdyAtIHRoaXMuX190aW1lKSAqIHRoaXMuX19zcGVlZDtcbiAgICAgIHRoaXMuX190aW1lID0gbm93O1xuXG4gICAgICByZXR1cm4gbm93O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEdldCBjdXJyZW50IG1hc3RlciB0aW1lLlxuICAgICAqXG4gICAgICogQG5hbWUgY3VycmVudFRpbWVcbiAgICAgKiBAdHlwZSB7TnVtYmVyfVxuICAgICAqIEBtZW1iZXJvZiBQbGF5Q29udHJvbFxuICAgICAqIEBpbnN0YW5jZVxuICAgICAqIEByZWFkb25seVxuICAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6ICdzZXQnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBzZXQoKSB7XG4gICAgICB2YXIgZW5naW5lID0gYXJndW1lbnRzLmxlbmd0aCA+IDAgJiYgYXJndW1lbnRzWzBdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMF0gOiBudWxsO1xuXG4gICAgICB2YXIgdGltZSA9IHRoaXMuX19zeW5jKCk7XG4gICAgICB2YXIgc3BlZWQgPSB0aGlzLl9fc3BlZWQ7XG5cbiAgICAgIGlmICh0aGlzLl9fcGxheUNvbnRyb2xsZWQgIT09IG51bGwgJiYgdGhpcy5fX3BsYXlDb250cm9sbGVkLl9fZW5naW5lICE9PSBlbmdpbmUpIHtcblxuICAgICAgICB0aGlzLnN5bmNTcGVlZCh0aW1lLCB0aGlzLl9fcG9zaXRpb24sIDApO1xuXG4gICAgICAgIGlmICh0aGlzLl9fcGxheUNvbnRyb2xsZWQpIHRoaXMuX19yZXNldEVuZ2luZSgpO1xuXG4gICAgICAgIGlmICh0aGlzLl9fcGxheUNvbnRyb2xsZWQgPT09IG51bGwgJiYgZW5naW5lICE9PSBudWxsKSB7XG4gICAgICAgICAgdGhpcy5fX3NldEVuZ2luZShlbmdpbmUpO1xuXG4gICAgICAgICAgaWYgKHNwZWVkICE9PSAwKSB0aGlzLnN5bmNTcGVlZCh0aW1lLCB0aGlzLl9fcG9zaXRpb24sIHNwZWVkKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFNldHMgdGhlIHBsYXkgY29udHJvbCBsb29wIGJlaGF2aW9yLlxuICAgICAqXG4gICAgICogQHR5cGUge0Jvb2xlYW59XG4gICAgICogQG5hbWUgbG9vcFxuICAgICAqIEBtZW1iZXJvZiBQbGF5Q29udHJvbFxuICAgICAqIEBpbnN0YW5jZVxuICAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6ICdzZXRMb29wQm91bmRhcmllcycsXG5cblxuICAgIC8qKlxuICAgICAqIFNldHMgbG9vcCBzdGFydCBhbmQgZW5kIHRpbWUuXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gbG9vcFN0YXJ0IC0gbG9vcCBzdGFydCB2YWx1ZS5cbiAgICAgKiBAcGFyYW0ge051bWJlcn0gbG9vcEVuZCAtIGxvb3AgZW5kIHZhbHVlLlxuICAgICAqL1xuICAgIHZhbHVlOiBmdW5jdGlvbiBzZXRMb29wQm91bmRhcmllcyhsb29wU3RhcnQsIGxvb3BFbmQpIHtcbiAgICAgIHRoaXMuX19sb29wU3RhcnQgPSBsb29wU3RhcnQ7XG4gICAgICB0aGlzLl9fbG9vcEVuZCA9IGxvb3BFbmQ7XG5cbiAgICAgIHRoaXMubG9vcCA9IHRoaXMubG9vcDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBTZXRzIGxvb3Agc3RhcnQgdmFsdWVcbiAgICAgKlxuICAgICAqIEB0eXBlIHtOdW1iZXJ9XG4gICAgICogQG5hbWUgbG9vcFN0YXJ0XG4gICAgICogQG1lbWJlcm9mIFBsYXlDb250cm9sXG4gICAgICogQGluc3RhbmNlXG4gICAgICovXG5cbiAgfSwge1xuICAgIGtleTogJ3N5bmNTcGVlZCcsXG5cblxuICAgIC8vIFRpbWVFbmdpbmUgbWV0aG9kIChzcGVlZC1jb250cm9sbGVkIGludGVyZmFjZSlcbiAgICB2YWx1ZTogZnVuY3Rpb24gc3luY1NwZWVkKHRpbWUsIHBvc2l0aW9uLCBzcGVlZCkge1xuICAgICAgdmFyIHNlZWsgPSBhcmd1bWVudHMubGVuZ3RoID4gMyAmJiBhcmd1bWVudHNbM10gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1szXSA6IGZhbHNlO1xuXG4gICAgICB2YXIgbGFzdFNwZWVkID0gdGhpcy5fX3NwZWVkO1xuXG4gICAgICBpZiAoc3BlZWQgIT09IGxhc3RTcGVlZCB8fCBzZWVrKSB7XG4gICAgICAgIGlmICgoc2VlayB8fCBsYXN0U3BlZWQgPT09IDApICYmIHRoaXMuX19sb29wQ29udHJvbCkgcG9zaXRpb24gPSB0aGlzLl9fbG9vcENvbnRyb2wuYXBwbHlMb29wQm91bmRhcmllcyhwb3NpdGlvbiwgc3BlZWQpO1xuXG4gICAgICAgIHRoaXMuX190aW1lID0gdGltZTtcbiAgICAgICAgdGhpcy5fX3Bvc2l0aW9uID0gcG9zaXRpb247XG4gICAgICAgIHRoaXMuX19zcGVlZCA9IHNwZWVkO1xuXG4gICAgICAgIGlmICh0aGlzLl9fcGxheUNvbnRyb2xsZWQpIHRoaXMuX19wbGF5Q29udHJvbGxlZC5zeW5jU3BlZWQodGltZSwgcG9zaXRpb24sIHNwZWVkLCBzZWVrLCBsYXN0U3BlZWQpO1xuXG4gICAgICAgIGlmICh0aGlzLl9fbG9vcENvbnRyb2wpIHRoaXMuX19sb29wQ29udHJvbC5yZXNjaGVkdWxlKHNwZWVkKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBTdGFydHMgcGxheWJhY2tcbiAgICAgKi9cblxuICB9LCB7XG4gICAga2V5OiAnc3RhcnQnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBzdGFydCgpIHtcbiAgICAgIHZhciB0aW1lID0gdGhpcy5fX3N5bmMoKTtcbiAgICAgIHRoaXMuc3luY1NwZWVkKHRpbWUsIHRoaXMuX19wb3NpdGlvbiwgdGhpcy5fX3BsYXlpbmdTcGVlZCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUGF1c2VzIHBsYXliYWNrIGFuZCBzdGF5cyBhdCB0aGUgc2FtZSBwb3NpdGlvbi5cbiAgICAgKi9cblxuICB9LCB7XG4gICAga2V5OiAncGF1c2UnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBwYXVzZSgpIHtcbiAgICAgIHZhciB0aW1lID0gdGhpcy5fX3N5bmMoKTtcbiAgICAgIHRoaXMuc3luY1NwZWVkKHRpbWUsIHRoaXMuX19wb3NpdGlvbiwgMCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogU3RvcHMgcGxheWJhY2sgYW5kIHNlZWtzIHRvIGluaXRpYWwgKDApIHBvc2l0aW9uLlxuICAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6ICdzdG9wJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gc3RvcCgpIHtcbiAgICAgIHZhciB0aW1lID0gdGhpcy5fX3N5bmMoKTtcbiAgICAgIHRoaXMuc3luY1NwZWVkKHRpbWUsIDAsIDAsIHRydWUpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIElmIHNwZWVkIGlmIHByb3ZpZGVkLCBzZXRzIHRoZSBwbGF5YmFjayBzcGVlZC4gVGhlIHNwZWVkIHZhbHVlIHNob3VsZFxuICAgICAqIGJlIG5vbi16ZXJvIGJldHdlZW4gLTE2IGFuZCAtMS8xNiBvciBiZXR3ZWVuIDEvMTYgYW5kIDE2LlxuICAgICAqXG4gICAgICogQHR5cGUge051bWJlcn1cbiAgICAgKiBAbmFtZSBzcGVlZFxuICAgICAqIEBtZW1iZXJvZiBQbGF5Q29udHJvbFxuICAgICAqIEBpbnN0YW5jZVxuICAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6ICdzZWVrJyxcblxuXG4gICAgLyoqXG4gICAgICogU2V0IChqdW1wIHRvKSBwbGF5aW5nIHBvc2l0aW9uLlxuICAgICAqXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IHBvc2l0aW9uIHRhcmdldCBwb3NpdGlvblxuICAgICAqL1xuICAgIHZhbHVlOiBmdW5jdGlvbiBzZWVrKHBvc2l0aW9uKSB7XG4gICAgICB2YXIgdGltZSA9IHRoaXMuX19zeW5jKCk7XG4gICAgICB0aGlzLl9fcG9zaXRpb24gPSBwb3NpdGlvbjtcbiAgICAgIHRoaXMuc3luY1NwZWVkKHRpbWUsIHBvc2l0aW9uLCB0aGlzLl9fc3BlZWQsIHRydWUpO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ2N1cnJlbnRUaW1lJyxcbiAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgIHJldHVybiB0aGlzLl9fc2NoZWR1bGVyLmN1cnJlbnRUaW1lO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEdldCBjdXJyZW50IG1hc3RlciB0aW1lLlxuICAgICAqXG4gICAgICogQG5hbWUgYXVkaW9UaW1lXG4gICAgICogQHR5cGUge051bWJlcn1cbiAgICAgKiBAbWVtYmVyb2YgUGxheUNvbnRyb2xcbiAgICAgKiBAaW5zdGFuY2VcbiAgICAgKiBAcmVhZG9ubHlcbiAgICAgKi9cblxuICB9LCB7XG4gICAga2V5OiAnYXVkaW9UaW1lJyxcbiAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgIHJldHVybiB0aGlzLl9fc2NoZWR1bGVyLmF1ZGlvVGltZTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBHZXQgY3VycmVudCBtYXN0ZXIgcG9zaXRpb24uXG4gICAgICogVGhpcyBmdW5jdGlvbiB3aWxsIGJlIHJlcGxhY2VkIHdoZW4gdGhlIHBsYXktY29udHJvbCBpcyBhZGRlZCB0byBhIG1hc3Rlci5cbiAgICAgKlxuICAgICAqIEBuYW1lIGN1cnJlbnRQb3NpdGlvblxuICAgICAqIEB0eXBlIHtOdW1iZXJ9XG4gICAgICogQG1lbWJlcm9mIFBsYXlDb250cm9sXG4gICAgICogQGluc3RhbmNlXG4gICAgICogQHJlYWRvbmx5XG4gICAgICovXG5cbiAgfSwge1xuICAgIGtleTogJ2N1cnJlbnRQb3NpdGlvbicsXG4gICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICByZXR1cm4gdGhpcy5fX3Bvc2l0aW9uICsgKHRoaXMuX19zY2hlZHVsZXIuY3VycmVudFRpbWUgLSB0aGlzLl9fdGltZSkgKiB0aGlzLl9fc3BlZWQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUmV0dXJucyBpZiB0aGUgcGxheSBjb250cm9sIGlzIHJ1bm5pbmcuXG4gICAgICpcbiAgICAgKiBAbmFtZSBydW5uaW5nXG4gICAgICogQHR5cGUge0Jvb2xlYW59XG4gICAgICogQG1lbWJlcm9mIFBsYXlDb250cm9sXG4gICAgICogQGluc3RhbmNlXG4gICAgICogQHJlYWRvbmx5XG4gICAgICovXG5cbiAgfSwge1xuICAgIGtleTogJ3J1bm5pbmcnLFxuICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgcmV0dXJuICEodGhpcy5fX3NwZWVkID09PSAwKTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6ICdsb29wJyxcbiAgICBzZXQ6IGZ1bmN0aW9uIHNldChlbmFibGUpIHtcbiAgICAgIGlmIChlbmFibGUgJiYgdGhpcy5fX2xvb3BTdGFydCA+IC1JbmZpbml0eSAmJiB0aGlzLl9fbG9vcEVuZCA8IEluZmluaXR5KSB7XG4gICAgICAgIGlmICghdGhpcy5fX2xvb3BDb250cm9sKSB7XG4gICAgICAgICAgdGhpcy5fX2xvb3BDb250cm9sID0gbmV3IExvb3BDb250cm9sKHRoaXMpO1xuICAgICAgICAgIHRoaXMuX19zY2hlZHVsZXIuYWRkKHRoaXMuX19sb29wQ29udHJvbCwgSW5maW5pdHkpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHRoaXMuX19zcGVlZCAhPT0gMCkge1xuICAgICAgICAgIHZhciBwb3NpdGlvbiA9IHRoaXMuY3VycmVudFBvc2l0aW9uO1xuICAgICAgICAgIHZhciBsb3dlciA9IE1hdGgubWluKHRoaXMuX19sb29wU3RhcnQsIHRoaXMuX19sb29wRW5kKTtcbiAgICAgICAgICB2YXIgdXBwZXIgPSBNYXRoLm1heCh0aGlzLl9fbG9vcFN0YXJ0LCB0aGlzLl9fbG9vcEVuZCk7XG5cbiAgICAgICAgICBpZiAodGhpcy5fX3NwZWVkID4gMCAmJiBwb3NpdGlvbiA+IHVwcGVyKSB0aGlzLnNlZWsodXBwZXIpO2Vsc2UgaWYgKHRoaXMuX19zcGVlZCA8IDAgJiYgcG9zaXRpb24gPCBsb3dlcikgdGhpcy5zZWVrKGxvd2VyKTtlbHNlIHRoaXMuX19sb29wQ29udHJvbC5yZXNjaGVkdWxlKHRoaXMuX19zcGVlZCk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSBpZiAodGhpcy5fX2xvb3BDb250cm9sKSB7XG4gICAgICAgIHRoaXMuX19zY2hlZHVsZXIucmVtb3ZlKHRoaXMuX19sb29wQ29udHJvbCk7XG4gICAgICAgIHRoaXMuX19sb29wQ29udHJvbCA9IG51bGw7XG4gICAgICB9XG4gICAgfSxcbiAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgIHJldHVybiAhIXRoaXMuX19sb29wQ29udHJvbDtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6ICdsb29wU3RhcnQnLFxuICAgIHNldDogZnVuY3Rpb24gc2V0KGxvb3BTdGFydCkge1xuICAgICAgdGhpcy5zZXRMb29wQm91bmRhcmllcyhsb29wU3RhcnQsIHRoaXMuX19sb29wRW5kKTtcbiAgICB9LFxuICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgcmV0dXJuIHRoaXMuX19sb29wU3RhcnQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogU2V0cyBsb29wIGVuZCB2YWx1ZVxuICAgICAqXG4gICAgICogQHR5cGUge051bWJlcn1cbiAgICAgKiBAbmFtZSBsb29wRW5kXG4gICAgICogQG1lbWJlcm9mIFBsYXlDb250cm9sXG4gICAgICogQGluc3RhbmNlXG4gICAgICovXG5cbiAgfSwge1xuICAgIGtleTogJ2xvb3BFbmQnLFxuICAgIHNldDogZnVuY3Rpb24gc2V0KGxvb3BFbmQpIHtcbiAgICAgIHRoaXMuc2V0TG9vcEJvdW5kYXJpZXModGhpcy5fX2xvb3BTdGFydCwgbG9vcEVuZCk7XG4gICAgfSxcbiAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgIHJldHVybiB0aGlzLl9fbG9vcEVuZDtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6ICdzcGVlZCcsXG4gICAgc2V0OiBmdW5jdGlvbiBzZXQoc3BlZWQpIHtcbiAgICAgIHZhciB0aW1lID0gdGhpcy5fX3N5bmMoKTtcblxuICAgICAgaWYgKHNwZWVkID49IDApIHtcbiAgICAgICAgaWYgKHNwZWVkIDwgMC4wMSkgc3BlZWQgPSAwLjAxO2Vsc2UgaWYgKHNwZWVkID4gMTAwKSBzcGVlZCA9IDEwMDtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGlmIChzcGVlZCA8IC0xMDApIHNwZWVkID0gLTEwMDtlbHNlIGlmIChzcGVlZCA+IC0wLjAxKSBzcGVlZCA9IC0wLjAxO1xuICAgICAgfVxuXG4gICAgICB0aGlzLl9fcGxheWluZ1NwZWVkID0gc3BlZWQ7XG5cbiAgICAgIGlmICghdGhpcy5tYXN0ZXIgJiYgdGhpcy5fX3NwZWVkICE9PSAwKSB0aGlzLnN5bmNTcGVlZCh0aW1lLCB0aGlzLl9fcG9zaXRpb24sIHNwZWVkKTtcbiAgICB9LFxuICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgcmV0dXJuIHRoaXMuX19wbGF5aW5nU3BlZWQ7XG4gICAgfVxuICB9XSk7XG4gIHJldHVybiBQbGF5Q29udHJvbDtcbn0oX1RpbWVFbmdpbmU1LmRlZmF1bHQpO1xuXG5leHBvcnRzLmRlZmF1bHQgPSBQbGF5Q29udHJvbDtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtjaGFyc2V0PXV0Zi04O2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZ6SWpwYklsQnNZWGxEYjI1MGNtOXNMbXB6SWwwc0ltNWhiV1Z6SWpwYklrVlFVMGxNVDA0aUxDSk1iMjl3UTI5dWRISnZiQ0lzSW5Cc1lYbERiMjUwY205c0lpd2lYMTl3YkdGNVEyOXVkSEp2YkNJc0luTndaV1ZrSWl3aWJHOTNaWElpTENKSmJtWnBibWwwZVNJc0luVndjR1Z5SWl3aWRHbHRaU0lzSW5ONWJtTlRjR1ZsWkNJc0lsOWZaMlYwVkdsdFpVRjBVRzl6YVhScGIyNGlMQ0pOWVhSb0lpd2liV2x1SWl3aVgxOXNiMjl3VTNSaGNuUWlMQ0pmWDJ4dmIzQkZibVFpTENKdFlYZ2lMQ0p5WlhObGRGUnBiV1VpTENKd2IzTnBkR2x2YmlJc0lsUnBiV1ZGYm1kcGJtVWlMQ0pRYkdGNVEyOXVkSEp2Ykd4bFpDSXNJbVZ1WjJsdVpTSXNJbTFoYzNSbGNpSXNJbDlmWlc1bmFXNWxJaXdpYzJWbGF5SXNJbXhoYzNSVGNHVmxaQ0lzSW1OMWNuSmxiblJVYVcxbElpd2lZWFZrYVc5VWFXMWxJaXdpWTNWeWNtVnVkRkJ2YzJsMGFXOXVJaXdpVUd4aGVVTnZiblJ5YjJ4c1pXUlRjR1ZsWkVOdmJuUnliMnhzWldRaUxDSlFiR0Y1UTI5dWRISnZiR3hsWkZSeVlXNXpjRzl5ZEdWa0lpd2lYMTl6WTJobFpIVnNaWEpJYjI5cklpd2lVR3hoZVVOdmJuUnliMnhzWldSVFkyaGxaSFZzWlhKSWIyOXJJaXdpYm1WNGRGQnZjMmwwYVc5dUlpd2ljM2x1WTFCdmMybDBhVzl1SWl3aWNtVnpaWFJRYjNOcGRHbHZiaUlzSW5WdVpHVm1hVzVsWkNJc0lsOWZjM2x1WXlJc0lsOWZjRzl6YVhScGIyNGlMQ0pmWDNOd1pXVmtJaXdpWkdWemRISnZlU0lzSWxCc1lYbERiMjUwY205c2JHVmtVMk5vWldSMWJHVmtJaXdpWDE5elkyaGxaSFZzYVc1blVYVmxkV1VpTENKUWJHRjVRMjl1ZEhKdmJHeGxaRk5qYUdWa2RXeHBibWRSZFdWMVpTSXNJbDlmYm1WNGRGQnZjMmwwYVc5dUlpd2lYMTl6WTJobFpIVnNaWElpTENKaFpHUWlMQ0poWkhaaGJtTmxVRzl6YVhScGIyNGlMQ0p1WlhoMFZHbHRaU0lzSW5KbGJXOTJaU0lzSWxOamFHVmtkV3hwYm1kUmRXVjFaU0lzSWxCc1lYbERiMjUwY205c0lpd2ljMk5vWldSMWJHVnlJaXdpYjNCMGFXOXVjeUlzSWw5ZmNHeGhlVU52Ym5SeWIyeHNaV1FpTENKZlgyeHZiM0JEYjI1MGNtOXNJaXdpWDE5MGFXMWxJaXdpWDE5d2JHRjVhVzVuVTNCbFpXUWlMQ0pmWDNObGRFVnVaMmx1WlNJc0lrVnljbTl5SWl3aWFXMXdiR1Z0Wlc1MGMxTndaV1ZrUTI5dWRISnZiR3hsWkNJc0ltbHRjR3hsYldWdWRITlVjbUZ1YzNCdmNuUmxaQ0lzSW1sdGNHeGxiV1Z1ZEhOVFkyaGxaSFZzWldRaUxDSnViM2NpTENKZlgzSmxjMlYwUlc1bmFXNWxJaXdpYkc5dmNGTjBZWEowSWl3aWJHOXZjRVZ1WkNJc0lteHZiM0FpTENKaGNIQnNlVXh2YjNCQ2IzVnVaR0Z5YVdWeklpd2ljbVZ6WTJobFpIVnNaU0lzSW1WdVlXSnNaU0lzSW5ObGRFeHZiM0JDYjNWdVpHRnlhV1Z6SWwwc0ltMWhjSEJwYm1keklqb2lPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3UVVGQlFUczdPenRCUVVOQk96czdPenM3UVVGRlFTeEpRVUZOUVN4VlFVRlZMRWxCUVdoQ096dEpRVVZOUXl4WE96czdRVUZEU2l4MVFrRkJXVU1zVjBGQldpeEZRVUY1UWp0QlFVRkJPenRCUVVGQk96dEJRVWQyUWl4VlFVRkxReXhoUVVGTUxFZEJRWEZDUkN4WFFVRnlRanRCUVVOQkxGVkJRVXRGTEV0QlFVd3NSMEZCWVN4RFFVRmlPMEZCUTBFc1ZVRkJTME1zUzBGQlRDeEhRVUZoTEVOQlFVTkRMRkZCUVdRN1FVRkRRU3hWUVVGTFF5eExRVUZNTEVkQlFXRkVMRkZCUVdJN1FVRk9kVUk3UVVGUGVFSTdPMEZCUlVRN096czdPMmREUVVOWlJTeEpMRVZCUVUwN1FVRkRhRUlzVlVGQlRVNHNZMEZCWXl4TFFVRkxReXhoUVVGNlFqdEJRVU5CTEZWQlFVMURMRkZCUVZFc1MwRkJTMEVzUzBGQmJrSTdRVUZEUVN4VlFVRk5ReXhSUVVGUkxFdEJRVXRCTEV0QlFXNUNPMEZCUTBFc1ZVRkJUVVVzVVVGQlVTeExRVUZMUVN4TFFVRnVRanM3UVVGRlFTeFZRVUZKU0N4UlFVRlJMRU5CUVZvc1JVRkRSVWtzVVVGQlVWSXNUMEZCVWl4RFFVUkdMRXRCUjBWUkxGRkJRVkZTTEU5QlFWSTdPMEZCUlVZc1ZVRkJTVWtzVVVGQlVTeERRVUZhTEVWQlFXVTdRVUZEWWtZc2IwSkJRVmxQTEZOQlFWb3NRMEZCYzBKRUxFbEJRWFJDTEVWQlFUUkNTQ3hMUVVFMVFpeEZRVUZ0UTBRc1MwRkJia01zUlVGQk1FTXNTVUZCTVVNN1FVRkRRU3hsUVVGUFJpeFpRVUZaVVN4dFFrRkJXaXhEUVVGblEwZ3NTMEZCYUVNc1NVRkJlVU5RTEU5QlFXaEVPMEZCUTBRc1QwRklSQ3hOUVVkUExFbEJRVWxKTEZGQlFWRXNRMEZCV2l4RlFVRmxPMEZCUTNCQ1JpeHZRa0ZCV1U4c1UwRkJXaXhEUVVGelFrUXNTVUZCZEVJc1JVRkJORUpFTEV0QlFUVkNMRVZCUVcxRFNDeExRVUZ1UXl4RlFVRXdReXhKUVVFeFF6dEJRVU5CTEdWQlFVOUdMRmxCUVZsUkxHMUNRVUZhTEVOQlFXZERUQ3hMUVVGb1F5eEpRVUY1UTB3c1QwRkJhRVE3UVVGRFJEczdRVUZGUkN4aFFVRlBUU3hSUVVGUU8wRkJRMFE3T3pzclFrRkZWVVlzU3l4RlFVRlBPMEZCUTJoQ0xGVkJRVTFHTEdOQlFXTXNTMEZCUzBNc1lVRkJla0k3UVVGRFFTeFZRVUZOUlN4UlFVRlJUU3hMUVVGTFF5eEhRVUZNTEVOQlFWTldMRmxCUVZsWExGZEJRWEpDTEVWQlFXdERXQ3haUVVGWldTeFRRVUU1UXl4RFFVRmtPMEZCUTBFc1ZVRkJUVkFzVVVGQlVVa3NTMEZCUzBrc1IwRkJUQ3hEUVVGVFlpeFpRVUZaVnl4WFFVRnlRaXhGUVVGclExZ3NXVUZCV1Zrc1UwRkJPVU1zUTBGQlpEczdRVUZGUVN4WFFVRkxWaXhMUVVGTUxFZEJRV0ZCTEV0QlFXSTdRVUZEUVN4WFFVRkxReXhMUVVGTUxFZEJRV0ZCTEV0QlFXSTdRVUZEUVN4WFFVRkxSU3hMUVVGTUxFZEJRV0ZCTEV0QlFXSTdPMEZCUlVFc1ZVRkJTVVlzVlVGQlZVVXNTMEZCWkN4RlFVTkZTQ3hSUVVGUkxFTkJRVkk3TzBGQlJVWXNWVUZCU1VFc1VVRkJVU3hEUVVGYUxFVkJRMFVzUzBGQlMxa3NVMEZCVEN4RFFVRmxaQ3haUVVGWlVTeHRRa0ZCV2l4RFFVRm5RMGdzUzBGQmFFTXNTVUZCZVVOUUxFOUJRWGhFTEVWQlJFWXNTMEZGU3l4SlFVRkpTU3hSUVVGUkxFTkJRVm9zUlVGRFNDeExRVUZMV1N4VFFVRk1MRU5CUVdWa0xGbEJRVmxSTEcxQ1FVRmFMRU5CUVdkRFRDeExRVUZvUXl4SlFVRjVRMHdzVDBGQmVFUXNSVUZFUnl4TFFVZElMRXRCUVV0blFpeFRRVUZNTEVOQlFXVldMRkZCUVdZN1FVRkRTRHM3TzNkRFFVVnRRbGNzVVN4RlFVRlZZaXhMTEVWQlFVODdRVUZEYmtNc1ZVRkJUVU1zVVVGQlVTeExRVUZMUVN4TFFVRnVRanRCUVVOQkxGVkJRVTFGTEZGQlFWRXNTMEZCUzBFc1MwRkJia0k3TzBGQlJVRXNWVUZCU1Vnc1VVRkJVU3hEUVVGU0xFbEJRV0ZoTEZsQlFWbFdMRXRCUVRkQ0xFVkJRMFVzVDBGQlQwWXNVVUZCVVN4RFFVRkRXU3hYUVVGWFdpeExRVUZhTEV0QlFYTkNSU3hSUVVGUlJpeExRVUU1UWl4RFFVRm1MRU5CUkVZc1MwRkZTeXhKUVVGSlJDeFJRVUZSTEVOQlFWSXNTVUZCWVdFc1YwRkJWMW9zUzBGQk5VSXNSVUZEU0N4UFFVRlBSU3hSUVVGUkxFTkJRVU5CTEZGQlFWRlZMRkZCUVZRc1MwRkJjMEpXTEZGQlFWRkdMRXRCUVRsQ0xFTkJRV1k3TzBGQlJVWXNZVUZCVDFrc1VVRkJVRHRCUVVORU96czdSVUV2UkhWQ1F5eHZRanM3UVVGclJURkNPenM3U1VGRFRVTXNZenRCUVVOS0xEQkNRVUZaYWtJc1YwRkJXaXhGUVVGNVFtdENMRTFCUVhwQ0xFVkJRV2xETzBGQlFVRTdPMEZCUXk5Q0xGTkJRVXRxUWl4aFFVRk1MRWRCUVhGQ1JDeFhRVUZ5UWpzN1FVRkZRV3RDTEZkQlFVOURMRTFCUVZBc1IwRkJaMElzU1VGQmFFSTdRVUZEUVN4VFFVRkxReXhSUVVGTUxFZEJRV2RDUml4TlFVRm9RanRCUVVORU96czdPemhDUVVWVFdpeEpMRVZCUVUxVExGRXNSVUZCVldJc1N5eEZRVUZQYlVJc1NTeEZRVUZOUXl4VExFVkJRVmM3UVVGRGFFUXNWMEZCUzBZc1VVRkJUQ3hEUVVGallpeFRRVUZrTEVOQlFYZENSQ3hKUVVGNFFpeEZRVUU0UWxNc1VVRkJPVUlzUlVGQmQwTmlMRXRCUVhoRExFVkJRU3REYlVJc1NVRkJMME03UVVGRFJEczdPemhDUVdOVE8wRkJRMUlzVjBGQlMzQkNMR0ZCUVV3c1IwRkJjVUlzU1VGQmNrSTdPMEZCUlVFc1YwRkJTMjFDTEZGQlFVd3NRMEZCWTBRc1RVRkJaQ3hIUVVGMVFpeEpRVUYyUWp0QlFVTkJMRmRCUVV0RExGRkJRVXdzUjBGQlowSXNTVUZCYUVJN1FVRkRSRHM3TzNkQ1FXcENhVUk3UVVGRGFFSXNZVUZCVHl4TFFVRkxia0lzWVVGQlRDeERRVUZ0UW5OQ0xGZEJRVEZDTzBGQlEwUTdPenQzUWtGRlpUdEJRVU5rTEdGQlFVOHNTMEZCUzNSQ0xHRkJRVXdzUTBGQmJVSjFRaXhUUVVFeFFqdEJRVU5FT3pzN2QwSkJSWEZDTzBGQlEzQkNMR0ZCUVU4c1MwRkJTM1pDTEdGQlFVd3NRMEZCYlVKM1FpeGxRVUV4UWp0QlFVTkVPenM3T3p0QlFWVklPenM3U1VGRFRVTXNOa0k3T3p0QlFVTktMSGxEUVVGWk1VSXNWMEZCV2l4RlFVRjVRbXRDTEUxQlFYcENMRVZCUVdsRE8wRkJRVUU3UVVGQlFTd3JTMEZEZWtKc1FpeFhRVVI1UWl4RlFVTmFhMElzVFVGRVdUdEJRVVZvUXpzN08wVkJTSGxEUkN4ak96dEJRVTAxUXpzN08wbEJRMDFWTEhsQ096czdRVUZEU2l4eFEwRkJXVE5DTEZkQlFWb3NSVUZCZVVKclFpeE5RVUY2UWl4RlFVRnBRenRCUVVGQk96dEJRVUZCTERaTFFVTjZRbXhDTEZkQlJIbENMRVZCUTFwclFpeE5RVVJaT3p0QlFVY3ZRaXhYUVVGTFZTeGxRVUZNTEVkQlFYVkNMRWxCUVVsRExESkNRVUZLTEVOQlFXZEROMElzVjBGQmFFTXNSVUZCTmtOclFpeE5RVUUzUXl4RFFVRjJRanRCUVVnclFqdEJRVWxvUXpzN096czRRa0ZGVTFvc1NTeEZRVUZOVXl4UkxFVkJRVlZpTEVzc1JVRkJUMjFDTEVrc1JVRkJUVU1zVXl4RlFVRlhPMEZCUTJoRUxGVkJRVWx3UWl4VlFVRlZiMElzVTBGQlZpeEpRVUYxUWtRc1NVRkJNMElzUlVGQmFVTTdRVUZETDBJc1dVRkJTVk1zV1VGQlNqczdRVUZGUVR0QlFVTkJMRmxCUVVsVUxGRkJRVkZ1UWl4UlFVRlJiMElzVTBGQlVpeEhRVUZ2UWl4RFFVRm9ReXhGUVVGdFF6dEJRVU5xUXp0QlFVTkJVU3g1UWtGQlpTeExRVUZMVml4UlFVRk1MRU5CUVdOWExGbEJRV1FzUTBGQk1rSjZRaXhKUVVFelFpeEZRVUZwUTFNc1VVRkJha01zUlVGQk1rTmlMRXRCUVRORExFTkJRV1k3UVVGRFJDeFRRVWhFTEUxQlIwOHNTVUZCU1c5Q0xHTkJRV01zUTBGQmJFSXNSVUZCY1VJN1FVRkRNVUk3UVVGRFFWRXNlVUpCUVdVc1MwRkJTMVlzVVVGQlRDeERRVUZqVnl4WlFVRmtMRU5CUVRKQ2VrSXNTVUZCTTBJc1JVRkJhVU5UTEZGQlFXcERMRVZCUVRKRFlpeExRVUV6UXl4RFFVRm1PMEZCUTBRc1UwRklUU3hOUVVkQkxFbEJRVWxCTEZWQlFWVXNRMEZCWkN4RlFVRnBRanRCUVVOMFFqdEJRVU5CTEdWQlFVdHJRaXhSUVVGTUxFTkJRV05YTEZsQlFXUXNRMEZCTWtKNlFpeEpRVUV6UWl4RlFVRnBRMU1zVVVGQmFrTXNSVUZCTWtOaUxFdEJRVE5ETzBGQlEwRTBRaXg1UWtGQlpURkNMRkZCUVdZN08wRkJSVUU3UVVGRFFUdEJRVU5FTEZOQlVFMHNUVUZQUVN4SlFVRkpMRXRCUVV0blFpeFJRVUZNTEVOQlFXTmlMRk5CUVd4Q0xFVkJRVFpDTzBGQlEyeERPMEZCUTBFc1pVRkJTMkVzVVVGQlRDeERRVUZqWWl4VFFVRmtMRU5CUVhkQ1JDeEpRVUY0UWl4RlFVRTRRbE1zVVVGQk9VSXNSVUZCZDBOaUxFdEJRWGhETzBGQlEwUTdPMEZCUlVRc1lVRkJTekJDTEdWQlFVd3NRMEZCY1VKSkxHRkJRWEpDTEVOQlFXMURSaXhaUVVGdVF6dEJRVU5FTzBGQlEwWTdPenQzUTBGRmJVSmFMRTBzUlVGQk9FSTdRVUZCUVN4VlFVRjBRa2dzVVVGQmMwSXNkVVZCUVZoclFpeFRRVUZYT3p0QlFVTm9SQ3hWUVVGSmJFSXNZVUZCWVd0Q0xGTkJRV3BDTEVWQlFUUkNPMEZCUXpGQ0xGbEJRVWxxUXl4alFVRmpMRXRCUVV0RExHRkJRWFpDTzBGQlEwRXNXVUZCU1Vzc1QwRkJUMDRzV1VGQldXdERMRTFCUVZvc1JVRkJXRHM3UVVGRlFXNUNMRzFDUVVGWExFdEJRVXRMTEZGQlFVd3NRMEZCWTFjc1dVRkJaQ3hEUVVFeVFucENMRWxCUVROQ0xFVkJRV2xEVGl4WlFVRlpiVU1zVlVGQk4wTXNSVUZCZVVSdVF5eFpRVUZaYjBNc1QwRkJja1VzUTBGQldEdEJRVU5FT3p0QlFVVkVMRmRCUVV0U0xHVkJRVXdzUTBGQmNVSkpMR0ZCUVhKQ0xFTkJRVzFEYWtJc1VVRkJia003UVVGRFJEczdPemhDUVVWVE8wRkJRMUlzVjBGQlMyRXNaVUZCVEN4RFFVRnhRbE1zVDBGQmNrSTdRVUZEUVN4WFFVRkxWQ3hsUVVGTUxFZEJRWFZDTEVsQlFYWkNPenRCUVVWQk8wRkJRMFE3T3p0RlFXeEVjVU5ZTEdNN08wRkJjVVI0UXpzN08wbEJRMDF4UWl4MVFqczdPMEZCUTBvc2JVTkJRVmwwUXl4WFFVRmFMRVZCUVhsQ2EwSXNUVUZCZWtJc1JVRkJhVU03UVVGQlFUczdRVUZITDBJN1FVRklLMElzZVV0QlEzcENiRUlzVjBGRWVVSXNSVUZEV210Q0xFMUJSRms3TzBGQlNTOUNRU3hYUVVGUFF5eE5RVUZRTEVkQlFXZENMRWxCUVdoQ08wRkJRMEVzVjBGQlMyOUNMR2xDUVVGTUxFZEJRWGxDTEVsQlFVbERMRFpDUVVGS0xFTkJRV3REZUVNc1YwRkJiRU1zUlVGQkswTnJRaXhOUVVFdlF5eERRVUY2UWp0QlFVd3JRanRCUVUxb1F6czdPenM0UWtGRlUxb3NTU3hGUVVGTlV5eFJMRVZCUVZWaUxFc3NSVUZCVDIxQ0xFa3NSVUZCVFVNc1V5eEZRVUZYTzBGQlEyaEVMRlZCUVVsQkxHTkJRV01zUTBGQlpDeEpRVUZ0UW5CQ0xGVkJRVlVzUTBGQmFrTXNSVUZCYjBNN1FVRkRiRU1zWVVGQlMydENMRkZCUVV3c1EwRkJZMDRzVTBGQlpDeEhRVVJHTEV0QlJVc3NTVUZCU1ZFc1kwRkJZeXhEUVVGa0xFbEJRVzFDY0VJc1ZVRkJWU3hEUVVGcVF5eEZRVUZ2UXp0QlFVTjJReXhoUVVGTGEwSXNVVUZCVEN4RFFVRmpUaXhUUVVGa0xFTkJRWGRDVml4UlFVRjRRanRCUVVOSU96czdPRUpCUlZNN1FVRkRVaXhYUVVGTGJVTXNhVUpCUVV3c1EwRkJkVUpHTEU5QlFYWkNPMEZCUTBFN1FVRkRSRHM3TzBWQmJrSnRRM0JDTEdNN08wRkJjMEowUXpzN08wbEJRMDFaTERKQ096czdRVUZEU2l4MVEwRkJXVGRDTEZkQlFWb3NSVUZCZVVKclFpeE5RVUY2UWl4RlFVRnBRenRCUVVGQk96dEJRVUZCT3p0QlFVY3ZRaXhYUVVGTGFrSXNZVUZCVEN4SFFVRnhRa1FzVjBGQmNrSTdRVUZEUVN4WFFVRkxiMElzVVVGQlRDeEhRVUZuUWtZc1RVRkJhRUk3TzBGQlJVRXNWMEZCUzNWQ0xHTkJRVXdzUjBGQmMwSnlReXhSUVVGMFFqdEJRVU5CU2l4blFrRkJXVEJETEZkQlFWb3NRMEZCZDBKRExFZEJRWGhDTEZOQlFXdERka01zVVVGQmJFTTdRVUZRSzBJN1FVRlJhRU03T3pzN1owTkJSVmRGTEVrc1JVRkJUVHRCUVVOb1FpeFZRVUZKVGl4alFVRmpMRXRCUVV0RExHRkJRWFpDTzBGQlEwRXNWVUZCU1dsQ0xGTkJRVk1zUzBGQlMwVXNVVUZCYkVJN1FVRkRRU3hWUVVGSlRDeFhRVUZYTEV0QlFVc3dRaXhqUVVGd1FqdEJRVU5CTEZWQlFVbFlMR1ZCUVdWYUxFOUJRVTh3UWl4bFFVRlFMRU5CUVhWQ2RFTXNTVUZCZGtJc1JVRkJOa0pUTEZGQlFUZENMRVZCUVhWRFppeFpRVUZaYjBNc1QwRkJia1FzUTBGQmJrSTdRVUZEUVN4VlFVRkpVeXhYUVVGWE4wTXNXVUZCV1ZFc2JVSkJRVm9zUTBGQlowTnpRaXhaUVVGb1F5eERRVUZtT3p0QlFVVkJMRmRCUVV0WExHTkJRVXdzUjBGQmMwSllMRmxCUVhSQ08wRkJRMEVzWVVGQlQyVXNVVUZCVUR0QlFVTkVPenM3YjBOQll6WkRPMEZCUVVFc1ZVRkJhRU01UWl4UlFVRm5ReXgxUlVGQmNrSXNTMEZCU3pCQ0xHTkJRV2RDT3p0QlFVTTFReXhWUVVGSmJrTXNUMEZCVHl4TFFVRkxUQ3hoUVVGTUxFTkJRVzFDVHl4dFFrRkJia0lzUTBGQmRVTlBMRkZCUVhaRExFTkJRVmc3UVVGRFFTeFhRVUZMTUVJc1kwRkJUQ3hIUVVGelFqRkNMRkZCUVhSQ08wRkJRMEVzVjBGQlMwUXNVMEZCVEN4RFFVRmxVaXhKUVVGbU8wRkJRMFE3T3pzNFFrRkZVenRCUVVOU0xGZEJRVXRNTEdGQlFVd3NRMEZCYlVKNVF5eFhRVUZ1UWl4RFFVRXJRa2tzVFVGQkwwSXNRMEZCYzBNc1NVRkJkRU03UVVGRFFTeFhRVUZMTjBNc1lVRkJUQ3hIUVVGeFFpeEpRVUZ5UWp0QlFVTkJMRmRCUVV0dFFpeFJRVUZNTEVkQlFXZENMRWxCUVdoQ08wRkJRMFE3T3p0M1FrRjBRbWxDTzBGQlEyaENMR0ZCUVU4c1MwRkJTMjVDTEdGQlFVd3NRMEZCYlVKelFpeFhRVUV4UWp0QlFVTkVPenM3ZDBKQlJXVTdRVUZEWkN4aFFVRlBMRXRCUVV0MFFpeGhRVUZNTEVOQlFXMUNkVUlzVTBGQk1VSTdRVUZEUkRzN08zZENRVVZ4UWp0QlFVTndRaXhoUVVGUExFdEJRVXQyUWl4aFFVRk1MRU5CUVcxQ2QwSXNaVUZCTVVJN1FVRkRSRHM3TzBWQmFFTjFRMVFzYjBJN08wRkJLME14UXpzN08wbEJRMDEzUWl3MlFqczdPMEZCUTBvc2VVTkJRVmw0UXl4WFFVRmFMRVZCUVhsQ2EwSXNUVUZCZWtJc1JVRkJhVU03UVVGQlFUczdRVUZCUVRzN1FVRkZMMElzVjBGQlMycENMR0ZCUVV3c1IwRkJjVUpFTEZkQlFYSkNPMEZCUTBFc1YwRkJTMjlDTEZGQlFVd3NSMEZCWjBKR0xFMUJRV2hDT3p0QlFVVkJMRmRCUVV0NVFpeEhRVUZNTEVOQlFWTjZRaXhOUVVGVUxFVkJRV2xDWkN4UlFVRnFRanRCUVVOQlNpeG5Ra0ZCV1RCRExGZEJRVm9zUTBGQmQwSkRMRWRCUVhoQ0xGTkJRV3REZGtNc1VVRkJiRU03UVVGT0swSTdRVUZQYUVNN096czdPRUpCWTFNN1FVRkRVaXhYUVVGTFNDeGhRVUZNTEVOQlFXMUNlVU1zVjBGQmJrSXNRMEZCSzBKSkxFMUJRUzlDTEVOQlFYTkRMRWxCUVhSRE8wRkJRMEVzVjBGQlMwRXNUVUZCVEN4RFFVRlpMRXRCUVVzeFFpeFJRVUZxUWpzN1FVRkZRU3hYUVVGTGJrSXNZVUZCVEN4SFFVRnhRaXhKUVVGeVFqdEJRVU5CTEZkQlFVdHRRaXhSUVVGTUxFZEJRV2RDTEVsQlFXaENPMEZCUTBRN096dDNRa0ZzUW1sQ08wRkJRMmhDTEdGQlFVOHNTMEZCUzI1Q0xHRkJRVXdzUTBGQmJVSnpRaXhYUVVFeFFqdEJRVU5FT3pzN2QwSkJSV1U3UVVGRFpDeGhRVUZQTEV0QlFVdDBRaXhoUVVGTUxFTkJRVzFDZFVJc1UwRkJNVUk3UVVGRFJEczdPM2RDUVVWeFFqdEJRVU53UWl4aFFVRlBMRXRCUVV0MlFpeGhRVUZNTEVOQlFXMUNkMElzWlVGQk1VSTdRVUZEUkRzN08wVkJjRUo1UTNOQ0xIbENPenRCUVN0Q05VTTdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3p0SlFYTkNUVU1zVnpzN08wRkJRMG9zZFVKQlFWbERMRk5CUVZvc1JVRkJkVUl2UWl4TlFVRjJRaXhGUVVFMlF6dEJRVUZCTEZGQlFXUm5ReXhQUVVGakxIVkZRVUZLTEVWQlFVazdRVUZCUVRzN1FVRkJRVHM3UVVGSE0wTXNWMEZCUzFJc1YwRkJUQ3hIUVVGdFFrOHNVMEZCYmtJN08wRkJSVUVzVjBGQlMwVXNaMEpCUVV3c1IwRkJkMElzU1VGQmVFSTdRVUZEUVN4WFFVRkxReXhoUVVGTUxFZEJRWEZDTEVsQlFYSkNPMEZCUTBFc1YwRkJTM3BETEZkQlFVd3NSMEZCYlVJc1EwRkJia0k3UVVGRFFTeFhRVUZMUXl4VFFVRk1MRWRCUVdsQ0xFTkJRV3BDT3p0QlFVVkJPMEZCUTBFc1YwRkJTM2xETEUxQlFVd3NSMEZCWXl4RFFVRmtPMEZCUTBFc1YwRkJTMnhDTEZWQlFVd3NSMEZCYTBJc1EwRkJiRUk3UVVGRFFTeFhRVUZMUXl4UFFVRk1MRWRCUVdVc1EwRkJaanM3UVVGRlFUdEJRVU5CTEZkQlFVdHJRaXhqUVVGTUxFZEJRWE5DTEVOQlFYUkNPenRCUVVWQkxGRkJRVWx3UXl4TlFVRktMRVZCUTBVc1QwRkJTM0ZETEZkQlFVd3NRMEZCYVVKeVF5eE5RVUZxUWp0QlFXNUNlVU03UVVGdlFqVkRPenM3TzJkRFFVVlhRU3hOTEVWQlFWRTdRVUZEYkVJc1ZVRkJTVUVzVDBGQlQwTXNUVUZCV0N4RlFVTkZMRTFCUVUwc1NVRkJTWEZETEV0QlFVb3NRMEZCVlN3eVEwRkJWaXhEUVVGT096dEJRVVZHTEZWQlFVbDRReXh4UWtGQlYzbERMSGxDUVVGWUxFTkJRWEZEZGtNc1RVRkJja01zUTBGQlNpeEZRVU5GTEV0QlFVdHBReXhuUWtGQlRDeEhRVUYzUWl4SlFVRkpla0lzTmtKQlFVb3NRMEZCYTBNc1NVRkJiRU1zUlVGQmQwTlNMRTFCUVhoRExFTkJRWGhDTEVOQlJFWXNTMEZGU3l4SlFVRkpSaXh4UWtGQlZ6QkRMSEZDUVVGWUxFTkJRV2xEZUVNc1RVRkJha01zUTBGQlNpeEZRVU5JTEV0QlFVdHBReXhuUWtGQlRDeEhRVUYzUWl4SlFVRkplRUlzZVVKQlFVb3NRMEZCT0VJc1NVRkJPVUlzUlVGQmIwTlVMRTFCUVhCRExFTkJRWGhDTEVOQlJFY3NTMEZGUVN4SlFVRkpSaXh4UWtGQlZ6SkRMRzFDUVVGWUxFTkJRU3RDZWtNc1RVRkJMMElzUTBGQlNpeEZRVU5JTEV0QlFVdHBReXhuUWtGQlRDeEhRVUYzUWl4SlFVRkpZaXgxUWtGQlNpeERRVUUwUWl4SlFVRTFRaXhGUVVGclEzQkNMRTFCUVd4RExFTkJRWGhDTEVOQlJFY3NTMEZIU0N4TlFVRk5MRWxCUVVselF5eExRVUZLTEVOQlFWVXNkME5CUVZZc1EwRkJUanRCUVVOSU96czdiME5CUldVN1FVRkRaQ3hYUVVGTFRDeG5Ra0ZCVEN4RFFVRnpRbVFzVDBGQmRFSTdRVUZEUVN4WFFVRkxZeXhuUWtGQlRDeEhRVUYzUWl4SlFVRjRRanRCUVVORU96dEJRVVZFT3pzN096czdPenM3TzNkRFFVOXZRbkJETEZFc1JVRkJWVHRCUVVNMVFpeGhRVUZQTEV0QlFVdHpReXhOUVVGTUxFZEJRV01zUTBGQlEzUkRMRmRCUVZjc1MwRkJTMjlDTEZWQlFXcENMRWxCUVN0Q0xFdEJRVXRETEU5QlFYcEVPMEZCUTBRN08wRkJSVVE3T3pzN096czdPenM3ZDBOQlQyOUNPVUlzU1N4RlFVRk5PMEZCUTNoQ0xHRkJRVThzUzBGQlN6WkNMRlZCUVV3c1IwRkJhMElzUTBGQlF6ZENMRTlCUVU4c1MwRkJTeXRETEUxQlFXSXNTVUZCZFVJc1MwRkJTMnBDTEU5QlFYSkVPMEZCUTBRN096czJRa0ZGVVR0QlFVTlFMRlZCUVUxM1FpeE5RVUZOTEV0QlFVdHlReXhYUVVGcVFqdEJRVU5CTEZkQlFVdFpMRlZCUVV3c1NVRkJiVUlzUTBGQlEzbENMRTFCUVUwc1MwRkJTMUFzVFVGQldpeEpRVUZ6UWl4TFFVRkxha0lzVDBGQk9VTTdRVUZEUVN4WFFVRkxhVUlzVFVGQlRDeEhRVUZqVHl4SFFVRmtPenRCUVVWQkxHRkJRVTlCTEVkQlFWQTdRVUZEUkRzN1FVRkZSRHM3T3pzN096czdPenM3T3pCQ1FYRkViVUk3UVVGQlFTeFZRVUZtTVVNc1RVRkJaU3gxUlVGQlRpeEpRVUZOT3p0QlFVTnFRaXhWUVVGTldpeFBRVUZQTEV0QlFVczBRaXhOUVVGTUxFVkJRV0k3UVVGRFFTeFZRVUZOYUVNc1VVRkJVU3hMUVVGTGEwTXNUMEZCYmtJN08wRkJSVUVzVlVGQlNTeExRVUZMWlN4blFrRkJUQ3hMUVVFd1FpeEpRVUV4UWl4SlFVRnJReXhMUVVGTFFTeG5Ra0ZCVEN4RFFVRnpRaTlDTEZGQlFYUkNMRXRCUVcxRFJpeE5RVUY2UlN4RlFVRnBSanM3UVVGRkwwVXNZVUZCUzFnc1UwRkJUQ3hEUVVGbFJDeEpRVUZtTEVWQlFYRkNMRXRCUVVzMlFpeFZRVUV4UWl4RlFVRnpReXhEUVVGMFF6czdRVUZGUVN4WlFVRkpMRXRCUVV0blFpeG5Ra0ZCVkN4RlFVTkZMRXRCUVV0VkxHRkJRVXc3TzBGQlIwWXNXVUZCU1N4TFFVRkxWaXhuUWtGQlRDeExRVUV3UWl4SlFVRXhRaXhKUVVGclEycERMRmRCUVZjc1NVRkJha1FzUlVGQmRVUTdRVUZEY2tRc1pVRkJTM0ZETEZkQlFVd3NRMEZCYVVKeVF5eE5RVUZxUWpzN1FVRkZRU3hqUVVGSmFFSXNWVUZCVlN4RFFVRmtMRVZCUTBVc1MwRkJTMHNzVTBGQlRDeERRVUZsUkN4SlFVRm1MRVZCUVhGQ0xFdEJRVXMyUWl4VlFVRXhRaXhGUVVGelEycERMRXRCUVhSRE8wRkJRMGc3UVVGRFJqdEJRVU5HT3p0QlFVVkVPenM3T3pzN096czdPenM3TzBGQmNVTkJPenM3T3pzN2MwTkJUV3RDTkVRc1V5eEZRVUZYUXl4UExFVkJRVk03UVVGRGNFTXNWMEZCUzNCRUxGZEJRVXdzUjBGQmJVSnRSQ3hUUVVGdVFqdEJRVU5CTEZkQlFVdHNSQ3hUUVVGTUxFZEJRV2xDYlVRc1QwRkJha0k3TzBGQlJVRXNWMEZCUzBNc1NVRkJUQ3hIUVVGWkxFdEJRVXRCTEVsQlFXcENPMEZCUTBRN08wRkJSVVE3T3pzN096czdPenM3T3pzN1FVRm5RMEU3T0VKQlExVXhSQ3hKTEVWQlFVMVRMRkVzUlVGQlZXSXNTeXhGUVVGeFFqdEJRVUZCTEZWQlFXUnRRaXhKUVVGakxIVkZRVUZRTEV0QlFVODdPMEZCUXpkRExGVkJRVTFETEZsQlFWa3NTMEZCUzJNc1QwRkJka0k3TzBGQlJVRXNWVUZCU1d4RExGVkJRVlZ2UWl4VFFVRldMRWxCUVhWQ1JDeEpRVUV6UWl4RlFVRnBRenRCUVVNdlFpeFpRVUZKTEVOQlFVTkJMRkZCUVZGRExHTkJRV01zUTBGQmRrSXNTMEZCTmtJc1MwRkJTemhDTEdGQlFYUkRMRVZCUTBWeVF5eFhRVUZYTEV0QlFVdHhReXhoUVVGTUxFTkJRVzFDWVN4dFFrRkJia0lzUTBGQmRVTnNSQ3hSUVVGMlF5eEZRVUZwUkdJc1MwRkJha1FzUTBGQldEczdRVUZGUml4aFFVRkxiVVFzVFVGQlRDeEhRVUZqTDBNc1NVRkJaRHRCUVVOQkxHRkJRVXMyUWl4VlFVRk1MRWRCUVd0Q2NFSXNVVUZCYkVJN1FVRkRRU3hoUVVGTGNVSXNUMEZCVEN4SFFVRmxiRU1zUzBGQlpqczdRVUZGUVN4WlFVRkpMRXRCUVV0cFJDeG5Ra0ZCVkN4RlFVTkZMRXRCUVV0QkxHZENRVUZNTEVOQlFYTkNOVU1zVTBGQmRFSXNRMEZCWjBORUxFbEJRV2hETEVWQlFYTkRVeXhSUVVGMFF5eEZRVUZuUkdJc1MwRkJhRVFzUlVGQmRVUnRRaXhKUVVGMlJDeEZRVUUyUkVNc1UwRkJOMFE3TzBGQlJVWXNXVUZCU1N4TFFVRkxPRUlzWVVGQlZDeEZRVU5GTEV0QlFVdEJMR0ZCUVV3c1EwRkJiVUpqTEZWQlFXNUNMRU5CUVRoQ2FFVXNTMEZCT1VJN1FVRkRTRHRCUVVOR096dEJRVVZFT3pzN096czdORUpCUjFFN1FVRkRUaXhWUVVGTlNTeFBRVUZQTEV0QlFVczBRaXhOUVVGTUxFVkJRV0k3UVVGRFFTeFhRVUZMTTBJc1UwRkJUQ3hEUVVGbFJDeEpRVUZtTEVWQlFYRkNMRXRCUVVzMlFpeFZRVUV4UWl4RlFVRnpReXhMUVVGTGJVSXNZMEZCTTBNN1FVRkRSRHM3UVVGRlJEczdPenM3T3pSQ1FVZFJPMEZCUTA0c1ZVRkJUV2hFTEU5QlFVOHNTMEZCU3pSQ0xFMUJRVXdzUlVGQllqdEJRVU5CTEZkQlFVc3pRaXhUUVVGTUxFTkJRV1ZFTEVsQlFXWXNSVUZCY1VJc1MwRkJTelpDTEZWQlFURkNMRVZCUVhORExFTkJRWFJETzBGQlEwUTdPMEZCUlVRN096czdPenN5UWtGSFR6dEJRVU5NTEZWQlFVMDNRaXhQUVVGUExFdEJRVXMwUWl4TlFVRk1MRVZCUVdJN1FVRkRRU3hYUVVGTE0wSXNVMEZCVEN4RFFVRmxSQ3hKUVVGbUxFVkJRWEZDTEVOQlFYSkNMRVZCUVhkQ0xFTkJRWGhDTEVWQlFUSkNMRWxCUVROQ08wRkJRMFE3TzBGQlJVUTdPenM3T3pzN096czdPenM3TzBGQmEwTkJPenM3T3p0NVFrRkxTMU1zVVN4RlFVRlZPMEZCUTJJc1ZVRkJUVlFzVDBGQlR5eExRVUZMTkVJc1RVRkJUQ3hGUVVGaU8wRkJRMEVzVjBGQlMwTXNWVUZCVEN4SFFVRnJRbkJDTEZGQlFXeENPMEZCUTBFc1YwRkJTMUlzVTBGQlRDeERRVUZsUkN4SlFVRm1MRVZCUVhGQ1V5eFJRVUZ5UWl4RlFVRXJRaXhMUVVGTGNVSXNUMEZCY0VNc1JVRkJOa01zU1VGQk4wTTdRVUZEUkRzN08zZENRVEZQYVVJN1FVRkRhRUlzWVVGQlR5eExRVUZMVFN4WFFVRk1MRU5CUVdsQ2JrSXNWMEZCZUVJN1FVRkRSRHM3UVVGRlJEczdPenM3T3pzN096czdPM2RDUVZOblFqdEJRVU5rTEdGQlFVOHNTMEZCUzIxQ0xGZEJRVXdzUTBGQmFVSnNRaXhUUVVGNFFqdEJRVU5FT3p0QlFVVkVPenM3T3pzN096czdPenM3TzNkQ1FWVnpRanRCUVVOd1FpeGhRVUZQTEV0QlFVdFhMRlZCUVV3c1IwRkJhMElzUTBGQlF5eExRVUZMVHl4WFFVRk1MRU5CUVdsQ2JrSXNWMEZCYWtJc1IwRkJLMElzUzBGQlN6aENMRTFCUVhKRExFbEJRU3RETEV0QlFVdHFRaXhQUVVFM1JUdEJRVU5FT3p0QlFVVkVPenM3T3pzN096czdPenM3ZDBKQlUyTTdRVUZEV2l4aFFVRlBMRVZCUVVVc1MwRkJTMEVzVDBGQlRDeExRVUZwUWl4RFFVRnVRaXhEUVVGUU8wRkJRMFE3T3p0elFrRXJRbEVyUWl4TkxFVkJRVkU3UVVGRFppeFZRVUZKUVN4VlFVRlZMRXRCUVV0NFJDeFhRVUZNTEVkQlFXMUNMRU5CUVVOUUxGRkJRVGxDTEVsQlFUQkRMRXRCUVV0UkxGTkJRVXdzUjBGQmFVSlNMRkZCUVM5RUxFVkJRWGxGTzBGQlEzWkZMRmxCUVVrc1EwRkJReXhMUVVGTFowUXNZVUZCVml4RlFVRjVRanRCUVVOMlFpeGxRVUZMUVN4aFFVRk1MRWRCUVhGQ0xFbEJRVWx5UkN4WFFVRktMRU5CUVdkQ0xFbEJRV2hDTEVOQlFYSkNPMEZCUTBFc1pVRkJTekpETEZkQlFVd3NRMEZCYVVKRExFZEJRV3BDTEVOQlFYRkNMRXRCUVV0VExHRkJRVEZDTEVWQlFYbERhRVFzVVVGQmVrTTdRVUZEUkRzN1FVRkZSQ3haUVVGSkxFdEJRVXRuUXl4UFFVRk1MRXRCUVdsQ0xFTkJRWEpDTEVWQlFYZENPMEZCUTNSQ0xHTkJRVTF5UWl4WFFVRlhMRXRCUVV0VkxHVkJRWFJDTzBGQlEwRXNZMEZCVFhSQ0xGRkJRVkZOTEV0QlFVdERMRWRCUVV3c1EwRkJVeXhMUVVGTFF5eFhRVUZrTEVWQlFUSkNMRXRCUVV0RExGTkJRV2hETEVOQlFXUTdRVUZEUVN4alFVRk5VQ3hSUVVGUlNTeExRVUZMU1N4SFFVRk1MRU5CUVZNc1MwRkJTMFlzVjBGQlpDeEZRVUV5UWl4TFFVRkxReXhUUVVGb1F5eERRVUZrT3p0QlFVVkJMR05CUVVrc1MwRkJTM2RDTEU5QlFVd3NSMEZCWlN4RFFVRm1MRWxCUVc5Q2NrSXNWMEZCVjFZc1MwRkJia01zUlVGRFJTeExRVUZMWjBJc1NVRkJUQ3hEUVVGVmFFSXNTMEZCVml4RlFVUkdMRXRCUlVzc1NVRkJTU3hMUVVGTEswSXNUMEZCVEN4SFFVRmxMRU5CUVdZc1NVRkJiMEp5UWl4WFFVRlhXaXhMUVVGdVF5eEZRVU5JTEV0QlFVdHJRaXhKUVVGTUxFTkJRVlZzUWl4TFFVRldMRVZCUkVjc1MwRkhTQ3hMUVVGTGFVUXNZVUZCVEN4RFFVRnRRbU1zVlVGQmJrSXNRMEZCT0VJc1MwRkJTemxDTEU5QlFXNURPMEZCUTBnN1FVRkRSaXhQUVd4Q1JDeE5RV3RDVHl4SlFVRkpMRXRCUVV0blFpeGhRVUZVTEVWQlFYZENPMEZCUXpkQ0xHRkJRVXRXTEZkQlFVd3NRMEZCYVVKSkxFMUJRV3BDTEVOQlFYZENMRXRCUVV0TkxHRkJRVGRDTzBGQlEwRXNZVUZCUzBFc1lVRkJUQ3hIUVVGeFFpeEpRVUZ5UWp0QlFVTkVPMEZCUTBZc1N6dDNRa0ZGVlR0QlFVTlVMR0ZCUVZFc1EwRkJReXhEUVVGRExFdEJRVXRCTEdGQlFXWTdRVUZEUkRzN08zTkNRWFZDWVZVc1V5eEZRVUZYTzBGQlEzWkNMRmRCUVV0TkxHbENRVUZNTEVOQlFYVkNUaXhUUVVGMlFpeEZRVUZyUXl4TFFVRkxiRVFzVTBGQmRrTTdRVUZEUkN4TE8zZENRVVZsTzBGQlEyUXNZVUZCVHl4TFFVRkxSQ3hYUVVGYU8wRkJRMFE3TzBGQlJVUTdPenM3T3pzN096czdPM05DUVZGWmIwUXNUeXhGUVVGVE8wRkJRMjVDTEZkQlFVdExMR2xDUVVGTUxFTkJRWFZDTEV0QlFVdDZSQ3hYUVVFMVFpeEZRVUY1UTI5RUxFOUJRWHBETzBGQlEwUXNTenQzUWtGRllUdEJRVU5hTEdGQlFVOHNTMEZCUzI1RUxGTkJRVm83UVVGRFJEczdPM05DUVhWRVUxWXNTeXhGUVVGUE8wRkJRMllzVlVGQlRVa3NUMEZCVHl4TFFVRkxORUlzVFVGQlRDeEZRVUZpT3p0QlFVVkJMRlZCUVVsb1F5eFRRVUZUTEVOQlFXSXNSVUZCWjBJN1FVRkRaQ3haUVVGSlFTeFJRVUZSTEVsQlFWb3NSVUZEUlVFc1VVRkJVU3hKUVVGU0xFTkJSRVlzUzBGRlN5eEpRVUZKUVN4UlFVRlJMRWRCUVZvc1JVRkRTRUVzVVVGQlVTeEhRVUZTTzBGQlEwZ3NUMEZNUkN4TlFVdFBPMEZCUTB3c1dVRkJTVUVzVVVGQlVTeERRVUZETEVkQlFXSXNSVUZEUlVFc1VVRkJVU3hEUVVGRExFZEJRVlFzUTBGRVJpeExRVVZMTEVsQlFVbEJMRkZCUVZFc1EwRkJReXhKUVVGaUxFVkJRMGhCTEZGQlFWRXNRMEZCUXl4SlFVRlVPMEZCUTBnN08wRkJSVVFzVjBGQlMyOUVMR05CUVV3c1IwRkJjMEp3UkN4TFFVRjBRanM3UVVGRlFTeFZRVUZKTEVOQlFVTXNTMEZCUzJsQ0xFMUJRVTRzU1VGQlowSXNTMEZCUzJsQ0xFOUJRVXdzUzBGQmFVSXNRMEZCY2tNc1JVRkRSU3hMUVVGTE4wSXNVMEZCVEN4RFFVRmxSQ3hKUVVGbUxFVkJRWEZDTEV0QlFVczJRaXhWUVVFeFFpeEZRVUZ6UTJwRExFdEJRWFJETzBGQlEwZ3NTenQzUWtGRlZ6dEJRVU5XTEdGQlFVOHNTMEZCUzI5RUxHTkJRVm83UVVGRFJEczdPMFZCYUZSMVFuUkRMRzlDT3p0clFrRTRWRmhuUXl4WElpd2labWxzWlNJNklsQnNZWGxEYjI1MGNtOXNMbXB6SWl3aWMyOTFjbU5sYzBOdmJuUmxiblFpT2xzaWFXMXdiM0owSUZOamFHVmtkV3hwYm1kUmRXVjFaU0JtY205dElDY3VMaTlqYjNKbEwxTmphR1ZrZFd4cGJtZFJkV1YxWlNjN1hHNXBiWEJ2Y25RZ1ZHbHRaVVZ1WjJsdVpTQm1jbTl0SUNjdUxpOWpiM0psTDFScGJXVkZibWRwYm1Vbk8xeHVYRzVqYjI1emRDQkZVRk5KVEU5T0lEMGdNV1V0T0R0Y2JseHVZMnhoYzNNZ1RHOXZjRU52Ym5SeWIyd2daWGgwWlc1a2N5QlVhVzFsUlc1bmFXNWxJSHRjYmlBZ1kyOXVjM1J5ZFdOMGIzSW9jR3hoZVVOdmJuUnliMndwSUh0Y2JpQWdJQ0J6ZFhCbGNpZ3BPMXh1WEc0Z0lDQWdkR2hwY3k1ZlgzQnNZWGxEYjI1MGNtOXNJRDBnY0d4aGVVTnZiblJ5YjJ3N1hHNGdJQ0FnZEdocGN5NXpjR1ZsWkNBOUlERTdYRzRnSUNBZ2RHaHBjeTVzYjNkbGNpQTlJQzFKYm1acGJtbDBlVHRjYmlBZ0lDQjBhR2x6TG5Wd2NHVnlJRDBnU1c1bWFXNXBkSGs3WEc0Z0lIMWNibHh1SUNBdkx5QlVhVzFsUlc1bmFXNWxJRzFsZEdodlpDQW9jMk5vWldSMWJHVmtJR2x1ZEdWeVptRmpaU2xjYmlBZ1lXUjJZVzVqWlZScGJXVW9kR2x0WlNrZ2UxeHVJQ0FnSUdOdmJuTjBJSEJzWVhsRGIyNTBjbTlzSUQwZ2RHaHBjeTVmWDNCc1lYbERiMjUwY205c08xeHVJQ0FnSUdOdmJuTjBJSE53WldWa0lEMGdkR2hwY3k1emNHVmxaRHRjYmlBZ0lDQmpiMjV6ZENCc2IzZGxjaUE5SUhSb2FYTXViRzkzWlhJN1hHNGdJQ0FnWTI5dWMzUWdkWEJ3WlhJZ1BTQjBhR2x6TG5Wd2NHVnlPMXh1WEc0Z0lDQWdhV1lnS0hOd1pXVmtJRDRnTUNsY2JpQWdJQ0FnSUhScGJXVWdLejBnUlZCVFNVeFBUanRjYmlBZ0lDQmxiSE5sWEc0Z0lDQWdJQ0IwYVcxbElDMDlJRVZRVTBsTVQwNDdYRzVjYmlBZ0lDQnBaaUFvYzNCbFpXUWdQaUF3S1NCN1hHNGdJQ0FnSUNCd2JHRjVRMjl1ZEhKdmJDNXplVzVqVTNCbFpXUW9kR2x0WlN3Z2JHOTNaWElzSUhOd1pXVmtMQ0IwY25WbEtUdGNiaUFnSUNBZ0lISmxkSFZ5YmlCd2JHRjVRMjl1ZEhKdmJDNWZYMmRsZEZScGJXVkJkRkJ2YzJsMGFXOXVLSFZ3Y0dWeUtTQXRJRVZRVTBsTVQwNDdYRzRnSUNBZ2ZTQmxiSE5sSUdsbUlDaHpjR1ZsWkNBOElEQXBJSHRjYmlBZ0lDQWdJSEJzWVhsRGIyNTBjbTlzTG5ONWJtTlRjR1ZsWkNoMGFXMWxMQ0IxY0hCbGNpd2djM0JsWldRc0lIUnlkV1VwTzF4dUlDQWdJQ0FnY21WMGRYSnVJSEJzWVhsRGIyNTBjbTlzTGw5ZloyVjBWR2x0WlVGMFVHOXphWFJwYjI0b2JHOTNaWElwSUNzZ1JWQlRTVXhQVGp0Y2JpQWdJQ0I5WEc1Y2JpQWdJQ0J5WlhSMWNtNGdTVzVtYVc1cGRIazdYRzRnSUgxY2JseHVJQ0J5WlhOamFHVmtkV3hsS0hOd1pXVmtLU0I3WEc0Z0lDQWdZMjl1YzNRZ2NHeGhlVU52Ym5SeWIyd2dQU0IwYUdsekxsOWZjR3hoZVVOdmJuUnliMnc3WEc0Z0lDQWdZMjl1YzNRZ2JHOTNaWElnUFNCTllYUm9MbTFwYmlod2JHRjVRMjl1ZEhKdmJDNWZYMnh2YjNCVGRHRnlkQ3dnY0d4aGVVTnZiblJ5YjJ3dVgxOXNiMjl3Ulc1a0tUdGNiaUFnSUNCamIyNXpkQ0IxY0hCbGNpQTlJRTFoZEdndWJXRjRLSEJzWVhsRGIyNTBjbTlzTGw5ZmJHOXZjRk4wWVhKMExDQndiR0Y1UTI5dWRISnZiQzVmWDJ4dmIzQkZibVFwTzF4dVhHNGdJQ0FnZEdocGN5NXpjR1ZsWkNBOUlITndaV1ZrTzF4dUlDQWdJSFJvYVhNdWJHOTNaWElnUFNCc2IzZGxjanRjYmlBZ0lDQjBhR2x6TG5Wd2NHVnlJRDBnZFhCd1pYSTdYRzVjYmlBZ0lDQnBaaUFvYkc5M1pYSWdQVDA5SUhWd2NHVnlLVnh1SUNBZ0lDQWdjM0JsWldRZ1BTQXdPMXh1WEc0Z0lDQWdhV1lnS0hOd1pXVmtJRDRnTUNsY2JpQWdJQ0FnSUhSb2FYTXVjbVZ6WlhSVWFXMWxLSEJzWVhsRGIyNTBjbTlzTGw5ZloyVjBWR2x0WlVGMFVHOXphWFJwYjI0b2RYQndaWElwSUMwZ1JWQlRTVXhQVGlrN1hHNGdJQ0FnWld4elpTQnBaaUFvYzNCbFpXUWdQQ0F3S1Z4dUlDQWdJQ0FnZEdocGN5NXlaWE5sZEZScGJXVW9jR3hoZVVOdmJuUnliMnd1WDE5blpYUlVhVzFsUVhSUWIzTnBkR2x2Ymloc2IzZGxjaWtnS3lCRlVGTkpURTlPS1R0Y2JpQWdJQ0JsYkhObFhHNGdJQ0FnSUNCMGFHbHpMbkpsYzJWMFZHbHRaU2hKYm1acGJtbDBlU2s3WEc0Z0lIMWNibHh1SUNCaGNIQnNlVXh2YjNCQ2IzVnVaR0Z5YVdWektIQnZjMmwwYVc5dUxDQnpjR1ZsWkNrZ2UxeHVJQ0FnSUdOdmJuTjBJR3h2ZDJWeUlEMGdkR2hwY3k1c2IzZGxjanRjYmlBZ0lDQmpiMjV6ZENCMWNIQmxjaUE5SUhSb2FYTXVkWEJ3WlhJN1hHNWNiaUFnSUNCcFppQW9jM0JsWldRZ1BpQXdJQ1ltSUhCdmMybDBhVzl1SUQ0OUlIVndjR1Z5S1Z4dUlDQWdJQ0FnY21WMGRYSnVJR3h2ZDJWeUlDc2dLSEJ2YzJsMGFXOXVJQzBnYkc5M1pYSXBJQ1VnS0hWd2NHVnlJQzBnYkc5M1pYSXBPMXh1SUNBZ0lHVnNjMlVnYVdZZ0tITndaV1ZrSUR3Z01DQW1KaUJ3YjNOcGRHbHZiaUE4SUd4dmQyVnlLVnh1SUNBZ0lDQWdjbVYwZFhKdUlIVndjR1Z5SUMwZ0tIVndjR1Z5SUMwZ2NHOXphWFJwYjI0cElDVWdLSFZ3Y0dWeUlDMGdiRzkzWlhJcE8xeHVYRzRnSUNBZ2NtVjBkWEp1SUhCdmMybDBhVzl1TzF4dUlDQjlYRzU5WEc1Y2JpOHZJSEJzWVhrZ1kyOXVkSEp2Ykd4bFpDQmlZWE5sSUdOc1lYTnpYRzVqYkdGemN5QlFiR0Y1UTI5dWRISnZiR3hsWkNCN1hHNGdJR052Ym5OMGNuVmpkRzl5S0hCc1lYbERiMjUwY205c0xDQmxibWRwYm1VcElIdGNiaUFnSUNCMGFHbHpMbDlmY0d4aGVVTnZiblJ5YjJ3Z1BTQndiR0Y1UTI5dWRISnZiRHRjYmx4dUlDQWdJR1Z1WjJsdVpTNXRZWE4wWlhJZ1BTQjBhR2x6TzF4dUlDQWdJSFJvYVhNdVgxOWxibWRwYm1VZ1BTQmxibWRwYm1VN1hHNGdJSDFjYmx4dUlDQnplVzVqVTNCbFpXUW9kR2x0WlN3Z2NHOXphWFJwYjI0c0lITndaV1ZrTENCelpXVnJMQ0JzWVhOMFUzQmxaV1FwSUh0Y2JpQWdJQ0IwYUdsekxsOWZaVzVuYVc1bExuTjVibU5UY0dWbFpDaDBhVzFsTENCd2IzTnBkR2x2Yml3Z2MzQmxaV1FzSUhObFpXc3BPMXh1SUNCOVhHNWNiaUFnWjJWMElHTjFjbkpsYm5SVWFXMWxLQ2tnZTF4dUlDQWdJSEpsZEhWeWJpQjBhR2x6TGw5ZmNHeGhlVU52Ym5SeWIyd3VZM1Z5Y21WdWRGUnBiV1U3WEc0Z0lIMWNibHh1SUNCblpYUWdZWFZrYVc5VWFXMWxLQ2tnZTF4dUlDQWdJSEpsZEhWeWJpQjBhR2x6TGw5ZmNHeGhlVU52Ym5SeWIyd3VZWFZrYVc5VWFXMWxPMXh1SUNCOVhHNWNiaUFnWjJWMElHTjFjbkpsYm5SUWIzTnBkR2x2YmlncElIdGNiaUFnSUNCeVpYUjFjbTRnZEdocGN5NWZYM0JzWVhsRGIyNTBjbTlzTG1OMWNuSmxiblJRYjNOcGRHbHZianRjYmlBZ2ZWeHVYRzRnSUdSbGMzUnliM2tvS1NCN1hHNGdJQ0FnZEdocGN5NWZYM0JzWVhsRGIyNTBjbTlzSUQwZ2JuVnNiRHRjYmx4dUlDQWdJSFJvYVhNdVgxOWxibWRwYm1VdWJXRnpkR1Z5SUQwZ2JuVnNiRHRjYmlBZ0lDQjBhR2x6TGw5ZlpXNW5hVzVsSUQwZ2JuVnNiRHRjYmlBZ2ZWeHVmVnh1WEc0dkx5QndiR0Y1SUdOdmJuUnliMndnWm05eUlHVnVaMmx1WlhNZ2FXMXdiR1Z0Wlc1MGFXNW5JSFJvWlNBcWMzQmxaV1F0WTI5dWRISnZiR3hsWkNvZ2FXNTBaWEptWVdObFhHNWpiR0Z6Y3lCUWJHRjVRMjl1ZEhKdmJHeGxaRk53WldWa1EyOXVkSEp2Ykd4bFpDQmxlSFJsYm1SeklGQnNZWGxEYjI1MGNtOXNiR1ZrSUh0Y2JpQWdZMjl1YzNSeWRXTjBiM0lvY0d4aGVVTnZiblJ5YjJ3c0lHVnVaMmx1WlNrZ2UxeHVJQ0FnSUhOMWNHVnlLSEJzWVhsRGIyNTBjbTlzTENCbGJtZHBibVVwTzF4dUlDQjlYRzU5WEc1Y2JpOHZJSEJzWVhrZ1kyOXVkSEp2YkNCbWIzSWdaVzVuYVc1bGN5QnBiWEJzYldWdWRHbHVaeUIwYUdVZ0tuUnlZVzV6Y0c5eWRHVmtLaUJwYm5SbGNtWmhZMlZjYm1Oc1lYTnpJRkJzWVhsRGIyNTBjbTlzYkdWa1ZISmhibk53YjNKMFpXUWdaWGgwWlc1a2N5QlFiR0Y1UTI5dWRISnZiR3hsWkNCN1hHNGdJR052Ym5OMGNuVmpkRzl5S0hCc1lYbERiMjUwY205c0xDQmxibWRwYm1VcElIdGNiaUFnSUNCemRYQmxjaWh3YkdGNVEyOXVkSEp2YkN3Z1pXNW5hVzVsS1R0Y2JseHVJQ0FnSUhSb2FYTXVYMTl6WTJobFpIVnNaWEpJYjI5cklEMGdibVYzSUZCc1lYbERiMjUwY205c2JHVmtVMk5vWldSMWJHVnlTRzl2YXlod2JHRjVRMjl1ZEhKdmJDd2daVzVuYVc1bEtUdGNiaUFnZlZ4dVhHNGdJSE41Ym1OVGNHVmxaQ2gwYVcxbExDQndiM05wZEdsdmJpd2djM0JsWldRc0lITmxaV3NzSUd4aGMzUlRjR1ZsWkNrZ2UxeHVJQ0FnSUdsbUlDaHpjR1ZsWkNBaFBUMGdiR0Z6ZEZOd1pXVmtJSHg4SUhObFpXc3BJSHRjYmlBZ0lDQWdJSFpoY2lCdVpYaDBVRzl6YVhScGIyNDdYRzVjYmlBZ0lDQWdJQzh2SUhKbGMzbHVZeUIwY21GdWMzQnZjblJsWkNCbGJtZHBibVZ6WEc0Z0lDQWdJQ0JwWmlBb2MyVmxheUI4ZkNCemNHVmxaQ0FxSUd4aGMzUlRjR1ZsWkNBOElEQXBJSHRjYmlBZ0lDQWdJQ0FnTHk4Z2MyVmxheUJ2Y2lCeVpYWmxjbk5sSUdScGNtVmpkR2x2Ymx4dUlDQWdJQ0FnSUNCdVpYaDBVRzl6YVhScGIyNGdQU0IwYUdsekxsOWZaVzVuYVc1bExuTjVibU5RYjNOcGRHbHZiaWgwYVcxbExDQndiM05wZEdsdmJpd2djM0JsWldRcE8xeHVJQ0FnSUNBZ2ZTQmxiSE5sSUdsbUlDaHNZWE4wVTNCbFpXUWdQVDA5SURBcElIdGNiaUFnSUNBZ0lDQWdMeThnYzNSaGNuUmNiaUFnSUNBZ0lDQWdibVY0ZEZCdmMybDBhVzl1SUQwZ2RHaHBjeTVmWDJWdVoybHVaUzV6ZVc1alVHOXphWFJwYjI0b2RHbHRaU3dnY0c5emFYUnBiMjRzSUhOd1pXVmtLVHRjYmlBZ0lDQWdJSDBnWld4elpTQnBaaUFvYzNCbFpXUWdQVDA5SURBcElIdGNiaUFnSUNBZ0lDQWdMeThnYzNSdmNDQXZJSEJoZFhObFhHNGdJQ0FnSUNBZ0lIUm9hWE11WDE5bGJtZHBibVV1YzNsdVkxQnZjMmwwYVc5dUtIUnBiV1VzSUhCdmMybDBhVzl1TENCemNHVmxaQ2s3WEc0Z0lDQWdJQ0FnSUc1bGVIUlFiM05wZEdsdmJpQTlJRWx1Wm1sdWFYUjVPMXh1WEc0Z0lDQWdJQ0FnSUM4dklHbG1JQ2gwYUdsekxsOWZaVzVuYVc1bExuTjVibU5UY0dWbFpDbGNiaUFnSUNBZ0lDQWdMeThnSUNCMGFHbHpMbDlmWlc1bmFXNWxMbk41Ym1OVGNHVmxaQ2gwYVcxbExDQndiM05wZEdsdmJpd2dNQ2s3WEc0Z0lDQWdJQ0I5SUdWc2MyVWdhV1lnS0hSb2FYTXVYMTlsYm1kcGJtVXVjM2x1WTFOd1pXVmtLU0I3WEc0Z0lDQWdJQ0FnSUM4dklHTm9ZVzVuWlNCemNHVmxaQ0IzYVhSb2IzVjBJSEpsZG1WeWMybHVaeUJrYVhKbFkzUnBiMjVjYmlBZ0lDQWdJQ0FnZEdocGN5NWZYMlZ1WjJsdVpTNXplVzVqVTNCbFpXUW9kR2x0WlN3Z2NHOXphWFJwYjI0c0lITndaV1ZrS1R0Y2JpQWdJQ0FnSUgxY2JseHVJQ0FnSUNBZ2RHaHBjeTVmWDNOamFHVmtkV3hsY2todmIyc3VjbVZ6WlhSUWIzTnBkR2x2YmlodVpYaDBVRzl6YVhScGIyNHBPMXh1SUNBZ0lIMWNiaUFnZlZ4dVhHNGdJSEpsYzJWMFJXNW5hVzVsVUc5emFYUnBiMjRvWlc1bmFXNWxMQ0J3YjNOcGRHbHZiaUE5SUhWdVpHVm1hVzVsWkNrZ2UxeHVJQ0FnSUdsbUlDaHdiM05wZEdsdmJpQTlQVDBnZFc1a1pXWnBibVZrS1NCN1hHNGdJQ0FnSUNCMllYSWdjR3hoZVVOdmJuUnliMndnUFNCMGFHbHpMbDlmY0d4aGVVTnZiblJ5YjJ3N1hHNGdJQ0FnSUNCMllYSWdkR2x0WlNBOUlIQnNZWGxEYjI1MGNtOXNMbDlmYzNsdVl5Z3BPMXh1WEc0Z0lDQWdJQ0J3YjNOcGRHbHZiaUE5SUhSb2FYTXVYMTlsYm1kcGJtVXVjM2x1WTFCdmMybDBhVzl1S0hScGJXVXNJSEJzWVhsRGIyNTBjbTlzTGw5ZmNHOXphWFJwYjI0c0lIQnNZWGxEYjI1MGNtOXNMbDlmYzNCbFpXUXBPMXh1SUNBZ0lIMWNibHh1SUNBZ0lIUm9hWE11WDE5elkyaGxaSFZzWlhKSWIyOXJMbkpsYzJWMFVHOXphWFJwYjI0b2NHOXphWFJwYjI0cE8xeHVJQ0I5WEc1Y2JpQWdaR1Z6ZEhKdmVTZ3BJSHRjYmlBZ0lDQjBhR2x6TGw5ZmMyTm9aV1IxYkdWeVNHOXZheTVrWlhOMGNtOTVLQ2s3WEc0Z0lDQWdkR2hwY3k1ZlgzTmphR1ZrZFd4bGNraHZiMnNnUFNCdWRXeHNPMXh1WEc0Z0lDQWdjM1Z3WlhJdVpHVnpkSEp2ZVNncE8xeHVJQ0I5WEc1OVhHNWNiaTh2SUhCc1lYa2dZMjl1ZEhKdmJDQm1iM0lnZEdsdFpTQmxibWRwYm1WeklHbHRjR3hsYldWdWRHbHVaeUIwYUdVZ0tuTmphR1ZrZFd4bFpDb2dhVzUwWlhKbVlXTmxYRzVqYkdGemN5QlFiR0Y1UTI5dWRISnZiR3hsWkZOamFHVmtkV3hsWkNCbGVIUmxibVJ6SUZCc1lYbERiMjUwY205c2JHVmtJSHRjYmlBZ1kyOXVjM1J5ZFdOMGIzSW9jR3hoZVVOdmJuUnliMndzSUdWdVoybHVaU2tnZTF4dUlDQWdJSE4xY0dWeUtIQnNZWGxEYjI1MGNtOXNMQ0JsYm1kcGJtVXBPMXh1WEc0Z0lDQWdMeThnYzJOb1pXUjFiR2x1WnlCeGRXVjFaU0JpWldOdmJXVnpJRzFoYzNSbGNpQnZaaUJsYm1kcGJtVmNiaUFnSUNCbGJtZHBibVV1YldGemRHVnlJRDBnYm5Wc2JEdGNiaUFnSUNCMGFHbHpMbDlmYzJOb1pXUjFiR2x1WjFGMVpYVmxJRDBnYm1WM0lGQnNZWGxEYjI1MGNtOXNiR1ZrVTJOb1pXUjFiR2x1WjFGMVpYVmxLSEJzWVhsRGIyNTBjbTlzTENCbGJtZHBibVVwTzF4dUlDQjlYRzVjYmlBZ2MzbHVZMU53WldWa0tIUnBiV1VzSUhCdmMybDBhVzl1TENCemNHVmxaQ3dnYzJWbGF5d2diR0Z6ZEZOd1pXVmtLU0I3WEc0Z0lDQWdhV1lnS0d4aGMzUlRjR1ZsWkNBOVBUMGdNQ0FtSmlCemNHVmxaQ0FoUFQwZ01Da2dMeThnYzNSaGNuUWdiM0lnYzJWbGExeHVJQ0FnSUNBZ2RHaHBjeTVmWDJWdVoybHVaUzV5WlhObGRGUnBiV1VvS1R0Y2JpQWdJQ0JsYkhObElHbG1JQ2hzWVhOMFUzQmxaV1FnSVQwOUlEQWdKaVlnYzNCbFpXUWdQVDA5SURBcElDOHZJSE4wYjNCY2JpQWdJQ0FnSUhSb2FYTXVYMTlsYm1kcGJtVXVjbVZ6WlhSVWFXMWxLRWx1Wm1sdWFYUjVLVHRjYmlBZ2ZWeHVYRzRnSUdSbGMzUnliM2tvS1NCN1hHNGdJQ0FnZEdocGN5NWZYM05qYUdWa2RXeHBibWRSZFdWMVpTNWtaWE4wY205NUtDazdYRzRnSUNBZ2MzVndaWEl1WkdWemRISnZlU2dwTzF4dUlDQjlYRzU5WEc1Y2JpOHZJSFJ5WVc1emJHRjBaWE1nZEhKaGJuTndiM0owWldRZ1pXNW5hVzVsSUdGa2RtRnVZMlZRYjNOcGRHbHZiaUJwYm5SdklHZHNiMkpoYkNCelkyaGxaSFZzWlhJZ2RHbHRaWE5jYm1Oc1lYTnpJRkJzWVhsRGIyNTBjbTlzYkdWa1UyTm9aV1IxYkdWeVNHOXZheUJsZUhSbGJtUnpJRlJwYldWRmJtZHBibVVnZTF4dUlDQmpiMjV6ZEhKMVkzUnZjaWh3YkdGNVEyOXVkSEp2YkN3Z1pXNW5hVzVsS1NCN1hHNGdJQ0FnYzNWd1pYSW9LVHRjYmx4dUlDQWdJSFJvYVhNdVgxOXdiR0Y1UTI5dWRISnZiQ0E5SUhCc1lYbERiMjUwY205c08xeHVJQ0FnSUhSb2FYTXVYMTlsYm1kcGJtVWdQU0JsYm1kcGJtVTdYRzVjYmlBZ0lDQjBhR2x6TGw5ZmJtVjRkRkJ2YzJsMGFXOXVJRDBnU1c1bWFXNXBkSGs3WEc0Z0lDQWdjR3hoZVVOdmJuUnliMnd1WDE5elkyaGxaSFZzWlhJdVlXUmtLSFJvYVhNc0lFbHVabWx1YVhSNUtUdGNiaUFnZlZ4dVhHNGdJR0ZrZG1GdVkyVlVhVzFsS0hScGJXVXBJSHRjYmlBZ0lDQjJZWElnY0d4aGVVTnZiblJ5YjJ3Z1BTQjBhR2x6TGw5ZmNHeGhlVU52Ym5SeWIydzdYRzRnSUNBZ2RtRnlJR1Z1WjJsdVpTQTlJSFJvYVhNdVgxOWxibWRwYm1VN1hHNGdJQ0FnZG1GeUlIQnZjMmwwYVc5dUlEMGdkR2hwY3k1ZlgyNWxlSFJRYjNOcGRHbHZianRjYmlBZ0lDQjJZWElnYm1WNGRGQnZjMmwwYVc5dUlEMGdaVzVuYVc1bExtRmtkbUZ1WTJWUWIzTnBkR2x2YmloMGFXMWxMQ0J3YjNOcGRHbHZiaXdnY0d4aGVVTnZiblJ5YjJ3dVgxOXpjR1ZsWkNrN1hHNGdJQ0FnZG1GeUlHNWxlSFJVYVcxbElEMGdjR3hoZVVOdmJuUnliMnd1WDE5blpYUlVhVzFsUVhSUWIzTnBkR2x2YmlodVpYaDBVRzl6YVhScGIyNHBPMXh1WEc0Z0lDQWdkR2hwY3k1ZlgyNWxlSFJRYjNOcGRHbHZiaUE5SUc1bGVIUlFiM05wZEdsdmJqdGNiaUFnSUNCeVpYUjFjbTRnYm1WNGRGUnBiV1U3WEc0Z0lIMWNibHh1SUNCblpYUWdZM1Z5Y21WdWRGUnBiV1VvS1NCN1hHNGdJQ0FnY21WMGRYSnVJSFJvYVhNdVgxOXdiR0Y1UTI5dWRISnZiQzVqZFhKeVpXNTBWR2x0WlR0Y2JpQWdmVnh1WEc0Z0lHZGxkQ0JoZFdScGIxUnBiV1VvS1NCN1hHNGdJQ0FnY21WMGRYSnVJSFJvYVhNdVgxOXdiR0Y1UTI5dWRISnZiQzVoZFdScGIxUnBiV1U3WEc0Z0lIMWNibHh1SUNCblpYUWdZM1Z5Y21WdWRGQnZjMmwwYVc5dUtDa2dlMXh1SUNBZ0lISmxkSFZ5YmlCMGFHbHpMbDlmY0d4aGVVTnZiblJ5YjJ3dVkzVnljbVZ1ZEZCdmMybDBhVzl1TzF4dUlDQjlYRzVjYmlBZ2NtVnpaWFJRYjNOcGRHbHZiaWh3YjNOcGRHbHZiaUE5SUhSb2FYTXVYMTl1WlhoMFVHOXphWFJwYjI0cElIdGNiaUFnSUNCMllYSWdkR2x0WlNBOUlIUm9hWE11WDE5d2JHRjVRMjl1ZEhKdmJDNWZYMmRsZEZScGJXVkJkRkJ2YzJsMGFXOXVLSEJ2YzJsMGFXOXVLVHRjYmlBZ0lDQjBhR2x6TGw5ZmJtVjRkRkJ2YzJsMGFXOXVJRDBnY0c5emFYUnBiMjQ3WEc0Z0lDQWdkR2hwY3k1eVpYTmxkRlJwYldVb2RHbHRaU2s3WEc0Z0lIMWNibHh1SUNCa1pYTjBjbTk1S0NrZ2UxeHVJQ0FnSUhSb2FYTXVYMTl3YkdGNVEyOXVkSEp2YkM1ZlgzTmphR1ZrZFd4bGNpNXlaVzF2ZG1Vb2RHaHBjeWs3WEc0Z0lDQWdkR2hwY3k1ZlgzQnNZWGxEYjI1MGNtOXNJRDBnYm5Wc2JEdGNiaUFnSUNCMGFHbHpMbDlmWlc1bmFXNWxJRDBnYm5Wc2JEdGNiaUFnZlZ4dWZWeHVYRzR2THlCcGJuUmxjbTVoYkNCelkyaGxaSFZzYVc1bklIRjFaWFZsSUhSb1lYUWdjbVYwZFhKdWN5QjBhR1VnWTNWeWNtVnVkQ0J3YjNOcGRHbHZiaUFvWVc1a0lIUnBiV1VwSUc5bUlIUm9aU0J3YkdGNUlHTnZiblJ5YjJ4Y2JtTnNZWE56SUZCc1lYbERiMjUwY205c2JHVmtVMk5vWldSMWJHbHVaMUYxWlhWbElHVjRkR1Z1WkhNZ1UyTm9aV1IxYkdsdVoxRjFaWFZsSUh0Y2JpQWdZMjl1YzNSeWRXTjBiM0lvY0d4aGVVTnZiblJ5YjJ3c0lHVnVaMmx1WlNrZ2UxeHVJQ0FnSUhOMWNHVnlLQ2s3WEc0Z0lDQWdkR2hwY3k1ZlgzQnNZWGxEYjI1MGNtOXNJRDBnY0d4aGVVTnZiblJ5YjJ3N1hHNGdJQ0FnZEdocGN5NWZYMlZ1WjJsdVpTQTlJR1Z1WjJsdVpUdGNibHh1SUNBZ0lIUm9hWE11WVdSa0tHVnVaMmx1WlN3Z1NXNW1hVzVwZEhrcE8xeHVJQ0FnSUhCc1lYbERiMjUwY205c0xsOWZjMk5vWldSMWJHVnlMbUZrWkNoMGFHbHpMQ0JKYm1acGJtbDBlU2s3WEc0Z0lIMWNibHh1SUNCblpYUWdZM1Z5Y21WdWRGUnBiV1VvS1NCN1hHNGdJQ0FnY21WMGRYSnVJSFJvYVhNdVgxOXdiR0Y1UTI5dWRISnZiQzVqZFhKeVpXNTBWR2x0WlR0Y2JpQWdmVnh1WEc0Z0lHZGxkQ0JoZFdScGIxUnBiV1VvS1NCN1hHNGdJQ0FnY21WMGRYSnVJSFJvYVhNdVgxOXdiR0Y1UTI5dWRISnZiQzVoZFdScGIxUnBiV1U3WEc0Z0lIMWNibHh1SUNCblpYUWdZM1Z5Y21WdWRGQnZjMmwwYVc5dUtDa2dlMXh1SUNBZ0lISmxkSFZ5YmlCMGFHbHpMbDlmY0d4aGVVTnZiblJ5YjJ3dVkzVnljbVZ1ZEZCdmMybDBhVzl1TzF4dUlDQjlYRzVjYmlBZ1pHVnpkSEp2ZVNncElIdGNiaUFnSUNCMGFHbHpMbDlmY0d4aGVVTnZiblJ5YjJ3dVgxOXpZMmhsWkhWc1pYSXVjbVZ0YjNabEtIUm9hWE1wTzF4dUlDQWdJSFJvYVhNdWNtVnRiM1psS0hSb2FYTXVYMTlsYm1kcGJtVXBPMXh1WEc0Z0lDQWdkR2hwY3k1ZlgzQnNZWGxEYjI1MGNtOXNJRDBnYm5Wc2JEdGNiaUFnSUNCMGFHbHpMbDlmWlc1bmFXNWxJRDBnYm5Wc2JEdGNiaUFnZlZ4dWZWeHVYRzR2S2lwY2JpQXFJRVY0ZEdWdVpITWdWR2x0WlNCRmJtZHBibVVnZEc4Z2NISnZkbWxrWlNCd2JHRjVZbUZqYXlCamIyNTBjbTlzSUc5bUlHRWdWR2x0WlNCRmJtZHBibVVnYVc1emRHRnVZMlV1WEc0Z0tseHVJQ29nVzJWNFlXMXdiR1ZkZTBCc2FXNXJJR2gwZEhCek9pOHZjbUYzWjJsMExtTnZiUzkzWVhabGMycHpMM2RoZG1WekxXMWhjM1JsY25NdmJXRnpkR1Z5TDJWNFlXMXdiR1Z6TDNSeVlXNXpjRzl5ZEM5cGJtUmxlQzVvZEcxc2ZWeHVJQ3BjYmlBcUlFQmxlSFJsYm1SeklGUnBiV1ZGYm1kcGJtVmNiaUFxSUVCd1lYSmhiU0I3VDJKcVpXTjBmU0J6WTJobFpIVnNaWElnTFNCcGJuTjBZVzVqWlNCdlppQlRZMmhsWkhWc1pYSmNiaUFxSUVCd1lYSmhiU0I3VkdsdFpVVnVaMmx1WlgwZ1pXNW5hVzVsSUMwZ1pXNW5hVzVsSUhSdklHTnZiblJ5YjJ4Y2JpQXFYRzRnS2lCQVpYaGhiWEJzWlZ4dUlDb2dhVzF3YjNKMElDb2dZWE1nYldGemRHVnljeUJtY205dElDZDNZWFpsY3kxdFlYTjBaWEp6Snp0Y2JpQXFYRzRnS2lCamIyNXpkQ0JuWlhSVWFXMWxSblZ1WTNScGIyNGdQU0FvS1NBOVBpQjdYRzRnS2lBZ0lHTnZibk4wSUc1dmR5QTlJSEJ5YjJObGMzTXVhSEowYVcxbEtDazdYRzRnS2lBZ0lISmxkSFZ5YmlCdWIzZGJNRjBnS3lCdWIzZGJNVjBnS2lBeFpTMDVPMXh1SUNvZ2ZWeHVJQ29nWTI5dWMzUWdjMk5vWldSMWJHVnlJRDBnYm1WM0lHMWhjM1JsY25NdVUyTm9aV1IxYkdWeUtHZGxkRlJwYldWR2RXNWpkR2x2YmlrN1hHNGdLaUJqYjI1emRDQndiR0Y1WlhKRmJtZHBibVVnUFNCdVpYY2dUWGxVYVcxbFJXNW5hVzVsS0NrN1hHNGdLaUJqYjI1emRDQndiR0Y1UTI5dWRISnZiQ0E5SUc1bGR5QnRZWE4wWlhKekxsQnNZWGxEYjI1MGNtOXNLSE5qYUdWa2RXeGxjaXdnY0d4aGVXVnlSVzVuYVc1bEtUdGNiaUFxWEc0Z0tpQndiR0Y1UTI5dWRISnZiQzV6ZEdGeWRDZ3BPMXh1SUNvdlhHNWpiR0Z6Y3lCUWJHRjVRMjl1ZEhKdmJDQmxlSFJsYm1SeklGUnBiV1ZGYm1kcGJtVWdlMXh1SUNCamIyNXpkSEoxWTNSdmNpaHpZMmhsWkhWc1pYSXNJR1Z1WjJsdVpTd2diM0IwYVc5dWN5QTlJSHQ5S1NCN1hHNGdJQ0FnYzNWd1pYSW9LVHRjYmx4dUlDQWdJSFJvYVhNdVgxOXpZMmhsWkhWc1pYSWdQU0J6WTJobFpIVnNaWEk3WEc1Y2JpQWdJQ0IwYUdsekxsOWZjR3hoZVVOdmJuUnliMnhzWldRZ1BTQnVkV3hzTzF4dUlDQWdJSFJvYVhNdVgxOXNiMjl3UTI5dWRISnZiQ0E5SUc1MWJHdzdYRzRnSUNBZ2RHaHBjeTVmWDJ4dmIzQlRkR0Z5ZENBOUlEQTdYRzRnSUNBZ2RHaHBjeTVmWDJ4dmIzQkZibVFnUFNBeE8xeHVYRzRnSUNBZ0x5OGdjM2x1WTJoeWIyNXBlbVZrSUhScFpTd2djRzl6YVhScGIyNHNJR0Z1WkNCemNHVmxaRnh1SUNBZ0lIUm9hWE11WDE5MGFXMWxJRDBnTUR0Y2JpQWdJQ0IwYUdsekxsOWZjRzl6YVhScGIyNGdQU0F3TzF4dUlDQWdJSFJvYVhNdVgxOXpjR1ZsWkNBOUlEQTdYRzVjYmlBZ0lDQXZMeUJ1YjI0dGVtVnlieUJjSW5WelpYSmNJaUJ6Y0dWbFpGeHVJQ0FnSUhSb2FYTXVYMTl3YkdGNWFXNW5VM0JsWldRZ1BTQXhPMXh1WEc0Z0lDQWdhV1lnS0dWdVoybHVaU2xjYmlBZ0lDQWdJSFJvYVhNdVgxOXpaWFJGYm1kcGJtVW9aVzVuYVc1bEtUdGNiaUFnZlZ4dVhHNGdJRjlmYzJWMFJXNW5hVzVsS0dWdVoybHVaU2tnZTF4dUlDQWdJR2xtSUNobGJtZHBibVV1YldGemRHVnlLVnh1SUNBZ0lDQWdkR2h5YjNjZ2JtVjNJRVZ5Y205eUtGd2liMkpxWldOMElHaGhjeUJoYkhKbFlXUjVJR0psWlc0Z1lXUmtaV1FnZEc4Z1lTQnRZWE4wWlhKY0lpazdYRzVjYmlBZ0lDQnBaaUFvVkdsdFpVVnVaMmx1WlM1cGJYQnNaVzFsYm5SelUzQmxaV1JEYjI1MGNtOXNiR1ZrS0dWdVoybHVaU2twWEc0Z0lDQWdJQ0IwYUdsekxsOWZjR3hoZVVOdmJuUnliMnhzWldRZ1BTQnVaWGNnVUd4aGVVTnZiblJ5YjJ4c1pXUlRjR1ZsWkVOdmJuUnliMnhzWldRb2RHaHBjeXdnWlc1bmFXNWxLVHRjYmlBZ0lDQmxiSE5sSUdsbUlDaFVhVzFsUlc1bmFXNWxMbWx0Y0d4bGJXVnVkSE5VY21GdWMzQnZjblJsWkNobGJtZHBibVVwS1Z4dUlDQWdJQ0FnZEdocGN5NWZYM0JzWVhsRGIyNTBjbTlzYkdWa0lEMGdibVYzSUZCc1lYbERiMjUwY205c2JHVmtWSEpoYm5Od2IzSjBaV1FvZEdocGN5d2daVzVuYVc1bEtUdGNiaUFnSUNCbGJITmxJR2xtSUNoVWFXMWxSVzVuYVc1bExtbHRjR3hsYldWdWRITlRZMmhsWkhWc1pXUW9aVzVuYVc1bEtTbGNiaUFnSUNBZ0lIUm9hWE11WDE5d2JHRjVRMjl1ZEhKdmJHeGxaQ0E5SUc1bGR5QlFiR0Y1UTI5dWRISnZiR3hsWkZOamFHVmtkV3hsWkNoMGFHbHpMQ0JsYm1kcGJtVXBPMXh1SUNBZ0lHVnNjMlZjYmlBZ0lDQWdJSFJvY205M0lHNWxkeUJGY25KdmNpaGNJbTlpYW1WamRDQmpZVzV1YjNRZ1ltVWdZV1JrWldRZ2RHOGdjR3hoZVNCamIyNTBjbTlzWENJcE8xeHVJQ0I5WEc1Y2JpQWdYMTl5WlhObGRFVnVaMmx1WlNncElIdGNiaUFnSUNCMGFHbHpMbDlmY0d4aGVVTnZiblJ5YjJ4c1pXUXVaR1Z6ZEhKdmVTZ3BPMXh1SUNBZ0lIUm9hWE11WDE5d2JHRjVRMjl1ZEhKdmJHeGxaQ0E5SUc1MWJHdzdYRzRnSUgxY2JseHVJQ0F2S2lwY2JpQWdJQ29nUTJGc1kzVnNZWFJsTDJWNGRISmhjRzlzWVhSbElIQnNZWGxwYm1jZ2RHbHRaU0JtYjNJZ1oybDJaVzRnY0c5emFYUnBiMjVjYmlBZ0lDcGNiaUFnSUNvZ1FIQmhjbUZ0SUh0T2RXMWlaWEo5SUhCdmMybDBhVzl1SUhCdmMybDBhVzl1WEc0Z0lDQXFJRUJ5WlhSMWNtNGdlMDUxYldKbGNuMGdaWGgwY21Gd2IyeGhkR1ZrSUhScGJXVmNiaUFnSUNvZ1FIQnlhWFpoZEdWY2JpQWdJQ292WEc0Z0lGOWZaMlYwVkdsdFpVRjBVRzl6YVhScGIyNG9jRzl6YVhScGIyNHBJSHRjYmlBZ0lDQnlaWFIxY200Z2RHaHBjeTVmWDNScGJXVWdLeUFvY0c5emFYUnBiMjRnTFNCMGFHbHpMbDlmY0c5emFYUnBiMjRwSUM4Z2RHaHBjeTVmWDNOd1pXVmtPMXh1SUNCOVhHNWNiaUFnTHlvcVhHNGdJQ0FxSUVOaGJHTjFiR0YwWlM5bGVIUnlZWEJ2YkdGMFpTQndiR0Y1YVc1bklIQnZjMmwwYVc5dUlHWnZjaUJuYVhabGJpQjBhVzFsWEc0Z0lDQXFYRzRnSUNBcUlFQndZWEpoYlNCN1RuVnRZbVZ5ZlNCMGFXMWxJSFJwYldWY2JpQWdJQ29nUUhKbGRIVnliaUI3VG5WdFltVnlmU0JsZUhSeVlYQnZiR0YwWldRZ2NHOXphWFJwYjI1Y2JpQWdJQ29nUUhCeWFYWmhkR1ZjYmlBZ0lDb3ZYRzRnSUY5ZloyVjBVRzl6YVhScGIyNUJkRlJwYldVb2RHbHRaU2tnZTF4dUlDQWdJSEpsZEhWeWJpQjBhR2x6TGw5ZmNHOXphWFJwYjI0Z0t5QW9kR2x0WlNBdElIUm9hWE11WDE5MGFXMWxLU0FxSUhSb2FYTXVYMTl6Y0dWbFpEdGNiaUFnZlZ4dVhHNGdJRjlmYzNsdVl5Z3BJSHRjYmlBZ0lDQmpiMjV6ZENCdWIzY2dQU0IwYUdsekxtTjFjbkpsYm5SVWFXMWxPMXh1SUNBZ0lIUm9hWE11WDE5d2IzTnBkR2x2YmlBclBTQW9ibTkzSUMwZ2RHaHBjeTVmWDNScGJXVXBJQ29nZEdocGN5NWZYM053WldWa08xeHVJQ0FnSUhSb2FYTXVYMTkwYVcxbElEMGdibTkzTzF4dVhHNGdJQ0FnY21WMGRYSnVJRzV2ZHp0Y2JpQWdmVnh1WEc0Z0lDOHFLbHh1SUNBZ0tpQkhaWFFnWTNWeWNtVnVkQ0J0WVhOMFpYSWdkR2x0WlM1Y2JpQWdJQ3BjYmlBZ0lDb2dRRzVoYldVZ1kzVnljbVZ1ZEZScGJXVmNiaUFnSUNvZ1FIUjVjR1VnZTA1MWJXSmxjbjFjYmlBZ0lDb2dRRzFsYldKbGNtOW1JRkJzWVhsRGIyNTBjbTlzWEc0Z0lDQXFJRUJwYm5OMFlXNWpaVnh1SUNBZ0tpQkFjbVZoWkc5dWJIbGNiaUFnSUNvdlhHNGdJR2RsZENCamRYSnlaVzUwVkdsdFpTZ3BJSHRjYmlBZ0lDQnlaWFIxY200Z2RHaHBjeTVmWDNOamFHVmtkV3hsY2k1amRYSnlaVzUwVkdsdFpUdGNiaUFnZlZ4dVhHNGdJQzhxS2x4dUlDQWdLaUJIWlhRZ1kzVnljbVZ1ZENCdFlYTjBaWElnZEdsdFpTNWNiaUFnSUNwY2JpQWdJQ29nUUc1aGJXVWdZWFZrYVc5VWFXMWxYRzRnSUNBcUlFQjBlWEJsSUh0T2RXMWlaWEo5WEc0Z0lDQXFJRUJ0WlcxaVpYSnZaaUJRYkdGNVEyOXVkSEp2YkZ4dUlDQWdLaUJBYVc1emRHRnVZMlZjYmlBZ0lDb2dRSEpsWVdSdmJteDVYRzRnSUNBcUwxeHVJQ0JuWlhRZ1lYVmthVzlVYVcxbEtDa2dlMXh1SUNBZ0lISmxkSFZ5YmlCMGFHbHpMbDlmYzJOb1pXUjFiR1Z5TG1GMVpHbHZWR2x0WlR0Y2JpQWdmVnh1WEc0Z0lDOHFLbHh1SUNBZ0tpQkhaWFFnWTNWeWNtVnVkQ0J0WVhOMFpYSWdjRzl6YVhScGIyNHVYRzRnSUNBcUlGUm9hWE1nWm5WdVkzUnBiMjRnZDJsc2JDQmlaU0J5WlhCc1lXTmxaQ0IzYUdWdUlIUm9aU0J3YkdGNUxXTnZiblJ5YjJ3Z2FYTWdZV1JrWldRZ2RHOGdZU0J0WVhOMFpYSXVYRzRnSUNBcVhHNGdJQ0FxSUVCdVlXMWxJR04xY25KbGJuUlFiM05wZEdsdmJseHVJQ0FnS2lCQWRIbHdaU0I3VG5WdFltVnlmVnh1SUNBZ0tpQkFiV1Z0WW1WeWIyWWdVR3hoZVVOdmJuUnliMnhjYmlBZ0lDb2dRR2x1YzNSaGJtTmxYRzRnSUNBcUlFQnlaV0ZrYjI1c2VWeHVJQ0FnS2k5Y2JpQWdaMlYwSUdOMWNuSmxiblJRYjNOcGRHbHZiaWdwSUh0Y2JpQWdJQ0J5WlhSMWNtNGdkR2hwY3k1ZlgzQnZjMmwwYVc5dUlDc2dLSFJvYVhNdVgxOXpZMmhsWkhWc1pYSXVZM1Z5Y21WdWRGUnBiV1VnTFNCMGFHbHpMbDlmZEdsdFpTa2dLaUIwYUdsekxsOWZjM0JsWldRN1hHNGdJSDFjYmx4dUlDQXZLaXBjYmlBZ0lDb2dVbVYwZFhKdWN5QnBaaUIwYUdVZ2NHeGhlU0JqYjI1MGNtOXNJR2x6SUhKMWJtNXBibWN1WEc0Z0lDQXFYRzRnSUNBcUlFQnVZVzFsSUhKMWJtNXBibWRjYmlBZ0lDb2dRSFI1Y0dVZ2UwSnZiMnhsWVc1OVhHNGdJQ0FxSUVCdFpXMWlaWEp2WmlCUWJHRjVRMjl1ZEhKdmJGeHVJQ0FnS2lCQWFXNXpkR0Z1WTJWY2JpQWdJQ29nUUhKbFlXUnZibXg1WEc0Z0lDQXFMMXh1SUNCblpYUWdjblZ1Ym1sdVp5Z3BJSHRjYmlBZ0lDQnlaWFIxY200Z0lTaDBhR2x6TGw5ZmMzQmxaV1FnUFQwOUlEQXBPMXh1SUNCOVhHNWNiaUFnYzJWMEtHVnVaMmx1WlNBOUlHNTFiR3dwSUh0Y2JpQWdJQ0JqYjI1emRDQjBhVzFsSUQwZ2RHaHBjeTVmWDNONWJtTW9LVHRjYmlBZ0lDQmpiMjV6ZENCemNHVmxaQ0E5SUhSb2FYTXVYMTl6Y0dWbFpEdGNibHh1SUNBZ0lHbG1JQ2gwYUdsekxsOWZjR3hoZVVOdmJuUnliMnhzWldRZ0lUMDlJRzUxYkd3Z0ppWWdkR2hwY3k1ZlgzQnNZWGxEYjI1MGNtOXNiR1ZrTGw5ZlpXNW5hVzVsSUNFOVBTQmxibWRwYm1VcElIdGNibHh1SUNBZ0lDQWdkR2hwY3k1emVXNWpVM0JsWldRb2RHbHRaU3dnZEdocGN5NWZYM0J2YzJsMGFXOXVMQ0F3S1R0Y2JseHVJQ0FnSUNBZ2FXWWdLSFJvYVhNdVgxOXdiR0Y1UTI5dWRISnZiR3hsWkNsY2JpQWdJQ0FnSUNBZ2RHaHBjeTVmWDNKbGMyVjBSVzVuYVc1bEtDazdYRzVjYmx4dUlDQWdJQ0FnYVdZZ0tIUm9hWE11WDE5d2JHRjVRMjl1ZEhKdmJHeGxaQ0E5UFQwZ2JuVnNiQ0FtSmlCbGJtZHBibVVnSVQwOUlHNTFiR3dwSUh0Y2JpQWdJQ0FnSUNBZ2RHaHBjeTVmWDNObGRFVnVaMmx1WlNobGJtZHBibVVwTzF4dVhHNGdJQ0FnSUNBZ0lHbG1JQ2h6Y0dWbFpDQWhQVDBnTUNsY2JpQWdJQ0FnSUNBZ0lDQjBhR2x6TG5ONWJtTlRjR1ZsWkNoMGFXMWxMQ0IwYUdsekxsOWZjRzl6YVhScGIyNHNJSE53WldWa0tUdGNiaUFnSUNBZ0lIMWNiaUFnSUNCOVhHNGdJSDFjYmx4dUlDQXZLaXBjYmlBZ0lDb2dVMlYwY3lCMGFHVWdjR3hoZVNCamIyNTBjbTlzSUd4dmIzQWdZbVZvWVhacGIzSXVYRzRnSUNBcVhHNGdJQ0FxSUVCMGVYQmxJSHRDYjI5c1pXRnVmVnh1SUNBZ0tpQkFibUZ0WlNCc2IyOXdYRzRnSUNBcUlFQnRaVzFpWlhKdlppQlFiR0Y1UTI5dWRISnZiRnh1SUNBZ0tpQkFhVzV6ZEdGdVkyVmNiaUFnSUNvdlhHNGdJSE5sZENCc2IyOXdLR1Z1WVdKc1pTa2dlMXh1SUNBZ0lHbG1JQ2hsYm1GaWJHVWdKaVlnZEdocGN5NWZYMnh2YjNCVGRHRnlkQ0ErSUMxSmJtWnBibWwwZVNBbUppQjBhR2x6TGw5ZmJHOXZjRVZ1WkNBOElFbHVabWx1YVhSNUtTQjdYRzRnSUNBZ0lDQnBaaUFvSVhSb2FYTXVYMTlzYjI5d1EyOXVkSEp2YkNrZ2UxeHVJQ0FnSUNBZ0lDQjBhR2x6TGw5ZmJHOXZjRU52Ym5SeWIyd2dQU0J1WlhjZ1RHOXZjRU52Ym5SeWIyd29kR2hwY3lrN1hHNGdJQ0FnSUNBZ0lIUm9hWE11WDE5elkyaGxaSFZzWlhJdVlXUmtLSFJvYVhNdVgxOXNiMjl3UTI5dWRISnZiQ3dnU1c1bWFXNXBkSGtwTzF4dUlDQWdJQ0FnZlZ4dVhHNGdJQ0FnSUNCcFppQW9kR2hwY3k1ZlgzTndaV1ZrSUNFOVBTQXdLU0I3WEc0Z0lDQWdJQ0FnSUdOdmJuTjBJSEJ2YzJsMGFXOXVJRDBnZEdocGN5NWpkWEp5Wlc1MFVHOXphWFJwYjI0N1hHNGdJQ0FnSUNBZ0lHTnZibk4wSUd4dmQyVnlJRDBnVFdGMGFDNXRhVzRvZEdocGN5NWZYMnh2YjNCVGRHRnlkQ3dnZEdocGN5NWZYMnh2YjNCRmJtUXBPMXh1SUNBZ0lDQWdJQ0JqYjI1emRDQjFjSEJsY2lBOUlFMWhkR2d1YldGNEtIUm9hWE11WDE5c2IyOXdVM1JoY25Rc0lIUm9hWE11WDE5c2IyOXdSVzVrS1R0Y2JseHVJQ0FnSUNBZ0lDQnBaaUFvZEdocGN5NWZYM053WldWa0lENGdNQ0FtSmlCd2IzTnBkR2x2YmlBK0lIVndjR1Z5S1Z4dUlDQWdJQ0FnSUNBZ0lIUm9hWE11YzJWbGF5aDFjSEJsY2lrN1hHNGdJQ0FnSUNBZ0lHVnNjMlVnYVdZZ0tIUm9hWE11WDE5emNHVmxaQ0E4SURBZ0ppWWdjRzl6YVhScGIyNGdQQ0JzYjNkbGNpbGNiaUFnSUNBZ0lDQWdJQ0IwYUdsekxuTmxaV3NvYkc5M1pYSXBPMXh1SUNBZ0lDQWdJQ0JsYkhObFhHNGdJQ0FnSUNBZ0lDQWdkR2hwY3k1ZlgyeHZiM0JEYjI1MGNtOXNMbkpsYzJOb1pXUjFiR1VvZEdocGN5NWZYM053WldWa0tUdGNiaUFnSUNBZ0lIMWNiaUFnSUNCOUlHVnNjMlVnYVdZZ0tIUm9hWE11WDE5c2IyOXdRMjl1ZEhKdmJDa2dlMXh1SUNBZ0lDQWdkR2hwY3k1ZlgzTmphR1ZrZFd4bGNpNXlaVzF2ZG1Vb2RHaHBjeTVmWDJ4dmIzQkRiMjUwY205c0tUdGNiaUFnSUNBZ0lIUm9hWE11WDE5c2IyOXdRMjl1ZEhKdmJDQTlJRzUxYkd3N1hHNGdJQ0FnZlZ4dUlDQjlYRzVjYmlBZ1oyVjBJR3h2YjNBb0tTQjdYRzRnSUNBZ2NtVjBkWEp1SUNnaElYUm9hWE11WDE5c2IyOXdRMjl1ZEhKdmJDazdYRzRnSUgxY2JseHVJQ0F2S2lwY2JpQWdJQ29nVTJWMGN5QnNiMjl3SUhOMFlYSjBJR0Z1WkNCbGJtUWdkR2x0WlM1Y2JpQWdJQ3BjYmlBZ0lDb2dRSEJoY21GdElIdE9kVzFpWlhKOUlHeHZiM0JUZEdGeWRDQXRJR3h2YjNBZ2MzUmhjblFnZG1Gc2RXVXVYRzRnSUNBcUlFQndZWEpoYlNCN1RuVnRZbVZ5ZlNCc2IyOXdSVzVrSUMwZ2JHOXZjQ0JsYm1RZ2RtRnNkV1V1WEc0Z0lDQXFMMXh1SUNCelpYUk1iMjl3UW05MWJtUmhjbWxsY3loc2IyOXdVM1JoY25Rc0lHeHZiM0JGYm1RcElIdGNiaUFnSUNCMGFHbHpMbDlmYkc5dmNGTjBZWEowSUQwZ2JHOXZjRk4wWVhKME8xeHVJQ0FnSUhSb2FYTXVYMTlzYjI5d1JXNWtJRDBnYkc5dmNFVnVaRHRjYmx4dUlDQWdJSFJvYVhNdWJHOXZjQ0E5SUhSb2FYTXViRzl2Y0R0Y2JpQWdmVnh1WEc0Z0lDOHFLbHh1SUNBZ0tpQlRaWFJ6SUd4dmIzQWdjM1JoY25RZ2RtRnNkV1ZjYmlBZ0lDcGNiaUFnSUNvZ1FIUjVjR1VnZTA1MWJXSmxjbjFjYmlBZ0lDb2dRRzVoYldVZ2JHOXZjRk4wWVhKMFhHNGdJQ0FxSUVCdFpXMWlaWEp2WmlCUWJHRjVRMjl1ZEhKdmJGeHVJQ0FnS2lCQWFXNXpkR0Z1WTJWY2JpQWdJQ292WEc0Z0lITmxkQ0JzYjI5d1UzUmhjblFvYkc5dmNGTjBZWEowS1NCN1hHNGdJQ0FnZEdocGN5NXpaWFJNYjI5d1FtOTFibVJoY21sbGN5aHNiMjl3VTNSaGNuUXNJSFJvYVhNdVgxOXNiMjl3Ulc1a0tUdGNiaUFnZlZ4dVhHNGdJR2RsZENCc2IyOXdVM1JoY25Rb0tTQjdYRzRnSUNBZ2NtVjBkWEp1SUhSb2FYTXVYMTlzYjI5d1UzUmhjblE3WEc0Z0lIMWNibHh1SUNBdktpcGNiaUFnSUNvZ1UyVjBjeUJzYjI5d0lHVnVaQ0IyWVd4MVpWeHVJQ0FnS2x4dUlDQWdLaUJBZEhsd1pTQjdUblZ0WW1WeWZWeHVJQ0FnS2lCQWJtRnRaU0JzYjI5d1JXNWtYRzRnSUNBcUlFQnRaVzFpWlhKdlppQlFiR0Y1UTI5dWRISnZiRnh1SUNBZ0tpQkFhVzV6ZEdGdVkyVmNiaUFnSUNvdlhHNGdJSE5sZENCc2IyOXdSVzVrS0d4dmIzQkZibVFwSUh0Y2JpQWdJQ0IwYUdsekxuTmxkRXh2YjNCQ2IzVnVaR0Z5YVdWektIUm9hWE11WDE5c2IyOXdVM1JoY25Rc0lHeHZiM0JGYm1RcE8xeHVJQ0I5WEc1Y2JpQWdaMlYwSUd4dmIzQkZibVFvS1NCN1hHNGdJQ0FnY21WMGRYSnVJSFJvYVhNdVgxOXNiMjl3Ulc1a08xeHVJQ0I5WEc1Y2JpQWdMeThnVkdsdFpVVnVaMmx1WlNCdFpYUm9iMlFnS0hOd1pXVmtMV052Ym5SeWIyeHNaV1FnYVc1MFpYSm1ZV05sS1Z4dUlDQnplVzVqVTNCbFpXUW9kR2x0WlN3Z2NHOXphWFJwYjI0c0lITndaV1ZrTENCelpXVnJJRDBnWm1Gc2MyVXBJSHRjYmlBZ0lDQmpiMjV6ZENCc1lYTjBVM0JsWldRZ1BTQjBhR2x6TGw5ZmMzQmxaV1E3WEc1Y2JpQWdJQ0JwWmlBb2MzQmxaV1FnSVQwOUlHeGhjM1JUY0dWbFpDQjhmQ0J6WldWcktTQjdYRzRnSUNBZ0lDQnBaaUFvS0hObFpXc2dmSHdnYkdGemRGTndaV1ZrSUQwOVBTQXdLU0FtSmlCMGFHbHpMbDlmYkc5dmNFTnZiblJ5YjJ3cFhHNGdJQ0FnSUNBZ0lIQnZjMmwwYVc5dUlEMGdkR2hwY3k1ZlgyeHZiM0JEYjI1MGNtOXNMbUZ3Y0d4NVRHOXZjRUp2ZFc1a1lYSnBaWE1vY0c5emFYUnBiMjRzSUhOd1pXVmtLVHRjYmx4dUlDQWdJQ0FnZEdocGN5NWZYM1JwYldVZ1BTQjBhVzFsTzF4dUlDQWdJQ0FnZEdocGN5NWZYM0J2YzJsMGFXOXVJRDBnY0c5emFYUnBiMjQ3WEc0Z0lDQWdJQ0IwYUdsekxsOWZjM0JsWldRZ1BTQnpjR1ZsWkR0Y2JseHVJQ0FnSUNBZ2FXWWdLSFJvYVhNdVgxOXdiR0Y1UTI5dWRISnZiR3hsWkNsY2JpQWdJQ0FnSUNBZ2RHaHBjeTVmWDNCc1lYbERiMjUwY205c2JHVmtMbk41Ym1OVGNHVmxaQ2gwYVcxbExDQndiM05wZEdsdmJpd2djM0JsWldRc0lITmxaV3NzSUd4aGMzUlRjR1ZsWkNrN1hHNWNiaUFnSUNBZ0lHbG1JQ2gwYUdsekxsOWZiRzl2Y0VOdmJuUnliMndwWEc0Z0lDQWdJQ0FnSUhSb2FYTXVYMTlzYjI5d1EyOXVkSEp2YkM1eVpYTmphR1ZrZFd4bEtITndaV1ZrS1R0Y2JpQWdJQ0I5WEc0Z0lIMWNibHh1SUNBdktpcGNiaUFnSUNvZ1UzUmhjblJ6SUhCc1lYbGlZV05yWEc0Z0lDQXFMMXh1SUNCemRHRnlkQ2dwSUh0Y2JpQWdJQ0JqYjI1emRDQjBhVzFsSUQwZ2RHaHBjeTVmWDNONWJtTW9LVHRjYmlBZ0lDQjBhR2x6TG5ONWJtTlRjR1ZsWkNoMGFXMWxMQ0IwYUdsekxsOWZjRzl6YVhScGIyNHNJSFJvYVhNdVgxOXdiR0Y1YVc1blUzQmxaV1FwTzF4dUlDQjlYRzVjYmlBZ0x5b3FYRzRnSUNBcUlGQmhkWE5sY3lCd2JHRjVZbUZqYXlCaGJtUWdjM1JoZVhNZ1lYUWdkR2hsSUhOaGJXVWdjRzl6YVhScGIyNHVYRzRnSUNBcUwxeHVJQ0J3WVhWelpTZ3BJSHRjYmlBZ0lDQmpiMjV6ZENCMGFXMWxJRDBnZEdocGN5NWZYM041Ym1Nb0tUdGNiaUFnSUNCMGFHbHpMbk41Ym1OVGNHVmxaQ2gwYVcxbExDQjBhR2x6TGw5ZmNHOXphWFJwYjI0c0lEQXBPMXh1SUNCOVhHNWNiaUFnTHlvcVhHNGdJQ0FxSUZOMGIzQnpJSEJzWVhsaVlXTnJJR0Z1WkNCelpXVnJjeUIwYnlCcGJtbDBhV0ZzSUNnd0tTQndiM05wZEdsdmJpNWNiaUFnSUNvdlhHNGdJSE4wYjNBb0tTQjdYRzRnSUNBZ1kyOXVjM1FnZEdsdFpTQTlJSFJvYVhNdVgxOXplVzVqS0NrN1hHNGdJQ0FnZEdocGN5NXplVzVqVTNCbFpXUW9kR2x0WlN3Z01Dd2dNQ3dnZEhKMVpTazdYRzRnSUgxY2JseHVJQ0F2S2lwY2JpQWdJQ29nU1dZZ2MzQmxaV1FnYVdZZ2NISnZkbWxrWldRc0lITmxkSE1nZEdobElIQnNZWGxpWVdOcklITndaV1ZrTGlCVWFHVWdjM0JsWldRZ2RtRnNkV1VnYzJodmRXeGtYRzRnSUNBcUlHSmxJRzV2YmkxNlpYSnZJR0psZEhkbFpXNGdMVEUySUdGdVpDQXRNUzh4TmlCdmNpQmlaWFIzWldWdUlERXZNVFlnWVc1a0lERTJMbHh1SUNBZ0tseHVJQ0FnS2lCQWRIbHdaU0I3VG5WdFltVnlmVnh1SUNBZ0tpQkFibUZ0WlNCemNHVmxaRnh1SUNBZ0tpQkFiV1Z0WW1WeWIyWWdVR3hoZVVOdmJuUnliMnhjYmlBZ0lDb2dRR2x1YzNSaGJtTmxYRzRnSUNBcUwxeHVJQ0J6WlhRZ2MzQmxaV1FvYzNCbFpXUXBJSHRjYmlBZ0lDQmpiMjV6ZENCMGFXMWxJRDBnZEdocGN5NWZYM041Ym1Nb0tUdGNibHh1SUNBZ0lHbG1JQ2h6Y0dWbFpDQStQU0F3S1NCN1hHNGdJQ0FnSUNCcFppQW9jM0JsWldRZ1BDQXdMakF4S1Z4dUlDQWdJQ0FnSUNCemNHVmxaQ0E5SURBdU1ERTdYRzRnSUNBZ0lDQmxiSE5sSUdsbUlDaHpjR1ZsWkNBK0lERXdNQ2xjYmlBZ0lDQWdJQ0FnYzNCbFpXUWdQU0F4TURBN1hHNGdJQ0FnZlNCbGJITmxJSHRjYmlBZ0lDQWdJR2xtSUNoemNHVmxaQ0E4SUMweE1EQXBYRzRnSUNBZ0lDQWdJSE53WldWa0lEMGdMVEV3TUR0Y2JpQWdJQ0FnSUdWc2MyVWdhV1lnS0hOd1pXVmtJRDRnTFRBdU1ERXBYRzRnSUNBZ0lDQWdJSE53WldWa0lEMGdMVEF1TURFN1hHNGdJQ0FnZlZ4dVhHNGdJQ0FnZEdocGN5NWZYM0JzWVhscGJtZFRjR1ZsWkNBOUlITndaV1ZrTzF4dVhHNGdJQ0FnYVdZZ0tDRjBhR2x6TG0xaGMzUmxjaUFtSmlCMGFHbHpMbDlmYzNCbFpXUWdJVDA5SURBcFhHNGdJQ0FnSUNCMGFHbHpMbk41Ym1OVGNHVmxaQ2gwYVcxbExDQjBhR2x6TGw5ZmNHOXphWFJwYjI0c0lITndaV1ZrS1R0Y2JpQWdmVnh1WEc0Z0lHZGxkQ0J6Y0dWbFpDZ3BJSHRjYmlBZ0lDQnlaWFIxY200Z2RHaHBjeTVmWDNCc1lYbHBibWRUY0dWbFpEdGNiaUFnZlZ4dVhHNGdJQzhxS2x4dUlDQWdLaUJUWlhRZ0tHcDFiWEFnZEc4cElIQnNZWGxwYm1jZ2NHOXphWFJwYjI0dVhHNGdJQ0FxWEc0Z0lDQXFJRUJ3WVhKaGJTQjdUblZ0WW1WeWZTQndiM05wZEdsdmJpQjBZWEpuWlhRZ2NHOXphWFJwYjI1Y2JpQWdJQ292WEc0Z0lITmxaV3NvY0c5emFYUnBiMjRwSUh0Y2JpQWdJQ0JqYjI1emRDQjBhVzFsSUQwZ2RHaHBjeTVmWDNONWJtTW9LVHRjYmlBZ0lDQjBhR2x6TGw5ZmNHOXphWFJwYjI0Z1BTQndiM05wZEdsdmJqdGNiaUFnSUNCMGFHbHpMbk41Ym1OVGNHVmxaQ2gwYVcxbExDQndiM05wZEdsdmJpd2dkR2hwY3k1ZlgzTndaV1ZrTENCMGNuVmxLVHRjYmlBZ2ZWeHVmVnh1WEc1bGVIQnZjblFnWkdWbVlYVnNkQ0JRYkdGNVEyOXVkSEp2YkR0Y2JpSmRmUT09IiwiJ3VzZSBzdHJpY3QnO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuXG52YXIgX2dldEl0ZXJhdG9yMiA9IHJlcXVpcmUoJ2JhYmVsLXJ1bnRpbWUvY29yZS1qcy9nZXQtaXRlcmF0b3InKTtcblxudmFyIF9nZXRJdGVyYXRvcjMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9nZXRJdGVyYXRvcjIpO1xuXG52YXIgX2dldDIgPSByZXF1aXJlKCdiYWJlbC1ydW50aW1lL2hlbHBlcnMvZ2V0Jyk7XG5cbnZhciBfZ2V0MyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2dldDIpO1xuXG52YXIgX2dldFByb3RvdHlwZU9mID0gcmVxdWlyZSgnYmFiZWwtcnVudGltZS9jb3JlLWpzL29iamVjdC9nZXQtcHJvdG90eXBlLW9mJyk7XG5cbnZhciBfZ2V0UHJvdG90eXBlT2YyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfZ2V0UHJvdG90eXBlT2YpO1xuXG52YXIgX2NsYXNzQ2FsbENoZWNrMiA9IHJlcXVpcmUoJ2JhYmVsLXJ1bnRpbWUvaGVscGVycy9jbGFzc0NhbGxDaGVjaycpO1xuXG52YXIgX2NsYXNzQ2FsbENoZWNrMyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2NsYXNzQ2FsbENoZWNrMik7XG5cbnZhciBfY3JlYXRlQ2xhc3MyID0gcmVxdWlyZSgnYmFiZWwtcnVudGltZS9oZWxwZXJzL2NyZWF0ZUNsYXNzJyk7XG5cbnZhciBfY3JlYXRlQ2xhc3MzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfY3JlYXRlQ2xhc3MyKTtcblxudmFyIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuMiA9IHJlcXVpcmUoJ2JhYmVsLXJ1bnRpbWUvaGVscGVycy9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuJyk7XG5cbnZhciBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybjMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuMik7XG5cbnZhciBfaW5oZXJpdHMyID0gcmVxdWlyZSgnYmFiZWwtcnVudGltZS9oZWxwZXJzL2luaGVyaXRzJyk7XG5cbnZhciBfaW5oZXJpdHMzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfaW5oZXJpdHMyKTtcblxudmFyIF9Qcmlvcml0eVF1ZXVlID0gcmVxdWlyZSgnLi4vY29yZS9Qcmlvcml0eVF1ZXVlJyk7XG5cbnZhciBfUHJpb3JpdHlRdWV1ZTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9Qcmlvcml0eVF1ZXVlKTtcblxudmFyIF9TY2hlZHVsaW5nUXVldWUyID0gcmVxdWlyZSgnLi4vY29yZS9TY2hlZHVsaW5nUXVldWUnKTtcblxudmFyIF9TY2hlZHVsaW5nUXVldWUzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfU2NoZWR1bGluZ1F1ZXVlMik7XG5cbnZhciBfVGltZUVuZ2luZTQgPSByZXF1aXJlKCcuLi9jb3JlL1RpbWVFbmdpbmUnKTtcblxudmFyIF9UaW1lRW5naW5lNSA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX1RpbWVFbmdpbmU0KTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxuZnVuY3Rpb24gYWRkRHVwbGV0KGZpcnN0QXJyYXksIHNlY29uZEFycmF5LCBmaXJzdEVsZW1lbnQsIHNlY29uZEVsZW1lbnQpIHtcbiAgZmlyc3RBcnJheS5wdXNoKGZpcnN0RWxlbWVudCk7XG4gIHNlY29uZEFycmF5LnB1c2goc2Vjb25kRWxlbWVudCk7XG59XG5cbmZ1bmN0aW9uIHJlbW92ZUR1cGxldChmaXJzdEFycmF5LCBzZWNvbmRBcnJheSwgZmlyc3RFbGVtZW50KSB7XG4gIHZhciBpbmRleCA9IGZpcnN0QXJyYXkuaW5kZXhPZihmaXJzdEVsZW1lbnQpO1xuXG4gIGlmIChpbmRleCA+PSAwKSB7XG4gICAgdmFyIHNlY29uZEVsZW1lbnQgPSBzZWNvbmRBcnJheVtpbmRleF07XG5cbiAgICBmaXJzdEFycmF5LnNwbGljZShpbmRleCwgMSk7XG4gICAgc2Vjb25kQXJyYXkuc3BsaWNlKGluZGV4LCAxKTtcblxuICAgIHJldHVybiBzZWNvbmRFbGVtZW50O1xuICB9XG5cbiAgcmV0dXJuIG51bGw7XG59XG5cbi8vIFRoZSBUcmFuc3BvcnRlZCBjYWxsIGlzIHRoZSBiYXNlIGNsYXNzIG9mIHRoZSBhZGFwdGVycyBiZXR3ZWVuXG4vLyBkaWZmZXJlbnQgdHlwZXMgb2YgZW5naW5lcyAoaS5lLiB0cmFuc3BvcnRlZCwgc2NoZWR1bGVkLCBwbGF5LWNvbnRyb2xsZWQpXG4vLyBUaGUgYWRhcHRlcnMgYXJlIGF0IHRoZSBzYW1lIHRpbWUgbWFzdGVycyBmb3IgdGhlIGVuZ2luZXMgYWRkZWQgdG8gdGhlIHRyYW5zcG9ydFxuLy8gYW5kIHRyYW5zcG9ydGVkIFRpbWVFbmdpbmVzIGluc2VydGVkIGludG8gdGhlIHRyYW5zcG9ydCdzIHBvc2l0aW9uLWJhc2VkIHByaXRvcml0eSBxdWV1ZS5cblxudmFyIFRyYW5zcG9ydGVkID0gZnVuY3Rpb24gKF9UaW1lRW5naW5lKSB7XG4gICgwLCBfaW5oZXJpdHMzLmRlZmF1bHQpKFRyYW5zcG9ydGVkLCBfVGltZUVuZ2luZSk7XG5cbiAgZnVuY3Rpb24gVHJhbnNwb3J0ZWQodHJhbnNwb3J0LCBlbmdpbmUsIHN0YXJ0LCBkdXJhdGlvbiwgb2Zmc2V0KSB7XG4gICAgdmFyIHN0cmV0Y2ggPSBhcmd1bWVudHMubGVuZ3RoID4gNSAmJiBhcmd1bWVudHNbNV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1s1XSA6IDE7XG4gICAgKDAsIF9jbGFzc0NhbGxDaGVjazMuZGVmYXVsdCkodGhpcywgVHJhbnNwb3J0ZWQpO1xuXG4gICAgdmFyIF90aGlzID0gKDAsIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuMy5kZWZhdWx0KSh0aGlzLCAoVHJhbnNwb3J0ZWQuX19wcm90b19fIHx8ICgwLCBfZ2V0UHJvdG90eXBlT2YyLmRlZmF1bHQpKFRyYW5zcG9ydGVkKSkuY2FsbCh0aGlzKSk7XG5cbiAgICBfdGhpcy5tYXN0ZXIgPSB0cmFuc3BvcnQ7XG5cbiAgICBfdGhpcy5fX2VuZ2luZSA9IGVuZ2luZTtcbiAgICBlbmdpbmUubWFzdGVyID0gX3RoaXM7XG5cbiAgICBfdGhpcy5fX3N0YXJ0UG9zaXRpb24gPSBzdGFydDtcbiAgICBfdGhpcy5fX2VuZFBvc2l0aW9uID0gIWlzRmluaXRlKGR1cmF0aW9uKSA/IEluZmluaXR5IDogc3RhcnQgKyBkdXJhdGlvbjtcbiAgICBfdGhpcy5fX29mZnNldFBvc2l0aW9uID0gc3RhcnQgKyBvZmZzZXQ7XG4gICAgX3RoaXMuX19zdHJldGNoUG9zaXRpb24gPSBzdHJldGNoO1xuICAgIF90aGlzLl9faXNSdW5uaW5nID0gZmFsc2U7XG4gICAgcmV0dXJuIF90aGlzO1xuICB9XG5cbiAgKDAsIF9jcmVhdGVDbGFzczMuZGVmYXVsdCkoVHJhbnNwb3J0ZWQsIFt7XG4gICAga2V5OiAnc2V0Qm91bmRhcmllcycsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHNldEJvdW5kYXJpZXMoc3RhcnQsIGR1cmF0aW9uKSB7XG4gICAgICB2YXIgb2Zmc2V0ID0gYXJndW1lbnRzLmxlbmd0aCA+IDIgJiYgYXJndW1lbnRzWzJdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMl0gOiAwO1xuICAgICAgdmFyIHN0cmV0Y2ggPSBhcmd1bWVudHMubGVuZ3RoID4gMyAmJiBhcmd1bWVudHNbM10gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1szXSA6IDE7XG5cbiAgICAgIHRoaXMuX19zdGFydFBvc2l0aW9uID0gc3RhcnQ7XG4gICAgICB0aGlzLl9fZW5kUG9zaXRpb24gPSBzdGFydCArIGR1cmF0aW9uO1xuICAgICAgdGhpcy5fX29mZnNldFBvc2l0aW9uID0gc3RhcnQgKyBvZmZzZXQ7XG4gICAgICB0aGlzLl9fc3RyZXRjaFBvc2l0aW9uID0gc3RyZXRjaDtcbiAgICAgIHRoaXMucmVzZXRQb3NpdGlvbigpO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ3N0YXJ0JyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gc3RhcnQodGltZSwgcG9zaXRpb24sIHNwZWVkKSB7fVxuICB9LCB7XG4gICAga2V5OiAnc3RvcCcsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHN0b3AodGltZSwgcG9zaXRpb24pIHt9XG4gIH0sIHtcbiAgICBrZXk6ICdyZXNldFBvc2l0aW9uJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gcmVzZXRQb3NpdGlvbihwb3NpdGlvbikge1xuICAgICAgaWYgKHBvc2l0aW9uICE9PSB1bmRlZmluZWQpIHBvc2l0aW9uICs9IHRoaXMuX19vZmZzZXRQb3NpdGlvbjtcblxuICAgICAgdGhpcy5tYXN0ZXIucmVzZXRFbmdpbmVQb3NpdGlvbih0aGlzLCBwb3NpdGlvbik7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAnc3luY1Bvc2l0aW9uJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gc3luY1Bvc2l0aW9uKHRpbWUsIHBvc2l0aW9uLCBzcGVlZCkge1xuICAgICAgaWYgKHNwZWVkID4gMCkge1xuICAgICAgICBpZiAocG9zaXRpb24gPCB0aGlzLl9fc3RhcnRQb3NpdGlvbikge1xuXG4gICAgICAgICAgaWYgKHRoaXMuX19pc1J1bm5pbmcpIHRoaXMuc3RvcCh0aW1lLCBwb3NpdGlvbiAtIHRoaXMuX19vZmZzZXRQb3NpdGlvbik7XG5cbiAgICAgICAgICB0aGlzLl9faXNSdW5uaW5nID0gZmFsc2U7XG4gICAgICAgICAgcmV0dXJuIHRoaXMuX19zdGFydFBvc2l0aW9uO1xuICAgICAgICB9IGVsc2UgaWYgKHBvc2l0aW9uIDwgdGhpcy5fX2VuZFBvc2l0aW9uKSB7XG4gICAgICAgICAgdGhpcy5zdGFydCh0aW1lLCBwb3NpdGlvbiAtIHRoaXMuX19vZmZzZXRQb3NpdGlvbiwgc3BlZWQpO1xuXG4gICAgICAgICAgdGhpcy5fX2lzUnVubmluZyA9IHRydWU7XG4gICAgICAgICAgcmV0dXJuIHRoaXMuX19lbmRQb3NpdGlvbjtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaWYgKHBvc2l0aW9uID4gdGhpcy5fX2VuZFBvc2l0aW9uKSB7XG4gICAgICAgICAgaWYgKHRoaXMuX19pc1J1bm5pbmcpIC8vIGlmIGVuZ2luZSBpcyBydW5uaW5nXG4gICAgICAgICAgICB0aGlzLnN0b3AodGltZSwgcG9zaXRpb24gLSB0aGlzLl9fb2Zmc2V0UG9zaXRpb24pO1xuXG4gICAgICAgICAgdGhpcy5fX2lzUnVubmluZyA9IGZhbHNlO1xuICAgICAgICAgIHJldHVybiB0aGlzLl9fZW5kUG9zaXRpb247XG4gICAgICAgIH0gZWxzZSBpZiAocG9zaXRpb24gPiB0aGlzLl9fc3RhcnRQb3NpdGlvbikge1xuICAgICAgICAgIHRoaXMuc3RhcnQodGltZSwgcG9zaXRpb24gLSB0aGlzLl9fb2Zmc2V0UG9zaXRpb24sIHNwZWVkKTtcblxuICAgICAgICAgIHRoaXMuX19pc1J1bm5pbmcgPSB0cnVlO1xuICAgICAgICAgIHJldHVybiB0aGlzLl9fc3RhcnRQb3NpdGlvbjtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBpZiAodGhpcy5fX2lzUnVubmluZykgLy8gaWYgZW5naW5lIGlzIHJ1bm5pbmdcbiAgICAgICAgdGhpcy5zdG9wKHRpbWUsIHBvc2l0aW9uKTtcblxuICAgICAgdGhpcy5fX2lzUnVubmluZyA9IGZhbHNlO1xuICAgICAgcmV0dXJuIEluZmluaXR5ICogc3BlZWQ7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAnYWR2YW5jZVBvc2l0aW9uJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gYWR2YW5jZVBvc2l0aW9uKHRpbWUsIHBvc2l0aW9uLCBzcGVlZCkge1xuICAgICAgaWYgKCF0aGlzLl9faXNSdW5uaW5nKSB7XG4gICAgICAgIHRoaXMuc3RhcnQodGltZSwgcG9zaXRpb24gLSB0aGlzLl9fb2Zmc2V0UG9zaXRpb24sIHNwZWVkKTtcbiAgICAgICAgdGhpcy5fX2lzUnVubmluZyA9IHRydWU7XG5cbiAgICAgICAgaWYgKHNwZWVkID4gMCkgcmV0dXJuIHRoaXMuX19lbmRQb3NpdGlvbjtcblxuICAgICAgICByZXR1cm4gdGhpcy5fX3N0YXJ0UG9zaXRpb247XG4gICAgICB9XG5cbiAgICAgIC8vIHN0b3AgZW5naW5lXG4gICAgICB0aGlzLnN0b3AodGltZSwgcG9zaXRpb24gLSB0aGlzLl9fb2Zmc2V0UG9zaXRpb24pO1xuXG4gICAgICB0aGlzLl9faXNSdW5uaW5nID0gZmFsc2U7XG4gICAgICByZXR1cm4gSW5maW5pdHkgKiBzcGVlZDtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6ICdzeW5jU3BlZWQnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBzeW5jU3BlZWQodGltZSwgcG9zaXRpb24sIHNwZWVkKSB7XG4gICAgICBpZiAoc3BlZWQgPT09IDApIHtcbiAgICAgICAgdGhpcy5zdG9wKHRpbWUsIHBvc2l0aW9uIC0gdGhpcy5fX29mZnNldFBvc2l0aW9uKTtcbiAgICAgIH1cbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6ICdkZXN0cm95JyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gZGVzdHJveSgpIHtcbiAgICAgIHRoaXMubWFzdGVyID0gbnVsbDtcblxuICAgICAgdGhpcy5fX2VuZ2luZS5tYXN0ZXIgPSBudWxsO1xuICAgICAgdGhpcy5fX2VuZ2luZSA9IG51bGw7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAnY3VycmVudFRpbWUnLFxuICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgcmV0dXJuIHRoaXMubWFzdGVyLmN1cnJlbnRUaW1lO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ2F1ZGlvVGltZScsXG4gICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICByZXR1cm4gdGhpcy5tYXN0ZXIuYXVkaW9UaW1lO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ2N1cnJlbnRQb3NpdGlvbicsXG4gICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICByZXR1cm4gdGhpcy5tYXN0ZXIuY3VycmVudFBvc2l0aW9uIC0gdGhpcy5fX29mZnNldFBvc2l0aW9uO1xuICAgIH1cbiAgfV0pO1xuICByZXR1cm4gVHJhbnNwb3J0ZWQ7XG59KF9UaW1lRW5naW5lNS5kZWZhdWx0KTtcblxuLy8gVHJhbnNwb3J0ZWRUcmFuc3BvcnRlZFxuLy8gaGFzIHRvIHN3aXRjaCBvbiBhbmQgb2ZmIHRoZSBzY2hlZHVsZWQgZW5naW5lcyB3aGVuIHRoZSB0cmFuc3BvcnQgaGl0cyB0aGUgZW5naW5lJ3Mgc3RhcnQgYW5kIGVuZCBwb3NpdGlvblxuLy8gQG5vdGUgLSBkb2VzIG5vdCBoYW5kbGUgcHJvcGVybHkgX19zdGFydFBvc2l0aW9uIGFuZCBfX2VuZFBvc2l0aW9uXG5cblxudmFyIFRyYW5zcG9ydGVkVHJhbnNwb3J0ZWQgPSBmdW5jdGlvbiAoX1RyYW5zcG9ydGVkKSB7XG4gICgwLCBfaW5oZXJpdHMzLmRlZmF1bHQpKFRyYW5zcG9ydGVkVHJhbnNwb3J0ZWQsIF9UcmFuc3BvcnRlZCk7XG5cbiAgZnVuY3Rpb24gVHJhbnNwb3J0ZWRUcmFuc3BvcnRlZCh0cmFuc3BvcnQsIGVuZ2luZSwgc3RhcnRQb3NpdGlvbiwgZW5kUG9zaXRpb24sIG9mZnNldFBvc2l0aW9uKSB7XG4gICAgKDAsIF9jbGFzc0NhbGxDaGVjazMuZGVmYXVsdCkodGhpcywgVHJhbnNwb3J0ZWRUcmFuc3BvcnRlZCk7XG4gICAgcmV0dXJuICgwLCBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybjMuZGVmYXVsdCkodGhpcywgKFRyYW5zcG9ydGVkVHJhbnNwb3J0ZWQuX19wcm90b19fIHx8ICgwLCBfZ2V0UHJvdG90eXBlT2YyLmRlZmF1bHQpKFRyYW5zcG9ydGVkVHJhbnNwb3J0ZWQpKS5jYWxsKHRoaXMsIHRyYW5zcG9ydCwgZW5naW5lLCBzdGFydFBvc2l0aW9uLCBlbmRQb3NpdGlvbiwgb2Zmc2V0UG9zaXRpb24pKTtcbiAgfVxuXG4gIC8vIEB0b2RvIC0gaGFuZGxlIHRoaXMuX19ydW5uaW5nIHRvIHN0YXJ0IGFuZCBzdG9wIHByb3Blcmx5IHRoZSBzY2hlZHVsZWQgZW5naW5lc1xuXG5cbiAgKDAsIF9jcmVhdGVDbGFzczMuZGVmYXVsdCkoVHJhbnNwb3J0ZWRUcmFuc3BvcnRlZCwgW3tcbiAgICBrZXk6ICdzeW5jUG9zaXRpb24nLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBzeW5jUG9zaXRpb24odGltZSwgcG9zaXRpb24sIHNwZWVkKSB7XG4gICAgICB2YXIgbmV4dFBvc2l0aW9uID0gbnVsbDsgLy8gSW5maW5pdHkgKiBzcGVlZDsgLy8gZGVmYXVsdCByZXR1cm5cblxuICAgICAgaWYgKHNwZWVkID4gMCkge1xuXG4gICAgICAgIGlmIChwb3NpdGlvbiA8IHRoaXMuX19zdGFydFBvc2l0aW9uKSB7XG4gICAgICAgICAgLy8gc3luYyBlbmdpbmUgYXQgYF9zdGFydFBvc2l0aW9uYFxuICAgICAgICAgIG5leHRQb3NpdGlvbiA9IHRoaXMuX19vZmZzZXRQb3NpdGlvbiArIHRoaXMuX19lbmdpbmUuc3luY1Bvc2l0aW9uKHRpbWUsIHRoaXMuX19zdGFydFBvc2l0aW9uIC0gdGhpcy5fX29mZnNldFBvc2l0aW9uLCBzcGVlZCk7XG4gICAgICAgICAgdGhpcy5fX2lzUnVubmluZyA9IHRydWU7XG4gICAgICAgIH0gZWxzZSBpZiAocG9zaXRpb24gPCB0aGlzLl9fZW5kUG9zaXRpb24pIHtcbiAgICAgICAgICAvLyBzeW5jIGVuZ2luZSBhdCBgcG9zaXRpb25gXG4gICAgICAgICAgbmV4dFBvc2l0aW9uID0gdGhpcy5fX29mZnNldFBvc2l0aW9uICsgdGhpcy5fX2VuZ2luZS5zeW5jUG9zaXRpb24odGltZSwgcG9zaXRpb24gLSB0aGlzLl9fb2Zmc2V0UG9zaXRpb24sIHNwZWVkKTtcbiAgICAgICAgICB0aGlzLl9faXNSdW5uaW5nID0gdHJ1ZTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB0aGlzLl9fZW5naW5lLnN5bmNQb3NpdGlvbih0aW1lLCBwb3NpdGlvbiAtIHRoaXMuX19vZmZzZXRQb3NpdGlvbiwgMCk7XG5cbiAgICAgICAgICB0aGlzLl9faXNSdW5uaW5nID0gZmFsc2U7XG4gICAgICAgICAgbmV4dFBvc2l0aW9uID0gSW5maW5pdHkgKiBzcGVlZDtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIGlmIHNvbWVob3cgdGhlIGVuZ2luZSBhc2tlZCB0byBiZSBjYWxsZWQgYWZ0ZXIgYGVuZFBvc2l0aW9uYCwgY2xhbXAgdmFsdWVcbiAgICAgICAgaWYgKHRoaXMuX19pc1J1bm5pbmcgJiYgbmV4dFBvc2l0aW9uID4gdGhpcy5fX2VuZFBvc2l0aW9uKSB7XG4gICAgICAgICAgbmV4dFBvc2l0aW9uID0gdGhpcy5fX2VuZFBvc2l0aW9uO1xuICAgICAgICB9XG4gICAgICB9IGVsc2UgaWYgKHNwZWVkIDwgMCkge1xuXG4gICAgICAgIGlmIChwb3NpdGlvbiA+IHRoaXMuX19lbmRQb3NpdGlvbikge1xuICAgICAgICAgIG5leHRQb3NpdGlvbiA9IHRoaXMuX19vZmZzZXRQb3NpdGlvbiArIHRoaXMuX19lbmdpbmUuc3luY1Bvc2l0aW9uKHRpbWUsIHRoaXMuX19lbmRQb3NpdGlvbiAtIHRoaXMuX19vZmZzZXRQb3NpdGlvbiwgc3BlZWQpO1xuICAgICAgICAgIHRoaXMuX19pc1J1bm5pbmcgPSB0cnVlO1xuICAgICAgICB9IGVsc2UgaWYgKHBvc2l0aW9uID4gdGhpcy5fX3N0YXJ0UG9zaXRpb24pIHtcbiAgICAgICAgICBuZXh0UG9zaXRpb24gPSB0aGlzLl9fb2Zmc2V0UG9zaXRpb24gKyB0aGlzLl9fZW5naW5lLnN5bmNQb3NpdGlvbih0aW1lLCBwb3NpdGlvbiAtIHRoaXMuX19vZmZzZXRQb3NpdGlvbiwgc3BlZWQpO1xuICAgICAgICAgIHRoaXMuX19pc1J1bm5pbmcgPSB0cnVlO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHRoaXMuX19lbmdpbmUuc3luY1Bvc2l0aW9uKHRpbWUsIHBvc2l0aW9uIC0gdGhpcy5fX29mZnNldFBvc2l0aW9uLCAwKTtcblxuICAgICAgICAgIHRoaXMuX19pc1J1bm5pbmcgPSBmYWxzZTtcbiAgICAgICAgICBuZXh0UG9zaXRpb24gPSBJbmZpbml0eSAqIHNwZWVkO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gaWYgc29tZWhvdyB0aGUgZW5naW5lIGFza2VkIHRvIGJlIGNhbGxlZCBiZWZvcmUgYHN0YXJ0UG9zaXRpb25gLCBjbGFtcCB2YWx1ZVxuICAgICAgICBpZiAodGhpcy5fX2lzUnVubmluZyAmJiBuZXh0UG9zaXRpb24gPCB0aGlzLl9fc3RhcnRQb3NpdGlvbikge1xuICAgICAgICAgIG5leHRQb3NpdGlvbiA9IHRoaXMuX19zdGFydFBvc2l0aW9uO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLl9fZW5naW5lLnN5bmNQb3NpdGlvbih0aW1lLCBwb3NpdGlvbiAtIHRoaXMuX19vZmZzZXRQb3NpdGlvbiwgMCk7XG5cbiAgICAgICAgdGhpcy5fX2lzUnVubmluZyA9IGZhbHNlO1xuICAgICAgICBuZXh0UG9zaXRpb24gPSBJbmZpbml0eTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIG5leHRQb3NpdGlvbjtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6ICdhZHZhbmNlUG9zaXRpb24nLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBhZHZhbmNlUG9zaXRpb24odGltZSwgcG9zaXRpb24sIHNwZWVkKSB7XG4gICAgICAvLyBjZWlsIG9yIGZsb29yIGBwb3NpdGlvbmAgYXQgMTBeLTkgdG8gcHJldmVudCBmbG9hdCBhcml0aG1ldGljcyBlcnJvcnNcbiAgICAgIC8vIHRoYXQgbWFrZSB0aGUgdHJhbnNwb3J0ZWQgZ28gdG8gaW5maW5pdGUgbG9vcHNcbiAgICAgIGlmIChzcGVlZCA+IDApIHtcbiAgICAgICAgcG9zaXRpb24gPSBNYXRoLmNlaWwocG9zaXRpb24gKiAxZTkpICogMWUtOTtcbiAgICAgIH0gZWxzZSBpZiAoc3BlZWQgPCAwKSB7XG4gICAgICAgIHBvc2l0aW9uID0gTWF0aC5mbG9vcihwb3NpdGlvbiAqIDFlOSkgKiAxZS05O1xuICAgICAgfVxuXG4gICAgICAvLyBzdG9wIGVuZ2luZSBpZiBvdXRzaWRlIGJvdW5kYXJpZXNcbiAgICAgIGlmIChzcGVlZCA+IDAgJiYgcG9zaXRpb24gPj0gdGhpcy5fX2VuZFBvc2l0aW9uICYmIHRoaXMuX19pc1J1bm5pbmcpIHtcbiAgICAgICAgLy8gc3RvcCBlbmdpbmUgYXQgX19lbmRQb3NpdGlvblxuICAgICAgICB0aGlzLl9fZW5naW5lLnN5bmNQb3NpdGlvbih0aW1lLCB0aGlzLl9fZW5kUG9zaXRpb24gLSB0aGlzLl9fb2Zmc2V0UG9zaXRpb24sIDApO1xuICAgICAgICB0aGlzLl9faXNSdW5uaW5nID0gZmFsc2U7XG5cbiAgICAgICAgcmV0dXJuIEluZmluaXR5ICogc3BlZWQ7IC8vXG4gICAgICB9IGVsc2UgaWYgKHNwZWVkIDwgMCAmJiBwb3NpdGlvbiA8IHRoaXMuX19zdGFydFBvc2l0aW9uICYmIHRoaXMuX19pc1J1bm5pbmcpIHtcbiAgICAgICAgdGhpcy5fX2VuZ2luZS5zeW5jUG9zaXRpb24odGltZSwgdGhpcy5fX3N0YXJ0UG9zaXRpb24gLSB0aGlzLl9fb2Zmc2V0UG9zaXRpb24sIDApO1xuICAgICAgICB0aGlzLl9faXNSdW5uaW5nID0gZmFsc2U7XG5cbiAgICAgICAgcmV0dXJuIEluZmluaXR5ICogc3BlZWQ7IC8vXG4gICAgICB9XG5cbiAgICAgIC8vIGRlZmluZSBuZXh0IHBvc2l0aW9uIGFuZCBjbGFtcCB0byBib3VuZGFyaWVzXG4gICAgICBwb3NpdGlvbiA9IHRoaXMuX19vZmZzZXRQb3NpdGlvbiArIHRoaXMuX19lbmdpbmUuYWR2YW5jZVBvc2l0aW9uKHRpbWUsIHBvc2l0aW9uIC0gdGhpcy5fX29mZnNldFBvc2l0aW9uLCBzcGVlZCk7XG5cbiAgICAgIC8vIHN0b3AgZW5naW5lIGlmIG91dHNpZGUgYm91bmRhcmllcyAtIHdpbGwgY2FsbCBhZHZhbmNlUG9zaXRpb24gb25jZSBtb3JlXG4gICAgICAvLyBhbmQgdGh1cyBgc3luY1Bvc2l0aW9uYCAoY2YuIGxpbmUgMjE4IC0gMjI4KVxuICAgICAgaWYgKHNwZWVkID4gMCAmJiBwb3NpdGlvbiA+IHRoaXMuX19lbmRQb3NpdGlvbikge1xuICAgICAgICBwb3NpdGlvbiA9IHRoaXMuX19lbmRQb3NpdGlvbjtcbiAgICAgIH0gZWxzZSBpZiAoc3BlZWQgPCAwICYmIHBvc2l0aW9uIDwgdGhpcy5fX3N0YXJ0UG9zaXRpb24pIHtcbiAgICAgICAgcG9zaXRpb24gPSB0aGlzLl9fc3RhcnRQb3NpdGlvbjtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHBvc2l0aW9uO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ3N5bmNTcGVlZCcsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHN5bmNTcGVlZCh0aW1lLCBwb3NpdGlvbiwgc3BlZWQpIHtcbiAgICAgIGlmICh0aGlzLl9fZW5naW5lLnN5bmNTcGVlZCkge1xuICAgICAgICB0aGlzLl9fZW5naW5lLnN5bmNTcGVlZCh0aW1lLCBwb3NpdGlvbiwgc3BlZWQpO1xuICAgICAgfVxuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ3Jlc2V0RW5naW5lUG9zaXRpb24nLFxuICAgIHZhbHVlOiBmdW5jdGlvbiByZXNldEVuZ2luZVBvc2l0aW9uKGVuZ2luZSkge1xuICAgICAgdmFyIHBvc2l0aW9uID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMV0gOiB1bmRlZmluZWQ7XG5cbiAgICAgIGlmIChwb3NpdGlvbiAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHBvc2l0aW9uICs9IHRoaXMuX19vZmZzZXRQb3NpdGlvbjtcbiAgICAgIH1cblxuICAgICAgdGhpcy5tYXN0ZXIucmVzZXRFbmdpbmVQb3NpdGlvbih0aGlzLCBwb3NpdGlvbik7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAnZGVzdHJveScsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGRlc3Ryb3koKSB7XG4gICAgICB0aGlzLl9fZW5naW5lLnN5bmNQb3NpdGlvbih0aGlzLm1hc3Rlci5jdXJyZW50VGltZSwgdGhpcy5tYXN0ZXIuY3VycmVudFBvc2l0aW9uLCAwKTtcbiAgICAgICgwLCBfZ2V0My5kZWZhdWx0KShUcmFuc3BvcnRlZFRyYW5zcG9ydGVkLnByb3RvdHlwZS5fX3Byb3RvX18gfHwgKDAsIF9nZXRQcm90b3R5cGVPZjIuZGVmYXVsdCkoVHJhbnNwb3J0ZWRUcmFuc3BvcnRlZC5wcm90b3R5cGUpLCAnZGVzdHJveScsIHRoaXMpLmNhbGwodGhpcyk7XG4gICAgfVxuICB9XSk7XG4gIHJldHVybiBUcmFuc3BvcnRlZFRyYW5zcG9ydGVkO1xufShUcmFuc3BvcnRlZCk7XG5cbi8vIFRyYW5zcG9ydGVkU3BlZWRDb250cm9sbGVkXG4vLyBoYXMgdG8gc3RhcnQgYW5kIHN0b3AgdGhlIHNwZWVkLWNvbnRyb2xsZWQgZW5naW5lcyB3aGVuIHRoZSB0cmFuc3BvcnQgaGl0cyB0aGUgZW5naW5lJ3Mgc3RhcnQgYW5kIGVuZCBwb3NpdGlvblxuXG5cbnZhciBUcmFuc3BvcnRlZFNwZWVkQ29udHJvbGxlZCA9IGZ1bmN0aW9uIChfVHJhbnNwb3J0ZWQyKSB7XG4gICgwLCBfaW5oZXJpdHMzLmRlZmF1bHQpKFRyYW5zcG9ydGVkU3BlZWRDb250cm9sbGVkLCBfVHJhbnNwb3J0ZWQyKTtcblxuICBmdW5jdGlvbiBUcmFuc3BvcnRlZFNwZWVkQ29udHJvbGxlZCh0cmFuc3BvcnQsIGVuZ2luZSwgc3RhcnRQb3NpdGlvbiwgZW5kUG9zaXRpb24sIG9mZnNldFBvc2l0aW9uKSB7XG4gICAgKDAsIF9jbGFzc0NhbGxDaGVjazMuZGVmYXVsdCkodGhpcywgVHJhbnNwb3J0ZWRTcGVlZENvbnRyb2xsZWQpO1xuICAgIHJldHVybiAoMCwgX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4zLmRlZmF1bHQpKHRoaXMsIChUcmFuc3BvcnRlZFNwZWVkQ29udHJvbGxlZC5fX3Byb3RvX18gfHwgKDAsIF9nZXRQcm90b3R5cGVPZjIuZGVmYXVsdCkoVHJhbnNwb3J0ZWRTcGVlZENvbnRyb2xsZWQpKS5jYWxsKHRoaXMsIHRyYW5zcG9ydCwgZW5naW5lLCBzdGFydFBvc2l0aW9uLCBlbmRQb3NpdGlvbiwgb2Zmc2V0UG9zaXRpb24pKTtcbiAgfVxuXG4gICgwLCBfY3JlYXRlQ2xhc3MzLmRlZmF1bHQpKFRyYW5zcG9ydGVkU3BlZWRDb250cm9sbGVkLCBbe1xuICAgIGtleTogJ3N0YXJ0JyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gc3RhcnQodGltZSwgcG9zaXRpb24sIHNwZWVkKSB7XG4gICAgICB0aGlzLl9fZW5naW5lLnN5bmNTcGVlZCh0aW1lLCBwb3NpdGlvbiwgc3BlZWQsIHRydWUpO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ3N0b3AnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBzdG9wKHRpbWUsIHBvc2l0aW9uKSB7XG4gICAgICB0aGlzLl9fZW5naW5lLnN5bmNTcGVlZCh0aW1lLCBwb3NpdGlvbiwgMCk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAnc3luY1NwZWVkJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gc3luY1NwZWVkKHRpbWUsIHBvc2l0aW9uLCBzcGVlZCkge1xuICAgICAgaWYgKHRoaXMuX19pc1J1bm5pbmcpIHRoaXMuX19lbmdpbmUuc3luY1NwZWVkKHRpbWUsIHBvc2l0aW9uLCBzcGVlZCk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAnZGVzdHJveScsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGRlc3Ryb3koKSB7XG4gICAgICB0aGlzLl9fZW5naW5lLnN5bmNTcGVlZCh0aGlzLm1hc3Rlci5jdXJyZW50VGltZSwgdGhpcy5tYXN0ZXIuY3VycmVudFBvc2l0aW9uIC0gdGhpcy5fX29mZnNldFBvc2l0aW9uLCAwKTtcbiAgICAgICgwLCBfZ2V0My5kZWZhdWx0KShUcmFuc3BvcnRlZFNwZWVkQ29udHJvbGxlZC5wcm90b3R5cGUuX19wcm90b19fIHx8ICgwLCBfZ2V0UHJvdG90eXBlT2YyLmRlZmF1bHQpKFRyYW5zcG9ydGVkU3BlZWRDb250cm9sbGVkLnByb3RvdHlwZSksICdkZXN0cm95JywgdGhpcykuY2FsbCh0aGlzKTtcbiAgICB9XG4gIH1dKTtcbiAgcmV0dXJuIFRyYW5zcG9ydGVkU3BlZWRDb250cm9sbGVkO1xufShUcmFuc3BvcnRlZCk7XG5cbi8vIFRyYW5zcG9ydGVkU2NoZWR1bGVkXG4vLyBoYXMgdG8gc3dpdGNoIG9uIGFuZCBvZmYgdGhlIHNjaGVkdWxlZCBlbmdpbmVzIHdoZW4gdGhlIHRyYW5zcG9ydCBoaXRzIHRoZSBlbmdpbmUncyBzdGFydCBhbmQgZW5kIHBvc2l0aW9uXG5cblxudmFyIFRyYW5zcG9ydGVkU2NoZWR1bGVkID0gZnVuY3Rpb24gKF9UcmFuc3BvcnRlZDMpIHtcbiAgKDAsIF9pbmhlcml0czMuZGVmYXVsdCkoVHJhbnNwb3J0ZWRTY2hlZHVsZWQsIF9UcmFuc3BvcnRlZDMpO1xuXG4gIGZ1bmN0aW9uIFRyYW5zcG9ydGVkU2NoZWR1bGVkKHRyYW5zcG9ydCwgZW5naW5lLCBzdGFydFBvc2l0aW9uLCBlbmRQb3NpdGlvbiwgb2Zmc2V0UG9zaXRpb24pIHtcbiAgICAoMCwgX2NsYXNzQ2FsbENoZWNrMy5kZWZhdWx0KSh0aGlzLCBUcmFuc3BvcnRlZFNjaGVkdWxlZCk7XG5cbiAgICAvLyBzY2hlZHVsaW5nIHF1ZXVlIGJlY29tZXMgbWFzdGVyIG9mIGVuZ2luZVxuICAgIHZhciBfdGhpczQgPSAoMCwgX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4zLmRlZmF1bHQpKHRoaXMsIChUcmFuc3BvcnRlZFNjaGVkdWxlZC5fX3Byb3RvX18gfHwgKDAsIF9nZXRQcm90b3R5cGVPZjIuZGVmYXVsdCkoVHJhbnNwb3J0ZWRTY2hlZHVsZWQpKS5jYWxsKHRoaXMsIHRyYW5zcG9ydCwgZW5naW5lLCBzdGFydFBvc2l0aW9uLCBlbmRQb3NpdGlvbiwgb2Zmc2V0UG9zaXRpb24pKTtcblxuICAgIGVuZ2luZS5tYXN0ZXIgPSBudWxsO1xuICAgIHRyYW5zcG9ydC5fX3NjaGVkdWxpbmdRdWV1ZS5hZGQoZW5naW5lLCBJbmZpbml0eSk7XG4gICAgcmV0dXJuIF90aGlzNDtcbiAgfVxuXG4gICgwLCBfY3JlYXRlQ2xhc3MzLmRlZmF1bHQpKFRyYW5zcG9ydGVkU2NoZWR1bGVkLCBbe1xuICAgIGtleTogJ3N0YXJ0JyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gc3RhcnQodGltZSwgcG9zaXRpb24sIHNwZWVkKSB7XG4gICAgICB0aGlzLm1hc3Rlci5fX3NjaGVkdWxpbmdRdWV1ZS5yZXNldEVuZ2luZVRpbWUodGhpcy5fX2VuZ2luZSwgdGltZSk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAnc3RvcCcsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHN0b3AodGltZSwgcG9zaXRpb24pIHtcbiAgICAgIHRoaXMubWFzdGVyLl9fc2NoZWR1bGluZ1F1ZXVlLnJlc2V0RW5naW5lVGltZSh0aGlzLl9fZW5naW5lLCBJbmZpbml0eSk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAnZGVzdHJveScsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGRlc3Ryb3koKSB7XG4gICAgICB0aGlzLm1hc3Rlci5fX3NjaGVkdWxpbmdRdWV1ZS5yZW1vdmUodGhpcy5fX2VuZ2luZSk7XG4gICAgICAoMCwgX2dldDMuZGVmYXVsdCkoVHJhbnNwb3J0ZWRTY2hlZHVsZWQucHJvdG90eXBlLl9fcHJvdG9fXyB8fCAoMCwgX2dldFByb3RvdHlwZU9mMi5kZWZhdWx0KShUcmFuc3BvcnRlZFNjaGVkdWxlZC5wcm90b3R5cGUpLCAnZGVzdHJveScsIHRoaXMpLmNhbGwodGhpcyk7XG4gICAgfVxuICB9XSk7XG4gIHJldHVybiBUcmFuc3BvcnRlZFNjaGVkdWxlZDtcbn0oVHJhbnNwb3J0ZWQpO1xuXG4vLyB0cmFuc2xhdGVzIGFkdmFuY2VQb3NpdGlvbiBvZiAqdHJhbnNwb3J0ZWQqIGVuZ2luZXMgaW50byBnbG9iYWwgc2NoZWR1bGVyIHRpbWVzXG5cblxudmFyIFRyYW5zcG9ydFNjaGVkdWxlckhvb2sgPSBmdW5jdGlvbiAoX1RpbWVFbmdpbmUyKSB7XG4gICgwLCBfaW5oZXJpdHMzLmRlZmF1bHQpKFRyYW5zcG9ydFNjaGVkdWxlckhvb2ssIF9UaW1lRW5naW5lMik7XG5cbiAgZnVuY3Rpb24gVHJhbnNwb3J0U2NoZWR1bGVySG9vayh0cmFuc3BvcnQpIHtcbiAgICAoMCwgX2NsYXNzQ2FsbENoZWNrMy5kZWZhdWx0KSh0aGlzLCBUcmFuc3BvcnRTY2hlZHVsZXJIb29rKTtcblxuICAgIHZhciBfdGhpczUgPSAoMCwgX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4zLmRlZmF1bHQpKHRoaXMsIChUcmFuc3BvcnRTY2hlZHVsZXJIb29rLl9fcHJvdG9fXyB8fCAoMCwgX2dldFByb3RvdHlwZU9mMi5kZWZhdWx0KShUcmFuc3BvcnRTY2hlZHVsZXJIb29rKSkuY2FsbCh0aGlzKSk7XG5cbiAgICBfdGhpczUuX190cmFuc3BvcnQgPSB0cmFuc3BvcnQ7XG5cbiAgICBfdGhpczUuX19uZXh0UG9zaXRpb24gPSBJbmZpbml0eTtcbiAgICBfdGhpczUuX19uZXh0VGltZSA9IEluZmluaXR5O1xuICAgIHRyYW5zcG9ydC5fX3NjaGVkdWxlci5hZGQoX3RoaXM1LCBJbmZpbml0eSk7XG4gICAgcmV0dXJuIF90aGlzNTtcbiAgfVxuXG4gIC8vIFRpbWVFbmdpbmUgbWV0aG9kIChzY2hlZHVsZWQgaW50ZXJmYWNlKVxuXG5cbiAgKDAsIF9jcmVhdGVDbGFzczMuZGVmYXVsdCkoVHJhbnNwb3J0U2NoZWR1bGVySG9vaywgW3tcbiAgICBrZXk6ICdhZHZhbmNlVGltZScsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGFkdmFuY2VUaW1lKHRpbWUpIHtcbiAgICAgIHZhciB0cmFuc3BvcnQgPSB0aGlzLl9fdHJhbnNwb3J0O1xuICAgICAgdmFyIHBvc2l0aW9uID0gdGhpcy5fX25leHRQb3NpdGlvbjtcbiAgICAgIHZhciBzcGVlZCA9IHRyYW5zcG9ydC5fX3NwZWVkO1xuICAgICAgdmFyIG5leHRQb3NpdGlvbiA9IHRyYW5zcG9ydC5hZHZhbmNlUG9zaXRpb24odGltZSwgcG9zaXRpb24sIHNwZWVkKTtcbiAgICAgIHZhciBuZXh0VGltZSA9IHRyYW5zcG9ydC5fX2dldFRpbWVBdFBvc2l0aW9uKG5leHRQb3NpdGlvbik7XG5cbiAgICAgIHRoaXMuX19uZXh0UG9zaXRpb24gPSBuZXh0UG9zaXRpb247XG4gICAgICB0aGlzLl9fbmV4dFRpbWUgPSBuZXh0VGltZTtcblxuICAgICAgcmV0dXJuIG5leHRUaW1lO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ3Jlc2V0UG9zaXRpb24nLFxuICAgIHZhbHVlOiBmdW5jdGlvbiByZXNldFBvc2l0aW9uKCkge1xuICAgICAgdmFyIHBvc2l0aW9uID0gYXJndW1lbnRzLmxlbmd0aCA+IDAgJiYgYXJndW1lbnRzWzBdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMF0gOiB0aGlzLl9fbmV4dFBvc2l0aW9uO1xuXG4gICAgICB2YXIgdHJhbnNwb3J0ID0gdGhpcy5fX3RyYW5zcG9ydDtcbiAgICAgIHZhciB0aW1lID0gdHJhbnNwb3J0Ll9fZ2V0VGltZUF0UG9zaXRpb24ocG9zaXRpb24pO1xuXG4gICAgICB0aGlzLl9fbmV4dFBvc2l0aW9uID0gcG9zaXRpb247XG4gICAgICB0aGlzLl9fbmV4dFRpbWUgPSB0aW1lO1xuXG4gICAgICB0aGlzLnJlc2V0VGltZSh0aW1lKTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6ICdkZXN0cm95JyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gZGVzdHJveSgpIHtcbiAgICAgIHRoaXMuX190cmFuc3BvcnQuX19zY2hlZHVsZXIucmVtb3ZlKHRoaXMpO1xuICAgICAgdGhpcy5fX3RyYW5zcG9ydCA9IG51bGw7XG4gICAgfVxuICB9XSk7XG4gIHJldHVybiBUcmFuc3BvcnRTY2hlZHVsZXJIb29rO1xufShfVGltZUVuZ2luZTUuZGVmYXVsdCk7XG5cbi8vIGludGVybmFsIHNjaGVkdWxpbmcgcXVldWUgdGhhdCByZXR1cm5zIHRoZSBjdXJyZW50IHBvc2l0aW9uIChhbmQgdGltZSkgb2YgdGhlIHRyYW5zcG9ydFxuXG5cbnZhciBUcmFuc3BvcnRTY2hlZHVsaW5nUXVldWUgPSBmdW5jdGlvbiAoX1NjaGVkdWxpbmdRdWV1ZSkge1xuICAoMCwgX2luaGVyaXRzMy5kZWZhdWx0KShUcmFuc3BvcnRTY2hlZHVsaW5nUXVldWUsIF9TY2hlZHVsaW5nUXVldWUpO1xuXG4gIGZ1bmN0aW9uIFRyYW5zcG9ydFNjaGVkdWxpbmdRdWV1ZSh0cmFuc3BvcnQpIHtcbiAgICAoMCwgX2NsYXNzQ2FsbENoZWNrMy5kZWZhdWx0KSh0aGlzLCBUcmFuc3BvcnRTY2hlZHVsaW5nUXVldWUpO1xuXG4gICAgdmFyIF90aGlzNiA9ICgwLCBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybjMuZGVmYXVsdCkodGhpcywgKFRyYW5zcG9ydFNjaGVkdWxpbmdRdWV1ZS5fX3Byb3RvX18gfHwgKDAsIF9nZXRQcm90b3R5cGVPZjIuZGVmYXVsdCkoVHJhbnNwb3J0U2NoZWR1bGluZ1F1ZXVlKSkuY2FsbCh0aGlzKSk7XG5cbiAgICBfdGhpczYuX190cmFuc3BvcnQgPSB0cmFuc3BvcnQ7XG4gICAgdHJhbnNwb3J0Ll9fc2NoZWR1bGVyLmFkZChfdGhpczYsIEluZmluaXR5KTtcbiAgICByZXR1cm4gX3RoaXM2O1xuICB9XG5cbiAgKDAsIF9jcmVhdGVDbGFzczMuZGVmYXVsdCkoVHJhbnNwb3J0U2NoZWR1bGluZ1F1ZXVlLCBbe1xuICAgIGtleTogJ2Rlc3Ryb3knLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBkZXN0cm95KCkge1xuICAgICAgdGhpcy5fX3RyYW5zcG9ydC5fX3NjaGVkdWxlci5yZW1vdmUodGhpcyk7XG4gICAgICB0aGlzLl9fdHJhbnNwb3J0ID0gbnVsbDtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6ICdjdXJyZW50VGltZScsXG4gICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICByZXR1cm4gdGhpcy5fX3RyYW5zcG9ydC5jdXJyZW50VGltZTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6ICdhdWRpb1RpbWUnLFxuICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgcmV0dXJuIHRoaXMuX190cmFuc3BvcnQuYXVkaW9UaW1lO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ2N1cnJlbnRQb3NpdGlvbicsXG4gICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICByZXR1cm4gdGhpcy5fX3RyYW5zcG9ydC5jdXJyZW50UG9zaXRpb247XG4gICAgfVxuICB9XSk7XG4gIHJldHVybiBUcmFuc3BvcnRTY2hlZHVsaW5nUXVldWU7XG59KF9TY2hlZHVsaW5nUXVldWUzLmRlZmF1bHQpO1xuXG4vKipcbiAqIFByb3ZpZGVzIHBvc2l0aW9uLWJhc2VkIHNjaGVkdWxpbmcgb2YgVGltZUVuZ2luZSBpbnN0YW5jZXMuXG4gKlxuICogW2V4YW1wbGVde0BsaW5rIGh0dHBzOi8vcmF3Z2l0LmNvbS93YXZlc2pzL3dhdmVzLW1hc3RlcnMvbWFzdGVyL2V4YW1wbGVzL3RyYW5zcG9ydC9pbmRleC5odG1sfVxuICpcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gc2NoZWR1bGVyIC0gaW5zdGFuY2Ugb2YgU2NoZWR1bGVyXG4gKlxuICogQGV4YW1wbGVcbiAqIGltcG9ydCAqIGFzIG1hc3RlcnMgZnJvbSAnd2F2ZXMtbWFzdGVycyc7XG4gKlxuICogY29uc3QgZ2V0VGltZUZ1bmN0aW9uID0gKCkgPT4ge1xuICogICBjb25zdCBub3cgPSBwcm9jZXNzLmhydGltZSgpO1xuICogICByZXR1cm4gbm93WzBdICsgbm93WzFdICogMWUtOTtcbiAqIH1cbiAqIGNvbnN0IHNjaGVkdWxlciA9IG5ldyBtYXN0ZXJzLlNjaGVkdWxlcihnZXRUaW1lRnVuY3Rpb24pO1xuICogY29uc3QgdHJhbnNwb3J0ID0gbmV3IG1hc3RlcnMuVHJhbnNwb3J0KHNjaGVkdWxlcik7XG4gKiBjb25zdCBwbGF5Q29udHJvbCA9IG5ldyBtYXN0ZXJzLlBsYXlDb250cm9sKHNjaGVkdWxlciwgdHJhbnNwb3J0KTtcbiAqIGNvbnN0IG15RW5naW5lID0gbmV3IE15RW5naW5lKCk7XG4gKiBjb25zdCB5b3VyRW5naW5lID0gbmV3IHlvdXJFbmdpbmUoKTtcbiAqXG4gKiB0cmFuc3BvcnQuYWRkKG15RW5naW5lKTtcbiAqIHRyYW5zcG9ydC5hZGQoeW91ckVuZ2luZSk7XG4gKlxuICogcGxheUNvbnRyb2wuc3RhcnQoKTtcbiAqL1xuXG5cbnZhciBUcmFuc3BvcnQgPSBmdW5jdGlvbiAoX1RpbWVFbmdpbmUzKSB7XG4gICgwLCBfaW5oZXJpdHMzLmRlZmF1bHQpKFRyYW5zcG9ydCwgX1RpbWVFbmdpbmUzKTtcblxuICBmdW5jdGlvbiBUcmFuc3BvcnQoc2NoZWR1bGVyKSB7XG4gICAgdmFyIG9wdGlvbnMgPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6IHt9O1xuICAgICgwLCBfY2xhc3NDYWxsQ2hlY2szLmRlZmF1bHQpKHRoaXMsIFRyYW5zcG9ydCk7XG5cbiAgICB2YXIgX3RoaXM3ID0gKDAsIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuMy5kZWZhdWx0KSh0aGlzLCAoVHJhbnNwb3J0Ll9fcHJvdG9fXyB8fCAoMCwgX2dldFByb3RvdHlwZU9mMi5kZWZhdWx0KShUcmFuc3BvcnQpKS5jYWxsKHRoaXMpKTtcblxuICAgIGlmICghc2NoZWR1bGVyKSB0aHJvdyBuZXcgRXJyb3IoJ0ludmFsaWQgYXJndW1lbnQgYHNjaGVkdWxlcmAsIHNob3VsZCBiZSBhbiBpbnN0YW5jZSBvZiBgU2NoZWR1bGVyYCcpO1xuXG4gICAgX3RoaXM3Ll9fZW5naW5lcyA9IFtdO1xuICAgIF90aGlzNy5fX3RyYW5zcG9ydGVkID0gW107XG5cbiAgICBfdGhpczcuX19zY2hlZHVsZXIgPSBzY2hlZHVsZXI7XG4gICAgX3RoaXM3Ll9fc2NoZWR1bGVySG9vayA9IG5ldyBUcmFuc3BvcnRTY2hlZHVsZXJIb29rKF90aGlzNyk7XG4gICAgX3RoaXM3Ll9fdHJhbnNwb3J0ZWRRdWV1ZSA9IG5ldyBfUHJpb3JpdHlRdWV1ZTIuZGVmYXVsdCgpO1xuICAgIF90aGlzNy5fX3NjaGVkdWxpbmdRdWV1ZSA9IG5ldyBUcmFuc3BvcnRTY2hlZHVsaW5nUXVldWUoX3RoaXM3KTtcblxuICAgIC8vIHN5bmNyb25pemVkIHRpbWUsIHBvc2l0aW9uLCBhbmQgc3BlZWRcbiAgICBfdGhpczcuX190aW1lID0gMDtcbiAgICBfdGhpczcuX19wb3NpdGlvbiA9IDA7XG4gICAgX3RoaXM3Ll9fc3BlZWQgPSAwO1xuICAgIHJldHVybiBfdGhpczc7XG4gIH1cblxuICAoMCwgX2NyZWF0ZUNsYXNzMy5kZWZhdWx0KShUcmFuc3BvcnQsIFt7XG4gICAga2V5OiAnX19nZXRUaW1lQXRQb3NpdGlvbicsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIF9fZ2V0VGltZUF0UG9zaXRpb24ocG9zaXRpb24pIHtcbiAgICAgIGlmICh0aGlzLl9fc3BlZWQgPT09IDApIHJldHVybiArSW5maW5pdHk7ZWxzZSByZXR1cm4gdGhpcy5fX3RpbWUgKyAocG9zaXRpb24gLSB0aGlzLl9fcG9zaXRpb24pIC8gdGhpcy5fX3NwZWVkO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ19fZ2V0UG9zaXRpb25BdFRpbWUnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBfX2dldFBvc2l0aW9uQXRUaW1lKHRpbWUpIHtcbiAgICAgIHJldHVybiB0aGlzLl9fcG9zaXRpb24gKyAodGltZSAtIHRoaXMuX190aW1lKSAqIHRoaXMuX19zcGVlZDtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6ICdfX3N5bmNUcmFuc3BvcnRlZFBvc2l0aW9uJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gX19zeW5jVHJhbnNwb3J0ZWRQb3NpdGlvbih0aW1lLCBwb3NpdGlvbiwgc3BlZWQpIHtcbiAgICAgIHZhciBudW1UcmFuc3BvcnRlZEVuZ2luZXMgPSB0aGlzLl9fdHJhbnNwb3J0ZWQubGVuZ3RoO1xuICAgICAgdmFyIG5leHRQb3NpdGlvbiA9IEluZmluaXR5ICogc3BlZWQ7XG5cbiAgICAgIGlmIChudW1UcmFuc3BvcnRlZEVuZ2luZXMgPiAwKSB7XG4gICAgICAgIHRoaXMuX190cmFuc3BvcnRlZFF1ZXVlLmNsZWFyKCk7XG4gICAgICAgIHRoaXMuX190cmFuc3BvcnRlZFF1ZXVlLnJldmVyc2UgPSBzcGVlZCA8IDA7XG5cbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBudW1UcmFuc3BvcnRlZEVuZ2luZXM7IGkrKykge1xuICAgICAgICAgIHZhciBlbmdpbmUgPSB0aGlzLl9fdHJhbnNwb3J0ZWRbaV07XG4gICAgICAgICAgdmFyIG5leHRFbmdpbmVQb3NpdGlvbiA9IGVuZ2luZS5zeW5jUG9zaXRpb24odGltZSwgcG9zaXRpb24sIHNwZWVkKTtcbiAgICAgICAgICB0aGlzLl9fdHJhbnNwb3J0ZWRRdWV1ZS5pbnNlcnQoZW5naW5lLCBuZXh0RW5naW5lUG9zaXRpb24pO1xuICAgICAgICB9XG5cbiAgICAgICAgbmV4dFBvc2l0aW9uID0gdGhpcy5fX3RyYW5zcG9ydGVkUXVldWUudGltZTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIG5leHRQb3NpdGlvbjtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6ICdfX3N5bmNUcmFuc3BvcnRlZFNwZWVkJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gX19zeW5jVHJhbnNwb3J0ZWRTcGVlZCh0aW1lLCBwb3NpdGlvbiwgc3BlZWQpIHtcbiAgICAgIHZhciBfaXRlcmF0b3JOb3JtYWxDb21wbGV0aW9uID0gdHJ1ZTtcbiAgICAgIHZhciBfZGlkSXRlcmF0b3JFcnJvciA9IGZhbHNlO1xuICAgICAgdmFyIF9pdGVyYXRvckVycm9yID0gdW5kZWZpbmVkO1xuXG4gICAgICB0cnkge1xuICAgICAgICBmb3IgKHZhciBfaXRlcmF0b3IgPSAoMCwgX2dldEl0ZXJhdG9yMy5kZWZhdWx0KSh0aGlzLl9fdHJhbnNwb3J0ZWQpLCBfc3RlcDsgIShfaXRlcmF0b3JOb3JtYWxDb21wbGV0aW9uID0gKF9zdGVwID0gX2l0ZXJhdG9yLm5leHQoKSkuZG9uZSk7IF9pdGVyYXRvck5vcm1hbENvbXBsZXRpb24gPSB0cnVlKSB7XG4gICAgICAgICAgdmFyIHRyYW5zcG9ydGVkID0gX3N0ZXAudmFsdWU7XG5cbiAgICAgICAgICB0cmFuc3BvcnRlZC5zeW5jU3BlZWQodGltZSwgcG9zaXRpb24sIHNwZWVkKTtcbiAgICAgICAgfVxuICAgICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICAgIF9kaWRJdGVyYXRvckVycm9yID0gdHJ1ZTtcbiAgICAgICAgX2l0ZXJhdG9yRXJyb3IgPSBlcnI7XG4gICAgICB9IGZpbmFsbHkge1xuICAgICAgICB0cnkge1xuICAgICAgICAgIGlmICghX2l0ZXJhdG9yTm9ybWFsQ29tcGxldGlvbiAmJiBfaXRlcmF0b3IucmV0dXJuKSB7XG4gICAgICAgICAgICBfaXRlcmF0b3IucmV0dXJuKCk7XG4gICAgICAgICAgfVxuICAgICAgICB9IGZpbmFsbHkge1xuICAgICAgICAgIGlmIChfZGlkSXRlcmF0b3JFcnJvcikge1xuICAgICAgICAgICAgdGhyb3cgX2l0ZXJhdG9yRXJyb3I7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogR2V0IGN1cnJlbnQgbWFzdGVyIHRpbWUuXG4gICAgICpcbiAgICAgKiBAdHlwZSB7TnVtYmVyfVxuICAgICAqIEBuYW1lIGN1cnJlbnRUaW1lXG4gICAgICogQG1lbWJlcm9mIFRyYW5zcG9ydFxuICAgICAqIEBpbnN0YW5jZVxuICAgICAqIEByZWFkb25seVxuICAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6ICdyZXNldFBvc2l0aW9uJyxcblxuXG4gICAgLyoqXG4gICAgICogUmVzZXQgbmV4dCB0cmFuc3BvcnQgcG9zaXRpb25cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBuZXh0IC0gdHJhbnNwb3J0IHBvc2l0aW9uXG4gICAgICovXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHJlc2V0UG9zaXRpb24ocG9zaXRpb24pIHtcbiAgICAgIHZhciBtYXN0ZXIgPSB0aGlzLm1hc3RlcjtcblxuICAgICAgaWYgKG1hc3RlciAmJiBtYXN0ZXIucmVzZXRFbmdpbmVQb3NpdGlvbiAhPT0gdW5kZWZpbmVkKSBtYXN0ZXIucmVzZXRFbmdpbmVQb3NpdGlvbih0aGlzLCBwb3NpdGlvbik7ZWxzZSB0aGlzLl9fc2NoZWR1bGVySG9vay5yZXNldFBvc2l0aW9uKHBvc2l0aW9uKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBJbXBsZW1lbnRhdGlvbiBvZiB0aGUgdHJhbnNwb3J0ZWQgdGltZSBlbmdpbmUgaW50ZXJmYWNlLlxuICAgICAqXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IHRpbWVcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gcG9zaXRpb25cbiAgICAgKiBAcGFyYW0ge051bWJlcn0gc3BlZWRcbiAgICAgKi9cblxuICB9LCB7XG4gICAga2V5OiAnc3luY1Bvc2l0aW9uJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gc3luY1Bvc2l0aW9uKHRpbWUsIHBvc2l0aW9uLCBzcGVlZCkge1xuICAgICAgdGhpcy5fX3RpbWUgPSB0aW1lO1xuICAgICAgdGhpcy5fX3Bvc2l0aW9uID0gcG9zaXRpb247XG4gICAgICB0aGlzLl9fc3BlZWQgPSBzcGVlZDtcblxuICAgICAgcmV0dXJuIHRoaXMuX19zeW5jVHJhbnNwb3J0ZWRQb3NpdGlvbih0aW1lLCBwb3NpdGlvbiwgc3BlZWQpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEltcGxlbWVudGF0aW9uIG9mIHRoZSB0cmFuc3BvcnRlZCB0aW1lIGVuZ2luZSBpbnRlcmZhY2UuXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gdGltZVxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBwb3NpdGlvblxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBzcGVlZFxuICAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6ICdhZHZhbmNlUG9zaXRpb24nLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBhZHZhbmNlUG9zaXRpb24odGltZSwgcG9zaXRpb24sIHNwZWVkKSB7XG4gICAgICB2YXIgZW5naW5lID0gdGhpcy5fX3RyYW5zcG9ydGVkUXVldWUuaGVhZDtcbiAgICAgIHZhciBuZXh0RW5naW5lUG9zaXRpb24gPSBlbmdpbmUuYWR2YW5jZVBvc2l0aW9uKHRpbWUsIHBvc2l0aW9uLCBzcGVlZCk7XG4gICAgICByZXR1cm4gdGhpcy5fX3RyYW5zcG9ydGVkUXVldWUubW92ZShlbmdpbmUsIG5leHRFbmdpbmVQb3NpdGlvbik7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogSW1wbGVtZW50YXRpb24gb2YgdGhlIHRyYW5zcG9ydGVkIHRpbWUgZW5naW5lIGludGVyZmFjZS5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSB0aW1lXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IHBvc2l0aW9uXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IHNwZWVkXG4gICAgICogQHBhcmFtIHtCb29sZWFufSBbc2Vlaz1mYWxzZV1cbiAgICAgKi9cblxuICB9LCB7XG4gICAga2V5OiAnc3luY1NwZWVkJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gc3luY1NwZWVkKHRpbWUsIHBvc2l0aW9uLCBzcGVlZCkge1xuICAgICAgdmFyIHNlZWsgPSBhcmd1bWVudHMubGVuZ3RoID4gMyAmJiBhcmd1bWVudHNbM10gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1szXSA6IGZhbHNlO1xuXG4gICAgICB2YXIgbGFzdFNwZWVkID0gdGhpcy5fX3NwZWVkO1xuXG4gICAgICB0aGlzLl9fdGltZSA9IHRpbWU7XG4gICAgICB0aGlzLl9fcG9zaXRpb24gPSBwb3NpdGlvbjtcbiAgICAgIHRoaXMuX19zcGVlZCA9IHNwZWVkO1xuXG4gICAgICBpZiAoc3BlZWQgIT09IGxhc3RTcGVlZCB8fCBzZWVrKSB7XG4gICAgICAgIHZhciBuZXh0UG9zaXRpb24gPSB2b2lkIDA7XG5cbiAgICAgICAgLy8gcmVzeW5jIHRyYW5zcG9ydGVkIGVuZ2luZXNcbiAgICAgICAgaWYgKHNlZWsgfHwgc3BlZWQgKiBsYXN0U3BlZWQgPCAwKSB7XG4gICAgICAgICAgLy8gc2VlayBvciByZXZlcnNlIGRpcmVjdGlvblxuICAgICAgICAgIG5leHRQb3NpdGlvbiA9IHRoaXMuX19zeW5jVHJhbnNwb3J0ZWRQb3NpdGlvbih0aW1lLCBwb3NpdGlvbiwgc3BlZWQpO1xuICAgICAgICB9IGVsc2UgaWYgKGxhc3RTcGVlZCA9PT0gMCkge1xuICAgICAgICAgIC8vIHN0YXJ0XG4gICAgICAgICAgbmV4dFBvc2l0aW9uID0gdGhpcy5fX3N5bmNUcmFuc3BvcnRlZFBvc2l0aW9uKHRpbWUsIHBvc2l0aW9uLCBzcGVlZCk7XG4gICAgICAgIH0gZWxzZSBpZiAoc3BlZWQgPT09IDApIHtcbiAgICAgICAgICAvLyBzdG9wXG4gICAgICAgICAgbmV4dFBvc2l0aW9uID0gSW5maW5pdHk7XG4gICAgICAgICAgdGhpcy5fX3N5bmNUcmFuc3BvcnRlZFBvc2l0aW9uKHRpbWUsIHBvc2l0aW9uLCBzcGVlZCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgLy8gY2hhbmdlIHNwZWVkIHdpdGhvdXQgcmV2ZXJzaW5nIGRpcmVjdGlvblxuICAgICAgICAgIHRoaXMuX19zeW5jVHJhbnNwb3J0ZWRTcGVlZCh0aW1lLCBwb3NpdGlvbiwgc3BlZWQpO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5yZXNldFBvc2l0aW9uKG5leHRQb3NpdGlvbik7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQWRkIGEgdGltZSBlbmdpbmUgdG8gdGhlIHRyYW5zcG9ydC5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBlbmdpbmUgLSBlbmdpbmUgdG8gYmUgYWRkZWQgdG8gdGhlIHRyYW5zcG9ydFxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBwb3NpdGlvbiAtIHN0YXJ0IHBvc2l0aW9uXG4gICAgICovXG5cbiAgfSwge1xuICAgIGtleTogJ2FkZCcsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGFkZChlbmdpbmUpIHtcbiAgICAgIHZhciBzdGFydFBvc2l0aW9uID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMV0gOiAwO1xuICAgICAgdmFyIGVuZFBvc2l0aW9uID0gYXJndW1lbnRzLmxlbmd0aCA+IDIgJiYgYXJndW1lbnRzWzJdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMl0gOiBJbmZpbml0eTtcbiAgICAgIHZhciBvZmZzZXRQb3NpdGlvbiA9IGFyZ3VtZW50cy5sZW5ndGggPiAzICYmIGFyZ3VtZW50c1szXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzNdIDogMDtcblxuICAgICAgdmFyIHRyYW5zcG9ydGVkID0gbnVsbDtcblxuICAgICAgaWYgKG9mZnNldFBvc2l0aW9uID09PSAtSW5maW5pdHkpIG9mZnNldFBvc2l0aW9uID0gMDtcblxuICAgICAgaWYgKGVuZ2luZS5tYXN0ZXIpIHRocm93IG5ldyBFcnJvcihcIm9iamVjdCBoYXMgYWxyZWFkeSBiZWVuIGFkZGVkIHRvIGEgbWFzdGVyXCIpO1xuXG4gICAgICBpZiAoX1RpbWVFbmdpbmU1LmRlZmF1bHQuaW1wbGVtZW50c1RyYW5zcG9ydGVkKGVuZ2luZSkpIHRyYW5zcG9ydGVkID0gbmV3IFRyYW5zcG9ydGVkVHJhbnNwb3J0ZWQodGhpcywgZW5naW5lLCBzdGFydFBvc2l0aW9uLCBlbmRQb3NpdGlvbiwgb2Zmc2V0UG9zaXRpb24pO2Vsc2UgaWYgKF9UaW1lRW5naW5lNS5kZWZhdWx0LmltcGxlbWVudHNTcGVlZENvbnRyb2xsZWQoZW5naW5lKSkgdHJhbnNwb3J0ZWQgPSBuZXcgVHJhbnNwb3J0ZWRTcGVlZENvbnRyb2xsZWQodGhpcywgZW5naW5lLCBzdGFydFBvc2l0aW9uLCBlbmRQb3NpdGlvbiwgb2Zmc2V0UG9zaXRpb24pO2Vsc2UgaWYgKF9UaW1lRW5naW5lNS5kZWZhdWx0LmltcGxlbWVudHNTY2hlZHVsZWQoZW5naW5lKSkgdHJhbnNwb3J0ZWQgPSBuZXcgVHJhbnNwb3J0ZWRTY2hlZHVsZWQodGhpcywgZW5naW5lLCBzdGFydFBvc2l0aW9uLCBlbmRQb3NpdGlvbiwgb2Zmc2V0UG9zaXRpb24pO2Vsc2UgdGhyb3cgbmV3IEVycm9yKFwib2JqZWN0IGNhbm5vdCBiZSBhZGRlZCB0byBhIHRyYW5zcG9ydFwiKTtcblxuICAgICAgaWYgKHRyYW5zcG9ydGVkKSB7XG4gICAgICAgIHZhciBzcGVlZCA9IHRoaXMuX19zcGVlZDtcblxuICAgICAgICBhZGREdXBsZXQodGhpcy5fX2VuZ2luZXMsIHRoaXMuX190cmFuc3BvcnRlZCwgZW5naW5lLCB0cmFuc3BvcnRlZCk7XG5cbiAgICAgICAgaWYgKHNwZWVkICE9PSAwKSB7XG4gICAgICAgICAgLy8gc3luYyBhbmQgc3RhcnRcbiAgICAgICAgICB2YXIgbmV4dEVuZ2luZVBvc2l0aW9uID0gdHJhbnNwb3J0ZWQuc3luY1Bvc2l0aW9uKHRoaXMuY3VycmVudFRpbWUsIHRoaXMuY3VycmVudFBvc2l0aW9uLCBzcGVlZCk7XG4gICAgICAgICAgdmFyIG5leHRQb3NpdGlvbiA9IHRoaXMuX190cmFuc3BvcnRlZFF1ZXVlLmluc2VydCh0cmFuc3BvcnRlZCwgbmV4dEVuZ2luZVBvc2l0aW9uKTtcblxuICAgICAgICAgIHRoaXMucmVzZXRQb3NpdGlvbihuZXh0UG9zaXRpb24pO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB0cmFuc3BvcnRlZDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBSZW1vdmUgYSB0aW1lIGVuZ2luZSBmcm9tIHRoZSB0cmFuc3BvcnQuXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge29iamVjdH0gZW5naW5lT3JUcmFuc3BvcnRlZCAtIGVuZ2luZSBvciB0cmFuc3BvcnRlZCB0byBiZSByZW1vdmVkIGZyb20gdGhlIHRyYW5zcG9ydFxuICAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6ICdyZW1vdmUnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiByZW1vdmUoZW5naW5lT3JUcmFuc3BvcnRlZCkge1xuICAgICAgdmFyIGVuZ2luZSA9IGVuZ2luZU9yVHJhbnNwb3J0ZWQ7XG4gICAgICB2YXIgdHJhbnNwb3J0ZWQgPSByZW1vdmVEdXBsZXQodGhpcy5fX2VuZ2luZXMsIHRoaXMuX190cmFuc3BvcnRlZCwgZW5naW5lT3JUcmFuc3BvcnRlZCk7XG5cbiAgICAgIGlmICghdHJhbnNwb3J0ZWQpIHtcbiAgICAgICAgZW5naW5lID0gcmVtb3ZlRHVwbGV0KHRoaXMuX190cmFuc3BvcnRlZCwgdGhpcy5fX2VuZ2luZXMsIGVuZ2luZU9yVHJhbnNwb3J0ZWQpO1xuICAgICAgICB0cmFuc3BvcnRlZCA9IGVuZ2luZU9yVHJhbnNwb3J0ZWQ7XG4gICAgICB9XG5cbiAgICAgIGlmIChlbmdpbmUgJiYgdHJhbnNwb3J0ZWQpIHtcbiAgICAgICAgdmFyIG5leHRQb3NpdGlvbiA9IHRoaXMuX190cmFuc3BvcnRlZFF1ZXVlLnJlbW92ZSh0cmFuc3BvcnRlZCk7XG5cbiAgICAgICAgdHJhbnNwb3J0ZWQuZGVzdHJveSgpO1xuXG4gICAgICAgIGlmICh0aGlzLl9fc3BlZWQgIT09IDApIHRoaXMucmVzZXRQb3NpdGlvbihuZXh0UG9zaXRpb24pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwib2JqZWN0IGhhcyBub3QgYmVlbiBhZGRlZCB0byB0aGlzIHRyYW5zcG9ydFwiKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBSZXNldCBwb3NpdGlvbiBvZiB0aGUgZ2l2ZW4gZW5naW5lLlxuICAgICAqXG4gICAgICogQHBhcmFtIHtUaW1lRW5naW5lfSB0cmFuc3BvcnRlZCAtIEVuZ2luZSB0byByZXNldFxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBwb3NpdGlvbiAtIE5ldyBwb3NpdGlvblxuICAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6ICdyZXNldEVuZ2luZVBvc2l0aW9uJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gcmVzZXRFbmdpbmVQb3NpdGlvbih0cmFuc3BvcnRlZCkge1xuICAgICAgdmFyIHBvc2l0aW9uID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMV0gOiB1bmRlZmluZWQ7XG5cbiAgICAgIHZhciBzcGVlZCA9IHRoaXMuX19zcGVlZDtcblxuICAgICAgaWYgKHNwZWVkICE9PSAwKSB7XG4gICAgICAgIGlmIChwb3NpdGlvbiA9PT0gdW5kZWZpbmVkKSBwb3NpdGlvbiA9IHRyYW5zcG9ydGVkLnN5bmNQb3NpdGlvbih0aGlzLmN1cnJlbnRUaW1lLCB0aGlzLmN1cnJlbnRQb3NpdGlvbiwgc3BlZWQpO1xuXG4gICAgICAgIHZhciBuZXh0UG9zaXRpb24gPSBudWxsO1xuXG4gICAgICAgIC8vIHRoZSBwcmlvcml0eSBxdWV1ZSBkb2VzIG5vdCBrZWVwIHRyYWNrIG9mIHRoZSBlbGVtZW50cyB0aGF0IGFyZVxuICAgICAgICAvLyBpbnNlcnRlZCBhdCBJbmZpbml0eSwgc28gd2UgbmVlZCB0byByZWluc2VydCB0cmFuc3BvcnRlZCBlbmdpbmUgaW5cbiAgICAgICAgLy8gdGhpcyBjYXNlLlxuICAgICAgICAvLyBAbm90ZSAtIHRoaXMgY291bGQgcHJvYmFibHkgYmUgbW9yZSBjbGVhblxuICAgICAgICAvLyAgICAgICAtIHByb2JhYmx5IHRoZSBwcmlvcml0eSBxdWV1ZSBzaG91bGQga2VlcCB0aGVzZSByZWZlcmVuY2VzXG4gICAgICAgIGlmICghdGhpcy5fX3RyYW5zcG9ydGVkUXVldWUuaGFzKHRyYW5zcG9ydGVkKSkge1xuICAgICAgICAgIG5leHRQb3NpdGlvbiA9IHRoaXMuX190cmFuc3BvcnRlZFF1ZXVlLmluc2VydCh0cmFuc3BvcnRlZCwgcG9zaXRpb24pO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIG5leHRQb3NpdGlvbiA9IHRoaXMuX190cmFuc3BvcnRlZFF1ZXVlLm1vdmUodHJhbnNwb3J0ZWQsIHBvc2l0aW9uKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMucmVzZXRQb3NpdGlvbihuZXh0UG9zaXRpb24pO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFJlbW92ZSBhbGwgdGltZSBlbmdpbmVzIGZyb20gdGhlIHRyYW5zcG9ydC5cbiAgICAgKi9cblxuICB9LCB7XG4gICAga2V5OiAnY2xlYXInLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBjbGVhcigpIHtcbiAgICAgIHRoaXMuc3luY1NwZWVkKHRoaXMuY3VycmVudFRpbWUsIHRoaXMuY3VycmVudFBvc2l0aW9uLCAwKTtcblxuICAgICAgdmFyIF9pdGVyYXRvck5vcm1hbENvbXBsZXRpb24yID0gdHJ1ZTtcbiAgICAgIHZhciBfZGlkSXRlcmF0b3JFcnJvcjIgPSBmYWxzZTtcbiAgICAgIHZhciBfaXRlcmF0b3JFcnJvcjIgPSB1bmRlZmluZWQ7XG5cbiAgICAgIHRyeSB7XG4gICAgICAgIGZvciAodmFyIF9pdGVyYXRvcjIgPSAoMCwgX2dldEl0ZXJhdG9yMy5kZWZhdWx0KSh0aGlzLl9fdHJhbnNwb3J0ZWQpLCBfc3RlcDI7ICEoX2l0ZXJhdG9yTm9ybWFsQ29tcGxldGlvbjIgPSAoX3N0ZXAyID0gX2l0ZXJhdG9yMi5uZXh0KCkpLmRvbmUpOyBfaXRlcmF0b3JOb3JtYWxDb21wbGV0aW9uMiA9IHRydWUpIHtcbiAgICAgICAgICB2YXIgdHJhbnNwb3J0ZWQgPSBfc3RlcDIudmFsdWU7XG5cbiAgICAgICAgICB0cmFuc3BvcnRlZC5kZXN0cm95KCk7XG4gICAgICAgIH1cbiAgICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgICBfZGlkSXRlcmF0b3JFcnJvcjIgPSB0cnVlO1xuICAgICAgICBfaXRlcmF0b3JFcnJvcjIgPSBlcnI7XG4gICAgICB9IGZpbmFsbHkge1xuICAgICAgICB0cnkge1xuICAgICAgICAgIGlmICghX2l0ZXJhdG9yTm9ybWFsQ29tcGxldGlvbjIgJiYgX2l0ZXJhdG9yMi5yZXR1cm4pIHtcbiAgICAgICAgICAgIF9pdGVyYXRvcjIucmV0dXJuKCk7XG4gICAgICAgICAgfVxuICAgICAgICB9IGZpbmFsbHkge1xuICAgICAgICAgIGlmIChfZGlkSXRlcmF0b3JFcnJvcjIpIHtcbiAgICAgICAgICAgIHRocm93IF9pdGVyYXRvckVycm9yMjtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6ICdjdXJyZW50VGltZScsXG4gICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICByZXR1cm4gdGhpcy5fX3NjaGVkdWxlci5jdXJyZW50VGltZTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBHZXQgbWFzdGVyIGF1ZGlvIHRpbWUuXG4gICAgICpcbiAgICAgKiBAdHlwZSB7TnVtYmVyfVxuICAgICAqIEBuYW1lIGN1cnJlbnRUaW1lXG4gICAgICogQG1lbWJlcm9mIFRyYW5zcG9ydFxuICAgICAqIEBpbnN0YW5jZVxuICAgICAqIEByZWFkb25seVxuICAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6ICdhdWRpb1RpbWUnLFxuICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgcmV0dXJuIHRoaXMuX19zY2hlZHVsZXIuYXVkaW9UaW1lO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEdldCBjdXJyZW50IG1hc3RlciBwb3NpdGlvbi4gVGhpcyBnZXR0ZXIgd2lsbCBiZSByZXBsYWNlZCB3aGVuIHRoZSB0cmFuc3BvcnRcbiAgICAgKiBpcyBhZGRlZCB0byBhIG1hc3RlciAoaS5lLiB0cmFuc3BvcnQgb3IgcGxheS1jb250cm9sKS5cbiAgICAgKlxuICAgICAqIEB0eXBlIHtOdW1iZXJ9XG4gICAgICogQG5hbWUgY3VycmVudFBvc2l0aW9uXG4gICAgICogQG1lbWJlcm9mIFRyYW5zcG9ydFxuICAgICAqIEBpbnN0YW5jZVxuICAgICAqIEByZWFkb25seVxuICAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6ICdjdXJyZW50UG9zaXRpb24nLFxuICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgdmFyIG1hc3RlciA9IHRoaXMubWFzdGVyO1xuXG4gICAgICBpZiAobWFzdGVyICYmIG1hc3Rlci5jdXJyZW50UG9zaXRpb24gIT09IHVuZGVmaW5lZCkgcmV0dXJuIG1hc3Rlci5jdXJyZW50UG9zaXRpb247XG5cbiAgICAgIHJldHVybiB0aGlzLl9fcG9zaXRpb24gKyAodGhpcy5fX3NjaGVkdWxlci5jdXJyZW50VGltZSAtIHRoaXMuX190aW1lKSAqIHRoaXMuX19zcGVlZDtcbiAgICB9XG4gIH1dKTtcbiAgcmV0dXJuIFRyYW5zcG9ydDtcbn0oX1RpbWVFbmdpbmU1LmRlZmF1bHQpO1xuXG5leHBvcnRzLmRlZmF1bHQgPSBUcmFuc3BvcnQ7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247Y2hhcnNldD11dGYtODtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJbFJ5WVc1emNHOXlkQzVxY3lKZExDSnVZVzFsY3lJNld5SmhaR1JFZFhCc1pYUWlMQ0ptYVhKemRFRnljbUY1SWl3aWMyVmpiMjVrUVhKeVlYa2lMQ0ptYVhKemRFVnNaVzFsYm5RaUxDSnpaV052Ym1SRmJHVnRaVzUwSWl3aWNIVnphQ0lzSW5KbGJXOTJaVVIxY0d4bGRDSXNJbWx1WkdWNElpd2lhVzVrWlhoUFppSXNJbk53YkdsalpTSXNJbFJ5WVc1emNHOXlkR1ZrSWl3aWRISmhibk53YjNKMElpd2laVzVuYVc1bElpd2ljM1JoY25RaUxDSmtkWEpoZEdsdmJpSXNJbTltWm5ObGRDSXNJbk4wY21WMFkyZ2lMQ0p0WVhOMFpYSWlMQ0pmWDJWdVoybHVaU0lzSWw5ZmMzUmhjblJRYjNOcGRHbHZiaUlzSWw5ZlpXNWtVRzl6YVhScGIyNGlMQ0pwYzBacGJtbDBaU0lzSWtsdVptbHVhWFI1SWl3aVgxOXZabVp6WlhSUWIzTnBkR2x2YmlJc0lsOWZjM1J5WlhSamFGQnZjMmwwYVc5dUlpd2lYMTlwYzFKMWJtNXBibWNpTENKeVpYTmxkRkJ2YzJsMGFXOXVJaXdpZEdsdFpTSXNJbkJ2YzJsMGFXOXVJaXdpYzNCbFpXUWlMQ0oxYm1SbFptbHVaV1FpTENKeVpYTmxkRVZ1WjJsdVpWQnZjMmwwYVc5dUlpd2ljM1J2Y0NJc0ltTjFjbkpsYm5SVWFXMWxJaXdpWVhWa2FXOVVhVzFsSWl3aVkzVnljbVZ1ZEZCdmMybDBhVzl1SWl3aVZHbHRaVVZ1WjJsdVpTSXNJbFJ5WVc1emNHOXlkR1ZrVkhKaGJuTndiM0owWldRaUxDSnpkR0Z5ZEZCdmMybDBhVzl1SWl3aVpXNWtVRzl6YVhScGIyNGlMQ0p2Wm1aelpYUlFiM05wZEdsdmJpSXNJbTVsZUhSUWIzTnBkR2x2YmlJc0luTjVibU5RYjNOcGRHbHZiaUlzSWsxaGRHZ2lMQ0pqWldsc0lpd2labXh2YjNJaUxDSmhaSFpoYm1ObFVHOXphWFJwYjI0aUxDSnplVzVqVTNCbFpXUWlMQ0pVY21GdWMzQnZjblJsWkZOd1pXVmtRMjl1ZEhKdmJHeGxaQ0lzSWxSeVlXNXpjRzl5ZEdWa1UyTm9aV1IxYkdWa0lpd2lYMTl6WTJobFpIVnNhVzVuVVhWbGRXVWlMQ0poWkdRaUxDSnlaWE5sZEVWdVoybHVaVlJwYldVaUxDSnlaVzF2ZG1VaUxDSlVjbUZ1YzNCdmNuUlRZMmhsWkhWc1pYSkliMjlySWl3aVgxOTBjbUZ1YzNCdmNuUWlMQ0pmWDI1bGVIUlFiM05wZEdsdmJpSXNJbDlmYm1WNGRGUnBiV1VpTENKZlgzTmphR1ZrZFd4bGNpSXNJbDlmYzNCbFpXUWlMQ0p1WlhoMFZHbHRaU0lzSWw5ZloyVjBWR2x0WlVGMFVHOXphWFJwYjI0aUxDSnlaWE5sZEZScGJXVWlMQ0pVY21GdWMzQnZjblJUWTJobFpIVnNhVzVuVVhWbGRXVWlMQ0pUWTJobFpIVnNhVzVuVVhWbGRXVWlMQ0pVY21GdWMzQnZjblFpTENKelkyaGxaSFZzWlhJaUxDSnZjSFJwYjI1eklpd2lSWEp5YjNJaUxDSmZYMlZ1WjJsdVpYTWlMQ0pmWDNSeVlXNXpjRzl5ZEdWa0lpd2lYMTl6WTJobFpIVnNaWEpJYjI5cklpd2lYMTkwY21GdWMzQnZjblJsWkZGMVpYVmxJaXdpVUhKcGIzSnBkSGxSZFdWMVpTSXNJbDlmZEdsdFpTSXNJbDlmY0c5emFYUnBiMjRpTENKdWRXMVVjbUZ1YzNCdmNuUmxaRVZ1WjJsdVpYTWlMQ0pzWlc1bmRHZ2lMQ0pqYkdWaGNpSXNJbkpsZG1WeWMyVWlMQ0pwSWl3aWJtVjRkRVZ1WjJsdVpWQnZjMmwwYVc5dUlpd2lhVzV6WlhKMElpd2lkSEpoYm5Od2IzSjBaV1FpTENKZlgzTjVibU5VY21GdWMzQnZjblJsWkZCdmMybDBhVzl1SWl3aWFHVmhaQ0lzSW0xdmRtVWlMQ0p6WldWcklpd2liR0Z6ZEZOd1pXVmtJaXdpWDE5emVXNWpWSEpoYm5Od2IzSjBaV1JUY0dWbFpDSXNJbWx0Y0d4bGJXVnVkSE5VY21GdWMzQnZjblJsWkNJc0ltbHRjR3hsYldWdWRITlRjR1ZsWkVOdmJuUnliMnhzWldRaUxDSnBiWEJzWlcxbGJuUnpVMk5vWldSMWJHVmtJaXdpWlc1bmFXNWxUM0pVY21GdWMzQnZjblJsWkNJc0ltUmxjM1J5YjNraUxDSm9ZWE1pWFN3aWJXRndjR2x1WjNNaU9pSTdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN1FVRkJRVHM3T3p0QlFVTkJPenM3TzBGQlEwRTdPenM3T3p0QlFVZEJMRk5CUVZOQkxGTkJRVlFzUTBGQmJVSkRMRlZCUVc1Q0xFVkJRU3RDUXl4WFFVRXZRaXhGUVVFMFEwTXNXVUZCTlVNc1JVRkJNRVJETEdGQlFURkVMRVZCUVhsRk8wRkJRM1pGU0N4aFFVRlhTU3hKUVVGWUxFTkJRV2RDUml4WlFVRm9RanRCUVVOQlJDeGpRVUZaUnl4SlFVRmFMRU5CUVdsQ1JDeGhRVUZxUWp0QlFVTkVPenRCUVVWRUxGTkJRVk5GTEZsQlFWUXNRMEZCYzBKTUxGVkJRWFJDTEVWQlFXdERReXhYUVVGc1F5eEZRVUVyUTBNc1dVRkJMME1zUlVGQk5rUTdRVUZETTBRc1RVRkJUVWtzVVVGQlVVNHNWMEZCVjA4c1QwRkJXQ3hEUVVGdFFrd3NXVUZCYmtJc1EwRkJaRHM3UVVGRlFTeE5RVUZKU1N4VFFVRlRMRU5CUVdJc1JVRkJaMEk3UVVGRFpDeFJRVUZOU0N4blFrRkJaMEpHTEZsQlFWbExMRXRCUVZvc1EwRkJkRUk3TzBGQlJVRk9MR1ZCUVZkUkxFMUJRVmdzUTBGQmEwSkdMRXRCUVd4Q0xFVkJRWGxDTEVOQlFYcENPMEZCUTBGTUxHZENRVUZaVHl4TlFVRmFMRU5CUVcxQ1JpeExRVUZ1UWl4RlFVRXdRaXhEUVVFeFFqczdRVUZGUVN4WFFVRlBTQ3hoUVVGUU8wRkJRMFE3TzBGQlJVUXNVMEZCVHl4SlFVRlFPMEZCUTBRN08wRkJSVVE3UVVGRFFUdEJRVU5CTzBGQlEwRTdPMGxCUTAxTkxGYzdPenRCUVVOS0xIVkNRVUZaUXl4VFFVRmFMRVZCUVhWQ1F5eE5RVUYyUWl4RlFVRXJRa01zUzBGQkwwSXNSVUZCYzBORExGRkJRWFJETEVWQlFXZEVReXhOUVVGb1JDeEZRVUZ4UlR0QlFVRkJMRkZCUVdKRExFOUJRV0VzZFVWQlFVZ3NRMEZCUnp0QlFVRkJPenRCUVVGQk96dEJRVVZ1UlN4VlFVRkxReXhOUVVGTUxFZEJRV05PTEZOQlFXUTdPMEZCUlVFc1ZVRkJTMDhzVVVGQlRDeEhRVUZuUWs0c1RVRkJhRUk3UVVGRFFVRXNWMEZCVDBzc1RVRkJVRHM3UVVGRlFTeFZRVUZMUlN4bFFVRk1MRWRCUVhWQ1RpeExRVUYyUWp0QlFVTkJMRlZCUVV0UExHRkJRVXdzUjBGQmNVSXNRMEZCUTBNc1UwRkJVMUFzVVVGQlZDeERRVUZFTEVkQlFYTkNVU3hSUVVGMFFpeEhRVUZwUTFRc1VVRkJVVU1zVVVGQk9VUTdRVUZEUVN4VlFVRkxVeXhuUWtGQlRDeEhRVUYzUWxZc1VVRkJVVVVzVFVGQmFFTTdRVUZEUVN4VlFVRkxVeXhwUWtGQlRDeEhRVUY1UWxJc1QwRkJla0k3UVVGRFFTeFZRVUZMVXl4WFFVRk1MRWRCUVcxQ0xFdEJRVzVDTzBGQldHMUZPMEZCV1hCRk96czdPMnREUVVWaFdpeExMRVZCUVU5RExGRXNSVUZCYlVNN1FVRkJRU3hWUVVGNlFrTXNUVUZCZVVJc2RVVkJRV2hDTEVOQlFXZENPMEZCUVVFc1ZVRkJZa01zVDBGQllTeDFSVUZCU0N4RFFVRkhPenRCUVVOMFJDeFhRVUZMUnl4bFFVRk1MRWRCUVhWQ1RpeExRVUYyUWp0QlFVTkJMRmRCUVV0UExHRkJRVXdzUjBGQmNVSlFMRkZCUVZGRExGRkJRVGRDTzBGQlEwRXNWMEZCUzFNc1owSkJRVXdzUjBGQmQwSldMRkZCUVZGRkxFMUJRV2hETzBGQlEwRXNWMEZCUzFNc2FVSkJRVXdzUjBGQmVVSlNMRTlCUVhwQ08wRkJRMEVzVjBGQlMxVXNZVUZCVER0QlFVTkVPenM3TUVKQlJVdERMRWtzUlVGQlRVTXNVU3hGUVVGVlF5eExMRVZCUVU4c1EwRkJSVHM3TzNsQ1FVTXhRa1lzU1N4RlFVRk5ReXhSTEVWQlFWVXNRMEZCUlRzN08ydERRV05VUVN4UkxFVkJRVlU3UVVGRGRFSXNWVUZCU1VFc1lVRkJZVVVzVTBGQmFrSXNSVUZEUlVZc1dVRkJXU3hMUVVGTFRDeG5Ra0ZCYWtJN08wRkJSVVlzVjBGQlMwNHNUVUZCVEN4RFFVRlpZeXh0UWtGQldpeERRVUZuUXl4SlFVRm9ReXhGUVVGelEwZ3NVVUZCZEVNN1FVRkRSRHM3TzJsRFFVVlpSQ3hKTEVWQlFVMURMRkVzUlVGQlZVTXNTeXhGUVVGUE8wRkJRMnhETEZWQlFVbEJMRkZCUVZFc1EwRkJXaXhGUVVGbE8wRkJRMklzV1VGQlNVUXNWMEZCVnl4TFFVRkxWQ3hsUVVGd1FpeEZRVUZ4UXpzN1FVRkZia01zWTBGQlNTeExRVUZMVFN4WFFVRlVMRVZCUTBVc1MwRkJTMDhzU1VGQlRDeERRVUZWVEN4SlFVRldMRVZCUVdkQ1F5eFhRVUZYTEV0QlFVdE1MR2RDUVVGb1F6czdRVUZGUml4bFFVRkxSU3hYUVVGTUxFZEJRVzFDTEV0QlFXNUNPMEZCUTBFc2FVSkJRVThzUzBGQlMwNHNaVUZCV2p0QlFVTkVMRk5CVUVRc1RVRlBUeXhKUVVGSlV5eFhRVUZYTEV0QlFVdFNMR0ZCUVhCQ0xFVkJRVzFETzBGQlEzaERMR1ZCUVV0UUxFdEJRVXdzUTBGQlYyTXNTVUZCV0N4RlFVRnBRa01zVjBGQlZ5eExRVUZMVEN4blFrRkJha01zUlVGQmJVUk5MRXRCUVc1RU96dEJRVVZCTEdWQlFVdEtMRmRCUVV3c1IwRkJiVUlzU1VGQmJrSTdRVUZEUVN4cFFrRkJUeXhMUVVGTFRDeGhRVUZhTzBGQlEwUTdRVUZEUml4UFFXUkVMRTFCWTA4N1FVRkRUQ3haUVVGSlVTeFhRVUZYTEV0QlFVdFNMR0ZCUVhCQ0xFVkJRVzFETzBGQlEycERMR05CUVVrc1MwRkJTMHNzVjBGQlZDeEZRVUZ6UWp0QlFVTndRaXhwUWtGQlMwOHNTVUZCVEN4RFFVRlZUQ3hKUVVGV0xFVkJRV2RDUXl4WFFVRlhMRXRCUVV0TUxHZENRVUZvUXpzN1FVRkZSaXhsUVVGTFJTeFhRVUZNTEVkQlFXMUNMRXRCUVc1Q08wRkJRMEVzYVVKQlFVOHNTMEZCUzB3c1lVRkJXanRCUVVORUxGTkJUa1FzVFVGTlR5eEpRVUZKVVN4WFFVRlhMRXRCUVV0VUxHVkJRWEJDTEVWQlFYRkRPMEZCUXpGRExHVkJRVXRPTEV0QlFVd3NRMEZCVjJNc1NVRkJXQ3hGUVVGcFFrTXNWMEZCVnl4TFFVRkxUQ3huUWtGQmFrTXNSVUZCYlVSTkxFdEJRVzVFT3p0QlFVVkJMR1ZCUVV0S0xGZEJRVXdzUjBGQmJVSXNTVUZCYmtJN1FVRkRRU3hwUWtGQlR5eExRVUZMVGl4bFFVRmFPMEZCUTBRN1FVRkRSanM3UVVGRlJDeFZRVUZKTEV0QlFVdE5MRmRCUVZRc1JVRkJjMEk3UVVGRGNFSXNZVUZCUzA4c1NVRkJUQ3hEUVVGVlRDeEpRVUZXTEVWQlFXZENReXhSUVVGb1FqczdRVUZGUml4WFFVRkxTQ3hYUVVGTUxFZEJRVzFDTEV0QlFXNUNPMEZCUTBFc1lVRkJUMGdzVjBGQlYwOHNTMEZCYkVJN1FVRkRSRHM3TzI5RFFVVmxSaXhKTEVWQlFVMURMRkVzUlVGQlZVTXNTeXhGUVVGUE8wRkJRM0pETEZWQlFVa3NRMEZCUXl4TFFVRkxTaXhYUVVGV0xFVkJRWFZDTzBGQlEzSkNMR0ZCUVV0YUxFdEJRVXdzUTBGQlYyTXNTVUZCV0N4RlFVRnBRa01zVjBGQlZ5eExRVUZMVEN4blFrRkJha01zUlVGQmJVUk5MRXRCUVc1RU8wRkJRMEVzWVVGQlMwb3NWMEZCVEN4SFFVRnRRaXhKUVVGdVFqczdRVUZGUVN4WlFVRkpTU3hSUVVGUkxFTkJRVm9zUlVGRFJTeFBRVUZQTEV0QlFVdFVMR0ZCUVZvN08wRkJSVVlzWlVGQlR5eExRVUZMUkN4bFFVRmFPMEZCUTBRN08wRkJSVVE3UVVGRFFTeFhRVUZMWVN4SlFVRk1MRU5CUVZWTUxFbEJRVllzUlVGQlowSkRMRmRCUVZjc1MwRkJTMHdzWjBKQlFXaERPenRCUVVWQkxGZEJRVXRGTEZkQlFVd3NSMEZCYlVJc1MwRkJia0k3UVVGRFFTeGhRVUZQU0N4WFFVRlhUeXhMUVVGc1FqdEJRVU5FT3pzN09FSkJSVk5HTEVrc1JVRkJUVU1zVVN4RlFVRlZReXhMTEVWQlFVODdRVUZETDBJc1ZVRkJTVUVzVlVGQlZTeERRVUZrTEVWQlFXbENPMEZCUTJZc1lVRkJTMGNzU1VGQlRDeERRVUZWVEN4SlFVRldMRVZCUVdkQ1F5eFhRVUZYTEV0QlFVdE1MR2RDUVVGb1F6dEJRVU5FTzBGQlEwWTdPenM0UWtGRlV6dEJRVU5TTEZkQlFVdE9MRTFCUVV3c1IwRkJZeXhKUVVGa096dEJRVVZCTEZkQlFVdERMRkZCUVV3c1EwRkJZMFFzVFVGQlpDeEhRVUYxUWl4SlFVRjJRanRCUVVOQkxGZEJRVXRETEZGQlFVd3NSMEZCWjBJc1NVRkJhRUk3UVVGRFJEczdPM2RDUVhKR2FVSTdRVUZEYUVJc1lVRkJUeXhMUVVGTFJDeE5RVUZNTEVOQlFWbG5RaXhYUVVGdVFqdEJRVU5FT3pzN2QwSkJSV1U3UVVGRFpDeGhRVUZQTEV0QlFVdG9RaXhOUVVGTUxFTkJRVmxwUWl4VFFVRnVRanRCUVVORU96czdkMEpCUlhGQ08wRkJRM0JDTEdGQlFVOHNTMEZCUzJwQ0xFMUJRVXdzUTBGQldXdENMR1ZCUVZvc1IwRkJPRUlzUzBGQlMxb3NaMEpCUVRGRE8wRkJRMFE3T3p0RlFYQkRkVUpoTEc5Q096dEJRV3RJTVVJN1FVRkRRVHRCUVVOQk96czdTVUZEVFVNc2MwSTdPenRCUVVOS0xHdERRVUZaTVVJc1UwRkJXaXhGUVVGMVFrTXNUVUZCZGtJc1JVRkJLMEl3UWl4aFFVRXZRaXhGUVVFNFEwTXNWMEZCT1VNc1JVRkJNa1JETEdOQlFUTkVMRVZCUVRKRk8wRkJRVUU3UVVGQlFTeHBTMEZEYmtVM1FpeFRRVVJ0UlN4RlFVTjRSRU1zVFVGRWQwUXNSVUZEYUVRd1FpeGhRVVJuUkN4RlFVTnFRME1zVjBGRWFVTXNSVUZEY0VKRExHTkJSRzlDTzBGQlJURkZPenRCUVVWRU96czdPenRwUTBGRFlXSXNTU3hGUVVGTlF5eFJMRVZCUVZWRExFc3NSVUZCVHp0QlFVTnNReXhWUVVGSldTeGxRVUZsTEVsQlFXNUNMRU5CUkd0RExFTkJRMVE3TzBGQlJYcENMRlZCUVVsYUxGRkJRVkVzUTBGQldpeEZRVUZsT3p0QlFVVmlMRmxCUVVsRUxGZEJRVmNzUzBGQlMxUXNaVUZCY0VJc1JVRkJjVU03UVVGRGJrTTdRVUZEUVhOQ0xIbENRVUZsTEV0QlFVdHNRaXhuUWtGQlRDeEhRVUYzUWl4TFFVRkxUQ3hSUVVGTUxFTkJRV04zUWl4WlFVRmtMRU5CUVRKQ1ppeEpRVUV6UWl4RlFVRnBReXhMUVVGTFVpeGxRVUZNTEVkQlFYVkNMRXRCUVV0SkxHZENRVUUzUkN4RlFVRXJSVTBzUzBGQkwwVXNRMEZCZGtNN1FVRkRRU3hsUVVGTFNpeFhRVUZNTEVkQlFXMUNMRWxCUVc1Q08wRkJRMFFzVTBGS1JDeE5RVWxQTEVsQlFVbEhMRmRCUVZjc1MwRkJTMUlzWVVGQmNFSXNSVUZCYlVNN1FVRkRlRU03UVVGRFFYRkNMSGxDUVVGbExFdEJRVXRzUWl4blFrRkJUQ3hIUVVGM1FpeExRVUZMVEN4UlFVRk1MRU5CUVdOM1FpeFpRVUZrTEVOQlFUSkNaaXhKUVVFelFpeEZRVUZwUTBNc1YwRkJWeXhMUVVGTFRDeG5Ra0ZCYWtRc1JVRkJiVVZOTEV0QlFXNUZMRU5CUVhaRE8wRkJRMEVzWlVGQlMwb3NWMEZCVEN4SFFVRnRRaXhKUVVGdVFqdEJRVU5FTEZOQlNrMHNUVUZKUVR0QlFVTk1MR1ZCUVV0UUxGRkJRVXdzUTBGQlkzZENMRmxCUVdRc1EwRkJNa0ptTEVsQlFUTkNMRVZCUVdsRFF5eFhRVUZYTEV0QlFVdE1MR2RDUVVGcVJDeEZRVUZ0UlN4RFFVRnVSVHM3UVVGRlFTeGxRVUZMUlN4WFFVRk1MRWRCUVcxQ0xFdEJRVzVDTzBGQlEwRm5RaXg1UWtGQlpXNUNMRmRCUVZkUExFdEJRVEZDTzBGQlEwUTdPMEZCUlVRN1FVRkRRU3haUVVGSkxFdEJRVXRLTEZkQlFVd3NTVUZCYjBKblFpeGxRVUZsTEV0QlFVdHlRaXhoUVVFMVF5eEZRVUV5UkR0QlFVTjZSSEZDTEhsQ1FVRmxMRXRCUVV0eVFpeGhRVUZ3UWp0QlFVTkVPMEZCUlVZc1QwRjBRa1FzVFVGelFrOHNTVUZCU1ZNc1VVRkJVU3hEUVVGYUxFVkJRV1U3TzBGQlJYQkNMRmxCUVVsRUxGZEJRVmNzUzBGQlMxSXNZVUZCY0VJc1JVRkJiVU03UVVGRGFrTnhRaXg1UWtGQlpTeExRVUZMYkVJc1owSkJRVXdzUjBGQmQwSXNTMEZCUzB3c1VVRkJUQ3hEUVVGamQwSXNXVUZCWkN4RFFVRXlRbVlzU1VGQk0wSXNSVUZCYVVNc1MwRkJTMUFzWVVGQlRDeEhRVUZ4UWl4TFFVRkxSeXhuUWtGQk0wUXNSVUZCTmtWTkxFdEJRVGRGTEVOQlFYWkRPMEZCUTBFc1pVRkJTMG9zVjBGQlRDeEhRVUZ0UWl4SlFVRnVRanRCUVVORUxGTkJTRVFzVFVGSFR5eEpRVUZKUnl4WFFVRlhMRXRCUVV0VUxHVkJRWEJDTEVWQlFYRkRPMEZCUXpGRGMwSXNlVUpCUVdVc1MwRkJTMnhDTEdkQ1FVRk1MRWRCUVhkQ0xFdEJRVXRNTEZGQlFVd3NRMEZCWTNkQ0xGbEJRV1FzUTBGQk1rSm1MRWxCUVROQ0xFVkJRV2xEUXl4WFFVRlhMRXRCUVV0TUxHZENRVUZxUkN4RlFVRnRSVTBzUzBGQmJrVXNRMEZCZGtNN1FVRkRRU3hsUVVGTFNpeFhRVUZNTEVkQlFXMUNMRWxCUVc1Q08wRkJRMFFzVTBGSVRTeE5RVWRCTzBGQlEwd3NaVUZCUzFBc1VVRkJUQ3hEUVVGamQwSXNXVUZCWkN4RFFVRXlRbVlzU1VGQk0wSXNSVUZCYVVORExGZEJRVmNzUzBGQlMwd3NaMEpCUVdwRUxFVkJRVzFGTEVOQlFXNUZPenRCUVVWQkxHVkJRVXRGTEZkQlFVd3NSMEZCYlVJc1MwRkJia0k3UVVGRFFXZENMSGxDUVVGbGJrSXNWMEZCVjA4c1MwRkJNVUk3UVVGRFJEczdRVUZGUkR0QlFVTkJMRmxCUVVrc1MwRkJTMG9zVjBGQlRDeEpRVUZ2UW1kQ0xHVkJRV1VzUzBGQlMzUkNMR1ZCUVRWRExFVkJRVFpFTzBGQlF6TkVjMElzZVVKQlFXVXNTMEZCUzNSQ0xHVkJRWEJDTzBGQlEwUTdRVUZGUml4UFFYQkNUU3hOUVc5Q1FUdEJRVU5NTEdGQlFVdEVMRkZCUVV3c1EwRkJZM2RDTEZsQlFXUXNRMEZCTWtKbUxFbEJRVE5DTEVWQlFXbERReXhYUVVGWExFdEJRVXRNTEdkQ1FVRnFSQ3hGUVVGdFJTeERRVUZ1UlRzN1FVRkZRU3hoUVVGTFJTeFhRVUZNTEVkQlFXMUNMRXRCUVc1Q08wRkJRMEZuUWl4MVFrRkJaVzVDTEZGQlFXWTdRVUZEUkRzN1FVRkZSQ3hoUVVGUGJVSXNXVUZCVUR0QlFVTkVPenM3YjBOQlJXVmtMRWtzUlVGQlRVTXNVU3hGUVVGVlF5eExMRVZCUVU4N1FVRkRja003UVVGRFFUdEJRVU5CTEZWQlFVbEJMRkZCUVZFc1EwRkJXaXhGUVVGbE8wRkJRMkpFTEcxQ1FVRlhaU3hMUVVGTFF5eEpRVUZNTEVOQlFWVm9RaXhYUVVGWExFZEJRWEpDTEVsQlFUUkNMRWxCUVhaRE8wRkJRMFFzVDBGR1JDeE5RVVZQTEVsQlFVbERMRkZCUVZFc1EwRkJXaXhGUVVGbE8wRkJRM0JDUkN4dFFrRkJWMlVzUzBGQlMwVXNTMEZCVEN4RFFVRlhha0lzVjBGQlZ5eEhRVUYwUWl4SlFVRTJRaXhKUVVGNFF6dEJRVU5FT3p0QlFVVkVPMEZCUTBFc1ZVRkJTVU1zVVVGQlVTeERRVUZTTEVsQlFXRkVMRmxCUVZrc1MwRkJTMUlzWVVGQk9VSXNTVUZCSzBNc1MwRkJTMHNzVjBGQmVFUXNSVUZCY1VVN1FVRkRia1U3UVVGRFFTeGhRVUZMVUN4UlFVRk1MRU5CUVdOM1FpeFpRVUZrTEVOQlFUSkNaaXhKUVVFelFpeEZRVUZwUXl4TFFVRkxVQ3hoUVVGTUxFZEJRWEZDTEV0QlFVdEhMR2RDUVVFelJDeEZRVUUyUlN4RFFVRTNSVHRCUVVOQkxHRkJRVXRGTEZkQlFVd3NSMEZCYlVJc1MwRkJia0k3TzBGQlJVRXNaVUZCVDBnc1YwRkJWMDhzUzBGQmJFSXNRMEZNYlVVc1EwRkxNVU03UVVGRE1VSXNUMEZPUkN4TlFVMVBMRWxCUVVsQkxGRkJRVkVzUTBGQlVpeEpRVUZoUkN4WFFVRlhMRXRCUVV0VUxHVkJRVGRDTEVsQlFXZEVMRXRCUVV0TkxGZEJRWHBFTEVWQlFYTkZPMEZCUXpORkxHRkJRVXRRTEZGQlFVd3NRMEZCWTNkQ0xGbEJRV1FzUTBGQk1rSm1MRWxCUVROQ0xFVkJRV2xETEV0QlFVdFNMR1ZCUVV3c1IwRkJkVUlzUzBGQlMwa3NaMEpCUVRkRUxFVkJRU3RGTEVOQlFTOUZPMEZCUTBFc1lVRkJTMFVzVjBGQlRDeEhRVUZ0UWl4TFFVRnVRanM3UVVGRlFTeGxRVUZQU0N4WFFVRlhUeXhMUVVGc1FpeERRVW95UlN4RFFVbHNSRHRCUVVNeFFqczdRVUZGUkR0QlFVTkJSQ3hwUWtGQlZ5eExRVUZMVEN4blFrRkJUQ3hIUVVGM1FpeExRVUZMVEN4UlFVRk1MRU5CUVdNMFFpeGxRVUZrTEVOQlFUaENia0lzU1VGQk9VSXNSVUZCYjBORExGZEJRVmNzUzBGQlMwd3NaMEpCUVhCRUxFVkJRWE5GVFN4TFFVRjBSU3hEUVVGdVF6czdRVUZGUVR0QlFVTkJPMEZCUTBFc1ZVRkJTVUVzVVVGQlVTeERRVUZTTEVsQlFXRkVMRmRCUVZjc1MwRkJTMUlzWVVGQmFrTXNSVUZCWjBRN1FVRkRPVU5STEcxQ1FVRlhMRXRCUVV0U0xHRkJRV2hDTzBGQlEwUXNUMEZHUkN4TlFVVlBMRWxCUVVsVExGRkJRVkVzUTBGQlVpeEpRVUZoUkN4WFFVRlhMRXRCUVV0VUxHVkJRV3BETEVWQlFXdEVPMEZCUTNaRVV5eHRRa0ZCVnl4TFFVRkxWQ3hsUVVGb1FqdEJRVU5FT3p0QlFVVkVMR0ZCUVU5VExGRkJRVkE3UVVGRFJEczdPemhDUVVWVFJDeEpMRVZCUVUxRExGRXNSVUZCVlVNc1N5eEZRVUZQTzBGQlF5OUNMRlZCUVVrc1MwRkJTMWdzVVVGQlRDeERRVUZqTmtJc1UwRkJiRUlzUlVGQk5rSTdRVUZETTBJc1lVRkJTemRDTEZGQlFVd3NRMEZCWXpaQ0xGTkJRV1FzUTBGQmQwSndRaXhKUVVGNFFpeEZRVUU0UWtNc1VVRkJPVUlzUlVGQmQwTkRMRXRCUVhoRE8wRkJRMFE3UVVGRFJqczdPM2REUVVWdFFtcENMRTBzUlVGQk9FSTdRVUZCUVN4VlFVRjBRbWRDTEZGQlFYTkNMSFZGUVVGWVJTeFRRVUZYT3p0QlFVTm9SQ3hWUVVGSlJpeGhRVUZoUlN4VFFVRnFRaXhGUVVFMFFqdEJRVU14UWtZc2IwSkJRVmtzUzBGQlMwd3NaMEpCUVdwQ08wRkJRMFE3TzBGQlJVUXNWMEZCUzA0c1RVRkJUQ3hEUVVGWll5eHRRa0ZCV2l4RFFVRm5ReXhKUVVGb1F5eEZRVUZ6UTBnc1VVRkJkRU03UVVGRFJEczdPemhDUVVWVE8wRkJRMUlzVjBGQlMxWXNVVUZCVEN4RFFVRmpkMElzV1VGQlpDeERRVUV5UWl4TFFVRkxla0lzVFVGQlRDeERRVUZaWjBJc1YwRkJka01zUlVGQmIwUXNTMEZCUzJoQ0xFMUJRVXdzUTBGQldXdENMR1ZCUVdoRkxFVkJRV2xHTEVOQlFXcEdPMEZCUTBFN1FVRkRSRHM3TzBWQmJraHJRM3BDTEZjN08wRkJjMGh5UXp0QlFVTkJPenM3U1VGRFRYTkRMREJDT3pzN1FVRkRTaXh6UTBGQldYSkRMRk5CUVZvc1JVRkJkVUpETEUxQlFYWkNMRVZCUVN0Q01FSXNZVUZCTDBJc1JVRkJPRU5ETEZkQlFUbERMRVZCUVRKRVF5eGpRVUV6UkN4RlFVRXlSVHRCUVVGQk8wRkJRVUVzZVV0QlEyNUZOMElzVTBGRWJVVXNSVUZEZUVSRExFMUJSSGRFTEVWQlEyaEVNRUlzWVVGRVowUXNSVUZEYWtORExGZEJSR2xETEVWQlEzQkNReXhqUVVSdlFqdEJRVVV4UlRzN096c3dRa0ZGUzJJc1NTeEZRVUZOUXl4UkxFVkJRVlZETEVzc1JVRkJUenRCUVVNelFpeFhRVUZMV0N4UlFVRk1MRU5CUVdNMlFpeFRRVUZrTEVOQlFYZENjRUlzU1VGQmVFSXNSVUZCT0VKRExGRkJRVGxDTEVWQlFYZERReXhMUVVGNFF5eEZRVUVyUXl4SlFVRXZRenRCUVVORU96czdlVUpCUlVsR0xFa3NSVUZCVFVNc1VTeEZRVUZWTzBGQlEyNUNMRmRCUVV0V0xGRkJRVXdzUTBGQll6WkNMRk5CUVdRc1EwRkJkMEp3UWl4SlFVRjRRaXhGUVVFNFFrTXNVVUZCT1VJc1JVRkJkME1zUTBGQmVFTTdRVUZEUkRzN096aENRVVZUUkN4SkxFVkJRVTFETEZFc1JVRkJWVU1zU3l4RlFVRlBPMEZCUXk5Q0xGVkJRVWtzUzBGQlMwb3NWMEZCVkN4RlFVTkZMRXRCUVV0UUxGRkJRVXdzUTBGQll6WkNMRk5CUVdRc1EwRkJkMEp3UWl4SlFVRjRRaXhGUVVFNFFrTXNVVUZCT1VJc1JVRkJkME5ETEV0QlFYaERPMEZCUTBnN096czRRa0ZGVXp0QlFVTlNMRmRCUVV0WUxGRkJRVXdzUTBGQll6WkNMRk5CUVdRc1EwRkJkMElzUzBGQlN6bENMRTFCUVV3c1EwRkJXV2RDTEZkQlFYQkRMRVZCUVdsRUxFdEJRVXRvUWl4TlFVRk1MRU5CUVZsclFpeGxRVUZhTEVkQlFUaENMRXRCUVV0YUxHZENRVUZ3Uml4RlFVRnpSeXhEUVVGMFJ6dEJRVU5CTzBGQlEwUTdPenRGUVhKQ2MwTmlMRmM3TzBGQmQwSjZRenRCUVVOQk96czdTVUZEVFhWRExHOUNPenM3UVVGRFNpeG5RMEZCV1hSRExGTkJRVm9zUlVGQmRVSkRMRTFCUVhaQ0xFVkJRU3RDTUVJc1lVRkJMMElzUlVGQk9FTkRMRmRCUVRsRExFVkJRVEpFUXl4alFVRXpSQ3hGUVVFeVJUdEJRVUZCT3p0QlFVZDZSVHRCUVVoNVJTeHRTMEZEYmtVM1FpeFRRVVJ0UlN4RlFVTjRSRU1zVFVGRWQwUXNSVUZEYUVRd1FpeGhRVVJuUkN4RlFVTnFRME1zVjBGRWFVTXNSVUZEY0VKRExHTkJSRzlDT3p0QlFVbDZSVFZDTEZkQlFVOUxMRTFCUVZBc1IwRkJaMElzU1VGQmFFSTdRVUZEUVU0c1kwRkJWWFZETEdsQ1FVRldMRU5CUVRSQ1F5eEhRVUUxUWl4RFFVRm5RM1pETEUxQlFXaERMRVZCUVhkRFZTeFJRVUY0UXp0QlFVeDVSVHRCUVUweFJUczdPenN3UWtGRlMwc3NTU3hGUVVGTlF5eFJMRVZCUVZWRExFc3NSVUZCVHp0QlFVTXpRaXhYUVVGTFdpeE5RVUZNTEVOQlFWbHBReXhwUWtGQldpeERRVUU0UWtVc1pVRkJPVUlzUTBGQk9FTXNTMEZCUzJ4RExGRkJRVzVFTEVWQlFUWkVVeXhKUVVFM1JEdEJRVU5FT3pzN2VVSkJSVWxCTEVrc1JVRkJUVU1zVVN4RlFVRlZPMEZCUTI1Q0xGZEJRVXRZTEUxQlFVd3NRMEZCV1dsRExHbENRVUZhTEVOQlFUaENSU3hsUVVFNVFpeERRVUU0UXl4TFFVRkxiRU1zVVVGQmJrUXNSVUZCTmtSSkxGRkJRVGRFTzBGQlEwUTdPenM0UWtGRlV6dEJRVU5TTEZkQlFVdE1MRTFCUVV3c1EwRkJXV2xETEdsQ1FVRmFMRU5CUVRoQ1J5eE5RVUU1UWl4RFFVRnhReXhMUVVGTGJrTXNVVUZCTVVNN1FVRkRRVHRCUVVORU96czdSVUZ3UW1kRFVpeFhPenRCUVhWQ2JrTTdPenRKUVVOTk5FTXNjMEk3T3p0QlFVTktMR3REUVVGWk0wTXNVMEZCV2l4RlFVRjFRanRCUVVGQk96dEJRVUZCT3p0QlFVZHlRaXhYUVVGTE5FTXNWMEZCVEN4SFFVRnRRalZETEZOQlFXNUNPenRCUVVWQkxGZEJRVXMyUXl4alFVRk1MRWRCUVhOQ2JFTXNVVUZCZEVJN1FVRkRRU3hYUVVGTGJVTXNWVUZCVEN4SFFVRnJRbTVETEZGQlFXeENPMEZCUTBGWUxHTkJRVlVyUXl4WFFVRldMRU5CUVhOQ1VDeEhRVUYwUWl4VFFVRm5RemRDTEZGQlFXaERPMEZCVUhGQ08wRkJVWFJDT3p0QlFVVkVPenM3T3p0blEwRkRXVXNzU1N4RlFVRk5PMEZCUTJoQ0xGVkJRVTFvUWl4WlFVRlpMRXRCUVVzMFF5eFhRVUYyUWp0QlFVTkJMRlZCUVUwelFpeFhRVUZYTEV0QlFVczBRaXhqUVVGMFFqdEJRVU5CTEZWQlFVMHpRaXhSUVVGUmJFSXNWVUZCVldkRUxFOUJRWGhDTzBGQlEwRXNWVUZCVFd4Q0xHVkJRV1U1UWl4VlFVRlZiVU1zWlVGQlZpeERRVUV3UW01Q0xFbEJRVEZDTEVWQlFXZERReXhSUVVGb1F5eEZRVUV3UTBNc1MwRkJNVU1zUTBGQmNrSTdRVUZEUVN4VlFVRk5LMElzVjBGQlYycEVMRlZCUVZWclJDeHRRa0ZCVml4RFFVRTRRbkJDTEZsQlFUbENMRU5CUVdwQ096dEJRVVZCTEZkQlFVdGxMR05CUVV3c1IwRkJjMEptTEZsQlFYUkNPMEZCUTBFc1YwRkJTMmRDTEZWQlFVd3NSMEZCYTBKSExGRkJRV3hDT3p0QlFVVkJMR0ZCUVU5QkxGRkJRVkE3UVVGRFJEczdPMjlEUVVVMlF6dEJRVUZCTEZWQlFXaERhRU1zVVVGQlowTXNkVVZCUVhKQ0xFdEJRVXMwUWl4alFVRm5RanM3UVVGRE5VTXNWVUZCVFRkRExGbEJRVmtzUzBGQlN6UkRMRmRCUVhaQ08wRkJRMEVzVlVGQlRUVkNMRTlCUVU5b1FpeFZRVUZWYTBRc2JVSkJRVllzUTBGQk9FSnFReXhSUVVFNVFpeERRVUZpT3p0QlFVVkJMRmRCUVVzMFFpeGpRVUZNTEVkQlFYTkNOVUlzVVVGQmRFSTdRVUZEUVN4WFFVRkxOa0lzVlVGQlRDeEhRVUZyUWpsQ0xFbEJRV3hDT3p0QlFVVkJMRmRCUVV0dFF5eFRRVUZNTEVOQlFXVnVReXhKUVVGbU8wRkJRMFE3T3pzNFFrRkZVenRCUVVOU0xGZEJRVXMwUWl4WFFVRk1MRU5CUVdsQ1J5eFhRVUZxUWl4RFFVRTJRa3dzVFVGQk4wSXNRMEZCYjBNc1NVRkJjRU03UVVGRFFTeFhRVUZMUlN4WFFVRk1MRWRCUVcxQ0xFbEJRVzVDTzBGQlEwUTdPenRGUVhSRGEwTnVRaXh2UWpzN1FVRjVRM0pET3pzN1NVRkRUVEpDTEhkQ096czdRVUZEU2l4dlEwRkJXWEJFTEZOQlFWb3NSVUZCZFVJN1FVRkJRVHM3UVVGQlFUczdRVUZIY2tJc1YwRkJTelJETEZkQlFVd3NSMEZCYlVJMVF5eFRRVUZ1UWp0QlFVTkJRU3hqUVVGVkswTXNWMEZCVml4RFFVRnpRbEFzUjBGQmRFSXNVMEZCWjBNM1FpeFJRVUZvUXp0QlFVcHhRanRCUVV0MFFqczdPenM0UWtGalV6dEJRVU5TTEZkQlFVdHBReXhYUVVGTUxFTkJRV2xDUnl4WFFVRnFRaXhEUVVFMlFrd3NUVUZCTjBJc1EwRkJiME1zU1VGQmNFTTdRVUZEUVN4WFFVRkxSU3hYUVVGTUxFZEJRVzFDTEVsQlFXNUNPMEZCUTBRN096dDNRa0ZtYVVJN1FVRkRhRUlzWVVGQlR5eExRVUZMUVN4WFFVRk1MRU5CUVdsQ2RFSXNWMEZCZUVJN1FVRkRSRHM3TzNkQ1FVVmxPMEZCUTJRc1lVRkJUeXhMUVVGTGMwSXNWMEZCVEN4RFFVRnBRbkpDTEZOQlFYaENPMEZCUTBRN096dDNRa0ZGY1VJN1FVRkRjRUlzWVVGQlR5eExRVUZMY1VJc1YwRkJUQ3hEUVVGcFFuQkNMR1ZCUVhoQ08wRkJRMFE3T3p0RlFXeENiME0yUWl4NVFqczdRVUV3UW5aRE96czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN08wbEJNRUpOUXl4VE96czdRVUZEU2l4eFFrRkJXVU1zVTBGQldpeEZRVUZ4UXp0QlFVRkJMRkZCUVdSRExFOUJRV01zZFVWQlFVb3NSVUZCU1R0QlFVRkJPenRCUVVGQk96dEJRVWR1UXl4UlFVRkpMRU5CUVVORUxGTkJRVXdzUlVGRFJTeE5RVUZOTEVsQlFVbEZMRXRCUVVvc1EwRkJWU3h2UlVGQlZpeERRVUZPT3p0QlFVVkdMRmRCUVV0RExGTkJRVXdzUjBGQmFVSXNSVUZCYWtJN1FVRkRRU3hYUVVGTFF5eGhRVUZNTEVkQlFYRkNMRVZCUVhKQ096dEJRVVZCTEZkQlFVdGFMRmRCUVV3c1IwRkJiVUpSTEZOQlFXNUNPMEZCUTBFc1YwRkJTMHNzWlVGQlRDeEhRVUYxUWl4SlFVRkpha0lzYzBKQlFVb3NVVUZCZGtJN1FVRkRRU3hYUVVGTGEwSXNhMEpCUVV3c1IwRkJNRUlzU1VGQlNVTXNkVUpCUVVvc1JVRkJNVUk3UVVGRFFTeFhRVUZMZGtJc2FVSkJRVXdzUjBGQmVVSXNTVUZCU1dFc2QwSkJRVW9zVVVGQmVrSTdPMEZCUlVFN1FVRkRRU3hYUVVGTFZ5eE5RVUZNTEVkQlFXTXNRMEZCWkR0QlFVTkJMRmRCUVV0RExGVkJRVXdzUjBGQmEwSXNRMEZCYkVJN1FVRkRRU3hYUVVGTGFFSXNUMEZCVEN4SFFVRmxMRU5CUVdZN1FVRnFRbTFETzBGQmEwSndRenM3T3p0M1EwRkZiVUl2UWl4UkxFVkJRVlU3UVVGRE5VSXNWVUZCU1N4TFFVRkxLMElzVDBGQlRDeExRVUZwUWl4RFFVRnlRaXhGUVVORkxFOUJRVThzUTBGQlEzSkRMRkZCUVZJc1EwRkVSaXhMUVVkRkxFOUJRVThzUzBGQlMyOUVMRTFCUVV3c1IwRkJZeXhEUVVGRE9VTXNWMEZCVnl4TFFVRkxLME1zVlVGQmFrSXNTVUZCSzBJc1MwRkJTMmhDTEU5QlFYcEVPMEZCUTBnN096dDNRMEZGYlVKb1F5eEpMRVZCUVUwN1FVRkRlRUlzWVVGQlR5eExRVUZMWjBRc1ZVRkJUQ3hIUVVGclFpeERRVUZEYUVRc1QwRkJUeXhMUVVGTEswTXNUVUZCWWl4SlFVRjFRaXhMUVVGTFppeFBRVUZ5UkR0QlFVTkVPenM3T0VOQlJYbENhRU1zU1N4RlFVRk5ReXhSTEVWQlFWVkRMRXNzUlVGQlR6dEJRVU12UXl4VlFVRk5LME1zZDBKQlFYZENMRXRCUVV0T0xHRkJRVXdzUTBGQmJVSlBMRTFCUVdwRU8wRkJRMEVzVlVGQlNYQkRMR1ZCUVdWdVFpeFhRVUZYVHl4TFFVRTVRanM3UVVGRlFTeFZRVUZKSzBNc2QwSkJRWGRDTEVOQlFUVkNMRVZCUVN0Q08wRkJRemRDTEdGQlFVdEtMR3RDUVVGTUxFTkJRWGRDVFN4TFFVRjRRanRCUVVOQkxHRkJRVXRPTEd0Q1FVRk1MRU5CUVhkQ1R5eFBRVUY0UWl4SFFVRnRRMnhFTEZGQlFWRXNRMEZCTTBNN08wRkJSVUVzWVVGQlN5eEpRVUZKYlVRc1NVRkJTU3hEUVVGaUxFVkJRV2RDUVN4SlFVRkpTaXh4UWtGQmNFSXNSVUZCTWtOSkxFZEJRVE5ETEVWQlFXZEVPMEZCUXpsRExHTkJRVTF3UlN4VFFVRlRMRXRCUVVzd1JDeGhRVUZNTEVOQlFXMUNWU3hEUVVGdVFpeERRVUZtTzBGQlEwRXNZMEZCVFVNc2NVSkJRWEZDY2tVc1QwRkJUemhDTEZsQlFWQXNRMEZCYjBKbUxFbEJRWEJDTEVWQlFUQkNReXhSUVVFeFFpeEZRVUZ2UTBNc1MwRkJjRU1zUTBGQk0wSTdRVUZEUVN4bFFVRkxNa01zYTBKQlFVd3NRMEZCZDBKVkxFMUJRWGhDTEVOQlFTdENkRVVzVFVGQkwwSXNSVUZCZFVOeFJTeHJRa0ZCZGtNN1FVRkRSRHM3UVVGRlJIaERMSFZDUVVGbExFdEJRVXNyUWl4clFrRkJUQ3hEUVVGM1FqZERMRWxCUVhaRE8wRkJRMFE3TzBGQlJVUXNZVUZCVDJNc1dVRkJVRHRCUVVORU96czdNa05CUlhOQ1pDeEpMRVZCUVUxRExGRXNSVUZCVlVNc1N5eEZRVUZQTzBGQlFVRTdRVUZCUVR0QlFVRkJPenRCUVVGQk8wRkJRelZETEhkRVFVRjNRaXhMUVVGTGVVTXNZVUZCTjBJN1FVRkJRU3hqUVVGVFlTeFhRVUZVT3p0QlFVTkZRU3h6UWtGQldYQkRMRk5CUVZvc1EwRkJjMEp3UWl4SlFVRjBRaXhGUVVFMFFrTXNVVUZCTlVJc1JVRkJjME5ETEV0QlFYUkRPMEZCUkVZN1FVRkVORU03UVVGQlFUdEJRVUZCTzBGQlFVRTdRVUZCUVR0QlFVRkJPMEZCUVVFN1FVRkJRVHRCUVVGQk8wRkJRVUU3UVVGQlFUdEJRVUZCTzBGQlFVRTdRVUZCUVR0QlFVYzNRenM3UVVGRlJEczdPenM3T3pzN096czdPenM3UVVFMlEwRTdPenM3TzJ0RFFVdGpSQ3hSTEVWQlFWVTdRVUZEZEVJc1ZVRkJUVmdzVTBGQlV5eExRVUZMUVN4TlFVRndRanM3UVVGRlFTeFZRVUZKUVN4VlFVRlZRU3hQUVVGUFl5eHRRa0ZCVUN4TFFVRXJRa1FzVTBGQk4wTXNSVUZEUldJc1QwRkJUMk1zYlVKQlFWQXNRMEZCTWtJc1NVRkJNMElzUlVGQmFVTklMRkZCUVdwRExFVkJSRVlzUzBGSFJTeExRVUZMTWtNc1pVRkJUQ3hEUVVGeFFqZERMR0ZCUVhKQ0xFTkJRVzFEUlN4UlFVRnVRenRCUVVOSU96dEJRVVZFT3pzN096czdPenM3TzJsRFFVOWhSQ3hKTEVWQlFVMURMRkVzUlVGQlZVTXNTeXhGUVVGUE8wRkJRMnhETEZkQlFVczJReXhOUVVGTUxFZEJRV012UXl4SlFVRmtPMEZCUTBFc1YwRkJTMmRFTEZWQlFVd3NSMEZCYTBJdlF5eFJRVUZzUWp0QlFVTkJMRmRCUVVzclFpeFBRVUZNTEVkQlFXVTVRaXhMUVVGbU96dEJRVVZCTEdGQlFVOHNTMEZCUzNWRUxIbENRVUZNTEVOQlFTdENla1FzU1VGQkwwSXNSVUZCY1VORExGRkJRWEpETEVWQlFTdERReXhMUVVFdlF5eERRVUZRTzBGQlEwUTdPMEZCUlVRN096czdPenM3T3pzN2IwTkJUMmRDUml4SkxFVkJRVTFETEZFc1JVRkJWVU1zU3l4RlFVRlBPMEZCUTNKRExGVkJRVTFxUWl4VFFVRlRMRXRCUVVzMFJDeHJRa0ZCVEN4RFFVRjNRbUVzU1VGQmRrTTdRVUZEUVN4VlFVRk5TaXh4UWtGQmNVSnlSU3hQUVVGUGEwTXNaVUZCVUN4RFFVRjFRbTVDTEVsQlFYWkNMRVZCUVRaQ1F5eFJRVUUzUWl4RlFVRjFRME1zUzBGQmRrTXNRMEZCTTBJN1FVRkRRU3hoUVVGUExFdEJRVXN5UXl4clFrRkJUQ3hEUVVGM1FtTXNTVUZCZUVJc1EwRkJOa0l4UlN4TlFVRTNRaXhGUVVGeFEzRkZMR3RDUVVGeVF5eERRVUZRTzBGQlEwUTdPMEZCUlVRN096czdPenM3T3pzN096aENRVkZWZEVRc1NTeEZRVUZOUXl4UkxFVkJRVlZETEVzc1JVRkJjVUk3UVVGQlFTeFZRVUZrTUVRc1NVRkJZeXgxUlVGQlVDeExRVUZQT3p0QlFVTTNReXhWUVVGTlF5eFpRVUZaTEV0QlFVczNRaXhQUVVGMlFqczdRVUZGUVN4WFFVRkxaU3hOUVVGTUxFZEJRV012UXl4SlFVRmtPMEZCUTBFc1YwRkJTMmRFTEZWQlFVd3NSMEZCYTBJdlF5eFJRVUZzUWp0QlFVTkJMRmRCUVVzclFpeFBRVUZNTEVkQlFXVTVRaXhMUVVGbU96dEJRVVZCTEZWQlFVbEJMRlZCUVZVeVJDeFRRVUZXTEVsQlFYVkNSQ3hKUVVFelFpeEZRVUZwUXp0QlFVTXZRaXhaUVVGSk9VTXNjVUpCUVVvN08wRkJSVUU3UVVGRFFTeFpRVUZKT0VNc1VVRkJVVEZFTEZGQlFWRXlSQ3hUUVVGU0xFZEJRVzlDTEVOQlFXaERMRVZCUVcxRE8wRkJRMnBETzBGQlEwRXZReXg1UWtGQlpTeExRVUZMTWtNc2VVSkJRVXdzUTBGQkswSjZSQ3hKUVVFdlFpeEZRVUZ4UTBNc1VVRkJja01zUlVGQkswTkRMRXRCUVM5RExFTkJRV1k3UVVGRFJDeFRRVWhFTEUxQlIwOHNTVUZCU1RKRUxHTkJRV01zUTBGQmJFSXNSVUZCY1VJN1FVRkRNVUk3UVVGRFFTOURMSGxDUVVGbExFdEJRVXN5UXl4NVFrRkJUQ3hEUVVFclFucEVMRWxCUVM5Q0xFVkJRWEZEUXl4UlFVRnlReXhGUVVFclEwTXNTMEZCTDBNc1EwRkJaanRCUVVORUxGTkJTRTBzVFVGSFFTeEpRVUZKUVN4VlFVRlZMRU5CUVdRc1JVRkJhVUk3UVVGRGRFSTdRVUZEUVZrc2VVSkJRV1Z1UWl4UlFVRm1PMEZCUTBFc1pVRkJTemhFTEhsQ1FVRk1MRU5CUVN0Q2VrUXNTVUZCTDBJc1JVRkJjVU5ETEZGQlFYSkRMRVZCUVN0RFF5eExRVUV2UXp0QlFVTkVMRk5CU2swc1RVRkpRVHRCUVVOTU8wRkJRMEVzWlVGQlN6UkVMSE5DUVVGTUxFTkJRVFJDT1VRc1NVRkJOVUlzUlVGQmEwTkRMRkZCUVd4RExFVkJRVFJEUXl4TFFVRTFRenRCUVVORU96dEJRVVZFTEdGQlFVdElMR0ZCUVV3c1EwRkJiVUpsTEZsQlFXNUNPMEZCUTBRN1FVRkRSanM3UVVGRlJEczdPenM3T3pzN08zZENRVTFKTjBJc1RTeEZRVUYxUlR0QlFVRkJMRlZCUVM5RU1FSXNZVUZCSzBRc2RVVkJRUzlETEVOQlFTdERPMEZCUVVFc1ZVRkJOVU5ETEZkQlFUUkRMSFZGUVVFNVFtcENMRkZCUVRoQ08wRkJRVUVzVlVGQmNFSnJRaXhqUVVGdlFpeDFSVUZCU0N4RFFVRkhPenRCUVVONlJTeFZRVUZKTWtNc1kwRkJZeXhKUVVGc1FqczdRVUZGUVN4VlFVRkpNME1zYlVKQlFXMUNMRU5CUVVOc1FpeFJRVUY0UWl4RlFVTkZhMElzYVVKQlFXbENMRU5CUVdwQ096dEJRVVZHTEZWQlFVazFRaXhQUVVGUFN5eE5RVUZZTEVWQlEwVXNUVUZCVFN4SlFVRkpiVVFzUzBGQlNpeERRVUZWTERKRFFVRldMRU5CUVU0N08wRkJSVVlzVlVGQlNXaERMSEZDUVVGWGMwUXNjVUpCUVZnc1EwRkJhVU01UlN4TlFVRnFReXhEUVVGS0xFVkJRMFYxUlN4alFVRmpMRWxCUVVrNVF5eHpRa0ZCU2l4RFFVRXlRaXhKUVVFelFpeEZRVUZwUTNwQ0xFMUJRV3BETEVWQlFYbERNRUlzWVVGQmVrTXNSVUZCZDBSRExGZEJRWGhFTEVWQlFYRkZReXhqUVVGeVJTeERRVUZrTEVOQlJFWXNTMEZGU3l4SlFVRkpTaXh4UWtGQlYzVkVMSGxDUVVGWUxFTkJRWEZETDBVc1RVRkJja01zUTBGQlNpeEZRVU5JZFVVc1kwRkJZeXhKUVVGSmJrTXNNRUpCUVVvc1EwRkJLMElzU1VGQkwwSXNSVUZCY1VOd1F5eE5RVUZ5UXl4RlFVRTJRekJDTEdGQlFUZERMRVZCUVRSRVF5eFhRVUUxUkN4RlFVRjVSVU1zWTBGQmVrVXNRMEZCWkN4RFFVUkhMRXRCUlVFc1NVRkJTVW9zY1VKQlFWZDNSQ3h0UWtGQldDeERRVUVyUW1oR0xFMUJRUzlDTEVOQlFVb3NSVUZEU0hWRkxHTkJRV01zU1VGQlNXeERMRzlDUVVGS0xFTkJRWGxDTEVsQlFYcENMRVZCUVN0Q2NrTXNUVUZCTDBJc1JVRkJkVU13UWl4aFFVRjJReXhGUVVGelJFTXNWMEZCZEVRc1JVRkJiVVZETEdOQlFXNUZMRU5CUVdRc1EwRkVSeXhMUVVkSUxFMUJRVTBzU1VGQlNUUkNMRXRCUVVvc1EwRkJWU3gxUTBGQlZpeERRVUZPT3p0QlFVVkdMRlZCUVVsbExGZEJRVW9zUlVGQmFVSTdRVUZEWml4WlFVRk5kRVFzVVVGQlVTeExRVUZMT0VJc1QwRkJia0k3TzBGQlJVRXpSQ3hyUWtGQlZTeExRVUZMY1VVc1UwRkJaaXhGUVVFd1FpeExRVUZMUXl4aFFVRXZRaXhGUVVFNFF6RkVMRTFCUVRsRExFVkJRWE5FZFVVc1YwRkJkRVE3TzBGQlJVRXNXVUZCU1hSRUxGVkJRVlVzUTBGQlpDeEZRVUZwUWp0QlFVTm1PMEZCUTBFc1kwRkJUVzlFTEhGQ1FVRnhRa1VzV1VGQldYcERMRmxCUVZvc1EwRkJlVUlzUzBGQlMxUXNWMEZCT1VJc1JVRkJNa01zUzBGQlMwVXNaVUZCYUVRc1JVRkJhVVZPTEV0QlFXcEZMRU5CUVROQ08wRkJRMEVzWTBGQlRWa3NaVUZCWlN4TFFVRkxLMElzYTBKQlFVd3NRMEZCZDBKVkxFMUJRWGhDTEVOQlFTdENReXhYUVVFdlFpeEZRVUUwUTBZc2EwSkJRVFZETEVOQlFYSkNPenRCUVVWQkxHVkJRVXQyUkN4aFFVRk1MRU5CUVcxQ1pTeFpRVUZ1UWp0QlFVTkVPMEZCUTBZN08wRkJSVVFzWVVGQlR6QkRMRmRCUVZBN1FVRkRSRHM3UVVGRlJEczdPenM3T3pzN01rSkJTMDlWTEcxQ0xFVkJRWEZDTzBGQlF6RkNMRlZCUVVscVJpeFRRVUZUYVVZc2JVSkJRV0k3UVVGRFFTeFZRVUZKVml4alFVRmpOMFVzWVVGQllTeExRVUZMSzBRc1UwRkJiRUlzUlVGQk5rSXNTMEZCUzBNc1lVRkJiRU1zUlVGQmFVUjFRaXh0UWtGQmFrUXNRMEZCYkVJN08wRkJSVUVzVlVGQlNTeERRVUZEVml4WFFVRk1MRVZCUVd0Q08wRkJRMmhDZGtVc2FVSkJRVk5PTEdGQlFXRXNTMEZCUzJkRkxHRkJRV3hDTEVWQlFXbERMRXRCUVV0RUxGTkJRWFJETEVWQlFXbEVkMElzYlVKQlFXcEVMRU5CUVZRN1FVRkRRVllzYzBKQlFXTlZMRzFDUVVGa08wRkJRMFE3TzBGQlJVUXNWVUZCU1dwR0xGVkJRVlYxUlN4WFFVRmtMRVZCUVRKQ08wRkJRM3BDTEZsQlFVMHhReXhsUVVGbExFdEJRVXNyUWl4clFrRkJUQ3hEUVVGM1FtNUNMRTFCUVhoQ0xFTkJRU3RDT0VJc1YwRkJMMElzUTBGQmNrSTdPMEZCUlVGQkxHOUNRVUZaVnl4UFFVRmFPenRCUVVWQkxGbEJRVWtzUzBGQlMyNURMRTlCUVV3c1MwRkJhVUlzUTBGQmNrSXNSVUZEUlN4TFFVRkxha01zWVVGQlRDeERRVUZ0UW1Vc1dVRkJia0k3UVVGRFNDeFBRVkJFTEUxQlQwODdRVUZEVEN4alFVRk5MRWxCUVVreVFpeExRVUZLTEVOQlFWVXNOa05CUVZZc1EwRkJUanRCUVVORU8wRkJRMFk3TzBGQlJVUTdPenM3T3pzN096dDNRMEZOYjBKbExGY3NSVUZCYlVNN1FVRkJRU3hWUVVGMFFuWkVMRkZCUVhOQ0xIVkZRVUZZUlN4VFFVRlhPenRCUVVOeVJDeFZRVUZOUkN4UlFVRlJMRXRCUVVzNFFpeFBRVUZ1UWpzN1FVRkZRU3hWUVVGSk9VSXNWVUZCVlN4RFFVRmtMRVZCUVdsQ08wRkJRMllzV1VGQlNVUXNZVUZCWVVVc1UwRkJha0lzUlVGRFJVWXNWMEZCVjNWRUxGbEJRVmw2UXl4WlFVRmFMRU5CUVhsQ0xFdEJRVXRVTEZkQlFUbENMRVZCUVRKRExFdEJRVXRGTEdWQlFXaEVMRVZCUVdsRlRpeExRVUZxUlN4RFFVRllPenRCUVVWR0xGbEJRVWxaTEdWQlFXVXNTVUZCYmtJN08wRkJSVUU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJMRmxCUVVrc1EwRkJReXhMUVVGTEswSXNhMEpCUVV3c1EwRkJkMEoxUWl4SFFVRjRRaXhEUVVFMFFsb3NWMEZCTlVJc1EwRkJUQ3hGUVVFclF6dEJRVU0zUXpGRExIbENRVUZsTEV0QlFVc3JRaXhyUWtGQlRDeERRVUYzUWxVc1RVRkJlRUlzUTBGQkswSkRMRmRCUVM5Q0xFVkJRVFJEZGtRc1VVRkJOVU1zUTBGQlpqdEJRVU5FTEZOQlJrUXNUVUZGVHp0QlFVTk1ZU3g1UWtGQlpTeExRVUZMSzBJc2EwSkJRVXdzUTBGQmQwSmpMRWxCUVhoQ0xFTkJRVFpDU0N4WFFVRTNRaXhGUVVFd1EzWkVMRkZCUVRGRExFTkJRV1k3UVVGRFJEczdRVUZGUkN4aFFVRkxSaXhoUVVGTUxFTkJRVzFDWlN4WlFVRnVRanRCUVVORU8wRkJRMFk3TzBGQlJVUTdPenM3T3pzMFFrRkhVVHRCUVVOT0xGZEJRVXROTEZOQlFVd3NRMEZCWlN4TFFVRkxaQ3hYUVVGd1FpeEZRVUZwUXl4TFFVRkxSU3hsUVVGMFF5eEZRVUYxUkN4RFFVRjJSRHM3UVVGRVRUdEJRVUZCTzBGQlFVRTdPMEZCUVVFN1FVRkhUaXg1UkVGQmQwSXNTMEZCUzIxRExHRkJRVGRDTzBGQlFVRXNZMEZCVTJFc1YwRkJWRHM3UVVGRFJVRXNjMEpCUVZsWExFOUJRVm83UVVGRVJqdEJRVWhOTzBGQlFVRTdRVUZCUVR0QlFVRkJPMEZCUVVFN1FVRkJRVHRCUVVGQk8wRkJRVUU3UVVGQlFUdEJRVUZCTzBGQlFVRTdRVUZCUVR0QlFVRkJPMEZCUVVFN1FVRkxVRHM3TzNkQ1FUZE9hVUk3UVVGRGFFSXNZVUZCVHl4TFFVRkxjRU1zVjBGQlRDeERRVUZwUW5wQ0xGZEJRWGhDTzBGQlEwUTdPMEZCUlVRN096czdPenM3T3pzN096dDNRa0ZUWjBJN1FVRkRaQ3hoUVVGUExFdEJRVXQ1UWl4WFFVRk1MRU5CUVdsQ2VFSXNVMEZCZUVJN1FVRkRSRHM3UVVGRlJEczdPenM3T3pzN096czdPenQzUWtGVmMwSTdRVUZEY0VJc1ZVRkJUV3BDTEZOQlFWTXNTMEZCUzBFc1RVRkJjRUk3TzBGQlJVRXNWVUZCU1VFc1ZVRkJWVUVzVDBGQlQydENMR1ZCUVZBc1MwRkJNa0pNTEZOQlFYcERMRVZCUTBVc1QwRkJUMklzVDBGQlQydENMR1ZCUVdRN08wRkJSVVlzWVVGQlR5eExRVUZMZDBNc1ZVRkJUQ3hIUVVGclFpeERRVUZETEV0QlFVdHFRaXhYUVVGTUxFTkJRV2xDZWtJc1YwRkJha0lzUjBGQkswSXNTMEZCUzNsRExFMUJRWEpETEVsQlFTdERMRXRCUVV0bUxFOUJRVGRGTzBGQlEwUTdPenRGUVhCSGNVSjJRaXh2UWpzN2EwSkJhMU5VTmtJc1V5SXNJbVpwYkdVaU9pSlVjbUZ1YzNCdmNuUXVhbk1pTENKemIzVnlZMlZ6UTI5dWRHVnVkQ0k2V3lKcGJYQnZjblFnVUhKcGIzSnBkSGxSZFdWMVpTQm1jbTl0SUNjdUxpOWpiM0psTDFCeWFXOXlhWFI1VVhWbGRXVW5PMXh1YVcxd2IzSjBJRk5qYUdWa2RXeHBibWRSZFdWMVpTQm1jbTl0SUNjdUxpOWpiM0psTDFOamFHVmtkV3hwYm1kUmRXVjFaU2M3WEc1cGJYQnZjblFnVkdsdFpVVnVaMmx1WlNCbWNtOXRJQ2N1TGk5amIzSmxMMVJwYldWRmJtZHBibVVuTzF4dVhHNWNibVoxYm1OMGFXOXVJR0ZrWkVSMWNHeGxkQ2htYVhKemRFRnljbUY1TENCelpXTnZibVJCY25KaGVTd2dabWx5YzNSRmJHVnRaVzUwTENCelpXTnZibVJGYkdWdFpXNTBLU0I3WEc0Z0lHWnBjbk4wUVhKeVlYa3VjSFZ6YUNobWFYSnpkRVZzWlcxbGJuUXBPMXh1SUNCelpXTnZibVJCY25KaGVTNXdkWE5vS0hObFkyOXVaRVZzWlcxbGJuUXBPMXh1ZlZ4dVhHNW1kVzVqZEdsdmJpQnlaVzF2ZG1WRWRYQnNaWFFvWm1seWMzUkJjbkpoZVN3Z2MyVmpiMjVrUVhKeVlYa3NJR1pwY25OMFJXeGxiV1Z1ZENrZ2UxeHVJQ0JqYjI1emRDQnBibVJsZUNBOUlHWnBjbk4wUVhKeVlYa3VhVzVrWlhoUFppaG1hWEp6ZEVWc1pXMWxiblFwTzF4dVhHNGdJR2xtSUNocGJtUmxlQ0ErUFNBd0tTQjdYRzRnSUNBZ1kyOXVjM1FnYzJWamIyNWtSV3hsYldWdWRDQTlJSE5sWTI5dVpFRnljbUY1VzJsdVpHVjRYVHRjYmx4dUlDQWdJR1pwY25OMFFYSnlZWGt1YzNCc2FXTmxLR2x1WkdWNExDQXhLVHRjYmlBZ0lDQnpaV052Ym1SQmNuSmhlUzV6Y0d4cFkyVW9hVzVrWlhnc0lERXBPMXh1WEc0Z0lDQWdjbVYwZFhKdUlITmxZMjl1WkVWc1pXMWxiblE3WEc0Z0lIMWNibHh1SUNCeVpYUjFjbTRnYm5Wc2JEdGNibjFjYmx4dUx5OGdWR2hsSUZSeVlXNXpjRzl5ZEdWa0lHTmhiR3dnYVhNZ2RHaGxJR0poYzJVZ1kyeGhjM01nYjJZZ2RHaGxJR0ZrWVhCMFpYSnpJR0psZEhkbFpXNWNiaTh2SUdScFptWmxjbVZ1ZENCMGVYQmxjeUJ2WmlCbGJtZHBibVZ6SUNocExtVXVJSFJ5WVc1emNHOXlkR1ZrTENCelkyaGxaSFZzWldRc0lIQnNZWGt0WTI5dWRISnZiR3hsWkNsY2JpOHZJRlJvWlNCaFpHRndkR1Z5Y3lCaGNtVWdZWFFnZEdobElITmhiV1VnZEdsdFpTQnRZWE4wWlhKeklHWnZjaUIwYUdVZ1pXNW5hVzVsY3lCaFpHUmxaQ0IwYnlCMGFHVWdkSEpoYm5Od2IzSjBYRzR2THlCaGJtUWdkSEpoYm5Od2IzSjBaV1FnVkdsdFpVVnVaMmx1WlhNZ2FXNXpaWEowWldRZ2FXNTBieUIwYUdVZ2RISmhibk53YjNKMEozTWdjRzl6YVhScGIyNHRZbUZ6WldRZ2NISnBkRzl5YVhSNUlIRjFaWFZsTGx4dVkyeGhjM01nVkhKaGJuTndiM0owWldRZ1pYaDBaVzVrY3lCVWFXMWxSVzVuYVc1bElIdGNiaUFnWTI5dWMzUnlkV04wYjNJb2RISmhibk53YjNKMExDQmxibWRwYm1Vc0lITjBZWEowTENCa2RYSmhkR2x2Yml3Z2IyWm1jMlYwTENCemRISmxkR05vSUQwZ01Ta2dlMXh1SUNBZ0lITjFjR1Z5S0NrN1hHNGdJQ0FnZEdocGN5NXRZWE4wWlhJZ1BTQjBjbUZ1YzNCdmNuUTdYRzVjYmlBZ0lDQjBhR2x6TGw5ZlpXNW5hVzVsSUQwZ1pXNW5hVzVsTzF4dUlDQWdJR1Z1WjJsdVpTNXRZWE4wWlhJZ1BTQjBhR2x6TzF4dVhHNGdJQ0FnZEdocGN5NWZYM04wWVhKMFVHOXphWFJwYjI0Z1BTQnpkR0Z5ZER0Y2JpQWdJQ0IwYUdsekxsOWZaVzVrVUc5emFYUnBiMjRnUFNBaGFYTkdhVzVwZEdVb1pIVnlZWFJwYjI0cElEOGdTVzVtYVc1cGRIa2dPaUJ6ZEdGeWRDQXJJR1IxY21GMGFXOXVPMXh1SUNBZ0lIUm9hWE11WDE5dlptWnpaWFJRYjNOcGRHbHZiaUE5SUhOMFlYSjBJQ3NnYjJabWMyVjBPMXh1SUNBZ0lIUm9hWE11WDE5emRISmxkR05vVUc5emFYUnBiMjRnUFNCemRISmxkR05vTzF4dUlDQWdJSFJvYVhNdVgxOXBjMUoxYm01cGJtY2dQU0JtWVd4elpUdGNiaUFnZlZ4dVhHNGdJSE5sZEVKdmRXNWtZWEpwWlhNb2MzUmhjblFzSUdSMWNtRjBhVzl1TENCdlptWnpaWFFnUFNBd0xDQnpkSEpsZEdOb0lEMGdNU2tnZTF4dUlDQWdJSFJvYVhNdVgxOXpkR0Z5ZEZCdmMybDBhVzl1SUQwZ2MzUmhjblE3WEc0Z0lDQWdkR2hwY3k1ZlgyVnVaRkJ2YzJsMGFXOXVJRDBnYzNSaGNuUWdLeUJrZFhKaGRHbHZianRjYmlBZ0lDQjBhR2x6TGw5ZmIyWm1jMlYwVUc5emFYUnBiMjRnUFNCemRHRnlkQ0FySUc5bVpuTmxkRHRjYmlBZ0lDQjBhR2x6TGw5ZmMzUnlaWFJqYUZCdmMybDBhVzl1SUQwZ2MzUnlaWFJqYUR0Y2JpQWdJQ0IwYUdsekxuSmxjMlYwVUc5emFYUnBiMjRvS1R0Y2JpQWdmVnh1WEc0Z0lITjBZWEowS0hScGJXVXNJSEJ2YzJsMGFXOXVMQ0J6Y0dWbFpDa2dlMzFjYmlBZ2MzUnZjQ2gwYVcxbExDQndiM05wZEdsdmJpa2dlMzFjYmx4dUlDQm5aWFFnWTNWeWNtVnVkRlJwYldVb0tTQjdYRzRnSUNBZ2NtVjBkWEp1SUhSb2FYTXViV0Z6ZEdWeUxtTjFjbkpsYm5SVWFXMWxPMXh1SUNCOVhHNWNiaUFnWjJWMElHRjFaR2x2VkdsdFpTZ3BJSHRjYmlBZ0lDQnlaWFIxY200Z2RHaHBjeTV0WVhOMFpYSXVZWFZrYVc5VWFXMWxPMXh1SUNCOVhHNWNiaUFnWjJWMElHTjFjbkpsYm5SUWIzTnBkR2x2YmlncElIdGNiaUFnSUNCeVpYUjFjbTRnZEdocGN5NXRZWE4wWlhJdVkzVnljbVZ1ZEZCdmMybDBhVzl1SUMwZ2RHaHBjeTVmWDI5bVpuTmxkRkJ2YzJsMGFXOXVPMXh1SUNCOVhHNWNiaUFnY21WelpYUlFiM05wZEdsdmJpaHdiM05wZEdsdmJpa2dlMXh1SUNBZ0lHbG1JQ2h3YjNOcGRHbHZiaUFoUFQwZ2RXNWtaV1pwYm1Wa0tWeHVJQ0FnSUNBZ2NHOXphWFJwYjI0Z0t6MGdkR2hwY3k1ZlgyOW1abk5sZEZCdmMybDBhVzl1TzF4dVhHNGdJQ0FnZEdocGN5NXRZWE4wWlhJdWNtVnpaWFJGYm1kcGJtVlFiM05wZEdsdmJpaDBhR2x6TENCd2IzTnBkR2x2YmlrN1hHNGdJSDFjYmx4dUlDQnplVzVqVUc5emFYUnBiMjRvZEdsdFpTd2djRzl6YVhScGIyNHNJSE53WldWa0tTQjdYRzRnSUNBZ2FXWWdLSE53WldWa0lENGdNQ2tnZTF4dUlDQWdJQ0FnYVdZZ0tIQnZjMmwwYVc5dUlEd2dkR2hwY3k1ZlgzTjBZWEowVUc5emFYUnBiMjRwSUh0Y2JseHVJQ0FnSUNBZ0lDQnBaaUFvZEdocGN5NWZYMmx6VW5WdWJtbHVaeWxjYmlBZ0lDQWdJQ0FnSUNCMGFHbHpMbk4wYjNBb2RHbHRaU3dnY0c5emFYUnBiMjRnTFNCMGFHbHpMbDlmYjJabWMyVjBVRzl6YVhScGIyNHBPMXh1WEc0Z0lDQWdJQ0FnSUhSb2FYTXVYMTlwYzFKMWJtNXBibWNnUFNCbVlXeHpaVHRjYmlBZ0lDQWdJQ0FnY21WMGRYSnVJSFJvYVhNdVgxOXpkR0Z5ZEZCdmMybDBhVzl1TzF4dUlDQWdJQ0FnZlNCbGJITmxJR2xtSUNod2IzTnBkR2x2YmlBOElIUm9hWE11WDE5bGJtUlFiM05wZEdsdmJpa2dlMXh1SUNBZ0lDQWdJQ0IwYUdsekxuTjBZWEowS0hScGJXVXNJSEJ2YzJsMGFXOXVJQzBnZEdocGN5NWZYMjltWm5ObGRGQnZjMmwwYVc5dUxDQnpjR1ZsWkNrN1hHNWNiaUFnSUNBZ0lDQWdkR2hwY3k1ZlgybHpVblZ1Ym1sdVp5QTlJSFJ5ZFdVN1hHNGdJQ0FnSUNBZ0lISmxkSFZ5YmlCMGFHbHpMbDlmWlc1a1VHOXphWFJwYjI0N1hHNGdJQ0FnSUNCOVhHNGdJQ0FnZlNCbGJITmxJSHRjYmlBZ0lDQWdJR2xtSUNod2IzTnBkR2x2YmlBK0lIUm9hWE11WDE5bGJtUlFiM05wZEdsdmJpa2dlMXh1SUNBZ0lDQWdJQ0JwWmlBb2RHaHBjeTVmWDJselVuVnVibWx1WnlrZ0x5OGdhV1lnWlc1bmFXNWxJR2x6SUhKMWJtNXBibWRjYmlBZ0lDQWdJQ0FnSUNCMGFHbHpMbk4wYjNBb2RHbHRaU3dnY0c5emFYUnBiMjRnTFNCMGFHbHpMbDlmYjJabWMyVjBVRzl6YVhScGIyNHBPMXh1WEc0Z0lDQWdJQ0FnSUhSb2FYTXVYMTlwYzFKMWJtNXBibWNnUFNCbVlXeHpaVHRjYmlBZ0lDQWdJQ0FnY21WMGRYSnVJSFJvYVhNdVgxOWxibVJRYjNOcGRHbHZianRjYmlBZ0lDQWdJSDBnWld4elpTQnBaaUFvY0c5emFYUnBiMjRnUGlCMGFHbHpMbDlmYzNSaGNuUlFiM05wZEdsdmJpa2dlMXh1SUNBZ0lDQWdJQ0IwYUdsekxuTjBZWEowS0hScGJXVXNJSEJ2YzJsMGFXOXVJQzBnZEdocGN5NWZYMjltWm5ObGRGQnZjMmwwYVc5dUxDQnpjR1ZsWkNrN1hHNWNiaUFnSUNBZ0lDQWdkR2hwY3k1ZlgybHpVblZ1Ym1sdVp5QTlJSFJ5ZFdVN1hHNGdJQ0FnSUNBZ0lISmxkSFZ5YmlCMGFHbHpMbDlmYzNSaGNuUlFiM05wZEdsdmJqdGNiaUFnSUNBZ0lIMWNiaUFnSUNCOVhHNWNiaUFnSUNCcFppQW9kR2hwY3k1ZlgybHpVblZ1Ym1sdVp5a2dMeThnYVdZZ1pXNW5hVzVsSUdseklISjFibTVwYm1kY2JpQWdJQ0FnSUhSb2FYTXVjM1J2Y0NoMGFXMWxMQ0J3YjNOcGRHbHZiaWs3WEc1Y2JpQWdJQ0IwYUdsekxsOWZhWE5TZFc1dWFXNW5JRDBnWm1Gc2MyVTdYRzRnSUNBZ2NtVjBkWEp1SUVsdVptbHVhWFI1SUNvZ2MzQmxaV1E3WEc0Z0lIMWNibHh1SUNCaFpIWmhibU5sVUc5emFYUnBiMjRvZEdsdFpTd2djRzl6YVhScGIyNHNJSE53WldWa0tTQjdYRzRnSUNBZ2FXWWdLQ0YwYUdsekxsOWZhWE5TZFc1dWFXNW5LU0I3WEc0Z0lDQWdJQ0IwYUdsekxuTjBZWEowS0hScGJXVXNJSEJ2YzJsMGFXOXVJQzBnZEdocGN5NWZYMjltWm5ObGRGQnZjMmwwYVc5dUxDQnpjR1ZsWkNrN1hHNGdJQ0FnSUNCMGFHbHpMbDlmYVhOU2RXNXVhVzVuSUQwZ2RISjFaVHRjYmx4dUlDQWdJQ0FnYVdZZ0tITndaV1ZrSUQ0Z01DbGNiaUFnSUNBZ0lDQWdjbVYwZFhKdUlIUm9hWE11WDE5bGJtUlFiM05wZEdsdmJqdGNibHh1SUNBZ0lDQWdjbVYwZFhKdUlIUm9hWE11WDE5emRHRnlkRkJ2YzJsMGFXOXVPMXh1SUNBZ0lIMWNibHh1SUNBZ0lDOHZJSE4wYjNBZ1pXNW5hVzVsWEc0Z0lDQWdkR2hwY3k1emRHOXdLSFJwYldVc0lIQnZjMmwwYVc5dUlDMGdkR2hwY3k1ZlgyOW1abk5sZEZCdmMybDBhVzl1S1R0Y2JseHVJQ0FnSUhSb2FYTXVYMTlwYzFKMWJtNXBibWNnUFNCbVlXeHpaVHRjYmlBZ0lDQnlaWFIxY200Z1NXNW1hVzVwZEhrZ0tpQnpjR1ZsWkR0Y2JpQWdmVnh1WEc0Z0lITjVibU5UY0dWbFpDaDBhVzFsTENCd2IzTnBkR2x2Yml3Z2MzQmxaV1FwSUh0Y2JpQWdJQ0JwWmlBb2MzQmxaV1FnUFQwOUlEQXBJSHRjYmlBZ0lDQWdJSFJvYVhNdWMzUnZjQ2gwYVcxbExDQndiM05wZEdsdmJpQXRJSFJvYVhNdVgxOXZabVp6WlhSUWIzTnBkR2x2YmlrN1hHNGdJQ0FnZlZ4dUlDQjlYRzVjYmlBZ1pHVnpkSEp2ZVNncElIdGNiaUFnSUNCMGFHbHpMbTFoYzNSbGNpQTlJRzUxYkd3N1hHNWNiaUFnSUNCMGFHbHpMbDlmWlc1bmFXNWxMbTFoYzNSbGNpQTlJRzUxYkd3N1hHNGdJQ0FnZEdocGN5NWZYMlZ1WjJsdVpTQTlJRzUxYkd3N1hHNGdJSDFjYm4xY2JseHVMeThnVkhKaGJuTndiM0owWldSVWNtRnVjM0J2Y25SbFpGeHVMeThnYUdGeklIUnZJSE4zYVhSamFDQnZiaUJoYm1RZ2IyWm1JSFJvWlNCelkyaGxaSFZzWldRZ1pXNW5hVzVsY3lCM2FHVnVJSFJvWlNCMGNtRnVjM0J2Y25RZ2FHbDBjeUIwYUdVZ1pXNW5hVzVsSjNNZ2MzUmhjblFnWVc1a0lHVnVaQ0J3YjNOcGRHbHZibHh1THk4Z1FHNXZkR1VnTFNCa2IyVnpJRzV2ZENCb1lXNWtiR1VnY0hKdmNHVnliSGtnWDE5emRHRnlkRkJ2YzJsMGFXOXVJR0Z1WkNCZlgyVnVaRkJ2YzJsMGFXOXVYRzVqYkdGemN5QlVjbUZ1YzNCdmNuUmxaRlJ5WVc1emNHOXlkR1ZrSUdWNGRHVnVaSE1nVkhKaGJuTndiM0owWldRZ2UxeHVJQ0JqYjI1emRISjFZM1J2Y2loMGNtRnVjM0J2Y25Rc0lHVnVaMmx1WlN3Z2MzUmhjblJRYjNOcGRHbHZiaXdnWlc1a1VHOXphWFJwYjI0c0lHOW1abk5sZEZCdmMybDBhVzl1S1NCN1hHNGdJQ0FnYzNWd1pYSW9kSEpoYm5Od2IzSjBMQ0JsYm1kcGJtVXNJSE4wWVhKMFVHOXphWFJwYjI0c0lHVnVaRkJ2YzJsMGFXOXVMQ0J2Wm1aelpYUlFiM05wZEdsdmJpazdYRzRnSUgxY2JseHVJQ0F2THlCQWRHOWtieUF0SUdoaGJtUnNaU0IwYUdsekxsOWZjblZ1Ym1sdVp5QjBieUJ6ZEdGeWRDQmhibVFnYzNSdmNDQndjbTl3WlhKc2VTQjBhR1VnYzJOb1pXUjFiR1ZrSUdWdVoybHVaWE5jYmlBZ2MzbHVZMUJ2YzJsMGFXOXVLSFJwYldVc0lIQnZjMmwwYVc5dUxDQnpjR1ZsWkNrZ2UxeHVJQ0FnSUd4bGRDQnVaWGgwVUc5emFYUnBiMjRnUFNCdWRXeHNPeUF2THlCSmJtWnBibWwwZVNBcUlITndaV1ZrT3lBdkx5QmtaV1poZFd4MElISmxkSFZ5Ymx4dVhHNGdJQ0FnYVdZZ0tITndaV1ZrSUQ0Z01Da2dlMXh1WEc0Z0lDQWdJQ0JwWmlBb2NHOXphWFJwYjI0Z1BDQjBhR2x6TGw5ZmMzUmhjblJRYjNOcGRHbHZiaWtnZTF4dUlDQWdJQ0FnSUNBdkx5QnplVzVqSUdWdVoybHVaU0JoZENCZ1gzTjBZWEowVUc5emFYUnBiMjVnWEc0Z0lDQWdJQ0FnSUc1bGVIUlFiM05wZEdsdmJpQTlJSFJvYVhNdVgxOXZabVp6WlhSUWIzTnBkR2x2YmlBcklIUm9hWE11WDE5bGJtZHBibVV1YzNsdVkxQnZjMmwwYVc5dUtIUnBiV1VzSUhSb2FYTXVYMTl6ZEdGeWRGQnZjMmwwYVc5dUlDMGdkR2hwY3k1ZlgyOW1abk5sZEZCdmMybDBhVzl1TENCemNHVmxaQ2s3WEc0Z0lDQWdJQ0FnSUhSb2FYTXVYMTlwYzFKMWJtNXBibWNnUFNCMGNuVmxPMXh1SUNBZ0lDQWdmU0JsYkhObElHbG1JQ2h3YjNOcGRHbHZiaUE4SUhSb2FYTXVYMTlsYm1SUWIzTnBkR2x2YmlrZ2UxeHVJQ0FnSUNBZ0lDQXZMeUJ6ZVc1aklHVnVaMmx1WlNCaGRDQmdjRzl6YVhScGIyNWdYRzRnSUNBZ0lDQWdJRzVsZUhSUWIzTnBkR2x2YmlBOUlIUm9hWE11WDE5dlptWnpaWFJRYjNOcGRHbHZiaUFySUhSb2FYTXVYMTlsYm1kcGJtVXVjM2x1WTFCdmMybDBhVzl1S0hScGJXVXNJSEJ2YzJsMGFXOXVJQzBnZEdocGN5NWZYMjltWm5ObGRGQnZjMmwwYVc5dUxDQnpjR1ZsWkNrN1hHNGdJQ0FnSUNBZ0lIUm9hWE11WDE5cGMxSjFibTVwYm1jZ1BTQjBjblZsTzF4dUlDQWdJQ0FnZlNCbGJITmxJSHRjYmlBZ0lDQWdJQ0FnZEdocGN5NWZYMlZ1WjJsdVpTNXplVzVqVUc5emFYUnBiMjRvZEdsdFpTd2djRzl6YVhScGIyNGdMU0IwYUdsekxsOWZiMlptYzJWMFVHOXphWFJwYjI0c0lEQXBPMXh1WEc0Z0lDQWdJQ0FnSUhSb2FYTXVYMTlwYzFKMWJtNXBibWNnUFNCbVlXeHpaVHRjYmlBZ0lDQWdJQ0FnYm1WNGRGQnZjMmwwYVc5dUlEMGdTVzVtYVc1cGRIa2dLaUJ6Y0dWbFpEdGNiaUFnSUNBZ0lIMWNibHh1SUNBZ0lDQWdMeThnYVdZZ2MyOXRaV2h2ZHlCMGFHVWdaVzVuYVc1bElHRnphMlZrSUhSdklHSmxJR05oYkd4bFpDQmhablJsY2lCZ1pXNWtVRzl6YVhScGIyNWdMQ0JqYkdGdGNDQjJZV3gxWlZ4dUlDQWdJQ0FnYVdZZ0tIUm9hWE11WDE5cGMxSjFibTVwYm1jZ0ppWWdibVY0ZEZCdmMybDBhVzl1SUQ0Z2RHaHBjeTVmWDJWdVpGQnZjMmwwYVc5dUtTQjdYRzRnSUNBZ0lDQWdJRzVsZUhSUWIzTnBkR2x2YmlBOUlIUm9hWE11WDE5bGJtUlFiM05wZEdsdmJqdGNiaUFnSUNBZ0lIMWNibHh1SUNBZ0lIMGdaV3h6WlNCcFppQW9jM0JsWldRZ1BDQXdLU0I3WEc1Y2JpQWdJQ0FnSUdsbUlDaHdiM05wZEdsdmJpQStJSFJvYVhNdVgxOWxibVJRYjNOcGRHbHZiaWtnZTF4dUlDQWdJQ0FnSUNCdVpYaDBVRzl6YVhScGIyNGdQU0IwYUdsekxsOWZiMlptYzJWMFVHOXphWFJwYjI0Z0t5QjBhR2x6TGw5ZlpXNW5hVzVsTG5ONWJtTlFiM05wZEdsdmJpaDBhVzFsTENCMGFHbHpMbDlmWlc1a1VHOXphWFJwYjI0Z0xTQjBhR2x6TGw5ZmIyWm1jMlYwVUc5emFYUnBiMjRzSUhOd1pXVmtLVHRjYmlBZ0lDQWdJQ0FnZEdocGN5NWZYMmx6VW5WdWJtbHVaeUE5SUhSeWRXVTdYRzRnSUNBZ0lDQjlJR1ZzYzJVZ2FXWWdLSEJ2YzJsMGFXOXVJRDRnZEdocGN5NWZYM04wWVhKMFVHOXphWFJwYjI0cElIdGNiaUFnSUNBZ0lDQWdibVY0ZEZCdmMybDBhVzl1SUQwZ2RHaHBjeTVmWDI5bVpuTmxkRkJ2YzJsMGFXOXVJQ3NnZEdocGN5NWZYMlZ1WjJsdVpTNXplVzVqVUc5emFYUnBiMjRvZEdsdFpTd2djRzl6YVhScGIyNGdMU0IwYUdsekxsOWZiMlptYzJWMFVHOXphWFJwYjI0c0lITndaV1ZrS1R0Y2JpQWdJQ0FnSUNBZ2RHaHBjeTVmWDJselVuVnVibWx1WnlBOUlIUnlkV1U3WEc0Z0lDQWdJQ0I5SUdWc2MyVWdlMXh1SUNBZ0lDQWdJQ0IwYUdsekxsOWZaVzVuYVc1bExuTjVibU5RYjNOcGRHbHZiaWgwYVcxbExDQndiM05wZEdsdmJpQXRJSFJvYVhNdVgxOXZabVp6WlhSUWIzTnBkR2x2Yml3Z01DazdYRzVjYmlBZ0lDQWdJQ0FnZEdocGN5NWZYMmx6VW5WdWJtbHVaeUE5SUdaaGJITmxPMXh1SUNBZ0lDQWdJQ0J1WlhoMFVHOXphWFJwYjI0Z1BTQkpibVpwYm1sMGVTQXFJSE53WldWa08xeHVJQ0FnSUNBZ2ZWeHVYRzRnSUNBZ0lDQXZMeUJwWmlCemIyMWxhRzkzSUhSb1pTQmxibWRwYm1VZ1lYTnJaV1FnZEc4Z1ltVWdZMkZzYkdWa0lHSmxabTl5WlNCZ2MzUmhjblJRYjNOcGRHbHZibUFzSUdOc1lXMXdJSFpoYkhWbFhHNGdJQ0FnSUNCcFppQW9kR2hwY3k1ZlgybHpVblZ1Ym1sdVp5QW1KaUJ1WlhoMFVHOXphWFJwYjI0Z1BDQjBhR2x6TGw5ZmMzUmhjblJRYjNOcGRHbHZiaWtnZTF4dUlDQWdJQ0FnSUNCdVpYaDBVRzl6YVhScGIyNGdQU0IwYUdsekxsOWZjM1JoY25SUWIzTnBkR2x2Ymp0Y2JpQWdJQ0FnSUgxY2JseHVJQ0FnSUgwZ1pXeHpaU0I3WEc0Z0lDQWdJQ0IwYUdsekxsOWZaVzVuYVc1bExuTjVibU5RYjNOcGRHbHZiaWgwYVcxbExDQndiM05wZEdsdmJpQXRJSFJvYVhNdVgxOXZabVp6WlhSUWIzTnBkR2x2Yml3Z01DazdYRzVjYmlBZ0lDQWdJSFJvYVhNdVgxOXBjMUoxYm01cGJtY2dQU0JtWVd4elpUdGNiaUFnSUNBZ0lHNWxlSFJRYjNOcGRHbHZiaUE5SUVsdVptbHVhWFI1TzF4dUlDQWdJSDFjYmx4dUlDQWdJSEpsZEhWeWJpQnVaWGgwVUc5emFYUnBiMjQ3WEc0Z0lIMWNibHh1SUNCaFpIWmhibU5sVUc5emFYUnBiMjRvZEdsdFpTd2djRzl6YVhScGIyNHNJSE53WldWa0tTQjdYRzRnSUNBZ0x5OGdZMlZwYkNCdmNpQm1iRzl2Y2lCZ2NHOXphWFJwYjI1Z0lHRjBJREV3WGkwNUlIUnZJSEJ5WlhabGJuUWdabXh2WVhRZ1lYSnBkR2h0WlhScFkzTWdaWEp5YjNKelhHNGdJQ0FnTHk4Z2RHaGhkQ0J0WVd0bElIUm9aU0IwY21GdWMzQnZjblJsWkNCbmJ5QjBieUJwYm1acGJtbDBaU0JzYjI5d2MxeHVJQ0FnSUdsbUlDaHpjR1ZsWkNBK0lEQXBJSHRjYmlBZ0lDQWdJSEJ2YzJsMGFXOXVJRDBnVFdGMGFDNWpaV2xzS0hCdmMybDBhVzl1SUNvZ01XVTVLU0FxSURGbExUazdYRzRnSUNBZ2ZTQmxiSE5sSUdsbUlDaHpjR1ZsWkNBOElEQXBJSHRjYmlBZ0lDQWdJSEJ2YzJsMGFXOXVJRDBnVFdGMGFDNW1iRzl2Y2lod2IzTnBkR2x2YmlBcUlERmxPU2tnS2lBeFpTMDVPMXh1SUNBZ0lIMWNibHh1SUNBZ0lDOHZJSE4wYjNBZ1pXNW5hVzVsSUdsbUlHOTFkSE5wWkdVZ1ltOTFibVJoY21sbGMxeHVJQ0FnSUdsbUlDaHpjR1ZsWkNBK0lEQWdKaVlnY0c5emFYUnBiMjRnUGowZ2RHaHBjeTVmWDJWdVpGQnZjMmwwYVc5dUlDWW1JSFJvYVhNdVgxOXBjMUoxYm01cGJtY3BJSHRjYmlBZ0lDQWdJQzh2SUhOMGIzQWdaVzVuYVc1bElHRjBJRjlmWlc1a1VHOXphWFJwYjI1Y2JpQWdJQ0FnSUhSb2FYTXVYMTlsYm1kcGJtVXVjM2x1WTFCdmMybDBhVzl1S0hScGJXVXNJSFJvYVhNdVgxOWxibVJRYjNOcGRHbHZiaUF0SUhSb2FYTXVYMTl2Wm1aelpYUlFiM05wZEdsdmJpd2dNQ2s3WEc0Z0lDQWdJQ0IwYUdsekxsOWZhWE5TZFc1dWFXNW5JRDBnWm1Gc2MyVTdYRzVjYmlBZ0lDQWdJSEpsZEhWeWJpQkpibVpwYm1sMGVTQXFJSE53WldWa095QXZMMXh1SUNBZ0lIMGdaV3h6WlNCcFppQW9jM0JsWldRZ1BDQXdJQ1ltSUhCdmMybDBhVzl1SUR3Z2RHaHBjeTVmWDNOMFlYSjBVRzl6YVhScGIyNGdKaVlnZEdocGN5NWZYMmx6VW5WdWJtbHVaeWtnZTF4dUlDQWdJQ0FnZEdocGN5NWZYMlZ1WjJsdVpTNXplVzVqVUc5emFYUnBiMjRvZEdsdFpTd2dkR2hwY3k1ZlgzTjBZWEowVUc5emFYUnBiMjRnTFNCMGFHbHpMbDlmYjJabWMyVjBVRzl6YVhScGIyNHNJREFwTzF4dUlDQWdJQ0FnZEdocGN5NWZYMmx6VW5WdWJtbHVaeUE5SUdaaGJITmxPMXh1WEc0Z0lDQWdJQ0J5WlhSMWNtNGdTVzVtYVc1cGRIa2dLaUJ6Y0dWbFpEc2dMeTljYmlBZ0lDQjlYRzVjYmlBZ0lDQXZMeUJrWldacGJtVWdibVY0ZENCd2IzTnBkR2x2YmlCaGJtUWdZMnhoYlhBZ2RHOGdZbTkxYm1SaGNtbGxjMXh1SUNBZ0lIQnZjMmwwYVc5dUlEMGdkR2hwY3k1ZlgyOW1abk5sZEZCdmMybDBhVzl1SUNzZ2RHaHBjeTVmWDJWdVoybHVaUzVoWkhaaGJtTmxVRzl6YVhScGIyNG9kR2x0WlN3Z2NHOXphWFJwYjI0Z0xTQjBhR2x6TGw5ZmIyWm1jMlYwVUc5emFYUnBiMjRzSUhOd1pXVmtLVHRjYmx4dUlDQWdJQzh2SUhOMGIzQWdaVzVuYVc1bElHbG1JRzkxZEhOcFpHVWdZbTkxYm1SaGNtbGxjeUF0SUhkcGJHd2dZMkZzYkNCaFpIWmhibU5sVUc5emFYUnBiMjRnYjI1alpTQnRiM0psWEc0Z0lDQWdMeThnWVc1a0lIUm9kWE1nWUhONWJtTlFiM05wZEdsdmJtQWdLR05tTGlCc2FXNWxJREl4T0NBdElESXlPQ2xjYmlBZ0lDQnBaaUFvYzNCbFpXUWdQaUF3SUNZbUlIQnZjMmwwYVc5dUlENGdkR2hwY3k1ZlgyVnVaRkJ2YzJsMGFXOXVLU0I3WEc0Z0lDQWdJQ0J3YjNOcGRHbHZiaUE5SUhSb2FYTXVYMTlsYm1SUWIzTnBkR2x2Ymp0Y2JpQWdJQ0I5SUdWc2MyVWdhV1lnS0hOd1pXVmtJRHdnTUNBbUppQndiM05wZEdsdmJpQThJSFJvYVhNdVgxOXpkR0Z5ZEZCdmMybDBhVzl1S1NCN1hHNGdJQ0FnSUNCd2IzTnBkR2x2YmlBOUlIUm9hWE11WDE5emRHRnlkRkJ2YzJsMGFXOXVPMXh1SUNBZ0lIMWNibHh1SUNBZ0lISmxkSFZ5YmlCd2IzTnBkR2x2Ymp0Y2JpQWdmVnh1WEc0Z0lITjVibU5UY0dWbFpDaDBhVzFsTENCd2IzTnBkR2x2Yml3Z2MzQmxaV1FwSUh0Y2JpQWdJQ0JwWmlBb2RHaHBjeTVmWDJWdVoybHVaUzV6ZVc1alUzQmxaV1FwSUh0Y2JpQWdJQ0FnSUhSb2FYTXVYMTlsYm1kcGJtVXVjM2x1WTFOd1pXVmtLSFJwYldVc0lIQnZjMmwwYVc5dUxDQnpjR1ZsWkNrN1hHNGdJQ0FnZlZ4dUlDQjlYRzVjYmlBZ2NtVnpaWFJGYm1kcGJtVlFiM05wZEdsdmJpaGxibWRwYm1Vc0lIQnZjMmwwYVc5dUlEMGdkVzVrWldacGJtVmtLU0I3WEc0Z0lDQWdhV1lnS0hCdmMybDBhVzl1SUNFOVBTQjFibVJsWm1sdVpXUXBJSHRjYmlBZ0lDQWdJSEJ2YzJsMGFXOXVJQ3M5SUhSb2FYTXVYMTl2Wm1aelpYUlFiM05wZEdsdmJqdGNiaUFnSUNCOVhHNWNiaUFnSUNCMGFHbHpMbTFoYzNSbGNpNXlaWE5sZEVWdVoybHVaVkJ2YzJsMGFXOXVLSFJvYVhNc0lIQnZjMmwwYVc5dUtUdGNiaUFnZlZ4dVhHNGdJR1JsYzNSeWIza29LU0I3WEc0Z0lDQWdkR2hwY3k1ZlgyVnVaMmx1WlM1emVXNWpVRzl6YVhScGIyNG9kR2hwY3k1dFlYTjBaWEl1WTNWeWNtVnVkRlJwYldVc0lIUm9hWE11YldGemRHVnlMbU4xY25KbGJuUlFiM05wZEdsdmJpd2dNQ2s3WEc0Z0lDQWdjM1Z3WlhJdVpHVnpkSEp2ZVNncE8xeHVJQ0I5WEc1OVhHNWNiaTh2SUZSeVlXNXpjRzl5ZEdWa1UzQmxaV1JEYjI1MGNtOXNiR1ZrWEc0dkx5Qm9ZWE1nZEc4Z2MzUmhjblFnWVc1a0lITjBiM0FnZEdobElITndaV1ZrTFdOdmJuUnliMnhzWldRZ1pXNW5hVzVsY3lCM2FHVnVJSFJvWlNCMGNtRnVjM0J2Y25RZ2FHbDBjeUIwYUdVZ1pXNW5hVzVsSjNNZ2MzUmhjblFnWVc1a0lHVnVaQ0J3YjNOcGRHbHZibHh1WTJ4aGMzTWdWSEpoYm5Od2IzSjBaV1JUY0dWbFpFTnZiblJ5YjJ4c1pXUWdaWGgwWlc1a2N5QlVjbUZ1YzNCdmNuUmxaQ0I3WEc0Z0lHTnZibk4wY25WamRHOXlLSFJ5WVc1emNHOXlkQ3dnWlc1bmFXNWxMQ0J6ZEdGeWRGQnZjMmwwYVc5dUxDQmxibVJRYjNOcGRHbHZiaXdnYjJabWMyVjBVRzl6YVhScGIyNHBJSHRjYmlBZ0lDQnpkWEJsY2loMGNtRnVjM0J2Y25Rc0lHVnVaMmx1WlN3Z2MzUmhjblJRYjNOcGRHbHZiaXdnWlc1a1VHOXphWFJwYjI0c0lHOW1abk5sZEZCdmMybDBhVzl1S1R0Y2JpQWdmVnh1WEc0Z0lITjBZWEowS0hScGJXVXNJSEJ2YzJsMGFXOXVMQ0J6Y0dWbFpDa2dlMXh1SUNBZ0lIUm9hWE11WDE5bGJtZHBibVV1YzNsdVkxTndaV1ZrS0hScGJXVXNJSEJ2YzJsMGFXOXVMQ0J6Y0dWbFpDd2dkSEoxWlNrN1hHNGdJSDFjYmx4dUlDQnpkRzl3S0hScGJXVXNJSEJ2YzJsMGFXOXVLU0I3WEc0Z0lDQWdkR2hwY3k1ZlgyVnVaMmx1WlM1emVXNWpVM0JsWldRb2RHbHRaU3dnY0c5emFYUnBiMjRzSURBcE8xeHVJQ0I5WEc1Y2JpQWdjM2x1WTFOd1pXVmtLSFJwYldVc0lIQnZjMmwwYVc5dUxDQnpjR1ZsWkNrZ2UxeHVJQ0FnSUdsbUlDaDBhR2x6TGw5ZmFYTlNkVzV1YVc1bktWeHVJQ0FnSUNBZ2RHaHBjeTVmWDJWdVoybHVaUzV6ZVc1alUzQmxaV1FvZEdsdFpTd2djRzl6YVhScGIyNHNJSE53WldWa0tUdGNiaUFnZlZ4dVhHNGdJR1JsYzNSeWIza29LU0I3WEc0Z0lDQWdkR2hwY3k1ZlgyVnVaMmx1WlM1emVXNWpVM0JsWldRb2RHaHBjeTV0WVhOMFpYSXVZM1Z5Y21WdWRGUnBiV1VzSUhSb2FYTXViV0Z6ZEdWeUxtTjFjbkpsYm5SUWIzTnBkR2x2YmlBdElIUm9hWE11WDE5dlptWnpaWFJRYjNOcGRHbHZiaXdnTUNrN1hHNGdJQ0FnYzNWd1pYSXVaR1Z6ZEhKdmVTZ3BPMXh1SUNCOVhHNTlYRzVjYmk4dklGUnlZVzV6Y0c5eWRHVmtVMk5vWldSMWJHVmtYRzR2THlCb1lYTWdkRzhnYzNkcGRHTm9JRzl1SUdGdVpDQnZabVlnZEdobElITmphR1ZrZFd4bFpDQmxibWRwYm1WeklIZG9aVzRnZEdobElIUnlZVzV6Y0c5eWRDQm9hWFJ6SUhSb1pTQmxibWRwYm1VbmN5QnpkR0Z5ZENCaGJtUWdaVzVrSUhCdmMybDBhVzl1WEc1amJHRnpjeUJVY21GdWMzQnZjblJsWkZOamFHVmtkV3hsWkNCbGVIUmxibVJ6SUZSeVlXNXpjRzl5ZEdWa0lIdGNiaUFnWTI5dWMzUnlkV04wYjNJb2RISmhibk53YjNKMExDQmxibWRwYm1Vc0lITjBZWEowVUc5emFYUnBiMjRzSUdWdVpGQnZjMmwwYVc5dUxDQnZabVp6WlhSUWIzTnBkR2x2YmlrZ2UxeHVJQ0FnSUhOMWNHVnlLSFJ5WVc1emNHOXlkQ3dnWlc1bmFXNWxMQ0J6ZEdGeWRGQnZjMmwwYVc5dUxDQmxibVJRYjNOcGRHbHZiaXdnYjJabWMyVjBVRzl6YVhScGIyNHBPMXh1WEc0Z0lDQWdMeThnYzJOb1pXUjFiR2x1WnlCeGRXVjFaU0JpWldOdmJXVnpJRzFoYzNSbGNpQnZaaUJsYm1kcGJtVmNiaUFnSUNCbGJtZHBibVV1YldGemRHVnlJRDBnYm5Wc2JEdGNiaUFnSUNCMGNtRnVjM0J2Y25RdVgxOXpZMmhsWkhWc2FXNW5VWFZsZFdVdVlXUmtLR1Z1WjJsdVpTd2dTVzVtYVc1cGRIa3BPMXh1SUNCOVhHNWNiaUFnYzNSaGNuUW9kR2x0WlN3Z2NHOXphWFJwYjI0c0lITndaV1ZrS1NCN1hHNGdJQ0FnZEdocGN5NXRZWE4wWlhJdVgxOXpZMmhsWkhWc2FXNW5VWFZsZFdVdWNtVnpaWFJGYm1kcGJtVlVhVzFsS0hSb2FYTXVYMTlsYm1kcGJtVXNJSFJwYldVcE8xeHVJQ0I5WEc1Y2JpQWdjM1J2Y0NoMGFXMWxMQ0J3YjNOcGRHbHZiaWtnZTF4dUlDQWdJSFJvYVhNdWJXRnpkR1Z5TGw5ZmMyTm9aV1IxYkdsdVoxRjFaWFZsTG5KbGMyVjBSVzVuYVc1bFZHbHRaU2gwYUdsekxsOWZaVzVuYVc1bExDQkpibVpwYm1sMGVTazdYRzRnSUgxY2JseHVJQ0JrWlhOMGNtOTVLQ2tnZTF4dUlDQWdJSFJvYVhNdWJXRnpkR1Z5TGw5ZmMyTm9aV1IxYkdsdVoxRjFaWFZsTG5KbGJXOTJaU2gwYUdsekxsOWZaVzVuYVc1bEtUdGNiaUFnSUNCemRYQmxjaTVrWlhOMGNtOTVLQ2s3WEc0Z0lIMWNibjFjYmx4dUx5OGdkSEpoYm5Oc1lYUmxjeUJoWkhaaGJtTmxVRzl6YVhScGIyNGdiMllnS25SeVlXNXpjRzl5ZEdWa0tpQmxibWRwYm1WeklHbHVkRzhnWjJ4dlltRnNJSE5qYUdWa2RXeGxjaUIwYVcxbGMxeHVZMnhoYzNNZ1ZISmhibk53YjNKMFUyTm9aV1IxYkdWeVNHOXZheUJsZUhSbGJtUnpJRlJwYldWRmJtZHBibVVnZTF4dUlDQmpiMjV6ZEhKMVkzUnZjaWgwY21GdWMzQnZjblFwSUh0Y2JpQWdJQ0J6ZFhCbGNpZ3BPMXh1WEc0Z0lDQWdkR2hwY3k1ZlgzUnlZVzV6Y0c5eWRDQTlJSFJ5WVc1emNHOXlkRHRjYmx4dUlDQWdJSFJvYVhNdVgxOXVaWGgwVUc5emFYUnBiMjRnUFNCSmJtWnBibWwwZVR0Y2JpQWdJQ0IwYUdsekxsOWZibVY0ZEZScGJXVWdQU0JKYm1acGJtbDBlVHRjYmlBZ0lDQjBjbUZ1YzNCdmNuUXVYMTl6WTJobFpIVnNaWEl1WVdSa0tIUm9hWE1zSUVsdVptbHVhWFI1S1R0Y2JpQWdmVnh1WEc0Z0lDOHZJRlJwYldWRmJtZHBibVVnYldWMGFHOWtJQ2h6WTJobFpIVnNaV1FnYVc1MFpYSm1ZV05sS1Z4dUlDQmhaSFpoYm1ObFZHbHRaU2gwYVcxbEtTQjdYRzRnSUNBZ1kyOXVjM1FnZEhKaGJuTndiM0owSUQwZ2RHaHBjeTVmWDNSeVlXNXpjRzl5ZER0Y2JpQWdJQ0JqYjI1emRDQndiM05wZEdsdmJpQTlJSFJvYVhNdVgxOXVaWGgwVUc5emFYUnBiMjQ3WEc0Z0lDQWdZMjl1YzNRZ2MzQmxaV1FnUFNCMGNtRnVjM0J2Y25RdVgxOXpjR1ZsWkR0Y2JpQWdJQ0JqYjI1emRDQnVaWGgwVUc5emFYUnBiMjRnUFNCMGNtRnVjM0J2Y25RdVlXUjJZVzVqWlZCdmMybDBhVzl1S0hScGJXVXNJSEJ2YzJsMGFXOXVMQ0J6Y0dWbFpDazdYRzRnSUNBZ1kyOXVjM1FnYm1WNGRGUnBiV1VnUFNCMGNtRnVjM0J2Y25RdVgxOW5aWFJVYVcxbFFYUlFiM05wZEdsdmJpaHVaWGgwVUc5emFYUnBiMjRwTzF4dVhHNGdJQ0FnZEdocGN5NWZYMjVsZUhSUWIzTnBkR2x2YmlBOUlHNWxlSFJRYjNOcGRHbHZianRjYmlBZ0lDQjBhR2x6TGw5ZmJtVjRkRlJwYldVZ1BTQnVaWGgwVkdsdFpUdGNibHh1SUNBZ0lISmxkSFZ5YmlCdVpYaDBWR2x0WlR0Y2JpQWdmVnh1WEc0Z0lISmxjMlYwVUc5emFYUnBiMjRvY0c5emFYUnBiMjRnUFNCMGFHbHpMbDlmYm1WNGRGQnZjMmwwYVc5dUtTQjdYRzRnSUNBZ1kyOXVjM1FnZEhKaGJuTndiM0owSUQwZ2RHaHBjeTVmWDNSeVlXNXpjRzl5ZER0Y2JpQWdJQ0JqYjI1emRDQjBhVzFsSUQwZ2RISmhibk53YjNKMExsOWZaMlYwVkdsdFpVRjBVRzl6YVhScGIyNG9jRzl6YVhScGIyNHBPMXh1WEc0Z0lDQWdkR2hwY3k1ZlgyNWxlSFJRYjNOcGRHbHZiaUE5SUhCdmMybDBhVzl1TzF4dUlDQWdJSFJvYVhNdVgxOXVaWGgwVkdsdFpTQTlJSFJwYldVN1hHNWNiaUFnSUNCMGFHbHpMbkpsYzJWMFZHbHRaU2gwYVcxbEtUdGNiaUFnZlZ4dVhHNGdJR1JsYzNSeWIza29LU0I3WEc0Z0lDQWdkR2hwY3k1ZlgzUnlZVzV6Y0c5eWRDNWZYM05qYUdWa2RXeGxjaTV5WlcxdmRtVW9kR2hwY3lrN1hHNGdJQ0FnZEdocGN5NWZYM1J5WVc1emNHOXlkQ0E5SUc1MWJHdzdYRzRnSUgxY2JuMWNibHh1THk4Z2FXNTBaWEp1WVd3Z2MyTm9aV1IxYkdsdVp5QnhkV1YxWlNCMGFHRjBJSEpsZEhWeWJuTWdkR2hsSUdOMWNuSmxiblFnY0c5emFYUnBiMjRnS0dGdVpDQjBhVzFsS1NCdlppQjBhR1VnZEhKaGJuTndiM0owWEc1amJHRnpjeUJVY21GdWMzQnZjblJUWTJobFpIVnNhVzVuVVhWbGRXVWdaWGgwWlc1a2N5QlRZMmhsWkhWc2FXNW5VWFZsZFdVZ2UxeHVJQ0JqYjI1emRISjFZM1J2Y2loMGNtRnVjM0J2Y25RcElIdGNiaUFnSUNCemRYQmxjaWdwTzF4dVhHNGdJQ0FnZEdocGN5NWZYM1J5WVc1emNHOXlkQ0E5SUhSeVlXNXpjRzl5ZER0Y2JpQWdJQ0IwY21GdWMzQnZjblF1WDE5elkyaGxaSFZzWlhJdVlXUmtLSFJvYVhNc0lFbHVabWx1YVhSNUtUdGNiaUFnZlZ4dVhHNGdJR2RsZENCamRYSnlaVzUwVkdsdFpTZ3BJSHRjYmlBZ0lDQnlaWFIxY200Z2RHaHBjeTVmWDNSeVlXNXpjRzl5ZEM1amRYSnlaVzUwVkdsdFpUdGNiaUFnZlZ4dVhHNGdJR2RsZENCaGRXUnBiMVJwYldVb0tTQjdYRzRnSUNBZ2NtVjBkWEp1SUhSb2FYTXVYMTkwY21GdWMzQnZjblF1WVhWa2FXOVVhVzFsTzF4dUlDQjlYRzVjYmlBZ1oyVjBJR04xY25KbGJuUlFiM05wZEdsdmJpZ3BJSHRjYmlBZ0lDQnlaWFIxY200Z2RHaHBjeTVmWDNSeVlXNXpjRzl5ZEM1amRYSnlaVzUwVUc5emFYUnBiMjQ3WEc0Z0lIMWNibHh1SUNCa1pYTjBjbTk1S0NrZ2UxeHVJQ0FnSUhSb2FYTXVYMTkwY21GdWMzQnZjblF1WDE5elkyaGxaSFZzWlhJdWNtVnRiM1psS0hSb2FYTXBPMXh1SUNBZ0lIUm9hWE11WDE5MGNtRnVjM0J2Y25RZ1BTQnVkV3hzTzF4dUlDQjlYRzU5WEc1Y2JpOHFLbHh1SUNvZ1VISnZkbWxrWlhNZ2NHOXphWFJwYjI0dFltRnpaV1FnYzJOb1pXUjFiR2x1WnlCdlppQlVhVzFsUlc1bmFXNWxJR2x1YzNSaGJtTmxjeTVjYmlBcVhHNGdLaUJiWlhoaGJYQnNaVjE3UUd4cGJtc2dhSFIwY0hNNkx5OXlZWGRuYVhRdVkyOXRMM2RoZG1WemFuTXZkMkYyWlhNdGJXRnpkR1Z5Y3k5dFlYTjBaWEl2WlhoaGJYQnNaWE12ZEhKaGJuTndiM0owTDJsdVpHVjRMbWgwYld4OVhHNGdLbHh1SUNwY2JpQXFJRUJ3WVhKaGJTQjdUMkpxWldOMGZTQnpZMmhsWkhWc1pYSWdMU0JwYm5OMFlXNWpaU0J2WmlCVFkyaGxaSFZzWlhKY2JpQXFYRzRnS2lCQVpYaGhiWEJzWlZ4dUlDb2dhVzF3YjNKMElDb2dZWE1nYldGemRHVnljeUJtY205dElDZDNZWFpsY3kxdFlYTjBaWEp6Snp0Y2JpQXFYRzRnS2lCamIyNXpkQ0JuWlhSVWFXMWxSblZ1WTNScGIyNGdQU0FvS1NBOVBpQjdYRzRnS2lBZ0lHTnZibk4wSUc1dmR5QTlJSEJ5YjJObGMzTXVhSEowYVcxbEtDazdYRzRnS2lBZ0lISmxkSFZ5YmlCdWIzZGJNRjBnS3lCdWIzZGJNVjBnS2lBeFpTMDVPMXh1SUNvZ2ZWeHVJQ29nWTI5dWMzUWdjMk5vWldSMWJHVnlJRDBnYm1WM0lHMWhjM1JsY25NdVUyTm9aV1IxYkdWeUtHZGxkRlJwYldWR2RXNWpkR2x2YmlrN1hHNGdLaUJqYjI1emRDQjBjbUZ1YzNCdmNuUWdQU0J1WlhjZ2JXRnpkR1Z5Y3k1VWNtRnVjM0J2Y25Rb2MyTm9aV1IxYkdWeUtUdGNiaUFxSUdOdmJuTjBJSEJzWVhsRGIyNTBjbTlzSUQwZ2JtVjNJRzFoYzNSbGNuTXVVR3hoZVVOdmJuUnliMndvYzJOb1pXUjFiR1Z5TENCMGNtRnVjM0J2Y25RcE8xeHVJQ29nWTI5dWMzUWdiWGxGYm1kcGJtVWdQU0J1WlhjZ1RYbEZibWRwYm1Vb0tUdGNiaUFxSUdOdmJuTjBJSGx2ZFhKRmJtZHBibVVnUFNCdVpYY2dlVzkxY2tWdVoybHVaU2dwTzF4dUlDcGNiaUFxSUhSeVlXNXpjRzl5ZEM1aFpHUW9iWGxGYm1kcGJtVXBPMXh1SUNvZ2RISmhibk53YjNKMExtRmtaQ2g1YjNWeVJXNW5hVzVsS1R0Y2JpQXFYRzRnS2lCd2JHRjVRMjl1ZEhKdmJDNXpkR0Z5ZENncE8xeHVJQ292WEc1amJHRnpjeUJVY21GdWMzQnZjblFnWlhoMFpXNWtjeUJVYVcxbFJXNW5hVzVsSUh0Y2JpQWdZMjl1YzNSeWRXTjBiM0lvYzJOb1pXUjFiR1Z5TENCdmNIUnBiMjV6SUQwZ2UzMHBJSHRjYmlBZ0lDQnpkWEJsY2lncE8xeHVYRzRnSUNBZ2FXWWdLQ0Z6WTJobFpIVnNaWElwWEc0Z0lDQWdJQ0IwYUhKdmR5QnVaWGNnUlhKeWIzSW9KMGx1ZG1Gc2FXUWdZWEpuZFcxbGJuUWdZSE5qYUdWa2RXeGxjbUFzSUhOb2IzVnNaQ0JpWlNCaGJpQnBibk4wWVc1alpTQnZaaUJnVTJOb1pXUjFiR1Z5WUNjcE8xeHVYRzRnSUNBZ2RHaHBjeTVmWDJWdVoybHVaWE1nUFNCYlhUdGNiaUFnSUNCMGFHbHpMbDlmZEhKaGJuTndiM0owWldRZ1BTQmJYVHRjYmx4dUlDQWdJSFJvYVhNdVgxOXpZMmhsWkhWc1pYSWdQU0J6WTJobFpIVnNaWEk3WEc0Z0lDQWdkR2hwY3k1ZlgzTmphR1ZrZFd4bGNraHZiMnNnUFNCdVpYY2dWSEpoYm5Od2IzSjBVMk5vWldSMWJHVnlTRzl2YXloMGFHbHpLVHRjYmlBZ0lDQjBhR2x6TGw5ZmRISmhibk53YjNKMFpXUlJkV1YxWlNBOUlHNWxkeUJRY21sdmNtbDBlVkYxWlhWbEtDazdYRzRnSUNBZ2RHaHBjeTVmWDNOamFHVmtkV3hwYm1kUmRXVjFaU0E5SUc1bGR5QlVjbUZ1YzNCdmNuUlRZMmhsWkhWc2FXNW5VWFZsZFdVb2RHaHBjeWs3WEc1Y2JpQWdJQ0F2THlCemVXNWpjbTl1YVhwbFpDQjBhVzFsTENCd2IzTnBkR2x2Yml3Z1lXNWtJSE53WldWa1hHNGdJQ0FnZEdocGN5NWZYM1JwYldVZ1BTQXdPMXh1SUNBZ0lIUm9hWE11WDE5d2IzTnBkR2x2YmlBOUlEQTdYRzRnSUNBZ2RHaHBjeTVmWDNOd1pXVmtJRDBnTUR0Y2JpQWdmVnh1WEc0Z0lGOWZaMlYwVkdsdFpVRjBVRzl6YVhScGIyNG9jRzl6YVhScGIyNHBJSHRjYmlBZ0lDQnBaaUFvZEdocGN5NWZYM053WldWa0lEMDlQU0F3S1Z4dUlDQWdJQ0FnY21WMGRYSnVJQ3RKYm1acGJtbDBlVHRjYmlBZ0lDQmxiSE5sWEc0Z0lDQWdJQ0J5WlhSMWNtNGdkR2hwY3k1ZlgzUnBiV1VnS3lBb2NHOXphWFJwYjI0Z0xTQjBhR2x6TGw5ZmNHOXphWFJwYjI0cElDOGdkR2hwY3k1ZlgzTndaV1ZrTzF4dUlDQjlYRzVjYmlBZ1gxOW5aWFJRYjNOcGRHbHZia0YwVkdsdFpTaDBhVzFsS1NCN1hHNGdJQ0FnY21WMGRYSnVJSFJvYVhNdVgxOXdiM05wZEdsdmJpQXJJQ2gwYVcxbElDMGdkR2hwY3k1ZlgzUnBiV1VwSUNvZ2RHaHBjeTVmWDNOd1pXVmtPMXh1SUNCOVhHNWNiaUFnWDE5emVXNWpWSEpoYm5Od2IzSjBaV1JRYjNOcGRHbHZiaWgwYVcxbExDQndiM05wZEdsdmJpd2djM0JsWldRcElIdGNiaUFnSUNCamIyNXpkQ0J1ZFcxVWNtRnVjM0J2Y25SbFpFVnVaMmx1WlhNZ1BTQjBhR2x6TGw5ZmRISmhibk53YjNKMFpXUXViR1Z1WjNSb08xeHVJQ0FnSUd4bGRDQnVaWGgwVUc5emFYUnBiMjRnUFNCSmJtWnBibWwwZVNBcUlITndaV1ZrTzF4dVhHNGdJQ0FnYVdZZ0tHNTFiVlJ5WVc1emNHOXlkR1ZrUlc1bmFXNWxjeUErSURBcElIdGNiaUFnSUNBZ0lIUm9hWE11WDE5MGNtRnVjM0J2Y25SbFpGRjFaWFZsTG1Oc1pXRnlLQ2s3WEc0Z0lDQWdJQ0IwYUdsekxsOWZkSEpoYm5Od2IzSjBaV1JSZFdWMVpTNXlaWFpsY25ObElEMGdLSE53WldWa0lEd2dNQ2s3WEc1Y2JpQWdJQ0FnSUdadmNpQW9iR1YwSUdrZ1BTQXdPeUJwSUR3Z2JuVnRWSEpoYm5Od2IzSjBaV1JGYm1kcGJtVnpPeUJwS3lzcElIdGNiaUFnSUNBZ0lDQWdZMjl1YzNRZ1pXNW5hVzVsSUQwZ2RHaHBjeTVmWDNSeVlXNXpjRzl5ZEdWa1cybGRPMXh1SUNBZ0lDQWdJQ0JqYjI1emRDQnVaWGgwUlc1bmFXNWxVRzl6YVhScGIyNGdQU0JsYm1kcGJtVXVjM2x1WTFCdmMybDBhVzl1S0hScGJXVXNJSEJ2YzJsMGFXOXVMQ0J6Y0dWbFpDazdYRzRnSUNBZ0lDQWdJSFJvYVhNdVgxOTBjbUZ1YzNCdmNuUmxaRkYxWlhWbExtbHVjMlZ5ZENobGJtZHBibVVzSUc1bGVIUkZibWRwYm1WUWIzTnBkR2x2YmlrN1hHNGdJQ0FnSUNCOVhHNWNiaUFnSUNBZ0lHNWxlSFJRYjNOcGRHbHZiaUE5SUhSb2FYTXVYMTkwY21GdWMzQnZjblJsWkZGMVpYVmxMblJwYldVN1hHNGdJQ0FnZlZ4dVhHNGdJQ0FnY21WMGRYSnVJRzVsZUhSUWIzTnBkR2x2Ymp0Y2JpQWdmVnh1WEc0Z0lGOWZjM2x1WTFSeVlXNXpjRzl5ZEdWa1UzQmxaV1FvZEdsdFpTd2djRzl6YVhScGIyNHNJSE53WldWa0tTQjdYRzRnSUNBZ1ptOXlJQ2hzWlhRZ2RISmhibk53YjNKMFpXUWdiMllnZEdocGN5NWZYM1J5WVc1emNHOXlkR1ZrS1Z4dUlDQWdJQ0FnZEhKaGJuTndiM0owWldRdWMzbHVZMU53WldWa0tIUnBiV1VzSUhCdmMybDBhVzl1TENCemNHVmxaQ2s3WEc0Z0lIMWNibHh1SUNBdktpcGNiaUFnSUNvZ1IyVjBJR04xY25KbGJuUWdiV0Z6ZEdWeUlIUnBiV1V1WEc0Z0lDQXFYRzRnSUNBcUlFQjBlWEJsSUh0T2RXMWlaWEo5WEc0Z0lDQXFJRUJ1WVcxbElHTjFjbkpsYm5SVWFXMWxYRzRnSUNBcUlFQnRaVzFpWlhKdlppQlVjbUZ1YzNCdmNuUmNiaUFnSUNvZ1FHbHVjM1JoYm1ObFhHNGdJQ0FxSUVCeVpXRmtiMjVzZVZ4dUlDQWdLaTljYmlBZ1oyVjBJR04xY25KbGJuUlVhVzFsS0NrZ2UxeHVJQ0FnSUhKbGRIVnliaUIwYUdsekxsOWZjMk5vWldSMWJHVnlMbU4xY25KbGJuUlVhVzFsTzF4dUlDQjlYRzVjYmlBZ0x5b3FYRzRnSUNBcUlFZGxkQ0J0WVhOMFpYSWdZWFZrYVc4Z2RHbHRaUzVjYmlBZ0lDcGNiaUFnSUNvZ1FIUjVjR1VnZTA1MWJXSmxjbjFjYmlBZ0lDb2dRRzVoYldVZ1kzVnljbVZ1ZEZScGJXVmNiaUFnSUNvZ1FHMWxiV0psY205bUlGUnlZVzV6Y0c5eWRGeHVJQ0FnS2lCQWFXNXpkR0Z1WTJWY2JpQWdJQ29nUUhKbFlXUnZibXg1WEc0Z0lDQXFMMXh1SUNCblpYUWdZWFZrYVc5VWFXMWxLQ2tnZTF4dUlDQWdJSEpsZEhWeWJpQjBhR2x6TGw5ZmMyTm9aV1IxYkdWeUxtRjFaR2x2VkdsdFpUdGNiaUFnZlZ4dVhHNGdJQzhxS2x4dUlDQWdLaUJIWlhRZ1kzVnljbVZ1ZENCdFlYTjBaWElnY0c5emFYUnBiMjR1SUZSb2FYTWdaMlYwZEdWeUlIZHBiR3dnWW1VZ2NtVndiR0ZqWldRZ2QyaGxiaUIwYUdVZ2RISmhibk53YjNKMFhHNGdJQ0FxSUdseklHRmtaR1ZrSUhSdklHRWdiV0Z6ZEdWeUlDaHBMbVV1SUhSeVlXNXpjRzl5ZENCdmNpQndiR0Y1TFdOdmJuUnliMndwTGx4dUlDQWdLbHh1SUNBZ0tpQkFkSGx3WlNCN1RuVnRZbVZ5ZlZ4dUlDQWdLaUJBYm1GdFpTQmpkWEp5Wlc1MFVHOXphWFJwYjI1Y2JpQWdJQ29nUUcxbGJXSmxjbTltSUZSeVlXNXpjRzl5ZEZ4dUlDQWdLaUJBYVc1emRHRnVZMlZjYmlBZ0lDb2dRSEpsWVdSdmJteDVYRzRnSUNBcUwxeHVJQ0JuWlhRZ1kzVnljbVZ1ZEZCdmMybDBhVzl1S0NrZ2UxeHVJQ0FnSUdOdmJuTjBJRzFoYzNSbGNpQTlJSFJvYVhNdWJXRnpkR1Z5TzF4dVhHNGdJQ0FnYVdZZ0tHMWhjM1JsY2lBbUppQnRZWE4wWlhJdVkzVnljbVZ1ZEZCdmMybDBhVzl1SUNFOVBTQjFibVJsWm1sdVpXUXBYRzRnSUNBZ0lDQnlaWFIxY200Z2JXRnpkR1Z5TG1OMWNuSmxiblJRYjNOcGRHbHZianRjYmx4dUlDQWdJSEpsZEhWeWJpQjBhR2x6TGw5ZmNHOXphWFJwYjI0Z0t5QW9kR2hwY3k1ZlgzTmphR1ZrZFd4bGNpNWpkWEp5Wlc1MFZHbHRaU0F0SUhSb2FYTXVYMTkwYVcxbEtTQXFJSFJvYVhNdVgxOXpjR1ZsWkR0Y2JpQWdmVnh1WEc0Z0lDOHFLbHh1SUNBZ0tpQlNaWE5sZENCdVpYaDBJSFJ5WVc1emNHOXlkQ0J3YjNOcGRHbHZibHh1SUNBZ0tseHVJQ0FnS2lCQWNHRnlZVzBnZTA1MWJXSmxjbjBnYm1WNGRDQXRJSFJ5WVc1emNHOXlkQ0J3YjNOcGRHbHZibHh1SUNBZ0tpOWNiaUFnY21WelpYUlFiM05wZEdsdmJpaHdiM05wZEdsdmJpa2dlMXh1SUNBZ0lHTnZibk4wSUcxaGMzUmxjaUE5SUhSb2FYTXViV0Z6ZEdWeU8xeHVYRzRnSUNBZ2FXWWdLRzFoYzNSbGNpQW1KaUJ0WVhOMFpYSXVjbVZ6WlhSRmJtZHBibVZRYjNOcGRHbHZiaUFoUFQwZ2RXNWtaV1pwYm1Wa0tWeHVJQ0FnSUNBZ2JXRnpkR1Z5TG5KbGMyVjBSVzVuYVc1bFVHOXphWFJwYjI0b2RHaHBjeXdnY0c5emFYUnBiMjRwTzF4dUlDQWdJR1ZzYzJWY2JpQWdJQ0FnSUhSb2FYTXVYMTl6WTJobFpIVnNaWEpJYjI5ckxuSmxjMlYwVUc5emFYUnBiMjRvY0c5emFYUnBiMjRwTzF4dUlDQjlYRzVjYmlBZ0x5b3FYRzRnSUNBcUlFbHRjR3hsYldWdWRHRjBhVzl1SUc5bUlIUm9aU0IwY21GdWMzQnZjblJsWkNCMGFXMWxJR1Z1WjJsdVpTQnBiblJsY21aaFkyVXVYRzRnSUNBcVhHNGdJQ0FxSUVCd1lYSmhiU0I3VG5WdFltVnlmU0IwYVcxbFhHNGdJQ0FxSUVCd1lYSmhiU0I3VG5WdFltVnlmU0J3YjNOcGRHbHZibHh1SUNBZ0tpQkFjR0Z5WVcwZ2UwNTFiV0psY24wZ2MzQmxaV1JjYmlBZ0lDb3ZYRzRnSUhONWJtTlFiM05wZEdsdmJpaDBhVzFsTENCd2IzTnBkR2x2Yml3Z2MzQmxaV1FwSUh0Y2JpQWdJQ0IwYUdsekxsOWZkR2x0WlNBOUlIUnBiV1U3WEc0Z0lDQWdkR2hwY3k1ZlgzQnZjMmwwYVc5dUlEMGdjRzl6YVhScGIyNDdYRzRnSUNBZ2RHaHBjeTVmWDNOd1pXVmtJRDBnYzNCbFpXUTdYRzVjYmlBZ0lDQnlaWFIxY200Z2RHaHBjeTVmWDNONWJtTlVjbUZ1YzNCdmNuUmxaRkJ2YzJsMGFXOXVLSFJwYldVc0lIQnZjMmwwYVc5dUxDQnpjR1ZsWkNrN1hHNGdJSDFjYmx4dUlDQXZLaXBjYmlBZ0lDb2dTVzF3YkdWdFpXNTBZWFJwYjI0Z2IyWWdkR2hsSUhSeVlXNXpjRzl5ZEdWa0lIUnBiV1VnWlc1bmFXNWxJR2x1ZEdWeVptRmpaUzVjYmlBZ0lDcGNiaUFnSUNvZ1FIQmhjbUZ0SUh0T2RXMWlaWEo5SUhScGJXVmNiaUFnSUNvZ1FIQmhjbUZ0SUh0T2RXMWlaWEo5SUhCdmMybDBhVzl1WEc0Z0lDQXFJRUJ3WVhKaGJTQjdUblZ0WW1WeWZTQnpjR1ZsWkZ4dUlDQWdLaTljYmlBZ1lXUjJZVzVqWlZCdmMybDBhVzl1S0hScGJXVXNJSEJ2YzJsMGFXOXVMQ0J6Y0dWbFpDa2dlMXh1SUNBZ0lHTnZibk4wSUdWdVoybHVaU0E5SUhSb2FYTXVYMTkwY21GdWMzQnZjblJsWkZGMVpYVmxMbWhsWVdRN1hHNGdJQ0FnWTI5dWMzUWdibVY0ZEVWdVoybHVaVkJ2YzJsMGFXOXVJRDBnWlc1bmFXNWxMbUZrZG1GdVkyVlFiM05wZEdsdmJpaDBhVzFsTENCd2IzTnBkR2x2Yml3Z2MzQmxaV1FwTzF4dUlDQWdJSEpsZEhWeWJpQjBhR2x6TGw5ZmRISmhibk53YjNKMFpXUlJkV1YxWlM1dGIzWmxLR1Z1WjJsdVpTd2dibVY0ZEVWdVoybHVaVkJ2YzJsMGFXOXVLVHRjYmlBZ2ZWeHVYRzRnSUM4cUtseHVJQ0FnS2lCSmJYQnNaVzFsYm5SaGRHbHZiaUJ2WmlCMGFHVWdkSEpoYm5Od2IzSjBaV1FnZEdsdFpTQmxibWRwYm1VZ2FXNTBaWEptWVdObExseHVJQ0FnS2x4dUlDQWdLaUJBY0dGeVlXMGdlMDUxYldKbGNuMGdkR2x0WlZ4dUlDQWdLaUJBY0dGeVlXMGdlMDUxYldKbGNuMGdjRzl6YVhScGIyNWNiaUFnSUNvZ1FIQmhjbUZ0SUh0T2RXMWlaWEo5SUhOd1pXVmtYRzRnSUNBcUlFQndZWEpoYlNCN1FtOXZiR1ZoYm4wZ1czTmxaV3M5Wm1Gc2MyVmRYRzRnSUNBcUwxeHVJQ0J6ZVc1alUzQmxaV1FvZEdsdFpTd2djRzl6YVhScGIyNHNJSE53WldWa0xDQnpaV1ZySUQwZ1ptRnNjMlVwSUh0Y2JpQWdJQ0JqYjI1emRDQnNZWE4wVTNCbFpXUWdQU0IwYUdsekxsOWZjM0JsWldRN1hHNWNiaUFnSUNCMGFHbHpMbDlmZEdsdFpTQTlJSFJwYldVN1hHNGdJQ0FnZEdocGN5NWZYM0J2YzJsMGFXOXVJRDBnY0c5emFYUnBiMjQ3WEc0Z0lDQWdkR2hwY3k1ZlgzTndaV1ZrSUQwZ2MzQmxaV1E3WEc1Y2JpQWdJQ0JwWmlBb2MzQmxaV1FnSVQwOUlHeGhjM1JUY0dWbFpDQjhmQ0J6WldWcktTQjdYRzRnSUNBZ0lDQnNaWFFnYm1WNGRGQnZjMmwwYVc5dU8xeHVYRzRnSUNBZ0lDQXZMeUJ5WlhONWJtTWdkSEpoYm5Od2IzSjBaV1FnWlc1bmFXNWxjMXh1SUNBZ0lDQWdhV1lnS0hObFpXc2dmSHdnYzNCbFpXUWdLaUJzWVhOMFUzQmxaV1FnUENBd0tTQjdYRzRnSUNBZ0lDQWdJQzh2SUhObFpXc2diM0lnY21WMlpYSnpaU0JrYVhKbFkzUnBiMjVjYmlBZ0lDQWdJQ0FnYm1WNGRGQnZjMmwwYVc5dUlEMGdkR2hwY3k1ZlgzTjVibU5VY21GdWMzQnZjblJsWkZCdmMybDBhVzl1S0hScGJXVXNJSEJ2YzJsMGFXOXVMQ0J6Y0dWbFpDazdYRzRnSUNBZ0lDQjlJR1ZzYzJVZ2FXWWdLR3hoYzNSVGNHVmxaQ0E5UFQwZ01Da2dlMXh1SUNBZ0lDQWdJQ0F2THlCemRHRnlkRnh1SUNBZ0lDQWdJQ0J1WlhoMFVHOXphWFJwYjI0Z1BTQjBhR2x6TGw5ZmMzbHVZMVJ5WVc1emNHOXlkR1ZrVUc5emFYUnBiMjRvZEdsdFpTd2djRzl6YVhScGIyNHNJSE53WldWa0tUdGNiaUFnSUNBZ0lIMGdaV3h6WlNCcFppQW9jM0JsWldRZ1BUMDlJREFwSUh0Y2JpQWdJQ0FnSUNBZ0x5OGdjM1J2Y0Z4dUlDQWdJQ0FnSUNCdVpYaDBVRzl6YVhScGIyNGdQU0JKYm1acGJtbDBlVHRjYmlBZ0lDQWdJQ0FnZEdocGN5NWZYM041Ym1OVWNtRnVjM0J2Y25SbFpGQnZjMmwwYVc5dUtIUnBiV1VzSUhCdmMybDBhVzl1TENCemNHVmxaQ2s3WEc0Z0lDQWdJQ0I5SUdWc2MyVWdlMXh1SUNBZ0lDQWdJQ0F2THlCamFHRnVaMlVnYzNCbFpXUWdkMmwwYUc5MWRDQnlaWFpsY25OcGJtY2daR2x5WldOMGFXOXVYRzRnSUNBZ0lDQWdJSFJvYVhNdVgxOXplVzVqVkhKaGJuTndiM0owWldSVGNHVmxaQ2gwYVcxbExDQndiM05wZEdsdmJpd2djM0JsWldRcE8xeHVJQ0FnSUNBZ2ZWeHVYRzRnSUNBZ0lDQjBhR2x6TG5KbGMyVjBVRzl6YVhScGIyNG9ibVY0ZEZCdmMybDBhVzl1S1R0Y2JpQWdJQ0I5WEc0Z0lIMWNibHh1SUNBdktpcGNiaUFnSUNvZ1FXUmtJR0VnZEdsdFpTQmxibWRwYm1VZ2RHOGdkR2hsSUhSeVlXNXpjRzl5ZEM1Y2JpQWdJQ3BjYmlBZ0lDb2dRSEJoY21GdElIdFBZbXBsWTNSOUlHVnVaMmx1WlNBdElHVnVaMmx1WlNCMGJ5QmlaU0JoWkdSbFpDQjBieUIwYUdVZ2RISmhibk53YjNKMFhHNGdJQ0FxSUVCd1lYSmhiU0I3VG5WdFltVnlmU0J3YjNOcGRHbHZiaUF0SUhOMFlYSjBJSEJ2YzJsMGFXOXVYRzRnSUNBcUwxeHVJQ0JoWkdRb1pXNW5hVzVsTENCemRHRnlkRkJ2YzJsMGFXOXVJRDBnTUN3Z1pXNWtVRzl6YVhScGIyNGdQU0JKYm1acGJtbDBlU3dnYjJabWMyVjBVRzl6YVhScGIyNGdQU0F3S1NCN1hHNGdJQ0FnYkdWMElIUnlZVzV6Y0c5eWRHVmtJRDBnYm5Wc2JEdGNibHh1SUNBZ0lHbG1JQ2h2Wm1aelpYUlFiM05wZEdsdmJpQTlQVDBnTFVsdVptbHVhWFI1S1Z4dUlDQWdJQ0FnYjJabWMyVjBVRzl6YVhScGIyNGdQU0F3TzF4dVhHNGdJQ0FnYVdZZ0tHVnVaMmx1WlM1dFlYTjBaWElwWEc0Z0lDQWdJQ0IwYUhKdmR5QnVaWGNnUlhKeWIzSW9YQ0p2WW1wbFkzUWdhR0Z6SUdGc2NtVmhaSGtnWW1WbGJpQmhaR1JsWkNCMGJ5QmhJRzFoYzNSbGNsd2lLVHRjYmx4dUlDQWdJR2xtSUNoVWFXMWxSVzVuYVc1bExtbHRjR3hsYldWdWRITlVjbUZ1YzNCdmNuUmxaQ2hsYm1kcGJtVXBLVnh1SUNBZ0lDQWdkSEpoYm5Od2IzSjBaV1FnUFNCdVpYY2dWSEpoYm5Od2IzSjBaV1JVY21GdWMzQnZjblJsWkNoMGFHbHpMQ0JsYm1kcGJtVXNJSE4wWVhKMFVHOXphWFJwYjI0c0lHVnVaRkJ2YzJsMGFXOXVMQ0J2Wm1aelpYUlFiM05wZEdsdmJpazdYRzRnSUNBZ1pXeHpaU0JwWmlBb1ZHbHRaVVZ1WjJsdVpTNXBiWEJzWlcxbGJuUnpVM0JsWldSRGIyNTBjbTlzYkdWa0tHVnVaMmx1WlNrcFhHNGdJQ0FnSUNCMGNtRnVjM0J2Y25SbFpDQTlJRzVsZHlCVWNtRnVjM0J2Y25SbFpGTndaV1ZrUTI5dWRISnZiR3hsWkNoMGFHbHpMQ0JsYm1kcGJtVXNJSE4wWVhKMFVHOXphWFJwYjI0c0lHVnVaRkJ2YzJsMGFXOXVMQ0J2Wm1aelpYUlFiM05wZEdsdmJpazdYRzRnSUNBZ1pXeHpaU0JwWmlBb1ZHbHRaVVZ1WjJsdVpTNXBiWEJzWlcxbGJuUnpVMk5vWldSMWJHVmtLR1Z1WjJsdVpTa3BYRzRnSUNBZ0lDQjBjbUZ1YzNCdmNuUmxaQ0E5SUc1bGR5QlVjbUZ1YzNCdmNuUmxaRk5qYUdWa2RXeGxaQ2gwYUdsekxDQmxibWRwYm1Vc0lITjBZWEowVUc5emFYUnBiMjRzSUdWdVpGQnZjMmwwYVc5dUxDQnZabVp6WlhSUWIzTnBkR2x2YmlrN1hHNGdJQ0FnWld4elpWeHVJQ0FnSUNBZ2RHaHliM2NnYm1WM0lFVnljbTl5S0Z3aWIySnFaV04wSUdOaGJtNXZkQ0JpWlNCaFpHUmxaQ0IwYnlCaElIUnlZVzV6Y0c5eWRGd2lLVHRjYmx4dUlDQWdJR2xtSUNoMGNtRnVjM0J2Y25SbFpDa2dlMXh1SUNBZ0lDQWdZMjl1YzNRZ2MzQmxaV1FnUFNCMGFHbHpMbDlmYzNCbFpXUTdYRzVjYmlBZ0lDQWdJR0ZrWkVSMWNHeGxkQ2gwYUdsekxsOWZaVzVuYVc1bGN5d2dkR2hwY3k1ZlgzUnlZVzV6Y0c5eWRHVmtMQ0JsYm1kcGJtVXNJSFJ5WVc1emNHOXlkR1ZrS1R0Y2JseHVJQ0FnSUNBZ2FXWWdLSE53WldWa0lDRTlQU0F3S1NCN1hHNGdJQ0FnSUNBZ0lDOHZJSE41Ym1NZ1lXNWtJSE4wWVhKMFhHNGdJQ0FnSUNBZ0lHTnZibk4wSUc1bGVIUkZibWRwYm1WUWIzTnBkR2x2YmlBOUlIUnlZVzV6Y0c5eWRHVmtMbk41Ym1OUWIzTnBkR2x2YmloMGFHbHpMbU4xY25KbGJuUlVhVzFsTENCMGFHbHpMbU4xY25KbGJuUlFiM05wZEdsdmJpd2djM0JsWldRcE8xeHVJQ0FnSUNBZ0lDQmpiMjV6ZENCdVpYaDBVRzl6YVhScGIyNGdQU0IwYUdsekxsOWZkSEpoYm5Od2IzSjBaV1JSZFdWMVpTNXBibk5sY25Rb2RISmhibk53YjNKMFpXUXNJRzVsZUhSRmJtZHBibVZRYjNOcGRHbHZiaWs3WEc1Y2JpQWdJQ0FnSUNBZ2RHaHBjeTV5WlhObGRGQnZjMmwwYVc5dUtHNWxlSFJRYjNOcGRHbHZiaWs3WEc0Z0lDQWdJQ0I5WEc0Z0lDQWdmVnh1WEc0Z0lDQWdjbVYwZFhKdUlIUnlZVzV6Y0c5eWRHVmtPMXh1SUNCOVhHNWNiaUFnTHlvcVhHNGdJQ0FxSUZKbGJXOTJaU0JoSUhScGJXVWdaVzVuYVc1bElHWnliMjBnZEdobElIUnlZVzV6Y0c5eWRDNWNiaUFnSUNwY2JpQWdJQ29nUUhCaGNtRnRJSHR2WW1wbFkzUjlJR1Z1WjJsdVpVOXlWSEpoYm5Od2IzSjBaV1FnTFNCbGJtZHBibVVnYjNJZ2RISmhibk53YjNKMFpXUWdkRzhnWW1VZ2NtVnRiM1psWkNCbWNtOXRJSFJvWlNCMGNtRnVjM0J2Y25SY2JpQWdJQ292WEc0Z0lISmxiVzkyWlNobGJtZHBibVZQY2xSeVlXNXpjRzl5ZEdWa0tTQjdYRzRnSUNBZ2JHVjBJR1Z1WjJsdVpTQTlJR1Z1WjJsdVpVOXlWSEpoYm5Od2IzSjBaV1E3WEc0Z0lDQWdiR1YwSUhSeVlXNXpjRzl5ZEdWa0lEMGdjbVZ0YjNabFJIVndiR1YwS0hSb2FYTXVYMTlsYm1kcGJtVnpMQ0IwYUdsekxsOWZkSEpoYm5Od2IzSjBaV1FzSUdWdVoybHVaVTl5VkhKaGJuTndiM0owWldRcE8xeHVYRzRnSUNBZ2FXWWdLQ0YwY21GdWMzQnZjblJsWkNrZ2UxeHVJQ0FnSUNBZ1pXNW5hVzVsSUQwZ2NtVnRiM1psUkhWd2JHVjBLSFJvYVhNdVgxOTBjbUZ1YzNCdmNuUmxaQ3dnZEdocGN5NWZYMlZ1WjJsdVpYTXNJR1Z1WjJsdVpVOXlWSEpoYm5Od2IzSjBaV1FwTzF4dUlDQWdJQ0FnZEhKaGJuTndiM0owWldRZ1BTQmxibWRwYm1WUGNsUnlZVzV6Y0c5eWRHVmtPMXh1SUNBZ0lIMWNibHh1SUNBZ0lHbG1JQ2hsYm1kcGJtVWdKaVlnZEhKaGJuTndiM0owWldRcElIdGNiaUFnSUNBZ0lHTnZibk4wSUc1bGVIUlFiM05wZEdsdmJpQTlJSFJvYVhNdVgxOTBjbUZ1YzNCdmNuUmxaRkYxWlhWbExuSmxiVzkyWlNoMGNtRnVjM0J2Y25SbFpDazdYRzVjYmlBZ0lDQWdJSFJ5WVc1emNHOXlkR1ZrTG1SbGMzUnliM2tvS1R0Y2JseHVJQ0FnSUNBZ2FXWWdLSFJvYVhNdVgxOXpjR1ZsWkNBaFBUMGdNQ2xjYmlBZ0lDQWdJQ0FnZEdocGN5NXlaWE5sZEZCdmMybDBhVzl1S0c1bGVIUlFiM05wZEdsdmJpazdYRzRnSUNBZ2ZTQmxiSE5sSUh0Y2JpQWdJQ0FnSUhSb2NtOTNJRzVsZHlCRmNuSnZjaWhjSW05aWFtVmpkQ0JvWVhNZ2JtOTBJR0psWlc0Z1lXUmtaV1FnZEc4Z2RHaHBjeUIwY21GdWMzQnZjblJjSWlrN1hHNGdJQ0FnZlZ4dUlDQjlYRzVjYmlBZ0x5b3FYRzRnSUNBcUlGSmxjMlYwSUhCdmMybDBhVzl1SUc5bUlIUm9aU0JuYVhabGJpQmxibWRwYm1VdVhHNGdJQ0FxWEc0Z0lDQXFJRUJ3WVhKaGJTQjdWR2x0WlVWdVoybHVaWDBnZEhKaGJuTndiM0owWldRZ0xTQkZibWRwYm1VZ2RHOGdjbVZ6WlhSY2JpQWdJQ29nUUhCaGNtRnRJSHRPZFcxaVpYSjlJSEJ2YzJsMGFXOXVJQzBnVG1WM0lIQnZjMmwwYVc5dVhHNGdJQ0FxTDF4dUlDQnlaWE5sZEVWdVoybHVaVkJ2YzJsMGFXOXVLSFJ5WVc1emNHOXlkR1ZrTENCd2IzTnBkR2x2YmlBOUlIVnVaR1ZtYVc1bFpDa2dlMXh1SUNBZ0lHTnZibk4wSUhOd1pXVmtJRDBnZEdocGN5NWZYM053WldWa08xeHVYRzRnSUNBZ2FXWWdLSE53WldWa0lDRTlQU0F3S1NCN1hHNGdJQ0FnSUNCcFppQW9jRzl6YVhScGIyNGdQVDA5SUhWdVpHVm1hVzVsWkNsY2JpQWdJQ0FnSUNBZ2NHOXphWFJwYjI0Z1BTQjBjbUZ1YzNCdmNuUmxaQzV6ZVc1alVHOXphWFJwYjI0b2RHaHBjeTVqZFhKeVpXNTBWR2x0WlN3Z2RHaHBjeTVqZFhKeVpXNTBVRzl6YVhScGIyNHNJSE53WldWa0tUdGNibHh1SUNBZ0lDQWdiR1YwSUc1bGVIUlFiM05wZEdsdmJpQTlJRzUxYkd3N1hHNWNiaUFnSUNBZ0lDOHZJSFJvWlNCd2NtbHZjbWwwZVNCeGRXVjFaU0JrYjJWeklHNXZkQ0JyWldWd0lIUnlZV05ySUc5bUlIUm9aU0JsYkdWdFpXNTBjeUIwYUdGMElHRnlaVnh1SUNBZ0lDQWdMeThnYVc1elpYSjBaV1FnWVhRZ1NXNW1hVzVwZEhrc0lITnZJSGRsSUc1bFpXUWdkRzhnY21WcGJuTmxjblFnZEhKaGJuTndiM0owWldRZ1pXNW5hVzVsSUdsdVhHNGdJQ0FnSUNBdkx5QjBhR2x6SUdOaGMyVXVYRzRnSUNBZ0lDQXZMeUJBYm05MFpTQXRJSFJvYVhNZ1kyOTFiR1FnY0hKdlltRmliSGtnWW1VZ2JXOXlaU0JqYkdWaGJseHVJQ0FnSUNBZ0x5OGdJQ0FnSUNBZ0xTQndjbTlpWVdKc2VTQjBhR1VnY0hKcGIzSnBkSGtnY1hWbGRXVWdjMmh2ZFd4a0lHdGxaWEFnZEdobGMyVWdjbVZtWlhKbGJtTmxjMXh1SUNBZ0lDQWdhV1lnS0NGMGFHbHpMbDlmZEhKaGJuTndiM0owWldSUmRXVjFaUzVvWVhNb2RISmhibk53YjNKMFpXUXBLU0I3WEc0Z0lDQWdJQ0FnSUc1bGVIUlFiM05wZEdsdmJpQTlJSFJvYVhNdVgxOTBjbUZ1YzNCdmNuUmxaRkYxWlhWbExtbHVjMlZ5ZENoMGNtRnVjM0J2Y25SbFpDd2djRzl6YVhScGIyNHBPMXh1SUNBZ0lDQWdmU0JsYkhObElIdGNiaUFnSUNBZ0lDQWdibVY0ZEZCdmMybDBhVzl1SUQwZ2RHaHBjeTVmWDNSeVlXNXpjRzl5ZEdWa1VYVmxkV1V1Ylc5MlpTaDBjbUZ1YzNCdmNuUmxaQ3dnY0c5emFYUnBiMjRwTzF4dUlDQWdJQ0FnZlZ4dVhHNGdJQ0FnSUNCMGFHbHpMbkpsYzJWMFVHOXphWFJwYjI0b2JtVjRkRkJ2YzJsMGFXOXVLVHRjYmlBZ0lDQjlYRzRnSUgxY2JseHVJQ0F2S2lwY2JpQWdJQ29nVW1WdGIzWmxJR0ZzYkNCMGFXMWxJR1Z1WjJsdVpYTWdabkp2YlNCMGFHVWdkSEpoYm5Od2IzSjBMbHh1SUNBZ0tpOWNiaUFnWTJ4bFlYSW9LU0I3WEc0Z0lDQWdkR2hwY3k1emVXNWpVM0JsWldRb2RHaHBjeTVqZFhKeVpXNTBWR2x0WlN3Z2RHaHBjeTVqZFhKeVpXNTBVRzl6YVhScGIyNHNJREFwTzF4dVhHNGdJQ0FnWm05eUlDaHNaWFFnZEhKaGJuTndiM0owWldRZ2IyWWdkR2hwY3k1ZlgzUnlZVzV6Y0c5eWRHVmtLVnh1SUNBZ0lDQWdkSEpoYm5Od2IzSjBaV1F1WkdWemRISnZlU2dwTzF4dUlDQjlYRzU5WEc1Y2JtVjRjRzl5ZENCa1pXWmhkV3gwSUZSeVlXNXpjRzl5ZER0Y2JpSmRmUT09IiwiZXhwb3J0IGRlZmF1bHQgKHR5cGVvZiBnbG9iYWwgIT09IFwidW5kZWZpbmVkXCIgPyBnbG9iYWwgOlxuICAgICAgICAgICAgdHlwZW9mIHNlbGYgIT09IFwidW5kZWZpbmVkXCIgPyBzZWxmIDpcbiAgICAgICAgICAgIHR5cGVvZiB3aW5kb3cgIT09IFwidW5kZWZpbmVkXCIgPyB3aW5kb3cgOiB7fSk7XG4iLCIvLyBzaGltIGZvciB1c2luZyBwcm9jZXNzIGluIGJyb3dzZXJcbi8vIGJhc2VkIG9mZiBodHRwczovL2dpdGh1Yi5jb20vZGVmdW5jdHpvbWJpZS9ub2RlLXByb2Nlc3MvYmxvYi9tYXN0ZXIvYnJvd3Nlci5qc1xuXG5mdW5jdGlvbiBkZWZhdWx0U2V0VGltb3V0KCkge1xuICAgIHRocm93IG5ldyBFcnJvcignc2V0VGltZW91dCBoYXMgbm90IGJlZW4gZGVmaW5lZCcpO1xufVxuZnVuY3Rpb24gZGVmYXVsdENsZWFyVGltZW91dCAoKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdjbGVhclRpbWVvdXQgaGFzIG5vdCBiZWVuIGRlZmluZWQnKTtcbn1cbnZhciBjYWNoZWRTZXRUaW1lb3V0ID0gZGVmYXVsdFNldFRpbW91dDtcbnZhciBjYWNoZWRDbGVhclRpbWVvdXQgPSBkZWZhdWx0Q2xlYXJUaW1lb3V0O1xuaWYgKHR5cGVvZiBnbG9iYWwuc2V0VGltZW91dCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIGNhY2hlZFNldFRpbWVvdXQgPSBzZXRUaW1lb3V0O1xufVxuaWYgKHR5cGVvZiBnbG9iYWwuY2xlYXJUaW1lb3V0ID09PSAnZnVuY3Rpb24nKSB7XG4gICAgY2FjaGVkQ2xlYXJUaW1lb3V0ID0gY2xlYXJUaW1lb3V0O1xufVxuXG5mdW5jdGlvbiBydW5UaW1lb3V0KGZ1bikge1xuICAgIGlmIChjYWNoZWRTZXRUaW1lb3V0ID09PSBzZXRUaW1lb3V0KSB7XG4gICAgICAgIC8vbm9ybWFsIGVudmlyb21lbnRzIGluIHNhbmUgc2l0dWF0aW9uc1xuICAgICAgICByZXR1cm4gc2V0VGltZW91dChmdW4sIDApO1xuICAgIH1cbiAgICAvLyBpZiBzZXRUaW1lb3V0IHdhc24ndCBhdmFpbGFibGUgYnV0IHdhcyBsYXR0ZXIgZGVmaW5lZFxuICAgIGlmICgoY2FjaGVkU2V0VGltZW91dCA9PT0gZGVmYXVsdFNldFRpbW91dCB8fCAhY2FjaGVkU2V0VGltZW91dCkgJiYgc2V0VGltZW91dCkge1xuICAgICAgICBjYWNoZWRTZXRUaW1lb3V0ID0gc2V0VGltZW91dDtcbiAgICAgICAgcmV0dXJuIHNldFRpbWVvdXQoZnVuLCAwKTtcbiAgICB9XG4gICAgdHJ5IHtcbiAgICAgICAgLy8gd2hlbiB3aGVuIHNvbWVib2R5IGhhcyBzY3Jld2VkIHdpdGggc2V0VGltZW91dCBidXQgbm8gSS5FLiBtYWRkbmVzc1xuICAgICAgICByZXR1cm4gY2FjaGVkU2V0VGltZW91dChmdW4sIDApO1xuICAgIH0gY2F0Y2goZSl7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICAvLyBXaGVuIHdlIGFyZSBpbiBJLkUuIGJ1dCB0aGUgc2NyaXB0IGhhcyBiZWVuIGV2YWxlZCBzbyBJLkUuIGRvZXNuJ3QgdHJ1c3QgdGhlIGdsb2JhbCBvYmplY3Qgd2hlbiBjYWxsZWQgbm9ybWFsbHlcbiAgICAgICAgICAgIHJldHVybiBjYWNoZWRTZXRUaW1lb3V0LmNhbGwobnVsbCwgZnVuLCAwKTtcbiAgICAgICAgfSBjYXRjaChlKXtcbiAgICAgICAgICAgIC8vIHNhbWUgYXMgYWJvdmUgYnV0IHdoZW4gaXQncyBhIHZlcnNpb24gb2YgSS5FLiB0aGF0IG11c3QgaGF2ZSB0aGUgZ2xvYmFsIG9iamVjdCBmb3IgJ3RoaXMnLCBob3BmdWxseSBvdXIgY29udGV4dCBjb3JyZWN0IG90aGVyd2lzZSBpdCB3aWxsIHRocm93IGEgZ2xvYmFsIGVycm9yXG4gICAgICAgICAgICByZXR1cm4gY2FjaGVkU2V0VGltZW91dC5jYWxsKHRoaXMsIGZ1biwgMCk7XG4gICAgICAgIH1cbiAgICB9XG5cblxufVxuZnVuY3Rpb24gcnVuQ2xlYXJUaW1lb3V0KG1hcmtlcikge1xuICAgIGlmIChjYWNoZWRDbGVhclRpbWVvdXQgPT09IGNsZWFyVGltZW91dCkge1xuICAgICAgICAvL25vcm1hbCBlbnZpcm9tZW50cyBpbiBzYW5lIHNpdHVhdGlvbnNcbiAgICAgICAgcmV0dXJuIGNsZWFyVGltZW91dChtYXJrZXIpO1xuICAgIH1cbiAgICAvLyBpZiBjbGVhclRpbWVvdXQgd2Fzbid0IGF2YWlsYWJsZSBidXQgd2FzIGxhdHRlciBkZWZpbmVkXG4gICAgaWYgKChjYWNoZWRDbGVhclRpbWVvdXQgPT09IGRlZmF1bHRDbGVhclRpbWVvdXQgfHwgIWNhY2hlZENsZWFyVGltZW91dCkgJiYgY2xlYXJUaW1lb3V0KSB7XG4gICAgICAgIGNhY2hlZENsZWFyVGltZW91dCA9IGNsZWFyVGltZW91dDtcbiAgICAgICAgcmV0dXJuIGNsZWFyVGltZW91dChtYXJrZXIpO1xuICAgIH1cbiAgICB0cnkge1xuICAgICAgICAvLyB3aGVuIHdoZW4gc29tZWJvZHkgaGFzIHNjcmV3ZWQgd2l0aCBzZXRUaW1lb3V0IGJ1dCBubyBJLkUuIG1hZGRuZXNzXG4gICAgICAgIHJldHVybiBjYWNoZWRDbGVhclRpbWVvdXQobWFya2VyKTtcbiAgICB9IGNhdGNoIChlKXtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIC8vIFdoZW4gd2UgYXJlIGluIEkuRS4gYnV0IHRoZSBzY3JpcHQgaGFzIGJlZW4gZXZhbGVkIHNvIEkuRS4gZG9lc24ndCAgdHJ1c3QgdGhlIGdsb2JhbCBvYmplY3Qgd2hlbiBjYWxsZWQgbm9ybWFsbHlcbiAgICAgICAgICAgIHJldHVybiBjYWNoZWRDbGVhclRpbWVvdXQuY2FsbChudWxsLCBtYXJrZXIpO1xuICAgICAgICB9IGNhdGNoIChlKXtcbiAgICAgICAgICAgIC8vIHNhbWUgYXMgYWJvdmUgYnV0IHdoZW4gaXQncyBhIHZlcnNpb24gb2YgSS5FLiB0aGF0IG11c3QgaGF2ZSB0aGUgZ2xvYmFsIG9iamVjdCBmb3IgJ3RoaXMnLCBob3BmdWxseSBvdXIgY29udGV4dCBjb3JyZWN0IG90aGVyd2lzZSBpdCB3aWxsIHRocm93IGEgZ2xvYmFsIGVycm9yLlxuICAgICAgICAgICAgLy8gU29tZSB2ZXJzaW9ucyBvZiBJLkUuIGhhdmUgZGlmZmVyZW50IHJ1bGVzIGZvciBjbGVhclRpbWVvdXQgdnMgc2V0VGltZW91dFxuICAgICAgICAgICAgcmV0dXJuIGNhY2hlZENsZWFyVGltZW91dC5jYWxsKHRoaXMsIG1hcmtlcik7XG4gICAgICAgIH1cbiAgICB9XG5cblxuXG59XG52YXIgcXVldWUgPSBbXTtcbnZhciBkcmFpbmluZyA9IGZhbHNlO1xudmFyIGN1cnJlbnRRdWV1ZTtcbnZhciBxdWV1ZUluZGV4ID0gLTE7XG5cbmZ1bmN0aW9uIGNsZWFuVXBOZXh0VGljaygpIHtcbiAgICBpZiAoIWRyYWluaW5nIHx8ICFjdXJyZW50UXVldWUpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBkcmFpbmluZyA9IGZhbHNlO1xuICAgIGlmIChjdXJyZW50UXVldWUubGVuZ3RoKSB7XG4gICAgICAgIHF1ZXVlID0gY3VycmVudFF1ZXVlLmNvbmNhdChxdWV1ZSk7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgcXVldWVJbmRleCA9IC0xO1xuICAgIH1cbiAgICBpZiAocXVldWUubGVuZ3RoKSB7XG4gICAgICAgIGRyYWluUXVldWUoKTtcbiAgICB9XG59XG5cbmZ1bmN0aW9uIGRyYWluUXVldWUoKSB7XG4gICAgaWYgKGRyYWluaW5nKSB7XG4gICAgICAgIHJldHVybjtcbiAgICB9XG4gICAgdmFyIHRpbWVvdXQgPSBydW5UaW1lb3V0KGNsZWFuVXBOZXh0VGljayk7XG4gICAgZHJhaW5pbmcgPSB0cnVlO1xuXG4gICAgdmFyIGxlbiA9IHF1ZXVlLmxlbmd0aDtcbiAgICB3aGlsZShsZW4pIHtcbiAgICAgICAgY3VycmVudFF1ZXVlID0gcXVldWU7XG4gICAgICAgIHF1ZXVlID0gW107XG4gICAgICAgIHdoaWxlICgrK3F1ZXVlSW5kZXggPCBsZW4pIHtcbiAgICAgICAgICAgIGlmIChjdXJyZW50UXVldWUpIHtcbiAgICAgICAgICAgICAgICBjdXJyZW50UXVldWVbcXVldWVJbmRleF0ucnVuKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcXVldWVJbmRleCA9IC0xO1xuICAgICAgICBsZW4gPSBxdWV1ZS5sZW5ndGg7XG4gICAgfVxuICAgIGN1cnJlbnRRdWV1ZSA9IG51bGw7XG4gICAgZHJhaW5pbmcgPSBmYWxzZTtcbiAgICBydW5DbGVhclRpbWVvdXQodGltZW91dCk7XG59XG5leHBvcnQgZnVuY3Rpb24gbmV4dFRpY2soZnVuKSB7XG4gICAgdmFyIGFyZ3MgPSBuZXcgQXJyYXkoYXJndW1lbnRzLmxlbmd0aCAtIDEpO1xuICAgIGlmIChhcmd1bWVudHMubGVuZ3RoID4gMSkge1xuICAgICAgICBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgYXJnc1tpIC0gMV0gPSBhcmd1bWVudHNbaV07XG4gICAgICAgIH1cbiAgICB9XG4gICAgcXVldWUucHVzaChuZXcgSXRlbShmdW4sIGFyZ3MpKTtcbiAgICBpZiAocXVldWUubGVuZ3RoID09PSAxICYmICFkcmFpbmluZykge1xuICAgICAgICBydW5UaW1lb3V0KGRyYWluUXVldWUpO1xuICAgIH1cbn1cbi8vIHY4IGxpa2VzIHByZWRpY3RpYmxlIG9iamVjdHNcbmZ1bmN0aW9uIEl0ZW0oZnVuLCBhcnJheSkge1xuICAgIHRoaXMuZnVuID0gZnVuO1xuICAgIHRoaXMuYXJyYXkgPSBhcnJheTtcbn1cbkl0ZW0ucHJvdG90eXBlLnJ1biA9IGZ1bmN0aW9uICgpIHtcbiAgICB0aGlzLmZ1bi5hcHBseShudWxsLCB0aGlzLmFycmF5KTtcbn07XG5leHBvcnQgdmFyIHRpdGxlID0gJ2Jyb3dzZXInO1xuZXhwb3J0IHZhciBwbGF0Zm9ybSA9ICdicm93c2VyJztcbmV4cG9ydCB2YXIgYnJvd3NlciA9IHRydWU7XG5leHBvcnQgdmFyIGVudiA9IHt9O1xuZXhwb3J0IHZhciBhcmd2ID0gW107XG5leHBvcnQgdmFyIHZlcnNpb24gPSAnJzsgLy8gZW1wdHkgc3RyaW5nIHRvIGF2b2lkIHJlZ2V4cCBpc3N1ZXNcbmV4cG9ydCB2YXIgdmVyc2lvbnMgPSB7fTtcbmV4cG9ydCB2YXIgcmVsZWFzZSA9IHt9O1xuZXhwb3J0IHZhciBjb25maWcgPSB7fTtcblxuZnVuY3Rpb24gbm9vcCgpIHt9XG5cbmV4cG9ydCB2YXIgb24gPSBub29wO1xuZXhwb3J0IHZhciBhZGRMaXN0ZW5lciA9IG5vb3A7XG5leHBvcnQgdmFyIG9uY2UgPSBub29wO1xuZXhwb3J0IHZhciBvZmYgPSBub29wO1xuZXhwb3J0IHZhciByZW1vdmVMaXN0ZW5lciA9IG5vb3A7XG5leHBvcnQgdmFyIHJlbW92ZUFsbExpc3RlbmVycyA9IG5vb3A7XG5leHBvcnQgdmFyIGVtaXQgPSBub29wO1xuXG5leHBvcnQgZnVuY3Rpb24gYmluZGluZyhuYW1lKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdwcm9jZXNzLmJpbmRpbmcgaXMgbm90IHN1cHBvcnRlZCcpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gY3dkICgpIHsgcmV0dXJuICcvJyB9XG5leHBvcnQgZnVuY3Rpb24gY2hkaXIgKGRpcikge1xuICAgIHRocm93IG5ldyBFcnJvcigncHJvY2Vzcy5jaGRpciBpcyBub3Qgc3VwcG9ydGVkJyk7XG59O1xuZXhwb3J0IGZ1bmN0aW9uIHVtYXNrKCkgeyByZXR1cm4gMDsgfVxuXG4vLyBmcm9tIGh0dHBzOi8vZ2l0aHViLmNvbS9rdW1hdmlzL2Jyb3dzZXItcHJvY2Vzcy1ocnRpbWUvYmxvYi9tYXN0ZXIvaW5kZXguanNcbnZhciBwZXJmb3JtYW5jZSA9IGdsb2JhbC5wZXJmb3JtYW5jZSB8fCB7fVxudmFyIHBlcmZvcm1hbmNlTm93ID1cbiAgcGVyZm9ybWFuY2Uubm93ICAgICAgICB8fFxuICBwZXJmb3JtYW5jZS5tb3pOb3cgICAgIHx8XG4gIHBlcmZvcm1hbmNlLm1zTm93ICAgICAgfHxcbiAgcGVyZm9ybWFuY2Uub05vdyAgICAgICB8fFxuICBwZXJmb3JtYW5jZS53ZWJraXROb3cgIHx8XG4gIGZ1bmN0aW9uKCl7IHJldHVybiAobmV3IERhdGUoKSkuZ2V0VGltZSgpIH1cblxuLy8gZ2VuZXJhdGUgdGltZXN0YW1wIG9yIGRlbHRhXG4vLyBzZWUgaHR0cDovL25vZGVqcy5vcmcvYXBpL3Byb2Nlc3MuaHRtbCNwcm9jZXNzX3Byb2Nlc3NfaHJ0aW1lXG5leHBvcnQgZnVuY3Rpb24gaHJ0aW1lKHByZXZpb3VzVGltZXN0YW1wKXtcbiAgdmFyIGNsb2NrdGltZSA9IHBlcmZvcm1hbmNlTm93LmNhbGwocGVyZm9ybWFuY2UpKjFlLTNcbiAgdmFyIHNlY29uZHMgPSBNYXRoLmZsb29yKGNsb2NrdGltZSlcbiAgdmFyIG5hbm9zZWNvbmRzID0gTWF0aC5mbG9vcigoY2xvY2t0aW1lJTEpKjFlOSlcbiAgaWYgKHByZXZpb3VzVGltZXN0YW1wKSB7XG4gICAgc2Vjb25kcyA9IHNlY29uZHMgLSBwcmV2aW91c1RpbWVzdGFtcFswXVxuICAgIG5hbm9zZWNvbmRzID0gbmFub3NlY29uZHMgLSBwcmV2aW91c1RpbWVzdGFtcFsxXVxuICAgIGlmIChuYW5vc2Vjb25kczwwKSB7XG4gICAgICBzZWNvbmRzLS1cbiAgICAgIG5hbm9zZWNvbmRzICs9IDFlOVxuICAgIH1cbiAgfVxuICByZXR1cm4gW3NlY29uZHMsbmFub3NlY29uZHNdXG59XG5cbnZhciBzdGFydFRpbWUgPSBuZXcgRGF0ZSgpO1xuZXhwb3J0IGZ1bmN0aW9uIHVwdGltZSgpIHtcbiAgdmFyIGN1cnJlbnRUaW1lID0gbmV3IERhdGUoKTtcbiAgdmFyIGRpZiA9IGN1cnJlbnRUaW1lIC0gc3RhcnRUaW1lO1xuICByZXR1cm4gZGlmIC8gMTAwMDtcbn1cblxuZXhwb3J0IGRlZmF1bHQge1xuICBuZXh0VGljazogbmV4dFRpY2ssXG4gIHRpdGxlOiB0aXRsZSxcbiAgYnJvd3NlcjogYnJvd3NlcixcbiAgZW52OiBlbnYsXG4gIGFyZ3Y6IGFyZ3YsXG4gIHZlcnNpb246IHZlcnNpb24sXG4gIHZlcnNpb25zOiB2ZXJzaW9ucyxcbiAgb246IG9uLFxuICBhZGRMaXN0ZW5lcjogYWRkTGlzdGVuZXIsXG4gIG9uY2U6IG9uY2UsXG4gIG9mZjogb2ZmLFxuICByZW1vdmVMaXN0ZW5lcjogcmVtb3ZlTGlzdGVuZXIsXG4gIHJlbW92ZUFsbExpc3RlbmVyczogcmVtb3ZlQWxsTGlzdGVuZXJzLFxuICBlbWl0OiBlbWl0LFxuICBiaW5kaW5nOiBiaW5kaW5nLFxuICBjd2Q6IGN3ZCxcbiAgY2hkaXI6IGNoZGlyLFxuICB1bWFzazogdW1hc2ssXG4gIGhydGltZTogaHJ0aW1lLFxuICBwbGF0Zm9ybTogcGxhdGZvcm0sXG4gIHJlbGVhc2U6IHJlbGVhc2UsXG4gIGNvbmZpZzogY29uZmlnLFxuICB1cHRpbWU6IHVwdGltZVxufTtcbiIsIi8qKlxuICogSGVscGVycy5cbiAqL1xuXG52YXIgcyA9IDEwMDA7XG52YXIgbSA9IHMgKiA2MDtcbnZhciBoID0gbSAqIDYwO1xudmFyIGQgPSBoICogMjQ7XG52YXIgeSA9IGQgKiAzNjUuMjU7XG5cbi8qKlxuICogUGFyc2Ugb3IgZm9ybWF0IHRoZSBnaXZlbiBgdmFsYC5cbiAqXG4gKiBPcHRpb25zOlxuICpcbiAqICAtIGBsb25nYCB2ZXJib3NlIGZvcm1hdHRpbmcgW2ZhbHNlXVxuICpcbiAqIEBwYXJhbSB7U3RyaW5nfE51bWJlcn0gdmFsXG4gKiBAcGFyYW0ge09iamVjdH0gW29wdGlvbnNdXG4gKiBAdGhyb3dzIHtFcnJvcn0gdGhyb3cgYW4gZXJyb3IgaWYgdmFsIGlzIG5vdCBhIG5vbi1lbXB0eSBzdHJpbmcgb3IgYSBudW1iZXJcbiAqIEByZXR1cm4ge1N0cmluZ3xOdW1iZXJ9XG4gKiBAYXBpIHB1YmxpY1xuICovXG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24odmFsLCBvcHRpb25zKSB7XG4gIG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9O1xuICB2YXIgdHlwZSA9IHR5cGVvZiB2YWw7XG4gIGlmICh0eXBlID09PSAnc3RyaW5nJyAmJiB2YWwubGVuZ3RoID4gMCkge1xuICAgIHJldHVybiBwYXJzZSh2YWwpO1xuICB9IGVsc2UgaWYgKHR5cGUgPT09ICdudW1iZXInICYmIGlzTmFOKHZhbCkgPT09IGZhbHNlKSB7XG4gICAgcmV0dXJuIG9wdGlvbnMubG9uZyA/IGZtdExvbmcodmFsKSA6IGZtdFNob3J0KHZhbCk7XG4gIH1cbiAgdGhyb3cgbmV3IEVycm9yKFxuICAgICd2YWwgaXMgbm90IGEgbm9uLWVtcHR5IHN0cmluZyBvciBhIHZhbGlkIG51bWJlci4gdmFsPScgK1xuICAgICAgSlNPTi5zdHJpbmdpZnkodmFsKVxuICApO1xufTtcblxuLyoqXG4gKiBQYXJzZSB0aGUgZ2l2ZW4gYHN0cmAgYW5kIHJldHVybiBtaWxsaXNlY29uZHMuXG4gKlxuICogQHBhcmFtIHtTdHJpbmd9IHN0clxuICogQHJldHVybiB7TnVtYmVyfVxuICogQGFwaSBwcml2YXRlXG4gKi9cblxuZnVuY3Rpb24gcGFyc2Uoc3RyKSB7XG4gIHN0ciA9IFN0cmluZyhzdHIpO1xuICBpZiAoc3RyLmxlbmd0aCA+IDEwMCkge1xuICAgIHJldHVybjtcbiAgfVxuICB2YXIgbWF0Y2ggPSAvXigoPzpcXGQrKT9cXC4/XFxkKykgKihtaWxsaXNlY29uZHM/fG1zZWNzP3xtc3xzZWNvbmRzP3xzZWNzP3xzfG1pbnV0ZXM/fG1pbnM/fG18aG91cnM/fGhycz98aHxkYXlzP3xkfHllYXJzP3x5cnM/fHkpPyQvaS5leGVjKFxuICAgIHN0clxuICApO1xuICBpZiAoIW1hdGNoKSB7XG4gICAgcmV0dXJuO1xuICB9XG4gIHZhciBuID0gcGFyc2VGbG9hdChtYXRjaFsxXSk7XG4gIHZhciB0eXBlID0gKG1hdGNoWzJdIHx8ICdtcycpLnRvTG93ZXJDYXNlKCk7XG4gIHN3aXRjaCAodHlwZSkge1xuICAgIGNhc2UgJ3llYXJzJzpcbiAgICBjYXNlICd5ZWFyJzpcbiAgICBjYXNlICd5cnMnOlxuICAgIGNhc2UgJ3lyJzpcbiAgICBjYXNlICd5JzpcbiAgICAgIHJldHVybiBuICogeTtcbiAgICBjYXNlICdkYXlzJzpcbiAgICBjYXNlICdkYXknOlxuICAgIGNhc2UgJ2QnOlxuICAgICAgcmV0dXJuIG4gKiBkO1xuICAgIGNhc2UgJ2hvdXJzJzpcbiAgICBjYXNlICdob3VyJzpcbiAgICBjYXNlICdocnMnOlxuICAgIGNhc2UgJ2hyJzpcbiAgICBjYXNlICdoJzpcbiAgICAgIHJldHVybiBuICogaDtcbiAgICBjYXNlICdtaW51dGVzJzpcbiAgICBjYXNlICdtaW51dGUnOlxuICAgIGNhc2UgJ21pbnMnOlxuICAgIGNhc2UgJ21pbic6XG4gICAgY2FzZSAnbSc6XG4gICAgICByZXR1cm4gbiAqIG07XG4gICAgY2FzZSAnc2Vjb25kcyc6XG4gICAgY2FzZSAnc2Vjb25kJzpcbiAgICBjYXNlICdzZWNzJzpcbiAgICBjYXNlICdzZWMnOlxuICAgIGNhc2UgJ3MnOlxuICAgICAgcmV0dXJuIG4gKiBzO1xuICAgIGNhc2UgJ21pbGxpc2Vjb25kcyc6XG4gICAgY2FzZSAnbWlsbGlzZWNvbmQnOlxuICAgIGNhc2UgJ21zZWNzJzpcbiAgICBjYXNlICdtc2VjJzpcbiAgICBjYXNlICdtcyc6XG4gICAgICByZXR1cm4gbjtcbiAgICBkZWZhdWx0OlxuICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgfVxufVxuXG4vKipcbiAqIFNob3J0IGZvcm1hdCBmb3IgYG1zYC5cbiAqXG4gKiBAcGFyYW0ge051bWJlcn0gbXNcbiAqIEByZXR1cm4ge1N0cmluZ31cbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cbmZ1bmN0aW9uIGZtdFNob3J0KG1zKSB7XG4gIGlmIChtcyA+PSBkKSB7XG4gICAgcmV0dXJuIE1hdGgucm91bmQobXMgLyBkKSArICdkJztcbiAgfVxuICBpZiAobXMgPj0gaCkge1xuICAgIHJldHVybiBNYXRoLnJvdW5kKG1zIC8gaCkgKyAnaCc7XG4gIH1cbiAgaWYgKG1zID49IG0pIHtcbiAgICByZXR1cm4gTWF0aC5yb3VuZChtcyAvIG0pICsgJ20nO1xuICB9XG4gIGlmIChtcyA+PSBzKSB7XG4gICAgcmV0dXJuIE1hdGgucm91bmQobXMgLyBzKSArICdzJztcbiAgfVxuICByZXR1cm4gbXMgKyAnbXMnO1xufVxuXG4vKipcbiAqIExvbmcgZm9ybWF0IGZvciBgbXNgLlxuICpcbiAqIEBwYXJhbSB7TnVtYmVyfSBtc1xuICogQHJldHVybiB7U3RyaW5nfVxuICogQGFwaSBwcml2YXRlXG4gKi9cblxuZnVuY3Rpb24gZm10TG9uZyhtcykge1xuICByZXR1cm4gcGx1cmFsKG1zLCBkLCAnZGF5JykgfHxcbiAgICBwbHVyYWwobXMsIGgsICdob3VyJykgfHxcbiAgICBwbHVyYWwobXMsIG0sICdtaW51dGUnKSB8fFxuICAgIHBsdXJhbChtcywgcywgJ3NlY29uZCcpIHx8XG4gICAgbXMgKyAnIG1zJztcbn1cblxuLyoqXG4gKiBQbHVyYWxpemF0aW9uIGhlbHBlci5cbiAqL1xuXG5mdW5jdGlvbiBwbHVyYWwobXMsIG4sIG5hbWUpIHtcbiAgaWYgKG1zIDwgbikge1xuICAgIHJldHVybjtcbiAgfVxuICBpZiAobXMgPCBuICogMS41KSB7XG4gICAgcmV0dXJuIE1hdGguZmxvb3IobXMgLyBuKSArICcgJyArIG5hbWU7XG4gIH1cbiAgcmV0dXJuIE1hdGguY2VpbChtcyAvIG4pICsgJyAnICsgbmFtZSArICdzJztcbn1cbiIsIlxuLyoqXG4gKiBUaGlzIGlzIHRoZSBjb21tb24gbG9naWMgZm9yIGJvdGggdGhlIE5vZGUuanMgYW5kIHdlYiBicm93c2VyXG4gKiBpbXBsZW1lbnRhdGlvbnMgb2YgYGRlYnVnKClgLlxuICpcbiAqIEV4cG9zZSBgZGVidWcoKWAgYXMgdGhlIG1vZHVsZS5cbiAqL1xuXG5leHBvcnRzID0gbW9kdWxlLmV4cG9ydHMgPSBjcmVhdGVEZWJ1Zy5kZWJ1ZyA9IGNyZWF0ZURlYnVnWydkZWZhdWx0J10gPSBjcmVhdGVEZWJ1ZztcbmV4cG9ydHMuY29lcmNlID0gY29lcmNlO1xuZXhwb3J0cy5kaXNhYmxlID0gZGlzYWJsZTtcbmV4cG9ydHMuZW5hYmxlID0gZW5hYmxlO1xuZXhwb3J0cy5lbmFibGVkID0gZW5hYmxlZDtcbmV4cG9ydHMuaHVtYW5pemUgPSByZXF1aXJlKCdtcycpO1xuXG4vKipcbiAqIFRoZSBjdXJyZW50bHkgYWN0aXZlIGRlYnVnIG1vZGUgbmFtZXMsIGFuZCBuYW1lcyB0byBza2lwLlxuICovXG5cbmV4cG9ydHMubmFtZXMgPSBbXTtcbmV4cG9ydHMuc2tpcHMgPSBbXTtcblxuLyoqXG4gKiBNYXAgb2Ygc3BlY2lhbCBcIiVuXCIgaGFuZGxpbmcgZnVuY3Rpb25zLCBmb3IgdGhlIGRlYnVnIFwiZm9ybWF0XCIgYXJndW1lbnQuXG4gKlxuICogVmFsaWQga2V5IG5hbWVzIGFyZSBhIHNpbmdsZSwgbG93ZXIgb3IgdXBwZXItY2FzZSBsZXR0ZXIsIGkuZS4gXCJuXCIgYW5kIFwiTlwiLlxuICovXG5cbmV4cG9ydHMuZm9ybWF0dGVycyA9IHt9O1xuXG4vKipcbiAqIFByZXZpb3VzIGxvZyB0aW1lc3RhbXAuXG4gKi9cblxudmFyIHByZXZUaW1lO1xuXG4vKipcbiAqIFNlbGVjdCBhIGNvbG9yLlxuICogQHBhcmFtIHtTdHJpbmd9IG5hbWVzcGFjZVxuICogQHJldHVybiB7TnVtYmVyfVxuICogQGFwaSBwcml2YXRlXG4gKi9cblxuZnVuY3Rpb24gc2VsZWN0Q29sb3IobmFtZXNwYWNlKSB7XG4gIHZhciBoYXNoID0gMCwgaTtcblxuICBmb3IgKGkgaW4gbmFtZXNwYWNlKSB7XG4gICAgaGFzaCAgPSAoKGhhc2ggPDwgNSkgLSBoYXNoKSArIG5hbWVzcGFjZS5jaGFyQ29kZUF0KGkpO1xuICAgIGhhc2ggfD0gMDsgLy8gQ29udmVydCB0byAzMmJpdCBpbnRlZ2VyXG4gIH1cblxuICByZXR1cm4gZXhwb3J0cy5jb2xvcnNbTWF0aC5hYnMoaGFzaCkgJSBleHBvcnRzLmNvbG9ycy5sZW5ndGhdO1xufVxuXG4vKipcbiAqIENyZWF0ZSBhIGRlYnVnZ2VyIHdpdGggdGhlIGdpdmVuIGBuYW1lc3BhY2VgLlxuICpcbiAqIEBwYXJhbSB7U3RyaW5nfSBuYW1lc3BhY2VcbiAqIEByZXR1cm4ge0Z1bmN0aW9ufVxuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5mdW5jdGlvbiBjcmVhdGVEZWJ1ZyhuYW1lc3BhY2UpIHtcblxuICBmdW5jdGlvbiBkZWJ1ZygpIHtcbiAgICAvLyBkaXNhYmxlZD9cbiAgICBpZiAoIWRlYnVnLmVuYWJsZWQpIHJldHVybjtcblxuICAgIHZhciBzZWxmID0gZGVidWc7XG5cbiAgICAvLyBzZXQgYGRpZmZgIHRpbWVzdGFtcFxuICAgIHZhciBjdXJyID0gK25ldyBEYXRlKCk7XG4gICAgdmFyIG1zID0gY3VyciAtIChwcmV2VGltZSB8fCBjdXJyKTtcbiAgICBzZWxmLmRpZmYgPSBtcztcbiAgICBzZWxmLnByZXYgPSBwcmV2VGltZTtcbiAgICBzZWxmLmN1cnIgPSBjdXJyO1xuICAgIHByZXZUaW1lID0gY3VycjtcblxuICAgIC8vIHR1cm4gdGhlIGBhcmd1bWVudHNgIGludG8gYSBwcm9wZXIgQXJyYXlcbiAgICB2YXIgYXJncyA9IG5ldyBBcnJheShhcmd1bWVudHMubGVuZ3RoKTtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGFyZ3MubGVuZ3RoOyBpKyspIHtcbiAgICAgIGFyZ3NbaV0gPSBhcmd1bWVudHNbaV07XG4gICAgfVxuXG4gICAgYXJnc1swXSA9IGV4cG9ydHMuY29lcmNlKGFyZ3NbMF0pO1xuXG4gICAgaWYgKCdzdHJpbmcnICE9PSB0eXBlb2YgYXJnc1swXSkge1xuICAgICAgLy8gYW55dGhpbmcgZWxzZSBsZXQncyBpbnNwZWN0IHdpdGggJU9cbiAgICAgIGFyZ3MudW5zaGlmdCgnJU8nKTtcbiAgICB9XG5cbiAgICAvLyBhcHBseSBhbnkgYGZvcm1hdHRlcnNgIHRyYW5zZm9ybWF0aW9uc1xuICAgIHZhciBpbmRleCA9IDA7XG4gICAgYXJnc1swXSA9IGFyZ3NbMF0ucmVwbGFjZSgvJShbYS16QS1aJV0pL2csIGZ1bmN0aW9uKG1hdGNoLCBmb3JtYXQpIHtcbiAgICAgIC8vIGlmIHdlIGVuY291bnRlciBhbiBlc2NhcGVkICUgdGhlbiBkb24ndCBpbmNyZWFzZSB0aGUgYXJyYXkgaW5kZXhcbiAgICAgIGlmIChtYXRjaCA9PT0gJyUlJykgcmV0dXJuIG1hdGNoO1xuICAgICAgaW5kZXgrKztcbiAgICAgIHZhciBmb3JtYXR0ZXIgPSBleHBvcnRzLmZvcm1hdHRlcnNbZm9ybWF0XTtcbiAgICAgIGlmICgnZnVuY3Rpb24nID09PSB0eXBlb2YgZm9ybWF0dGVyKSB7XG4gICAgICAgIHZhciB2YWwgPSBhcmdzW2luZGV4XTtcbiAgICAgICAgbWF0Y2ggPSBmb3JtYXR0ZXIuY2FsbChzZWxmLCB2YWwpO1xuXG4gICAgICAgIC8vIG5vdyB3ZSBuZWVkIHRvIHJlbW92ZSBgYXJnc1tpbmRleF1gIHNpbmNlIGl0J3MgaW5saW5lZCBpbiB0aGUgYGZvcm1hdGBcbiAgICAgICAgYXJncy5zcGxpY2UoaW5kZXgsIDEpO1xuICAgICAgICBpbmRleC0tO1xuICAgICAgfVxuICAgICAgcmV0dXJuIG1hdGNoO1xuICAgIH0pO1xuXG4gICAgLy8gYXBwbHkgZW52LXNwZWNpZmljIGZvcm1hdHRpbmcgKGNvbG9ycywgZXRjLilcbiAgICBleHBvcnRzLmZvcm1hdEFyZ3MuY2FsbChzZWxmLCBhcmdzKTtcblxuICAgIHZhciBsb2dGbiA9IGRlYnVnLmxvZyB8fCBleHBvcnRzLmxvZyB8fCBjb25zb2xlLmxvZy5iaW5kKGNvbnNvbGUpO1xuICAgIGxvZ0ZuLmFwcGx5KHNlbGYsIGFyZ3MpO1xuICB9XG5cbiAgZGVidWcubmFtZXNwYWNlID0gbmFtZXNwYWNlO1xuICBkZWJ1Zy5lbmFibGVkID0gZXhwb3J0cy5lbmFibGVkKG5hbWVzcGFjZSk7XG4gIGRlYnVnLnVzZUNvbG9ycyA9IGV4cG9ydHMudXNlQ29sb3JzKCk7XG4gIGRlYnVnLmNvbG9yID0gc2VsZWN0Q29sb3IobmFtZXNwYWNlKTtcblxuICAvLyBlbnYtc3BlY2lmaWMgaW5pdGlhbGl6YXRpb24gbG9naWMgZm9yIGRlYnVnIGluc3RhbmNlc1xuICBpZiAoJ2Z1bmN0aW9uJyA9PT0gdHlwZW9mIGV4cG9ydHMuaW5pdCkge1xuICAgIGV4cG9ydHMuaW5pdChkZWJ1Zyk7XG4gIH1cblxuICByZXR1cm4gZGVidWc7XG59XG5cbi8qKlxuICogRW5hYmxlcyBhIGRlYnVnIG1vZGUgYnkgbmFtZXNwYWNlcy4gVGhpcyBjYW4gaW5jbHVkZSBtb2Rlc1xuICogc2VwYXJhdGVkIGJ5IGEgY29sb24gYW5kIHdpbGRjYXJkcy5cbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gbmFtZXNwYWNlc1xuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5mdW5jdGlvbiBlbmFibGUobmFtZXNwYWNlcykge1xuICBleHBvcnRzLnNhdmUobmFtZXNwYWNlcyk7XG5cbiAgZXhwb3J0cy5uYW1lcyA9IFtdO1xuICBleHBvcnRzLnNraXBzID0gW107XG5cbiAgdmFyIHNwbGl0ID0gKHR5cGVvZiBuYW1lc3BhY2VzID09PSAnc3RyaW5nJyA/IG5hbWVzcGFjZXMgOiAnJykuc3BsaXQoL1tcXHMsXSsvKTtcbiAgdmFyIGxlbiA9IHNwbGl0Lmxlbmd0aDtcblxuICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgaWYgKCFzcGxpdFtpXSkgY29udGludWU7IC8vIGlnbm9yZSBlbXB0eSBzdHJpbmdzXG4gICAgbmFtZXNwYWNlcyA9IHNwbGl0W2ldLnJlcGxhY2UoL1xcKi9nLCAnLio/Jyk7XG4gICAgaWYgKG5hbWVzcGFjZXNbMF0gPT09ICctJykge1xuICAgICAgZXhwb3J0cy5za2lwcy5wdXNoKG5ldyBSZWdFeHAoJ14nICsgbmFtZXNwYWNlcy5zdWJzdHIoMSkgKyAnJCcpKTtcbiAgICB9IGVsc2Uge1xuICAgICAgZXhwb3J0cy5uYW1lcy5wdXNoKG5ldyBSZWdFeHAoJ14nICsgbmFtZXNwYWNlcyArICckJykpO1xuICAgIH1cbiAgfVxufVxuXG4vKipcbiAqIERpc2FibGUgZGVidWcgb3V0cHV0LlxuICpcbiAqIEBhcGkgcHVibGljXG4gKi9cblxuZnVuY3Rpb24gZGlzYWJsZSgpIHtcbiAgZXhwb3J0cy5lbmFibGUoJycpO1xufVxuXG4vKipcbiAqIFJldHVybnMgdHJ1ZSBpZiB0aGUgZ2l2ZW4gbW9kZSBuYW1lIGlzIGVuYWJsZWQsIGZhbHNlIG90aGVyd2lzZS5cbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gbmFtZVxuICogQHJldHVybiB7Qm9vbGVhbn1cbiAqIEBhcGkgcHVibGljXG4gKi9cblxuZnVuY3Rpb24gZW5hYmxlZChuYW1lKSB7XG4gIHZhciBpLCBsZW47XG4gIGZvciAoaSA9IDAsIGxlbiA9IGV4cG9ydHMuc2tpcHMubGVuZ3RoOyBpIDwgbGVuOyBpKyspIHtcbiAgICBpZiAoZXhwb3J0cy5za2lwc1tpXS50ZXN0KG5hbWUpKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICB9XG4gIGZvciAoaSA9IDAsIGxlbiA9IGV4cG9ydHMubmFtZXMubGVuZ3RoOyBpIDwgbGVuOyBpKyspIHtcbiAgICBpZiAoZXhwb3J0cy5uYW1lc1tpXS50ZXN0KG5hbWUpKSB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIGZhbHNlO1xufVxuXG4vKipcbiAqIENvZXJjZSBgdmFsYC5cbiAqXG4gKiBAcGFyYW0ge01peGVkfSB2YWxcbiAqIEByZXR1cm4ge01peGVkfVxuICogQGFwaSBwcml2YXRlXG4gKi9cblxuZnVuY3Rpb24gY29lcmNlKHZhbCkge1xuICBpZiAodmFsIGluc3RhbmNlb2YgRXJyb3IpIHJldHVybiB2YWwuc3RhY2sgfHwgdmFsLm1lc3NhZ2U7XG4gIHJldHVybiB2YWw7XG59XG4iLCIvKipcbiAqIFRoaXMgaXMgdGhlIHdlYiBicm93c2VyIGltcGxlbWVudGF0aW9uIG9mIGBkZWJ1ZygpYC5cbiAqXG4gKiBFeHBvc2UgYGRlYnVnKClgIGFzIHRoZSBtb2R1bGUuXG4gKi9cblxuZXhwb3J0cyA9IG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9kZWJ1ZycpO1xuZXhwb3J0cy5sb2cgPSBsb2c7XG5leHBvcnRzLmZvcm1hdEFyZ3MgPSBmb3JtYXRBcmdzO1xuZXhwb3J0cy5zYXZlID0gc2F2ZTtcbmV4cG9ydHMubG9hZCA9IGxvYWQ7XG5leHBvcnRzLnVzZUNvbG9ycyA9IHVzZUNvbG9ycztcbmV4cG9ydHMuc3RvcmFnZSA9ICd1bmRlZmluZWQnICE9IHR5cGVvZiBjaHJvbWVcbiAgICAgICAgICAgICAgICYmICd1bmRlZmluZWQnICE9IHR5cGVvZiBjaHJvbWUuc3RvcmFnZVxuICAgICAgICAgICAgICAgICAgPyBjaHJvbWUuc3RvcmFnZS5sb2NhbFxuICAgICAgICAgICAgICAgICAgOiBsb2NhbHN0b3JhZ2UoKTtcblxuLyoqXG4gKiBDb2xvcnMuXG4gKi9cblxuZXhwb3J0cy5jb2xvcnMgPSBbXG4gICdsaWdodHNlYWdyZWVuJyxcbiAgJ2ZvcmVzdGdyZWVuJyxcbiAgJ2dvbGRlbnJvZCcsXG4gICdkb2RnZXJibHVlJyxcbiAgJ2RhcmtvcmNoaWQnLFxuICAnY3JpbXNvbidcbl07XG5cbi8qKlxuICogQ3VycmVudGx5IG9ubHkgV2ViS2l0LWJhc2VkIFdlYiBJbnNwZWN0b3JzLCBGaXJlZm94ID49IHYzMSxcbiAqIGFuZCB0aGUgRmlyZWJ1ZyBleHRlbnNpb24gKGFueSBGaXJlZm94IHZlcnNpb24pIGFyZSBrbm93blxuICogdG8gc3VwcG9ydCBcIiVjXCIgQ1NTIGN1c3RvbWl6YXRpb25zLlxuICpcbiAqIFRPRE86IGFkZCBhIGBsb2NhbFN0b3JhZ2VgIHZhcmlhYmxlIHRvIGV4cGxpY2l0bHkgZW5hYmxlL2Rpc2FibGUgY29sb3JzXG4gKi9cblxuZnVuY3Rpb24gdXNlQ29sb3JzKCkge1xuICAvLyBOQjogSW4gYW4gRWxlY3Ryb24gcHJlbG9hZCBzY3JpcHQsIGRvY3VtZW50IHdpbGwgYmUgZGVmaW5lZCBidXQgbm90IGZ1bGx5XG4gIC8vIGluaXRpYWxpemVkLiBTaW5jZSB3ZSBrbm93IHdlJ3JlIGluIENocm9tZSwgd2UnbGwganVzdCBkZXRlY3QgdGhpcyBjYXNlXG4gIC8vIGV4cGxpY2l0bHlcbiAgaWYgKHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnICYmIHdpbmRvdy5wcm9jZXNzICYmIHdpbmRvdy5wcm9jZXNzLnR5cGUgPT09ICdyZW5kZXJlcicpIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuXG4gIC8vIGlzIHdlYmtpdD8gaHR0cDovL3N0YWNrb3ZlcmZsb3cuY29tL2EvMTY0NTk2MDYvMzc2NzczXG4gIC8vIGRvY3VtZW50IGlzIHVuZGVmaW5lZCBpbiByZWFjdC1uYXRpdmU6IGh0dHBzOi8vZ2l0aHViLmNvbS9mYWNlYm9vay9yZWFjdC1uYXRpdmUvcHVsbC8xNjMyXG4gIHJldHVybiAodHlwZW9mIGRvY3VtZW50ICE9PSAndW5kZWZpbmVkJyAmJiBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQgJiYgZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LnN0eWxlICYmIGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5zdHlsZS5XZWJraXRBcHBlYXJhbmNlKSB8fFxuICAgIC8vIGlzIGZpcmVidWc/IGh0dHA6Ly9zdGFja292ZXJmbG93LmNvbS9hLzM5ODEyMC8zNzY3NzNcbiAgICAodHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcgJiYgd2luZG93LmNvbnNvbGUgJiYgKHdpbmRvdy5jb25zb2xlLmZpcmVidWcgfHwgKHdpbmRvdy5jb25zb2xlLmV4Y2VwdGlvbiAmJiB3aW5kb3cuY29uc29sZS50YWJsZSkpKSB8fFxuICAgIC8vIGlzIGZpcmVmb3ggPj0gdjMxP1xuICAgIC8vIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvVG9vbHMvV2ViX0NvbnNvbGUjU3R5bGluZ19tZXNzYWdlc1xuICAgICh0eXBlb2YgbmF2aWdhdG9yICE9PSAndW5kZWZpbmVkJyAmJiBuYXZpZ2F0b3IudXNlckFnZW50ICYmIG5hdmlnYXRvci51c2VyQWdlbnQudG9Mb3dlckNhc2UoKS5tYXRjaCgvZmlyZWZveFxcLyhcXGQrKS8pICYmIHBhcnNlSW50KFJlZ0V4cC4kMSwgMTApID49IDMxKSB8fFxuICAgIC8vIGRvdWJsZSBjaGVjayB3ZWJraXQgaW4gdXNlckFnZW50IGp1c3QgaW4gY2FzZSB3ZSBhcmUgaW4gYSB3b3JrZXJcbiAgICAodHlwZW9mIG5hdmlnYXRvciAhPT0gJ3VuZGVmaW5lZCcgJiYgbmF2aWdhdG9yLnVzZXJBZ2VudCAmJiBuYXZpZ2F0b3IudXNlckFnZW50LnRvTG93ZXJDYXNlKCkubWF0Y2goL2FwcGxld2Via2l0XFwvKFxcZCspLykpO1xufVxuXG4vKipcbiAqIE1hcCAlaiB0byBgSlNPTi5zdHJpbmdpZnkoKWAsIHNpbmNlIG5vIFdlYiBJbnNwZWN0b3JzIGRvIHRoYXQgYnkgZGVmYXVsdC5cbiAqL1xuXG5leHBvcnRzLmZvcm1hdHRlcnMuaiA9IGZ1bmN0aW9uKHYpIHtcbiAgdHJ5IHtcbiAgICByZXR1cm4gSlNPTi5zdHJpbmdpZnkodik7XG4gIH0gY2F0Y2ggKGVycikge1xuICAgIHJldHVybiAnW1VuZXhwZWN0ZWRKU09OUGFyc2VFcnJvcl06ICcgKyBlcnIubWVzc2FnZTtcbiAgfVxufTtcblxuXG4vKipcbiAqIENvbG9yaXplIGxvZyBhcmd1bWVudHMgaWYgZW5hYmxlZC5cbiAqXG4gKiBAYXBpIHB1YmxpY1xuICovXG5cbmZ1bmN0aW9uIGZvcm1hdEFyZ3MoYXJncykge1xuICB2YXIgdXNlQ29sb3JzID0gdGhpcy51c2VDb2xvcnM7XG5cbiAgYXJnc1swXSA9ICh1c2VDb2xvcnMgPyAnJWMnIDogJycpXG4gICAgKyB0aGlzLm5hbWVzcGFjZVxuICAgICsgKHVzZUNvbG9ycyA/ICcgJWMnIDogJyAnKVxuICAgICsgYXJnc1swXVxuICAgICsgKHVzZUNvbG9ycyA/ICclYyAnIDogJyAnKVxuICAgICsgJysnICsgZXhwb3J0cy5odW1hbml6ZSh0aGlzLmRpZmYpO1xuXG4gIGlmICghdXNlQ29sb3JzKSByZXR1cm47XG5cbiAgdmFyIGMgPSAnY29sb3I6ICcgKyB0aGlzLmNvbG9yO1xuICBhcmdzLnNwbGljZSgxLCAwLCBjLCAnY29sb3I6IGluaGVyaXQnKVxuXG4gIC8vIHRoZSBmaW5hbCBcIiVjXCIgaXMgc29tZXdoYXQgdHJpY2t5LCBiZWNhdXNlIHRoZXJlIGNvdWxkIGJlIG90aGVyXG4gIC8vIGFyZ3VtZW50cyBwYXNzZWQgZWl0aGVyIGJlZm9yZSBvciBhZnRlciB0aGUgJWMsIHNvIHdlIG5lZWQgdG9cbiAgLy8gZmlndXJlIG91dCB0aGUgY29ycmVjdCBpbmRleCB0byBpbnNlcnQgdGhlIENTUyBpbnRvXG4gIHZhciBpbmRleCA9IDA7XG4gIHZhciBsYXN0QyA9IDA7XG4gIGFyZ3NbMF0ucmVwbGFjZSgvJVthLXpBLVolXS9nLCBmdW5jdGlvbihtYXRjaCkge1xuICAgIGlmICgnJSUnID09PSBtYXRjaCkgcmV0dXJuO1xuICAgIGluZGV4Kys7XG4gICAgaWYgKCclYycgPT09IG1hdGNoKSB7XG4gICAgICAvLyB3ZSBvbmx5IGFyZSBpbnRlcmVzdGVkIGluIHRoZSAqbGFzdCogJWNcbiAgICAgIC8vICh0aGUgdXNlciBtYXkgaGF2ZSBwcm92aWRlZCB0aGVpciBvd24pXG4gICAgICBsYXN0QyA9IGluZGV4O1xuICAgIH1cbiAgfSk7XG5cbiAgYXJncy5zcGxpY2UobGFzdEMsIDAsIGMpO1xufVxuXG4vKipcbiAqIEludm9rZXMgYGNvbnNvbGUubG9nKClgIHdoZW4gYXZhaWxhYmxlLlxuICogTm8tb3Agd2hlbiBgY29uc29sZS5sb2dgIGlzIG5vdCBhIFwiZnVuY3Rpb25cIi5cbiAqXG4gKiBAYXBpIHB1YmxpY1xuICovXG5cbmZ1bmN0aW9uIGxvZygpIHtcbiAgLy8gdGhpcyBoYWNrZXJ5IGlzIHJlcXVpcmVkIGZvciBJRTgvOSwgd2hlcmVcbiAgLy8gdGhlIGBjb25zb2xlLmxvZ2AgZnVuY3Rpb24gZG9lc24ndCBoYXZlICdhcHBseSdcbiAgcmV0dXJuICdvYmplY3QnID09PSB0eXBlb2YgY29uc29sZVxuICAgICYmIGNvbnNvbGUubG9nXG4gICAgJiYgRnVuY3Rpb24ucHJvdG90eXBlLmFwcGx5LmNhbGwoY29uc29sZS5sb2csIGNvbnNvbGUsIGFyZ3VtZW50cyk7XG59XG5cbi8qKlxuICogU2F2ZSBgbmFtZXNwYWNlc2AuXG4gKlxuICogQHBhcmFtIHtTdHJpbmd9IG5hbWVzcGFjZXNcbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cbmZ1bmN0aW9uIHNhdmUobmFtZXNwYWNlcykge1xuICB0cnkge1xuICAgIGlmIChudWxsID09IG5hbWVzcGFjZXMpIHtcbiAgICAgIGV4cG9ydHMuc3RvcmFnZS5yZW1vdmVJdGVtKCdkZWJ1ZycpO1xuICAgIH0gZWxzZSB7XG4gICAgICBleHBvcnRzLnN0b3JhZ2UuZGVidWcgPSBuYW1lc3BhY2VzO1xuICAgIH1cbiAgfSBjYXRjaChlKSB7fVxufVxuXG4vKipcbiAqIExvYWQgYG5hbWVzcGFjZXNgLlxuICpcbiAqIEByZXR1cm4ge1N0cmluZ30gcmV0dXJucyB0aGUgcHJldmlvdXNseSBwZXJzaXN0ZWQgZGVidWcgbW9kZXNcbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cbmZ1bmN0aW9uIGxvYWQoKSB7XG4gIHZhciByO1xuICB0cnkge1xuICAgIHIgPSBleHBvcnRzLnN0b3JhZ2UuZGVidWc7XG4gIH0gY2F0Y2goZSkge31cblxuICAvLyBJZiBkZWJ1ZyBpc24ndCBzZXQgaW4gTFMsIGFuZCB3ZSdyZSBpbiBFbGVjdHJvbiwgdHJ5IHRvIGxvYWQgJERFQlVHXG4gIGlmICghciAmJiB0eXBlb2YgcHJvY2VzcyAhPT0gJ3VuZGVmaW5lZCcgJiYgJ2VudicgaW4gcHJvY2Vzcykge1xuICAgIHIgPSBwcm9jZXNzLmVudi5ERUJVRztcbiAgfVxuXG4gIHJldHVybiByO1xufVxuXG4vKipcbiAqIEVuYWJsZSBuYW1lc3BhY2VzIGxpc3RlZCBpbiBgbG9jYWxTdG9yYWdlLmRlYnVnYCBpbml0aWFsbHkuXG4gKi9cblxuZXhwb3J0cy5lbmFibGUobG9hZCgpKTtcblxuLyoqXG4gKiBMb2NhbHN0b3JhZ2UgYXR0ZW1wdHMgdG8gcmV0dXJuIHRoZSBsb2NhbHN0b3JhZ2UuXG4gKlxuICogVGhpcyBpcyBuZWNlc3NhcnkgYmVjYXVzZSBzYWZhcmkgdGhyb3dzXG4gKiB3aGVuIGEgdXNlciBkaXNhYmxlcyBjb29raWVzL2xvY2Fsc3RvcmFnZVxuICogYW5kIHlvdSBhdHRlbXB0IHRvIGFjY2VzcyBpdC5cbiAqXG4gKiBAcmV0dXJuIHtMb2NhbFN0b3JhZ2V9XG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5mdW5jdGlvbiBsb2NhbHN0b3JhZ2UoKSB7XG4gIHRyeSB7XG4gICAgcmV0dXJuIHdpbmRvdy5sb2NhbFN0b3JhZ2U7XG4gIH0gY2F0Y2ggKGUpIHt9XG59XG4iLCIvLyBNSVQgbGlzZW5jZVxuLy8gZnJvbSBodHRwczovL2dpdGh1Yi5jb20vc3Vic3RhY2svdHR5LWJyb3dzZXJpZnkvYmxvYi8xYmE3NjlhNjQyOWQyNDJmMzYyMjY1Mzg4MzViNDAzNGJmNmI3ODg2L2luZGV4LmpzXG5cbmV4cG9ydCBmdW5jdGlvbiBpc2F0dHkoKSB7XG4gIHJldHVybiBmYWxzZTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIFJlYWRTdHJlYW0oKSB7XG4gIHRocm93IG5ldyBFcnJvcigndHR5LlJlYWRTdHJlYW0gaXMgbm90IGltcGxlbWVudGVkJyk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBXcml0ZVN0cmVhbSgpIHtcbiAgdGhyb3cgbmV3IEVycm9yKCd0dHkuUmVhZFN0cmVhbSBpcyBub3QgaW1wbGVtZW50ZWQnKTtcbn1cblxuZXhwb3J0IGRlZmF1bHQge1xuICBpc2F0dHk6IGlzYXR0eSxcbiAgUmVhZFN0cmVhbTogUmVhZFN0cmVhbSxcbiAgV3JpdGVTdHJlYW06IFdyaXRlU3RyZWFtXG59XG4iLCJcbnZhciBsb29rdXAgPSBbXVxudmFyIHJldkxvb2t1cCA9IFtdXG52YXIgQXJyID0gdHlwZW9mIFVpbnQ4QXJyYXkgIT09ICd1bmRlZmluZWQnID8gVWludDhBcnJheSA6IEFycmF5XG52YXIgaW5pdGVkID0gZmFsc2U7XG5mdW5jdGlvbiBpbml0ICgpIHtcbiAgaW5pdGVkID0gdHJ1ZTtcbiAgdmFyIGNvZGUgPSAnQUJDREVGR0hJSktMTU5PUFFSU1RVVldYWVphYmNkZWZnaGlqa2xtbm9wcXJzdHV2d3h5ejAxMjM0NTY3ODkrLydcbiAgZm9yICh2YXIgaSA9IDAsIGxlbiA9IGNvZGUubGVuZ3RoOyBpIDwgbGVuOyArK2kpIHtcbiAgICBsb29rdXBbaV0gPSBjb2RlW2ldXG4gICAgcmV2TG9va3VwW2NvZGUuY2hhckNvZGVBdChpKV0gPSBpXG4gIH1cblxuICByZXZMb29rdXBbJy0nLmNoYXJDb2RlQXQoMCldID0gNjJcbiAgcmV2TG9va3VwWydfJy5jaGFyQ29kZUF0KDApXSA9IDYzXG59XG5cbmV4cG9ydCBmdW5jdGlvbiB0b0J5dGVBcnJheSAoYjY0KSB7XG4gIGlmICghaW5pdGVkKSB7XG4gICAgaW5pdCgpO1xuICB9XG4gIHZhciBpLCBqLCBsLCB0bXAsIHBsYWNlSG9sZGVycywgYXJyXG4gIHZhciBsZW4gPSBiNjQubGVuZ3RoXG5cbiAgaWYgKGxlbiAlIDQgPiAwKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdJbnZhbGlkIHN0cmluZy4gTGVuZ3RoIG11c3QgYmUgYSBtdWx0aXBsZSBvZiA0JylcbiAgfVxuXG4gIC8vIHRoZSBudW1iZXIgb2YgZXF1YWwgc2lnbnMgKHBsYWNlIGhvbGRlcnMpXG4gIC8vIGlmIHRoZXJlIGFyZSB0d28gcGxhY2Vob2xkZXJzLCB0aGFuIHRoZSB0d28gY2hhcmFjdGVycyBiZWZvcmUgaXRcbiAgLy8gcmVwcmVzZW50IG9uZSBieXRlXG4gIC8vIGlmIHRoZXJlIGlzIG9ubHkgb25lLCB0aGVuIHRoZSB0aHJlZSBjaGFyYWN0ZXJzIGJlZm9yZSBpdCByZXByZXNlbnQgMiBieXRlc1xuICAvLyB0aGlzIGlzIGp1c3QgYSBjaGVhcCBoYWNrIHRvIG5vdCBkbyBpbmRleE9mIHR3aWNlXG4gIHBsYWNlSG9sZGVycyA9IGI2NFtsZW4gLSAyXSA9PT0gJz0nID8gMiA6IGI2NFtsZW4gLSAxXSA9PT0gJz0nID8gMSA6IDBcblxuICAvLyBiYXNlNjQgaXMgNC8zICsgdXAgdG8gdHdvIGNoYXJhY3RlcnMgb2YgdGhlIG9yaWdpbmFsIGRhdGFcbiAgYXJyID0gbmV3IEFycihsZW4gKiAzIC8gNCAtIHBsYWNlSG9sZGVycylcblxuICAvLyBpZiB0aGVyZSBhcmUgcGxhY2Vob2xkZXJzLCBvbmx5IGdldCB1cCB0byB0aGUgbGFzdCBjb21wbGV0ZSA0IGNoYXJzXG4gIGwgPSBwbGFjZUhvbGRlcnMgPiAwID8gbGVuIC0gNCA6IGxlblxuXG4gIHZhciBMID0gMFxuXG4gIGZvciAoaSA9IDAsIGogPSAwOyBpIDwgbDsgaSArPSA0LCBqICs9IDMpIHtcbiAgICB0bXAgPSAocmV2TG9va3VwW2I2NC5jaGFyQ29kZUF0KGkpXSA8PCAxOCkgfCAocmV2TG9va3VwW2I2NC5jaGFyQ29kZUF0KGkgKyAxKV0gPDwgMTIpIHwgKHJldkxvb2t1cFtiNjQuY2hhckNvZGVBdChpICsgMildIDw8IDYpIHwgcmV2TG9va3VwW2I2NC5jaGFyQ29kZUF0KGkgKyAzKV1cbiAgICBhcnJbTCsrXSA9ICh0bXAgPj4gMTYpICYgMHhGRlxuICAgIGFycltMKytdID0gKHRtcCA+PiA4KSAmIDB4RkZcbiAgICBhcnJbTCsrXSA9IHRtcCAmIDB4RkZcbiAgfVxuXG4gIGlmIChwbGFjZUhvbGRlcnMgPT09IDIpIHtcbiAgICB0bXAgPSAocmV2TG9va3VwW2I2NC5jaGFyQ29kZUF0KGkpXSA8PCAyKSB8IChyZXZMb29rdXBbYjY0LmNoYXJDb2RlQXQoaSArIDEpXSA+PiA0KVxuICAgIGFycltMKytdID0gdG1wICYgMHhGRlxuICB9IGVsc2UgaWYgKHBsYWNlSG9sZGVycyA9PT0gMSkge1xuICAgIHRtcCA9IChyZXZMb29rdXBbYjY0LmNoYXJDb2RlQXQoaSldIDw8IDEwKSB8IChyZXZMb29rdXBbYjY0LmNoYXJDb2RlQXQoaSArIDEpXSA8PCA0KSB8IChyZXZMb29rdXBbYjY0LmNoYXJDb2RlQXQoaSArIDIpXSA+PiAyKVxuICAgIGFycltMKytdID0gKHRtcCA+PiA4KSAmIDB4RkZcbiAgICBhcnJbTCsrXSA9IHRtcCAmIDB4RkZcbiAgfVxuXG4gIHJldHVybiBhcnJcbn1cblxuZnVuY3Rpb24gdHJpcGxldFRvQmFzZTY0IChudW0pIHtcbiAgcmV0dXJuIGxvb2t1cFtudW0gPj4gMTggJiAweDNGXSArIGxvb2t1cFtudW0gPj4gMTIgJiAweDNGXSArIGxvb2t1cFtudW0gPj4gNiAmIDB4M0ZdICsgbG9va3VwW251bSAmIDB4M0ZdXG59XG5cbmZ1bmN0aW9uIGVuY29kZUNodW5rICh1aW50OCwgc3RhcnQsIGVuZCkge1xuICB2YXIgdG1wXG4gIHZhciBvdXRwdXQgPSBbXVxuICBmb3IgKHZhciBpID0gc3RhcnQ7IGkgPCBlbmQ7IGkgKz0gMykge1xuICAgIHRtcCA9ICh1aW50OFtpXSA8PCAxNikgKyAodWludDhbaSArIDFdIDw8IDgpICsgKHVpbnQ4W2kgKyAyXSlcbiAgICBvdXRwdXQucHVzaCh0cmlwbGV0VG9CYXNlNjQodG1wKSlcbiAgfVxuICByZXR1cm4gb3V0cHV0LmpvaW4oJycpXG59XG5cbmV4cG9ydCBmdW5jdGlvbiBmcm9tQnl0ZUFycmF5ICh1aW50OCkge1xuICBpZiAoIWluaXRlZCkge1xuICAgIGluaXQoKTtcbiAgfVxuICB2YXIgdG1wXG4gIHZhciBsZW4gPSB1aW50OC5sZW5ndGhcbiAgdmFyIGV4dHJhQnl0ZXMgPSBsZW4gJSAzIC8vIGlmIHdlIGhhdmUgMSBieXRlIGxlZnQsIHBhZCAyIGJ5dGVzXG4gIHZhciBvdXRwdXQgPSAnJ1xuICB2YXIgcGFydHMgPSBbXVxuICB2YXIgbWF4Q2h1bmtMZW5ndGggPSAxNjM4MyAvLyBtdXN0IGJlIG11bHRpcGxlIG9mIDNcblxuICAvLyBnbyB0aHJvdWdoIHRoZSBhcnJheSBldmVyeSB0aHJlZSBieXRlcywgd2UnbGwgZGVhbCB3aXRoIHRyYWlsaW5nIHN0dWZmIGxhdGVyXG4gIGZvciAodmFyIGkgPSAwLCBsZW4yID0gbGVuIC0gZXh0cmFCeXRlczsgaSA8IGxlbjI7IGkgKz0gbWF4Q2h1bmtMZW5ndGgpIHtcbiAgICBwYXJ0cy5wdXNoKGVuY29kZUNodW5rKHVpbnQ4LCBpLCAoaSArIG1heENodW5rTGVuZ3RoKSA+IGxlbjIgPyBsZW4yIDogKGkgKyBtYXhDaHVua0xlbmd0aCkpKVxuICB9XG5cbiAgLy8gcGFkIHRoZSBlbmQgd2l0aCB6ZXJvcywgYnV0IG1ha2Ugc3VyZSB0byBub3QgZm9yZ2V0IHRoZSBleHRyYSBieXRlc1xuICBpZiAoZXh0cmFCeXRlcyA9PT0gMSkge1xuICAgIHRtcCA9IHVpbnQ4W2xlbiAtIDFdXG4gICAgb3V0cHV0ICs9IGxvb2t1cFt0bXAgPj4gMl1cbiAgICBvdXRwdXQgKz0gbG9va3VwWyh0bXAgPDwgNCkgJiAweDNGXVxuICAgIG91dHB1dCArPSAnPT0nXG4gIH0gZWxzZSBpZiAoZXh0cmFCeXRlcyA9PT0gMikge1xuICAgIHRtcCA9ICh1aW50OFtsZW4gLSAyXSA8PCA4KSArICh1aW50OFtsZW4gLSAxXSlcbiAgICBvdXRwdXQgKz0gbG9va3VwW3RtcCA+PiAxMF1cbiAgICBvdXRwdXQgKz0gbG9va3VwWyh0bXAgPj4gNCkgJiAweDNGXVxuICAgIG91dHB1dCArPSBsb29rdXBbKHRtcCA8PCAyKSAmIDB4M0ZdXG4gICAgb3V0cHV0ICs9ICc9J1xuICB9XG5cbiAgcGFydHMucHVzaChvdXRwdXQpXG5cbiAgcmV0dXJuIHBhcnRzLmpvaW4oJycpXG59XG4iLCJcbmV4cG9ydCBmdW5jdGlvbiByZWFkIChidWZmZXIsIG9mZnNldCwgaXNMRSwgbUxlbiwgbkJ5dGVzKSB7XG4gIHZhciBlLCBtXG4gIHZhciBlTGVuID0gbkJ5dGVzICogOCAtIG1MZW4gLSAxXG4gIHZhciBlTWF4ID0gKDEgPDwgZUxlbikgLSAxXG4gIHZhciBlQmlhcyA9IGVNYXggPj4gMVxuICB2YXIgbkJpdHMgPSAtN1xuICB2YXIgaSA9IGlzTEUgPyAobkJ5dGVzIC0gMSkgOiAwXG4gIHZhciBkID0gaXNMRSA/IC0xIDogMVxuICB2YXIgcyA9IGJ1ZmZlcltvZmZzZXQgKyBpXVxuXG4gIGkgKz0gZFxuXG4gIGUgPSBzICYgKCgxIDw8ICgtbkJpdHMpKSAtIDEpXG4gIHMgPj49ICgtbkJpdHMpXG4gIG5CaXRzICs9IGVMZW5cbiAgZm9yICg7IG5CaXRzID4gMDsgZSA9IGUgKiAyNTYgKyBidWZmZXJbb2Zmc2V0ICsgaV0sIGkgKz0gZCwgbkJpdHMgLT0gOCkge31cblxuICBtID0gZSAmICgoMSA8PCAoLW5CaXRzKSkgLSAxKVxuICBlID4+PSAoLW5CaXRzKVxuICBuQml0cyArPSBtTGVuXG4gIGZvciAoOyBuQml0cyA+IDA7IG0gPSBtICogMjU2ICsgYnVmZmVyW29mZnNldCArIGldLCBpICs9IGQsIG5CaXRzIC09IDgpIHt9XG5cbiAgaWYgKGUgPT09IDApIHtcbiAgICBlID0gMSAtIGVCaWFzXG4gIH0gZWxzZSBpZiAoZSA9PT0gZU1heCkge1xuICAgIHJldHVybiBtID8gTmFOIDogKChzID8gLTEgOiAxKSAqIEluZmluaXR5KVxuICB9IGVsc2Uge1xuICAgIG0gPSBtICsgTWF0aC5wb3coMiwgbUxlbilcbiAgICBlID0gZSAtIGVCaWFzXG4gIH1cbiAgcmV0dXJuIChzID8gLTEgOiAxKSAqIG0gKiBNYXRoLnBvdygyLCBlIC0gbUxlbilcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHdyaXRlIChidWZmZXIsIHZhbHVlLCBvZmZzZXQsIGlzTEUsIG1MZW4sIG5CeXRlcykge1xuICB2YXIgZSwgbSwgY1xuICB2YXIgZUxlbiA9IG5CeXRlcyAqIDggLSBtTGVuIC0gMVxuICB2YXIgZU1heCA9ICgxIDw8IGVMZW4pIC0gMVxuICB2YXIgZUJpYXMgPSBlTWF4ID4+IDFcbiAgdmFyIHJ0ID0gKG1MZW4gPT09IDIzID8gTWF0aC5wb3coMiwgLTI0KSAtIE1hdGgucG93KDIsIC03NykgOiAwKVxuICB2YXIgaSA9IGlzTEUgPyAwIDogKG5CeXRlcyAtIDEpXG4gIHZhciBkID0gaXNMRSA/IDEgOiAtMVxuICB2YXIgcyA9IHZhbHVlIDwgMCB8fCAodmFsdWUgPT09IDAgJiYgMSAvIHZhbHVlIDwgMCkgPyAxIDogMFxuXG4gIHZhbHVlID0gTWF0aC5hYnModmFsdWUpXG5cbiAgaWYgKGlzTmFOKHZhbHVlKSB8fCB2YWx1ZSA9PT0gSW5maW5pdHkpIHtcbiAgICBtID0gaXNOYU4odmFsdWUpID8gMSA6IDBcbiAgICBlID0gZU1heFxuICB9IGVsc2Uge1xuICAgIGUgPSBNYXRoLmZsb29yKE1hdGgubG9nKHZhbHVlKSAvIE1hdGguTE4yKVxuICAgIGlmICh2YWx1ZSAqIChjID0gTWF0aC5wb3coMiwgLWUpKSA8IDEpIHtcbiAgICAgIGUtLVxuICAgICAgYyAqPSAyXG4gICAgfVxuICAgIGlmIChlICsgZUJpYXMgPj0gMSkge1xuICAgICAgdmFsdWUgKz0gcnQgLyBjXG4gICAgfSBlbHNlIHtcbiAgICAgIHZhbHVlICs9IHJ0ICogTWF0aC5wb3coMiwgMSAtIGVCaWFzKVxuICAgIH1cbiAgICBpZiAodmFsdWUgKiBjID49IDIpIHtcbiAgICAgIGUrK1xuICAgICAgYyAvPSAyXG4gICAgfVxuXG4gICAgaWYgKGUgKyBlQmlhcyA+PSBlTWF4KSB7XG4gICAgICBtID0gMFxuICAgICAgZSA9IGVNYXhcbiAgICB9IGVsc2UgaWYgKGUgKyBlQmlhcyA+PSAxKSB7XG4gICAgICBtID0gKHZhbHVlICogYyAtIDEpICogTWF0aC5wb3coMiwgbUxlbilcbiAgICAgIGUgPSBlICsgZUJpYXNcbiAgICB9IGVsc2Uge1xuICAgICAgbSA9IHZhbHVlICogTWF0aC5wb3coMiwgZUJpYXMgLSAxKSAqIE1hdGgucG93KDIsIG1MZW4pXG4gICAgICBlID0gMFxuICAgIH1cbiAgfVxuXG4gIGZvciAoOyBtTGVuID49IDg7IGJ1ZmZlcltvZmZzZXQgKyBpXSA9IG0gJiAweGZmLCBpICs9IGQsIG0gLz0gMjU2LCBtTGVuIC09IDgpIHt9XG5cbiAgZSA9IChlIDw8IG1MZW4pIHwgbVxuICBlTGVuICs9IG1MZW5cbiAgZm9yICg7IGVMZW4gPiAwOyBidWZmZXJbb2Zmc2V0ICsgaV0gPSBlICYgMHhmZiwgaSArPSBkLCBlIC89IDI1NiwgZUxlbiAtPSA4KSB7fVxuXG4gIGJ1ZmZlcltvZmZzZXQgKyBpIC0gZF0gfD0gcyAqIDEyOFxufVxuIiwidmFyIHRvU3RyaW5nID0ge30udG9TdHJpbmc7XG5cbmV4cG9ydCBkZWZhdWx0IEFycmF5LmlzQXJyYXkgfHwgZnVuY3Rpb24gKGFycikge1xuICByZXR1cm4gdG9TdHJpbmcuY2FsbChhcnIpID09ICdbb2JqZWN0IEFycmF5XSc7XG59O1xuIiwiLyohXG4gKiBUaGUgYnVmZmVyIG1vZHVsZSBmcm9tIG5vZGUuanMsIGZvciB0aGUgYnJvd3Nlci5cbiAqXG4gKiBAYXV0aG9yICAgRmVyb3NzIEFib3VraGFkaWplaCA8ZmVyb3NzQGZlcm9zcy5vcmc+IDxodHRwOi8vZmVyb3NzLm9yZz5cbiAqIEBsaWNlbnNlICBNSVRcbiAqL1xuLyogZXNsaW50LWRpc2FibGUgbm8tcHJvdG8gKi9cblxuXG5pbXBvcnQgKiBhcyBiYXNlNjQgZnJvbSAnLi9iYXNlNjQnXG5pbXBvcnQgKiBhcyBpZWVlNzU0IGZyb20gJy4vaWVlZTc1NCdcbmltcG9ydCBpc0FycmF5IGZyb20gJy4vaXNBcnJheSdcblxuZXhwb3J0IHZhciBJTlNQRUNUX01BWF9CWVRFUyA9IDUwXG5cbi8qKlxuICogSWYgYEJ1ZmZlci5UWVBFRF9BUlJBWV9TVVBQT1JUYDpcbiAqICAgPT09IHRydWUgICAgVXNlIFVpbnQ4QXJyYXkgaW1wbGVtZW50YXRpb24gKGZhc3Rlc3QpXG4gKiAgID09PSBmYWxzZSAgIFVzZSBPYmplY3QgaW1wbGVtZW50YXRpb24gKG1vc3QgY29tcGF0aWJsZSwgZXZlbiBJRTYpXG4gKlxuICogQnJvd3NlcnMgdGhhdCBzdXBwb3J0IHR5cGVkIGFycmF5cyBhcmUgSUUgMTArLCBGaXJlZm94IDQrLCBDaHJvbWUgNyssIFNhZmFyaSA1LjErLFxuICogT3BlcmEgMTEuNissIGlPUyA0LjIrLlxuICpcbiAqIER1ZSB0byB2YXJpb3VzIGJyb3dzZXIgYnVncywgc29tZXRpbWVzIHRoZSBPYmplY3QgaW1wbGVtZW50YXRpb24gd2lsbCBiZSB1c2VkIGV2ZW5cbiAqIHdoZW4gdGhlIGJyb3dzZXIgc3VwcG9ydHMgdHlwZWQgYXJyYXlzLlxuICpcbiAqIE5vdGU6XG4gKlxuICogICAtIEZpcmVmb3ggNC0yOSBsYWNrcyBzdXBwb3J0IGZvciBhZGRpbmcgbmV3IHByb3BlcnRpZXMgdG8gYFVpbnQ4QXJyYXlgIGluc3RhbmNlcyxcbiAqICAgICBTZWU6IGh0dHBzOi8vYnVnemlsbGEubW96aWxsYS5vcmcvc2hvd19idWcuY2dpP2lkPTY5NTQzOC5cbiAqXG4gKiAgIC0gQ2hyb21lIDktMTAgaXMgbWlzc2luZyB0aGUgYFR5cGVkQXJyYXkucHJvdG90eXBlLnN1YmFycmF5YCBmdW5jdGlvbi5cbiAqXG4gKiAgIC0gSUUxMCBoYXMgYSBicm9rZW4gYFR5cGVkQXJyYXkucHJvdG90eXBlLnN1YmFycmF5YCBmdW5jdGlvbiB3aGljaCByZXR1cm5zIGFycmF5cyBvZlxuICogICAgIGluY29ycmVjdCBsZW5ndGggaW4gc29tZSBzaXR1YXRpb25zLlxuXG4gKiBXZSBkZXRlY3QgdGhlc2UgYnVnZ3kgYnJvd3NlcnMgYW5kIHNldCBgQnVmZmVyLlRZUEVEX0FSUkFZX1NVUFBPUlRgIHRvIGBmYWxzZWAgc28gdGhleVxuICogZ2V0IHRoZSBPYmplY3QgaW1wbGVtZW50YXRpb24sIHdoaWNoIGlzIHNsb3dlciBidXQgYmVoYXZlcyBjb3JyZWN0bHkuXG4gKi9cbkJ1ZmZlci5UWVBFRF9BUlJBWV9TVVBQT1JUID0gZ2xvYmFsLlRZUEVEX0FSUkFZX1NVUFBPUlQgIT09IHVuZGVmaW5lZFxuICA/IGdsb2JhbC5UWVBFRF9BUlJBWV9TVVBQT1JUXG4gIDogdHJ1ZVxuXG4vKlxuICogRXhwb3J0IGtNYXhMZW5ndGggYWZ0ZXIgdHlwZWQgYXJyYXkgc3VwcG9ydCBpcyBkZXRlcm1pbmVkLlxuICovXG52YXIgX2tNYXhMZW5ndGggPSBrTWF4TGVuZ3RoKClcbmV4cG9ydCB7X2tNYXhMZW5ndGggYXMga01heExlbmd0aH07XG5mdW5jdGlvbiB0eXBlZEFycmF5U3VwcG9ydCAoKSB7XG4gIHJldHVybiB0cnVlO1xuICAvLyByb2xsdXAgaXNzdWVzXG4gIC8vIHRyeSB7XG4gIC8vICAgdmFyIGFyciA9IG5ldyBVaW50OEFycmF5KDEpXG4gIC8vICAgYXJyLl9fcHJvdG9fXyA9IHtcbiAgLy8gICAgIF9fcHJvdG9fXzogVWludDhBcnJheS5wcm90b3R5cGUsXG4gIC8vICAgICBmb286IGZ1bmN0aW9uICgpIHsgcmV0dXJuIDQyIH1cbiAgLy8gICB9XG4gIC8vICAgcmV0dXJuIGFyci5mb28oKSA9PT0gNDIgJiYgLy8gdHlwZWQgYXJyYXkgaW5zdGFuY2VzIGNhbiBiZSBhdWdtZW50ZWRcbiAgLy8gICAgICAgdHlwZW9mIGFyci5zdWJhcnJheSA9PT0gJ2Z1bmN0aW9uJyAmJiAvLyBjaHJvbWUgOS0xMCBsYWNrIGBzdWJhcnJheWBcbiAgLy8gICAgICAgYXJyLnN1YmFycmF5KDEsIDEpLmJ5dGVMZW5ndGggPT09IDAgLy8gaWUxMCBoYXMgYnJva2VuIGBzdWJhcnJheWBcbiAgLy8gfSBjYXRjaCAoZSkge1xuICAvLyAgIHJldHVybiBmYWxzZVxuICAvLyB9XG59XG5cbmZ1bmN0aW9uIGtNYXhMZW5ndGggKCkge1xuICByZXR1cm4gQnVmZmVyLlRZUEVEX0FSUkFZX1NVUFBPUlRcbiAgICA/IDB4N2ZmZmZmZmZcbiAgICA6IDB4M2ZmZmZmZmZcbn1cblxuZnVuY3Rpb24gY3JlYXRlQnVmZmVyICh0aGF0LCBsZW5ndGgpIHtcbiAgaWYgKGtNYXhMZW5ndGgoKSA8IGxlbmd0aCkge1xuICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCdJbnZhbGlkIHR5cGVkIGFycmF5IGxlbmd0aCcpXG4gIH1cbiAgaWYgKEJ1ZmZlci5UWVBFRF9BUlJBWV9TVVBQT1JUKSB7XG4gICAgLy8gUmV0dXJuIGFuIGF1Z21lbnRlZCBgVWludDhBcnJheWAgaW5zdGFuY2UsIGZvciBiZXN0IHBlcmZvcm1hbmNlXG4gICAgdGhhdCA9IG5ldyBVaW50OEFycmF5KGxlbmd0aClcbiAgICB0aGF0Ll9fcHJvdG9fXyA9IEJ1ZmZlci5wcm90b3R5cGVcbiAgfSBlbHNlIHtcbiAgICAvLyBGYWxsYmFjazogUmV0dXJuIGFuIG9iamVjdCBpbnN0YW5jZSBvZiB0aGUgQnVmZmVyIGNsYXNzXG4gICAgaWYgKHRoYXQgPT09IG51bGwpIHtcbiAgICAgIHRoYXQgPSBuZXcgQnVmZmVyKGxlbmd0aClcbiAgICB9XG4gICAgdGhhdC5sZW5ndGggPSBsZW5ndGhcbiAgfVxuXG4gIHJldHVybiB0aGF0XG59XG5cbi8qKlxuICogVGhlIEJ1ZmZlciBjb25zdHJ1Y3RvciByZXR1cm5zIGluc3RhbmNlcyBvZiBgVWludDhBcnJheWAgdGhhdCBoYXZlIHRoZWlyXG4gKiBwcm90b3R5cGUgY2hhbmdlZCB0byBgQnVmZmVyLnByb3RvdHlwZWAuIEZ1cnRoZXJtb3JlLCBgQnVmZmVyYCBpcyBhIHN1YmNsYXNzIG9mXG4gKiBgVWludDhBcnJheWAsIHNvIHRoZSByZXR1cm5lZCBpbnN0YW5jZXMgd2lsbCBoYXZlIGFsbCB0aGUgbm9kZSBgQnVmZmVyYCBtZXRob2RzXG4gKiBhbmQgdGhlIGBVaW50OEFycmF5YCBtZXRob2RzLiBTcXVhcmUgYnJhY2tldCBub3RhdGlvbiB3b3JrcyBhcyBleHBlY3RlZCAtLSBpdFxuICogcmV0dXJucyBhIHNpbmdsZSBvY3RldC5cbiAqXG4gKiBUaGUgYFVpbnQ4QXJyYXlgIHByb3RvdHlwZSByZW1haW5zIHVubW9kaWZpZWQuXG4gKi9cblxuZXhwb3J0IGZ1bmN0aW9uIEJ1ZmZlciAoYXJnLCBlbmNvZGluZ09yT2Zmc2V0LCBsZW5ndGgpIHtcbiAgaWYgKCFCdWZmZXIuVFlQRURfQVJSQVlfU1VQUE9SVCAmJiAhKHRoaXMgaW5zdGFuY2VvZiBCdWZmZXIpKSB7XG4gICAgcmV0dXJuIG5ldyBCdWZmZXIoYXJnLCBlbmNvZGluZ09yT2Zmc2V0LCBsZW5ndGgpXG4gIH1cblxuICAvLyBDb21tb24gY2FzZS5cbiAgaWYgKHR5cGVvZiBhcmcgPT09ICdudW1iZXInKSB7XG4gICAgaWYgKHR5cGVvZiBlbmNvZGluZ09yT2Zmc2V0ID09PSAnc3RyaW5nJykge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgICAnSWYgZW5jb2RpbmcgaXMgc3BlY2lmaWVkIHRoZW4gdGhlIGZpcnN0IGFyZ3VtZW50IG11c3QgYmUgYSBzdHJpbmcnXG4gICAgICApXG4gICAgfVxuICAgIHJldHVybiBhbGxvY1Vuc2FmZSh0aGlzLCBhcmcpXG4gIH1cbiAgcmV0dXJuIGZyb20odGhpcywgYXJnLCBlbmNvZGluZ09yT2Zmc2V0LCBsZW5ndGgpXG59XG5cbkJ1ZmZlci5wb29sU2l6ZSA9IDgxOTIgLy8gbm90IHVzZWQgYnkgdGhpcyBpbXBsZW1lbnRhdGlvblxuXG4vLyBUT0RPOiBMZWdhY3ksIG5vdCBuZWVkZWQgYW55bW9yZS4gUmVtb3ZlIGluIG5leHQgbWFqb3IgdmVyc2lvbi5cbkJ1ZmZlci5fYXVnbWVudCA9IGZ1bmN0aW9uIChhcnIpIHtcbiAgYXJyLl9fcHJvdG9fXyA9IEJ1ZmZlci5wcm90b3R5cGVcbiAgcmV0dXJuIGFyclxufVxuXG5mdW5jdGlvbiBmcm9tICh0aGF0LCB2YWx1ZSwgZW5jb2RpbmdPck9mZnNldCwgbGVuZ3RoKSB7XG4gIGlmICh0eXBlb2YgdmFsdWUgPT09ICdudW1iZXInKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignXCJ2YWx1ZVwiIGFyZ3VtZW50IG11c3Qgbm90IGJlIGEgbnVtYmVyJylcbiAgfVxuXG4gIGlmICh0eXBlb2YgQXJyYXlCdWZmZXIgIT09ICd1bmRlZmluZWQnICYmIHZhbHVlIGluc3RhbmNlb2YgQXJyYXlCdWZmZXIpIHtcbiAgICByZXR1cm4gZnJvbUFycmF5QnVmZmVyKHRoYXQsIHZhbHVlLCBlbmNvZGluZ09yT2Zmc2V0LCBsZW5ndGgpXG4gIH1cblxuICBpZiAodHlwZW9mIHZhbHVlID09PSAnc3RyaW5nJykge1xuICAgIHJldHVybiBmcm9tU3RyaW5nKHRoYXQsIHZhbHVlLCBlbmNvZGluZ09yT2Zmc2V0KVxuICB9XG5cbiAgcmV0dXJuIGZyb21PYmplY3QodGhhdCwgdmFsdWUpXG59XG5cbi8qKlxuICogRnVuY3Rpb25hbGx5IGVxdWl2YWxlbnQgdG8gQnVmZmVyKGFyZywgZW5jb2RpbmcpIGJ1dCB0aHJvd3MgYSBUeXBlRXJyb3JcbiAqIGlmIHZhbHVlIGlzIGEgbnVtYmVyLlxuICogQnVmZmVyLmZyb20oc3RyWywgZW5jb2RpbmddKVxuICogQnVmZmVyLmZyb20oYXJyYXkpXG4gKiBCdWZmZXIuZnJvbShidWZmZXIpXG4gKiBCdWZmZXIuZnJvbShhcnJheUJ1ZmZlclssIGJ5dGVPZmZzZXRbLCBsZW5ndGhdXSlcbiAqKi9cbkJ1ZmZlci5mcm9tID0gZnVuY3Rpb24gKHZhbHVlLCBlbmNvZGluZ09yT2Zmc2V0LCBsZW5ndGgpIHtcbiAgcmV0dXJuIGZyb20obnVsbCwgdmFsdWUsIGVuY29kaW5nT3JPZmZzZXQsIGxlbmd0aClcbn1cblxuaWYgKEJ1ZmZlci5UWVBFRF9BUlJBWV9TVVBQT1JUKSB7XG4gIEJ1ZmZlci5wcm90b3R5cGUuX19wcm90b19fID0gVWludDhBcnJheS5wcm90b3R5cGVcbiAgQnVmZmVyLl9fcHJvdG9fXyA9IFVpbnQ4QXJyYXlcbiAgaWYgKHR5cGVvZiBTeW1ib2wgIT09ICd1bmRlZmluZWQnICYmIFN5bWJvbC5zcGVjaWVzICYmXG4gICAgICBCdWZmZXJbU3ltYm9sLnNwZWNpZXNdID09PSBCdWZmZXIpIHtcbiAgICAvLyBGaXggc3ViYXJyYXkoKSBpbiBFUzIwMTYuIFNlZTogaHR0cHM6Ly9naXRodWIuY29tL2Zlcm9zcy9idWZmZXIvcHVsbC85N1xuICAgIC8vIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShCdWZmZXIsIFN5bWJvbC5zcGVjaWVzLCB7XG4gICAgLy8gICB2YWx1ZTogbnVsbCxcbiAgICAvLyAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICAgIC8vIH0pXG4gIH1cbn1cblxuZnVuY3Rpb24gYXNzZXJ0U2l6ZSAoc2l6ZSkge1xuICBpZiAodHlwZW9mIHNpemUgIT09ICdudW1iZXInKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignXCJzaXplXCIgYXJndW1lbnQgbXVzdCBiZSBhIG51bWJlcicpXG4gIH0gZWxzZSBpZiAoc2l6ZSA8IDApIHtcbiAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcignXCJzaXplXCIgYXJndW1lbnQgbXVzdCBub3QgYmUgbmVnYXRpdmUnKVxuICB9XG59XG5cbmZ1bmN0aW9uIGFsbG9jICh0aGF0LCBzaXplLCBmaWxsLCBlbmNvZGluZykge1xuICBhc3NlcnRTaXplKHNpemUpXG4gIGlmIChzaXplIDw9IDApIHtcbiAgICByZXR1cm4gY3JlYXRlQnVmZmVyKHRoYXQsIHNpemUpXG4gIH1cbiAgaWYgKGZpbGwgIT09IHVuZGVmaW5lZCkge1xuICAgIC8vIE9ubHkgcGF5IGF0dGVudGlvbiB0byBlbmNvZGluZyBpZiBpdCdzIGEgc3RyaW5nLiBUaGlzXG4gICAgLy8gcHJldmVudHMgYWNjaWRlbnRhbGx5IHNlbmRpbmcgaW4gYSBudW1iZXIgdGhhdCB3b3VsZFxuICAgIC8vIGJlIGludGVycHJldHRlZCBhcyBhIHN0YXJ0IG9mZnNldC5cbiAgICByZXR1cm4gdHlwZW9mIGVuY29kaW5nID09PSAnc3RyaW5nJ1xuICAgICAgPyBjcmVhdGVCdWZmZXIodGhhdCwgc2l6ZSkuZmlsbChmaWxsLCBlbmNvZGluZylcbiAgICAgIDogY3JlYXRlQnVmZmVyKHRoYXQsIHNpemUpLmZpbGwoZmlsbClcbiAgfVxuICByZXR1cm4gY3JlYXRlQnVmZmVyKHRoYXQsIHNpemUpXG59XG5cbi8qKlxuICogQ3JlYXRlcyBhIG5ldyBmaWxsZWQgQnVmZmVyIGluc3RhbmNlLlxuICogYWxsb2Moc2l6ZVssIGZpbGxbLCBlbmNvZGluZ11dKVxuICoqL1xuQnVmZmVyLmFsbG9jID0gZnVuY3Rpb24gKHNpemUsIGZpbGwsIGVuY29kaW5nKSB7XG4gIHJldHVybiBhbGxvYyhudWxsLCBzaXplLCBmaWxsLCBlbmNvZGluZylcbn1cblxuZnVuY3Rpb24gYWxsb2NVbnNhZmUgKHRoYXQsIHNpemUpIHtcbiAgYXNzZXJ0U2l6ZShzaXplKVxuICB0aGF0ID0gY3JlYXRlQnVmZmVyKHRoYXQsIHNpemUgPCAwID8gMCA6IGNoZWNrZWQoc2l6ZSkgfCAwKVxuICBpZiAoIUJ1ZmZlci5UWVBFRF9BUlJBWV9TVVBQT1JUKSB7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBzaXplOyArK2kpIHtcbiAgICAgIHRoYXRbaV0gPSAwXG4gICAgfVxuICB9XG4gIHJldHVybiB0aGF0XG59XG5cbi8qKlxuICogRXF1aXZhbGVudCB0byBCdWZmZXIobnVtKSwgYnkgZGVmYXVsdCBjcmVhdGVzIGEgbm9uLXplcm8tZmlsbGVkIEJ1ZmZlciBpbnN0YW5jZS5cbiAqICovXG5CdWZmZXIuYWxsb2NVbnNhZmUgPSBmdW5jdGlvbiAoc2l6ZSkge1xuICByZXR1cm4gYWxsb2NVbnNhZmUobnVsbCwgc2l6ZSlcbn1cbi8qKlxuICogRXF1aXZhbGVudCB0byBTbG93QnVmZmVyKG51bSksIGJ5IGRlZmF1bHQgY3JlYXRlcyBhIG5vbi16ZXJvLWZpbGxlZCBCdWZmZXIgaW5zdGFuY2UuXG4gKi9cbkJ1ZmZlci5hbGxvY1Vuc2FmZVNsb3cgPSBmdW5jdGlvbiAoc2l6ZSkge1xuICByZXR1cm4gYWxsb2NVbnNhZmUobnVsbCwgc2l6ZSlcbn1cblxuZnVuY3Rpb24gZnJvbVN0cmluZyAodGhhdCwgc3RyaW5nLCBlbmNvZGluZykge1xuICBpZiAodHlwZW9mIGVuY29kaW5nICE9PSAnc3RyaW5nJyB8fCBlbmNvZGluZyA9PT0gJycpIHtcbiAgICBlbmNvZGluZyA9ICd1dGY4J1xuICB9XG5cbiAgaWYgKCFCdWZmZXIuaXNFbmNvZGluZyhlbmNvZGluZykpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdcImVuY29kaW5nXCIgbXVzdCBiZSBhIHZhbGlkIHN0cmluZyBlbmNvZGluZycpXG4gIH1cblxuICB2YXIgbGVuZ3RoID0gYnl0ZUxlbmd0aChzdHJpbmcsIGVuY29kaW5nKSB8IDBcbiAgdGhhdCA9IGNyZWF0ZUJ1ZmZlcih0aGF0LCBsZW5ndGgpXG5cbiAgdmFyIGFjdHVhbCA9IHRoYXQud3JpdGUoc3RyaW5nLCBlbmNvZGluZylcblxuICBpZiAoYWN0dWFsICE9PSBsZW5ndGgpIHtcbiAgICAvLyBXcml0aW5nIGEgaGV4IHN0cmluZywgZm9yIGV4YW1wbGUsIHRoYXQgY29udGFpbnMgaW52YWxpZCBjaGFyYWN0ZXJzIHdpbGxcbiAgICAvLyBjYXVzZSBldmVyeXRoaW5nIGFmdGVyIHRoZSBmaXJzdCBpbnZhbGlkIGNoYXJhY3RlciB0byBiZSBpZ25vcmVkLiAoZS5nLlxuICAgIC8vICdhYnh4Y2QnIHdpbGwgYmUgdHJlYXRlZCBhcyAnYWInKVxuICAgIHRoYXQgPSB0aGF0LnNsaWNlKDAsIGFjdHVhbClcbiAgfVxuXG4gIHJldHVybiB0aGF0XG59XG5cbmZ1bmN0aW9uIGZyb21BcnJheUxpa2UgKHRoYXQsIGFycmF5KSB7XG4gIHZhciBsZW5ndGggPSBhcnJheS5sZW5ndGggPCAwID8gMCA6IGNoZWNrZWQoYXJyYXkubGVuZ3RoKSB8IDBcbiAgdGhhdCA9IGNyZWF0ZUJ1ZmZlcih0aGF0LCBsZW5ndGgpXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuZ3RoOyBpICs9IDEpIHtcbiAgICB0aGF0W2ldID0gYXJyYXlbaV0gJiAyNTVcbiAgfVxuICByZXR1cm4gdGhhdFxufVxuXG5mdW5jdGlvbiBmcm9tQXJyYXlCdWZmZXIgKHRoYXQsIGFycmF5LCBieXRlT2Zmc2V0LCBsZW5ndGgpIHtcbiAgYXJyYXkuYnl0ZUxlbmd0aCAvLyB0aGlzIHRocm93cyBpZiBgYXJyYXlgIGlzIG5vdCBhIHZhbGlkIEFycmF5QnVmZmVyXG5cbiAgaWYgKGJ5dGVPZmZzZXQgPCAwIHx8IGFycmF5LmJ5dGVMZW5ndGggPCBieXRlT2Zmc2V0KSB7XG4gICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ1xcJ29mZnNldFxcJyBpcyBvdXQgb2YgYm91bmRzJylcbiAgfVxuXG4gIGlmIChhcnJheS5ieXRlTGVuZ3RoIDwgYnl0ZU9mZnNldCArIChsZW5ndGggfHwgMCkpIHtcbiAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcignXFwnbGVuZ3RoXFwnIGlzIG91dCBvZiBib3VuZHMnKVxuICB9XG5cbiAgaWYgKGJ5dGVPZmZzZXQgPT09IHVuZGVmaW5lZCAmJiBsZW5ndGggPT09IHVuZGVmaW5lZCkge1xuICAgIGFycmF5ID0gbmV3IFVpbnQ4QXJyYXkoYXJyYXkpXG4gIH0gZWxzZSBpZiAobGVuZ3RoID09PSB1bmRlZmluZWQpIHtcbiAgICBhcnJheSA9IG5ldyBVaW50OEFycmF5KGFycmF5LCBieXRlT2Zmc2V0KVxuICB9IGVsc2Uge1xuICAgIGFycmF5ID0gbmV3IFVpbnQ4QXJyYXkoYXJyYXksIGJ5dGVPZmZzZXQsIGxlbmd0aClcbiAgfVxuXG4gIGlmIChCdWZmZXIuVFlQRURfQVJSQVlfU1VQUE9SVCkge1xuICAgIC8vIFJldHVybiBhbiBhdWdtZW50ZWQgYFVpbnQ4QXJyYXlgIGluc3RhbmNlLCBmb3IgYmVzdCBwZXJmb3JtYW5jZVxuICAgIHRoYXQgPSBhcnJheVxuICAgIHRoYXQuX19wcm90b19fID0gQnVmZmVyLnByb3RvdHlwZVxuICB9IGVsc2Uge1xuICAgIC8vIEZhbGxiYWNrOiBSZXR1cm4gYW4gb2JqZWN0IGluc3RhbmNlIG9mIHRoZSBCdWZmZXIgY2xhc3NcbiAgICB0aGF0ID0gZnJvbUFycmF5TGlrZSh0aGF0LCBhcnJheSlcbiAgfVxuICByZXR1cm4gdGhhdFxufVxuXG5mdW5jdGlvbiBmcm9tT2JqZWN0ICh0aGF0LCBvYmopIHtcbiAgaWYgKGludGVybmFsSXNCdWZmZXIob2JqKSkge1xuICAgIHZhciBsZW4gPSBjaGVja2VkKG9iai5sZW5ndGgpIHwgMFxuICAgIHRoYXQgPSBjcmVhdGVCdWZmZXIodGhhdCwgbGVuKVxuXG4gICAgaWYgKHRoYXQubGVuZ3RoID09PSAwKSB7XG4gICAgICByZXR1cm4gdGhhdFxuICAgIH1cblxuICAgIG9iai5jb3B5KHRoYXQsIDAsIDAsIGxlbilcbiAgICByZXR1cm4gdGhhdFxuICB9XG5cbiAgaWYgKG9iaikge1xuICAgIGlmICgodHlwZW9mIEFycmF5QnVmZmVyICE9PSAndW5kZWZpbmVkJyAmJlxuICAgICAgICBvYmouYnVmZmVyIGluc3RhbmNlb2YgQXJyYXlCdWZmZXIpIHx8ICdsZW5ndGgnIGluIG9iaikge1xuICAgICAgaWYgKHR5cGVvZiBvYmoubGVuZ3RoICE9PSAnbnVtYmVyJyB8fCBpc25hbihvYmoubGVuZ3RoKSkge1xuICAgICAgICByZXR1cm4gY3JlYXRlQnVmZmVyKHRoYXQsIDApXG4gICAgICB9XG4gICAgICByZXR1cm4gZnJvbUFycmF5TGlrZSh0aGF0LCBvYmopXG4gICAgfVxuXG4gICAgaWYgKG9iai50eXBlID09PSAnQnVmZmVyJyAmJiBpc0FycmF5KG9iai5kYXRhKSkge1xuICAgICAgcmV0dXJuIGZyb21BcnJheUxpa2UodGhhdCwgb2JqLmRhdGEpXG4gICAgfVxuICB9XG5cbiAgdGhyb3cgbmV3IFR5cGVFcnJvcignRmlyc3QgYXJndW1lbnQgbXVzdCBiZSBhIHN0cmluZywgQnVmZmVyLCBBcnJheUJ1ZmZlciwgQXJyYXksIG9yIGFycmF5LWxpa2Ugb2JqZWN0LicpXG59XG5cbmZ1bmN0aW9uIGNoZWNrZWQgKGxlbmd0aCkge1xuICAvLyBOb3RlOiBjYW5ub3QgdXNlIGBsZW5ndGggPCBrTWF4TGVuZ3RoKClgIGhlcmUgYmVjYXVzZSB0aGF0IGZhaWxzIHdoZW5cbiAgLy8gbGVuZ3RoIGlzIE5hTiAod2hpY2ggaXMgb3RoZXJ3aXNlIGNvZXJjZWQgdG8gemVyby4pXG4gIGlmIChsZW5ndGggPj0ga01heExlbmd0aCgpKSB7XG4gICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ0F0dGVtcHQgdG8gYWxsb2NhdGUgQnVmZmVyIGxhcmdlciB0aGFuIG1heGltdW0gJyArXG4gICAgICAgICAgICAgICAgICAgICAgICAgJ3NpemU6IDB4JyArIGtNYXhMZW5ndGgoKS50b1N0cmluZygxNikgKyAnIGJ5dGVzJylcbiAgfVxuICByZXR1cm4gbGVuZ3RoIHwgMFxufVxuXG5leHBvcnQgZnVuY3Rpb24gU2xvd0J1ZmZlciAobGVuZ3RoKSB7XG4gIGlmICgrbGVuZ3RoICE9IGxlbmd0aCkgeyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIGVxZXFlcVxuICAgIGxlbmd0aCA9IDBcbiAgfVxuICByZXR1cm4gQnVmZmVyLmFsbG9jKCtsZW5ndGgpXG59XG5CdWZmZXIuaXNCdWZmZXIgPSBpc0J1ZmZlcjtcbmZ1bmN0aW9uIGludGVybmFsSXNCdWZmZXIgKGIpIHtcbiAgcmV0dXJuICEhKGIgIT0gbnVsbCAmJiBiLl9pc0J1ZmZlcilcbn1cblxuQnVmZmVyLmNvbXBhcmUgPSBmdW5jdGlvbiBjb21wYXJlIChhLCBiKSB7XG4gIGlmICghaW50ZXJuYWxJc0J1ZmZlcihhKSB8fCAhaW50ZXJuYWxJc0J1ZmZlcihiKSkge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0FyZ3VtZW50cyBtdXN0IGJlIEJ1ZmZlcnMnKVxuICB9XG5cbiAgaWYgKGEgPT09IGIpIHJldHVybiAwXG5cbiAgdmFyIHggPSBhLmxlbmd0aFxuICB2YXIgeSA9IGIubGVuZ3RoXG5cbiAgZm9yICh2YXIgaSA9IDAsIGxlbiA9IE1hdGgubWluKHgsIHkpOyBpIDwgbGVuOyArK2kpIHtcbiAgICBpZiAoYVtpXSAhPT0gYltpXSkge1xuICAgICAgeCA9IGFbaV1cbiAgICAgIHkgPSBiW2ldXG4gICAgICBicmVha1xuICAgIH1cbiAgfVxuXG4gIGlmICh4IDwgeSkgcmV0dXJuIC0xXG4gIGlmICh5IDwgeCkgcmV0dXJuIDFcbiAgcmV0dXJuIDBcbn1cblxuQnVmZmVyLmlzRW5jb2RpbmcgPSBmdW5jdGlvbiBpc0VuY29kaW5nIChlbmNvZGluZykge1xuICBzd2l0Y2ggKFN0cmluZyhlbmNvZGluZykudG9Mb3dlckNhc2UoKSkge1xuICAgIGNhc2UgJ2hleCc6XG4gICAgY2FzZSAndXRmOCc6XG4gICAgY2FzZSAndXRmLTgnOlxuICAgIGNhc2UgJ2FzY2lpJzpcbiAgICBjYXNlICdsYXRpbjEnOlxuICAgIGNhc2UgJ2JpbmFyeSc6XG4gICAgY2FzZSAnYmFzZTY0JzpcbiAgICBjYXNlICd1Y3MyJzpcbiAgICBjYXNlICd1Y3MtMic6XG4gICAgY2FzZSAndXRmMTZsZSc6XG4gICAgY2FzZSAndXRmLTE2bGUnOlxuICAgICAgcmV0dXJuIHRydWVcbiAgICBkZWZhdWx0OlxuICAgICAgcmV0dXJuIGZhbHNlXG4gIH1cbn1cblxuQnVmZmVyLmNvbmNhdCA9IGZ1bmN0aW9uIGNvbmNhdCAobGlzdCwgbGVuZ3RoKSB7XG4gIGlmICghaXNBcnJheShsaXN0KSkge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ1wibGlzdFwiIGFyZ3VtZW50IG11c3QgYmUgYW4gQXJyYXkgb2YgQnVmZmVycycpXG4gIH1cblxuICBpZiAobGlzdC5sZW5ndGggPT09IDApIHtcbiAgICByZXR1cm4gQnVmZmVyLmFsbG9jKDApXG4gIH1cblxuICB2YXIgaVxuICBpZiAobGVuZ3RoID09PSB1bmRlZmluZWQpIHtcbiAgICBsZW5ndGggPSAwXG4gICAgZm9yIChpID0gMDsgaSA8IGxpc3QubGVuZ3RoOyArK2kpIHtcbiAgICAgIGxlbmd0aCArPSBsaXN0W2ldLmxlbmd0aFxuICAgIH1cbiAgfVxuXG4gIHZhciBidWZmZXIgPSBCdWZmZXIuYWxsb2NVbnNhZmUobGVuZ3RoKVxuICB2YXIgcG9zID0gMFxuICBmb3IgKGkgPSAwOyBpIDwgbGlzdC5sZW5ndGg7ICsraSkge1xuICAgIHZhciBidWYgPSBsaXN0W2ldXG4gICAgaWYgKCFpbnRlcm5hbElzQnVmZmVyKGJ1ZikpIHtcbiAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ1wibGlzdFwiIGFyZ3VtZW50IG11c3QgYmUgYW4gQXJyYXkgb2YgQnVmZmVycycpXG4gICAgfVxuICAgIGJ1Zi5jb3B5KGJ1ZmZlciwgcG9zKVxuICAgIHBvcyArPSBidWYubGVuZ3RoXG4gIH1cbiAgcmV0dXJuIGJ1ZmZlclxufVxuXG5mdW5jdGlvbiBieXRlTGVuZ3RoIChzdHJpbmcsIGVuY29kaW5nKSB7XG4gIGlmIChpbnRlcm5hbElzQnVmZmVyKHN0cmluZykpIHtcbiAgICByZXR1cm4gc3RyaW5nLmxlbmd0aFxuICB9XG4gIGlmICh0eXBlb2YgQXJyYXlCdWZmZXIgIT09ICd1bmRlZmluZWQnICYmIHR5cGVvZiBBcnJheUJ1ZmZlci5pc1ZpZXcgPT09ICdmdW5jdGlvbicgJiZcbiAgICAgIChBcnJheUJ1ZmZlci5pc1ZpZXcoc3RyaW5nKSB8fCBzdHJpbmcgaW5zdGFuY2VvZiBBcnJheUJ1ZmZlcikpIHtcbiAgICByZXR1cm4gc3RyaW5nLmJ5dGVMZW5ndGhcbiAgfVxuICBpZiAodHlwZW9mIHN0cmluZyAhPT0gJ3N0cmluZycpIHtcbiAgICBzdHJpbmcgPSAnJyArIHN0cmluZ1xuICB9XG5cbiAgdmFyIGxlbiA9IHN0cmluZy5sZW5ndGhcbiAgaWYgKGxlbiA9PT0gMCkgcmV0dXJuIDBcblxuICAvLyBVc2UgYSBmb3IgbG9vcCB0byBhdm9pZCByZWN1cnNpb25cbiAgdmFyIGxvd2VyZWRDYXNlID0gZmFsc2VcbiAgZm9yICg7Oykge1xuICAgIHN3aXRjaCAoZW5jb2RpbmcpIHtcbiAgICAgIGNhc2UgJ2FzY2lpJzpcbiAgICAgIGNhc2UgJ2xhdGluMSc6XG4gICAgICBjYXNlICdiaW5hcnknOlxuICAgICAgICByZXR1cm4gbGVuXG4gICAgICBjYXNlICd1dGY4JzpcbiAgICAgIGNhc2UgJ3V0Zi04JzpcbiAgICAgIGNhc2UgdW5kZWZpbmVkOlxuICAgICAgICByZXR1cm4gdXRmOFRvQnl0ZXMoc3RyaW5nKS5sZW5ndGhcbiAgICAgIGNhc2UgJ3VjczInOlxuICAgICAgY2FzZSAndWNzLTInOlxuICAgICAgY2FzZSAndXRmMTZsZSc6XG4gICAgICBjYXNlICd1dGYtMTZsZSc6XG4gICAgICAgIHJldHVybiBsZW4gKiAyXG4gICAgICBjYXNlICdoZXgnOlxuICAgICAgICByZXR1cm4gbGVuID4+PiAxXG4gICAgICBjYXNlICdiYXNlNjQnOlxuICAgICAgICByZXR1cm4gYmFzZTY0VG9CeXRlcyhzdHJpbmcpLmxlbmd0aFxuICAgICAgZGVmYXVsdDpcbiAgICAgICAgaWYgKGxvd2VyZWRDYXNlKSByZXR1cm4gdXRmOFRvQnl0ZXMoc3RyaW5nKS5sZW5ndGggLy8gYXNzdW1lIHV0ZjhcbiAgICAgICAgZW5jb2RpbmcgPSAoJycgKyBlbmNvZGluZykudG9Mb3dlckNhc2UoKVxuICAgICAgICBsb3dlcmVkQ2FzZSA9IHRydWVcbiAgICB9XG4gIH1cbn1cbkJ1ZmZlci5ieXRlTGVuZ3RoID0gYnl0ZUxlbmd0aFxuXG5mdW5jdGlvbiBzbG93VG9TdHJpbmcgKGVuY29kaW5nLCBzdGFydCwgZW5kKSB7XG4gIHZhciBsb3dlcmVkQ2FzZSA9IGZhbHNlXG5cbiAgLy8gTm8gbmVlZCB0byB2ZXJpZnkgdGhhdCBcInRoaXMubGVuZ3RoIDw9IE1BWF9VSU5UMzJcIiBzaW5jZSBpdCdzIGEgcmVhZC1vbmx5XG4gIC8vIHByb3BlcnR5IG9mIGEgdHlwZWQgYXJyYXkuXG5cbiAgLy8gVGhpcyBiZWhhdmVzIG5laXRoZXIgbGlrZSBTdHJpbmcgbm9yIFVpbnQ4QXJyYXkgaW4gdGhhdCB3ZSBzZXQgc3RhcnQvZW5kXG4gIC8vIHRvIHRoZWlyIHVwcGVyL2xvd2VyIGJvdW5kcyBpZiB0aGUgdmFsdWUgcGFzc2VkIGlzIG91dCBvZiByYW5nZS5cbiAgLy8gdW5kZWZpbmVkIGlzIGhhbmRsZWQgc3BlY2lhbGx5IGFzIHBlciBFQ01BLTI2MiA2dGggRWRpdGlvbixcbiAgLy8gU2VjdGlvbiAxMy4zLjMuNyBSdW50aW1lIFNlbWFudGljczogS2V5ZWRCaW5kaW5nSW5pdGlhbGl6YXRpb24uXG4gIGlmIChzdGFydCA9PT0gdW5kZWZpbmVkIHx8IHN0YXJ0IDwgMCkge1xuICAgIHN0YXJ0ID0gMFxuICB9XG4gIC8vIFJldHVybiBlYXJseSBpZiBzdGFydCA+IHRoaXMubGVuZ3RoLiBEb25lIGhlcmUgdG8gcHJldmVudCBwb3RlbnRpYWwgdWludDMyXG4gIC8vIGNvZXJjaW9uIGZhaWwgYmVsb3cuXG4gIGlmIChzdGFydCA+IHRoaXMubGVuZ3RoKSB7XG4gICAgcmV0dXJuICcnXG4gIH1cblxuICBpZiAoZW5kID09PSB1bmRlZmluZWQgfHwgZW5kID4gdGhpcy5sZW5ndGgpIHtcbiAgICBlbmQgPSB0aGlzLmxlbmd0aFxuICB9XG5cbiAgaWYgKGVuZCA8PSAwKSB7XG4gICAgcmV0dXJuICcnXG4gIH1cblxuICAvLyBGb3JjZSBjb2Vyc2lvbiB0byB1aW50MzIuIFRoaXMgd2lsbCBhbHNvIGNvZXJjZSBmYWxzZXkvTmFOIHZhbHVlcyB0byAwLlxuICBlbmQgPj4+PSAwXG4gIHN0YXJ0ID4+Pj0gMFxuXG4gIGlmIChlbmQgPD0gc3RhcnQpIHtcbiAgICByZXR1cm4gJydcbiAgfVxuXG4gIGlmICghZW5jb2RpbmcpIGVuY29kaW5nID0gJ3V0ZjgnXG5cbiAgd2hpbGUgKHRydWUpIHtcbiAgICBzd2l0Y2ggKGVuY29kaW5nKSB7XG4gICAgICBjYXNlICdoZXgnOlxuICAgICAgICByZXR1cm4gaGV4U2xpY2UodGhpcywgc3RhcnQsIGVuZClcblxuICAgICAgY2FzZSAndXRmOCc6XG4gICAgICBjYXNlICd1dGYtOCc6XG4gICAgICAgIHJldHVybiB1dGY4U2xpY2UodGhpcywgc3RhcnQsIGVuZClcblxuICAgICAgY2FzZSAnYXNjaWknOlxuICAgICAgICByZXR1cm4gYXNjaWlTbGljZSh0aGlzLCBzdGFydCwgZW5kKVxuXG4gICAgICBjYXNlICdsYXRpbjEnOlxuICAgICAgY2FzZSAnYmluYXJ5JzpcbiAgICAgICAgcmV0dXJuIGxhdGluMVNsaWNlKHRoaXMsIHN0YXJ0LCBlbmQpXG5cbiAgICAgIGNhc2UgJ2Jhc2U2NCc6XG4gICAgICAgIHJldHVybiBiYXNlNjRTbGljZSh0aGlzLCBzdGFydCwgZW5kKVxuXG4gICAgICBjYXNlICd1Y3MyJzpcbiAgICAgIGNhc2UgJ3Vjcy0yJzpcbiAgICAgIGNhc2UgJ3V0ZjE2bGUnOlxuICAgICAgY2FzZSAndXRmLTE2bGUnOlxuICAgICAgICByZXR1cm4gdXRmMTZsZVNsaWNlKHRoaXMsIHN0YXJ0LCBlbmQpXG5cbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIGlmIChsb3dlcmVkQ2FzZSkgdGhyb3cgbmV3IFR5cGVFcnJvcignVW5rbm93biBlbmNvZGluZzogJyArIGVuY29kaW5nKVxuICAgICAgICBlbmNvZGluZyA9IChlbmNvZGluZyArICcnKS50b0xvd2VyQ2FzZSgpXG4gICAgICAgIGxvd2VyZWRDYXNlID0gdHJ1ZVxuICAgIH1cbiAgfVxufVxuXG4vLyBUaGUgcHJvcGVydHkgaXMgdXNlZCBieSBgQnVmZmVyLmlzQnVmZmVyYCBhbmQgYGlzLWJ1ZmZlcmAgKGluIFNhZmFyaSA1LTcpIHRvIGRldGVjdFxuLy8gQnVmZmVyIGluc3RhbmNlcy5cbkJ1ZmZlci5wcm90b3R5cGUuX2lzQnVmZmVyID0gdHJ1ZVxuXG5mdW5jdGlvbiBzd2FwIChiLCBuLCBtKSB7XG4gIHZhciBpID0gYltuXVxuICBiW25dID0gYlttXVxuICBiW21dID0gaVxufVxuXG5CdWZmZXIucHJvdG90eXBlLnN3YXAxNiA9IGZ1bmN0aW9uIHN3YXAxNiAoKSB7XG4gIHZhciBsZW4gPSB0aGlzLmxlbmd0aFxuICBpZiAobGVuICUgMiAhPT0gMCkge1xuICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCdCdWZmZXIgc2l6ZSBtdXN0IGJlIGEgbXVsdGlwbGUgb2YgMTYtYml0cycpXG4gIH1cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW47IGkgKz0gMikge1xuICAgIHN3YXAodGhpcywgaSwgaSArIDEpXG4gIH1cbiAgcmV0dXJuIHRoaXNcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5zd2FwMzIgPSBmdW5jdGlvbiBzd2FwMzIgKCkge1xuICB2YXIgbGVuID0gdGhpcy5sZW5ndGhcbiAgaWYgKGxlbiAlIDQgIT09IDApIHtcbiAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcignQnVmZmVyIHNpemUgbXVzdCBiZSBhIG11bHRpcGxlIG9mIDMyLWJpdHMnKVxuICB9XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuOyBpICs9IDQpIHtcbiAgICBzd2FwKHRoaXMsIGksIGkgKyAzKVxuICAgIHN3YXAodGhpcywgaSArIDEsIGkgKyAyKVxuICB9XG4gIHJldHVybiB0aGlzXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUuc3dhcDY0ID0gZnVuY3Rpb24gc3dhcDY0ICgpIHtcbiAgdmFyIGxlbiA9IHRoaXMubGVuZ3RoXG4gIGlmIChsZW4gJSA4ICE9PSAwKSB7XG4gICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ0J1ZmZlciBzaXplIG11c3QgYmUgYSBtdWx0aXBsZSBvZiA2NC1iaXRzJylcbiAgfVxuICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbjsgaSArPSA4KSB7XG4gICAgc3dhcCh0aGlzLCBpLCBpICsgNylcbiAgICBzd2FwKHRoaXMsIGkgKyAxLCBpICsgNilcbiAgICBzd2FwKHRoaXMsIGkgKyAyLCBpICsgNSlcbiAgICBzd2FwKHRoaXMsIGkgKyAzLCBpICsgNClcbiAgfVxuICByZXR1cm4gdGhpc1xufVxuXG5CdWZmZXIucHJvdG90eXBlLnRvU3RyaW5nID0gZnVuY3Rpb24gdG9TdHJpbmcgKCkge1xuICB2YXIgbGVuZ3RoID0gdGhpcy5sZW5ndGggfCAwXG4gIGlmIChsZW5ndGggPT09IDApIHJldHVybiAnJ1xuICBpZiAoYXJndW1lbnRzLmxlbmd0aCA9PT0gMCkgcmV0dXJuIHV0ZjhTbGljZSh0aGlzLCAwLCBsZW5ndGgpXG4gIHJldHVybiBzbG93VG9TdHJpbmcuYXBwbHkodGhpcywgYXJndW1lbnRzKVxufVxuXG5CdWZmZXIucHJvdG90eXBlLmVxdWFscyA9IGZ1bmN0aW9uIGVxdWFscyAoYikge1xuICBpZiAoIWludGVybmFsSXNCdWZmZXIoYikpIHRocm93IG5ldyBUeXBlRXJyb3IoJ0FyZ3VtZW50IG11c3QgYmUgYSBCdWZmZXInKVxuICBpZiAodGhpcyA9PT0gYikgcmV0dXJuIHRydWVcbiAgcmV0dXJuIEJ1ZmZlci5jb21wYXJlKHRoaXMsIGIpID09PSAwXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUuaW5zcGVjdCA9IGZ1bmN0aW9uIGluc3BlY3QgKCkge1xuICB2YXIgc3RyID0gJydcbiAgdmFyIG1heCA9IElOU1BFQ1RfTUFYX0JZVEVTXG4gIGlmICh0aGlzLmxlbmd0aCA+IDApIHtcbiAgICBzdHIgPSB0aGlzLnRvU3RyaW5nKCdoZXgnLCAwLCBtYXgpLm1hdGNoKC8uezJ9L2cpLmpvaW4oJyAnKVxuICAgIGlmICh0aGlzLmxlbmd0aCA+IG1heCkgc3RyICs9ICcgLi4uICdcbiAgfVxuICByZXR1cm4gJzxCdWZmZXIgJyArIHN0ciArICc+J1xufVxuXG5CdWZmZXIucHJvdG90eXBlLmNvbXBhcmUgPSBmdW5jdGlvbiBjb21wYXJlICh0YXJnZXQsIHN0YXJ0LCBlbmQsIHRoaXNTdGFydCwgdGhpc0VuZCkge1xuICBpZiAoIWludGVybmFsSXNCdWZmZXIodGFyZ2V0KSkge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0FyZ3VtZW50IG11c3QgYmUgYSBCdWZmZXInKVxuICB9XG5cbiAgaWYgKHN0YXJ0ID09PSB1bmRlZmluZWQpIHtcbiAgICBzdGFydCA9IDBcbiAgfVxuICBpZiAoZW5kID09PSB1bmRlZmluZWQpIHtcbiAgICBlbmQgPSB0YXJnZXQgPyB0YXJnZXQubGVuZ3RoIDogMFxuICB9XG4gIGlmICh0aGlzU3RhcnQgPT09IHVuZGVmaW5lZCkge1xuICAgIHRoaXNTdGFydCA9IDBcbiAgfVxuICBpZiAodGhpc0VuZCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgdGhpc0VuZCA9IHRoaXMubGVuZ3RoXG4gIH1cblxuICBpZiAoc3RhcnQgPCAwIHx8IGVuZCA+IHRhcmdldC5sZW5ndGggfHwgdGhpc1N0YXJ0IDwgMCB8fCB0aGlzRW5kID4gdGhpcy5sZW5ndGgpIHtcbiAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcignb3V0IG9mIHJhbmdlIGluZGV4JylcbiAgfVxuXG4gIGlmICh0aGlzU3RhcnQgPj0gdGhpc0VuZCAmJiBzdGFydCA+PSBlbmQpIHtcbiAgICByZXR1cm4gMFxuICB9XG4gIGlmICh0aGlzU3RhcnQgPj0gdGhpc0VuZCkge1xuICAgIHJldHVybiAtMVxuICB9XG4gIGlmIChzdGFydCA+PSBlbmQpIHtcbiAgICByZXR1cm4gMVxuICB9XG5cbiAgc3RhcnQgPj4+PSAwXG4gIGVuZCA+Pj49IDBcbiAgdGhpc1N0YXJ0ID4+Pj0gMFxuICB0aGlzRW5kID4+Pj0gMFxuXG4gIGlmICh0aGlzID09PSB0YXJnZXQpIHJldHVybiAwXG5cbiAgdmFyIHggPSB0aGlzRW5kIC0gdGhpc1N0YXJ0XG4gIHZhciB5ID0gZW5kIC0gc3RhcnRcbiAgdmFyIGxlbiA9IE1hdGgubWluKHgsIHkpXG5cbiAgdmFyIHRoaXNDb3B5ID0gdGhpcy5zbGljZSh0aGlzU3RhcnQsIHRoaXNFbmQpXG4gIHZhciB0YXJnZXRDb3B5ID0gdGFyZ2V0LnNsaWNlKHN0YXJ0LCBlbmQpXG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW47ICsraSkge1xuICAgIGlmICh0aGlzQ29weVtpXSAhPT0gdGFyZ2V0Q29weVtpXSkge1xuICAgICAgeCA9IHRoaXNDb3B5W2ldXG4gICAgICB5ID0gdGFyZ2V0Q29weVtpXVxuICAgICAgYnJlYWtcbiAgICB9XG4gIH1cblxuICBpZiAoeCA8IHkpIHJldHVybiAtMVxuICBpZiAoeSA8IHgpIHJldHVybiAxXG4gIHJldHVybiAwXG59XG5cbi8vIEZpbmRzIGVpdGhlciB0aGUgZmlyc3QgaW5kZXggb2YgYHZhbGAgaW4gYGJ1ZmZlcmAgYXQgb2Zmc2V0ID49IGBieXRlT2Zmc2V0YCxcbi8vIE9SIHRoZSBsYXN0IGluZGV4IG9mIGB2YWxgIGluIGBidWZmZXJgIGF0IG9mZnNldCA8PSBgYnl0ZU9mZnNldGAuXG4vL1xuLy8gQXJndW1lbnRzOlxuLy8gLSBidWZmZXIgLSBhIEJ1ZmZlciB0byBzZWFyY2hcbi8vIC0gdmFsIC0gYSBzdHJpbmcsIEJ1ZmZlciwgb3IgbnVtYmVyXG4vLyAtIGJ5dGVPZmZzZXQgLSBhbiBpbmRleCBpbnRvIGBidWZmZXJgOyB3aWxsIGJlIGNsYW1wZWQgdG8gYW4gaW50MzJcbi8vIC0gZW5jb2RpbmcgLSBhbiBvcHRpb25hbCBlbmNvZGluZywgcmVsZXZhbnQgaXMgdmFsIGlzIGEgc3RyaW5nXG4vLyAtIGRpciAtIHRydWUgZm9yIGluZGV4T2YsIGZhbHNlIGZvciBsYXN0SW5kZXhPZlxuZnVuY3Rpb24gYmlkaXJlY3Rpb25hbEluZGV4T2YgKGJ1ZmZlciwgdmFsLCBieXRlT2Zmc2V0LCBlbmNvZGluZywgZGlyKSB7XG4gIC8vIEVtcHR5IGJ1ZmZlciBtZWFucyBubyBtYXRjaFxuICBpZiAoYnVmZmVyLmxlbmd0aCA9PT0gMCkgcmV0dXJuIC0xXG5cbiAgLy8gTm9ybWFsaXplIGJ5dGVPZmZzZXRcbiAgaWYgKHR5cGVvZiBieXRlT2Zmc2V0ID09PSAnc3RyaW5nJykge1xuICAgIGVuY29kaW5nID0gYnl0ZU9mZnNldFxuICAgIGJ5dGVPZmZzZXQgPSAwXG4gIH0gZWxzZSBpZiAoYnl0ZU9mZnNldCA+IDB4N2ZmZmZmZmYpIHtcbiAgICBieXRlT2Zmc2V0ID0gMHg3ZmZmZmZmZlxuICB9IGVsc2UgaWYgKGJ5dGVPZmZzZXQgPCAtMHg4MDAwMDAwMCkge1xuICAgIGJ5dGVPZmZzZXQgPSAtMHg4MDAwMDAwMFxuICB9XG4gIGJ5dGVPZmZzZXQgPSArYnl0ZU9mZnNldCAgLy8gQ29lcmNlIHRvIE51bWJlci5cbiAgaWYgKGlzTmFOKGJ5dGVPZmZzZXQpKSB7XG4gICAgLy8gYnl0ZU9mZnNldDogaXQgaXQncyB1bmRlZmluZWQsIG51bGwsIE5hTiwgXCJmb29cIiwgZXRjLCBzZWFyY2ggd2hvbGUgYnVmZmVyXG4gICAgYnl0ZU9mZnNldCA9IGRpciA/IDAgOiAoYnVmZmVyLmxlbmd0aCAtIDEpXG4gIH1cblxuICAvLyBOb3JtYWxpemUgYnl0ZU9mZnNldDogbmVnYXRpdmUgb2Zmc2V0cyBzdGFydCBmcm9tIHRoZSBlbmQgb2YgdGhlIGJ1ZmZlclxuICBpZiAoYnl0ZU9mZnNldCA8IDApIGJ5dGVPZmZzZXQgPSBidWZmZXIubGVuZ3RoICsgYnl0ZU9mZnNldFxuICBpZiAoYnl0ZU9mZnNldCA+PSBidWZmZXIubGVuZ3RoKSB7XG4gICAgaWYgKGRpcikgcmV0dXJuIC0xXG4gICAgZWxzZSBieXRlT2Zmc2V0ID0gYnVmZmVyLmxlbmd0aCAtIDFcbiAgfSBlbHNlIGlmIChieXRlT2Zmc2V0IDwgMCkge1xuICAgIGlmIChkaXIpIGJ5dGVPZmZzZXQgPSAwXG4gICAgZWxzZSByZXR1cm4gLTFcbiAgfVxuXG4gIC8vIE5vcm1hbGl6ZSB2YWxcbiAgaWYgKHR5cGVvZiB2YWwgPT09ICdzdHJpbmcnKSB7XG4gICAgdmFsID0gQnVmZmVyLmZyb20odmFsLCBlbmNvZGluZylcbiAgfVxuXG4gIC8vIEZpbmFsbHksIHNlYXJjaCBlaXRoZXIgaW5kZXhPZiAoaWYgZGlyIGlzIHRydWUpIG9yIGxhc3RJbmRleE9mXG4gIGlmIChpbnRlcm5hbElzQnVmZmVyKHZhbCkpIHtcbiAgICAvLyBTcGVjaWFsIGNhc2U6IGxvb2tpbmcgZm9yIGVtcHR5IHN0cmluZy9idWZmZXIgYWx3YXlzIGZhaWxzXG4gICAgaWYgKHZhbC5sZW5ndGggPT09IDApIHtcbiAgICAgIHJldHVybiAtMVxuICAgIH1cbiAgICByZXR1cm4gYXJyYXlJbmRleE9mKGJ1ZmZlciwgdmFsLCBieXRlT2Zmc2V0LCBlbmNvZGluZywgZGlyKVxuICB9IGVsc2UgaWYgKHR5cGVvZiB2YWwgPT09ICdudW1iZXInKSB7XG4gICAgdmFsID0gdmFsICYgMHhGRiAvLyBTZWFyY2ggZm9yIGEgYnl0ZSB2YWx1ZSBbMC0yNTVdXG4gICAgaWYgKEJ1ZmZlci5UWVBFRF9BUlJBWV9TVVBQT1JUICYmXG4gICAgICAgIHR5cGVvZiBVaW50OEFycmF5LnByb3RvdHlwZS5pbmRleE9mID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICBpZiAoZGlyKSB7XG4gICAgICAgIHJldHVybiBVaW50OEFycmF5LnByb3RvdHlwZS5pbmRleE9mLmNhbGwoYnVmZmVyLCB2YWwsIGJ5dGVPZmZzZXQpXG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gVWludDhBcnJheS5wcm90b3R5cGUubGFzdEluZGV4T2YuY2FsbChidWZmZXIsIHZhbCwgYnl0ZU9mZnNldClcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGFycmF5SW5kZXhPZihidWZmZXIsIFsgdmFsIF0sIGJ5dGVPZmZzZXQsIGVuY29kaW5nLCBkaXIpXG4gIH1cblxuICB0aHJvdyBuZXcgVHlwZUVycm9yKCd2YWwgbXVzdCBiZSBzdHJpbmcsIG51bWJlciBvciBCdWZmZXInKVxufVxuXG5mdW5jdGlvbiBhcnJheUluZGV4T2YgKGFyciwgdmFsLCBieXRlT2Zmc2V0LCBlbmNvZGluZywgZGlyKSB7XG4gIHZhciBpbmRleFNpemUgPSAxXG4gIHZhciBhcnJMZW5ndGggPSBhcnIubGVuZ3RoXG4gIHZhciB2YWxMZW5ndGggPSB2YWwubGVuZ3RoXG5cbiAgaWYgKGVuY29kaW5nICE9PSB1bmRlZmluZWQpIHtcbiAgICBlbmNvZGluZyA9IFN0cmluZyhlbmNvZGluZykudG9Mb3dlckNhc2UoKVxuICAgIGlmIChlbmNvZGluZyA9PT0gJ3VjczInIHx8IGVuY29kaW5nID09PSAndWNzLTInIHx8XG4gICAgICAgIGVuY29kaW5nID09PSAndXRmMTZsZScgfHwgZW5jb2RpbmcgPT09ICd1dGYtMTZsZScpIHtcbiAgICAgIGlmIChhcnIubGVuZ3RoIDwgMiB8fCB2YWwubGVuZ3RoIDwgMikge1xuICAgICAgICByZXR1cm4gLTFcbiAgICAgIH1cbiAgICAgIGluZGV4U2l6ZSA9IDJcbiAgICAgIGFyckxlbmd0aCAvPSAyXG4gICAgICB2YWxMZW5ndGggLz0gMlxuICAgICAgYnl0ZU9mZnNldCAvPSAyXG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gcmVhZCAoYnVmLCBpKSB7XG4gICAgaWYgKGluZGV4U2l6ZSA9PT0gMSkge1xuICAgICAgcmV0dXJuIGJ1ZltpXVxuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gYnVmLnJlYWRVSW50MTZCRShpICogaW5kZXhTaXplKVxuICAgIH1cbiAgfVxuXG4gIHZhciBpXG4gIGlmIChkaXIpIHtcbiAgICB2YXIgZm91bmRJbmRleCA9IC0xXG4gICAgZm9yIChpID0gYnl0ZU9mZnNldDsgaSA8IGFyckxlbmd0aDsgaSsrKSB7XG4gICAgICBpZiAocmVhZChhcnIsIGkpID09PSByZWFkKHZhbCwgZm91bmRJbmRleCA9PT0gLTEgPyAwIDogaSAtIGZvdW5kSW5kZXgpKSB7XG4gICAgICAgIGlmIChmb3VuZEluZGV4ID09PSAtMSkgZm91bmRJbmRleCA9IGlcbiAgICAgICAgaWYgKGkgLSBmb3VuZEluZGV4ICsgMSA9PT0gdmFsTGVuZ3RoKSByZXR1cm4gZm91bmRJbmRleCAqIGluZGV4U2l6ZVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaWYgKGZvdW5kSW5kZXggIT09IC0xKSBpIC09IGkgLSBmb3VuZEluZGV4XG4gICAgICAgIGZvdW5kSW5kZXggPSAtMVxuICAgICAgfVxuICAgIH1cbiAgfSBlbHNlIHtcbiAgICBpZiAoYnl0ZU9mZnNldCArIHZhbExlbmd0aCA+IGFyckxlbmd0aCkgYnl0ZU9mZnNldCA9IGFyckxlbmd0aCAtIHZhbExlbmd0aFxuICAgIGZvciAoaSA9IGJ5dGVPZmZzZXQ7IGkgPj0gMDsgaS0tKSB7XG4gICAgICB2YXIgZm91bmQgPSB0cnVlXG4gICAgICBmb3IgKHZhciBqID0gMDsgaiA8IHZhbExlbmd0aDsgaisrKSB7XG4gICAgICAgIGlmIChyZWFkKGFyciwgaSArIGopICE9PSByZWFkKHZhbCwgaikpIHtcbiAgICAgICAgICBmb3VuZCA9IGZhbHNlXG4gICAgICAgICAgYnJlYWtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgaWYgKGZvdW5kKSByZXR1cm4gaVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiAtMVxufVxuXG5CdWZmZXIucHJvdG90eXBlLmluY2x1ZGVzID0gZnVuY3Rpb24gaW5jbHVkZXMgKHZhbCwgYnl0ZU9mZnNldCwgZW5jb2RpbmcpIHtcbiAgcmV0dXJuIHRoaXMuaW5kZXhPZih2YWwsIGJ5dGVPZmZzZXQsIGVuY29kaW5nKSAhPT0gLTFcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5pbmRleE9mID0gZnVuY3Rpb24gaW5kZXhPZiAodmFsLCBieXRlT2Zmc2V0LCBlbmNvZGluZykge1xuICByZXR1cm4gYmlkaXJlY3Rpb25hbEluZGV4T2YodGhpcywgdmFsLCBieXRlT2Zmc2V0LCBlbmNvZGluZywgdHJ1ZSlcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5sYXN0SW5kZXhPZiA9IGZ1bmN0aW9uIGxhc3RJbmRleE9mICh2YWwsIGJ5dGVPZmZzZXQsIGVuY29kaW5nKSB7XG4gIHJldHVybiBiaWRpcmVjdGlvbmFsSW5kZXhPZih0aGlzLCB2YWwsIGJ5dGVPZmZzZXQsIGVuY29kaW5nLCBmYWxzZSlcbn1cblxuZnVuY3Rpb24gaGV4V3JpdGUgKGJ1Ziwgc3RyaW5nLCBvZmZzZXQsIGxlbmd0aCkge1xuICBvZmZzZXQgPSBOdW1iZXIob2Zmc2V0KSB8fCAwXG4gIHZhciByZW1haW5pbmcgPSBidWYubGVuZ3RoIC0gb2Zmc2V0XG4gIGlmICghbGVuZ3RoKSB7XG4gICAgbGVuZ3RoID0gcmVtYWluaW5nXG4gIH0gZWxzZSB7XG4gICAgbGVuZ3RoID0gTnVtYmVyKGxlbmd0aClcbiAgICBpZiAobGVuZ3RoID4gcmVtYWluaW5nKSB7XG4gICAgICBsZW5ndGggPSByZW1haW5pbmdcbiAgICB9XG4gIH1cblxuICAvLyBtdXN0IGJlIGFuIGV2ZW4gbnVtYmVyIG9mIGRpZ2l0c1xuICB2YXIgc3RyTGVuID0gc3RyaW5nLmxlbmd0aFxuICBpZiAoc3RyTGVuICUgMiAhPT0gMCkgdGhyb3cgbmV3IFR5cGVFcnJvcignSW52YWxpZCBoZXggc3RyaW5nJylcblxuICBpZiAobGVuZ3RoID4gc3RyTGVuIC8gMikge1xuICAgIGxlbmd0aCA9IHN0ckxlbiAvIDJcbiAgfVxuICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbmd0aDsgKytpKSB7XG4gICAgdmFyIHBhcnNlZCA9IHBhcnNlSW50KHN0cmluZy5zdWJzdHIoaSAqIDIsIDIpLCAxNilcbiAgICBpZiAoaXNOYU4ocGFyc2VkKSkgcmV0dXJuIGlcbiAgICBidWZbb2Zmc2V0ICsgaV0gPSBwYXJzZWRcbiAgfVxuICByZXR1cm4gaVxufVxuXG5mdW5jdGlvbiB1dGY4V3JpdGUgKGJ1Ziwgc3RyaW5nLCBvZmZzZXQsIGxlbmd0aCkge1xuICByZXR1cm4gYmxpdEJ1ZmZlcih1dGY4VG9CeXRlcyhzdHJpbmcsIGJ1Zi5sZW5ndGggLSBvZmZzZXQpLCBidWYsIG9mZnNldCwgbGVuZ3RoKVxufVxuXG5mdW5jdGlvbiBhc2NpaVdyaXRlIChidWYsIHN0cmluZywgb2Zmc2V0LCBsZW5ndGgpIHtcbiAgcmV0dXJuIGJsaXRCdWZmZXIoYXNjaWlUb0J5dGVzKHN0cmluZyksIGJ1Ziwgb2Zmc2V0LCBsZW5ndGgpXG59XG5cbmZ1bmN0aW9uIGxhdGluMVdyaXRlIChidWYsIHN0cmluZywgb2Zmc2V0LCBsZW5ndGgpIHtcbiAgcmV0dXJuIGFzY2lpV3JpdGUoYnVmLCBzdHJpbmcsIG9mZnNldCwgbGVuZ3RoKVxufVxuXG5mdW5jdGlvbiBiYXNlNjRXcml0ZSAoYnVmLCBzdHJpbmcsIG9mZnNldCwgbGVuZ3RoKSB7XG4gIHJldHVybiBibGl0QnVmZmVyKGJhc2U2NFRvQnl0ZXMoc3RyaW5nKSwgYnVmLCBvZmZzZXQsIGxlbmd0aClcbn1cblxuZnVuY3Rpb24gdWNzMldyaXRlIChidWYsIHN0cmluZywgb2Zmc2V0LCBsZW5ndGgpIHtcbiAgcmV0dXJuIGJsaXRCdWZmZXIodXRmMTZsZVRvQnl0ZXMoc3RyaW5nLCBidWYubGVuZ3RoIC0gb2Zmc2V0KSwgYnVmLCBvZmZzZXQsIGxlbmd0aClcbn1cblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZSA9IGZ1bmN0aW9uIHdyaXRlIChzdHJpbmcsIG9mZnNldCwgbGVuZ3RoLCBlbmNvZGluZykge1xuICAvLyBCdWZmZXIjd3JpdGUoc3RyaW5nKVxuICBpZiAob2Zmc2V0ID09PSB1bmRlZmluZWQpIHtcbiAgICBlbmNvZGluZyA9ICd1dGY4J1xuICAgIGxlbmd0aCA9IHRoaXMubGVuZ3RoXG4gICAgb2Zmc2V0ID0gMFxuICAvLyBCdWZmZXIjd3JpdGUoc3RyaW5nLCBlbmNvZGluZylcbiAgfSBlbHNlIGlmIChsZW5ndGggPT09IHVuZGVmaW5lZCAmJiB0eXBlb2Ygb2Zmc2V0ID09PSAnc3RyaW5nJykge1xuICAgIGVuY29kaW5nID0gb2Zmc2V0XG4gICAgbGVuZ3RoID0gdGhpcy5sZW5ndGhcbiAgICBvZmZzZXQgPSAwXG4gIC8vIEJ1ZmZlciN3cml0ZShzdHJpbmcsIG9mZnNldFssIGxlbmd0aF1bLCBlbmNvZGluZ10pXG4gIH0gZWxzZSBpZiAoaXNGaW5pdGUob2Zmc2V0KSkge1xuICAgIG9mZnNldCA9IG9mZnNldCB8IDBcbiAgICBpZiAoaXNGaW5pdGUobGVuZ3RoKSkge1xuICAgICAgbGVuZ3RoID0gbGVuZ3RoIHwgMFxuICAgICAgaWYgKGVuY29kaW5nID09PSB1bmRlZmluZWQpIGVuY29kaW5nID0gJ3V0ZjgnXG4gICAgfSBlbHNlIHtcbiAgICAgIGVuY29kaW5nID0gbGVuZ3RoXG4gICAgICBsZW5ndGggPSB1bmRlZmluZWRcbiAgICB9XG4gIC8vIGxlZ2FjeSB3cml0ZShzdHJpbmcsIGVuY29kaW5nLCBvZmZzZXQsIGxlbmd0aCkgLSByZW1vdmUgaW4gdjAuMTNcbiAgfSBlbHNlIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICAnQnVmZmVyLndyaXRlKHN0cmluZywgZW5jb2RpbmcsIG9mZnNldFssIGxlbmd0aF0pIGlzIG5vIGxvbmdlciBzdXBwb3J0ZWQnXG4gICAgKVxuICB9XG5cbiAgdmFyIHJlbWFpbmluZyA9IHRoaXMubGVuZ3RoIC0gb2Zmc2V0XG4gIGlmIChsZW5ndGggPT09IHVuZGVmaW5lZCB8fCBsZW5ndGggPiByZW1haW5pbmcpIGxlbmd0aCA9IHJlbWFpbmluZ1xuXG4gIGlmICgoc3RyaW5nLmxlbmd0aCA+IDAgJiYgKGxlbmd0aCA8IDAgfHwgb2Zmc2V0IDwgMCkpIHx8IG9mZnNldCA+IHRoaXMubGVuZ3RoKSB7XG4gICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ0F0dGVtcHQgdG8gd3JpdGUgb3V0c2lkZSBidWZmZXIgYm91bmRzJylcbiAgfVxuXG4gIGlmICghZW5jb2RpbmcpIGVuY29kaW5nID0gJ3V0ZjgnXG5cbiAgdmFyIGxvd2VyZWRDYXNlID0gZmFsc2VcbiAgZm9yICg7Oykge1xuICAgIHN3aXRjaCAoZW5jb2RpbmcpIHtcbiAgICAgIGNhc2UgJ2hleCc6XG4gICAgICAgIHJldHVybiBoZXhXcml0ZSh0aGlzLCBzdHJpbmcsIG9mZnNldCwgbGVuZ3RoKVxuXG4gICAgICBjYXNlICd1dGY4JzpcbiAgICAgIGNhc2UgJ3V0Zi04JzpcbiAgICAgICAgcmV0dXJuIHV0ZjhXcml0ZSh0aGlzLCBzdHJpbmcsIG9mZnNldCwgbGVuZ3RoKVxuXG4gICAgICBjYXNlICdhc2NpaSc6XG4gICAgICAgIHJldHVybiBhc2NpaVdyaXRlKHRoaXMsIHN0cmluZywgb2Zmc2V0LCBsZW5ndGgpXG5cbiAgICAgIGNhc2UgJ2xhdGluMSc6XG4gICAgICBjYXNlICdiaW5hcnknOlxuICAgICAgICByZXR1cm4gbGF0aW4xV3JpdGUodGhpcywgc3RyaW5nLCBvZmZzZXQsIGxlbmd0aClcblxuICAgICAgY2FzZSAnYmFzZTY0JzpcbiAgICAgICAgLy8gV2FybmluZzogbWF4TGVuZ3RoIG5vdCB0YWtlbiBpbnRvIGFjY291bnQgaW4gYmFzZTY0V3JpdGVcbiAgICAgICAgcmV0dXJuIGJhc2U2NFdyaXRlKHRoaXMsIHN0cmluZywgb2Zmc2V0LCBsZW5ndGgpXG5cbiAgICAgIGNhc2UgJ3VjczInOlxuICAgICAgY2FzZSAndWNzLTInOlxuICAgICAgY2FzZSAndXRmMTZsZSc6XG4gICAgICBjYXNlICd1dGYtMTZsZSc6XG4gICAgICAgIHJldHVybiB1Y3MyV3JpdGUodGhpcywgc3RyaW5nLCBvZmZzZXQsIGxlbmd0aClcblxuICAgICAgZGVmYXVsdDpcbiAgICAgICAgaWYgKGxvd2VyZWRDYXNlKSB0aHJvdyBuZXcgVHlwZUVycm9yKCdVbmtub3duIGVuY29kaW5nOiAnICsgZW5jb2RpbmcpXG4gICAgICAgIGVuY29kaW5nID0gKCcnICsgZW5jb2RpbmcpLnRvTG93ZXJDYXNlKClcbiAgICAgICAgbG93ZXJlZENhc2UgPSB0cnVlXG4gICAgfVxuICB9XG59XG5cbkJ1ZmZlci5wcm90b3R5cGUudG9KU09OID0gZnVuY3Rpb24gdG9KU09OICgpIHtcbiAgcmV0dXJuIHtcbiAgICB0eXBlOiAnQnVmZmVyJyxcbiAgICBkYXRhOiBBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbCh0aGlzLl9hcnIgfHwgdGhpcywgMClcbiAgfVxufVxuXG5mdW5jdGlvbiBiYXNlNjRTbGljZSAoYnVmLCBzdGFydCwgZW5kKSB7XG4gIGlmIChzdGFydCA9PT0gMCAmJiBlbmQgPT09IGJ1Zi5sZW5ndGgpIHtcbiAgICByZXR1cm4gYmFzZTY0LmZyb21CeXRlQXJyYXkoYnVmKVxuICB9IGVsc2Uge1xuICAgIHJldHVybiBiYXNlNjQuZnJvbUJ5dGVBcnJheShidWYuc2xpY2Uoc3RhcnQsIGVuZCkpXG4gIH1cbn1cblxuZnVuY3Rpb24gdXRmOFNsaWNlIChidWYsIHN0YXJ0LCBlbmQpIHtcbiAgZW5kID0gTWF0aC5taW4oYnVmLmxlbmd0aCwgZW5kKVxuICB2YXIgcmVzID0gW11cblxuICB2YXIgaSA9IHN0YXJ0XG4gIHdoaWxlIChpIDwgZW5kKSB7XG4gICAgdmFyIGZpcnN0Qnl0ZSA9IGJ1ZltpXVxuICAgIHZhciBjb2RlUG9pbnQgPSBudWxsXG4gICAgdmFyIGJ5dGVzUGVyU2VxdWVuY2UgPSAoZmlyc3RCeXRlID4gMHhFRikgPyA0XG4gICAgICA6IChmaXJzdEJ5dGUgPiAweERGKSA/IDNcbiAgICAgIDogKGZpcnN0Qnl0ZSA+IDB4QkYpID8gMlxuICAgICAgOiAxXG5cbiAgICBpZiAoaSArIGJ5dGVzUGVyU2VxdWVuY2UgPD0gZW5kKSB7XG4gICAgICB2YXIgc2Vjb25kQnl0ZSwgdGhpcmRCeXRlLCBmb3VydGhCeXRlLCB0ZW1wQ29kZVBvaW50XG5cbiAgICAgIHN3aXRjaCAoYnl0ZXNQZXJTZXF1ZW5jZSkge1xuICAgICAgICBjYXNlIDE6XG4gICAgICAgICAgaWYgKGZpcnN0Qnl0ZSA8IDB4ODApIHtcbiAgICAgICAgICAgIGNvZGVQb2ludCA9IGZpcnN0Qnl0ZVxuICAgICAgICAgIH1cbiAgICAgICAgICBicmVha1xuICAgICAgICBjYXNlIDI6XG4gICAgICAgICAgc2Vjb25kQnl0ZSA9IGJ1ZltpICsgMV1cbiAgICAgICAgICBpZiAoKHNlY29uZEJ5dGUgJiAweEMwKSA9PT0gMHg4MCkge1xuICAgICAgICAgICAgdGVtcENvZGVQb2ludCA9IChmaXJzdEJ5dGUgJiAweDFGKSA8PCAweDYgfCAoc2Vjb25kQnl0ZSAmIDB4M0YpXG4gICAgICAgICAgICBpZiAodGVtcENvZGVQb2ludCA+IDB4N0YpIHtcbiAgICAgICAgICAgICAgY29kZVBvaW50ID0gdGVtcENvZGVQb2ludFxuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgICBicmVha1xuICAgICAgICBjYXNlIDM6XG4gICAgICAgICAgc2Vjb25kQnl0ZSA9IGJ1ZltpICsgMV1cbiAgICAgICAgICB0aGlyZEJ5dGUgPSBidWZbaSArIDJdXG4gICAgICAgICAgaWYgKChzZWNvbmRCeXRlICYgMHhDMCkgPT09IDB4ODAgJiYgKHRoaXJkQnl0ZSAmIDB4QzApID09PSAweDgwKSB7XG4gICAgICAgICAgICB0ZW1wQ29kZVBvaW50ID0gKGZpcnN0Qnl0ZSAmIDB4RikgPDwgMHhDIHwgKHNlY29uZEJ5dGUgJiAweDNGKSA8PCAweDYgfCAodGhpcmRCeXRlICYgMHgzRilcbiAgICAgICAgICAgIGlmICh0ZW1wQ29kZVBvaW50ID4gMHg3RkYgJiYgKHRlbXBDb2RlUG9pbnQgPCAweEQ4MDAgfHwgdGVtcENvZGVQb2ludCA+IDB4REZGRikpIHtcbiAgICAgICAgICAgICAgY29kZVBvaW50ID0gdGVtcENvZGVQb2ludFxuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgICBicmVha1xuICAgICAgICBjYXNlIDQ6XG4gICAgICAgICAgc2Vjb25kQnl0ZSA9IGJ1ZltpICsgMV1cbiAgICAgICAgICB0aGlyZEJ5dGUgPSBidWZbaSArIDJdXG4gICAgICAgICAgZm91cnRoQnl0ZSA9IGJ1ZltpICsgM11cbiAgICAgICAgICBpZiAoKHNlY29uZEJ5dGUgJiAweEMwKSA9PT0gMHg4MCAmJiAodGhpcmRCeXRlICYgMHhDMCkgPT09IDB4ODAgJiYgKGZvdXJ0aEJ5dGUgJiAweEMwKSA9PT0gMHg4MCkge1xuICAgICAgICAgICAgdGVtcENvZGVQb2ludCA9IChmaXJzdEJ5dGUgJiAweEYpIDw8IDB4MTIgfCAoc2Vjb25kQnl0ZSAmIDB4M0YpIDw8IDB4QyB8ICh0aGlyZEJ5dGUgJiAweDNGKSA8PCAweDYgfCAoZm91cnRoQnl0ZSAmIDB4M0YpXG4gICAgICAgICAgICBpZiAodGVtcENvZGVQb2ludCA+IDB4RkZGRiAmJiB0ZW1wQ29kZVBvaW50IDwgMHgxMTAwMDApIHtcbiAgICAgICAgICAgICAgY29kZVBvaW50ID0gdGVtcENvZGVQb2ludFxuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAoY29kZVBvaW50ID09PSBudWxsKSB7XG4gICAgICAvLyB3ZSBkaWQgbm90IGdlbmVyYXRlIGEgdmFsaWQgY29kZVBvaW50IHNvIGluc2VydCBhXG4gICAgICAvLyByZXBsYWNlbWVudCBjaGFyIChVK0ZGRkQpIGFuZCBhZHZhbmNlIG9ubHkgMSBieXRlXG4gICAgICBjb2RlUG9pbnQgPSAweEZGRkRcbiAgICAgIGJ5dGVzUGVyU2VxdWVuY2UgPSAxXG4gICAgfSBlbHNlIGlmIChjb2RlUG9pbnQgPiAweEZGRkYpIHtcbiAgICAgIC8vIGVuY29kZSB0byB1dGYxNiAoc3Vycm9nYXRlIHBhaXIgZGFuY2UpXG4gICAgICBjb2RlUG9pbnQgLT0gMHgxMDAwMFxuICAgICAgcmVzLnB1c2goY29kZVBvaW50ID4+PiAxMCAmIDB4M0ZGIHwgMHhEODAwKVxuICAgICAgY29kZVBvaW50ID0gMHhEQzAwIHwgY29kZVBvaW50ICYgMHgzRkZcbiAgICB9XG5cbiAgICByZXMucHVzaChjb2RlUG9pbnQpXG4gICAgaSArPSBieXRlc1BlclNlcXVlbmNlXG4gIH1cblxuICByZXR1cm4gZGVjb2RlQ29kZVBvaW50c0FycmF5KHJlcylcbn1cblxuLy8gQmFzZWQgb24gaHR0cDovL3N0YWNrb3ZlcmZsb3cuY29tL2EvMjI3NDcyNzIvNjgwNzQyLCB0aGUgYnJvd3NlciB3aXRoXG4vLyB0aGUgbG93ZXN0IGxpbWl0IGlzIENocm9tZSwgd2l0aCAweDEwMDAwIGFyZ3MuXG4vLyBXZSBnbyAxIG1hZ25pdHVkZSBsZXNzLCBmb3Igc2FmZXR5XG52YXIgTUFYX0FSR1VNRU5UU19MRU5HVEggPSAweDEwMDBcblxuZnVuY3Rpb24gZGVjb2RlQ29kZVBvaW50c0FycmF5IChjb2RlUG9pbnRzKSB7XG4gIHZhciBsZW4gPSBjb2RlUG9pbnRzLmxlbmd0aFxuICBpZiAobGVuIDw9IE1BWF9BUkdVTUVOVFNfTEVOR1RIKSB7XG4gICAgcmV0dXJuIFN0cmluZy5mcm9tQ2hhckNvZGUuYXBwbHkoU3RyaW5nLCBjb2RlUG9pbnRzKSAvLyBhdm9pZCBleHRyYSBzbGljZSgpXG4gIH1cblxuICAvLyBEZWNvZGUgaW4gY2h1bmtzIHRvIGF2b2lkIFwiY2FsbCBzdGFjayBzaXplIGV4Y2VlZGVkXCIuXG4gIHZhciByZXMgPSAnJ1xuICB2YXIgaSA9IDBcbiAgd2hpbGUgKGkgPCBsZW4pIHtcbiAgICByZXMgKz0gU3RyaW5nLmZyb21DaGFyQ29kZS5hcHBseShcbiAgICAgIFN0cmluZyxcbiAgICAgIGNvZGVQb2ludHMuc2xpY2UoaSwgaSArPSBNQVhfQVJHVU1FTlRTX0xFTkdUSClcbiAgICApXG4gIH1cbiAgcmV0dXJuIHJlc1xufVxuXG5mdW5jdGlvbiBhc2NpaVNsaWNlIChidWYsIHN0YXJ0LCBlbmQpIHtcbiAgdmFyIHJldCA9ICcnXG4gIGVuZCA9IE1hdGgubWluKGJ1Zi5sZW5ndGgsIGVuZClcblxuICBmb3IgKHZhciBpID0gc3RhcnQ7IGkgPCBlbmQ7ICsraSkge1xuICAgIHJldCArPSBTdHJpbmcuZnJvbUNoYXJDb2RlKGJ1ZltpXSAmIDB4N0YpXG4gIH1cbiAgcmV0dXJuIHJldFxufVxuXG5mdW5jdGlvbiBsYXRpbjFTbGljZSAoYnVmLCBzdGFydCwgZW5kKSB7XG4gIHZhciByZXQgPSAnJ1xuICBlbmQgPSBNYXRoLm1pbihidWYubGVuZ3RoLCBlbmQpXG5cbiAgZm9yICh2YXIgaSA9IHN0YXJ0OyBpIDwgZW5kOyArK2kpIHtcbiAgICByZXQgKz0gU3RyaW5nLmZyb21DaGFyQ29kZShidWZbaV0pXG4gIH1cbiAgcmV0dXJuIHJldFxufVxuXG5mdW5jdGlvbiBoZXhTbGljZSAoYnVmLCBzdGFydCwgZW5kKSB7XG4gIHZhciBsZW4gPSBidWYubGVuZ3RoXG5cbiAgaWYgKCFzdGFydCB8fCBzdGFydCA8IDApIHN0YXJ0ID0gMFxuICBpZiAoIWVuZCB8fCBlbmQgPCAwIHx8IGVuZCA+IGxlbikgZW5kID0gbGVuXG5cbiAgdmFyIG91dCA9ICcnXG4gIGZvciAodmFyIGkgPSBzdGFydDsgaSA8IGVuZDsgKytpKSB7XG4gICAgb3V0ICs9IHRvSGV4KGJ1ZltpXSlcbiAgfVxuICByZXR1cm4gb3V0XG59XG5cbmZ1bmN0aW9uIHV0ZjE2bGVTbGljZSAoYnVmLCBzdGFydCwgZW5kKSB7XG4gIHZhciBieXRlcyA9IGJ1Zi5zbGljZShzdGFydCwgZW5kKVxuICB2YXIgcmVzID0gJydcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBieXRlcy5sZW5ndGg7IGkgKz0gMikge1xuICAgIHJlcyArPSBTdHJpbmcuZnJvbUNoYXJDb2RlKGJ5dGVzW2ldICsgYnl0ZXNbaSArIDFdICogMjU2KVxuICB9XG4gIHJldHVybiByZXNcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5zbGljZSA9IGZ1bmN0aW9uIHNsaWNlIChzdGFydCwgZW5kKSB7XG4gIHZhciBsZW4gPSB0aGlzLmxlbmd0aFxuICBzdGFydCA9IH5+c3RhcnRcbiAgZW5kID0gZW5kID09PSB1bmRlZmluZWQgPyBsZW4gOiB+fmVuZFxuXG4gIGlmIChzdGFydCA8IDApIHtcbiAgICBzdGFydCArPSBsZW5cbiAgICBpZiAoc3RhcnQgPCAwKSBzdGFydCA9IDBcbiAgfSBlbHNlIGlmIChzdGFydCA+IGxlbikge1xuICAgIHN0YXJ0ID0gbGVuXG4gIH1cblxuICBpZiAoZW5kIDwgMCkge1xuICAgIGVuZCArPSBsZW5cbiAgICBpZiAoZW5kIDwgMCkgZW5kID0gMFxuICB9IGVsc2UgaWYgKGVuZCA+IGxlbikge1xuICAgIGVuZCA9IGxlblxuICB9XG5cbiAgaWYgKGVuZCA8IHN0YXJ0KSBlbmQgPSBzdGFydFxuXG4gIHZhciBuZXdCdWZcbiAgaWYgKEJ1ZmZlci5UWVBFRF9BUlJBWV9TVVBQT1JUKSB7XG4gICAgbmV3QnVmID0gdGhpcy5zdWJhcnJheShzdGFydCwgZW5kKVxuICAgIG5ld0J1Zi5fX3Byb3RvX18gPSBCdWZmZXIucHJvdG90eXBlXG4gIH0gZWxzZSB7XG4gICAgdmFyIHNsaWNlTGVuID0gZW5kIC0gc3RhcnRcbiAgICBuZXdCdWYgPSBuZXcgQnVmZmVyKHNsaWNlTGVuLCB1bmRlZmluZWQpXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBzbGljZUxlbjsgKytpKSB7XG4gICAgICBuZXdCdWZbaV0gPSB0aGlzW2kgKyBzdGFydF1cbiAgICB9XG4gIH1cblxuICByZXR1cm4gbmV3QnVmXG59XG5cbi8qXG4gKiBOZWVkIHRvIG1ha2Ugc3VyZSB0aGF0IGJ1ZmZlciBpc24ndCB0cnlpbmcgdG8gd3JpdGUgb3V0IG9mIGJvdW5kcy5cbiAqL1xuZnVuY3Rpb24gY2hlY2tPZmZzZXQgKG9mZnNldCwgZXh0LCBsZW5ndGgpIHtcbiAgaWYgKChvZmZzZXQgJSAxKSAhPT0gMCB8fCBvZmZzZXQgPCAwKSB0aHJvdyBuZXcgUmFuZ2VFcnJvcignb2Zmc2V0IGlzIG5vdCB1aW50JylcbiAgaWYgKG9mZnNldCArIGV4dCA+IGxlbmd0aCkgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ1RyeWluZyB0byBhY2Nlc3MgYmV5b25kIGJ1ZmZlciBsZW5ndGgnKVxufVxuXG5CdWZmZXIucHJvdG90eXBlLnJlYWRVSW50TEUgPSBmdW5jdGlvbiByZWFkVUludExFIChvZmZzZXQsIGJ5dGVMZW5ndGgsIG5vQXNzZXJ0KSB7XG4gIG9mZnNldCA9IG9mZnNldCB8IDBcbiAgYnl0ZUxlbmd0aCA9IGJ5dGVMZW5ndGggfCAwXG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrT2Zmc2V0KG9mZnNldCwgYnl0ZUxlbmd0aCwgdGhpcy5sZW5ndGgpXG5cbiAgdmFyIHZhbCA9IHRoaXNbb2Zmc2V0XVxuICB2YXIgbXVsID0gMVxuICB2YXIgaSA9IDBcbiAgd2hpbGUgKCsraSA8IGJ5dGVMZW5ndGggJiYgKG11bCAqPSAweDEwMCkpIHtcbiAgICB2YWwgKz0gdGhpc1tvZmZzZXQgKyBpXSAqIG11bFxuICB9XG5cbiAgcmV0dXJuIHZhbFxufVxuXG5CdWZmZXIucHJvdG90eXBlLnJlYWRVSW50QkUgPSBmdW5jdGlvbiByZWFkVUludEJFIChvZmZzZXQsIGJ5dGVMZW5ndGgsIG5vQXNzZXJ0KSB7XG4gIG9mZnNldCA9IG9mZnNldCB8IDBcbiAgYnl0ZUxlbmd0aCA9IGJ5dGVMZW5ndGggfCAwXG4gIGlmICghbm9Bc3NlcnQpIHtcbiAgICBjaGVja09mZnNldChvZmZzZXQsIGJ5dGVMZW5ndGgsIHRoaXMubGVuZ3RoKVxuICB9XG5cbiAgdmFyIHZhbCA9IHRoaXNbb2Zmc2V0ICsgLS1ieXRlTGVuZ3RoXVxuICB2YXIgbXVsID0gMVxuICB3aGlsZSAoYnl0ZUxlbmd0aCA+IDAgJiYgKG11bCAqPSAweDEwMCkpIHtcbiAgICB2YWwgKz0gdGhpc1tvZmZzZXQgKyAtLWJ5dGVMZW5ndGhdICogbXVsXG4gIH1cblxuICByZXR1cm4gdmFsXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZFVJbnQ4ID0gZnVuY3Rpb24gcmVhZFVJbnQ4IChvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrT2Zmc2V0KG9mZnNldCwgMSwgdGhpcy5sZW5ndGgpXG4gIHJldHVybiB0aGlzW29mZnNldF1cbn1cblxuQnVmZmVyLnByb3RvdHlwZS5yZWFkVUludDE2TEUgPSBmdW5jdGlvbiByZWFkVUludDE2TEUgKG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tPZmZzZXQob2Zmc2V0LCAyLCB0aGlzLmxlbmd0aClcbiAgcmV0dXJuIHRoaXNbb2Zmc2V0XSB8ICh0aGlzW29mZnNldCArIDFdIDw8IDgpXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZFVJbnQxNkJFID0gZnVuY3Rpb24gcmVhZFVJbnQxNkJFIChvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrT2Zmc2V0KG9mZnNldCwgMiwgdGhpcy5sZW5ndGgpXG4gIHJldHVybiAodGhpc1tvZmZzZXRdIDw8IDgpIHwgdGhpc1tvZmZzZXQgKyAxXVxufVxuXG5CdWZmZXIucHJvdG90eXBlLnJlYWRVSW50MzJMRSA9IGZ1bmN0aW9uIHJlYWRVSW50MzJMRSAob2Zmc2V0LCBub0Fzc2VydCkge1xuICBpZiAoIW5vQXNzZXJ0KSBjaGVja09mZnNldChvZmZzZXQsIDQsIHRoaXMubGVuZ3RoKVxuXG4gIHJldHVybiAoKHRoaXNbb2Zmc2V0XSkgfFxuICAgICAgKHRoaXNbb2Zmc2V0ICsgMV0gPDwgOCkgfFxuICAgICAgKHRoaXNbb2Zmc2V0ICsgMl0gPDwgMTYpKSArXG4gICAgICAodGhpc1tvZmZzZXQgKyAzXSAqIDB4MTAwMDAwMClcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5yZWFkVUludDMyQkUgPSBmdW5jdGlvbiByZWFkVUludDMyQkUgKG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tPZmZzZXQob2Zmc2V0LCA0LCB0aGlzLmxlbmd0aClcblxuICByZXR1cm4gKHRoaXNbb2Zmc2V0XSAqIDB4MTAwMDAwMCkgK1xuICAgICgodGhpc1tvZmZzZXQgKyAxXSA8PCAxNikgfFxuICAgICh0aGlzW29mZnNldCArIDJdIDw8IDgpIHxcbiAgICB0aGlzW29mZnNldCArIDNdKVxufVxuXG5CdWZmZXIucHJvdG90eXBlLnJlYWRJbnRMRSA9IGZ1bmN0aW9uIHJlYWRJbnRMRSAob2Zmc2V0LCBieXRlTGVuZ3RoLCBub0Fzc2VydCkge1xuICBvZmZzZXQgPSBvZmZzZXQgfCAwXG4gIGJ5dGVMZW5ndGggPSBieXRlTGVuZ3RoIHwgMFxuICBpZiAoIW5vQXNzZXJ0KSBjaGVja09mZnNldChvZmZzZXQsIGJ5dGVMZW5ndGgsIHRoaXMubGVuZ3RoKVxuXG4gIHZhciB2YWwgPSB0aGlzW29mZnNldF1cbiAgdmFyIG11bCA9IDFcbiAgdmFyIGkgPSAwXG4gIHdoaWxlICgrK2kgPCBieXRlTGVuZ3RoICYmIChtdWwgKj0gMHgxMDApKSB7XG4gICAgdmFsICs9IHRoaXNbb2Zmc2V0ICsgaV0gKiBtdWxcbiAgfVxuICBtdWwgKj0gMHg4MFxuXG4gIGlmICh2YWwgPj0gbXVsKSB2YWwgLT0gTWF0aC5wb3coMiwgOCAqIGJ5dGVMZW5ndGgpXG5cbiAgcmV0dXJuIHZhbFxufVxuXG5CdWZmZXIucHJvdG90eXBlLnJlYWRJbnRCRSA9IGZ1bmN0aW9uIHJlYWRJbnRCRSAob2Zmc2V0LCBieXRlTGVuZ3RoLCBub0Fzc2VydCkge1xuICBvZmZzZXQgPSBvZmZzZXQgfCAwXG4gIGJ5dGVMZW5ndGggPSBieXRlTGVuZ3RoIHwgMFxuICBpZiAoIW5vQXNzZXJ0KSBjaGVja09mZnNldChvZmZzZXQsIGJ5dGVMZW5ndGgsIHRoaXMubGVuZ3RoKVxuXG4gIHZhciBpID0gYnl0ZUxlbmd0aFxuICB2YXIgbXVsID0gMVxuICB2YXIgdmFsID0gdGhpc1tvZmZzZXQgKyAtLWldXG4gIHdoaWxlIChpID4gMCAmJiAobXVsICo9IDB4MTAwKSkge1xuICAgIHZhbCArPSB0aGlzW29mZnNldCArIC0taV0gKiBtdWxcbiAgfVxuICBtdWwgKj0gMHg4MFxuXG4gIGlmICh2YWwgPj0gbXVsKSB2YWwgLT0gTWF0aC5wb3coMiwgOCAqIGJ5dGVMZW5ndGgpXG5cbiAgcmV0dXJuIHZhbFxufVxuXG5CdWZmZXIucHJvdG90eXBlLnJlYWRJbnQ4ID0gZnVuY3Rpb24gcmVhZEludDggKG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tPZmZzZXQob2Zmc2V0LCAxLCB0aGlzLmxlbmd0aClcbiAgaWYgKCEodGhpc1tvZmZzZXRdICYgMHg4MCkpIHJldHVybiAodGhpc1tvZmZzZXRdKVxuICByZXR1cm4gKCgweGZmIC0gdGhpc1tvZmZzZXRdICsgMSkgKiAtMSlcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5yZWFkSW50MTZMRSA9IGZ1bmN0aW9uIHJlYWRJbnQxNkxFIChvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrT2Zmc2V0KG9mZnNldCwgMiwgdGhpcy5sZW5ndGgpXG4gIHZhciB2YWwgPSB0aGlzW29mZnNldF0gfCAodGhpc1tvZmZzZXQgKyAxXSA8PCA4KVxuICByZXR1cm4gKHZhbCAmIDB4ODAwMCkgPyB2YWwgfCAweEZGRkYwMDAwIDogdmFsXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZEludDE2QkUgPSBmdW5jdGlvbiByZWFkSW50MTZCRSAob2Zmc2V0LCBub0Fzc2VydCkge1xuICBpZiAoIW5vQXNzZXJ0KSBjaGVja09mZnNldChvZmZzZXQsIDIsIHRoaXMubGVuZ3RoKVxuICB2YXIgdmFsID0gdGhpc1tvZmZzZXQgKyAxXSB8ICh0aGlzW29mZnNldF0gPDwgOClcbiAgcmV0dXJuICh2YWwgJiAweDgwMDApID8gdmFsIHwgMHhGRkZGMDAwMCA6IHZhbFxufVxuXG5CdWZmZXIucHJvdG90eXBlLnJlYWRJbnQzMkxFID0gZnVuY3Rpb24gcmVhZEludDMyTEUgKG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tPZmZzZXQob2Zmc2V0LCA0LCB0aGlzLmxlbmd0aClcblxuICByZXR1cm4gKHRoaXNbb2Zmc2V0XSkgfFxuICAgICh0aGlzW29mZnNldCArIDFdIDw8IDgpIHxcbiAgICAodGhpc1tvZmZzZXQgKyAyXSA8PCAxNikgfFxuICAgICh0aGlzW29mZnNldCArIDNdIDw8IDI0KVxufVxuXG5CdWZmZXIucHJvdG90eXBlLnJlYWRJbnQzMkJFID0gZnVuY3Rpb24gcmVhZEludDMyQkUgKG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tPZmZzZXQob2Zmc2V0LCA0LCB0aGlzLmxlbmd0aClcblxuICByZXR1cm4gKHRoaXNbb2Zmc2V0XSA8PCAyNCkgfFxuICAgICh0aGlzW29mZnNldCArIDFdIDw8IDE2KSB8XG4gICAgKHRoaXNbb2Zmc2V0ICsgMl0gPDwgOCkgfFxuICAgICh0aGlzW29mZnNldCArIDNdKVxufVxuXG5CdWZmZXIucHJvdG90eXBlLnJlYWRGbG9hdExFID0gZnVuY3Rpb24gcmVhZEZsb2F0TEUgKG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tPZmZzZXQob2Zmc2V0LCA0LCB0aGlzLmxlbmd0aClcbiAgcmV0dXJuIGllZWU3NTQucmVhZCh0aGlzLCBvZmZzZXQsIHRydWUsIDIzLCA0KVxufVxuXG5CdWZmZXIucHJvdG90eXBlLnJlYWRGbG9hdEJFID0gZnVuY3Rpb24gcmVhZEZsb2F0QkUgKG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tPZmZzZXQob2Zmc2V0LCA0LCB0aGlzLmxlbmd0aClcbiAgcmV0dXJuIGllZWU3NTQucmVhZCh0aGlzLCBvZmZzZXQsIGZhbHNlLCAyMywgNClcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5yZWFkRG91YmxlTEUgPSBmdW5jdGlvbiByZWFkRG91YmxlTEUgKG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tPZmZzZXQob2Zmc2V0LCA4LCB0aGlzLmxlbmd0aClcbiAgcmV0dXJuIGllZWU3NTQucmVhZCh0aGlzLCBvZmZzZXQsIHRydWUsIDUyLCA4KVxufVxuXG5CdWZmZXIucHJvdG90eXBlLnJlYWREb3VibGVCRSA9IGZ1bmN0aW9uIHJlYWREb3VibGVCRSAob2Zmc2V0LCBub0Fzc2VydCkge1xuICBpZiAoIW5vQXNzZXJ0KSBjaGVja09mZnNldChvZmZzZXQsIDgsIHRoaXMubGVuZ3RoKVxuICByZXR1cm4gaWVlZTc1NC5yZWFkKHRoaXMsIG9mZnNldCwgZmFsc2UsIDUyLCA4KVxufVxuXG5mdW5jdGlvbiBjaGVja0ludCAoYnVmLCB2YWx1ZSwgb2Zmc2V0LCBleHQsIG1heCwgbWluKSB7XG4gIGlmICghaW50ZXJuYWxJc0J1ZmZlcihidWYpKSB0aHJvdyBuZXcgVHlwZUVycm9yKCdcImJ1ZmZlclwiIGFyZ3VtZW50IG11c3QgYmUgYSBCdWZmZXIgaW5zdGFuY2UnKVxuICBpZiAodmFsdWUgPiBtYXggfHwgdmFsdWUgPCBtaW4pIHRocm93IG5ldyBSYW5nZUVycm9yKCdcInZhbHVlXCIgYXJndW1lbnQgaXMgb3V0IG9mIGJvdW5kcycpXG4gIGlmIChvZmZzZXQgKyBleHQgPiBidWYubGVuZ3RoKSB0aHJvdyBuZXcgUmFuZ2VFcnJvcignSW5kZXggb3V0IG9mIHJhbmdlJylcbn1cblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZVVJbnRMRSA9IGZ1bmN0aW9uIHdyaXRlVUludExFICh2YWx1ZSwgb2Zmc2V0LCBieXRlTGVuZ3RoLCBub0Fzc2VydCkge1xuICB2YWx1ZSA9ICt2YWx1ZVxuICBvZmZzZXQgPSBvZmZzZXQgfCAwXG4gIGJ5dGVMZW5ndGggPSBieXRlTGVuZ3RoIHwgMFxuICBpZiAoIW5vQXNzZXJ0KSB7XG4gICAgdmFyIG1heEJ5dGVzID0gTWF0aC5wb3coMiwgOCAqIGJ5dGVMZW5ndGgpIC0gMVxuICAgIGNoZWNrSW50KHRoaXMsIHZhbHVlLCBvZmZzZXQsIGJ5dGVMZW5ndGgsIG1heEJ5dGVzLCAwKVxuICB9XG5cbiAgdmFyIG11bCA9IDFcbiAgdmFyIGkgPSAwXG4gIHRoaXNbb2Zmc2V0XSA9IHZhbHVlICYgMHhGRlxuICB3aGlsZSAoKytpIDwgYnl0ZUxlbmd0aCAmJiAobXVsICo9IDB4MTAwKSkge1xuICAgIHRoaXNbb2Zmc2V0ICsgaV0gPSAodmFsdWUgLyBtdWwpICYgMHhGRlxuICB9XG5cbiAgcmV0dXJuIG9mZnNldCArIGJ5dGVMZW5ndGhcbn1cblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZVVJbnRCRSA9IGZ1bmN0aW9uIHdyaXRlVUludEJFICh2YWx1ZSwgb2Zmc2V0LCBieXRlTGVuZ3RoLCBub0Fzc2VydCkge1xuICB2YWx1ZSA9ICt2YWx1ZVxuICBvZmZzZXQgPSBvZmZzZXQgfCAwXG4gIGJ5dGVMZW5ndGggPSBieXRlTGVuZ3RoIHwgMFxuICBpZiAoIW5vQXNzZXJ0KSB7XG4gICAgdmFyIG1heEJ5dGVzID0gTWF0aC5wb3coMiwgOCAqIGJ5dGVMZW5ndGgpIC0gMVxuICAgIGNoZWNrSW50KHRoaXMsIHZhbHVlLCBvZmZzZXQsIGJ5dGVMZW5ndGgsIG1heEJ5dGVzLCAwKVxuICB9XG5cbiAgdmFyIGkgPSBieXRlTGVuZ3RoIC0gMVxuICB2YXIgbXVsID0gMVxuICB0aGlzW29mZnNldCArIGldID0gdmFsdWUgJiAweEZGXG4gIHdoaWxlICgtLWkgPj0gMCAmJiAobXVsICo9IDB4MTAwKSkge1xuICAgIHRoaXNbb2Zmc2V0ICsgaV0gPSAodmFsdWUgLyBtdWwpICYgMHhGRlxuICB9XG5cbiAgcmV0dXJuIG9mZnNldCArIGJ5dGVMZW5ndGhcbn1cblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZVVJbnQ4ID0gZnVuY3Rpb24gd3JpdGVVSW50OCAodmFsdWUsIG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgdmFsdWUgPSArdmFsdWVcbiAgb2Zmc2V0ID0gb2Zmc2V0IHwgMFxuICBpZiAoIW5vQXNzZXJ0KSBjaGVja0ludCh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCAxLCAweGZmLCAwKVxuICBpZiAoIUJ1ZmZlci5UWVBFRF9BUlJBWV9TVVBQT1JUKSB2YWx1ZSA9IE1hdGguZmxvb3IodmFsdWUpXG4gIHRoaXNbb2Zmc2V0XSA9ICh2YWx1ZSAmIDB4ZmYpXG4gIHJldHVybiBvZmZzZXQgKyAxXG59XG5cbmZ1bmN0aW9uIG9iamVjdFdyaXRlVUludDE2IChidWYsIHZhbHVlLCBvZmZzZXQsIGxpdHRsZUVuZGlhbikge1xuICBpZiAodmFsdWUgPCAwKSB2YWx1ZSA9IDB4ZmZmZiArIHZhbHVlICsgMVxuICBmb3IgKHZhciBpID0gMCwgaiA9IE1hdGgubWluKGJ1Zi5sZW5ndGggLSBvZmZzZXQsIDIpOyBpIDwgajsgKytpKSB7XG4gICAgYnVmW29mZnNldCArIGldID0gKHZhbHVlICYgKDB4ZmYgPDwgKDggKiAobGl0dGxlRW5kaWFuID8gaSA6IDEgLSBpKSkpKSA+Pj5cbiAgICAgIChsaXR0bGVFbmRpYW4gPyBpIDogMSAtIGkpICogOFxuICB9XG59XG5cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVVSW50MTZMRSA9IGZ1bmN0aW9uIHdyaXRlVUludDE2TEUgKHZhbHVlLCBvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIHZhbHVlID0gK3ZhbHVlXG4gIG9mZnNldCA9IG9mZnNldCB8IDBcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tJbnQodGhpcywgdmFsdWUsIG9mZnNldCwgMiwgMHhmZmZmLCAwKVxuICBpZiAoQnVmZmVyLlRZUEVEX0FSUkFZX1NVUFBPUlQpIHtcbiAgICB0aGlzW29mZnNldF0gPSAodmFsdWUgJiAweGZmKVxuICAgIHRoaXNbb2Zmc2V0ICsgMV0gPSAodmFsdWUgPj4+IDgpXG4gIH0gZWxzZSB7XG4gICAgb2JqZWN0V3JpdGVVSW50MTYodGhpcywgdmFsdWUsIG9mZnNldCwgdHJ1ZSlcbiAgfVxuICByZXR1cm4gb2Zmc2V0ICsgMlxufVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlVUludDE2QkUgPSBmdW5jdGlvbiB3cml0ZVVJbnQxNkJFICh2YWx1ZSwgb2Zmc2V0LCBub0Fzc2VydCkge1xuICB2YWx1ZSA9ICt2YWx1ZVxuICBvZmZzZXQgPSBvZmZzZXQgfCAwXG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrSW50KHRoaXMsIHZhbHVlLCBvZmZzZXQsIDIsIDB4ZmZmZiwgMClcbiAgaWYgKEJ1ZmZlci5UWVBFRF9BUlJBWV9TVVBQT1JUKSB7XG4gICAgdGhpc1tvZmZzZXRdID0gKHZhbHVlID4+PiA4KVxuICAgIHRoaXNbb2Zmc2V0ICsgMV0gPSAodmFsdWUgJiAweGZmKVxuICB9IGVsc2Uge1xuICAgIG9iamVjdFdyaXRlVUludDE2KHRoaXMsIHZhbHVlLCBvZmZzZXQsIGZhbHNlKVxuICB9XG4gIHJldHVybiBvZmZzZXQgKyAyXG59XG5cbmZ1bmN0aW9uIG9iamVjdFdyaXRlVUludDMyIChidWYsIHZhbHVlLCBvZmZzZXQsIGxpdHRsZUVuZGlhbikge1xuICBpZiAodmFsdWUgPCAwKSB2YWx1ZSA9IDB4ZmZmZmZmZmYgKyB2YWx1ZSArIDFcbiAgZm9yICh2YXIgaSA9IDAsIGogPSBNYXRoLm1pbihidWYubGVuZ3RoIC0gb2Zmc2V0LCA0KTsgaSA8IGo7ICsraSkge1xuICAgIGJ1ZltvZmZzZXQgKyBpXSA9ICh2YWx1ZSA+Pj4gKGxpdHRsZUVuZGlhbiA/IGkgOiAzIC0gaSkgKiA4KSAmIDB4ZmZcbiAgfVxufVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlVUludDMyTEUgPSBmdW5jdGlvbiB3cml0ZVVJbnQzMkxFICh2YWx1ZSwgb2Zmc2V0LCBub0Fzc2VydCkge1xuICB2YWx1ZSA9ICt2YWx1ZVxuICBvZmZzZXQgPSBvZmZzZXQgfCAwXG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrSW50KHRoaXMsIHZhbHVlLCBvZmZzZXQsIDQsIDB4ZmZmZmZmZmYsIDApXG4gIGlmIChCdWZmZXIuVFlQRURfQVJSQVlfU1VQUE9SVCkge1xuICAgIHRoaXNbb2Zmc2V0ICsgM10gPSAodmFsdWUgPj4+IDI0KVxuICAgIHRoaXNbb2Zmc2V0ICsgMl0gPSAodmFsdWUgPj4+IDE2KVxuICAgIHRoaXNbb2Zmc2V0ICsgMV0gPSAodmFsdWUgPj4+IDgpXG4gICAgdGhpc1tvZmZzZXRdID0gKHZhbHVlICYgMHhmZilcbiAgfSBlbHNlIHtcbiAgICBvYmplY3RXcml0ZVVJbnQzMih0aGlzLCB2YWx1ZSwgb2Zmc2V0LCB0cnVlKVxuICB9XG4gIHJldHVybiBvZmZzZXQgKyA0XG59XG5cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVVSW50MzJCRSA9IGZ1bmN0aW9uIHdyaXRlVUludDMyQkUgKHZhbHVlLCBvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIHZhbHVlID0gK3ZhbHVlXG4gIG9mZnNldCA9IG9mZnNldCB8IDBcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tJbnQodGhpcywgdmFsdWUsIG9mZnNldCwgNCwgMHhmZmZmZmZmZiwgMClcbiAgaWYgKEJ1ZmZlci5UWVBFRF9BUlJBWV9TVVBQT1JUKSB7XG4gICAgdGhpc1tvZmZzZXRdID0gKHZhbHVlID4+PiAyNClcbiAgICB0aGlzW29mZnNldCArIDFdID0gKHZhbHVlID4+PiAxNilcbiAgICB0aGlzW29mZnNldCArIDJdID0gKHZhbHVlID4+PiA4KVxuICAgIHRoaXNbb2Zmc2V0ICsgM10gPSAodmFsdWUgJiAweGZmKVxuICB9IGVsc2Uge1xuICAgIG9iamVjdFdyaXRlVUludDMyKHRoaXMsIHZhbHVlLCBvZmZzZXQsIGZhbHNlKVxuICB9XG4gIHJldHVybiBvZmZzZXQgKyA0XG59XG5cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVJbnRMRSA9IGZ1bmN0aW9uIHdyaXRlSW50TEUgKHZhbHVlLCBvZmZzZXQsIGJ5dGVMZW5ndGgsIG5vQXNzZXJ0KSB7XG4gIHZhbHVlID0gK3ZhbHVlXG4gIG9mZnNldCA9IG9mZnNldCB8IDBcbiAgaWYgKCFub0Fzc2VydCkge1xuICAgIHZhciBsaW1pdCA9IE1hdGgucG93KDIsIDggKiBieXRlTGVuZ3RoIC0gMSlcblxuICAgIGNoZWNrSW50KHRoaXMsIHZhbHVlLCBvZmZzZXQsIGJ5dGVMZW5ndGgsIGxpbWl0IC0gMSwgLWxpbWl0KVxuICB9XG5cbiAgdmFyIGkgPSAwXG4gIHZhciBtdWwgPSAxXG4gIHZhciBzdWIgPSAwXG4gIHRoaXNbb2Zmc2V0XSA9IHZhbHVlICYgMHhGRlxuICB3aGlsZSAoKytpIDwgYnl0ZUxlbmd0aCAmJiAobXVsICo9IDB4MTAwKSkge1xuICAgIGlmICh2YWx1ZSA8IDAgJiYgc3ViID09PSAwICYmIHRoaXNbb2Zmc2V0ICsgaSAtIDFdICE9PSAwKSB7XG4gICAgICBzdWIgPSAxXG4gICAgfVxuICAgIHRoaXNbb2Zmc2V0ICsgaV0gPSAoKHZhbHVlIC8gbXVsKSA+PiAwKSAtIHN1YiAmIDB4RkZcbiAgfVxuXG4gIHJldHVybiBvZmZzZXQgKyBieXRlTGVuZ3RoXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVJbnRCRSA9IGZ1bmN0aW9uIHdyaXRlSW50QkUgKHZhbHVlLCBvZmZzZXQsIGJ5dGVMZW5ndGgsIG5vQXNzZXJ0KSB7XG4gIHZhbHVlID0gK3ZhbHVlXG4gIG9mZnNldCA9IG9mZnNldCB8IDBcbiAgaWYgKCFub0Fzc2VydCkge1xuICAgIHZhciBsaW1pdCA9IE1hdGgucG93KDIsIDggKiBieXRlTGVuZ3RoIC0gMSlcblxuICAgIGNoZWNrSW50KHRoaXMsIHZhbHVlLCBvZmZzZXQsIGJ5dGVMZW5ndGgsIGxpbWl0IC0gMSwgLWxpbWl0KVxuICB9XG5cbiAgdmFyIGkgPSBieXRlTGVuZ3RoIC0gMVxuICB2YXIgbXVsID0gMVxuICB2YXIgc3ViID0gMFxuICB0aGlzW29mZnNldCArIGldID0gdmFsdWUgJiAweEZGXG4gIHdoaWxlICgtLWkgPj0gMCAmJiAobXVsICo9IDB4MTAwKSkge1xuICAgIGlmICh2YWx1ZSA8IDAgJiYgc3ViID09PSAwICYmIHRoaXNbb2Zmc2V0ICsgaSArIDFdICE9PSAwKSB7XG4gICAgICBzdWIgPSAxXG4gICAgfVxuICAgIHRoaXNbb2Zmc2V0ICsgaV0gPSAoKHZhbHVlIC8gbXVsKSA+PiAwKSAtIHN1YiAmIDB4RkZcbiAgfVxuXG4gIHJldHVybiBvZmZzZXQgKyBieXRlTGVuZ3RoXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVJbnQ4ID0gZnVuY3Rpb24gd3JpdGVJbnQ4ICh2YWx1ZSwgb2Zmc2V0LCBub0Fzc2VydCkge1xuICB2YWx1ZSA9ICt2YWx1ZVxuICBvZmZzZXQgPSBvZmZzZXQgfCAwXG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrSW50KHRoaXMsIHZhbHVlLCBvZmZzZXQsIDEsIDB4N2YsIC0weDgwKVxuICBpZiAoIUJ1ZmZlci5UWVBFRF9BUlJBWV9TVVBQT1JUKSB2YWx1ZSA9IE1hdGguZmxvb3IodmFsdWUpXG4gIGlmICh2YWx1ZSA8IDApIHZhbHVlID0gMHhmZiArIHZhbHVlICsgMVxuICB0aGlzW29mZnNldF0gPSAodmFsdWUgJiAweGZmKVxuICByZXR1cm4gb2Zmc2V0ICsgMVxufVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlSW50MTZMRSA9IGZ1bmN0aW9uIHdyaXRlSW50MTZMRSAodmFsdWUsIG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgdmFsdWUgPSArdmFsdWVcbiAgb2Zmc2V0ID0gb2Zmc2V0IHwgMFxuICBpZiAoIW5vQXNzZXJ0KSBjaGVja0ludCh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCAyLCAweDdmZmYsIC0weDgwMDApXG4gIGlmIChCdWZmZXIuVFlQRURfQVJSQVlfU1VQUE9SVCkge1xuICAgIHRoaXNbb2Zmc2V0XSA9ICh2YWx1ZSAmIDB4ZmYpXG4gICAgdGhpc1tvZmZzZXQgKyAxXSA9ICh2YWx1ZSA+Pj4gOClcbiAgfSBlbHNlIHtcbiAgICBvYmplY3RXcml0ZVVJbnQxNih0aGlzLCB2YWx1ZSwgb2Zmc2V0LCB0cnVlKVxuICB9XG4gIHJldHVybiBvZmZzZXQgKyAyXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVJbnQxNkJFID0gZnVuY3Rpb24gd3JpdGVJbnQxNkJFICh2YWx1ZSwgb2Zmc2V0LCBub0Fzc2VydCkge1xuICB2YWx1ZSA9ICt2YWx1ZVxuICBvZmZzZXQgPSBvZmZzZXQgfCAwXG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrSW50KHRoaXMsIHZhbHVlLCBvZmZzZXQsIDIsIDB4N2ZmZiwgLTB4ODAwMClcbiAgaWYgKEJ1ZmZlci5UWVBFRF9BUlJBWV9TVVBQT1JUKSB7XG4gICAgdGhpc1tvZmZzZXRdID0gKHZhbHVlID4+PiA4KVxuICAgIHRoaXNbb2Zmc2V0ICsgMV0gPSAodmFsdWUgJiAweGZmKVxuICB9IGVsc2Uge1xuICAgIG9iamVjdFdyaXRlVUludDE2KHRoaXMsIHZhbHVlLCBvZmZzZXQsIGZhbHNlKVxuICB9XG4gIHJldHVybiBvZmZzZXQgKyAyXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVJbnQzMkxFID0gZnVuY3Rpb24gd3JpdGVJbnQzMkxFICh2YWx1ZSwgb2Zmc2V0LCBub0Fzc2VydCkge1xuICB2YWx1ZSA9ICt2YWx1ZVxuICBvZmZzZXQgPSBvZmZzZXQgfCAwXG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrSW50KHRoaXMsIHZhbHVlLCBvZmZzZXQsIDQsIDB4N2ZmZmZmZmYsIC0weDgwMDAwMDAwKVxuICBpZiAoQnVmZmVyLlRZUEVEX0FSUkFZX1NVUFBPUlQpIHtcbiAgICB0aGlzW29mZnNldF0gPSAodmFsdWUgJiAweGZmKVxuICAgIHRoaXNbb2Zmc2V0ICsgMV0gPSAodmFsdWUgPj4+IDgpXG4gICAgdGhpc1tvZmZzZXQgKyAyXSA9ICh2YWx1ZSA+Pj4gMTYpXG4gICAgdGhpc1tvZmZzZXQgKyAzXSA9ICh2YWx1ZSA+Pj4gMjQpXG4gIH0gZWxzZSB7XG4gICAgb2JqZWN0V3JpdGVVSW50MzIodGhpcywgdmFsdWUsIG9mZnNldCwgdHJ1ZSlcbiAgfVxuICByZXR1cm4gb2Zmc2V0ICsgNFxufVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlSW50MzJCRSA9IGZ1bmN0aW9uIHdyaXRlSW50MzJCRSAodmFsdWUsIG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgdmFsdWUgPSArdmFsdWVcbiAgb2Zmc2V0ID0gb2Zmc2V0IHwgMFxuICBpZiAoIW5vQXNzZXJ0KSBjaGVja0ludCh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCA0LCAweDdmZmZmZmZmLCAtMHg4MDAwMDAwMClcbiAgaWYgKHZhbHVlIDwgMCkgdmFsdWUgPSAweGZmZmZmZmZmICsgdmFsdWUgKyAxXG4gIGlmIChCdWZmZXIuVFlQRURfQVJSQVlfU1VQUE9SVCkge1xuICAgIHRoaXNbb2Zmc2V0XSA9ICh2YWx1ZSA+Pj4gMjQpXG4gICAgdGhpc1tvZmZzZXQgKyAxXSA9ICh2YWx1ZSA+Pj4gMTYpXG4gICAgdGhpc1tvZmZzZXQgKyAyXSA9ICh2YWx1ZSA+Pj4gOClcbiAgICB0aGlzW29mZnNldCArIDNdID0gKHZhbHVlICYgMHhmZilcbiAgfSBlbHNlIHtcbiAgICBvYmplY3RXcml0ZVVJbnQzMih0aGlzLCB2YWx1ZSwgb2Zmc2V0LCBmYWxzZSlcbiAgfVxuICByZXR1cm4gb2Zmc2V0ICsgNFxufVxuXG5mdW5jdGlvbiBjaGVja0lFRUU3NTQgKGJ1ZiwgdmFsdWUsIG9mZnNldCwgZXh0LCBtYXgsIG1pbikge1xuICBpZiAob2Zmc2V0ICsgZXh0ID4gYnVmLmxlbmd0aCkgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ0luZGV4IG91dCBvZiByYW5nZScpXG4gIGlmIChvZmZzZXQgPCAwKSB0aHJvdyBuZXcgUmFuZ2VFcnJvcignSW5kZXggb3V0IG9mIHJhbmdlJylcbn1cblxuZnVuY3Rpb24gd3JpdGVGbG9hdCAoYnVmLCB2YWx1ZSwgb2Zmc2V0LCBsaXR0bGVFbmRpYW4sIG5vQXNzZXJ0KSB7XG4gIGlmICghbm9Bc3NlcnQpIHtcbiAgICBjaGVja0lFRUU3NTQoYnVmLCB2YWx1ZSwgb2Zmc2V0LCA0LCAzLjQwMjgyMzQ2NjM4NTI4ODZlKzM4LCAtMy40MDI4MjM0NjYzODUyODg2ZSszOClcbiAgfVxuICBpZWVlNzU0LndyaXRlKGJ1ZiwgdmFsdWUsIG9mZnNldCwgbGl0dGxlRW5kaWFuLCAyMywgNClcbiAgcmV0dXJuIG9mZnNldCArIDRcbn1cblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZUZsb2F0TEUgPSBmdW5jdGlvbiB3cml0ZUZsb2F0TEUgKHZhbHVlLCBvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIHJldHVybiB3cml0ZUZsb2F0KHRoaXMsIHZhbHVlLCBvZmZzZXQsIHRydWUsIG5vQXNzZXJ0KVxufVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlRmxvYXRCRSA9IGZ1bmN0aW9uIHdyaXRlRmxvYXRCRSAodmFsdWUsIG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgcmV0dXJuIHdyaXRlRmxvYXQodGhpcywgdmFsdWUsIG9mZnNldCwgZmFsc2UsIG5vQXNzZXJ0KVxufVxuXG5mdW5jdGlvbiB3cml0ZURvdWJsZSAoYnVmLCB2YWx1ZSwgb2Zmc2V0LCBsaXR0bGVFbmRpYW4sIG5vQXNzZXJ0KSB7XG4gIGlmICghbm9Bc3NlcnQpIHtcbiAgICBjaGVja0lFRUU3NTQoYnVmLCB2YWx1ZSwgb2Zmc2V0LCA4LCAxLjc5NzY5MzEzNDg2MjMxNTdFKzMwOCwgLTEuNzk3NjkzMTM0ODYyMzE1N0UrMzA4KVxuICB9XG4gIGllZWU3NTQud3JpdGUoYnVmLCB2YWx1ZSwgb2Zmc2V0LCBsaXR0bGVFbmRpYW4sIDUyLCA4KVxuICByZXR1cm4gb2Zmc2V0ICsgOFxufVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlRG91YmxlTEUgPSBmdW5jdGlvbiB3cml0ZURvdWJsZUxFICh2YWx1ZSwgb2Zmc2V0LCBub0Fzc2VydCkge1xuICByZXR1cm4gd3JpdGVEb3VibGUodGhpcywgdmFsdWUsIG9mZnNldCwgdHJ1ZSwgbm9Bc3NlcnQpXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVEb3VibGVCRSA9IGZ1bmN0aW9uIHdyaXRlRG91YmxlQkUgKHZhbHVlLCBvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIHJldHVybiB3cml0ZURvdWJsZSh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCBmYWxzZSwgbm9Bc3NlcnQpXG59XG5cbi8vIGNvcHkodGFyZ2V0QnVmZmVyLCB0YXJnZXRTdGFydD0wLCBzb3VyY2VTdGFydD0wLCBzb3VyY2VFbmQ9YnVmZmVyLmxlbmd0aClcbkJ1ZmZlci5wcm90b3R5cGUuY29weSA9IGZ1bmN0aW9uIGNvcHkgKHRhcmdldCwgdGFyZ2V0U3RhcnQsIHN0YXJ0LCBlbmQpIHtcbiAgaWYgKCFzdGFydCkgc3RhcnQgPSAwXG4gIGlmICghZW5kICYmIGVuZCAhPT0gMCkgZW5kID0gdGhpcy5sZW5ndGhcbiAgaWYgKHRhcmdldFN0YXJ0ID49IHRhcmdldC5sZW5ndGgpIHRhcmdldFN0YXJ0ID0gdGFyZ2V0Lmxlbmd0aFxuICBpZiAoIXRhcmdldFN0YXJ0KSB0YXJnZXRTdGFydCA9IDBcbiAgaWYgKGVuZCA+IDAgJiYgZW5kIDwgc3RhcnQpIGVuZCA9IHN0YXJ0XG5cbiAgLy8gQ29weSAwIGJ5dGVzOyB3ZSdyZSBkb25lXG4gIGlmIChlbmQgPT09IHN0YXJ0KSByZXR1cm4gMFxuICBpZiAodGFyZ2V0Lmxlbmd0aCA9PT0gMCB8fCB0aGlzLmxlbmd0aCA9PT0gMCkgcmV0dXJuIDBcblxuICAvLyBGYXRhbCBlcnJvciBjb25kaXRpb25zXG4gIGlmICh0YXJnZXRTdGFydCA8IDApIHtcbiAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcigndGFyZ2V0U3RhcnQgb3V0IG9mIGJvdW5kcycpXG4gIH1cbiAgaWYgKHN0YXJ0IDwgMCB8fCBzdGFydCA+PSB0aGlzLmxlbmd0aCkgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ3NvdXJjZVN0YXJ0IG91dCBvZiBib3VuZHMnKVxuICBpZiAoZW5kIDwgMCkgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ3NvdXJjZUVuZCBvdXQgb2YgYm91bmRzJylcblxuICAvLyBBcmUgd2Ugb29iP1xuICBpZiAoZW5kID4gdGhpcy5sZW5ndGgpIGVuZCA9IHRoaXMubGVuZ3RoXG4gIGlmICh0YXJnZXQubGVuZ3RoIC0gdGFyZ2V0U3RhcnQgPCBlbmQgLSBzdGFydCkge1xuICAgIGVuZCA9IHRhcmdldC5sZW5ndGggLSB0YXJnZXRTdGFydCArIHN0YXJ0XG4gIH1cblxuICB2YXIgbGVuID0gZW5kIC0gc3RhcnRcbiAgdmFyIGlcblxuICBpZiAodGhpcyA9PT0gdGFyZ2V0ICYmIHN0YXJ0IDwgdGFyZ2V0U3RhcnQgJiYgdGFyZ2V0U3RhcnQgPCBlbmQpIHtcbiAgICAvLyBkZXNjZW5kaW5nIGNvcHkgZnJvbSBlbmRcbiAgICBmb3IgKGkgPSBsZW4gLSAxOyBpID49IDA7IC0taSkge1xuICAgICAgdGFyZ2V0W2kgKyB0YXJnZXRTdGFydF0gPSB0aGlzW2kgKyBzdGFydF1cbiAgICB9XG4gIH0gZWxzZSBpZiAobGVuIDwgMTAwMCB8fCAhQnVmZmVyLlRZUEVEX0FSUkFZX1NVUFBPUlQpIHtcbiAgICAvLyBhc2NlbmRpbmcgY29weSBmcm9tIHN0YXJ0XG4gICAgZm9yIChpID0gMDsgaSA8IGxlbjsgKytpKSB7XG4gICAgICB0YXJnZXRbaSArIHRhcmdldFN0YXJ0XSA9IHRoaXNbaSArIHN0YXJ0XVxuICAgIH1cbiAgfSBlbHNlIHtcbiAgICBVaW50OEFycmF5LnByb3RvdHlwZS5zZXQuY2FsbChcbiAgICAgIHRhcmdldCxcbiAgICAgIHRoaXMuc3ViYXJyYXkoc3RhcnQsIHN0YXJ0ICsgbGVuKSxcbiAgICAgIHRhcmdldFN0YXJ0XG4gICAgKVxuICB9XG5cbiAgcmV0dXJuIGxlblxufVxuXG4vLyBVc2FnZTpcbi8vICAgIGJ1ZmZlci5maWxsKG51bWJlclssIG9mZnNldFssIGVuZF1dKVxuLy8gICAgYnVmZmVyLmZpbGwoYnVmZmVyWywgb2Zmc2V0WywgZW5kXV0pXG4vLyAgICBidWZmZXIuZmlsbChzdHJpbmdbLCBvZmZzZXRbLCBlbmRdXVssIGVuY29kaW5nXSlcbkJ1ZmZlci5wcm90b3R5cGUuZmlsbCA9IGZ1bmN0aW9uIGZpbGwgKHZhbCwgc3RhcnQsIGVuZCwgZW5jb2RpbmcpIHtcbiAgLy8gSGFuZGxlIHN0cmluZyBjYXNlczpcbiAgaWYgKHR5cGVvZiB2YWwgPT09ICdzdHJpbmcnKSB7XG4gICAgaWYgKHR5cGVvZiBzdGFydCA9PT0gJ3N0cmluZycpIHtcbiAgICAgIGVuY29kaW5nID0gc3RhcnRcbiAgICAgIHN0YXJ0ID0gMFxuICAgICAgZW5kID0gdGhpcy5sZW5ndGhcbiAgICB9IGVsc2UgaWYgKHR5cGVvZiBlbmQgPT09ICdzdHJpbmcnKSB7XG4gICAgICBlbmNvZGluZyA9IGVuZFxuICAgICAgZW5kID0gdGhpcy5sZW5ndGhcbiAgICB9XG4gICAgaWYgKHZhbC5sZW5ndGggPT09IDEpIHtcbiAgICAgIHZhciBjb2RlID0gdmFsLmNoYXJDb2RlQXQoMClcbiAgICAgIGlmIChjb2RlIDwgMjU2KSB7XG4gICAgICAgIHZhbCA9IGNvZGVcbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKGVuY29kaW5nICE9PSB1bmRlZmluZWQgJiYgdHlwZW9mIGVuY29kaW5nICE9PSAnc3RyaW5nJykge1xuICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignZW5jb2RpbmcgbXVzdCBiZSBhIHN0cmluZycpXG4gICAgfVxuICAgIGlmICh0eXBlb2YgZW5jb2RpbmcgPT09ICdzdHJpbmcnICYmICFCdWZmZXIuaXNFbmNvZGluZyhlbmNvZGluZykpIHtcbiAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ1Vua25vd24gZW5jb2Rpbmc6ICcgKyBlbmNvZGluZylcbiAgICB9XG4gIH0gZWxzZSBpZiAodHlwZW9mIHZhbCA9PT0gJ251bWJlcicpIHtcbiAgICB2YWwgPSB2YWwgJiAyNTVcbiAgfVxuXG4gIC8vIEludmFsaWQgcmFuZ2VzIGFyZSBub3Qgc2V0IHRvIGEgZGVmYXVsdCwgc28gY2FuIHJhbmdlIGNoZWNrIGVhcmx5LlxuICBpZiAoc3RhcnQgPCAwIHx8IHRoaXMubGVuZ3RoIDwgc3RhcnQgfHwgdGhpcy5sZW5ndGggPCBlbmQpIHtcbiAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcignT3V0IG9mIHJhbmdlIGluZGV4JylcbiAgfVxuXG4gIGlmIChlbmQgPD0gc3RhcnQpIHtcbiAgICByZXR1cm4gdGhpc1xuICB9XG5cbiAgc3RhcnQgPSBzdGFydCA+Pj4gMFxuICBlbmQgPSBlbmQgPT09IHVuZGVmaW5lZCA/IHRoaXMubGVuZ3RoIDogZW5kID4+PiAwXG5cbiAgaWYgKCF2YWwpIHZhbCA9IDBcblxuICB2YXIgaVxuICBpZiAodHlwZW9mIHZhbCA9PT0gJ251bWJlcicpIHtcbiAgICBmb3IgKGkgPSBzdGFydDsgaSA8IGVuZDsgKytpKSB7XG4gICAgICB0aGlzW2ldID0gdmFsXG4gICAgfVxuICB9IGVsc2Uge1xuICAgIHZhciBieXRlcyA9IGludGVybmFsSXNCdWZmZXIodmFsKVxuICAgICAgPyB2YWxcbiAgICAgIDogdXRmOFRvQnl0ZXMobmV3IEJ1ZmZlcih2YWwsIGVuY29kaW5nKS50b1N0cmluZygpKVxuICAgIHZhciBsZW4gPSBieXRlcy5sZW5ndGhcbiAgICBmb3IgKGkgPSAwOyBpIDwgZW5kIC0gc3RhcnQ7ICsraSkge1xuICAgICAgdGhpc1tpICsgc3RhcnRdID0gYnl0ZXNbaSAlIGxlbl1cbiAgICB9XG4gIH1cblxuICByZXR1cm4gdGhpc1xufVxuXG4vLyBIRUxQRVIgRlVOQ1RJT05TXG4vLyA9PT09PT09PT09PT09PT09XG5cbnZhciBJTlZBTElEX0JBU0U2NF9SRSA9IC9bXitcXC8wLTlBLVphLXotX10vZ1xuXG5mdW5jdGlvbiBiYXNlNjRjbGVhbiAoc3RyKSB7XG4gIC8vIE5vZGUgc3RyaXBzIG91dCBpbnZhbGlkIGNoYXJhY3RlcnMgbGlrZSBcXG4gYW5kIFxcdCBmcm9tIHRoZSBzdHJpbmcsIGJhc2U2NC1qcyBkb2VzIG5vdFxuICBzdHIgPSBzdHJpbmd0cmltKHN0cikucmVwbGFjZShJTlZBTElEX0JBU0U2NF9SRSwgJycpXG4gIC8vIE5vZGUgY29udmVydHMgc3RyaW5ncyB3aXRoIGxlbmd0aCA8IDIgdG8gJydcbiAgaWYgKHN0ci5sZW5ndGggPCAyKSByZXR1cm4gJydcbiAgLy8gTm9kZSBhbGxvd3MgZm9yIG5vbi1wYWRkZWQgYmFzZTY0IHN0cmluZ3MgKG1pc3NpbmcgdHJhaWxpbmcgPT09KSwgYmFzZTY0LWpzIGRvZXMgbm90XG4gIHdoaWxlIChzdHIubGVuZ3RoICUgNCAhPT0gMCkge1xuICAgIHN0ciA9IHN0ciArICc9J1xuICB9XG4gIHJldHVybiBzdHJcbn1cblxuZnVuY3Rpb24gc3RyaW5ndHJpbSAoc3RyKSB7XG4gIGlmIChzdHIudHJpbSkgcmV0dXJuIHN0ci50cmltKClcbiAgcmV0dXJuIHN0ci5yZXBsYWNlKC9eXFxzK3xcXHMrJC9nLCAnJylcbn1cblxuZnVuY3Rpb24gdG9IZXggKG4pIHtcbiAgaWYgKG4gPCAxNikgcmV0dXJuICcwJyArIG4udG9TdHJpbmcoMTYpXG4gIHJldHVybiBuLnRvU3RyaW5nKDE2KVxufVxuXG5mdW5jdGlvbiB1dGY4VG9CeXRlcyAoc3RyaW5nLCB1bml0cykge1xuICB1bml0cyA9IHVuaXRzIHx8IEluZmluaXR5XG4gIHZhciBjb2RlUG9pbnRcbiAgdmFyIGxlbmd0aCA9IHN0cmluZy5sZW5ndGhcbiAgdmFyIGxlYWRTdXJyb2dhdGUgPSBudWxsXG4gIHZhciBieXRlcyA9IFtdXG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW5ndGg7ICsraSkge1xuICAgIGNvZGVQb2ludCA9IHN0cmluZy5jaGFyQ29kZUF0KGkpXG5cbiAgICAvLyBpcyBzdXJyb2dhdGUgY29tcG9uZW50XG4gICAgaWYgKGNvZGVQb2ludCA+IDB4RDdGRiAmJiBjb2RlUG9pbnQgPCAweEUwMDApIHtcbiAgICAgIC8vIGxhc3QgY2hhciB3YXMgYSBsZWFkXG4gICAgICBpZiAoIWxlYWRTdXJyb2dhdGUpIHtcbiAgICAgICAgLy8gbm8gbGVhZCB5ZXRcbiAgICAgICAgaWYgKGNvZGVQb2ludCA+IDB4REJGRikge1xuICAgICAgICAgIC8vIHVuZXhwZWN0ZWQgdHJhaWxcbiAgICAgICAgICBpZiAoKHVuaXRzIC09IDMpID4gLTEpIGJ5dGVzLnB1c2goMHhFRiwgMHhCRiwgMHhCRClcbiAgICAgICAgICBjb250aW51ZVxuICAgICAgICB9IGVsc2UgaWYgKGkgKyAxID09PSBsZW5ndGgpIHtcbiAgICAgICAgICAvLyB1bnBhaXJlZCBsZWFkXG4gICAgICAgICAgaWYgKCh1bml0cyAtPSAzKSA+IC0xKSBieXRlcy5wdXNoKDB4RUYsIDB4QkYsIDB4QkQpXG4gICAgICAgICAgY29udGludWVcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIHZhbGlkIGxlYWRcbiAgICAgICAgbGVhZFN1cnJvZ2F0ZSA9IGNvZGVQb2ludFxuXG4gICAgICAgIGNvbnRpbnVlXG4gICAgICB9XG5cbiAgICAgIC8vIDIgbGVhZHMgaW4gYSByb3dcbiAgICAgIGlmIChjb2RlUG9pbnQgPCAweERDMDApIHtcbiAgICAgICAgaWYgKCh1bml0cyAtPSAzKSA+IC0xKSBieXRlcy5wdXNoKDB4RUYsIDB4QkYsIDB4QkQpXG4gICAgICAgIGxlYWRTdXJyb2dhdGUgPSBjb2RlUG9pbnRcbiAgICAgICAgY29udGludWVcbiAgICAgIH1cblxuICAgICAgLy8gdmFsaWQgc3Vycm9nYXRlIHBhaXJcbiAgICAgIGNvZGVQb2ludCA9IChsZWFkU3Vycm9nYXRlIC0gMHhEODAwIDw8IDEwIHwgY29kZVBvaW50IC0gMHhEQzAwKSArIDB4MTAwMDBcbiAgICB9IGVsc2UgaWYgKGxlYWRTdXJyb2dhdGUpIHtcbiAgICAgIC8vIHZhbGlkIGJtcCBjaGFyLCBidXQgbGFzdCBjaGFyIHdhcyBhIGxlYWRcbiAgICAgIGlmICgodW5pdHMgLT0gMykgPiAtMSkgYnl0ZXMucHVzaCgweEVGLCAweEJGLCAweEJEKVxuICAgIH1cblxuICAgIGxlYWRTdXJyb2dhdGUgPSBudWxsXG5cbiAgICAvLyBlbmNvZGUgdXRmOFxuICAgIGlmIChjb2RlUG9pbnQgPCAweDgwKSB7XG4gICAgICBpZiAoKHVuaXRzIC09IDEpIDwgMCkgYnJlYWtcbiAgICAgIGJ5dGVzLnB1c2goY29kZVBvaW50KVxuICAgIH0gZWxzZSBpZiAoY29kZVBvaW50IDwgMHg4MDApIHtcbiAgICAgIGlmICgodW5pdHMgLT0gMikgPCAwKSBicmVha1xuICAgICAgYnl0ZXMucHVzaChcbiAgICAgICAgY29kZVBvaW50ID4+IDB4NiB8IDB4QzAsXG4gICAgICAgIGNvZGVQb2ludCAmIDB4M0YgfCAweDgwXG4gICAgICApXG4gICAgfSBlbHNlIGlmIChjb2RlUG9pbnQgPCAweDEwMDAwKSB7XG4gICAgICBpZiAoKHVuaXRzIC09IDMpIDwgMCkgYnJlYWtcbiAgICAgIGJ5dGVzLnB1c2goXG4gICAgICAgIGNvZGVQb2ludCA+PiAweEMgfCAweEUwLFxuICAgICAgICBjb2RlUG9pbnQgPj4gMHg2ICYgMHgzRiB8IDB4ODAsXG4gICAgICAgIGNvZGVQb2ludCAmIDB4M0YgfCAweDgwXG4gICAgICApXG4gICAgfSBlbHNlIGlmIChjb2RlUG9pbnQgPCAweDExMDAwMCkge1xuICAgICAgaWYgKCh1bml0cyAtPSA0KSA8IDApIGJyZWFrXG4gICAgICBieXRlcy5wdXNoKFxuICAgICAgICBjb2RlUG9pbnQgPj4gMHgxMiB8IDB4RjAsXG4gICAgICAgIGNvZGVQb2ludCA+PiAweEMgJiAweDNGIHwgMHg4MCxcbiAgICAgICAgY29kZVBvaW50ID4+IDB4NiAmIDB4M0YgfCAweDgwLFxuICAgICAgICBjb2RlUG9pbnQgJiAweDNGIHwgMHg4MFxuICAgICAgKVxuICAgIH0gZWxzZSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ0ludmFsaWQgY29kZSBwb2ludCcpXG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGJ5dGVzXG59XG5cbmZ1bmN0aW9uIGFzY2lpVG9CeXRlcyAoc3RyKSB7XG4gIHZhciBieXRlQXJyYXkgPSBbXVxuICBmb3IgKHZhciBpID0gMDsgaSA8IHN0ci5sZW5ndGg7ICsraSkge1xuICAgIC8vIE5vZGUncyBjb2RlIHNlZW1zIHRvIGJlIGRvaW5nIHRoaXMgYW5kIG5vdCAmIDB4N0YuLlxuICAgIGJ5dGVBcnJheS5wdXNoKHN0ci5jaGFyQ29kZUF0KGkpICYgMHhGRilcbiAgfVxuICByZXR1cm4gYnl0ZUFycmF5XG59XG5cbmZ1bmN0aW9uIHV0ZjE2bGVUb0J5dGVzIChzdHIsIHVuaXRzKSB7XG4gIHZhciBjLCBoaSwgbG9cbiAgdmFyIGJ5dGVBcnJheSA9IFtdXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgc3RyLmxlbmd0aDsgKytpKSB7XG4gICAgaWYgKCh1bml0cyAtPSAyKSA8IDApIGJyZWFrXG5cbiAgICBjID0gc3RyLmNoYXJDb2RlQXQoaSlcbiAgICBoaSA9IGMgPj4gOFxuICAgIGxvID0gYyAlIDI1NlxuICAgIGJ5dGVBcnJheS5wdXNoKGxvKVxuICAgIGJ5dGVBcnJheS5wdXNoKGhpKVxuICB9XG5cbiAgcmV0dXJuIGJ5dGVBcnJheVxufVxuXG5cbmZ1bmN0aW9uIGJhc2U2NFRvQnl0ZXMgKHN0cikge1xuICByZXR1cm4gYmFzZTY0LnRvQnl0ZUFycmF5KGJhc2U2NGNsZWFuKHN0cikpXG59XG5cbmZ1bmN0aW9uIGJsaXRCdWZmZXIgKHNyYywgZHN0LCBvZmZzZXQsIGxlbmd0aCkge1xuICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbmd0aDsgKytpKSB7XG4gICAgaWYgKChpICsgb2Zmc2V0ID49IGRzdC5sZW5ndGgpIHx8IChpID49IHNyYy5sZW5ndGgpKSBicmVha1xuICAgIGRzdFtpICsgb2Zmc2V0XSA9IHNyY1tpXVxuICB9XG4gIHJldHVybiBpXG59XG5cbmZ1bmN0aW9uIGlzbmFuICh2YWwpIHtcbiAgcmV0dXJuIHZhbCAhPT0gdmFsIC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tc2VsZi1jb21wYXJlXG59XG5cblxuLy8gdGhlIGZvbGxvd2luZyBpcyBmcm9tIGlzLWJ1ZmZlciwgYWxzbyBieSBGZXJvc3MgQWJvdWtoYWRpamVoIGFuZCB3aXRoIHNhbWUgbGlzZW5jZVxuLy8gVGhlIF9pc0J1ZmZlciBjaGVjayBpcyBmb3IgU2FmYXJpIDUtNyBzdXBwb3J0LCBiZWNhdXNlIGl0J3MgbWlzc2luZ1xuLy8gT2JqZWN0LnByb3RvdHlwZS5jb25zdHJ1Y3Rvci4gUmVtb3ZlIHRoaXMgZXZlbnR1YWxseVxuZXhwb3J0IGZ1bmN0aW9uIGlzQnVmZmVyKG9iaikge1xuICByZXR1cm4gb2JqICE9IG51bGwgJiYgKCEhb2JqLl9pc0J1ZmZlciB8fCBpc0Zhc3RCdWZmZXIob2JqKSB8fCBpc1Nsb3dCdWZmZXIob2JqKSlcbn1cblxuZnVuY3Rpb24gaXNGYXN0QnVmZmVyIChvYmopIHtcbiAgcmV0dXJuICEhb2JqLmNvbnN0cnVjdG9yICYmIHR5cGVvZiBvYmouY29uc3RydWN0b3IuaXNCdWZmZXIgPT09ICdmdW5jdGlvbicgJiYgb2JqLmNvbnN0cnVjdG9yLmlzQnVmZmVyKG9iailcbn1cblxuLy8gRm9yIE5vZGUgdjAuMTAgc3VwcG9ydC4gUmVtb3ZlIHRoaXMgZXZlbnR1YWxseS5cbmZ1bmN0aW9uIGlzU2xvd0J1ZmZlciAob2JqKSB7XG4gIHJldHVybiB0eXBlb2Ygb2JqLnJlYWRGbG9hdExFID09PSAnZnVuY3Rpb24nICYmIHR5cGVvZiBvYmouc2xpY2UgPT09ICdmdW5jdGlvbicgJiYgaXNGYXN0QnVmZmVyKG9iai5zbGljZSgwLCAwKSlcbn1cbiIsIlxudmFyIGluaGVyaXRzO1xuaWYgKHR5cGVvZiBPYmplY3QuY3JlYXRlID09PSAnZnVuY3Rpb24nKXtcbiAgaW5oZXJpdHMgPSBmdW5jdGlvbiBpbmhlcml0cyhjdG9yLCBzdXBlckN0b3IpIHtcbiAgICAvLyBpbXBsZW1lbnRhdGlvbiBmcm9tIHN0YW5kYXJkIG5vZGUuanMgJ3V0aWwnIG1vZHVsZVxuICAgIGN0b3Iuc3VwZXJfID0gc3VwZXJDdG9yXG4gICAgY3Rvci5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ3Rvci5wcm90b3R5cGUsIHtcbiAgICAgIGNvbnN0cnVjdG9yOiB7XG4gICAgICAgIHZhbHVlOiBjdG9yLFxuICAgICAgICBlbnVtZXJhYmxlOiBmYWxzZSxcbiAgICAgICAgd3JpdGFibGU6IHRydWUsXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICAgICAgfVxuICAgIH0pO1xuICB9O1xufSBlbHNlIHtcbiAgaW5oZXJpdHMgPSBmdW5jdGlvbiBpbmhlcml0cyhjdG9yLCBzdXBlckN0b3IpIHtcbiAgICBjdG9yLnN1cGVyXyA9IHN1cGVyQ3RvclxuICAgIHZhciBUZW1wQ3RvciA9IGZ1bmN0aW9uICgpIHt9XG4gICAgVGVtcEN0b3IucHJvdG90eXBlID0gc3VwZXJDdG9yLnByb3RvdHlwZVxuICAgIGN0b3IucHJvdG90eXBlID0gbmV3IFRlbXBDdG9yKClcbiAgICBjdG9yLnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IGN0b3JcbiAgfVxufVxuZXhwb3J0IGRlZmF1bHQgaW5oZXJpdHM7XG4iLCIvLyBDb3B5cmlnaHQgSm95ZW50LCBJbmMuIGFuZCBvdGhlciBOb2RlIGNvbnRyaWJ1dG9ycy5cbi8vXG4vLyBQZXJtaXNzaW9uIGlzIGhlcmVieSBncmFudGVkLCBmcmVlIG9mIGNoYXJnZSwgdG8gYW55IHBlcnNvbiBvYnRhaW5pbmcgYVxuLy8gY29weSBvZiB0aGlzIHNvZnR3YXJlIGFuZCBhc3NvY2lhdGVkIGRvY3VtZW50YXRpb24gZmlsZXMgKHRoZVxuLy8gXCJTb2Z0d2FyZVwiKSwgdG8gZGVhbCBpbiB0aGUgU29mdHdhcmUgd2l0aG91dCByZXN0cmljdGlvbiwgaW5jbHVkaW5nXG4vLyB3aXRob3V0IGxpbWl0YXRpb24gdGhlIHJpZ2h0cyB0byB1c2UsIGNvcHksIG1vZGlmeSwgbWVyZ2UsIHB1Ymxpc2gsXG4vLyBkaXN0cmlidXRlLCBzdWJsaWNlbnNlLCBhbmQvb3Igc2VsbCBjb3BpZXMgb2YgdGhlIFNvZnR3YXJlLCBhbmQgdG8gcGVybWl0XG4vLyBwZXJzb25zIHRvIHdob20gdGhlIFNvZnR3YXJlIGlzIGZ1cm5pc2hlZCB0byBkbyBzbywgc3ViamVjdCB0byB0aGVcbi8vIGZvbGxvd2luZyBjb25kaXRpb25zOlxuLy9cbi8vIFRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlIGFuZCB0aGlzIHBlcm1pc3Npb24gbm90aWNlIHNoYWxsIGJlIGluY2x1ZGVkXG4vLyBpbiBhbGwgY29waWVzIG9yIHN1YnN0YW50aWFsIHBvcnRpb25zIG9mIHRoZSBTb2Z0d2FyZS5cbi8vXG4vLyBUSEUgU09GVFdBUkUgSVMgUFJPVklERUQgXCJBUyBJU1wiLCBXSVRIT1VUIFdBUlJBTlRZIE9GIEFOWSBLSU5ELCBFWFBSRVNTXG4vLyBPUiBJTVBMSUVELCBJTkNMVURJTkcgQlVUIE5PVCBMSU1JVEVEIFRPIFRIRSBXQVJSQU5USUVTIE9GXG4vLyBNRVJDSEFOVEFCSUxJVFksIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFORCBOT05JTkZSSU5HRU1FTlQuIElOXG4vLyBOTyBFVkVOVCBTSEFMTCBUSEUgQVVUSE9SUyBPUiBDT1BZUklHSFQgSE9MREVSUyBCRSBMSUFCTEUgRk9SIEFOWSBDTEFJTSxcbi8vIERBTUFHRVMgT1IgT1RIRVIgTElBQklMSVRZLCBXSEVUSEVSIElOIEFOIEFDVElPTiBPRiBDT05UUkFDVCwgVE9SVCBPUlxuLy8gT1RIRVJXSVNFLCBBUklTSU5HIEZST00sIE9VVCBPRiBPUiBJTiBDT05ORUNUSU9OIFdJVEggVEhFIFNPRlRXQVJFIE9SIFRIRVxuLy8gVVNFIE9SIE9USEVSIERFQUxJTkdTIElOIFRIRSBTT0ZUV0FSRS5cbmltcG9ydCBwcm9jZXNzIGZyb20gJ3Byb2Nlc3MnO1xudmFyIGZvcm1hdFJlZ0V4cCA9IC8lW3NkaiVdL2c7XG5leHBvcnQgZnVuY3Rpb24gZm9ybWF0KGYpIHtcbiAgaWYgKCFpc1N0cmluZyhmKSkge1xuICAgIHZhciBvYmplY3RzID0gW107XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHtcbiAgICAgIG9iamVjdHMucHVzaChpbnNwZWN0KGFyZ3VtZW50c1tpXSkpO1xuICAgIH1cbiAgICByZXR1cm4gb2JqZWN0cy5qb2luKCcgJyk7XG4gIH1cblxuICB2YXIgaSA9IDE7XG4gIHZhciBhcmdzID0gYXJndW1lbnRzO1xuICB2YXIgbGVuID0gYXJncy5sZW5ndGg7XG4gIHZhciBzdHIgPSBTdHJpbmcoZikucmVwbGFjZShmb3JtYXRSZWdFeHAsIGZ1bmN0aW9uKHgpIHtcbiAgICBpZiAoeCA9PT0gJyUlJykgcmV0dXJuICclJztcbiAgICBpZiAoaSA+PSBsZW4pIHJldHVybiB4O1xuICAgIHN3aXRjaCAoeCkge1xuICAgICAgY2FzZSAnJXMnOiByZXR1cm4gU3RyaW5nKGFyZ3NbaSsrXSk7XG4gICAgICBjYXNlICclZCc6IHJldHVybiBOdW1iZXIoYXJnc1tpKytdKTtcbiAgICAgIGNhc2UgJyVqJzpcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICByZXR1cm4gSlNPTi5zdHJpbmdpZnkoYXJnc1tpKytdKTtcbiAgICAgICAgfSBjYXRjaCAoXykge1xuICAgICAgICAgIHJldHVybiAnW0NpcmN1bGFyXSc7XG4gICAgICAgIH1cbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIHJldHVybiB4O1xuICAgIH1cbiAgfSk7XG4gIGZvciAodmFyIHggPSBhcmdzW2ldOyBpIDwgbGVuOyB4ID0gYXJnc1srK2ldKSB7XG4gICAgaWYgKGlzTnVsbCh4KSB8fCAhaXNPYmplY3QoeCkpIHtcbiAgICAgIHN0ciArPSAnICcgKyB4O1xuICAgIH0gZWxzZSB7XG4gICAgICBzdHIgKz0gJyAnICsgaW5zcGVjdCh4KTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHN0cjtcbn07XG5cblxuLy8gTWFyayB0aGF0IGEgbWV0aG9kIHNob3VsZCBub3QgYmUgdXNlZC5cbi8vIFJldHVybnMgYSBtb2RpZmllZCBmdW5jdGlvbiB3aGljaCB3YXJucyBvbmNlIGJ5IGRlZmF1bHQuXG4vLyBJZiAtLW5vLWRlcHJlY2F0aW9uIGlzIHNldCwgdGhlbiBpdCBpcyBhIG5vLW9wLlxuZXhwb3J0IGZ1bmN0aW9uIGRlcHJlY2F0ZShmbiwgbXNnKSB7XG4gIC8vIEFsbG93IGZvciBkZXByZWNhdGluZyB0aGluZ3MgaW4gdGhlIHByb2Nlc3Mgb2Ygc3RhcnRpbmcgdXAuXG4gIGlmIChpc1VuZGVmaW5lZChnbG9iYWwucHJvY2VzcykpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gZGVwcmVjYXRlKGZuLCBtc2cpLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgfTtcbiAgfVxuXG4gIGlmIChwcm9jZXNzLm5vRGVwcmVjYXRpb24gPT09IHRydWUpIHtcbiAgICByZXR1cm4gZm47XG4gIH1cblxuICB2YXIgd2FybmVkID0gZmFsc2U7XG4gIGZ1bmN0aW9uIGRlcHJlY2F0ZWQoKSB7XG4gICAgaWYgKCF3YXJuZWQpIHtcbiAgICAgIGlmIChwcm9jZXNzLnRocm93RGVwcmVjYXRpb24pIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKG1zZyk7XG4gICAgICB9IGVsc2UgaWYgKHByb2Nlc3MudHJhY2VEZXByZWNhdGlvbikge1xuICAgICAgICBjb25zb2xlLnRyYWNlKG1zZyk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBjb25zb2xlLmVycm9yKG1zZyk7XG4gICAgICB9XG4gICAgICB3YXJuZWQgPSB0cnVlO1xuICAgIH1cbiAgICByZXR1cm4gZm4uYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgfVxuXG4gIHJldHVybiBkZXByZWNhdGVkO1xufTtcblxuXG52YXIgZGVidWdzID0ge307XG52YXIgZGVidWdFbnZpcm9uO1xuZXhwb3J0IGZ1bmN0aW9uIGRlYnVnbG9nKHNldCkge1xuICBpZiAoaXNVbmRlZmluZWQoZGVidWdFbnZpcm9uKSlcbiAgICBkZWJ1Z0Vudmlyb24gPSBwcm9jZXNzLmVudi5OT0RFX0RFQlVHIHx8ICcnO1xuICBzZXQgPSBzZXQudG9VcHBlckNhc2UoKTtcbiAgaWYgKCFkZWJ1Z3Nbc2V0XSkge1xuICAgIGlmIChuZXcgUmVnRXhwKCdcXFxcYicgKyBzZXQgKyAnXFxcXGInLCAnaScpLnRlc3QoZGVidWdFbnZpcm9uKSkge1xuICAgICAgdmFyIHBpZCA9IDA7XG4gICAgICBkZWJ1Z3Nbc2V0XSA9IGZ1bmN0aW9uKCkge1xuICAgICAgICB2YXIgbXNnID0gZm9ybWF0LmFwcGx5KG51bGwsIGFyZ3VtZW50cyk7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoJyVzICVkOiAlcycsIHNldCwgcGlkLCBtc2cpO1xuICAgICAgfTtcbiAgICB9IGVsc2Uge1xuICAgICAgZGVidWdzW3NldF0gPSBmdW5jdGlvbigpIHt9O1xuICAgIH1cbiAgfVxuICByZXR1cm4gZGVidWdzW3NldF07XG59O1xuXG5cbi8qKlxuICogRWNob3MgdGhlIHZhbHVlIG9mIGEgdmFsdWUuIFRyeXMgdG8gcHJpbnQgdGhlIHZhbHVlIG91dFxuICogaW4gdGhlIGJlc3Qgd2F5IHBvc3NpYmxlIGdpdmVuIHRoZSBkaWZmZXJlbnQgdHlwZXMuXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IG9iaiBUaGUgb2JqZWN0IHRvIHByaW50IG91dC5cbiAqIEBwYXJhbSB7T2JqZWN0fSBvcHRzIE9wdGlvbmFsIG9wdGlvbnMgb2JqZWN0IHRoYXQgYWx0ZXJzIHRoZSBvdXRwdXQuXG4gKi9cbi8qIGxlZ2FjeTogb2JqLCBzaG93SGlkZGVuLCBkZXB0aCwgY29sb3JzKi9cbmV4cG9ydCBmdW5jdGlvbiBpbnNwZWN0KG9iaiwgb3B0cykge1xuICAvLyBkZWZhdWx0IG9wdGlvbnNcbiAgdmFyIGN0eCA9IHtcbiAgICBzZWVuOiBbXSxcbiAgICBzdHlsaXplOiBzdHlsaXplTm9Db2xvclxuICB9O1xuICAvLyBsZWdhY3kuLi5cbiAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPj0gMykgY3R4LmRlcHRoID0gYXJndW1lbnRzWzJdO1xuICBpZiAoYXJndW1lbnRzLmxlbmd0aCA+PSA0KSBjdHguY29sb3JzID0gYXJndW1lbnRzWzNdO1xuICBpZiAoaXNCb29sZWFuKG9wdHMpKSB7XG4gICAgLy8gbGVnYWN5Li4uXG4gICAgY3R4LnNob3dIaWRkZW4gPSBvcHRzO1xuICB9IGVsc2UgaWYgKG9wdHMpIHtcbiAgICAvLyBnb3QgYW4gXCJvcHRpb25zXCIgb2JqZWN0XG4gICAgX2V4dGVuZChjdHgsIG9wdHMpO1xuICB9XG4gIC8vIHNldCBkZWZhdWx0IG9wdGlvbnNcbiAgaWYgKGlzVW5kZWZpbmVkKGN0eC5zaG93SGlkZGVuKSkgY3R4LnNob3dIaWRkZW4gPSBmYWxzZTtcbiAgaWYgKGlzVW5kZWZpbmVkKGN0eC5kZXB0aCkpIGN0eC5kZXB0aCA9IDI7XG4gIGlmIChpc1VuZGVmaW5lZChjdHguY29sb3JzKSkgY3R4LmNvbG9ycyA9IGZhbHNlO1xuICBpZiAoaXNVbmRlZmluZWQoY3R4LmN1c3RvbUluc3BlY3QpKSBjdHguY3VzdG9tSW5zcGVjdCA9IHRydWU7XG4gIGlmIChjdHguY29sb3JzKSBjdHguc3R5bGl6ZSA9IHN0eWxpemVXaXRoQ29sb3I7XG4gIHJldHVybiBmb3JtYXRWYWx1ZShjdHgsIG9iaiwgY3R4LmRlcHRoKTtcbn1cblxuLy8gaHR0cDovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9BTlNJX2VzY2FwZV9jb2RlI2dyYXBoaWNzXG5pbnNwZWN0LmNvbG9ycyA9IHtcbiAgJ2JvbGQnIDogWzEsIDIyXSxcbiAgJ2l0YWxpYycgOiBbMywgMjNdLFxuICAndW5kZXJsaW5lJyA6IFs0LCAyNF0sXG4gICdpbnZlcnNlJyA6IFs3LCAyN10sXG4gICd3aGl0ZScgOiBbMzcsIDM5XSxcbiAgJ2dyZXknIDogWzkwLCAzOV0sXG4gICdibGFjaycgOiBbMzAsIDM5XSxcbiAgJ2JsdWUnIDogWzM0LCAzOV0sXG4gICdjeWFuJyA6IFszNiwgMzldLFxuICAnZ3JlZW4nIDogWzMyLCAzOV0sXG4gICdtYWdlbnRhJyA6IFszNSwgMzldLFxuICAncmVkJyA6IFszMSwgMzldLFxuICAneWVsbG93JyA6IFszMywgMzldXG59O1xuXG4vLyBEb24ndCB1c2UgJ2JsdWUnIG5vdCB2aXNpYmxlIG9uIGNtZC5leGVcbmluc3BlY3Quc3R5bGVzID0ge1xuICAnc3BlY2lhbCc6ICdjeWFuJyxcbiAgJ251bWJlcic6ICd5ZWxsb3cnLFxuICAnYm9vbGVhbic6ICd5ZWxsb3cnLFxuICAndW5kZWZpbmVkJzogJ2dyZXknLFxuICAnbnVsbCc6ICdib2xkJyxcbiAgJ3N0cmluZyc6ICdncmVlbicsXG4gICdkYXRlJzogJ21hZ2VudGEnLFxuICAvLyBcIm5hbWVcIjogaW50ZW50aW9uYWxseSBub3Qgc3R5bGluZ1xuICAncmVnZXhwJzogJ3JlZCdcbn07XG5cblxuZnVuY3Rpb24gc3R5bGl6ZVdpdGhDb2xvcihzdHIsIHN0eWxlVHlwZSkge1xuICB2YXIgc3R5bGUgPSBpbnNwZWN0LnN0eWxlc1tzdHlsZVR5cGVdO1xuXG4gIGlmIChzdHlsZSkge1xuICAgIHJldHVybiAnXFx1MDAxYlsnICsgaW5zcGVjdC5jb2xvcnNbc3R5bGVdWzBdICsgJ20nICsgc3RyICtcbiAgICAgICAgICAgJ1xcdTAwMWJbJyArIGluc3BlY3QuY29sb3JzW3N0eWxlXVsxXSArICdtJztcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gc3RyO1xuICB9XG59XG5cblxuZnVuY3Rpb24gc3R5bGl6ZU5vQ29sb3Ioc3RyLCBzdHlsZVR5cGUpIHtcbiAgcmV0dXJuIHN0cjtcbn1cblxuXG5mdW5jdGlvbiBhcnJheVRvSGFzaChhcnJheSkge1xuICB2YXIgaGFzaCA9IHt9O1xuXG4gIGFycmF5LmZvckVhY2goZnVuY3Rpb24odmFsLCBpZHgpIHtcbiAgICBoYXNoW3ZhbF0gPSB0cnVlO1xuICB9KTtcblxuICByZXR1cm4gaGFzaDtcbn1cblxuXG5mdW5jdGlvbiBmb3JtYXRWYWx1ZShjdHgsIHZhbHVlLCByZWN1cnNlVGltZXMpIHtcbiAgLy8gUHJvdmlkZSBhIGhvb2sgZm9yIHVzZXItc3BlY2lmaWVkIGluc3BlY3QgZnVuY3Rpb25zLlxuICAvLyBDaGVjayB0aGF0IHZhbHVlIGlzIGFuIG9iamVjdCB3aXRoIGFuIGluc3BlY3QgZnVuY3Rpb24gb24gaXRcbiAgaWYgKGN0eC5jdXN0b21JbnNwZWN0ICYmXG4gICAgICB2YWx1ZSAmJlxuICAgICAgaXNGdW5jdGlvbih2YWx1ZS5pbnNwZWN0KSAmJlxuICAgICAgLy8gRmlsdGVyIG91dCB0aGUgdXRpbCBtb2R1bGUsIGl0J3MgaW5zcGVjdCBmdW5jdGlvbiBpcyBzcGVjaWFsXG4gICAgICB2YWx1ZS5pbnNwZWN0ICE9PSBpbnNwZWN0ICYmXG4gICAgICAvLyBBbHNvIGZpbHRlciBvdXQgYW55IHByb3RvdHlwZSBvYmplY3RzIHVzaW5nIHRoZSBjaXJjdWxhciBjaGVjay5cbiAgICAgICEodmFsdWUuY29uc3RydWN0b3IgJiYgdmFsdWUuY29uc3RydWN0b3IucHJvdG90eXBlID09PSB2YWx1ZSkpIHtcbiAgICB2YXIgcmV0ID0gdmFsdWUuaW5zcGVjdChyZWN1cnNlVGltZXMsIGN0eCk7XG4gICAgaWYgKCFpc1N0cmluZyhyZXQpKSB7XG4gICAgICByZXQgPSBmb3JtYXRWYWx1ZShjdHgsIHJldCwgcmVjdXJzZVRpbWVzKTtcbiAgICB9XG4gICAgcmV0dXJuIHJldDtcbiAgfVxuXG4gIC8vIFByaW1pdGl2ZSB0eXBlcyBjYW5ub3QgaGF2ZSBwcm9wZXJ0aWVzXG4gIHZhciBwcmltaXRpdmUgPSBmb3JtYXRQcmltaXRpdmUoY3R4LCB2YWx1ZSk7XG4gIGlmIChwcmltaXRpdmUpIHtcbiAgICByZXR1cm4gcHJpbWl0aXZlO1xuICB9XG5cbiAgLy8gTG9vayB1cCB0aGUga2V5cyBvZiB0aGUgb2JqZWN0LlxuICB2YXIga2V5cyA9IE9iamVjdC5rZXlzKHZhbHVlKTtcbiAgdmFyIHZpc2libGVLZXlzID0gYXJyYXlUb0hhc2goa2V5cyk7XG5cbiAgaWYgKGN0eC5zaG93SGlkZGVuKSB7XG4gICAga2V5cyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKHZhbHVlKTtcbiAgfVxuXG4gIC8vIElFIGRvZXNuJ3QgbWFrZSBlcnJvciBmaWVsZHMgbm9uLWVudW1lcmFibGVcbiAgLy8gaHR0cDovL21zZG4ubWljcm9zb2Z0LmNvbS9lbi11cy9saWJyYXJ5L2llL2R3dzUyc2J0KHY9dnMuOTQpLmFzcHhcbiAgaWYgKGlzRXJyb3IodmFsdWUpXG4gICAgICAmJiAoa2V5cy5pbmRleE9mKCdtZXNzYWdlJykgPj0gMCB8fCBrZXlzLmluZGV4T2YoJ2Rlc2NyaXB0aW9uJykgPj0gMCkpIHtcbiAgICByZXR1cm4gZm9ybWF0RXJyb3IodmFsdWUpO1xuICB9XG5cbiAgLy8gU29tZSB0eXBlIG9mIG9iamVjdCB3aXRob3V0IHByb3BlcnRpZXMgY2FuIGJlIHNob3J0Y3V0dGVkLlxuICBpZiAoa2V5cy5sZW5ndGggPT09IDApIHtcbiAgICBpZiAoaXNGdW5jdGlvbih2YWx1ZSkpIHtcbiAgICAgIHZhciBuYW1lID0gdmFsdWUubmFtZSA/ICc6ICcgKyB2YWx1ZS5uYW1lIDogJyc7XG4gICAgICByZXR1cm4gY3R4LnN0eWxpemUoJ1tGdW5jdGlvbicgKyBuYW1lICsgJ10nLCAnc3BlY2lhbCcpO1xuICAgIH1cbiAgICBpZiAoaXNSZWdFeHAodmFsdWUpKSB7XG4gICAgICByZXR1cm4gY3R4LnN0eWxpemUoUmVnRXhwLnByb3RvdHlwZS50b1N0cmluZy5jYWxsKHZhbHVlKSwgJ3JlZ2V4cCcpO1xuICAgIH1cbiAgICBpZiAoaXNEYXRlKHZhbHVlKSkge1xuICAgICAgcmV0dXJuIGN0eC5zdHlsaXplKERhdGUucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwodmFsdWUpLCAnZGF0ZScpO1xuICAgIH1cbiAgICBpZiAoaXNFcnJvcih2YWx1ZSkpIHtcbiAgICAgIHJldHVybiBmb3JtYXRFcnJvcih2YWx1ZSk7XG4gICAgfVxuICB9XG5cbiAgdmFyIGJhc2UgPSAnJywgYXJyYXkgPSBmYWxzZSwgYnJhY2VzID0gWyd7JywgJ30nXTtcblxuICAvLyBNYWtlIEFycmF5IHNheSB0aGF0IHRoZXkgYXJlIEFycmF5XG4gIGlmIChpc0FycmF5KHZhbHVlKSkge1xuICAgIGFycmF5ID0gdHJ1ZTtcbiAgICBicmFjZXMgPSBbJ1snLCAnXSddO1xuICB9XG5cbiAgLy8gTWFrZSBmdW5jdGlvbnMgc2F5IHRoYXQgdGhleSBhcmUgZnVuY3Rpb25zXG4gIGlmIChpc0Z1bmN0aW9uKHZhbHVlKSkge1xuICAgIHZhciBuID0gdmFsdWUubmFtZSA/ICc6ICcgKyB2YWx1ZS5uYW1lIDogJyc7XG4gICAgYmFzZSA9ICcgW0Z1bmN0aW9uJyArIG4gKyAnXSc7XG4gIH1cblxuICAvLyBNYWtlIFJlZ0V4cHMgc2F5IHRoYXQgdGhleSBhcmUgUmVnRXhwc1xuICBpZiAoaXNSZWdFeHAodmFsdWUpKSB7XG4gICAgYmFzZSA9ICcgJyArIFJlZ0V4cC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbCh2YWx1ZSk7XG4gIH1cblxuICAvLyBNYWtlIGRhdGVzIHdpdGggcHJvcGVydGllcyBmaXJzdCBzYXkgdGhlIGRhdGVcbiAgaWYgKGlzRGF0ZSh2YWx1ZSkpIHtcbiAgICBiYXNlID0gJyAnICsgRGF0ZS5wcm90b3R5cGUudG9VVENTdHJpbmcuY2FsbCh2YWx1ZSk7XG4gIH1cblxuICAvLyBNYWtlIGVycm9yIHdpdGggbWVzc2FnZSBmaXJzdCBzYXkgdGhlIGVycm9yXG4gIGlmIChpc0Vycm9yKHZhbHVlKSkge1xuICAgIGJhc2UgPSAnICcgKyBmb3JtYXRFcnJvcih2YWx1ZSk7XG4gIH1cblxuICBpZiAoa2V5cy5sZW5ndGggPT09IDAgJiYgKCFhcnJheSB8fCB2YWx1ZS5sZW5ndGggPT0gMCkpIHtcbiAgICByZXR1cm4gYnJhY2VzWzBdICsgYmFzZSArIGJyYWNlc1sxXTtcbiAgfVxuXG4gIGlmIChyZWN1cnNlVGltZXMgPCAwKSB7XG4gICAgaWYgKGlzUmVnRXhwKHZhbHVlKSkge1xuICAgICAgcmV0dXJuIGN0eC5zdHlsaXplKFJlZ0V4cC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbCh2YWx1ZSksICdyZWdleHAnKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIGN0eC5zdHlsaXplKCdbT2JqZWN0XScsICdzcGVjaWFsJyk7XG4gICAgfVxuICB9XG5cbiAgY3R4LnNlZW4ucHVzaCh2YWx1ZSk7XG5cbiAgdmFyIG91dHB1dDtcbiAgaWYgKGFycmF5KSB7XG4gICAgb3V0cHV0ID0gZm9ybWF0QXJyYXkoY3R4LCB2YWx1ZSwgcmVjdXJzZVRpbWVzLCB2aXNpYmxlS2V5cywga2V5cyk7XG4gIH0gZWxzZSB7XG4gICAgb3V0cHV0ID0ga2V5cy5tYXAoZnVuY3Rpb24oa2V5KSB7XG4gICAgICByZXR1cm4gZm9ybWF0UHJvcGVydHkoY3R4LCB2YWx1ZSwgcmVjdXJzZVRpbWVzLCB2aXNpYmxlS2V5cywga2V5LCBhcnJheSk7XG4gICAgfSk7XG4gIH1cblxuICBjdHguc2Vlbi5wb3AoKTtcblxuICByZXR1cm4gcmVkdWNlVG9TaW5nbGVTdHJpbmcob3V0cHV0LCBiYXNlLCBicmFjZXMpO1xufVxuXG5cbmZ1bmN0aW9uIGZvcm1hdFByaW1pdGl2ZShjdHgsIHZhbHVlKSB7XG4gIGlmIChpc1VuZGVmaW5lZCh2YWx1ZSkpXG4gICAgcmV0dXJuIGN0eC5zdHlsaXplKCd1bmRlZmluZWQnLCAndW5kZWZpbmVkJyk7XG4gIGlmIChpc1N0cmluZyh2YWx1ZSkpIHtcbiAgICB2YXIgc2ltcGxlID0gJ1xcJycgKyBKU09OLnN0cmluZ2lmeSh2YWx1ZSkucmVwbGFjZSgvXlwifFwiJC9nLCAnJylcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5yZXBsYWNlKC8nL2csIFwiXFxcXCdcIilcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5yZXBsYWNlKC9cXFxcXCIvZywgJ1wiJykgKyAnXFwnJztcbiAgICByZXR1cm4gY3R4LnN0eWxpemUoc2ltcGxlLCAnc3RyaW5nJyk7XG4gIH1cbiAgaWYgKGlzTnVtYmVyKHZhbHVlKSlcbiAgICByZXR1cm4gY3R4LnN0eWxpemUoJycgKyB2YWx1ZSwgJ251bWJlcicpO1xuICBpZiAoaXNCb29sZWFuKHZhbHVlKSlcbiAgICByZXR1cm4gY3R4LnN0eWxpemUoJycgKyB2YWx1ZSwgJ2Jvb2xlYW4nKTtcbiAgLy8gRm9yIHNvbWUgcmVhc29uIHR5cGVvZiBudWxsIGlzIFwib2JqZWN0XCIsIHNvIHNwZWNpYWwgY2FzZSBoZXJlLlxuICBpZiAoaXNOdWxsKHZhbHVlKSlcbiAgICByZXR1cm4gY3R4LnN0eWxpemUoJ251bGwnLCAnbnVsbCcpO1xufVxuXG5cbmZ1bmN0aW9uIGZvcm1hdEVycm9yKHZhbHVlKSB7XG4gIHJldHVybiAnWycgKyBFcnJvci5wcm90b3R5cGUudG9TdHJpbmcuY2FsbCh2YWx1ZSkgKyAnXSc7XG59XG5cblxuZnVuY3Rpb24gZm9ybWF0QXJyYXkoY3R4LCB2YWx1ZSwgcmVjdXJzZVRpbWVzLCB2aXNpYmxlS2V5cywga2V5cykge1xuICB2YXIgb3V0cHV0ID0gW107XG4gIGZvciAodmFyIGkgPSAwLCBsID0gdmFsdWUubGVuZ3RoOyBpIDwgbDsgKytpKSB7XG4gICAgaWYgKGhhc093blByb3BlcnR5KHZhbHVlLCBTdHJpbmcoaSkpKSB7XG4gICAgICBvdXRwdXQucHVzaChmb3JtYXRQcm9wZXJ0eShjdHgsIHZhbHVlLCByZWN1cnNlVGltZXMsIHZpc2libGVLZXlzLFxuICAgICAgICAgIFN0cmluZyhpKSwgdHJ1ZSkpO1xuICAgIH0gZWxzZSB7XG4gICAgICBvdXRwdXQucHVzaCgnJyk7XG4gICAgfVxuICB9XG4gIGtleXMuZm9yRWFjaChmdW5jdGlvbihrZXkpIHtcbiAgICBpZiAoIWtleS5tYXRjaCgvXlxcZCskLykpIHtcbiAgICAgIG91dHB1dC5wdXNoKGZvcm1hdFByb3BlcnR5KGN0eCwgdmFsdWUsIHJlY3Vyc2VUaW1lcywgdmlzaWJsZUtleXMsXG4gICAgICAgICAga2V5LCB0cnVlKSk7XG4gICAgfVxuICB9KTtcbiAgcmV0dXJuIG91dHB1dDtcbn1cblxuXG5mdW5jdGlvbiBmb3JtYXRQcm9wZXJ0eShjdHgsIHZhbHVlLCByZWN1cnNlVGltZXMsIHZpc2libGVLZXlzLCBrZXksIGFycmF5KSB7XG4gIHZhciBuYW1lLCBzdHIsIGRlc2M7XG4gIGRlc2MgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHZhbHVlLCBrZXkpIHx8IHsgdmFsdWU6IHZhbHVlW2tleV0gfTtcbiAgaWYgKGRlc2MuZ2V0KSB7XG4gICAgaWYgKGRlc2Muc2V0KSB7XG4gICAgICBzdHIgPSBjdHguc3R5bGl6ZSgnW0dldHRlci9TZXR0ZXJdJywgJ3NwZWNpYWwnKTtcbiAgICB9IGVsc2Uge1xuICAgICAgc3RyID0gY3R4LnN0eWxpemUoJ1tHZXR0ZXJdJywgJ3NwZWNpYWwnKTtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgaWYgKGRlc2Muc2V0KSB7XG4gICAgICBzdHIgPSBjdHguc3R5bGl6ZSgnW1NldHRlcl0nLCAnc3BlY2lhbCcpO1xuICAgIH1cbiAgfVxuICBpZiAoIWhhc093blByb3BlcnR5KHZpc2libGVLZXlzLCBrZXkpKSB7XG4gICAgbmFtZSA9ICdbJyArIGtleSArICddJztcbiAgfVxuICBpZiAoIXN0cikge1xuICAgIGlmIChjdHguc2Vlbi5pbmRleE9mKGRlc2MudmFsdWUpIDwgMCkge1xuICAgICAgaWYgKGlzTnVsbChyZWN1cnNlVGltZXMpKSB7XG4gICAgICAgIHN0ciA9IGZvcm1hdFZhbHVlKGN0eCwgZGVzYy52YWx1ZSwgbnVsbCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBzdHIgPSBmb3JtYXRWYWx1ZShjdHgsIGRlc2MudmFsdWUsIHJlY3Vyc2VUaW1lcyAtIDEpO1xuICAgICAgfVxuICAgICAgaWYgKHN0ci5pbmRleE9mKCdcXG4nKSA+IC0xKSB7XG4gICAgICAgIGlmIChhcnJheSkge1xuICAgICAgICAgIHN0ciA9IHN0ci5zcGxpdCgnXFxuJykubWFwKGZ1bmN0aW9uKGxpbmUpIHtcbiAgICAgICAgICAgIHJldHVybiAnICAnICsgbGluZTtcbiAgICAgICAgICB9KS5qb2luKCdcXG4nKS5zdWJzdHIoMik7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgc3RyID0gJ1xcbicgKyBzdHIuc3BsaXQoJ1xcbicpLm1hcChmdW5jdGlvbihsaW5lKSB7XG4gICAgICAgICAgICByZXR1cm4gJyAgICcgKyBsaW5lO1xuICAgICAgICAgIH0pLmpvaW4oJ1xcbicpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIHN0ciA9IGN0eC5zdHlsaXplKCdbQ2lyY3VsYXJdJywgJ3NwZWNpYWwnKTtcbiAgICB9XG4gIH1cbiAgaWYgKGlzVW5kZWZpbmVkKG5hbWUpKSB7XG4gICAgaWYgKGFycmF5ICYmIGtleS5tYXRjaCgvXlxcZCskLykpIHtcbiAgICAgIHJldHVybiBzdHI7XG4gICAgfVxuICAgIG5hbWUgPSBKU09OLnN0cmluZ2lmeSgnJyArIGtleSk7XG4gICAgaWYgKG5hbWUubWF0Y2goL15cIihbYS16QS1aX11bYS16QS1aXzAtOV0qKVwiJC8pKSB7XG4gICAgICBuYW1lID0gbmFtZS5zdWJzdHIoMSwgbmFtZS5sZW5ndGggLSAyKTtcbiAgICAgIG5hbWUgPSBjdHguc3R5bGl6ZShuYW1lLCAnbmFtZScpO1xuICAgIH0gZWxzZSB7XG4gICAgICBuYW1lID0gbmFtZS5yZXBsYWNlKC8nL2csIFwiXFxcXCdcIilcbiAgICAgICAgICAgICAgICAgLnJlcGxhY2UoL1xcXFxcIi9nLCAnXCInKVxuICAgICAgICAgICAgICAgICAucmVwbGFjZSgvKF5cInxcIiQpL2csIFwiJ1wiKTtcbiAgICAgIG5hbWUgPSBjdHguc3R5bGl6ZShuYW1lLCAnc3RyaW5nJyk7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIG5hbWUgKyAnOiAnICsgc3RyO1xufVxuXG5cbmZ1bmN0aW9uIHJlZHVjZVRvU2luZ2xlU3RyaW5nKG91dHB1dCwgYmFzZSwgYnJhY2VzKSB7XG4gIHZhciBudW1MaW5lc0VzdCA9IDA7XG4gIHZhciBsZW5ndGggPSBvdXRwdXQucmVkdWNlKGZ1bmN0aW9uKHByZXYsIGN1cikge1xuICAgIG51bUxpbmVzRXN0Kys7XG4gICAgaWYgKGN1ci5pbmRleE9mKCdcXG4nKSA+PSAwKSBudW1MaW5lc0VzdCsrO1xuICAgIHJldHVybiBwcmV2ICsgY3VyLnJlcGxhY2UoL1xcdTAwMWJcXFtcXGRcXGQ/bS9nLCAnJykubGVuZ3RoICsgMTtcbiAgfSwgMCk7XG5cbiAgaWYgKGxlbmd0aCA+IDYwKSB7XG4gICAgcmV0dXJuIGJyYWNlc1swXSArXG4gICAgICAgICAgIChiYXNlID09PSAnJyA/ICcnIDogYmFzZSArICdcXG4gJykgK1xuICAgICAgICAgICAnICcgK1xuICAgICAgICAgICBvdXRwdXQuam9pbignLFxcbiAgJykgK1xuICAgICAgICAgICAnICcgK1xuICAgICAgICAgICBicmFjZXNbMV07XG4gIH1cblxuICByZXR1cm4gYnJhY2VzWzBdICsgYmFzZSArICcgJyArIG91dHB1dC5qb2luKCcsICcpICsgJyAnICsgYnJhY2VzWzFdO1xufVxuXG5cbi8vIE5PVEU6IFRoZXNlIHR5cGUgY2hlY2tpbmcgZnVuY3Rpb25zIGludGVudGlvbmFsbHkgZG9uJ3QgdXNlIGBpbnN0YW5jZW9mYFxuLy8gYmVjYXVzZSBpdCBpcyBmcmFnaWxlIGFuZCBjYW4gYmUgZWFzaWx5IGZha2VkIHdpdGggYE9iamVjdC5jcmVhdGUoKWAuXG5leHBvcnQgZnVuY3Rpb24gaXNBcnJheShhcikge1xuICByZXR1cm4gQXJyYXkuaXNBcnJheShhcik7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBpc0Jvb2xlYW4oYXJnKSB7XG4gIHJldHVybiB0eXBlb2YgYXJnID09PSAnYm9vbGVhbic7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBpc051bGwoYXJnKSB7XG4gIHJldHVybiBhcmcgPT09IG51bGw7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBpc051bGxPclVuZGVmaW5lZChhcmcpIHtcbiAgcmV0dXJuIGFyZyA9PSBudWxsO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gaXNOdW1iZXIoYXJnKSB7XG4gIHJldHVybiB0eXBlb2YgYXJnID09PSAnbnVtYmVyJztcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGlzU3RyaW5nKGFyZykge1xuICByZXR1cm4gdHlwZW9mIGFyZyA9PT0gJ3N0cmluZyc7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBpc1N5bWJvbChhcmcpIHtcbiAgcmV0dXJuIHR5cGVvZiBhcmcgPT09ICdzeW1ib2wnO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gaXNVbmRlZmluZWQoYXJnKSB7XG4gIHJldHVybiBhcmcgPT09IHZvaWQgMDtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGlzUmVnRXhwKHJlKSB7XG4gIHJldHVybiBpc09iamVjdChyZSkgJiYgb2JqZWN0VG9TdHJpbmcocmUpID09PSAnW29iamVjdCBSZWdFeHBdJztcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGlzT2JqZWN0KGFyZykge1xuICByZXR1cm4gdHlwZW9mIGFyZyA9PT0gJ29iamVjdCcgJiYgYXJnICE9PSBudWxsO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gaXNEYXRlKGQpIHtcbiAgcmV0dXJuIGlzT2JqZWN0KGQpICYmIG9iamVjdFRvU3RyaW5nKGQpID09PSAnW29iamVjdCBEYXRlXSc7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBpc0Vycm9yKGUpIHtcbiAgcmV0dXJuIGlzT2JqZWN0KGUpICYmXG4gICAgICAob2JqZWN0VG9TdHJpbmcoZSkgPT09ICdbb2JqZWN0IEVycm9yXScgfHwgZSBpbnN0YW5jZW9mIEVycm9yKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGlzRnVuY3Rpb24oYXJnKSB7XG4gIHJldHVybiB0eXBlb2YgYXJnID09PSAnZnVuY3Rpb24nO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gaXNQcmltaXRpdmUoYXJnKSB7XG4gIHJldHVybiBhcmcgPT09IG51bGwgfHxcbiAgICAgICAgIHR5cGVvZiBhcmcgPT09ICdib29sZWFuJyB8fFxuICAgICAgICAgdHlwZW9mIGFyZyA9PT0gJ251bWJlcicgfHxcbiAgICAgICAgIHR5cGVvZiBhcmcgPT09ICdzdHJpbmcnIHx8XG4gICAgICAgICB0eXBlb2YgYXJnID09PSAnc3ltYm9sJyB8fCAgLy8gRVM2IHN5bWJvbFxuICAgICAgICAgdHlwZW9mIGFyZyA9PT0gJ3VuZGVmaW5lZCc7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBpc0J1ZmZlcihtYXliZUJ1Zikge1xuICByZXR1cm4gQnVmZmVyLmlzQnVmZmVyKG1heWJlQnVmKTtcbn1cblxuZnVuY3Rpb24gb2JqZWN0VG9TdHJpbmcobykge1xuICByZXR1cm4gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKG8pO1xufVxuXG5cbmZ1bmN0aW9uIHBhZChuKSB7XG4gIHJldHVybiBuIDwgMTAgPyAnMCcgKyBuLnRvU3RyaW5nKDEwKSA6IG4udG9TdHJpbmcoMTApO1xufVxuXG5cbnZhciBtb250aHMgPSBbJ0phbicsICdGZWInLCAnTWFyJywgJ0FwcicsICdNYXknLCAnSnVuJywgJ0p1bCcsICdBdWcnLCAnU2VwJyxcbiAgICAgICAgICAgICAgJ09jdCcsICdOb3YnLCAnRGVjJ107XG5cbi8vIDI2IEZlYiAxNjoxOTozNFxuZnVuY3Rpb24gdGltZXN0YW1wKCkge1xuICB2YXIgZCA9IG5ldyBEYXRlKCk7XG4gIHZhciB0aW1lID0gW3BhZChkLmdldEhvdXJzKCkpLFxuICAgICAgICAgICAgICBwYWQoZC5nZXRNaW51dGVzKCkpLFxuICAgICAgICAgICAgICBwYWQoZC5nZXRTZWNvbmRzKCkpXS5qb2luKCc6Jyk7XG4gIHJldHVybiBbZC5nZXREYXRlKCksIG1vbnRoc1tkLmdldE1vbnRoKCldLCB0aW1lXS5qb2luKCcgJyk7XG59XG5cblxuLy8gbG9nIGlzIGp1c3QgYSB0aGluIHdyYXBwZXIgdG8gY29uc29sZS5sb2cgdGhhdCBwcmVwZW5kcyBhIHRpbWVzdGFtcFxuZXhwb3J0IGZ1bmN0aW9uIGxvZygpIHtcbiAgY29uc29sZS5sb2coJyVzIC0gJXMnLCB0aW1lc3RhbXAoKSwgZm9ybWF0LmFwcGx5KG51bGwsIGFyZ3VtZW50cykpO1xufVxuXG5cbi8qKlxuICogSW5oZXJpdCB0aGUgcHJvdG90eXBlIG1ldGhvZHMgZnJvbSBvbmUgY29uc3RydWN0b3IgaW50byBhbm90aGVyLlxuICpcbiAqIFRoZSBGdW5jdGlvbi5wcm90b3R5cGUuaW5oZXJpdHMgZnJvbSBsYW5nLmpzIHJld3JpdHRlbiBhcyBhIHN0YW5kYWxvbmVcbiAqIGZ1bmN0aW9uIChub3Qgb24gRnVuY3Rpb24ucHJvdG90eXBlKS4gTk9URTogSWYgdGhpcyBmaWxlIGlzIHRvIGJlIGxvYWRlZFxuICogZHVyaW5nIGJvb3RzdHJhcHBpbmcgdGhpcyBmdW5jdGlvbiBuZWVkcyB0byBiZSByZXdyaXR0ZW4gdXNpbmcgc29tZSBuYXRpdmVcbiAqIGZ1bmN0aW9ucyBhcyBwcm90b3R5cGUgc2V0dXAgdXNpbmcgbm9ybWFsIEphdmFTY3JpcHQgZG9lcyBub3Qgd29yayBhc1xuICogZXhwZWN0ZWQgZHVyaW5nIGJvb3RzdHJhcHBpbmcgKHNlZSBtaXJyb3IuanMgaW4gcjExNDkwMykuXG4gKlxuICogQHBhcmFtIHtmdW5jdGlvbn0gY3RvciBDb25zdHJ1Y3RvciBmdW5jdGlvbiB3aGljaCBuZWVkcyB0byBpbmhlcml0IHRoZVxuICogICAgIHByb3RvdHlwZS5cbiAqIEBwYXJhbSB7ZnVuY3Rpb259IHN1cGVyQ3RvciBDb25zdHJ1Y3RvciBmdW5jdGlvbiB0byBpbmhlcml0IHByb3RvdHlwZSBmcm9tLlxuICovXG5pbXBvcnQgaW5oZXJpdHMgZnJvbSAnLi9pbmhlcml0cyc7XG5leHBvcnQge2luaGVyaXRzfVxuXG5leHBvcnQgZnVuY3Rpb24gX2V4dGVuZChvcmlnaW4sIGFkZCkge1xuICAvLyBEb24ndCBkbyBhbnl0aGluZyBpZiBhZGQgaXNuJ3QgYW4gb2JqZWN0XG4gIGlmICghYWRkIHx8ICFpc09iamVjdChhZGQpKSByZXR1cm4gb3JpZ2luO1xuXG4gIHZhciBrZXlzID0gT2JqZWN0LmtleXMoYWRkKTtcbiAgdmFyIGkgPSBrZXlzLmxlbmd0aDtcbiAgd2hpbGUgKGktLSkge1xuICAgIG9yaWdpbltrZXlzW2ldXSA9IGFkZFtrZXlzW2ldXTtcbiAgfVxuICByZXR1cm4gb3JpZ2luO1xufTtcblxuZnVuY3Rpb24gaGFzT3duUHJvcGVydHkob2JqLCBwcm9wKSB7XG4gIHJldHVybiBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqLCBwcm9wKTtcbn1cblxuZXhwb3J0IGRlZmF1bHQge1xuICBpbmhlcml0czogaW5oZXJpdHMsXG4gIF9leHRlbmQ6IF9leHRlbmQsXG4gIGxvZzogbG9nLFxuICBpc0J1ZmZlcjogaXNCdWZmZXIsXG4gIGlzUHJpbWl0aXZlOiBpc1ByaW1pdGl2ZSxcbiAgaXNGdW5jdGlvbjogaXNGdW5jdGlvbixcbiAgaXNFcnJvcjogaXNFcnJvcixcbiAgaXNEYXRlOiBpc0RhdGUsXG4gIGlzT2JqZWN0OiBpc09iamVjdCxcbiAgaXNSZWdFeHA6IGlzUmVnRXhwLFxuICBpc1VuZGVmaW5lZDogaXNVbmRlZmluZWQsXG4gIGlzU3ltYm9sOiBpc1N5bWJvbCxcbiAgaXNTdHJpbmc6IGlzU3RyaW5nLFxuICBpc051bWJlcjogaXNOdW1iZXIsXG4gIGlzTnVsbE9yVW5kZWZpbmVkOiBpc051bGxPclVuZGVmaW5lZCxcbiAgaXNOdWxsOiBpc051bGwsXG4gIGlzQm9vbGVhbjogaXNCb29sZWFuLFxuICBpc0FycmF5OiBpc0FycmF5LFxuICBpbnNwZWN0OiBpbnNwZWN0LFxuICBkZXByZWNhdGU6IGRlcHJlY2F0ZSxcbiAgZm9ybWF0OiBmb3JtYXQsXG4gIGRlYnVnbG9nOiBkZWJ1Z2xvZ1xufVxuIiwiZXhwb3J0IGRlZmF1bHQge307XG4iLCIvKipcbiAqIE1vZHVsZSBkZXBlbmRlbmNpZXMuXG4gKi9cblxudmFyIHR0eSA9IHJlcXVpcmUoJ3R0eScpO1xudmFyIHV0aWwgPSByZXF1aXJlKCd1dGlsJyk7XG5cbi8qKlxuICogVGhpcyBpcyB0aGUgTm9kZS5qcyBpbXBsZW1lbnRhdGlvbiBvZiBgZGVidWcoKWAuXG4gKlxuICogRXhwb3NlIGBkZWJ1ZygpYCBhcyB0aGUgbW9kdWxlLlxuICovXG5cbmV4cG9ydHMgPSBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vZGVidWcnKTtcbmV4cG9ydHMuaW5pdCA9IGluaXQ7XG5leHBvcnRzLmxvZyA9IGxvZztcbmV4cG9ydHMuZm9ybWF0QXJncyA9IGZvcm1hdEFyZ3M7XG5leHBvcnRzLnNhdmUgPSBzYXZlO1xuZXhwb3J0cy5sb2FkID0gbG9hZDtcbmV4cG9ydHMudXNlQ29sb3JzID0gdXNlQ29sb3JzO1xuXG4vKipcbiAqIENvbG9ycy5cbiAqL1xuXG5leHBvcnRzLmNvbG9ycyA9IFs2LCAyLCAzLCA0LCA1LCAxXTtcblxuLyoqXG4gKiBCdWlsZCB1cCB0aGUgZGVmYXVsdCBgaW5zcGVjdE9wdHNgIG9iamVjdCBmcm9tIHRoZSBlbnZpcm9ubWVudCB2YXJpYWJsZXMuXG4gKlxuICogICAkIERFQlVHX0NPTE9SUz1ubyBERUJVR19ERVBUSD0xMCBERUJVR19TSE9XX0hJRERFTj1lbmFibGVkIG5vZGUgc2NyaXB0LmpzXG4gKi9cblxuZXhwb3J0cy5pbnNwZWN0T3B0cyA9IE9iamVjdC5rZXlzKHByb2Nlc3MuZW52KS5maWx0ZXIoZnVuY3Rpb24gKGtleSkge1xuICByZXR1cm4gL15kZWJ1Z18vaS50ZXN0KGtleSk7XG59KS5yZWR1Y2UoZnVuY3Rpb24gKG9iaiwga2V5KSB7XG4gIC8vIGNhbWVsLWNhc2VcbiAgdmFyIHByb3AgPSBrZXlcbiAgICAuc3Vic3RyaW5nKDYpXG4gICAgLnRvTG93ZXJDYXNlKClcbiAgICAucmVwbGFjZSgvXyhbYS16XSkvZywgZnVuY3Rpb24gKF8sIGspIHsgcmV0dXJuIGsudG9VcHBlckNhc2UoKSB9KTtcblxuICAvLyBjb2VyY2Ugc3RyaW5nIHZhbHVlIGludG8gSlMgdmFsdWVcbiAgdmFyIHZhbCA9IHByb2Nlc3MuZW52W2tleV07XG4gIGlmICgvXih5ZXN8b258dHJ1ZXxlbmFibGVkKSQvaS50ZXN0KHZhbCkpIHZhbCA9IHRydWU7XG4gIGVsc2UgaWYgKC9eKG5vfG9mZnxmYWxzZXxkaXNhYmxlZCkkL2kudGVzdCh2YWwpKSB2YWwgPSBmYWxzZTtcbiAgZWxzZSBpZiAodmFsID09PSAnbnVsbCcpIHZhbCA9IG51bGw7XG4gIGVsc2UgdmFsID0gTnVtYmVyKHZhbCk7XG5cbiAgb2JqW3Byb3BdID0gdmFsO1xuICByZXR1cm4gb2JqO1xufSwge30pO1xuXG4vKipcbiAqIFRoZSBmaWxlIGRlc2NyaXB0b3IgdG8gd3JpdGUgdGhlIGBkZWJ1ZygpYCBjYWxscyB0by5cbiAqIFNldCB0aGUgYERFQlVHX0ZEYCBlbnYgdmFyaWFibGUgdG8gb3ZlcnJpZGUgd2l0aCBhbm90aGVyIHZhbHVlLiBpLmUuOlxuICpcbiAqICAgJCBERUJVR19GRD0zIG5vZGUgc2NyaXB0LmpzIDM+ZGVidWcubG9nXG4gKi9cblxudmFyIGZkID0gcGFyc2VJbnQocHJvY2Vzcy5lbnYuREVCVUdfRkQsIDEwKSB8fCAyO1xuXG5pZiAoMSAhPT0gZmQgJiYgMiAhPT0gZmQpIHtcbiAgdXRpbC5kZXByZWNhdGUoZnVuY3Rpb24oKXt9LCAnZXhjZXB0IGZvciBzdGRlcnIoMikgYW5kIHN0ZG91dCgxKSwgYW55IG90aGVyIHVzYWdlIG9mIERFQlVHX0ZEIGlzIGRlcHJlY2F0ZWQuIE92ZXJyaWRlIGRlYnVnLmxvZyBpZiB5b3Ugd2FudCB0byB1c2UgYSBkaWZmZXJlbnQgbG9nIGZ1bmN0aW9uIChodHRwczovL2dpdC5pby9kZWJ1Z19mZCknKSgpXG59XG5cbnZhciBzdHJlYW0gPSAxID09PSBmZCA/IHByb2Nlc3Muc3Rkb3V0IDpcbiAgICAgICAgICAgICAyID09PSBmZCA/IHByb2Nlc3Muc3RkZXJyIDpcbiAgICAgICAgICAgICBjcmVhdGVXcml0YWJsZVN0ZGlvU3RyZWFtKGZkKTtcblxuLyoqXG4gKiBJcyBzdGRvdXQgYSBUVFk/IENvbG9yZWQgb3V0cHV0IGlzIGVuYWJsZWQgd2hlbiBgdHJ1ZWAuXG4gKi9cblxuZnVuY3Rpb24gdXNlQ29sb3JzKCkge1xuICByZXR1cm4gJ2NvbG9ycycgaW4gZXhwb3J0cy5pbnNwZWN0T3B0c1xuICAgID8gQm9vbGVhbihleHBvcnRzLmluc3BlY3RPcHRzLmNvbG9ycylcbiAgICA6IHR0eS5pc2F0dHkoZmQpO1xufVxuXG4vKipcbiAqIE1hcCAlbyB0byBgdXRpbC5pbnNwZWN0KClgLCBhbGwgb24gYSBzaW5nbGUgbGluZS5cbiAqL1xuXG5leHBvcnRzLmZvcm1hdHRlcnMubyA9IGZ1bmN0aW9uKHYpIHtcbiAgdGhpcy5pbnNwZWN0T3B0cy5jb2xvcnMgPSB0aGlzLnVzZUNvbG9ycztcbiAgcmV0dXJuIHV0aWwuaW5zcGVjdCh2LCB0aGlzLmluc3BlY3RPcHRzKVxuICAgIC5zcGxpdCgnXFxuJykubWFwKGZ1bmN0aW9uKHN0cikge1xuICAgICAgcmV0dXJuIHN0ci50cmltKClcbiAgICB9KS5qb2luKCcgJyk7XG59O1xuXG4vKipcbiAqIE1hcCAlbyB0byBgdXRpbC5pbnNwZWN0KClgLCBhbGxvd2luZyBtdWx0aXBsZSBsaW5lcyBpZiBuZWVkZWQuXG4gKi9cblxuZXhwb3J0cy5mb3JtYXR0ZXJzLk8gPSBmdW5jdGlvbih2KSB7XG4gIHRoaXMuaW5zcGVjdE9wdHMuY29sb3JzID0gdGhpcy51c2VDb2xvcnM7XG4gIHJldHVybiB1dGlsLmluc3BlY3QodiwgdGhpcy5pbnNwZWN0T3B0cyk7XG59O1xuXG4vKipcbiAqIEFkZHMgQU5TSSBjb2xvciBlc2NhcGUgY29kZXMgaWYgZW5hYmxlZC5cbiAqXG4gKiBAYXBpIHB1YmxpY1xuICovXG5cbmZ1bmN0aW9uIGZvcm1hdEFyZ3MoYXJncykge1xuICB2YXIgbmFtZSA9IHRoaXMubmFtZXNwYWNlO1xuICB2YXIgdXNlQ29sb3JzID0gdGhpcy51c2VDb2xvcnM7XG5cbiAgaWYgKHVzZUNvbG9ycykge1xuICAgIHZhciBjID0gdGhpcy5jb2xvcjtcbiAgICB2YXIgcHJlZml4ID0gJyAgXFx1MDAxYlszJyArIGMgKyAnOzFtJyArIG5hbWUgKyAnICcgKyAnXFx1MDAxYlswbSc7XG5cbiAgICBhcmdzWzBdID0gcHJlZml4ICsgYXJnc1swXS5zcGxpdCgnXFxuJykuam9pbignXFxuJyArIHByZWZpeCk7XG4gICAgYXJncy5wdXNoKCdcXHUwMDFiWzMnICsgYyArICdtKycgKyBleHBvcnRzLmh1bWFuaXplKHRoaXMuZGlmZikgKyAnXFx1MDAxYlswbScpO1xuICB9IGVsc2Uge1xuICAgIGFyZ3NbMF0gPSBuZXcgRGF0ZSgpLnRvVVRDU3RyaW5nKClcbiAgICAgICsgJyAnICsgbmFtZSArICcgJyArIGFyZ3NbMF07XG4gIH1cbn1cblxuLyoqXG4gKiBJbnZva2VzIGB1dGlsLmZvcm1hdCgpYCB3aXRoIHRoZSBzcGVjaWZpZWQgYXJndW1lbnRzIGFuZCB3cml0ZXMgdG8gYHN0cmVhbWAuXG4gKi9cblxuZnVuY3Rpb24gbG9nKCkge1xuICByZXR1cm4gc3RyZWFtLndyaXRlKHV0aWwuZm9ybWF0LmFwcGx5KHV0aWwsIGFyZ3VtZW50cykgKyAnXFxuJyk7XG59XG5cbi8qKlxuICogU2F2ZSBgbmFtZXNwYWNlc2AuXG4gKlxuICogQHBhcmFtIHtTdHJpbmd9IG5hbWVzcGFjZXNcbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cbmZ1bmN0aW9uIHNhdmUobmFtZXNwYWNlcykge1xuICBpZiAobnVsbCA9PSBuYW1lc3BhY2VzKSB7XG4gICAgLy8gSWYgeW91IHNldCBhIHByb2Nlc3MuZW52IGZpZWxkIHRvIG51bGwgb3IgdW5kZWZpbmVkLCBpdCBnZXRzIGNhc3QgdG8gdGhlXG4gICAgLy8gc3RyaW5nICdudWxsJyBvciAndW5kZWZpbmVkJy4gSnVzdCBkZWxldGUgaW5zdGVhZC5cbiAgICBkZWxldGUgcHJvY2Vzcy5lbnYuREVCVUc7XG4gIH0gZWxzZSB7XG4gICAgcHJvY2Vzcy5lbnYuREVCVUcgPSBuYW1lc3BhY2VzO1xuICB9XG59XG5cbi8qKlxuICogTG9hZCBgbmFtZXNwYWNlc2AuXG4gKlxuICogQHJldHVybiB7U3RyaW5nfSByZXR1cm5zIHRoZSBwcmV2aW91c2x5IHBlcnNpc3RlZCBkZWJ1ZyBtb2Rlc1xuICogQGFwaSBwcml2YXRlXG4gKi9cblxuZnVuY3Rpb24gbG9hZCgpIHtcbiAgcmV0dXJuIHByb2Nlc3MuZW52LkRFQlVHO1xufVxuXG4vKipcbiAqIENvcGllZCBmcm9tIGBub2RlL3NyYy9ub2RlLmpzYC5cbiAqXG4gKiBYWFg6IEl0J3MgbGFtZSB0aGF0IG5vZGUgZG9lc24ndCBleHBvc2UgdGhpcyBBUEkgb3V0LW9mLXRoZS1ib3guIEl0IGFsc29cbiAqIHJlbGllcyBvbiB0aGUgdW5kb2N1bWVudGVkIGB0dHlfd3JhcC5ndWVzc0hhbmRsZVR5cGUoKWAgd2hpY2ggaXMgYWxzbyBsYW1lLlxuICovXG5cbmZ1bmN0aW9uIGNyZWF0ZVdyaXRhYmxlU3RkaW9TdHJlYW0gKGZkKSB7XG4gIHZhciBzdHJlYW07XG4gIHZhciB0dHlfd3JhcCA9IHByb2Nlc3MuYmluZGluZygndHR5X3dyYXAnKTtcblxuICAvLyBOb3RlIHN0cmVhbS5fdHlwZSBpcyB1c2VkIGZvciB0ZXN0LW1vZHVsZS1sb2FkLWxpc3QuanNcblxuICBzd2l0Y2ggKHR0eV93cmFwLmd1ZXNzSGFuZGxlVHlwZShmZCkpIHtcbiAgICBjYXNlICdUVFknOlxuICAgICAgc3RyZWFtID0gbmV3IHR0eS5Xcml0ZVN0cmVhbShmZCk7XG4gICAgICBzdHJlYW0uX3R5cGUgPSAndHR5JztcblxuICAgICAgLy8gSGFjayB0byBoYXZlIHN0cmVhbSBub3Qga2VlcCB0aGUgZXZlbnQgbG9vcCBhbGl2ZS5cbiAgICAgIC8vIFNlZSBodHRwczovL2dpdGh1Yi5jb20vam95ZW50L25vZGUvaXNzdWVzLzE3MjZcbiAgICAgIGlmIChzdHJlYW0uX2hhbmRsZSAmJiBzdHJlYW0uX2hhbmRsZS51bnJlZikge1xuICAgICAgICBzdHJlYW0uX2hhbmRsZS51bnJlZigpO1xuICAgICAgfVxuICAgICAgYnJlYWs7XG5cbiAgICBjYXNlICdGSUxFJzpcbiAgICAgIHZhciBmcyA9IHJlcXVpcmUoJ2ZzJyk7XG4gICAgICBzdHJlYW0gPSBuZXcgZnMuU3luY1dyaXRlU3RyZWFtKGZkLCB7IGF1dG9DbG9zZTogZmFsc2UgfSk7XG4gICAgICBzdHJlYW0uX3R5cGUgPSAnZnMnO1xuICAgICAgYnJlYWs7XG5cbiAgICBjYXNlICdQSVBFJzpcbiAgICBjYXNlICdUQ1AnOlxuICAgICAgdmFyIG5ldCA9IHJlcXVpcmUoJ25ldCcpO1xuICAgICAgc3RyZWFtID0gbmV3IG5ldC5Tb2NrZXQoe1xuICAgICAgICBmZDogZmQsXG4gICAgICAgIHJlYWRhYmxlOiBmYWxzZSxcbiAgICAgICAgd3JpdGFibGU6IHRydWVcbiAgICAgIH0pO1xuXG4gICAgICAvLyBGSVhNRSBTaG91bGQgcHJvYmFibHkgaGF2ZSBhbiBvcHRpb24gaW4gbmV0LlNvY2tldCB0byBjcmVhdGUgYVxuICAgICAgLy8gc3RyZWFtIGZyb20gYW4gZXhpc3RpbmcgZmQgd2hpY2ggaXMgd3JpdGFibGUgb25seS4gQnV0IGZvciBub3dcbiAgICAgIC8vIHdlJ2xsIGp1c3QgYWRkIHRoaXMgaGFjayBhbmQgc2V0IHRoZSBgcmVhZGFibGVgIG1lbWJlciB0byBmYWxzZS5cbiAgICAgIC8vIFRlc3Q6IC4vbm9kZSB0ZXN0L2ZpeHR1cmVzL2VjaG8uanMgPCAvZXRjL3Bhc3N3ZFxuICAgICAgc3RyZWFtLnJlYWRhYmxlID0gZmFsc2U7XG4gICAgICBzdHJlYW0ucmVhZCA9IG51bGw7XG4gICAgICBzdHJlYW0uX3R5cGUgPSAncGlwZSc7XG5cbiAgICAgIC8vIEZJWE1FIEhhY2sgdG8gaGF2ZSBzdHJlYW0gbm90IGtlZXAgdGhlIGV2ZW50IGxvb3AgYWxpdmUuXG4gICAgICAvLyBTZWUgaHR0cHM6Ly9naXRodWIuY29tL2pveWVudC9ub2RlL2lzc3Vlcy8xNzI2XG4gICAgICBpZiAoc3RyZWFtLl9oYW5kbGUgJiYgc3RyZWFtLl9oYW5kbGUudW5yZWYpIHtcbiAgICAgICAgc3RyZWFtLl9oYW5kbGUudW5yZWYoKTtcbiAgICAgIH1cbiAgICAgIGJyZWFrO1xuXG4gICAgZGVmYXVsdDpcbiAgICAgIC8vIFByb2JhYmx5IGFuIGVycm9yIG9uIGluIHV2X2d1ZXNzX2hhbmRsZSgpXG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ0ltcGxlbWVudCBtZS4gVW5rbm93biBzdHJlYW0gZmlsZSB0eXBlIScpO1xuICB9XG5cbiAgLy8gRm9yIHN1cHBvcnRpbmcgbGVnYWN5IEFQSSB3ZSBwdXQgdGhlIEZEIGhlcmUuXG4gIHN0cmVhbS5mZCA9IGZkO1xuXG4gIHN0cmVhbS5faXNTdGRpbyA9IHRydWU7XG5cbiAgcmV0dXJuIHN0cmVhbTtcbn1cblxuLyoqXG4gKiBJbml0IGxvZ2ljIGZvciBgZGVidWdgIGluc3RhbmNlcy5cbiAqXG4gKiBDcmVhdGUgYSBuZXcgYGluc3BlY3RPcHRzYCBvYmplY3QgaW4gY2FzZSBgdXNlQ29sb3JzYCBpcyBzZXRcbiAqIGRpZmZlcmVudGx5IGZvciBhIHBhcnRpY3VsYXIgYGRlYnVnYCBpbnN0YW5jZS5cbiAqL1xuXG5mdW5jdGlvbiBpbml0IChkZWJ1Zykge1xuICBkZWJ1Zy5pbnNwZWN0T3B0cyA9IHt9O1xuXG4gIHZhciBrZXlzID0gT2JqZWN0LmtleXMoZXhwb3J0cy5pbnNwZWN0T3B0cyk7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwga2V5cy5sZW5ndGg7IGkrKykge1xuICAgIGRlYnVnLmluc3BlY3RPcHRzW2tleXNbaV1dID0gZXhwb3J0cy5pbnNwZWN0T3B0c1trZXlzW2ldXTtcbiAgfVxufVxuXG4vKipcbiAqIEVuYWJsZSBuYW1lc3BhY2VzIGxpc3RlZCBpbiBgcHJvY2Vzcy5lbnYuREVCVUdgIGluaXRpYWxseS5cbiAqL1xuXG5leHBvcnRzLmVuYWJsZShsb2FkKCkpO1xuIiwiLyoqXG4gKiBEZXRlY3QgRWxlY3Ryb24gcmVuZGVyZXIgcHJvY2Vzcywgd2hpY2ggaXMgbm9kZSwgYnV0IHdlIHNob3VsZFxuICogdHJlYXQgYXMgYSBicm93c2VyLlxuICovXG5cbmlmICh0eXBlb2YgcHJvY2VzcyAhPT0gJ3VuZGVmaW5lZCcgJiYgcHJvY2Vzcy50eXBlID09PSAncmVuZGVyZXInKSB7XG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9icm93c2VyLmpzJyk7XG59IGVsc2Uge1xuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vbm9kZS5qcycpO1xufVxuIiwiJ3VzZSBzdHJpY3QnO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuXG52YXIgX2dldFByb3RvdHlwZU9mID0gcmVxdWlyZSgnYmFiZWwtcnVudGltZS9jb3JlLWpzL29iamVjdC9nZXQtcHJvdG90eXBlLW9mJyk7XG5cbnZhciBfZ2V0UHJvdG90eXBlT2YyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfZ2V0UHJvdG90eXBlT2YpO1xuXG52YXIgX2NsYXNzQ2FsbENoZWNrMiA9IHJlcXVpcmUoJ2JhYmVsLXJ1bnRpbWUvaGVscGVycy9jbGFzc0NhbGxDaGVjaycpO1xuXG52YXIgX2NsYXNzQ2FsbENoZWNrMyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2NsYXNzQ2FsbENoZWNrMik7XG5cbnZhciBfY3JlYXRlQ2xhc3MyID0gcmVxdWlyZSgnYmFiZWwtcnVudGltZS9oZWxwZXJzL2NyZWF0ZUNsYXNzJyk7XG5cbnZhciBfY3JlYXRlQ2xhc3MzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfY3JlYXRlQ2xhc3MyKTtcblxudmFyIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuMiA9IHJlcXVpcmUoJ2JhYmVsLXJ1bnRpbWUvaGVscGVycy9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuJyk7XG5cbnZhciBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybjMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuMik7XG5cbnZhciBfaW5oZXJpdHMyID0gcmVxdWlyZSgnYmFiZWwtcnVudGltZS9oZWxwZXJzL2luaGVyaXRzJyk7XG5cbnZhciBfaW5oZXJpdHMzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfaW5oZXJpdHMyKTtcblxudmFyIF9kZWJ1ZyA9IHJlcXVpcmUoJ2RlYnVnJyk7XG5cbnZhciBfZGVidWcyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfZGVidWcpO1xuXG52YXIgX1NjaGVkdWxpbmdRdWV1ZTIgPSByZXF1aXJlKCcuLi9jb3JlL1NjaGVkdWxpbmdRdWV1ZScpO1xuXG52YXIgX1NjaGVkdWxpbmdRdWV1ZTMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9TY2hlZHVsaW5nUXVldWUyKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxudmFyIGxvZyA9ICgwLCBfZGVidWcyLmRlZmF1bHQpKCd3YXZlc2pzOm1hc3RlcnMnKTtcblxuZnVuY3Rpb24gaXNGdW5jdGlvbihmdW5jdGlvblRvQ2hlY2spIHtcbiAgcmV0dXJuIGZ1bmN0aW9uVG9DaGVjayAmJiB7fS50b1N0cmluZy5jYWxsKGZ1bmN0aW9uVG9DaGVjaykgPT09ICdbb2JqZWN0IEZ1bmN0aW9uXSc7XG59XG5cbi8qKlxuICogVGhlIGBTY2hlZHVsZXJgIGNsYXNzIGltcGxlbWVudHMgYSBtYXN0ZXIgZm9yIGBUaW1lRW5naW5lYCBpbnN0YW5jZXNcbiAqIHRoYXQgaW1wbGVtZW50IHRoZSAqc2NoZWR1bGVkKiBpbnRlcmZhY2UgKHN1Y2ggYXMgdGhlIGBNZXRyb25vbWVgIGFuZFxuICogYEdyYW51bGFyRW5naW5lYCkuXG4gKlxuICogQSBgU2NoZWR1bGVyYCBjYW4gYWxzbyBzY2hlZHVsZSBzaW1wbGUgY2FsbGJhY2sgZnVuY3Rpb25zLlxuICogVGhlIGNsYXNzIGlzIGJhc2VkIG9uIHJlY3Vyc2l2ZSBjYWxscyB0byBgc2V0VGltZW91dGAgYW5kIHVzZXMgdGhlIHRpbWVcbiAqIHJldHVybmVkIGJ5IHRoZSBgZ2V0VGltZUZ1bmN0aW9uYCBwYXNzZWQgYXMgZmlyc3QgYXJndW1lbnQgYXMgYSBsb2dpY2FsIHRpbWVcbiAqIHBhc3NlZCB0byB0aGUgYGFkdmFuY2VUaW1lYCBtZXRob2RzIG9mIHRoZSBzY2hlZHVsZWQgZW5naW5lcyBvciB0byB0aGVcbiAqIHNjaGVkdWxlZCBjYWxsYmFjayBmdW5jdGlvbnMuXG4gKiBJdCBleHRlbmRzIHRoZSBgU2NoZWR1bGluZ1F1ZXVlYCBjbGFzcyB0aGF0IGl0c2VsZiBpbmNsdWRlcyBhIGBQcmlvcml0eVF1ZXVlYFxuICogdG8gYXNzdXJlIHRoZSBvcmRlciBvZiB0aGUgc2NoZWR1bGVkIGVuZ2luZXMgKHNlZSBgU2ltcGxlU2NoZWR1bGVyYCBmb3IgYVxuICogc2ltcGxpZmllZCBzY2hlZHVsZXIgaW1wbGVtZW50YXRpb24gd2l0aG91dCBgUHJpb3JpdHlRdWV1ZWApLlxuICpcbiAqIHtAbGluayBodHRwczovL3Jhd2dpdC5jb20vd2F2ZXNqcy93YXZlcy1tYXN0ZXJzL21hc3Rlci9leGFtcGxlcy9zY2hlZHVsZXIvaW5kZXguaHRtbH1cbiAqXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBnZXRUaW1lRnVuY3Rpb24gLSBGdW5jdGlvbiB0aGF0IG11c3QgcmV0dXJuIGEgdGltZSBpbiBzZWNvbmQuXG4gKiBAcGFyYW0ge09iamVjdH0gW29wdGlvbnM9e31dIC0gZGVmYXVsdCBvcHRpb25zLlxuICogQHBhcmFtIHtOdW1iZXJ9IFtvcHRpb25zLnBlcmlvZD0wLjAyNV0gLSBwZXJpb2Qgb2YgdGhlIHNjaGVkdWxlci5cbiAqIEBwYXJhbSB7TnVtYmVyfSBbb3B0aW9ucy5sb29rYWhlYWQ9MC4xXSAtIGxvb2thaGVhZCBvZiB0aGUgc2NoZWR1bGVyLlxuICogQHBhcmFtIHtOdW1iZXJ9IFtvcHRpb25zLmN1cnJlbnRUaW1lVG9BdWRpb1RpbWVGdW5jdGlvbl0gLSBmdW5jdGlvbiB0aGF0IGNvbnZlcnRcbiAqICBgY3VycmVudFRpbWVgIHRvIGBhdWRpb1RpbWVgLiBEZWZhdWx0cyB0byBuby1vcC5cbiAqXG4gKiBAc2VlIFRpbWVFbmdpbmVcbiAqIEBzZWUgU2ltcGxlU2NoZWR1bGVyXG4gKlxuICogQGV4YW1wbGVcbiAqIGltcG9ydCAqIGFzIG1hc3RlcnMgZnJvbSAnd2F2ZXMtbWFzdGVycyc7XG4gKlxuICogY29uc3QgZ2V0VGltZUZ1bmN0aW9uID0gKCkgPT4gcHJlZm9ybWFuY2Uubm93KCkgLyAxMDAwO1xuICogY29uc3Qgc2NoZWR1bGVyID0gbmV3IG1hc3RlcnMuU2NoZWR1bGVyKGdldFRpbWVGdW5jdGlvbik7XG4gKlxuICogc2NoZWR1bGVyLmFkZChteUVuZ2luZSk7XG4gKi9cblxudmFyIFNjaGVkdWxlciA9IGZ1bmN0aW9uIChfU2NoZWR1bGluZ1F1ZXVlKSB7XG4gICgwLCBfaW5oZXJpdHMzLmRlZmF1bHQpKFNjaGVkdWxlciwgX1NjaGVkdWxpbmdRdWV1ZSk7XG5cbiAgZnVuY3Rpb24gU2NoZWR1bGVyKGdldFRpbWVGdW5jdGlvbikge1xuICAgIHZhciBvcHRpb25zID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMV0gOiB7fTtcbiAgICAoMCwgX2NsYXNzQ2FsbENoZWNrMy5kZWZhdWx0KSh0aGlzLCBTY2hlZHVsZXIpO1xuXG4gICAgdmFyIF90aGlzID0gKDAsIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuMy5kZWZhdWx0KSh0aGlzLCAoU2NoZWR1bGVyLl9fcHJvdG9fXyB8fCAoMCwgX2dldFByb3RvdHlwZU9mMi5kZWZhdWx0KShTY2hlZHVsZXIpKS5jYWxsKHRoaXMpKTtcblxuICAgIGlmICghaXNGdW5jdGlvbihnZXRUaW1lRnVuY3Rpb24pKSB0aHJvdyBuZXcgRXJyb3IoJ0ludmFsaWQgYXJndW1lbnQgYGdldFRpbWVGdW5jdGlvbmAnKTtcblxuICAgIF90aGlzLmdldFRpbWVGdW5jdGlvbiA9IGdldFRpbWVGdW5jdGlvbjtcblxuICAgIF90aGlzLl9fY3VycmVudFRpbWUgPSBudWxsO1xuICAgIF90aGlzLl9fbmV4dFRpbWUgPSBJbmZpbml0eTtcbiAgICBfdGhpcy5fX3RpbWVvdXQgPSBudWxsO1xuXG4gICAgLyoqXG4gICAgICogc2NoZWR1bGVyIChzZXRUaW1lb3V0KSBwZXJpb2RcbiAgICAgKiBAdHlwZSB7TnVtYmVyfVxuICAgICAqIEBuYW1lIHBlcmlvZFxuICAgICAqIEBtZW1iZXJvZiBTY2hlZHVsZXJcbiAgICAgKiBAaW5zdGFuY2VcbiAgICAgKi9cbiAgICBfdGhpcy5wZXJpb2QgPSBvcHRpb25zLnBlcmlvZCB8fCAwLjAyNTtcblxuICAgIC8qKlxuICAgICAqIHNjaGVkdWxlciBsb29rYWhlYWQgdGltZSAoPiBwZXJpb2QpXG4gICAgICogQHR5cGUge051bWJlcn1cbiAgICAgKiBAbmFtZSBsb29rYWhlYWRcbiAgICAgKiBAbWVtYmVyb2YgU2NoZWR1bGVyXG4gICAgICogQGluc3RhbmNlXG4gICAgICovXG4gICAgX3RoaXMubG9va2FoZWFkID0gb3B0aW9ucy5sb29rYWhlYWQgfHwgMC4xO1xuXG4gICAgX3RoaXMuX2N1cnJlbnRUaW1lVG9BdWRpb1RpbWVGdW5jdGlvbiA9IG9wdGlvbnMuY3VycmVudFRpbWVUb0F1ZGlvVGltZUZ1bmN0aW9uIHx8IGZ1bmN0aW9uIChjdXJyZW50VGltZSkge1xuICAgICAgcmV0dXJuIGN1cnJlbnRUaW1lO1xuICAgIH07XG4gICAgcmV0dXJuIF90aGlzO1xuICB9XG5cbiAgLy8gc2V0VGltZW91dCBzY2hlZHVsaW5nIGxvb3BcblxuXG4gICgwLCBfY3JlYXRlQ2xhc3MzLmRlZmF1bHQpKFNjaGVkdWxlciwgW3tcbiAgICBrZXk6ICdfX3RpY2snLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBfX3RpY2soKSB7XG4gICAgICB2YXIgY3VycmVudFRpbWUgPSB0aGlzLmdldFRpbWVGdW5jdGlvbigpO1xuICAgICAgdmFyIHRpbWUgPSB0aGlzLl9fbmV4dFRpbWU7XG5cbiAgICAgIHRoaXMuX190aW1lb3V0ID0gbnVsbDtcblxuICAgICAgd2hpbGUgKHRpbWUgPD0gY3VycmVudFRpbWUgKyB0aGlzLmxvb2thaGVhZCkge1xuICAgICAgICB0aGlzLl9fY3VycmVudFRpbWUgPSB0aW1lO1xuICAgICAgICB0aW1lID0gdGhpcy5hZHZhbmNlVGltZSh0aW1lKTtcbiAgICAgIH1cblxuICAgICAgdGhpcy5fX2N1cnJlbnRUaW1lID0gbnVsbDtcbiAgICAgIHRoaXMucmVzZXRUaW1lKHRpbWUpO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ3Jlc2V0VGltZScsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHJlc2V0VGltZSgpIHtcbiAgICAgIHZhciBfdGhpczIgPSB0aGlzO1xuXG4gICAgICB2YXIgdGltZSA9IGFyZ3VtZW50cy5sZW5ndGggPiAwICYmIGFyZ3VtZW50c1swXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzBdIDogdGhpcy5jdXJyZW50VGltZTtcblxuICAgICAgaWYgKHRoaXMubWFzdGVyKSB7XG4gICAgICAgIHRoaXMubWFzdGVyLnJlc2V0KHRoaXMsIHRpbWUpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaWYgKHRoaXMuX190aW1lb3V0KSB7XG4gICAgICAgICAgY2xlYXJUaW1lb3V0KHRoaXMuX190aW1lb3V0KTtcbiAgICAgICAgICB0aGlzLl9fdGltZW91dCA9IG51bGw7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAodGltZSAhPT0gSW5maW5pdHkpIHtcbiAgICAgICAgICBpZiAodGhpcy5fX25leHRUaW1lID09PSBJbmZpbml0eSkgbG9nKCdTY2hlZHVsZXIgU3RhcnQnKTtcblxuICAgICAgICAgIHZhciB0aW1lT3V0RGVsYXkgPSBNYXRoLm1heCh0aW1lIC0gdGhpcy5sb29rYWhlYWQgLSB0aGlzLmdldFRpbWVGdW5jdGlvbigpLCB0aGlzLnBlcmlvZCk7XG5cbiAgICAgICAgICB0aGlzLl9fdGltZW91dCA9IHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgX3RoaXMyLl9fdGljaygpO1xuICAgICAgICAgIH0sIE1hdGguY2VpbCh0aW1lT3V0RGVsYXkgKiAxMDAwKSk7XG4gICAgICAgIH0gZWxzZSBpZiAodGhpcy5fX25leHRUaW1lICE9PSBJbmZpbml0eSkge1xuICAgICAgICAgIGxvZygnU2NoZWR1bGVyIFN0b3AnKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMuX19uZXh0VGltZSA9IHRpbWU7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogU2NoZWR1bGVyIGN1cnJlbnQgbG9naWNhbCB0aW1lLlxuICAgICAqXG4gICAgICogQG5hbWUgY3VycmVudFRpbWVcbiAgICAgKiBAdHlwZSB7TnVtYmVyfVxuICAgICAqIEBtZW1iZXJvZiBTY2hlZHVsZXJcbiAgICAgKiBAaW5zdGFuY2VcbiAgICAgKi9cblxuICB9LCB7XG4gICAga2V5OiAnY3VycmVudFRpbWUnLFxuICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgLy8gQG5vdGUgLSBjYW4gdGhpcyByZWFsbHkgaGFwcGVuLCBhbmQgaWYgeWVzLCBpbiB3aGljaCBjYXNlP1xuICAgICAgaWYgKHRoaXMubWFzdGVyKSByZXR1cm4gdGhpcy5tYXN0ZXIuY3VycmVudFRpbWU7XG5cbiAgICAgIHJldHVybiB0aGlzLl9fY3VycmVudFRpbWUgfHwgdGhpcy5nZXRUaW1lRnVuY3Rpb24oKSArIHRoaXMubG9va2FoZWFkO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFNjaGVkdWxlciBjdXJyZW50IGF1ZGlvIHRpbWUgYWNjb3JkaW5nIHRvIGBjdXJyZW50VGltZWBcbiAgICAgKlxuICAgICAqIEBuYW1lIGF1ZGlvVGltZVxuICAgICAqIEB0eXBlIHtOdW1iZXJ9XG4gICAgICogQG1lbWJlcmlmIFNjaGVkdWxlclxuICAgICAqIEBpbnN0YW5jZVxuICAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6ICdhdWRpb1RpbWUnLFxuICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgLy8gQG5vdGUgLSBhZGQgdGhpcyBhcyBpblxuICAgICAgaWYgKHRoaXMubWFzdGVyKSByZXR1cm4gdGhpcy5tYXN0ZXIuYXVkaW9UaW1lO1xuXG4gICAgICByZXR1cm4gdGhpcy5fY3VycmVudFRpbWVUb0F1ZGlvVGltZUZ1bmN0aW9uKHRoaXMuY3VycmVudFRpbWUpO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ2N1cnJlbnRQb3NpdGlvbicsXG4gICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICB2YXIgbWFzdGVyID0gdGhpcy5tYXN0ZXI7XG5cbiAgICAgIGlmIChtYXN0ZXIgJiYgbWFzdGVyLmN1cnJlbnRQb3NpdGlvbiAhPT0gdW5kZWZpbmVkKSByZXR1cm4gbWFzdGVyLmN1cnJlbnRQb3NpdGlvbjtcblxuICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICB9XG5cbiAgICAvLyBpbmhlcml0ZWQgZnJvbSBzY2hlZHVsaW5nIHF1ZXVlXG4gICAgLyoqXG4gICAgICogQWRkIGEgVGltZUVuZ2luZSBvciBhIHNpbXBsZSBjYWxsYmFjayBmdW5jdGlvbiB0byB0aGUgc2NoZWR1bGVyIGF0IGFuXG4gICAgICogb3B0aW9uYWxseSBnaXZlbiB0aW1lLiBXaGV0aGVyIHRoZSBhZGQgbWV0aG9kIGlzIGNhbGxlZCB3aXRoIGEgVGltZUVuZ2luZVxuICAgICAqIG9yIGEgY2FsbGJhY2sgZnVuY3Rpb24gaXQgcmV0dXJucyBhIFRpbWVFbmdpbmUgdGhhdCBjYW4gYmUgdXNlZCBhcyBhcmd1bWVudFxuICAgICAqIG9mIHRoZSBtZXRob2RzIHJlbW92ZSBhbmQgcmVzZXRFbmdpbmVUaW1lLiBBIFRpbWVFbmdpbmUgYWRkZWQgdG8gYSBzY2hlZHVsZXJcbiAgICAgKiBoYXMgdG8gaW1wbGVtZW50IHRoZSBzY2hlZHVsZWQgaW50ZXJmYWNlLiBUaGUgY2FsbGJhY2sgZnVuY3Rpb24gYWRkZWQgdG8gYVxuICAgICAqIHNjaGVkdWxlciB3aWxsIGJlIGNhbGxlZCBhdCB0aGUgZ2l2ZW4gdGltZSBhbmQgd2l0aCB0aGUgZ2l2ZW4gdGltZSBhc1xuICAgICAqIGFyZ3VtZW50LiBUaGUgY2FsbGJhY2sgY2FuIHJldHVybiBhIG5ldyBzY2hlZHVsaW5nIHRpbWUgKGkuZS4gdGhlIG5leHRcbiAgICAgKiB0aW1lIHdoZW4gaXQgd2lsbCBiZSBjYWxsZWQpIG9yIGl0IGNhbiByZXR1cm4gSW5maW5pdHkgdG8gc3VzcGVuZCBzY2hlZHVsaW5nXG4gICAgICogd2l0aG91dCByZW1vdmluZyB0aGUgZnVuY3Rpb24gZnJvbSB0aGUgc2NoZWR1bGVyLiBBIGZ1bmN0aW9uIHRoYXQgZG9lc1xuICAgICAqIG5vdCByZXR1cm4gYSB2YWx1ZSAob3IgcmV0dXJucyBudWxsIG9yIDApIGlzIHJlbW92ZWQgZnJvbSB0aGUgc2NoZWR1bGVyXG4gICAgICogYW5kIGNhbm5vdCBiZSB1c2VkIGFzIGFyZ3VtZW50IG9mIHRoZSBtZXRob2RzIHJlbW92ZSBhbmQgcmVzZXRFbmdpbmVUaW1lXG4gICAgICogYW55bW9yZS5cbiAgICAgKlxuICAgICAqIEBuYW1lIGFkZFxuICAgICAqIEBmdW5jdGlvblxuICAgICAqIEBtZW1iZXJvZiBTY2hlZHVsZXJcbiAgICAgKiBAaW5zdGFuY2VcbiAgICAgKiBAcGFyYW0ge1RpbWVFbmdpbmV8RnVuY3Rpb259IGVuZ2luZSAtIEVuZ2luZSB0byBhZGQgdG8gdGhlIHNjaGVkdWxlclxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBbdGltZT10aGlzLmN1cnJlbnRUaW1lXSAtIFNjaGVkdWxlIHRpbWVcbiAgICAgKi9cbiAgICAvKipcbiAgICAgKiBSZW1vdmUgYSBUaW1lRW5naW5lIGZyb20gdGhlIHNjaGVkdWxlciB0aGF0IGhhcyBiZWVuIGFkZGVkIHRvIHRoZVxuICAgICAqIHNjaGVkdWxlciB1c2luZyB0aGUgYWRkIG1ldGhvZC5cbiAgICAgKlxuICAgICAqIEBuYW1lIGFkZFxuICAgICAqIEBmdW5jdGlvblxuICAgICAqIEBtZW1iZXJvZiBTY2hlZHVsZXJcbiAgICAgKiBAaW5zdGFuY2VcbiAgICAgKiBAcGFyYW0ge1RpbWVFbmdpbmV9IGVuZ2luZSAtIEVuZ2luZSB0byByZW1vdmUgZnJvbSB0aGUgc2NoZWR1bGVyXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IFt0aW1lPXRoaXMuY3VycmVudFRpbWVdIC0gU2NoZWR1bGUgdGltZVxuICAgICAqL1xuICAgIC8qKlxuICAgICAqIFJlc2NoZWR1bGUgYSBzY2hlZHVsZWQgdGltZSBlbmdpbmUgYXQgYSBnaXZlbiB0aW1lLlxuICAgICAqXG4gICAgICogQG5hbWUgcmVzZXRFbmdpbmVUaW1lXG4gICAgICogQGZ1bmN0aW9uXG4gICAgICogQG1lbWJlcm9mIFNjaGVkdWxlclxuICAgICAqIEBpbnN0YW5jZVxuICAgICAqIEBwYXJhbSB7VGltZUVuZ2luZX0gZW5naW5lIC0gRW5naW5lIHRvIHJlc2NoZWR1bGVcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gdGltZSAtIFNjaGVkdWxlIHRpbWVcbiAgICAgKi9cbiAgICAvKipcbiAgICAgKiBSZW1vdmUgYWxsIHNjaGVkdWxlZCBjYWxsYmFja3MgYW5kIGVuZ2luZXMgZnJvbSB0aGUgc2NoZWR1bGVyLlxuICAgICAqXG4gICAgICogQG5hbWUgY2xlYXJcbiAgICAgKiBAZnVuY3Rpb25cbiAgICAgKiBAbWVtYmVyb2YgU2NoZWR1bGVyXG4gICAgICogQGluc3RhbmNlXG4gICAgICovXG5cbiAgfV0pO1xuICByZXR1cm4gU2NoZWR1bGVyO1xufShfU2NoZWR1bGluZ1F1ZXVlMy5kZWZhdWx0KTtcblxuZXhwb3J0cy5kZWZhdWx0ID0gU2NoZWR1bGVyO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2NoYXJzZXQ9dXRmLTg7YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSWxOamFHVmtkV3hsY2k1cWN5SmRMQ0p1WVcxbGN5STZXeUpzYjJjaUxDSnBjMFoxYm1OMGFXOXVJaXdpWm5WdVkzUnBiMjVVYjBOb1pXTnJJaXdpZEc5VGRISnBibWNpTENKallXeHNJaXdpVTJOb1pXUjFiR1Z5SWl3aVoyVjBWR2x0WlVaMWJtTjBhVzl1SWl3aWIzQjBhVzl1Y3lJc0lrVnljbTl5SWl3aVgxOWpkWEp5Wlc1MFZHbHRaU0lzSWw5ZmJtVjRkRlJwYldVaUxDSkpibVpwYm1sMGVTSXNJbDlmZEdsdFpXOTFkQ0lzSW5CbGNtbHZaQ0lzSW14dmIydGhhR1ZoWkNJc0lsOWpkWEp5Wlc1MFZHbHRaVlJ2UVhWa2FXOVVhVzFsUm5WdVkzUnBiMjRpTENKamRYSnlaVzUwVkdsdFpWUnZRWFZrYVc5VWFXMWxSblZ1WTNScGIyNGlMQ0pqZFhKeVpXNTBWR2x0WlNJc0luUnBiV1VpTENKaFpIWmhibU5sVkdsdFpTSXNJbkpsYzJWMFZHbHRaU0lzSW0xaGMzUmxjaUlzSW5KbGMyVjBJaXdpWTJ4bFlYSlVhVzFsYjNWMElpd2lkR2x0WlU5MWRFUmxiR0Y1SWl3aVRXRjBhQ0lzSW0xaGVDSXNJbk5sZEZScGJXVnZkWFFpTENKZlgzUnBZMnNpTENKalpXbHNJaXdpWVhWa2FXOVVhVzFsSWl3aVkzVnljbVZ1ZEZCdmMybDBhVzl1SWl3aWRXNWtaV1pwYm1Wa0lpd2lVMk5vWldSMWJHbHVaMUYxWlhWbElsMHNJbTFoY0hCcGJtZHpJam9pT3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenRCUVVGQk96czdPMEZCUTBFN096czdPenRCUVVWQkxFbEJRVTFCTEUxQlFVMHNjVUpCUVUwc2FVSkJRVTRzUTBGQldqczdRVUZGUVN4VFFVRlRReXhWUVVGVUxFTkJRVzlDUXl4bFFVRndRaXhGUVVGeFF6dEJRVU51UXl4VFFVRlBRU3h0UWtGQmJVSXNSMEZCUjBNc1VVRkJTQ3hEUVVGWlF5eEpRVUZhTEVOQlFXbENSaXhsUVVGcVFpeE5RVUZ6UXl4dFFrRkJhRVU3UVVGRFJEczdRVUZGUkRzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3U1VGclEwMUhMRk03T3p0QlFVTktMSEZDUVVGWlF5eGxRVUZhTEVWQlFUSkRPMEZCUVVFc1VVRkJaRU1zVDBGQll5eDFSVUZCU2l4RlFVRkpPMEZCUVVFN08wRkJRVUU3TzBGQlIzcERMRkZCUVVrc1EwRkJRMDRzVjBGQlYwc3NaVUZCV0N4RFFVRk1MRVZCUTBVc1RVRkJUU3hKUVVGSlJTeExRVUZLTEVOQlFWVXNiME5CUVZZc1EwRkJUanM3UVVGRlJpeFZRVUZMUml4bFFVRk1MRWRCUVhWQ1FTeGxRVUYyUWpzN1FVRkZRU3hWUVVGTFJ5eGhRVUZNTEVkQlFYRkNMRWxCUVhKQ08wRkJRMEVzVlVGQlMwTXNWVUZCVEN4SFFVRnJRa01zVVVGQmJFSTdRVUZEUVN4VlFVRkxReXhUUVVGTUxFZEJRV2xDTEVsQlFXcENPenRCUVVWQk96czdPenM3TzBGQlQwRXNWVUZCUzBNc1RVRkJUQ3hIUVVGalRpeFJRVUZSVFN4TlFVRlNMRWxCUVcxQ0xFdEJRV3BET3p0QlFVVkJPenM3T3pzN08wRkJUMEVzVlVGQlMwTXNVMEZCVEN4SFFVRnBRbEFzVVVGQlVVOHNVMEZCVWl4SlFVRnpRaXhIUVVGMlF6czdRVUZGUVN4VlFVRkxReXdyUWtGQlRDeEhRVU5GVWl4UlFVRlJVeXc0UWtGQlVpeEpRVUV3UXl4VlFVRlRReXhYUVVGVUxFVkJRWE5DTzBGQlFVVXNZVUZCVDBFc1YwRkJVRHRCUVVGdlFpeExRVVI0Ump0QlFUbENlVU03UVVGblF6RkRPenRCUVVWRU96czdPenMyUWtGRFV6dEJRVU5RTEZWQlFVMUJMR05CUVdNc1MwRkJTMWdzWlVGQlRDeEZRVUZ3UWp0QlFVTkJMRlZCUVVsWkxFOUJRVThzUzBGQlMxSXNWVUZCYUVJN08wRkJSVUVzVjBGQlMwVXNVMEZCVEN4SFFVRnBRaXhKUVVGcVFqczdRVUZGUVN4aFFVRlBUU3hSUVVGUlJDeGpRVUZqTEV0QlFVdElMRk5CUVd4RExFVkJRVFpETzBGQlF6TkRMR0ZCUVV0TUxHRkJRVXdzUjBGQmNVSlRMRWxCUVhKQ08wRkJRMEZCTEdWQlFVOHNTMEZCUzBNc1YwRkJUQ3hEUVVGcFFrUXNTVUZCYWtJc1EwRkJVRHRCUVVORU96dEJRVVZFTEZkQlFVdFVMR0ZCUVV3c1IwRkJjVUlzU1VGQmNrSTdRVUZEUVN4WFFVRkxWeXhUUVVGTUxFTkJRV1ZHTEVsQlFXWTdRVUZEUkRzN08yZERRVVZyUXp0QlFVRkJPenRCUVVGQkxGVkJRWHBDUVN4SlFVRjVRaXgxUlVGQmJFSXNTMEZCUzBRc1YwRkJZVHM3UVVGRGFrTXNWVUZCU1N4TFFVRkxTU3hOUVVGVUxFVkJRV2xDTzBGQlEyWXNZVUZCUzBFc1RVRkJUQ3hEUVVGWlF5eExRVUZhTEVOQlFXdENMRWxCUVd4Q0xFVkJRWGRDU2l4SlFVRjRRanRCUVVORUxFOUJSa1FzVFVGRlR6dEJRVU5NTEZsQlFVa3NTMEZCUzA0c1UwRkJWQ3hGUVVGdlFqdEJRVU5zUWxjc2RVSkJRV0VzUzBGQlMxZ3NVMEZCYkVJN1FVRkRRU3hsUVVGTFFTeFRRVUZNTEVkQlFXbENMRWxCUVdwQ08wRkJRMFE3TzBGQlJVUXNXVUZCU1Uwc1UwRkJVMUFzVVVGQllpeEZRVUYxUWp0QlFVTnlRaXhqUVVGSkxFdEJRVXRFTEZWQlFVd3NTMEZCYjBKRExGRkJRWGhDTEVWQlEwVllMRWxCUVVrc2FVSkJRVW83TzBGQlJVWXNZMEZCVFhkQ0xHVkJRV1ZETEV0QlFVdERMRWRCUVV3c1EwRkJWVklzVDBGQlR5eExRVUZMU2l4VFFVRmFMRWRCUVhkQ0xFdEJRVXRTTEdWQlFVd3NSVUZCYkVNc1JVRkJNa1FzUzBGQlMwOHNUVUZCYUVVc1EwRkJja0k3TzBGQlJVRXNaVUZCUzBRc1UwRkJUQ3hIUVVGcFFtVXNWMEZCVnl4WlFVRk5PMEZCUTJoRExHMUNRVUZMUXl4TlFVRk1PMEZCUTBRc1YwRkdaMElzUlVGRlpFZ3NTMEZCUzBrc1NVRkJUQ3hEUVVGVlRDeGxRVUZsTEVsQlFYcENMRU5CUm1Nc1EwRkJha0k3UVVGSFJDeFRRVlJFTEUxQlUwOHNTVUZCU1N4TFFVRkxaQ3hWUVVGTUxFdEJRVzlDUXl4UlFVRjRRaXhGUVVGclF6dEJRVU4yUTFnc1kwRkJTU3huUWtGQlNqdEJRVU5FT3p0QlFVVkVMR0ZCUVV0VkxGVkJRVXdzUjBGQmEwSlJMRWxCUVd4Q08wRkJRMFE3UVVGRFJqczdRVUZGUkRzN096czdPenM3T3pzN2QwSkJVV3RDTzBGQlEyaENPMEZCUTBFc1ZVRkJTU3hMUVVGTFJ5eE5RVUZVTEVWQlEwVXNUMEZCVHl4TFFVRkxRU3hOUVVGTUxFTkJRVmxLTEZkQlFXNUNPenRCUVVWR0xHRkJRVThzUzBGQlMxSXNZVUZCVEN4SlFVRnpRaXhMUVVGTFNDeGxRVUZNTEV0QlFYbENMRXRCUVV0UkxGTkJRVE5FTzBGQlEwUTdPMEZCUlVRN096czdPenM3T3pzN08zZENRVkZuUWp0QlFVTmtPMEZCUTBFc1ZVRkJTU3hMUVVGTFR5eE5RVUZVTEVWQlEwVXNUMEZCVHl4TFFVRkxRU3hOUVVGTUxFTkJRVmxUTEZOQlFXNUNPenRCUVVWR0xHRkJRVThzUzBGQlMyWXNLMEpCUVV3c1EwRkJjVU1zUzBGQlMwVXNWMEZCTVVNc1EwRkJVRHRCUVVORU96czdkMEpCUlhGQ08wRkJRM0JDTEZWQlFVMUpMRk5CUVZNc1MwRkJTMEVzVFVGQmNFSTdPMEZCUlVFc1ZVRkJTVUVzVlVGQlZVRXNUMEZCVDFVc1pVRkJVQ3hMUVVFeVFrTXNVMEZCZWtNc1JVRkRSU3hQUVVGUFdDeFBRVUZQVlN4bFFVRmtPenRCUVVWR0xHRkJRVTlETEZOQlFWQTdRVUZEUkRzN1FVRkpSRHRCUVVOQk96czdPenM3T3pzN096czdPenM3T3pzN096czdRVUZ4UWtFN096czdPenM3T3pzN08wRkJWMEU3T3pzN096czdPenM3UVVGVlFUczdPenM3T3pzN096czdSVUZ1UzNOQ1F5eDVRanM3YTBKQk5rdFVOVUlzVXlJc0ltWnBiR1VpT2lKVFkyaGxaSFZzWlhJdWFuTWlMQ0p6YjNWeVkyVnpRMjl1ZEdWdWRDSTZXeUpwYlhCdmNuUWdaR1ZpZFdjZ1puSnZiU0FuWkdWaWRXY25PMXh1YVcxd2IzSjBJRk5qYUdWa2RXeHBibWRSZFdWMVpTQm1jbTl0SUNjdUxpOWpiM0psTDFOamFHVmtkV3hwYm1kUmRXVjFaU2M3WEc1Y2JtTnZibk4wSUd4dlp5QTlJR1JsWW5WbktDZDNZWFpsYzJwek9tMWhjM1JsY25NbktUdGNibHh1Wm5WdVkzUnBiMjRnYVhOR2RXNWpkR2x2YmlobWRXNWpkR2x2YmxSdlEyaGxZMnNwSUh0Y2JpQWdjbVYwZFhKdUlHWjFibU4wYVc5dVZHOURhR1ZqYXlBbUppQjdmUzUwYjFOMGNtbHVaeTVqWVd4c0tHWjFibU4wYVc5dVZHOURhR1ZqYXlrZ1BUMDlJQ2RiYjJKcVpXTjBJRVoxYm1OMGFXOXVYU2M3WEc1OVhHNWNiaThxS2x4dUlDb2dWR2hsSUdCVFkyaGxaSFZzWlhKZ0lHTnNZWE56SUdsdGNHeGxiV1Z1ZEhNZ1lTQnRZWE4wWlhJZ1ptOXlJR0JVYVcxbFJXNW5hVzVsWUNCcGJuTjBZVzVqWlhOY2JpQXFJSFJvWVhRZ2FXMXdiR1Z0Wlc1MElIUm9aU0FxYzJOb1pXUjFiR1ZrS2lCcGJuUmxjbVpoWTJVZ0tITjFZMmdnWVhNZ2RHaGxJR0JOWlhSeWIyNXZiV1ZnSUdGdVpGeHVJQ29nWUVkeVlXNTFiR0Z5Ulc1bmFXNWxZQ2t1WEc0Z0tseHVJQ29nUVNCZ1UyTm9aV1IxYkdWeVlDQmpZVzRnWVd4emJ5QnpZMmhsWkhWc1pTQnphVzF3YkdVZ1kyRnNiR0poWTJzZ1puVnVZM1JwYjI1ekxseHVJQ29nVkdobElHTnNZWE56SUdseklHSmhjMlZrSUc5dUlISmxZM1Z5YzJsMlpTQmpZV3hzY3lCMGJ5QmdjMlYwVkdsdFpXOTFkR0FnWVc1a0lIVnpaWE1nZEdobElIUnBiV1ZjYmlBcUlISmxkSFZ5Ym1Wa0lHSjVJSFJvWlNCZ1oyVjBWR2x0WlVaMWJtTjBhVzl1WUNCd1lYTnpaV1FnWVhNZ1ptbHljM1FnWVhKbmRXMWxiblFnWVhNZ1lTQnNiMmRwWTJGc0lIUnBiV1ZjYmlBcUlIQmhjM05sWkNCMGJ5QjBhR1VnWUdGa2RtRnVZMlZVYVcxbFlDQnRaWFJvYjJSeklHOW1JSFJvWlNCelkyaGxaSFZzWldRZ1pXNW5hVzVsY3lCdmNpQjBieUIwYUdWY2JpQXFJSE5qYUdWa2RXeGxaQ0JqWVd4c1ltRmpheUJtZFc1amRHbHZibk11WEc0Z0tpQkpkQ0JsZUhSbGJtUnpJSFJvWlNCZ1UyTm9aV1IxYkdsdVoxRjFaWFZsWUNCamJHRnpjeUIwYUdGMElHbDBjMlZzWmlCcGJtTnNkV1JsY3lCaElHQlFjbWx2Y21sMGVWRjFaWFZsWUZ4dUlDb2dkRzhnWVhOemRYSmxJSFJvWlNCdmNtUmxjaUJ2WmlCMGFHVWdjMk5vWldSMWJHVmtJR1Z1WjJsdVpYTWdLSE5sWlNCZ1UybHRjR3hsVTJOb1pXUjFiR1Z5WUNCbWIzSWdZVnh1SUNvZ2MybHRjR3hwWm1sbFpDQnpZMmhsWkhWc1pYSWdhVzF3YkdWdFpXNTBZWFJwYjI0Z2QybDBhRzkxZENCZ1VISnBiM0pwZEhsUmRXVjFaV0FwTGx4dUlDcGNiaUFxSUh0QWJHbHVheUJvZEhSd2N6b3ZMM0poZDJkcGRDNWpiMjB2ZDJGMlpYTnFjeTkzWVhabGN5MXRZWE4wWlhKekwyMWhjM1JsY2k5bGVHRnRjR3hsY3k5elkyaGxaSFZzWlhJdmFXNWtaWGd1YUhSdGJIMWNiaUFxWEc0Z0tpQkFjR0Z5WVcwZ2UwWjFibU4wYVc5dWZTQm5aWFJVYVcxbFJuVnVZM1JwYjI0Z0xTQkdkVzVqZEdsdmJpQjBhR0YwSUcxMWMzUWdjbVYwZFhKdUlHRWdkR2x0WlNCcGJpQnpaV052Ym1RdVhHNGdLaUJBY0dGeVlXMGdlMDlpYW1WamRIMGdXMjl3ZEdsdmJuTTllMzFkSUMwZ1pHVm1ZWFZzZENCdmNIUnBiMjV6TGx4dUlDb2dRSEJoY21GdElIdE9kVzFpWlhKOUlGdHZjSFJwYjI1ekxuQmxjbWx2WkQwd0xqQXlOVjBnTFNCd1pYSnBiMlFnYjJZZ2RHaGxJSE5qYUdWa2RXeGxjaTVjYmlBcUlFQndZWEpoYlNCN1RuVnRZbVZ5ZlNCYmIzQjBhVzl1Y3k1c2IyOXJZV2hsWVdROU1DNHhYU0F0SUd4dmIydGhhR1ZoWkNCdlppQjBhR1VnYzJOb1pXUjFiR1Z5TGx4dUlDb2dRSEJoY21GdElIdE9kVzFpWlhKOUlGdHZjSFJwYjI1ekxtTjFjbkpsYm5SVWFXMWxWRzlCZFdScGIxUnBiV1ZHZFc1amRHbHZibDBnTFNCbWRXNWpkR2x2YmlCMGFHRjBJR052Ym5abGNuUmNiaUFxSUNCZ1kzVnljbVZ1ZEZScGJXVmdJSFJ2SUdCaGRXUnBiMVJwYldWZ0xpQkVaV1poZFd4MGN5QjBieUJ1YnkxdmNDNWNiaUFxWEc0Z0tpQkFjMlZsSUZScGJXVkZibWRwYm1WY2JpQXFJRUJ6WldVZ1UybHRjR3hsVTJOb1pXUjFiR1Z5WEc0Z0tseHVJQ29nUUdWNFlXMXdiR1ZjYmlBcUlHbHRjRzl5ZENBcUlHRnpJRzFoYzNSbGNuTWdabkp2YlNBbmQyRjJaWE10YldGemRHVnljeWM3WEc0Z0tseHVJQ29nWTI5dWMzUWdaMlYwVkdsdFpVWjFibU4wYVc5dUlEMGdLQ2tnUFQ0Z2NISmxabTl5YldGdVkyVXVibTkzS0NrZ0x5QXhNREF3TzF4dUlDb2dZMjl1YzNRZ2MyTm9aV1IxYkdWeUlEMGdibVYzSUcxaGMzUmxjbk11VTJOb1pXUjFiR1Z5S0dkbGRGUnBiV1ZHZFc1amRHbHZiaWs3WEc0Z0tseHVJQ29nYzJOb1pXUjFiR1Z5TG1Ga1pDaHRlVVZ1WjJsdVpTazdYRzRnS2k5Y2JtTnNZWE56SUZOamFHVmtkV3hsY2lCbGVIUmxibVJ6SUZOamFHVmtkV3hwYm1kUmRXVjFaU0I3WEc0Z0lHTnZibk4wY25WamRHOXlLR2RsZEZScGJXVkdkVzVqZEdsdmJpd2diM0IwYVc5dWN5QTlJSHQ5S1NCN1hHNGdJQ0FnYzNWd1pYSW9LVHRjYmx4dUlDQWdJR2xtSUNnaGFYTkdkVzVqZEdsdmJpaG5aWFJVYVcxbFJuVnVZM1JwYjI0cEtWeHVJQ0FnSUNBZ2RHaHliM2NnYm1WM0lFVnljbTl5S0NkSmJuWmhiR2xrSUdGeVozVnRaVzUwSUdCblpYUlVhVzFsUm5WdVkzUnBiMjVnSnlrN1hHNWNiaUFnSUNCMGFHbHpMbWRsZEZScGJXVkdkVzVqZEdsdmJpQTlJR2RsZEZScGJXVkdkVzVqZEdsdmJqdGNibHh1SUNBZ0lIUm9hWE11WDE5amRYSnlaVzUwVkdsdFpTQTlJRzUxYkd3N1hHNGdJQ0FnZEdocGN5NWZYMjVsZUhSVWFXMWxJRDBnU1c1bWFXNXBkSGs3WEc0Z0lDQWdkR2hwY3k1ZlgzUnBiV1Z2ZFhRZ1BTQnVkV3hzTzF4dVhHNGdJQ0FnTHlvcVhHNGdJQ0FnSUNvZ2MyTm9aV1IxYkdWeUlDaHpaWFJVYVcxbGIzVjBLU0J3WlhKcGIyUmNiaUFnSUNBZ0tpQkFkSGx3WlNCN1RuVnRZbVZ5ZlZ4dUlDQWdJQ0FxSUVCdVlXMWxJSEJsY21sdlpGeHVJQ0FnSUNBcUlFQnRaVzFpWlhKdlppQlRZMmhsWkhWc1pYSmNiaUFnSUNBZ0tpQkFhVzV6ZEdGdVkyVmNiaUFnSUNBZ0tpOWNiaUFnSUNCMGFHbHpMbkJsY21sdlpDQTlJRzl3ZEdsdmJuTXVjR1Z5YVc5a0lIeDhJTUtnTUM0d01qVTdYRzVjYmlBZ0lDQXZLaXBjYmlBZ0lDQWdLaUJ6WTJobFpIVnNaWElnYkc5dmEyRm9aV0ZrSUhScGJXVWdLRDRnY0dWeWFXOWtLVnh1SUNBZ0lDQXFJRUIwZVhCbElIdE9kVzFpWlhKOVhHNGdJQ0FnSUNvZ1FHNWhiV1VnYkc5dmEyRm9aV0ZrWEc0Z0lDQWdJQ29nUUcxbGJXSmxjbTltSUZOamFHVmtkV3hsY2x4dUlDQWdJQ0FxSUVCcGJuTjBZVzVqWlZ4dUlDQWdJQ0FxTDF4dUlDQWdJSFJvYVhNdWJHOXZhMkZvWldGa0lEMGdiM0IwYVc5dWN5NXNiMjlyWVdobFlXUWdmSHdnd3FBd0xqRTdYRzVjYmlBZ0lDQjBhR2x6TGw5amRYSnlaVzUwVkdsdFpWUnZRWFZrYVc5VWFXMWxSblZ1WTNScGIyNGdQVnh1SUNBZ0lDQWdiM0IwYVc5dWN5NWpkWEp5Wlc1MFZHbHRaVlJ2UVhWa2FXOVVhVzFsUm5WdVkzUnBiMjRnZkh6Q29HWjFibU4wYVc5dUtHTjFjbkpsYm5SVWFXMWxLU0I3SUhKbGRIVnliaUJqZFhKeVpXNTBWR2x0WlNCOU8xeHVJQ0I5WEc1Y2JpQWdMeThnYzJWMFZHbHRaVzkxZENCelkyaGxaSFZzYVc1bklHeHZiM0JjYmlBZ1gxOTBhV05yS0NrZ2UxeHVJQ0FnSUdOdmJuTjBJR04xY25KbGJuUlVhVzFsSUQwZ2RHaHBjeTVuWlhSVWFXMWxSblZ1WTNScGIyNG9LVHRjYmlBZ0lDQnNaWFFnZEdsdFpTQTlJSFJvYVhNdVgxOXVaWGgwVkdsdFpUdGNibHh1SUNBZ0lIUm9hWE11WDE5MGFXMWxiM1YwSUQwZ2JuVnNiRHRjYmx4dUlDQWdJSGRvYVd4bElDaDBhVzFsSUR3OUlHTjFjbkpsYm5SVWFXMWxJQ3NnZEdocGN5NXNiMjlyWVdobFlXUXBJSHRjYmlBZ0lDQWdJSFJvYVhNdVgxOWpkWEp5Wlc1MFZHbHRaU0E5SUhScGJXVTdYRzRnSUNBZ0lDQjBhVzFsSUQwZ2RHaHBjeTVoWkhaaGJtTmxWR2x0WlNoMGFXMWxLVHRjYmlBZ0lDQjlYRzVjYmlBZ0lDQjBhR2x6TGw5ZlkzVnljbVZ1ZEZScGJXVWdQU0J1ZFd4c08xeHVJQ0FnSUhSb2FYTXVjbVZ6WlhSVWFXMWxLSFJwYldVcE8xeHVJQ0I5WEc1Y2JpQWdjbVZ6WlhSVWFXMWxLSFJwYldVZ1BTQjBhR2x6TG1OMWNuSmxiblJVYVcxbEtTQjdYRzRnSUNBZ2FXWWdLSFJvYVhNdWJXRnpkR1Z5S1NCN1hHNGdJQ0FnSUNCMGFHbHpMbTFoYzNSbGNpNXlaWE5sZENoMGFHbHpMQ0IwYVcxbEtUdGNiaUFnSUNCOUlHVnNjMlVnZTF4dUlDQWdJQ0FnYVdZZ0tIUm9hWE11WDE5MGFXMWxiM1YwS1NCN1hHNGdJQ0FnSUNBZ0lHTnNaV0Z5VkdsdFpXOTFkQ2gwYUdsekxsOWZkR2x0Wlc5MWRDazdYRzRnSUNBZ0lDQWdJSFJvYVhNdVgxOTBhVzFsYjNWMElEMGdiblZzYkR0Y2JpQWdJQ0FnSUgxY2JseHVJQ0FnSUNBZ2FXWWdLSFJwYldVZ0lUMDlJRWx1Wm1sdWFYUjVLU0I3WEc0Z0lDQWdJQ0FnSUdsbUlDaDBhR2x6TGw5ZmJtVjRkRlJwYldVZ1BUMDlJRWx1Wm1sdWFYUjVLVnh1SUNBZ0lDQWdJQ0FnSUd4dlp5Z25VMk5vWldSMWJHVnlJRk4wWVhKMEp5azdYRzVjYmlBZ0lDQWdJQ0FnWTI5dWMzUWdkR2x0WlU5MWRFUmxiR0Y1SUQwZ1RXRjBhQzV0WVhnb0tIUnBiV1VnTFNCMGFHbHpMbXh2YjJ0aGFHVmhaQ0F0SUhSb2FYTXVaMlYwVkdsdFpVWjFibU4wYVc5dUtDa3BMQ0IwYUdsekxuQmxjbWx2WkNrN1hHNWNiaUFnSUNBZ0lDQWdkR2hwY3k1ZlgzUnBiV1Z2ZFhRZ1BTQnpaWFJVYVcxbGIzVjBLQ2dwSUQwK0lIdGNiaUFnSUNBZ0lDQWdJQ0IwYUdsekxsOWZkR2xqYXlncE8xeHVJQ0FnSUNBZ0lDQjlMQ0JOWVhSb0xtTmxhV3dvZEdsdFpVOTFkRVJsYkdGNUlDb2dNVEF3TUNrcE8xeHVJQ0FnSUNBZ2ZTQmxiSE5sSUdsbUlDaDBhR2x6TGw5ZmJtVjRkRlJwYldVZ0lUMDlJRWx1Wm1sdWFYUjVLU0I3WEc0Z0lDQWdJQ0FnSUd4dlp5Z25VMk5vWldSMWJHVnlJRk4wYjNBbktUdGNiaUFnSUNBZ0lIMWNibHh1SUNBZ0lDQWdkR2hwY3k1ZlgyNWxlSFJVYVcxbElEMGdkR2x0WlR0Y2JpQWdJQ0I5WEc0Z0lIMWNibHh1SUNBdktpcGNiaUFnSUNvZ1UyTm9aV1IxYkdWeUlHTjFjbkpsYm5RZ2JHOW5hV05oYkNCMGFXMWxMbHh1SUNBZ0tseHVJQ0FnS2lCQWJtRnRaU0JqZFhKeVpXNTBWR2x0WlZ4dUlDQWdLaUJBZEhsd1pTQjdUblZ0WW1WeWZWeHVJQ0FnS2lCQWJXVnRZbVZ5YjJZZ1UyTm9aV1IxYkdWeVhHNGdJQ0FxSUVCcGJuTjBZVzVqWlZ4dUlDQWdLaTljYmlBZ1oyVjBJR04xY25KbGJuUlVhVzFsS0NrZ2UxeHVJQ0FnSUM4dklFQnViM1JsSUMwZ1kyRnVJSFJvYVhNZ2NtVmhiR3g1SUdoaGNIQmxiaXdnWVc1a0lHbG1JSGxsY3l3Z2FXNGdkMmhwWTJnZ1kyRnpaVDljYmlBZ0lDQnBaaUFvZEdocGN5NXRZWE4wWlhJcFhHNGdJQ0FnSUNCeVpYUjFjbTRnZEdocGN5NXRZWE4wWlhJdVkzVnljbVZ1ZEZScGJXVTdYRzVjYmlBZ0lDQnlaWFIxY200Z2RHaHBjeTVmWDJOMWNuSmxiblJVYVcxbElIeDhJSFJvYVhNdVoyVjBWR2x0WlVaMWJtTjBhVzl1S0NrZ0t5QjBhR2x6TG14dmIydGhhR1ZoWkR0Y2JpQWdmVnh1WEc0Z0lDOHFLbHh1SUNBZ0tpQlRZMmhsWkhWc1pYSWdZM1Z5Y21WdWRDQmhkV1JwYnlCMGFXMWxJR0ZqWTI5eVpHbHVaeUIwYnlCZ1kzVnljbVZ1ZEZScGJXVmdYRzRnSUNBcVhHNGdJQ0FxSUVCdVlXMWxJR0YxWkdsdlZHbHRaVnh1SUNBZ0tpQkFkSGx3WlNCN1RuVnRZbVZ5ZlZ4dUlDQWdLaUJBYldWdFltVnlhV1lnVTJOb1pXUjFiR1Z5WEc0Z0lDQXFJRUJwYm5OMFlXNWpaVnh1SUNBZ0tpOWNiaUFnWjJWMElHRjFaR2x2VkdsdFpTZ3BJSHRjYmlBZ0lDQXZMeUJBYm05MFpTQXRJR0ZrWkNCMGFHbHpJR0Z6SUdsdVhHNGdJQ0FnYVdZZ0tIUm9hWE11YldGemRHVnlLVnh1SUNBZ0lDQWdjbVYwZFhKdUlIUm9hWE11YldGemRHVnlMbUYxWkdsdlZHbHRaVHRjYmx4dUlDQWdJSEpsZEhWeWJpQjBhR2x6TGw5amRYSnlaVzUwVkdsdFpWUnZRWFZrYVc5VWFXMWxSblZ1WTNScGIyNG9kR2hwY3k1amRYSnlaVzUwVkdsdFpTazdYRzRnSUgxY2JseHVJQ0JuWlhRZ1kzVnljbVZ1ZEZCdmMybDBhVzl1S0NrZ2UxeHVJQ0FnSUdOdmJuTjBJRzFoYzNSbGNpQTlJSFJvYVhNdWJXRnpkR1Z5TzF4dVhHNGdJQ0FnYVdZZ0tHMWhjM1JsY2lBbUppQnRZWE4wWlhJdVkzVnljbVZ1ZEZCdmMybDBhVzl1SUNFOVBTQjFibVJsWm1sdVpXUXBYRzRnSUNBZ0lDQnlaWFIxY200Z2JXRnpkR1Z5TG1OMWNuSmxiblJRYjNOcGRHbHZianRjYmx4dUlDQWdJSEpsZEhWeWJpQjFibVJsWm1sdVpXUTdYRzRnSUgxY2JseHVYRzVjYmlBZ0x5OGdhVzVvWlhKcGRHVmtJR1p5YjIwZ2MyTm9aV1IxYkdsdVp5QnhkV1YxWlZ4dUlDQXZLaXBjYmlBZ0lDb2dRV1JrSUdFZ1ZHbHRaVVZ1WjJsdVpTQnZjaUJoSUhOcGJYQnNaU0JqWVd4c1ltRmpheUJtZFc1amRHbHZiaUIwYnlCMGFHVWdjMk5vWldSMWJHVnlJR0YwSUdGdVhHNGdJQ0FxSUc5d2RHbHZibUZzYkhrZ1oybDJaVzRnZEdsdFpTNGdWMmhsZEdobGNpQjBhR1VnWVdSa0lHMWxkR2h2WkNCcGN5QmpZV3hzWldRZ2QybDBhQ0JoSUZScGJXVkZibWRwYm1WY2JpQWdJQ29nYjNJZ1lTQmpZV3hzWW1GamF5Qm1kVzVqZEdsdmJpQnBkQ0J5WlhSMWNtNXpJR0VnVkdsdFpVVnVaMmx1WlNCMGFHRjBJR05oYmlCaVpTQjFjMlZrSUdGeklHRnlaM1Z0Wlc1MFhHNGdJQ0FxSUc5bUlIUm9aU0J0WlhSb2IyUnpJSEpsYlc5MlpTQmhibVFnY21WelpYUkZibWRwYm1WVWFXMWxMaUJCSUZScGJXVkZibWRwYm1VZ1lXUmtaV1FnZEc4Z1lTQnpZMmhsWkhWc1pYSmNiaUFnSUNvZ2FHRnpJSFJ2SUdsdGNHeGxiV1Z1ZENCMGFHVWdjMk5vWldSMWJHVmtJR2x1ZEdWeVptRmpaUzRnVkdobElHTmhiR3hpWVdOcklHWjFibU4wYVc5dUlHRmtaR1ZrSUhSdklHRmNiaUFnSUNvZ2MyTm9aV1IxYkdWeUlIZHBiR3dnWW1VZ1kyRnNiR1ZrSUdGMElIUm9aU0JuYVhabGJpQjBhVzFsSUdGdVpDQjNhWFJvSUhSb1pTQm5hWFpsYmlCMGFXMWxJR0Z6WEc0Z0lDQXFJR0Z5WjNWdFpXNTBMaUJVYUdVZ1kyRnNiR0poWTJzZ1kyRnVJSEpsZEhWeWJpQmhJRzVsZHlCelkyaGxaSFZzYVc1bklIUnBiV1VnS0drdVpTNGdkR2hsSUc1bGVIUmNiaUFnSUNvZ2RHbHRaU0IzYUdWdUlHbDBJSGRwYkd3Z1ltVWdZMkZzYkdWa0tTQnZjaUJwZENCallXNGdjbVYwZFhKdUlFbHVabWx1YVhSNUlIUnZJSE4xYzNCbGJtUWdjMk5vWldSMWJHbHVaMXh1SUNBZ0tpQjNhWFJvYjNWMElISmxiVzkyYVc1bklIUm9aU0JtZFc1amRHbHZiaUJtY205dElIUm9aU0J6WTJobFpIVnNaWEl1SUVFZ1puVnVZM1JwYjI0Z2RHaGhkQ0JrYjJWelhHNGdJQ0FxSUc1dmRDQnlaWFIxY200Z1lTQjJZV3gxWlNBb2IzSWdjbVYwZFhKdWN5QnVkV3hzSUc5eUlEQXBJR2x6SUhKbGJXOTJaV1FnWm5KdmJTQjBhR1VnYzJOb1pXUjFiR1Z5WEc0Z0lDQXFJR0Z1WkNCallXNXViM1FnWW1VZ2RYTmxaQ0JoY3lCaGNtZDFiV1Z1ZENCdlppQjBhR1VnYldWMGFHOWtjeUJ5WlcxdmRtVWdZVzVrSUhKbGMyVjBSVzVuYVc1bFZHbHRaVnh1SUNBZ0tpQmhibmx0YjNKbExseHVJQ0FnS2x4dUlDQWdLaUJBYm1GdFpTQmhaR1JjYmlBZ0lDb2dRR1oxYm1OMGFXOXVYRzRnSUNBcUlFQnRaVzFpWlhKdlppQlRZMmhsWkhWc1pYSmNiaUFnSUNvZ1FHbHVjM1JoYm1ObFhHNGdJQ0FxSUVCd1lYSmhiU0I3VkdsdFpVVnVaMmx1Wlh4R2RXNWpkR2x2Ym4wZ1pXNW5hVzVsSUMwZ1JXNW5hVzVsSUhSdklHRmtaQ0IwYnlCMGFHVWdjMk5vWldSMWJHVnlYRzRnSUNBcUlFQndZWEpoYlNCN1RuVnRZbVZ5ZlNCYmRHbHRaVDEwYUdsekxtTjFjbkpsYm5SVWFXMWxYU0F0SUZOamFHVmtkV3hsSUhScGJXVmNiaUFnSUNvdlhHNGdJQzhxS2x4dUlDQWdLaUJTWlcxdmRtVWdZU0JVYVcxbFJXNW5hVzVsSUdaeWIyMGdkR2hsSUhOamFHVmtkV3hsY2lCMGFHRjBJR2hoY3lCaVpXVnVJR0ZrWkdWa0lIUnZJSFJvWlZ4dUlDQWdLaUJ6WTJobFpIVnNaWElnZFhOcGJtY2dkR2hsSUdGa1pDQnRaWFJvYjJRdVhHNGdJQ0FxWEc0Z0lDQXFJRUJ1WVcxbElHRmtaRnh1SUNBZ0tpQkFablZ1WTNScGIyNWNiaUFnSUNvZ1FHMWxiV0psY205bUlGTmphR1ZrZFd4bGNseHVJQ0FnS2lCQWFXNXpkR0Z1WTJWY2JpQWdJQ29nUUhCaGNtRnRJSHRVYVcxbFJXNW5hVzVsZlNCbGJtZHBibVVnTFNCRmJtZHBibVVnZEc4Z2NtVnRiM1psSUdaeWIyMGdkR2hsSUhOamFHVmtkV3hsY2x4dUlDQWdLaUJBY0dGeVlXMGdlMDUxYldKbGNuMGdXM1JwYldVOWRHaHBjeTVqZFhKeVpXNTBWR2x0WlYwZ0xTQlRZMmhsWkhWc1pTQjBhVzFsWEc0Z0lDQXFMMXh1SUNBdktpcGNiaUFnSUNvZ1VtVnpZMmhsWkhWc1pTQmhJSE5qYUdWa2RXeGxaQ0IwYVcxbElHVnVaMmx1WlNCaGRDQmhJR2RwZG1WdUlIUnBiV1V1WEc0Z0lDQXFYRzRnSUNBcUlFQnVZVzFsSUhKbGMyVjBSVzVuYVc1bFZHbHRaVnh1SUNBZ0tpQkFablZ1WTNScGIyNWNiaUFnSUNvZ1FHMWxiV0psY205bUlGTmphR1ZrZFd4bGNseHVJQ0FnS2lCQWFXNXpkR0Z1WTJWY2JpQWdJQ29nUUhCaGNtRnRJSHRVYVcxbFJXNW5hVzVsZlNCbGJtZHBibVVnTFNCRmJtZHBibVVnZEc4Z2NtVnpZMmhsWkhWc1pWeHVJQ0FnS2lCQWNHRnlZVzBnZTA1MWJXSmxjbjBnZEdsdFpTQXRJRk5qYUdWa2RXeGxJSFJwYldWY2JpQWdJQ292WEc0Z0lDOHFLbHh1SUNBZ0tpQlNaVzF2ZG1VZ1lXeHNJSE5qYUdWa2RXeGxaQ0JqWVd4c1ltRmphM01nWVc1a0lHVnVaMmx1WlhNZ1puSnZiU0IwYUdVZ2MyTm9aV1IxYkdWeUxseHVJQ0FnS2x4dUlDQWdLaUJBYm1GdFpTQmpiR1ZoY2x4dUlDQWdLaUJBWm5WdVkzUnBiMjVjYmlBZ0lDb2dRRzFsYldKbGNtOW1JRk5qYUdWa2RXeGxjbHh1SUNBZ0tpQkFhVzV6ZEdGdVkyVmNiaUFnSUNvdlhHNTlYRzVjYm1WNGNHOXlkQ0JrWldaaGRXeDBJRk5qYUdWa2RXeGxjanRjYmlKZGZRPT0iLCIndXNlIHN0cmljdCc7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5cbnZhciBfc2V0ID0gcmVxdWlyZSgnYmFiZWwtcnVudGltZS9jb3JlLWpzL3NldCcpO1xuXG52YXIgX3NldDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9zZXQpO1xuXG52YXIgX2NsYXNzQ2FsbENoZWNrMiA9IHJlcXVpcmUoJ2JhYmVsLXJ1bnRpbWUvaGVscGVycy9jbGFzc0NhbGxDaGVjaycpO1xuXG52YXIgX2NsYXNzQ2FsbENoZWNrMyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2NsYXNzQ2FsbENoZWNrMik7XG5cbnZhciBfY3JlYXRlQ2xhc3MyID0gcmVxdWlyZSgnYmFiZWwtcnVudGltZS9oZWxwZXJzL2NyZWF0ZUNsYXNzJyk7XG5cbnZhciBfY3JlYXRlQ2xhc3MzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfY3JlYXRlQ2xhc3MyKTtcblxudmFyIF9kZWJ1ZyA9IHJlcXVpcmUoJ2RlYnVnJyk7XG5cbnZhciBfZGVidWcyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfZGVidWcpO1xuXG52YXIgX1RpbWVFbmdpbmUgPSByZXF1aXJlKCcuLi9jb3JlL1RpbWVFbmdpbmUnKTtcblxudmFyIF9UaW1lRW5naW5lMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX1RpbWVFbmdpbmUpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG52YXIgbG9nID0gKDAsIF9kZWJ1ZzIuZGVmYXVsdCkoJ3dhdmVzanM6bWFzdGVycycpO1xuXG5mdW5jdGlvbiBpc0Z1bmN0aW9uKGZ1bmN0aW9uVG9DaGVjaykge1xuICByZXR1cm4gZnVuY3Rpb25Ub0NoZWNrICYmIHt9LnRvU3RyaW5nLmNhbGwoZnVuY3Rpb25Ub0NoZWNrKSA9PT0gJ1tvYmplY3QgRnVuY3Rpb25dJztcbn1cblxuLyoqXG4gKlxuICpcbiAqXG4gKiBUaGUgU2ltcGxlU2NoZWR1bGVyIGNsYXNzIGltcGxlbWVudHMgYSBzaW1wbGlmaWVkIG1hc3RlciBmb3IgdGltZSBlbmdpbmVzXG4gKiAoc2VlIFRpbWVFbmdpbmUpIHRoYXQgaW1wbGVtZW50IHRoZSBzY2hlZHVsZWQgaW50ZXJmYWNlXG4gKiBzdWNoIGFzIHRoZSBNZXRyb25vbWUgYW5kIHRoZSBHcmFudWxhckVuZ2luZS4gVGhlIEFQSSBhbmQgZnVudGlvbmFsaXRpZXMgb2ZcbiAqIHRoZSBTaW1wbGVTY2hlZHVsZXIgY2xhc3MgYXJlIGlkZW50aWNhbCB0byB0aGUgU2NoZWR1bGVyIGNsYXNzLiBCdXQsIG90aGVyXG4gKiB0aGFuIHRoZSBTY2hlZHVsZXIsIHRoZSBTaW1wbGVTY2hlZHVsZXIgY2xhc3MgZG9lcyBub3QgZ3VhcmFudGVlIHRoZSBvcmRlclxuICogb2YgZXZlbnRzIChpLmUuIGNhbGxzIHRvIHRoZSBhZHZhbmNlVGltZSBtZXRob2Qgb2Ygc2NoZWR1bGVkIHRpbWUgZW5naW5lc1xuICogYW5kIHRvIHNjaGVkdWxlZCBjYWxsYmFjayBmdW5jdGlvbnMpIHdpdGhpbiBhIHNjaGVkdWxpbmcgcGVyaW9kIChzZWUgcGVyaW9kXG4gKiBhdHRyaWJ1dGUpLlxuICpcbiAqIHtAbGluayBodHRwczovL3Jhd2dpdC5jb20vd2F2ZXNqcy93YXZlcy1tYXN0ZXJzL21hc3Rlci9leGFtcGxlcy9zY2hlZHVsZXIvaW5kZXguaHRtbH1cbiAqXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBnZXRUaW1lRnVuY3Rpb24gLSBGdW5jdGlvbiB0aGF0IG11c3QgcmV0dXJuIGEgdGltZSBpbiBzZWNvbmQuXG4gKiBAcGFyYW0ge09iamVjdH0gW29wdGlvbnM9e31dIC0gZGVmYXVsdCBvcHRpb25zXG4gKiBAcGFyYW0ge051bWJlcn0gW29wdGlvbnMucGVyaW9kPTAuMDI1XSAtIHBlcmlvZCBvZiB0aGUgc2NoZWR1bGVyLlxuICogQHBhcmFtIHtOdW1iZXJ9IFtvcHRpb25zLmxvb2thaGVhZD0wLjFdIC0gbG9va2FoZWFkIG9mIHRoZSBzY2hlZHVsZXIuXG4gKlxuICogQHNlZSBUaW1lRW5naW5lXG4gKiBAc2VlIFNjaGVkdWxlclxuICpcbiAqIEBleGFtcGxlXG4gKiBpbXBvcnQgKiBhcyBtYXN0ZXJzIGZyb20gJ3dhdmVzLW1hc3RlcnMnO1xuICpcbiAqIGNvbnN0IGdldFRpbWVGdW5jdGlvbiA9ICgpID0+IHByZWZvcm1hbmNlLm5vdygpIC8gMTAwMDtcbiAqIGNvbnN0IHNjaGVkdWxlciA9IG5ldyBtYXN0ZXJzLlNpbXBsZVNjaGVkdWxlcihnZXRUaW1lRnVuY3Rpb24pO1xuICpcbiAqIHNjaGVkdWxlci5hZGQobXlFbmdpbmUpO1xuICovXG5cbnZhciBTaW1wbGVTY2hlZHVsZXIgPSBmdW5jdGlvbiAoKSB7XG4gIGZ1bmN0aW9uIFNpbXBsZVNjaGVkdWxlcihnZXRUaW1lRnVuY3Rpb24pIHtcbiAgICB2YXIgb3B0aW9ucyA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDoge307XG4gICAgKDAsIF9jbGFzc0NhbGxDaGVjazMuZGVmYXVsdCkodGhpcywgU2ltcGxlU2NoZWR1bGVyKTtcblxuICAgIGlmICghaXNGdW5jdGlvbihnZXRUaW1lRnVuY3Rpb24pKSB0aHJvdyBuZXcgRXJyb3IoJ0ludmFsaWQgYXJndW1lbnQgYGdldFRpbWVGdW5jdGlvbmAnKTtcblxuICAgIHRoaXMuZ2V0VGltZUZ1bmN0aW9uID0gZ2V0VGltZUZ1bmN0aW9uO1xuXG4gICAgdGhpcy5fX2VuZ2luZXMgPSBuZXcgX3NldDIuZGVmYXVsdCgpO1xuXG4gICAgdGhpcy5fX3NjaGVkRW5naW5lcyA9IFtdO1xuICAgIHRoaXMuX19zY2hlZFRpbWVzID0gW107XG5cbiAgICB0aGlzLl9fY3VycmVudFRpbWUgPSBudWxsO1xuICAgIHRoaXMuX190aW1lb3V0ID0gbnVsbDtcblxuICAgIC8qKlxuICAgICAqIHNjaGVkdWxlciAoc2V0VGltZW91dCkgcGVyaW9kXG4gICAgICogQHR5cGUge051bWJlcn1cbiAgICAgKiBAbmFtZSBwZXJpb2RcbiAgICAgKiBAbWVtYmVyb2YgU2NoZWR1bGVyXG4gICAgICogQGluc3RhbmNlXG4gICAgICovXG4gICAgdGhpcy5wZXJpb2QgPSBvcHRpb25zLnBlcmlvZCB8fCAwLjAyNTtcblxuICAgIC8qKlxuICAgICAqIHNjaGVkdWxlciBsb29rYWhlYWQgdGltZSAoPiBwZXJpb2QpXG4gICAgICogQHR5cGUge051bWJlcn1cbiAgICAgKiBAbmFtZSBsb29rYWhlYWRcbiAgICAgKiBAbWVtYmVyb2YgU2NoZWR1bGVyXG4gICAgICogQGluc3RhbmNlXG4gICAgICovXG4gICAgdGhpcy5sb29rYWhlYWQgPSBvcHRpb25zLmxvb2thaGVhZCB8fCAwLjE7XG5cbiAgICB0aGlzLl9jdXJyZW50VGltZVRvQXVkaW9UaW1lRnVuY3Rpb24gPSBvcHRpb25zLmN1cnJlbnRUaW1lVG9BdWRpb1RpbWVGdW5jdGlvbiB8fCBmdW5jdGlvbiAoY3VycmVudFRpbWUpIHtcbiAgICAgIHJldHVybiBjdXJyZW50VGltZTtcbiAgICB9O1xuICB9XG5cbiAgKDAsIF9jcmVhdGVDbGFzczMuZGVmYXVsdCkoU2ltcGxlU2NoZWR1bGVyLCBbe1xuICAgIGtleTogJ19fc2NoZWR1bGVFbmdpbmUnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBfX3NjaGVkdWxlRW5naW5lKGVuZ2luZSwgdGltZSkge1xuICAgICAgdGhpcy5fX3NjaGVkRW5naW5lcy5wdXNoKGVuZ2luZSk7XG4gICAgICB0aGlzLl9fc2NoZWRUaW1lcy5wdXNoKHRpbWUpO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ19fcmVzY2hlZHVsZUVuZ2luZScsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIF9fcmVzY2hlZHVsZUVuZ2luZShlbmdpbmUsIHRpbWUpIHtcbiAgICAgIHZhciBpbmRleCA9IHRoaXMuX19zY2hlZEVuZ2luZXMuaW5kZXhPZihlbmdpbmUpO1xuXG4gICAgICBpZiAoaW5kZXggPj0gMCkge1xuICAgICAgICBpZiAodGltZSAhPT0gSW5maW5pdHkpIHtcbiAgICAgICAgICB0aGlzLl9fc2NoZWRUaW1lc1tpbmRleF0gPSB0aW1lO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHRoaXMuX19zY2hlZEVuZ2luZXMuc3BsaWNlKGluZGV4LCAxKTtcbiAgICAgICAgICB0aGlzLl9fc2NoZWRUaW1lcy5zcGxpY2UoaW5kZXgsIDEpO1xuICAgICAgICB9XG4gICAgICB9IGVsc2UgaWYgKHRpbWUgPCBJbmZpbml0eSkge1xuICAgICAgICB0aGlzLl9fc2NoZWRFbmdpbmVzLnB1c2goZW5naW5lKTtcbiAgICAgICAgdGhpcy5fX3NjaGVkVGltZXMucHVzaCh0aW1lKTtcbiAgICAgIH1cbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6ICdfX3Vuc2NoZWR1bGVFbmdpbmUnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBfX3Vuc2NoZWR1bGVFbmdpbmUoZW5naW5lKSB7XG4gICAgICB2YXIgaW5kZXggPSB0aGlzLl9fc2NoZWRFbmdpbmVzLmluZGV4T2YoZW5naW5lKTtcblxuICAgICAgaWYgKGluZGV4ID49IDApIHtcbiAgICAgICAgdGhpcy5fX3NjaGVkRW5naW5lcy5zcGxpY2UoaW5kZXgsIDEpO1xuICAgICAgICB0aGlzLl9fc2NoZWRUaW1lcy5zcGxpY2UoaW5kZXgsIDEpO1xuICAgICAgfVxuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ19fcmVzZXRUaWNrJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gX19yZXNldFRpY2soKSB7XG4gICAgICBpZiAodGhpcy5fX3NjaGVkRW5naW5lcy5sZW5ndGggPiAwKSB7XG4gICAgICAgIGlmICghdGhpcy5fX3RpbWVvdXQpIHtcbiAgICAgICAgICBsb2coJ1NpbXBsZVNjaGVkdWxlciBTdGFydCcpO1xuICAgICAgICAgIHRoaXMuX190aWNrKCk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSBpZiAodGhpcy5fX3RpbWVvdXQpIHtcbiAgICAgICAgbG9nKCdTaW1wbGVTY2hlZHVsZXIgU3RvcCcpO1xuICAgICAgICBjbGVhclRpbWVvdXQodGhpcy5fX3RpbWVvdXQpO1xuICAgICAgICB0aGlzLl9fdGltZW91dCA9IG51bGw7XG4gICAgICB9XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAnX190aWNrJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gX190aWNrKCkge1xuICAgICAgdmFyIF90aGlzID0gdGhpcztcblxuICAgICAgdmFyIGN1cnJlbnRUaW1lID0gdGhpcy5nZXRUaW1lRnVuY3Rpb24oKTtcbiAgICAgIHZhciBpID0gMDtcblxuICAgICAgd2hpbGUgKGkgPCB0aGlzLl9fc2NoZWRFbmdpbmVzLmxlbmd0aCkge1xuICAgICAgICB2YXIgZW5naW5lID0gdGhpcy5fX3NjaGVkRW5naW5lc1tpXTtcbiAgICAgICAgdmFyIHRpbWUgPSB0aGlzLl9fc2NoZWRUaW1lc1tpXTtcblxuICAgICAgICB3aGlsZSAodGltZSAmJiB0aW1lIDw9IGN1cnJlbnRUaW1lICsgdGhpcy5sb29rYWhlYWQpIHtcbiAgICAgICAgICB0aW1lID0gTWF0aC5tYXgodGltZSwgY3VycmVudFRpbWUpO1xuICAgICAgICAgIHRoaXMuX19jdXJyZW50VGltZSA9IHRpbWU7XG4gICAgICAgICAgdGltZSA9IGVuZ2luZS5hZHZhbmNlVGltZSh0aW1lKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh0aW1lICYmIHRpbWUgPCBJbmZpbml0eSkge1xuICAgICAgICAgIHRoaXMuX19zY2hlZFRpbWVzW2krK10gPSB0aW1lO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHRoaXMuX191bnNjaGVkdWxlRW5naW5lKGVuZ2luZSk7XG5cbiAgICAgICAgICAvLyByZW1vdmUgZW5naW5lIGZyb20gc2NoZWR1bGVyXG4gICAgICAgICAgaWYgKCF0aW1lKSB7XG4gICAgICAgICAgICBlbmdpbmUubWFzdGVyID0gbnVsbDtcbiAgICAgICAgICAgIHRoaXMuX19lbmdpbmVzLmRlbGV0ZShlbmdpbmUpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICB0aGlzLl9fY3VycmVudFRpbWUgPSBudWxsO1xuICAgICAgdGhpcy5fX3RpbWVvdXQgPSBudWxsO1xuXG4gICAgICBpZiAodGhpcy5fX3NjaGVkRW5naW5lcy5sZW5ndGggPiAwKSB7XG4gICAgICAgIHRoaXMuX190aW1lb3V0ID0gc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgX3RoaXMuX190aWNrKCk7XG4gICAgICAgIH0sIHRoaXMucGVyaW9kICogMTAwMCk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogU2NoZWR1bGVyIGN1cnJlbnQgbG9naWNhbCB0aW1lLlxuICAgICAqXG4gICAgICogQG5hbWUgY3VycmVudFRpbWVcbiAgICAgKiBAdHlwZSB7TnVtYmVyfVxuICAgICAqIEBtZW1iZXJvZiBTY2hlZHVsZXJcbiAgICAgKiBAaW5zdGFuY2VcbiAgICAgKi9cblxuICB9LCB7XG4gICAga2V5OiAnZGVmZXInLFxuXG5cbiAgICAvLyBjYWxsIGEgZnVuY3Rpb24gYXQgYSBnaXZlbiB0aW1lXG4gICAgLyoqXG4gICAgICogRGVmZXIgdGhlIGV4ZWN1dGlvbiBvZiBhIGZ1bmN0aW9uIGF0IGEgZ2l2ZW4gdGltZS5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1biAtIEZ1bmN0aW9uIHRvIGRlZmVyXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IFt0aW1lPXRoaXMuY3VycmVudFRpbWVdIC0gU2NoZWR1bGUgdGltZVxuICAgICAqL1xuICAgIHZhbHVlOiBmdW5jdGlvbiBkZWZlcihmdW4pIHtcbiAgICAgIHZhciB0aW1lID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMV0gOiB0aGlzLmN1cnJlbnRUaW1lO1xuXG4gICAgICBpZiAoIShmdW4gaW5zdGFuY2VvZiBGdW5jdGlvbikpIHRocm93IG5ldyBFcnJvcihcIm9iamVjdCBjYW5ub3QgYmUgZGVmZXJlZCBieSBzY2hlZHVsZXJcIik7XG5cbiAgICAgIHRoaXMuYWRkKHtcbiAgICAgICAgYWR2YW5jZVRpbWU6IGZ1bmN0aW9uIGFkdmFuY2VUaW1lKHRpbWUpIHtcbiAgICAgICAgICBmdW4odGltZSk7XG4gICAgICAgIH0gLy8gbWFrZSBzdXIgdGhhdCB0aGUgYWR2YW5jZVRpbWUgbWV0aG9kIGRvZXMgbm90IHJldHVybSBhbnl0aGluZ1xuICAgICAgfSwgdGltZSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQWRkIGEgVGltZUVuZ2luZSBmdW5jdGlvbiB0byB0aGUgc2NoZWR1bGVyIGF0IGFuIG9wdGlvbmFsbHkgZ2l2ZW4gdGltZS5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7VGltZUVuZ2luZX0gZW5naW5lIC0gRW5naW5lIHRvIGFkZCB0byB0aGUgc2NoZWR1bGVyXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IFt0aW1lPXRoaXMuY3VycmVudFRpbWVdIC0gU2NoZWR1bGUgdGltZVxuICAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6ICdhZGQnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBhZGQoZW5naW5lKSB7XG4gICAgICB2YXIgdGltZSA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDogdGhpcy5jdXJyZW50VGltZTtcblxuICAgICAgaWYgKCFfVGltZUVuZ2luZTIuZGVmYXVsdC5pbXBsZW1lbnRzU2NoZWR1bGVkKGVuZ2luZSkpIHRocm93IG5ldyBFcnJvcihcIm9iamVjdCBjYW5ub3QgYmUgYWRkZWQgdG8gc2NoZWR1bGVyXCIpO1xuXG4gICAgICBpZiAoZW5naW5lLm1hc3RlcikgdGhyb3cgbmV3IEVycm9yKFwib2JqZWN0IGhhcyBhbHJlYWR5IGJlZW4gYWRkZWQgdG8gYSBtYXN0ZXJcIik7XG5cbiAgICAgIC8vIHNldCBtYXN0ZXIgYW5kIGFkZCB0byBhcnJheVxuICAgICAgZW5naW5lLm1hc3RlciA9IHRoaXM7XG4gICAgICB0aGlzLl9fZW5naW5lcy5hZGQoZW5naW5lKTtcblxuICAgICAgLy8gc2NoZWR1bGUgZW5naW5lXG4gICAgICB0aGlzLl9fc2NoZWR1bGVFbmdpbmUoZW5naW5lLCB0aW1lKTtcbiAgICAgIHRoaXMuX19yZXNldFRpY2soKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBSZW1vdmUgYSBUaW1lRW5naW5lIGZyb20gdGhlIHNjaGVkdWxlciB0aGF0IGhhcyBiZWVuIGFkZGVkIHRvIHRoZVxuICAgICAqIHNjaGVkdWxlciB1c2luZyB0aGUgYWRkIG1ldGhvZC5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7VGltZUVuZ2luZX0gZW5naW5lIC0gRW5naW5lIHRvIHJlbW92ZSBmcm9tIHRoZSBzY2hlZHVsZXJcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gW3RpbWU9dGhpcy5jdXJyZW50VGltZV0gLSBTY2hlZHVsZSB0aW1lXG4gICAgICovXG5cbiAgfSwge1xuICAgIGtleTogJ3JlbW92ZScsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHJlbW92ZShlbmdpbmUpIHtcbiAgICAgIGlmICghZW5naW5lLm1hc3RlciB8fCBlbmdpbmUubWFzdGVyICE9PSB0aGlzKSB0aHJvdyBuZXcgRXJyb3IoXCJlbmdpbmUgaGFzIG5vdCBiZWVuIGFkZGVkIHRvIHRoaXMgc2NoZWR1bGVyXCIpO1xuXG4gICAgICAvLyByZXNldCBtYXN0ZXIgYW5kIHJlbW92ZSBmcm9tIGFycmF5XG4gICAgICBlbmdpbmUubWFzdGVyID0gbnVsbDtcbiAgICAgIHRoaXMuX19lbmdpbmVzLmRlbGV0ZShlbmdpbmUpO1xuXG4gICAgICAvLyB1bnNjaGVkdWxlIGVuZ2luZVxuICAgICAgdGhpcy5fX3Vuc2NoZWR1bGVFbmdpbmUoZW5naW5lKTtcbiAgICAgIHRoaXMuX19yZXNldFRpY2soKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBSZXNjaGVkdWxlIGEgc2NoZWR1bGVkIHRpbWUgZW5naW5lIGF0IGEgZ2l2ZW4gdGltZS5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7VGltZUVuZ2luZX0gZW5naW5lIC0gRW5naW5lIHRvIHJlc2NoZWR1bGVcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gdGltZSAtIFNjaGVkdWxlIHRpbWVcbiAgICAgKi9cblxuICB9LCB7XG4gICAga2V5OiAncmVzZXRFbmdpbmVUaW1lJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gcmVzZXRFbmdpbmVUaW1lKGVuZ2luZSkge1xuICAgICAgdmFyIHRpbWUgPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6IHRoaXMuY3VycmVudFRpbWU7XG5cbiAgICAgIHRoaXMuX19yZXNjaGVkdWxlRW5naW5lKGVuZ2luZSwgdGltZSk7XG4gICAgICB0aGlzLl9fcmVzZXRUaWNrKCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2hlY2sgd2hldGhlciBhIGdpdmVuIGVuZ2luZSBpcyBzY2hlZHVsZWQuXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge1RpbWVFbmdpbmV9IGVuZ2luZSAtIEVuZ2luZSB0byBjaGVja1xuICAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6ICdoYXMnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBoYXMoZW5naW5lKSB7XG4gICAgICByZXR1cm4gdGhpcy5fX2VuZ2luZXMuaGFzKGVuZ2luZSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUmVtb3ZlIGFsbCBlbmdpbmVzIGZyb20gdGhlIHNjaGVkdWxlci5cbiAgICAgKi9cblxuICB9LCB7XG4gICAga2V5OiAnY2xlYXInLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBjbGVhcigpIHtcbiAgICAgIGlmICh0aGlzLl9fdGltZW91dCkge1xuICAgICAgICBjbGVhclRpbWVvdXQodGhpcy5fX3RpbWVvdXQpO1xuICAgICAgICB0aGlzLl9fdGltZW91dCA9IG51bGw7XG4gICAgICB9XG5cbiAgICAgIHRoaXMuX19zY2hlZEVuZ2luZXMubGVuZ3RoID0gMDtcbiAgICAgIHRoaXMuX19zY2hlZFRpbWVzLmxlbmd0aCA9IDA7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAnY3VycmVudFRpbWUnLFxuICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgcmV0dXJuIHRoaXMuX19jdXJyZW50VGltZSB8fCB0aGlzLmdldFRpbWVGdW5jdGlvbigpICsgdGhpcy5sb29rYWhlYWQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogU2NoZWR1bGVyIGN1cnJlbnQgYXVkaW8gdGltZSBhY2NvcmRpbmcgdG8gYGN1cnJlbnRUaW1lYFxuICAgICAqXG4gICAgICogQG5hbWUgYXVkaW9UaW1lXG4gICAgICogQHR5cGUge051bWJlcn1cbiAgICAgKiBAbWVtYmVyaWYgU2NoZWR1bGVyXG4gICAgICogQGluc3RhbmNlXG4gICAgICovXG5cbiAgfSwge1xuICAgIGtleTogJ2F1ZGlvVGltZScsXG4gICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICAvLyBAbm90ZSAtIGFkZCB0aGlzIGFzIGluXG4gICAgICBpZiAodGhpcy5tYXN0ZXIpIHJldHVybiB0aGlzLm1hc3Rlci5hdWRpb1RpbWU7XG5cbiAgICAgIHJldHVybiB0aGlzLl9jdXJyZW50VGltZVRvQXVkaW9UaW1lRnVuY3Rpb24odGhpcy5jdXJyZW50VGltZSk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAnY3VycmVudFBvc2l0aW9uJyxcbiAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgfVxuICB9XSk7XG4gIHJldHVybiBTaW1wbGVTY2hlZHVsZXI7XG59KCk7XG5cbmV4cG9ydHMuZGVmYXVsdCA9IFNpbXBsZVNjaGVkdWxlcjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtjaGFyc2V0PXV0Zi04O2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZ6SWpwYklsTnBiWEJzWlZOamFHVmtkV3hsY2k1cWN5SmRMQ0p1WVcxbGN5STZXeUpzYjJjaUxDSnBjMFoxYm1OMGFXOXVJaXdpWm5WdVkzUnBiMjVVYjBOb1pXTnJJaXdpZEc5VGRISnBibWNpTENKallXeHNJaXdpVTJsdGNHeGxVMk5vWldSMWJHVnlJaXdpWjJWMFZHbHRaVVoxYm1OMGFXOXVJaXdpYjNCMGFXOXVjeUlzSWtWeWNtOXlJaXdpWDE5bGJtZHBibVZ6SWl3aVgxOXpZMmhsWkVWdVoybHVaWE1pTENKZlgzTmphR1ZrVkdsdFpYTWlMQ0pmWDJOMWNuSmxiblJVYVcxbElpd2lYMTkwYVcxbGIzVjBJaXdpY0dWeWFXOWtJaXdpYkc5dmEyRm9aV0ZrSWl3aVgyTjFjbkpsYm5SVWFXMWxWRzlCZFdScGIxUnBiV1ZHZFc1amRHbHZiaUlzSW1OMWNuSmxiblJVYVcxbFZHOUJkV1JwYjFScGJXVkdkVzVqZEdsdmJpSXNJbU4xY25KbGJuUlVhVzFsSWl3aVpXNW5hVzVsSWl3aWRHbHRaU0lzSW5CMWMyZ2lMQ0pwYm1SbGVDSXNJbWx1WkdWNFQyWWlMQ0pKYm1acGJtbDBlU0lzSW5Od2JHbGpaU0lzSW14bGJtZDBhQ0lzSWw5ZmRHbGpheUlzSW1Oc1pXRnlWR2x0Wlc5MWRDSXNJbWtpTENKTllYUm9JaXdpYldGNElpd2lZV1IyWVc1alpWUnBiV1VpTENKZlgzVnVjMk5vWldSMWJHVkZibWRwYm1VaUxDSnRZWE4wWlhJaUxDSmtaV3hsZEdVaUxDSnpaWFJVYVcxbGIzVjBJaXdpWm5WdUlpd2lSblZ1WTNScGIyNGlMQ0poWkdRaUxDSlVhVzFsUlc1bmFXNWxJaXdpYVcxd2JHVnRaVzUwYzFOamFHVmtkV3hsWkNJc0lsOWZjMk5vWldSMWJHVkZibWRwYm1VaUxDSmZYM0psYzJWMFZHbGpheUlzSWw5ZmNtVnpZMmhsWkhWc1pVVnVaMmx1WlNJc0ltaGhjeUlzSW1GMVpHbHZWR2x0WlNJc0luVnVaR1ZtYVc1bFpDSmRMQ0p0WVhCd2FXNW5jeUk2SWpzN096czdPenM3T3pzN096czdPenM3TzBGQlFVRTdPenM3UVVGRFFUczdPenM3TzBGQlJVRXNTVUZCVFVFc1RVRkJUU3h4UWtGQlRTeHBRa0ZCVGl4RFFVRmFPenRCUVVWQkxGTkJRVk5ETEZWQlFWUXNRMEZCYjBKRExHVkJRWEJDTEVWQlFYRkRPMEZCUTI1RExGTkJRVTlCTEcxQ1FVRnRRaXhIUVVGSFF5eFJRVUZJTEVOQlFWbERMRWxCUVZvc1EwRkJhVUpHTEdWQlFXcENMRTFCUVhORExHMUNRVUZvUlR0QlFVTkVPenRCUVVWRU96czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenRKUVN0Q1RVY3NaVHRCUVVOS0xESkNRVUZaUXl4bFFVRmFMRVZCUVRKRE8wRkJRVUVzVVVGQlpFTXNUMEZCWXl4MVJVRkJTaXhGUVVGSk8wRkJRVUU3TzBGQlEzcERMRkZCUVVrc1EwRkJRMDRzVjBGQlYwc3NaVUZCV0N4RFFVRk1MRVZCUTBVc1RVRkJUU3hKUVVGSlJTeExRVUZLTEVOQlFWVXNiME5CUVZZc1EwRkJUanM3UVVGRlJpeFRRVUZMUml4bFFVRk1MRWRCUVhWQ1FTeGxRVUYyUWpzN1FVRkZRU3hUUVVGTFJ5eFRRVUZNTEVkQlFXbENMRzFDUVVGcVFqczdRVUZGUVN4VFFVRkxReXhqUVVGTUxFZEJRWE5DTEVWQlFYUkNPMEZCUTBFc1UwRkJTME1zV1VGQlRDeEhRVUZ2UWl4RlFVRndRanM3UVVGRlFTeFRRVUZMUXl4aFFVRk1MRWRCUVhGQ0xFbEJRWEpDTzBGQlEwRXNVMEZCUzBNc1UwRkJUQ3hIUVVGcFFpeEpRVUZxUWpzN1FVRkZRVHM3T3pzN096dEJRVTlCTEZOQlFVdERMRTFCUVV3c1IwRkJZMUFzVVVGQlVVOHNUVUZCVWl4SlFVRnJRaXhMUVVGb1F6czdRVUZGUVRzN096czdPenRCUVU5QkxGTkJRVXRETEZOQlFVd3NSMEZCYVVKU0xGRkJRVkZSTEZOQlFWSXNTVUZCY1VJc1IwRkJkRU03TzBGQlJVRXNVMEZCUzBNc0swSkJRVXdzUjBGRFJWUXNVVUZCVVZVc09FSkJRVklzU1VGQk1FTXNWVUZCVTBNc1YwRkJWQ3hGUVVGelFqdEJRVUZGTEdGQlFVOUJMRmRCUVZBN1FVRkJiMElzUzBGRWVFWTdRVUZGUkRzN096dHhRMEZGWjBKRExFMHNSVUZCVVVNc1NTeEZRVUZOTzBGQlF6ZENMRmRCUVV0V0xHTkJRVXdzUTBGQmIwSlhMRWxCUVhCQ0xFTkJRWGxDUml4TlFVRjZRanRCUVVOQkxGZEJRVXRTTEZsQlFVd3NRMEZCYTBKVkxFbEJRV3hDTEVOQlFYVkNSQ3hKUVVGMlFqdEJRVU5FT3pzN2RVTkJSV3RDUkN4TkxFVkJRVkZETEVrc1JVRkJUVHRCUVVNdlFpeFZRVUZOUlN4UlFVRlJMRXRCUVV0YUxHTkJRVXdzUTBGQmIwSmhMRTlCUVhCQ0xFTkJRVFJDU2l4TlFVRTFRaXhEUVVGa096dEJRVVZCTEZWQlFVbEhMRk5CUVZNc1EwRkJZaXhGUVVGblFqdEJRVU5rTEZsQlFVbEdMRk5CUVZOSkxGRkJRV0lzUlVGQmRVSTdRVUZEY2tJc1pVRkJTMklzV1VGQlRDeERRVUZyUWxjc1MwRkJiRUlzU1VGQk1rSkdMRWxCUVROQ08wRkJRMFFzVTBGR1JDeE5RVVZQTzBGQlEwd3NaVUZCUzFZc1kwRkJUQ3hEUVVGdlFtVXNUVUZCY0VJc1EwRkJNa0pJTEV0QlFUTkNMRVZCUVd0RExFTkJRV3hETzBGQlEwRXNaVUZCUzFnc1dVRkJUQ3hEUVVGclFtTXNUVUZCYkVJc1EwRkJlVUpJTEV0QlFYcENMRVZCUVdkRExFTkJRV2hETzBGQlEwUTdRVUZEUml4UFFWQkVMRTFCVDA4c1NVRkJTVVlzVDBGQlQwa3NVVUZCV0N4RlFVRnhRanRCUVVNeFFpeGhRVUZMWkN4alFVRk1MRU5CUVc5Q1Z5eEpRVUZ3UWl4RFFVRjVRa1lzVFVGQmVrSTdRVUZEUVN4aFFVRkxVaXhaUVVGTUxFTkJRV3RDVlN4SlFVRnNRaXhEUVVGMVFrUXNTVUZCZGtJN1FVRkRSRHRCUVVOR096czdkVU5CUld0Q1JDeE5MRVZCUVZFN1FVRkRla0lzVlVGQlRVY3NVVUZCVVN4TFFVRkxXaXhqUVVGTUxFTkJRVzlDWVN4UFFVRndRaXhEUVVFMFFrb3NUVUZCTlVJc1EwRkJaRHM3UVVGRlFTeFZRVUZKUnl4VFFVRlRMRU5CUVdJc1JVRkJaMEk3UVVGRFpDeGhRVUZMV2l4alFVRk1MRU5CUVc5Q1pTeE5RVUZ3UWl4RFFVRXlRa2dzUzBGQk0wSXNSVUZCYTBNc1EwRkJiRU03UVVGRFFTeGhRVUZMV0N4WlFVRk1MRU5CUVd0Q1l5eE5RVUZzUWl4RFFVRjVRa2dzUzBGQmVrSXNSVUZCWjBNc1EwRkJhRU03UVVGRFJEdEJRVU5HT3pzN2EwTkJSV0U3UVVGRFdpeFZRVUZKTEV0QlFVdGFMR05CUVV3c1EwRkJiMEpuUWl4TlFVRndRaXhIUVVFMlFpeERRVUZxUXl4RlFVRnZRenRCUVVOc1F5eFpRVUZKTEVOQlFVTXNTMEZCUzJJc1UwRkJWaXhGUVVGeFFqdEJRVU51UW1Jc1kwRkJTU3gxUWtGQlNqdEJRVU5CTEdWQlFVc3lRaXhOUVVGTU8wRkJRMFE3UVVGRFJpeFBRVXhFTEUxQlMwOHNTVUZCU1N4TFFVRkxaQ3hUUVVGVUxFVkJRVzlDTzBGQlEzcENZaXhaUVVGSkxITkNRVUZLTzBGQlEwRTBRaXh4UWtGQllTeExRVUZMWml4VFFVRnNRanRCUVVOQkxHRkJRVXRCTEZOQlFVd3NSMEZCYVVJc1NVRkJha0k3UVVGRFJEdEJRVU5HT3pzN05rSkJSVkU3UVVGQlFUczdRVUZEVUN4VlFVRk5TeXhqUVVGakxFdEJRVXRhTEdWQlFVd3NSVUZCY0VJN1FVRkRRU3hWUVVGSmRVSXNTVUZCU1N4RFFVRlNPenRCUVVWQkxHRkJRVTlCTEVsQlFVa3NTMEZCUzI1Q0xHTkJRVXdzUTBGQmIwSm5RaXhOUVVFdlFpeEZRVUYxUXp0QlFVTnlReXhaUVVGTlVDeFRRVUZUTEV0QlFVdFVMR05CUVV3c1EwRkJiMEp0UWl4RFFVRndRaXhEUVVGbU8wRkJRMEVzV1VGQlNWUXNUMEZCVHl4TFFVRkxWQ3haUVVGTUxFTkJRV3RDYTBJc1EwRkJiRUlzUTBGQldEczdRVUZGUVN4bFFVRlBWQ3hSUVVGUlFTeFJRVUZSUml4alFVRmpMRXRCUVV0SUxGTkJRVEZETEVWQlFYRkVPMEZCUTI1RVN5eHBRa0ZCVDFVc1MwRkJTME1zUjBGQlRDeERRVUZUV0N4SlFVRlVMRVZCUVdWR0xGZEJRV1lzUTBGQlVEdEJRVU5CTEdWQlFVdE9MR0ZCUVV3c1IwRkJjVUpSTEVsQlFYSkNPMEZCUTBGQkxHbENRVUZQUkN4UFFVRlBZU3hYUVVGUUxFTkJRVzFDV2l4SlFVRnVRaXhEUVVGUU8wRkJRMFE3TzBGQlJVUXNXVUZCU1VFc1VVRkJVVUVzVDBGQlQwa3NVVUZCYmtJc1JVRkJOa0k3UVVGRE0wSXNaVUZCUzJJc1dVRkJUQ3hEUVVGclFtdENMRWRCUVd4Q0xFbEJRWGxDVkN4SlFVRjZRanRCUVVORUxGTkJSa1FzVFVGRlR6dEJRVU5NTEdWQlFVdGhMR3RDUVVGTUxFTkJRWGRDWkN4TlFVRjRRanM3UVVGRlFUdEJRVU5CTEdOQlFVa3NRMEZCUTBNc1NVRkJUQ3hGUVVGWE8wRkJRMVJFTEcxQ1FVRlBaU3hOUVVGUUxFZEJRV2RDTEVsQlFXaENPMEZCUTBFc2FVSkJRVXQ2UWl4VFFVRk1MRU5CUVdVd1FpeE5RVUZtTEVOQlFYTkNhRUlzVFVGQmRFSTdRVUZEUkR0QlFVTkdPMEZCUTBZN08wRkJSVVFzVjBGQlMxQXNZVUZCVEN4SFFVRnhRaXhKUVVGeVFqdEJRVU5CTEZkQlFVdERMRk5CUVV3c1IwRkJhVUlzU1VGQmFrSTdPMEZCUlVFc1ZVRkJTU3hMUVVGTFNDeGpRVUZNTEVOQlFXOUNaMElzVFVGQmNFSXNSMEZCTmtJc1EwRkJha01zUlVGQmIwTTdRVUZEYkVNc1lVRkJTMklzVTBGQlRDeEhRVUZwUW5WQ0xGZEJRVmNzV1VGQlRUdEJRVU5vUXl4blFrRkJTMVFzVFVGQlREdEJRVU5FTEZOQlJtZENMRVZCUldRc1MwRkJTMklzVFVGQlRDeEhRVUZqTEVsQlJrRXNRMEZCYWtJN1FVRkhSRHRCUVVOR096dEJRVVZFT3pzN096czdPenM3T3pzN08wRkJaME5CTzBGQlEwRTdPenM3T3pzd1FrRk5UWFZDTEVjc1JVRkJPRUk3UVVGQlFTeFZRVUY2UW1wQ0xFbEJRWGxDTEhWRlFVRnNRaXhMUVVGTFJpeFhRVUZoT3p0QlFVTnNReXhWUVVGSkxFVkJRVVZ0UWl4bFFVRmxReXhSUVVGcVFpeERRVUZLTEVWQlEwVXNUVUZCVFN4SlFVRkpPVUlzUzBGQlNpeERRVUZWTEhWRFFVRldMRU5CUVU0N08wRkJSVVlzVjBGQlN5dENMRWRCUVV3c1EwRkJVenRCUVVOUVVDeHhRa0ZCWVN4eFFrRkJVMW9zU1VGQlZDeEZRVUZsTzBGQlFVVnBRaXhqUVVGSmFrSXNTVUZCU2p0QlFVRlpMRk5CUkc1RExFTkJRM0ZETzBGQlJISkRMRTlCUVZRc1JVRkZSMEVzU1VGR1NEdEJRVWRFT3p0QlFVVkVPenM3T3pzN096czdkMEpCVFVsRUxFMHNSVUZCYVVNN1FVRkJRU3hWUVVGNlFrTXNTVUZCZVVJc2RVVkJRV3hDTEV0QlFVdEdMRmRCUVdFN08wRkJRMjVETEZWQlFVa3NRMEZCUTNOQ0xIRkNRVUZYUXl4dFFrRkJXQ3hEUVVFclFuUkNMRTFCUVM5Q0xFTkJRVXdzUlVGRFJTeE5RVUZOTEVsQlFVbFlMRXRCUVVvc1EwRkJWU3h4UTBGQlZpeERRVUZPT3p0QlFVVkdMRlZCUVVsWExFOUJRVTlsTEUxQlFWZ3NSVUZEUlN4TlFVRk5MRWxCUVVreFFpeExRVUZLTEVOQlFWVXNNa05CUVZZc1EwRkJUanM3UVVGRlJqdEJRVU5CVnl4aFFVRlBaU3hOUVVGUUxFZEJRV2RDTEVsQlFXaENPMEZCUTBFc1YwRkJTM3BDTEZOQlFVd3NRMEZCWlRoQ0xFZEJRV1lzUTBGQmJVSndRaXhOUVVGdVFqczdRVUZGUVR0QlFVTkJMRmRCUVV0MVFpeG5Ra0ZCVEN4RFFVRnpRblpDTEUxQlFYUkNMRVZCUVRoQ1F5eEpRVUU1UWp0QlFVTkJMRmRCUVV0MVFpeFhRVUZNTzBGQlEwUTdPMEZCUlVRN096czdPenM3T3pzN01rSkJUMDk0UWl4TkxFVkJRVkU3UVVGRFlpeFZRVUZKTEVOQlFVTkJMRTlCUVU5bExFMUJRVklzU1VGQmEwSm1MRTlCUVU5bExFMUJRVkFzUzBGQmEwSXNTVUZCZUVNc1JVRkRSU3hOUVVGTkxFbEJRVWt4UWl4TFFVRktMRU5CUVZVc05rTkJRVllzUTBGQlRqczdRVUZGUmp0QlFVTkJWeXhoUVVGUFpTeE5RVUZRTEVkQlFXZENMRWxCUVdoQ08wRkJRMEVzVjBGQlMzcENMRk5CUVV3c1EwRkJaVEJDTEUxQlFXWXNRMEZCYzBKb1FpeE5RVUYwUWpzN1FVRkZRVHRCUVVOQkxGZEJRVXRqTEd0Q1FVRk1MRU5CUVhkQ1pDeE5RVUY0UWp0QlFVTkJMRmRCUVV0M1FpeFhRVUZNTzBGQlEwUTdPMEZCUlVRN096czdPenM3T3p0dlEwRk5aMEo0UWl4TkxFVkJRV2xETzBGQlFVRXNWVUZCZWtKRExFbEJRWGxDTEhWRlFVRnNRaXhMUVVGTFJpeFhRVUZoT3p0QlFVTXZReXhYUVVGTE1FSXNhMEpCUVV3c1EwRkJkMEo2UWl4TlFVRjRRaXhGUVVGblEwTXNTVUZCYUVNN1FVRkRRU3hYUVVGTGRVSXNWMEZCVER0QlFVTkVPenRCUVVWRU96czdPenM3T3p0M1FrRkxTWGhDTEUwc1JVRkJVVHRCUVVOV0xHRkJRVThzUzBGQlMxWXNVMEZCVEN4RFFVRmxiME1zUjBGQlppeERRVUZ0UWpGQ0xFMUJRVzVDTEVOQlFWQTdRVUZEUkRzN1FVRkZSRHM3T3pzN096UkNRVWRSTzBGQlEwNHNWVUZCU1N4TFFVRkxUaXhUUVVGVUxFVkJRVzlDTzBGQlEyeENaU3h4UWtGQllTeExRVUZMWml4VFFVRnNRanRCUVVOQkxHRkJRVXRCTEZOQlFVd3NSMEZCYVVJc1NVRkJha0k3UVVGRFJEczdRVUZGUkN4WFFVRkxTQ3hqUVVGTUxFTkJRVzlDWjBJc1RVRkJjRUlzUjBGQk5rSXNRMEZCTjBJN1FVRkRRU3hYUVVGTFppeFpRVUZNTEVOQlFXdENaU3hOUVVGc1FpeEhRVUV5UWl4RFFVRXpRanRCUVVORU96czdkMEpCYWtocFFqdEJRVU5vUWl4aFFVRlBMRXRCUVV0a0xHRkJRVXdzU1VGQmMwSXNTMEZCUzA0c1pVRkJUQ3hMUVVGNVFpeExRVUZMVXl4VFFVRXpSRHRCUVVORU96dEJRVVZFT3pzN096czdPenM3T3p0M1FrRlJaMEk3UVVGRFpEdEJRVU5CTEZWQlFVa3NTMEZCUzIxQ0xFMUJRVlFzUlVGRFJTeFBRVUZQTEV0QlFVdEJMRTFCUVV3c1EwRkJXVmtzVTBGQmJrSTdPMEZCUlVZc1lVRkJUeXhMUVVGTE9VSXNLMEpCUVV3c1EwRkJjVU1zUzBGQlMwVXNWMEZCTVVNc1EwRkJVRHRCUVVORU96czdkMEpCUlhGQ08wRkJRM0JDTEdGQlFVODJRaXhUUVVGUU8wRkJRMFE3T3pzN08ydENRVGhHV1RGRExHVWlMQ0ptYVd4bElqb2lVMmx0Y0d4bFUyTm9aV1IxYkdWeUxtcHpJaXdpYzI5MWNtTmxjME52Ym5SbGJuUWlPbHNpYVcxd2IzSjBJR1JsWW5WbklHWnliMjBnSjJSbFluVm5KenRjYm1sdGNHOXlkQ0JVYVcxbFJXNW5hVzVsSUdaeWIyMGdKeTR1TDJOdmNtVXZWR2x0WlVWdVoybHVaU2M3WEc1Y2JtTnZibk4wSUd4dlp5QTlJR1JsWW5WbktDZDNZWFpsYzJwek9tMWhjM1JsY25NbktUdGNibHh1Wm5WdVkzUnBiMjRnYVhOR2RXNWpkR2x2YmlobWRXNWpkR2x2YmxSdlEyaGxZMnNwSUh0Y2JpQWdjbVYwZFhKdUlHWjFibU4wYVc5dVZHOURhR1ZqYXlBbUppQjdmUzUwYjFOMGNtbHVaeTVqWVd4c0tHWjFibU4wYVc5dVZHOURhR1ZqYXlrZ1BUMDlJQ2RiYjJKcVpXTjBJRVoxYm1OMGFXOXVYU2M3WEc1OVhHNWNiaThxS2x4dUlDcGNiaUFxWEc0Z0tseHVJQ29nVkdobElGTnBiWEJzWlZOamFHVmtkV3hsY2lCamJHRnpjeUJwYlhCc1pXMWxiblJ6SUdFZ2MybHRjR3hwWm1sbFpDQnRZWE4wWlhJZ1ptOXlJSFJwYldVZ1pXNW5hVzVsYzF4dUlDb2dLSE5sWlNCVWFXMWxSVzVuYVc1bEtTQjBhR0YwSUdsdGNHeGxiV1Z1ZENCMGFHVWdjMk5vWldSMWJHVmtJR2x1ZEdWeVptRmpaVnh1SUNvZ2MzVmphQ0JoY3lCMGFHVWdUV1YwY205dWIyMWxJR0Z1WkNCMGFHVWdSM0poYm5Wc1lYSkZibWRwYm1VdUlGUm9aU0JCVUVrZ1lXNWtJR1oxYm5ScGIyNWhiR2wwYVdWeklHOW1YRzRnS2lCMGFHVWdVMmx0Y0d4bFUyTm9aV1IxYkdWeUlHTnNZWE56SUdGeVpTQnBaR1Z1ZEdsallXd2dkRzhnZEdobElGTmphR1ZrZFd4bGNpQmpiR0Z6Y3k0Z1FuVjBMQ0J2ZEdobGNseHVJQ29nZEdoaGJpQjBhR1VnVTJOb1pXUjFiR1Z5TENCMGFHVWdVMmx0Y0d4bFUyTm9aV1IxYkdWeUlHTnNZWE56SUdSdlpYTWdibTkwSUdkMVlYSmhiblJsWlNCMGFHVWdiM0prWlhKY2JpQXFJRzltSUdWMlpXNTBjeUFvYVM1bExpQmpZV3hzY3lCMGJ5QjBhR1VnWVdSMllXNWpaVlJwYldVZ2JXVjBhRzlrSUc5bUlITmphR1ZrZFd4bFpDQjBhVzFsSUdWdVoybHVaWE5jYmlBcUlHRnVaQ0IwYnlCelkyaGxaSFZzWldRZ1kyRnNiR0poWTJzZ1puVnVZM1JwYjI1ektTQjNhWFJvYVc0Z1lTQnpZMmhsWkhWc2FXNW5JSEJsY21sdlpDQW9jMlZsSUhCbGNtbHZaRnh1SUNvZ1lYUjBjbWxpZFhSbEtTNWNiaUFxWEc0Z0tpQjdRR3hwYm1zZ2FIUjBjSE02THk5eVlYZG5hWFF1WTI5dEwzZGhkbVZ6YW5NdmQyRjJaWE10YldGemRHVnljeTl0WVhOMFpYSXZaWGhoYlhCc1pYTXZjMk5vWldSMWJHVnlMMmx1WkdWNExtaDBiV3g5WEc0Z0tseHVJQ29nUUhCaGNtRnRJSHRHZFc1amRHbHZibjBnWjJWMFZHbHRaVVoxYm1OMGFXOXVJQzBnUm5WdVkzUnBiMjRnZEdoaGRDQnRkWE4wSUhKbGRIVnliaUJoSUhScGJXVWdhVzRnYzJWamIyNWtMbHh1SUNvZ1FIQmhjbUZ0SUh0UFltcGxZM1I5SUZ0dmNIUnBiMjV6UFh0OVhTQXRJR1JsWm1GMWJIUWdiM0IwYVc5dWMxeHVJQ29nUUhCaGNtRnRJSHRPZFcxaVpYSjlJRnR2Y0hScGIyNXpMbkJsY21sdlpEMHdMakF5TlYwZ0xTQndaWEpwYjJRZ2IyWWdkR2hsSUhOamFHVmtkV3hsY2k1Y2JpQXFJRUJ3WVhKaGJTQjdUblZ0WW1WeWZTQmJiM0IwYVc5dWN5NXNiMjlyWVdobFlXUTlNQzR4WFNBdElHeHZiMnRoYUdWaFpDQnZaaUIwYUdVZ2MyTm9aV1IxYkdWeUxseHVJQ3BjYmlBcUlFQnpaV1VnVkdsdFpVVnVaMmx1WlZ4dUlDb2dRSE5sWlNCVFkyaGxaSFZzWlhKY2JpQXFYRzRnS2lCQVpYaGhiWEJzWlZ4dUlDb2dhVzF3YjNKMElDb2dZWE1nYldGemRHVnljeUJtY205dElDZDNZWFpsY3kxdFlYTjBaWEp6Snp0Y2JpQXFYRzRnS2lCamIyNXpkQ0JuWlhSVWFXMWxSblZ1WTNScGIyNGdQU0FvS1NBOVBpQndjbVZtYjNKdFlXNWpaUzV1YjNjb0tTQXZJREV3TURBN1hHNGdLaUJqYjI1emRDQnpZMmhsWkhWc1pYSWdQU0J1WlhjZ2JXRnpkR1Z5Y3k1VGFXMXdiR1ZUWTJobFpIVnNaWElvWjJWMFZHbHRaVVoxYm1OMGFXOXVLVHRjYmlBcVhHNGdLaUJ6WTJobFpIVnNaWEl1WVdSa0tHMTVSVzVuYVc1bEtUdGNiaUFxTDF4dVkyeGhjM01nVTJsdGNHeGxVMk5vWldSMWJHVnlJSHRjYmlBZ1kyOXVjM1J5ZFdOMGIzSW9aMlYwVkdsdFpVWjFibU4wYVc5dUxDQnZjSFJwYjI1eklEMGdlMzBwSUh0Y2JpQWdJQ0JwWmlBb0lXbHpSblZ1WTNScGIyNG9aMlYwVkdsdFpVWjFibU4wYVc5dUtTbGNiaUFnSUNBZ0lIUm9jbTkzSUc1bGR5QkZjbkp2Y2lnblNXNTJZV3hwWkNCaGNtZDFiV1Z1ZENCZ1oyVjBWR2x0WlVaMWJtTjBhVzl1WUNjcE8xeHVYRzRnSUNBZ2RHaHBjeTVuWlhSVWFXMWxSblZ1WTNScGIyNGdQU0JuWlhSVWFXMWxSblZ1WTNScGIyNDdYRzVjYmlBZ0lDQjBhR2x6TGw5ZlpXNW5hVzVsY3lBOUlHNWxkeUJUWlhRb0tUdGNibHh1SUNBZ0lIUm9hWE11WDE5elkyaGxaRVZ1WjJsdVpYTWdQU0JiWFR0Y2JpQWdJQ0IwYUdsekxsOWZjMk5vWldSVWFXMWxjeUE5SUZ0ZE8xeHVYRzRnSUNBZ2RHaHBjeTVmWDJOMWNuSmxiblJVYVcxbElEMGdiblZzYkR0Y2JpQWdJQ0IwYUdsekxsOWZkR2x0Wlc5MWRDQTlJRzUxYkd3N1hHNWNiaUFnSUNBdktpcGNiaUFnSUNBZ0tpQnpZMmhsWkhWc1pYSWdLSE5sZEZScGJXVnZkWFFwSUhCbGNtbHZaRnh1SUNBZ0lDQXFJRUIwZVhCbElIdE9kVzFpWlhKOVhHNGdJQ0FnSUNvZ1FHNWhiV1VnY0dWeWFXOWtYRzRnSUNBZ0lDb2dRRzFsYldKbGNtOW1JRk5qYUdWa2RXeGxjbHh1SUNBZ0lDQXFJRUJwYm5OMFlXNWpaVnh1SUNBZ0lDQXFMMXh1SUNBZ0lIUm9hWE11Y0dWeWFXOWtJRDBnYjNCMGFXOXVjeTV3WlhKcGIyUWdmSHdnTUM0d01qVTdYRzVjYmlBZ0lDQXZLaXBjYmlBZ0lDQWdLaUJ6WTJobFpIVnNaWElnYkc5dmEyRm9aV0ZrSUhScGJXVWdLRDRnY0dWeWFXOWtLVnh1SUNBZ0lDQXFJRUIwZVhCbElIdE9kVzFpWlhKOVhHNGdJQ0FnSUNvZ1FHNWhiV1VnYkc5dmEyRm9aV0ZrWEc0Z0lDQWdJQ29nUUcxbGJXSmxjbTltSUZOamFHVmtkV3hsY2x4dUlDQWdJQ0FxSUVCcGJuTjBZVzVqWlZ4dUlDQWdJQ0FxTDF4dUlDQWdJSFJvYVhNdWJHOXZhMkZvWldGa0lEMGdiM0IwYVc5dWN5NXNiMjlyWVdobFlXUWdmSHdnTUM0eE8xeHVYRzRnSUNBZ2RHaHBjeTVmWTNWeWNtVnVkRlJwYldWVWIwRjFaR2x2VkdsdFpVWjFibU4wYVc5dUlEMWNiaUFnSUNBZ0lHOXdkR2x2Ym5NdVkzVnljbVZ1ZEZScGJXVlViMEYxWkdsdlZHbHRaVVoxYm1OMGFXOXVJSHg4d3FCbWRXNWpkR2x2YmloamRYSnlaVzUwVkdsdFpTa2dleUJ5WlhSMWNtNGdZM1Z5Y21WdWRGUnBiV1VnZlR0Y2JpQWdmVnh1WEc0Z0lGOWZjMk5vWldSMWJHVkZibWRwYm1Vb1pXNW5hVzVsTENCMGFXMWxLU0I3WEc0Z0lDQWdkR2hwY3k1ZlgzTmphR1ZrUlc1bmFXNWxjeTV3ZFhOb0tHVnVaMmx1WlNrN1hHNGdJQ0FnZEdocGN5NWZYM05qYUdWa1ZHbHRaWE11Y0hWemFDaDBhVzFsS1R0Y2JpQWdmVnh1WEc0Z0lGOWZjbVZ6WTJobFpIVnNaVVZ1WjJsdVpTaGxibWRwYm1Vc0lIUnBiV1VwSUh0Y2JpQWdJQ0JqYjI1emRDQnBibVJsZUNBOUlIUm9hWE11WDE5elkyaGxaRVZ1WjJsdVpYTXVhVzVrWlhoUFppaGxibWRwYm1VcE8xeHVYRzRnSUNBZ2FXWWdLR2x1WkdWNElENDlJREFwSUh0Y2JpQWdJQ0FnSUdsbUlDaDBhVzFsSUNFOVBTQkpibVpwYm1sMGVTa2dlMXh1SUNBZ0lDQWdJQ0IwYUdsekxsOWZjMk5vWldSVWFXMWxjMXRwYm1SbGVGMGdQU0IwYVcxbE8xeHVJQ0FnSUNBZ2ZTQmxiSE5sSUh0Y2JpQWdJQ0FnSUNBZ2RHaHBjeTVmWDNOamFHVmtSVzVuYVc1bGN5NXpjR3hwWTJVb2FXNWtaWGdzSURFcE8xeHVJQ0FnSUNBZ0lDQjBhR2x6TGw5ZmMyTm9aV1JVYVcxbGN5NXpjR3hwWTJVb2FXNWtaWGdzSURFcE8xeHVJQ0FnSUNBZ2ZWeHVJQ0FnSUgwZ1pXeHpaU0JwWmlBb2RHbHRaU0E4SUVsdVptbHVhWFI1S1NCN1hHNGdJQ0FnSUNCMGFHbHpMbDlmYzJOb1pXUkZibWRwYm1WekxuQjFjMmdvWlc1bmFXNWxLVHRjYmlBZ0lDQWdJSFJvYVhNdVgxOXpZMmhsWkZScGJXVnpMbkIxYzJnb2RHbHRaU2s3WEc0Z0lDQWdmVnh1SUNCOVhHNWNiaUFnWDE5MWJuTmphR1ZrZFd4bFJXNW5hVzVsS0dWdVoybHVaU2tnZTF4dUlDQWdJR052Ym5OMElHbHVaR1Y0SUQwZ2RHaHBjeTVmWDNOamFHVmtSVzVuYVc1bGN5NXBibVJsZUU5bUtHVnVaMmx1WlNrN1hHNWNiaUFnSUNCcFppQW9hVzVrWlhnZ1BqMGdNQ2tnZTF4dUlDQWdJQ0FnZEdocGN5NWZYM05qYUdWa1JXNW5hVzVsY3k1emNHeHBZMlVvYVc1a1pYZ3NJREVwTzF4dUlDQWdJQ0FnZEdocGN5NWZYM05qYUdWa1ZHbHRaWE11YzNCc2FXTmxLR2x1WkdWNExDQXhLVHRjYmlBZ0lDQjlYRzRnSUgxY2JseHVJQ0JmWDNKbGMyVjBWR2xqYXlncElIdGNiaUFnSUNCcFppQW9kR2hwY3k1ZlgzTmphR1ZrUlc1bmFXNWxjeTVzWlc1bmRHZ2dQaUF3S1NCN1hHNGdJQ0FnSUNCcFppQW9JWFJvYVhNdVgxOTBhVzFsYjNWMEtTQjdYRzRnSUNBZ0lDQWdJR3h2WnlnblUybHRjR3hsVTJOb1pXUjFiR1Z5SUZOMFlYSjBKeWs3WEc0Z0lDQWdJQ0FnSUhSb2FYTXVYMTkwYVdOcktDazdYRzRnSUNBZ0lDQjlYRzRnSUNBZ2ZTQmxiSE5sSUdsbUlDaDBhR2x6TGw5ZmRHbHRaVzkxZENrZ2UxeHVJQ0FnSUNBZ2JHOW5LQ2RUYVcxd2JHVlRZMmhsWkhWc1pYSWdVM1J2Y0NjcE8xeHVJQ0FnSUNBZ1kyeGxZWEpVYVcxbGIzVjBLSFJvYVhNdVgxOTBhVzFsYjNWMEtUdGNiaUFnSUNBZ0lIUm9hWE11WDE5MGFXMWxiM1YwSUQwZ2JuVnNiRHRjYmlBZ0lDQjlYRzRnSUgxY2JseHVJQ0JmWDNScFkyc29LU0I3WEc0Z0lDQWdZMjl1YzNRZ1kzVnljbVZ1ZEZScGJXVWdQU0IwYUdsekxtZGxkRlJwYldWR2RXNWpkR2x2YmlncE8xeHVJQ0FnSUd4bGRDQnBJRDBnTUR0Y2JseHVJQ0FnSUhkb2FXeGxJQ2hwSUR3Z2RHaHBjeTVmWDNOamFHVmtSVzVuYVc1bGN5NXNaVzVuZEdncElIdGNiaUFnSUNBZ0lHTnZibk4wSUdWdVoybHVaU0E5SUhSb2FYTXVYMTl6WTJobFpFVnVaMmx1WlhOYmFWMDdYRzRnSUNBZ0lDQnNaWFFnZEdsdFpTQTlJSFJvYVhNdVgxOXpZMmhsWkZScGJXVnpXMmxkTzF4dVhHNGdJQ0FnSUNCM2FHbHNaU0FvZEdsdFpTQW1KaUIwYVcxbElEdzlJR04xY25KbGJuUlVhVzFsSUNzZ2RHaHBjeTVzYjI5cllXaGxZV1FwSUh0Y2JpQWdJQ0FnSUNBZ2RHbHRaU0E5SUUxaGRHZ3ViV0Y0S0hScGJXVXNJR04xY25KbGJuUlVhVzFsS1R0Y2JpQWdJQ0FnSUNBZ2RHaHBjeTVmWDJOMWNuSmxiblJVYVcxbElEMGdkR2x0WlR0Y2JpQWdJQ0FnSUNBZ2RHbHRaU0E5SUdWdVoybHVaUzVoWkhaaGJtTmxWR2x0WlNoMGFXMWxLVHRjYmlBZ0lDQWdJSDFjYmx4dUlDQWdJQ0FnYVdZZ0tIUnBiV1VnSmlZZ2RHbHRaU0E4SUVsdVptbHVhWFI1S1NCN1hHNGdJQ0FnSUNBZ0lIUm9hWE11WDE5elkyaGxaRlJwYldWelcya3JLMTBnUFNCMGFXMWxPMXh1SUNBZ0lDQWdmU0JsYkhObElIdGNiaUFnSUNBZ0lDQWdkR2hwY3k1ZlgzVnVjMk5vWldSMWJHVkZibWRwYm1Vb1pXNW5hVzVsS1R0Y2JseHVJQ0FnSUNBZ0lDQXZMeUJ5WlcxdmRtVWdaVzVuYVc1bElHWnliMjBnYzJOb1pXUjFiR1Z5WEc0Z0lDQWdJQ0FnSUdsbUlDZ2hkR2x0WlNrZ2UxeHVJQ0FnSUNBZ0lDQWdJR1Z1WjJsdVpTNXRZWE4wWlhJZ1BTQnVkV3hzTzF4dUlDQWdJQ0FnSUNBZ0lIUm9hWE11WDE5bGJtZHBibVZ6TG1SbGJHVjBaU2hsYm1kcGJtVXBPMXh1SUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0I5WEc0Z0lDQWdmVnh1WEc0Z0lDQWdkR2hwY3k1ZlgyTjFjbkpsYm5SVWFXMWxJRDBnYm5Wc2JEdGNiaUFnSUNCMGFHbHpMbDlmZEdsdFpXOTFkQ0E5SUc1MWJHdzdYRzVjYmlBZ0lDQnBaaUFvZEdocGN5NWZYM05qYUdWa1JXNW5hVzVsY3k1c1pXNW5kR2dnUGlBd0tTQjdYRzRnSUNBZ0lDQjBhR2x6TGw5ZmRHbHRaVzkxZENBOUlITmxkRlJwYldWdmRYUW9LQ2tnUFQ0Z2UxeHVJQ0FnSUNBZ0lDQjBhR2x6TGw5ZmRHbGpheWdwTzF4dUlDQWdJQ0FnZlN3Z2RHaHBjeTV3WlhKcGIyUWdLaUF4TURBd0tUdGNiaUFnSUNCOVhHNGdJSDFjYmx4dUlDQXZLaXBjYmlBZ0lDb2dVMk5vWldSMWJHVnlJR04xY25KbGJuUWdiRzluYVdOaGJDQjBhVzFsTGx4dUlDQWdLbHh1SUNBZ0tpQkFibUZ0WlNCamRYSnlaVzUwVkdsdFpWeHVJQ0FnS2lCQWRIbHdaU0I3VG5WdFltVnlmVnh1SUNBZ0tpQkFiV1Z0WW1WeWIyWWdVMk5vWldSMWJHVnlYRzRnSUNBcUlFQnBibk4wWVc1alpWeHVJQ0FnS2k5Y2JpQWdaMlYwSUdOMWNuSmxiblJVYVcxbEtDa2dlMXh1SUNBZ0lISmxkSFZ5YmlCMGFHbHpMbDlmWTNWeWNtVnVkRlJwYldVZ2ZId2dkR2hwY3k1blpYUlVhVzFsUm5WdVkzUnBiMjRvS1NBcklIUm9hWE11Ykc5dmEyRm9aV0ZrTzF4dUlDQjlYRzVjYmlBZ0x5b3FYRzRnSUNBcUlGTmphR1ZrZFd4bGNpQmpkWEp5Wlc1MElHRjFaR2x2SUhScGJXVWdZV05qYjNKa2FXNW5JSFJ2SUdCamRYSnlaVzUwVkdsdFpXQmNiaUFnSUNwY2JpQWdJQ29nUUc1aGJXVWdZWFZrYVc5VWFXMWxYRzRnSUNBcUlFQjBlWEJsSUh0T2RXMWlaWEo5WEc0Z0lDQXFJRUJ0WlcxaVpYSnBaaUJUWTJobFpIVnNaWEpjYmlBZ0lDb2dRR2x1YzNSaGJtTmxYRzRnSUNBcUwxeHVJQ0JuWlhRZ1lYVmthVzlVYVcxbEtDa2dlMXh1SUNBZ0lDOHZJRUJ1YjNSbElDMGdZV1JrSUhSb2FYTWdZWE1nYVc1Y2JpQWdJQ0JwWmlBb2RHaHBjeTV0WVhOMFpYSXBYRzRnSUNBZ0lDQnlaWFIxY200Z2RHaHBjeTV0WVhOMFpYSXVZWFZrYVc5VWFXMWxPMXh1WEc0Z0lDQWdjbVYwZFhKdUlIUm9hWE11WDJOMWNuSmxiblJVYVcxbFZHOUJkV1JwYjFScGJXVkdkVzVqZEdsdmJpaDBhR2x6TG1OMWNuSmxiblJVYVcxbEtUdGNiaUFnZlZ4dVhHNGdJR2RsZENCamRYSnlaVzUwVUc5emFYUnBiMjRvS1NCN1hHNGdJQ0FnY21WMGRYSnVJSFZ1WkdWbWFXNWxaRHRjYmlBZ2ZWeHVYRzRnSUM4dklHTmhiR3dnWVNCbWRXNWpkR2x2YmlCaGRDQmhJR2RwZG1WdUlIUnBiV1ZjYmlBZ0x5b3FYRzRnSUNBcUlFUmxabVZ5SUhSb1pTQmxlR1ZqZFhScGIyNGdiMllnWVNCbWRXNWpkR2x2YmlCaGRDQmhJR2RwZG1WdUlIUnBiV1V1WEc0Z0lDQXFYRzRnSUNBcUlFQndZWEpoYlNCN1JuVnVZM1JwYjI1OUlHWjFiaUF0SUVaMWJtTjBhVzl1SUhSdklHUmxabVZ5WEc0Z0lDQXFJRUJ3WVhKaGJTQjdUblZ0WW1WeWZTQmJkR2x0WlQxMGFHbHpMbU4xY25KbGJuUlVhVzFsWFNBdElGTmphR1ZrZFd4bElIUnBiV1ZjYmlBZ0lDb3ZYRzRnSUdSbFptVnlLR1oxYml3Z2RHbHRaU0E5SUhSb2FYTXVZM1Z5Y21WdWRGUnBiV1VwSUh0Y2JpQWdJQ0JwWmlBb0lTaG1kVzRnYVc1emRHRnVZMlZ2WmlCR2RXNWpkR2x2YmlrcFhHNGdJQ0FnSUNCMGFISnZkeUJ1WlhjZ1JYSnliM0lvWENKdlltcGxZM1FnWTJGdWJtOTBJR0psSUdSbFptVnlaV1FnWW5rZ2MyTm9aV1IxYkdWeVhDSXBPMXh1WEc0Z0lDQWdkR2hwY3k1aFpHUW9lMXh1SUNBZ0lDQWdZV1IyWVc1alpWUnBiV1U2SUdaMWJtTjBhVzl1S0hScGJXVXBJSHNnWm5WdUtIUnBiV1VwT3lCOUxDQXZMeUJ0WVd0bElITjFjaUIwYUdGMElIUm9aU0JoWkhaaGJtTmxWR2x0WlNCdFpYUm9iMlFnWkc5bGN5QnViM1FnY21WMGRYSnRJR0Z1ZVhSb2FXNW5YRzRnSUNBZ2ZTd2dkR2x0WlNrN1hHNGdJSDFjYmx4dUlDQXZLaXBjYmlBZ0lDb2dRV1JrSUdFZ1ZHbHRaVVZ1WjJsdVpTQm1kVzVqZEdsdmJpQjBieUIwYUdVZ2MyTm9aV1IxYkdWeUlHRjBJR0Z1SUc5d2RHbHZibUZzYkhrZ1oybDJaVzRnZEdsdFpTNWNiaUFnSUNwY2JpQWdJQ29nUUhCaGNtRnRJSHRVYVcxbFJXNW5hVzVsZlNCbGJtZHBibVVnTFNCRmJtZHBibVVnZEc4Z1lXUmtJSFJ2SUhSb1pTQnpZMmhsWkhWc1pYSmNiaUFnSUNvZ1FIQmhjbUZ0SUh0T2RXMWlaWEo5SUZ0MGFXMWxQWFJvYVhNdVkzVnljbVZ1ZEZScGJXVmRJQzBnVTJOb1pXUjFiR1VnZEdsdFpWeHVJQ0FnS2k5Y2JpQWdZV1JrS0dWdVoybHVaU3dnZEdsdFpTQTlJSFJvYVhNdVkzVnljbVZ1ZEZScGJXVXBJSHRjYmlBZ0lDQnBaaUFvSVZScGJXVkZibWRwYm1VdWFXMXdiR1Z0Wlc1MGMxTmphR1ZrZFd4bFpDaGxibWRwYm1VcEtWeHVJQ0FnSUNBZ2RHaHliM2NnYm1WM0lFVnljbTl5S0Z3aWIySnFaV04wSUdOaGJtNXZkQ0JpWlNCaFpHUmxaQ0IwYnlCelkyaGxaSFZzWlhKY0lpazdYRzVjYmlBZ0lDQnBaaUFvWlc1bmFXNWxMbTFoYzNSbGNpbGNiaUFnSUNBZ0lIUm9jbTkzSUc1bGR5QkZjbkp2Y2loY0ltOWlhbVZqZENCb1lYTWdZV3h5WldGa2VTQmlaV1Z1SUdGa1pHVmtJSFJ2SUdFZ2JXRnpkR1Z5WENJcE8xeHVYRzRnSUNBZ0x5OGdjMlYwSUcxaGMzUmxjaUJoYm1RZ1lXUmtJSFJ2SUdGeWNtRjVYRzRnSUNBZ1pXNW5hVzVsTG0xaGMzUmxjaUE5SUhSb2FYTTdYRzRnSUNBZ2RHaHBjeTVmWDJWdVoybHVaWE11WVdSa0tHVnVaMmx1WlNrN1hHNWNiaUFnSUNBdkx5QnpZMmhsWkhWc1pTQmxibWRwYm1WY2JpQWdJQ0IwYUdsekxsOWZjMk5vWldSMWJHVkZibWRwYm1Vb1pXNW5hVzVsTENCMGFXMWxLVHRjYmlBZ0lDQjBhR2x6TGw5ZmNtVnpaWFJVYVdOcktDazdYRzRnSUgxY2JseHVJQ0F2S2lwY2JpQWdJQ29nVW1WdGIzWmxJR0VnVkdsdFpVVnVaMmx1WlNCbWNtOXRJSFJvWlNCelkyaGxaSFZzWlhJZ2RHaGhkQ0JvWVhNZ1ltVmxiaUJoWkdSbFpDQjBieUIwYUdWY2JpQWdJQ29nYzJOb1pXUjFiR1Z5SUhWemFXNW5JSFJvWlNCaFpHUWdiV1YwYUc5a0xseHVJQ0FnS2x4dUlDQWdLaUJBY0dGeVlXMGdlMVJwYldWRmJtZHBibVY5SUdWdVoybHVaU0F0SUVWdVoybHVaU0IwYnlCeVpXMXZkbVVnWm5KdmJTQjBhR1VnYzJOb1pXUjFiR1Z5WEc0Z0lDQXFJRUJ3WVhKaGJTQjdUblZ0WW1WeWZTQmJkR2x0WlQxMGFHbHpMbU4xY25KbGJuUlVhVzFsWFNBdElGTmphR1ZrZFd4bElIUnBiV1ZjYmlBZ0lDb3ZYRzRnSUhKbGJXOTJaU2hsYm1kcGJtVXBJSHRjYmlBZ0lDQnBaaUFvSVdWdVoybHVaUzV0WVhOMFpYSWdmSHdnWlc1bmFXNWxMbTFoYzNSbGNpQWhQVDBnZEdocGN5bGNiaUFnSUNBZ0lIUm9jbTkzSUc1bGR5QkZjbkp2Y2loY0ltVnVaMmx1WlNCb1lYTWdibTkwSUdKbFpXNGdZV1JrWldRZ2RHOGdkR2hwY3lCelkyaGxaSFZzWlhKY0lpazdYRzVjYmlBZ0lDQXZMeUJ5WlhObGRDQnRZWE4wWlhJZ1lXNWtJSEpsYlc5MlpTQm1jbTl0SUdGeWNtRjVYRzRnSUNBZ1pXNW5hVzVsTG0xaGMzUmxjaUE5SUc1MWJHdzdYRzRnSUNBZ2RHaHBjeTVmWDJWdVoybHVaWE11WkdWc1pYUmxLR1Z1WjJsdVpTazdYRzVjYmlBZ0lDQXZMeUIxYm5OamFHVmtkV3hsSUdWdVoybHVaVnh1SUNBZ0lIUm9hWE11WDE5MWJuTmphR1ZrZFd4bFJXNW5hVzVsS0dWdVoybHVaU2s3WEc0Z0lDQWdkR2hwY3k1ZlgzSmxjMlYwVkdsamF5Z3BPMXh1SUNCOVhHNWNiaUFnTHlvcVhHNGdJQ0FxSUZKbGMyTm9aV1IxYkdVZ1lTQnpZMmhsWkhWc1pXUWdkR2x0WlNCbGJtZHBibVVnWVhRZ1lTQm5hWFpsYmlCMGFXMWxMbHh1SUNBZ0tseHVJQ0FnS2lCQWNHRnlZVzBnZTFScGJXVkZibWRwYm1WOUlHVnVaMmx1WlNBdElFVnVaMmx1WlNCMGJ5QnlaWE5qYUdWa2RXeGxYRzRnSUNBcUlFQndZWEpoYlNCN1RuVnRZbVZ5ZlNCMGFXMWxJQzBnVTJOb1pXUjFiR1VnZEdsdFpWeHVJQ0FnS2k5Y2JpQWdjbVZ6WlhSRmJtZHBibVZVYVcxbEtHVnVaMmx1WlN3Z2RHbHRaU0E5SUhSb2FYTXVZM1Z5Y21WdWRGUnBiV1VwSUh0Y2JpQWdJQ0IwYUdsekxsOWZjbVZ6WTJobFpIVnNaVVZ1WjJsdVpTaGxibWRwYm1Vc0lIUnBiV1VwTzF4dUlDQWdJSFJvYVhNdVgxOXlaWE5sZEZScFkyc29LVHRjYmlBZ2ZWeHVYRzRnSUM4cUtseHVJQ0FnS2lCRGFHVmpheUIzYUdWMGFHVnlJR0VnWjJsMlpXNGdaVzVuYVc1bElHbHpJSE5qYUdWa2RXeGxaQzVjYmlBZ0lDcGNiaUFnSUNvZ1FIQmhjbUZ0SUh0VWFXMWxSVzVuYVc1bGZTQmxibWRwYm1VZ0xTQkZibWRwYm1VZ2RHOGdZMmhsWTJ0Y2JpQWdJQ292WEc0Z0lHaGhjeWhsYm1kcGJtVXBJSHRjYmlBZ0lDQnlaWFIxY200Z2RHaHBjeTVmWDJWdVoybHVaWE11YUdGektHVnVaMmx1WlNrN1hHNGdJSDFjYmx4dUlDQXZLaXBjYmlBZ0lDb2dVbVZ0YjNabElHRnNiQ0JsYm1kcGJtVnpJR1p5YjIwZ2RHaGxJSE5qYUdWa2RXeGxjaTVjYmlBZ0lDb3ZYRzRnSUdOc1pXRnlLQ2tnZTF4dUlDQWdJR2xtSUNoMGFHbHpMbDlmZEdsdFpXOTFkQ2tnZTF4dUlDQWdJQ0FnWTJ4bFlYSlVhVzFsYjNWMEtIUm9hWE11WDE5MGFXMWxiM1YwS1R0Y2JpQWdJQ0FnSUhSb2FYTXVYMTkwYVcxbGIzVjBJRDBnYm5Wc2JEdGNiaUFnSUNCOVhHNWNiaUFnSUNCMGFHbHpMbDlmYzJOb1pXUkZibWRwYm1WekxteGxibWQwYUNBOUlEQTdYRzRnSUNBZ2RHaHBjeTVmWDNOamFHVmtWR2x0WlhNdWJHVnVaM1JvSUQwZ01EdGNiaUFnZlZ4dWZWeHVYRzVsZUhCdmNuUWdaR1ZtWVhWc2RDQlRhVzF3YkdWVFkyaGxaSFZzWlhJN1hHNGlYWDA9IiwiJ3VzZSBzdHJpY3QnO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuXG52YXIgX2dldFByb3RvdHlwZU9mID0gcmVxdWlyZSgnYmFiZWwtcnVudGltZS9jb3JlLWpzL29iamVjdC9nZXQtcHJvdG90eXBlLW9mJyk7XG5cbnZhciBfZ2V0UHJvdG90eXBlT2YyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfZ2V0UHJvdG90eXBlT2YpO1xuXG52YXIgX2NsYXNzQ2FsbENoZWNrMiA9IHJlcXVpcmUoJ2JhYmVsLXJ1bnRpbWUvaGVscGVycy9jbGFzc0NhbGxDaGVjaycpO1xuXG52YXIgX2NsYXNzQ2FsbENoZWNrMyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2NsYXNzQ2FsbENoZWNrMik7XG5cbnZhciBfY3JlYXRlQ2xhc3MyID0gcmVxdWlyZSgnYmFiZWwtcnVudGltZS9oZWxwZXJzL2NyZWF0ZUNsYXNzJyk7XG5cbnZhciBfY3JlYXRlQ2xhc3MzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfY3JlYXRlQ2xhc3MyKTtcblxudmFyIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuMiA9IHJlcXVpcmUoJ2JhYmVsLXJ1bnRpbWUvaGVscGVycy9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuJyk7XG5cbnZhciBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybjMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuMik7XG5cbnZhciBfaW5oZXJpdHMyID0gcmVxdWlyZSgnYmFiZWwtcnVudGltZS9oZWxwZXJzL2luaGVyaXRzJyk7XG5cbnZhciBfaW5oZXJpdHMzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfaW5oZXJpdHMyKTtcblxudmFyIF9BdWRpb1RpbWVFbmdpbmUyID0gcmVxdWlyZSgnLi4vY29yZS9BdWRpb1RpbWVFbmdpbmUnKTtcblxudmFyIF9BdWRpb1RpbWVFbmdpbmUzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfQXVkaW9UaW1lRW5naW5lMik7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cbmZ1bmN0aW9uIG9wdE9yRGVmKG9wdCwgZGVmKSB7XG4gIGlmIChvcHQgIT09IHVuZGVmaW5lZCkgcmV0dXJuIG9wdDtcblxuICByZXR1cm4gZGVmO1xufVxuXG4vKipcbiAqIEdyYW51bGFyIHN5bnRoZXNpcyBUaW1lRW5naW5lIGltcGxlbWVudGluZyB0aGUgc2NoZWR1bGVkIGludGVyZmFjZS5cbiAqIFRoZSBncmFpbiBwb3NpdGlvbiAoZ3JhaW4gb25zZXQgb3IgY2VudGVyIHRpbWUgaW4gdGhlIGF1ZGlvIGJ1ZmZlcikgaXNcbiAqIG9wdGlvbmFsbHkgZGV0ZXJtaW5lZCBieSB0aGUgZW5naW5lJ3MgY3VycmVudFBvc2l0aW9uIGF0dHJpYnV0ZS5cbiAqXG4gKiBFeGFtcGxlIHRoYXQgc2hvd3MgYSBgR3JhbnVsYXJFbmdpbmVgICh3aXRoIGEgZmV3IHBhcmFtZXRlciBjb250cm9scykgZHJpdmVuXG4gKiBieSBhIGBTY2hlZHVsZXJgIGFuZCBhIGBQbGF5Q29udHJvbGA6XG4gKiB7QGxpbmsgaHR0cHM6Ly9yYXdnaXQuY29tL3dhdmVzanMvd2F2ZXMtYXVkaW8vbWFzdGVyL2V4YW1wbGVzL2dyYW51bGFyLWVuZ2luZS9pbmRleC5odG1sfVxuICpcbiAqIEBleHRlbmRzIEF1ZGlvVGltZUVuZ2luZVxuICogQGV4YW1wbGVcbiAqIGltcG9ydCAqIGFzIGF1ZGlvIGZyb20gJ3dhdmVzLWF1ZGlvJztcbiAqIGNvbnN0IHNjaGVkdWxlciA9IGF1ZGlvLmdldFNjaGVkdWxlcigpO1xuICogY29uc3QgZ3JhbnVsYXJFbmdpbmUgPSBuZXcgYXVkaW8uR3JhbnVsYXJFbmdpbmUoKTtcbiAqXG4gKiBzY2hlZHVsZXIuYWRkKGdyYW51bGFyRW5naW5lKTtcbiAqXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IG9wdGlvbnM9e30gLSBQYXJhbWV0ZXJzXG4gKiBAcGFyYW0ge0F1ZGlvQnVmZmVyfSBbb3B0aW9ucy5idWZmZXI9bnVsbF0gLSBBdWRpbyBidWZmZXJcbiAqIEBwYXJhbSB7TnVtYmVyfSBbb3B0aW9ucy5wZXJpb2RBYnM9MC4wMV0gLSBBYnNvbHV0ZSBncmFpbiBwZXJpb2QgaW4gc2VjXG4gKiBAcGFyYW0ge051bWJlcn0gW29wdGlvbnMucGVyaW9kUmVsPTBdIC0gR3JhaW4gcGVyaW9kIHJlbGF0aXZlIHRvIGFic29sdXRlXG4gKiAgZHVyYXRpb25cbiAqIEBwYXJhbSB7TnVtYmVyfSBbb3B0aW9ucy5wZXJpb2RWYXI9MF0gLSBBbW91dCBvZiByYW5kb20gZ3JhaW4gcGVyaW9kXG4gKiAgdmFyaWF0aW9uIHJlbGF0aXZlIHRvIGdyYWluIHBlcmlvZFxuICogQHBhcmFtIHtOdW1iZXJ9IFtvcHRpb25zLnBlcmlvZE1pbj0wLjAwMV0gLSBNaW5pbXVtIGdyYWluIHBlcmlvZFxuICogQHBhcmFtIHtOdW1iZXJ9IFtvcHRpb25zLnBvc2l0aW9uPTBdIC0gR3JhaW4gcG9zaXRpb24gKG9uc2V0IHRpbWUgaW4gYXVkaW9cbiAqICBidWZmZXIpIGluIHNlY1xuICogQHBhcmFtIHtOdW1iZXJ9IFtvcHRpb25zLnBvc2l0aW9uVmFyPTAuMDAzXSAtIEFtb3V0IG9mIHJhbmRvbSBncmFpbiBwb3NpdGlvblxuICogIHZhcmlhdGlvbiBpbiBzZWNcbiAqIEBwYXJhbSB7TnVtYmVyfSBbb3B0aW9ucy5kdXJhdGlvbkFicz0wLjFdIC0gQWJzb2x1dGUgZ3JhaW4gZHVyYXRpb24gaW4gc2VjXG4gKiBAcGFyYW0ge051bWJlcn0gW29wdGlvbnMuZHVyYXRpb25SZWw9MF0gLSBHcmFpbiBkdXJhdGlvbiByZWxhdGl2ZSB0byBncmFpblxuICogIHBlcmlvZCAob3ZlcmxhcClcbiAqIEBwYXJhbSB7TnVtYmVyfSBbb3B0aW9ucy5hdHRhY2tBYnM9MF0gLSBBYnNvbHV0ZSBhdHRhY2sgdGltZSBpbiBzZWNcbiAqIEBwYXJhbSB7TnVtYmVyfSBbb3B0aW9ucy5hdHRhY2tSZWw9MC41XSAtIEF0dGFjayB0aW1lIHJlbGF0aXZlIHRvIGdyYWluIGR1cmF0aW9uXG4gKiBAcGFyYW0ge1N0cmluZ30gW29wdGlvbnMuYXR0YWNrU2hhcGU9J2xpbiddIC0gU2hhcGUgb2YgYXR0YWNrXG4gKiBAcGFyYW0ge051bWJlcn0gW29wdGlvbnMucmVsZWFzZUFicz0wXSAtIEFic29sdXRlIHJlbGVhc2UgdGltZSBpbiBzZWNcbiAqIEBwYXJhbSB7TnVtYmVyfSBbb3B0aW9ucy5yZWxlYXNlUmVsPTAuNV0gLSBSZWxlYXNlIHRpbWUgcmVsYXRpdmUgdG8gZ3JhaW4gZHVyYXRpb25cbiAqIEBwYXJhbSB7TnVtYmVyfSBbb3B0aW9ucy5yZWxlYXNlU2hhcGU9J2xpbiddIC0gU2hhcGUgb2YgcmVsZWFzZVxuICogQHBhcmFtIHtTdHJpbmd9IFtvcHRpb25zLmV4cFJhbXBPZmZzZXQ9MC4wMDAxXSAtIE9mZnNldCAoc3RhcnQvZW5kIHZhbHVlKVxuICogIGZvciBleHBvbmVudGlhbCBhdHRhY2svcmVsZWFzZVxuICogQHBhcmFtIHtOdW1iZXJ9IFtvcHRpb25zLnJlc2FtcGxpbmc9MF0gLSBHcmFpbiByZXNhbXBsaW5nIGluIGNlbnRcbiAqIEBwYXJhbSB7TnVtYmVyfSBbb3B0aW9ucy5yZXNhbXBsaW5nVmFyPTBdIC0gQW1vdXQgb2YgcmFuZG9tIHJlc2FtcGxpbmcgdmFyaWF0aW9uIGluIGNlbnRcbiAqIEBwYXJhbSB7TnVtYmVyfSBbb3B0aW9ucy5nYWluPTFdIC0gTGluZWFyIGdhaW4gZmFjdG9yXG4gKiBAcGFyYW0ge0Jvb2xlYW59IFtvcHRpb25zLmNlbnRlcmVkPXRydWVdIC0gV2hldGhlciB0aGUgZ3JhaW4gcG9zaXRpb24gcmVmZXJzXG4gKiAgdG8gdGhlIGNlbnRlciBvZiB0aGUgZ3JhaW4gKG9yIHRoZSBiZWdpbm5pbmcpXG4gKiBAcGFyYW0ge0Jvb2xlYW59IFtvcHRpb25zLmN5Y2xpYz1mYWxzZV0gLSBXaGV0aGVyIHRoZSBhdWRpbyBidWZmZXIgYW5kIGdyYWluXG4gKiAgcG9zaXRpb24gYXJlIGNvbnNpZGVyZWQgYXMgY3ljbGljXG4gKiBAcGFyYW0ge051bWJlcn0gW29wdGlvbnMud3JhcEFyb3VuZEV4dGVuc2lvbj0wXSAtIFBvcnRpb24gYXQgdGhlIGVuZCBvZiB0aGVcbiAqICBhdWRpbyBidWZmZXIgdGhhdCBoYXMgYmVlbiBjb3BpZWQgZnJvbSB0aGUgYmVnaW5uaW5nIHRvIGFzc3VyZSBjeWNsaWMgYmVoYXZpb3JcbiAqL1xuXG52YXIgR3JhbnVsYXJFbmdpbmUgPSBmdW5jdGlvbiAoX0F1ZGlvVGltZUVuZ2luZSkge1xuICAoMCwgX2luaGVyaXRzMy5kZWZhdWx0KShHcmFudWxhckVuZ2luZSwgX0F1ZGlvVGltZUVuZ2luZSk7XG5cbiAgZnVuY3Rpb24gR3JhbnVsYXJFbmdpbmUoKSB7XG4gICAgdmFyIG9wdGlvbnMgPSBhcmd1bWVudHMubGVuZ3RoID4gMCAmJiBhcmd1bWVudHNbMF0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1swXSA6IHt9O1xuICAgICgwLCBfY2xhc3NDYWxsQ2hlY2szLmRlZmF1bHQpKHRoaXMsIEdyYW51bGFyRW5naW5lKTtcblxuICAgIC8qKlxuICAgICAqIEF1ZGlvIGJ1ZmZlclxuICAgICAqXG4gICAgICogQHR5cGUge0F1ZGlvQnVmZmVyfVxuICAgICAqIEBuYW1lIGJ1ZmZlclxuICAgICAqIEBkZWZhdWx0IG51bGxcbiAgICAgKiBAbWVtYmVyb2YgR3JhbnVsYXJFbmdpbmVcbiAgICAgKiBAaW5zdGFuY2VcbiAgICAgKi9cbiAgICB2YXIgX3RoaXMgPSAoMCwgX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4zLmRlZmF1bHQpKHRoaXMsIChHcmFudWxhckVuZ2luZS5fX3Byb3RvX18gfHwgKDAsIF9nZXRQcm90b3R5cGVPZjIuZGVmYXVsdCkoR3JhbnVsYXJFbmdpbmUpKS5jYWxsKHRoaXMsIG9wdGlvbnMuYXVkaW9Db250ZXh0KSk7XG5cbiAgICBfdGhpcy5idWZmZXIgPSBvcHRPckRlZihvcHRpb25zLmJ1ZmZlciwgbnVsbCk7XG5cbiAgICAvKipcbiAgICAgKiBBYnNvbHV0ZSBncmFpbiBwZXJpb2QgaW4gc2VjXG4gICAgICpcbiAgICAgKiBAdHlwZSB7TnVtYmVyfVxuICAgICAqIEBuYW1lIHBlcmlvZEFic1xuICAgICAqIEBkZWZhdWx0IDAuMDFcbiAgICAgKiBAbWVtYmVyb2YgR3JhbnVsYXJFbmdpbmVcbiAgICAgKiBAaW5zdGFuY2VcbiAgICAgKi9cbiAgICBfdGhpcy5wZXJpb2RBYnMgPSBvcHRPckRlZihvcHRpb25zLnBlcmlvZEFicywgMC4wMSk7XG5cbiAgICAvKipcbiAgICAgKiBHcmFpbiBwZXJpb2QgcmVsYXRpdmUgdG8gYWJzb2x1dGUgZHVyYXRpb25cbiAgICAgKlxuICAgICAqIEB0eXBlIHtOdW1iZXJ9XG4gICAgICogQG5hbWUgcGVyaW9kUmVsXG4gICAgICogQGRlZmF1bHQgMFxuICAgICAqIEBtZW1iZXJvZiBHcmFudWxhckVuZ2luZVxuICAgICAqIEBpbnN0YW5jZVxuICAgICAqL1xuICAgIF90aGlzLnBlcmlvZFJlbCA9IG9wdE9yRGVmKG9wdGlvbnMucGVyaW9kUmVsLCAwKTtcblxuICAgIC8qKlxuICAgICAqIEFtb3V0IG9mIHJhbmRvbSBncmFpbiBwZXJpb2QgdmFyaWF0aW9uIHJlbGF0aXZlIHRvIGdyYWluIHBlcmlvZFxuICAgICAqXG4gICAgICogQHR5cGUge051bWJlcn1cbiAgICAgKiBAbmFtZSBwZXJpb2RWYXJcbiAgICAgKiBAZGVmYXVsdCAwXG4gICAgICogQG1lbWJlcm9mIEdyYW51bGFyRW5naW5lXG4gICAgICogQGluc3RhbmNlXG4gICAgICovXG4gICAgX3RoaXMucGVyaW9kVmFyID0gb3B0T3JEZWYob3B0aW9ucy5wZXJpb2RWYXIsIDApO1xuXG4gICAgLyoqXG4gICAgICogTWluaW11bSBncmFpbiBwZXJpb2RcbiAgICAgKlxuICAgICAqIEB0eXBlIHtOdW1iZXJ9XG4gICAgICogQG5hbWUgcGVyaW9kTWluXG4gICAgICogQGRlZmF1bHQgMC4wMDFcbiAgICAgKiBAbWVtYmVyb2YgR3JhbnVsYXJFbmdpbmVcbiAgICAgKiBAaW5zdGFuY2VcbiAgICAgKi9cbiAgICBfdGhpcy5wZXJpb2RNaW4gPSBvcHRPckRlZihvcHRpb25zLnBlcmlvZE1pbiwgMC4wMDEpO1xuXG4gICAgLyoqXG4gICAgICogR3JhaW4gcG9zaXRpb24gKG9uc2V0IHRpbWUgaW4gYXVkaW8gYnVmZmVyKSBpbiBzZWNcbiAgICAgKlxuICAgICAqIEB0eXBlIHtOdW1iZXJ9XG4gICAgICogQG5hbWUgcG9zaXRpb25cbiAgICAgKiBAZGVmYXVsdCAwXG4gICAgICogQG1lbWJlcm9mIEdyYW51bGFyRW5naW5lXG4gICAgICogQGluc3RhbmNlXG4gICAgICovXG4gICAgX3RoaXMucG9zaXRpb24gPSBvcHRPckRlZihvcHRpb25zLnBvc2l0aW9uLCAwKTtcblxuICAgIC8qKlxuICAgICAqIEFtb3V0IG9mIHJhbmRvbSBncmFpbiBwb3NpdGlvbiB2YXJpYXRpb24gaW4gc2VjXG4gICAgICpcbiAgICAgKiBAdHlwZSB7TnVtYmVyfVxuICAgICAqIEBuYW1lIHBvc2l0aW9uVmFyXG4gICAgICogQGRlZmF1bHQgMC4wMDNcbiAgICAgKiBAbWVtYmVyb2YgR3JhbnVsYXJFbmdpbmVcbiAgICAgKiBAaW5zdGFuY2VcbiAgICAgKi9cbiAgICBfdGhpcy5wb3NpdGlvblZhciA9IG9wdE9yRGVmKG9wdGlvbnMucG9zaXRpb25WYXIsIDAuMDAzKTtcblxuICAgIC8qKlxuICAgICAqIEFic29sdXRlIGdyYWluIGR1cmF0aW9uIGluIHNlY1xuICAgICAqXG4gICAgICogQHR5cGUge051bWJlcn1cbiAgICAgKiBAbmFtZSBkdXJhdGlvbkFic1xuICAgICAqIEBkZWZhdWx0IDAuMVxuICAgICAqIEBtZW1iZXJvZiBHcmFudWxhckVuZ2luZVxuICAgICAqIEBpbnN0YW5jZVxuICAgICAqL1xuICAgIF90aGlzLmR1cmF0aW9uQWJzID0gb3B0T3JEZWYob3B0aW9ucy5kdXJhdGlvbkFicywgMC4xKTsgLy8gYWJzb2x1dGUgZ3JhaW4gZHVyYXRpb25cblxuICAgIC8qKlxuICAgICAqIEdyYWluIGR1cmF0aW9uIHJlbGF0aXZlIHRvIGdyYWluIHBlcmlvZCAob3ZlcmxhcClcbiAgICAgKlxuICAgICAqIEB0eXBlIHtOdW1iZXJ9XG4gICAgICogQG5hbWUgZHVyYXRpb25SZWxcbiAgICAgKiBAZGVmYXVsdCAwXG4gICAgICogQG1lbWJlcm9mIEdyYW51bGFyRW5naW5lXG4gICAgICogQGluc3RhbmNlXG4gICAgICovXG4gICAgX3RoaXMuZHVyYXRpb25SZWwgPSBvcHRPckRlZihvcHRpb25zLmR1cmF0aW9uUmVsLCAwKTtcblxuICAgIC8qKlxuICAgICAqIEFic29sdXRlIGF0dGFjayB0aW1lIGluIHNlY1xuICAgICAqXG4gICAgICogQHR5cGUge051bWJlcn1cbiAgICAgKiBAbmFtZSBhdHRhY2tBYnNcbiAgICAgKiBAZGVmYXVsdCAwXG4gICAgICogQG1lbWJlcm9mIEdyYW51bGFyRW5naW5lXG4gICAgICogQGluc3RhbmNlXG4gICAgICovXG4gICAgX3RoaXMuYXR0YWNrQWJzID0gb3B0T3JEZWYob3B0aW9ucy5hdHRhY2tBYnMsIDApO1xuXG4gICAgLyoqXG4gICAgICogQXR0YWNrIHRpbWUgcmVsYXRpdmUgdG8gZ3JhaW4gZHVyYXRpb25cbiAgICAgKlxuICAgICAqIEB0eXBlIHtOdW1iZXJ9XG4gICAgICogQG5hbWUgYXR0YWNrUmVsXG4gICAgICogQGRlZmF1bHQgMC41XG4gICAgICogQG1lbWJlcm9mIEdyYW51bGFyRW5naW5lXG4gICAgICogQGluc3RhbmNlXG4gICAgICovXG4gICAgX3RoaXMuYXR0YWNrUmVsID0gb3B0T3JEZWYob3B0aW9ucy5hdHRhY2tSZWwsIDAuNSk7XG5cbiAgICAvKipcbiAgICAgKiBTaGFwZSBvZiBhdHRhY2sgKCdsaW4nIGZvciBsaW5lYXIgcmFtcCwgJ2V4cCcgZm9yIGV4cG9uZW50aWFsIHJhbXApXG4gICAgICpcbiAgICAgKiBAdHlwZSB7U3RyaW5nfVxuICAgICAqIEBuYW1lIGF0dGFja1NoYXBlXG4gICAgICogQGRlZmF1bHQgJ2xpbidcbiAgICAgKiBAbWVtYmVyb2YgR3JhbnVsYXJFbmdpbmVcbiAgICAgKiBAaW5zdGFuY2VcbiAgICAgKi9cbiAgICBfdGhpcy5hdHRhY2tTaGFwZSA9IG9wdE9yRGVmKG9wdGlvbnMuYXR0YWNrU2hhcGUsICdsaW4nKTtcblxuICAgIC8qKlxuICAgICAqIEFic29sdXRlIHJlbGVhc2UgdGltZSBpbiBzZWNcbiAgICAgKlxuICAgICAqIEB0eXBlIHtOdW1iZXJ9XG4gICAgICogQG5hbWUgcmVsZWFzZUFic1xuICAgICAqIEBkZWZhdWx0IDBcbiAgICAgKiBAbWVtYmVyb2YgR3JhbnVsYXJFbmdpbmVcbiAgICAgKiBAaW5zdGFuY2VcbiAgICAgKi9cbiAgICBfdGhpcy5yZWxlYXNlQWJzID0gb3B0T3JEZWYob3B0aW9ucy5yZWxlYXNlQWJzLCAwKTtcblxuICAgIC8qKlxuICAgICAqIFJlbGVhc2UgdGltZSByZWxhdGl2ZSB0byBncmFpbiBkdXJhdGlvblxuICAgICAqXG4gICAgICogQHR5cGUge051bWJlcn1cbiAgICAgKiBAbmFtZSByZWxlYXNlUmVsXG4gICAgICogQGRlZmF1bHQgMC41XG4gICAgICogQG1lbWJlcm9mIEdyYW51bGFyRW5naW5lXG4gICAgICogQGluc3RhbmNlXG4gICAgICovXG4gICAgX3RoaXMucmVsZWFzZVJlbCA9IG9wdE9yRGVmKG9wdGlvbnMucmVsZWFzZVJlbCwgMC41KTtcblxuICAgIC8qKlxuICAgICAqIFNoYXBlIG9mIHJlbGVhc2UgKCdsaW4nIGZvciBsaW5lYXIgcmFtcCwgJ2V4cCcgZm9yIGV4cG9uZW50aWFsIHJhbXApXG4gICAgICpcbiAgICAgKiBAdHlwZSB7U3RyaW5nfVxuICAgICAqIEBuYW1lIHJlbGVhc2VTaGFwZVxuICAgICAqIEBkZWZhdWx0ICdsaW4nXG4gICAgICogQG1lbWJlcm9mIEdyYW51bGFyRW5naW5lXG4gICAgICogQGluc3RhbmNlXG4gICAgICovXG4gICAgX3RoaXMucmVsZWFzZVNoYXBlID0gb3B0T3JEZWYob3B0aW9ucy5yZWxlYXNlU2hhcGUsICdsaW4nKTtcblxuICAgIC8qKlxuICAgICAqIE9mZnNldCAoc3RhcnQvZW5kIHZhbHVlKSBmb3IgZXhwb25lbnRpYWwgYXR0YWNrL3JlbGVhc2VcbiAgICAgKlxuICAgICAqIEB0eXBlIHtOdW1iZXJ9XG4gICAgICogQG5hbWUgZXhwUmFtcE9mZnNldFxuICAgICAqIEBkZWZhdWx0IDAuMDAwMVxuICAgICAqIEBtZW1iZXJvZiBHcmFudWxhckVuZ2luZVxuICAgICAqIEBpbnN0YW5jZVxuICAgICAqL1xuICAgIF90aGlzLmV4cFJhbXBPZmZzZXQgPSBvcHRPckRlZihvcHRpb25zLmV4cFJhbXBPZmZzZXQsIDAuMDAwMSk7XG5cbiAgICAvKipcbiAgICAgKiBHcmFpbiByZXNhbXBsaW5nIGluIGNlbnRcbiAgICAgKlxuICAgICAqIEB0eXBlIHtOdW1iZXJ9XG4gICAgICogQG5hbWUgcmVzYW1wbGluZ1xuICAgICAqIEBkZWZhdWx0IDBcbiAgICAgKiBAbWVtYmVyb2YgR3JhbnVsYXJFbmdpbmVcbiAgICAgKiBAaW5zdGFuY2VcbiAgICAgKi9cbiAgICBfdGhpcy5yZXNhbXBsaW5nID0gb3B0T3JEZWYob3B0aW9ucy5yZXNhbXBsaW5nLCAwKTtcblxuICAgIC8qKlxuICAgICAqIEFtb3V0IG9mIHJhbmRvbSByZXNhbXBsaW5nIHZhcmlhdGlvbiBpbiBjZW50XG4gICAgICpcbiAgICAgKiBAdHlwZSB7TnVtYmVyfVxuICAgICAqIEBuYW1lIHJlc2FtcGxpbmdWYXJcbiAgICAgKiBAZGVmYXVsdCAwXG4gICAgICogQG1lbWJlcm9mIEdyYW51bGFyRW5naW5lXG4gICAgICogQGluc3RhbmNlXG4gICAgICovXG4gICAgX3RoaXMucmVzYW1wbGluZ1ZhciA9IG9wdE9yRGVmKG9wdGlvbnMucmVzYW1wbGluZ1ZhciwgMCk7XG5cbiAgICAvKipcbiAgICAgKiBMaW5lYXIgZ2FpbiBmYWN0b3JcbiAgICAgKlxuICAgICAqIEB0eXBlIHtOdW1iZXJ9XG4gICAgICogQG5hbWUgZ2FpblxuICAgICAqIEBkZWZhdWx0IDFcbiAgICAgKiBAbWVtYmVyb2YgR3JhbnVsYXJFbmdpbmVcbiAgICAgKiBAaW5zdGFuY2VcbiAgICAgKi9cbiAgICBfdGhpcy5nYWluID0gb3B0T3JEZWYob3B0aW9ucy5nYWluLCAxKTtcblxuICAgIC8qKlxuICAgICAqIFdoZXRoZXIgdGhlIGdyYWluIHBvc2l0aW9uIHJlZmVycyB0byB0aGUgY2VudGVyIG9mIHRoZSBncmFpbiAob3IgdGhlIGJlZ2lubmluZylcbiAgICAgKlxuICAgICAqIEB0eXBlIHtCb29sZWFufVxuICAgICAqIEBuYW1lIGNlbnRlcmVkXG4gICAgICogQGRlZmF1bHQgdHJ1ZVxuICAgICAqIEBtZW1iZXJvZiBHcmFudWxhckVuZ2luZVxuICAgICAqIEBpbnN0YW5jZVxuICAgICAqL1xuICAgIF90aGlzLmNlbnRlcmVkID0gb3B0T3JEZWYob3B0aW9ucy5jZW50ZXJlZCwgdHJ1ZSk7XG5cbiAgICAvKipcbiAgICAgKiBXaGV0aGVyIHRoZSBhdWRpbyBidWZmZXIgYW5kIGdyYWluIHBvc2l0aW9uIGFyZSBjb25zaWRlcmVkIGFzIGN5Y2xpY1xuICAgICAqXG4gICAgICogQHR5cGUge0Jvb2xlYW59XG4gICAgICogQG5hbWUgY3ljbGljXG4gICAgICogQGRlZmF1bHQgZmFsc2VcbiAgICAgKiBAbWVtYmVyb2YgR3JhbnVsYXJFbmdpbmVcbiAgICAgKiBAaW5zdGFuY2VcbiAgICAgKi9cbiAgICBfdGhpcy5jeWNsaWMgPSBvcHRPckRlZihvcHRpb25zLmN5Y2xpYywgZmFsc2UpO1xuXG4gICAgLyoqXG4gICAgICogUG9ydGlvbiBhdCB0aGUgZW5kIG9mIHRoZSBhdWRpbyBidWZmZXIgdGhhdCBoYXMgYmVlbiBjb3BpZWQgZnJvbSB0aGVcbiAgICAgKiBiZWdpbm5pbmcgdG8gYXNzdXJlIGN5Y2xpYyBiZWhhdmlvclxuICAgICAqXG4gICAgICogQHR5cGUge051bWJlcn1cbiAgICAgKiBAbmFtZSB3cmFwQXJvdW5kRXh0ZW5zaW9uXG4gICAgICogQGRlZmF1bHQgMFxuICAgICAqIEBtZW1iZXJvZiBHcmFudWxhckVuZ2luZVxuICAgICAqIEBpbnN0YW5jZVxuICAgICAqL1xuICAgIF90aGlzLndyYXBBcm91bmRFeHRlbnNpb24gPSBvcHRPckRlZihvcHRpb25zLndyYXBBcm91bmRFeHRlbnNpb24sIDApO1xuXG4gICAgX3RoaXMub3V0cHV0Tm9kZSA9IF90aGlzLmF1ZGlvQ29udGV4dC5jcmVhdGVHYWluKCk7XG4gICAgcmV0dXJuIF90aGlzO1xuICB9XG5cbiAgLyoqXG4gICAqIEdldCBidWZmZXIgZHVyYXRpb24gKGV4Y2x1ZGluZyB3cmFwQXJvdW5kRXh0ZW5zaW9uKVxuICAgKlxuICAgKiBAdHlwZSB7TnVtYmVyfVxuICAgKiBAbmFtZSBidWZmZXJEdXJhdGlvblxuICAgKiBAbWVtYmVyb2YgR3JhbnVsYXJFbmdpbmVcbiAgICogQGluc3RhbmNlXG4gICAqIEByZWFkb25seVxuICAgKi9cblxuXG4gICgwLCBfY3JlYXRlQ2xhc3MzLmRlZmF1bHQpKEdyYW51bGFyRW5naW5lLCBbe1xuICAgIGtleTogJ2FkdmFuY2VUaW1lJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gYWR2YW5jZVRpbWUodGltZSkge1xuICAgICAgdGltZSA9IE1hdGgubWF4KHRpbWUsIHRoaXMuYXVkaW9Db250ZXh0LmN1cnJlbnRUaW1lKTtcbiAgICAgIHJldHVybiB0aW1lICsgdGhpcy50cmlnZ2VyKHRpbWUpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRyaWdnZXIgYSBncmFpbi4gVGhpcyBmdW5jdGlvbiBjYW4gYmUgY2FsbGVkIGF0IGFueSB0aW1lICh3aGV0aGVyIHRoZVxuICAgICAqIGVuZ2luZSBpcyBzY2hlZHVsZWQgb3Igbm90KSB0byBnZW5lcmF0ZSBhIHNpbmdsZSBncmFpbiBhY2NvcmRpbmcgdG8gdGhlXG4gICAgICogY3VycmVudCBncmFpbiBwYXJhbWV0ZXJzLlxuICAgICAqXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IHRpbWUgLSBncmFpbiBzeW50aGVzaXMgYXVkaW8gdGltZVxuICAgICAqIEByZXR1cm4ge051bWJlcn0gLSBwZXJpb2QgdG8gbmV4dCBncmFpblxuICAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6ICd0cmlnZ2VyJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gdHJpZ2dlcih0aW1lKSB7XG4gICAgICB2YXIgYXVkaW9Db250ZXh0ID0gdGhpcy5hdWRpb0NvbnRleHQ7XG4gICAgICB2YXIgZ3JhaW5UaW1lID0gdGltZSB8fCBhdWRpb0NvbnRleHQuY3VycmVudFRpbWU7XG4gICAgICB2YXIgZ3JhaW5QZXJpb2QgPSB0aGlzLnBlcmlvZEFicztcbiAgICAgIHZhciBncmFpblBvc2l0aW9uID0gdGhpcy5jdXJyZW50UG9zaXRpb247XG4gICAgICB2YXIgZ3JhaW5EdXJhdGlvbiA9IHRoaXMuZHVyYXRpb25BYnM7XG5cbiAgICAgIGlmICh0aGlzLmJ1ZmZlcikge1xuICAgICAgICB2YXIgcmVzYW1wbGluZ1JhdGUgPSAxLjA7XG5cbiAgICAgICAgLy8gY2FsY3VsYXRlIHJlc2FtcGxpbmdcbiAgICAgICAgaWYgKHRoaXMucmVzYW1wbGluZyAhPT0gMCB8fCB0aGlzLnJlc2FtcGxpbmdWYXIgPiAwKSB7XG4gICAgICAgICAgdmFyIHJhbmRvbVJlc2FtcGxpbmcgPSAoTWF0aC5yYW5kb20oKSAtIDAuNSkgKiAyLjAgKiB0aGlzLnJlc2FtcGxpbmdWYXI7XG4gICAgICAgICAgcmVzYW1wbGluZ1JhdGUgPSBNYXRoLnBvdygyLjAsICh0aGlzLnJlc2FtcGxpbmcgKyByYW5kb21SZXNhbXBsaW5nKSAvIDEyMDAuMCk7XG4gICAgICAgIH1cblxuICAgICAgICBncmFpblBlcmlvZCArPSB0aGlzLnBlcmlvZFJlbCAqIGdyYWluRHVyYXRpb247XG4gICAgICAgIGdyYWluRHVyYXRpb24gKz0gdGhpcy5kdXJhdGlvblJlbCAqIGdyYWluUGVyaW9kO1xuXG4gICAgICAgIC8vIGdyYWluIHBlcmlvZCByYW5kb24gdmFyaWF0aW9uXG4gICAgICAgIGlmICh0aGlzLnBlcmlvZFZhciA+IDAuMCkgZ3JhaW5QZXJpb2QgKz0gMi4wICogKE1hdGgucmFuZG9tKCkgLSAwLjUpICogdGhpcy5wZXJpb2RWYXIgKiBncmFpblBlcmlvZDtcblxuICAgICAgICAvLyBjZW50ZXIgZ3JhaW5cbiAgICAgICAgaWYgKHRoaXMuY2VudGVyZWQpIGdyYWluUG9zaXRpb24gLT0gMC41ICogZ3JhaW5EdXJhdGlvbjtcblxuICAgICAgICAvLyByYW5kb21pemUgZ3JhaW4gcG9zaXRpb25cbiAgICAgICAgaWYgKHRoaXMucG9zaXRpb25WYXIgPiAwKSBncmFpblBvc2l0aW9uICs9ICgyLjAgKiBNYXRoLnJhbmRvbSgpIC0gMSkgKiB0aGlzLnBvc2l0aW9uVmFyO1xuXG4gICAgICAgIHZhciBidWZmZXJEdXJhdGlvbiA9IHRoaXMuYnVmZmVyRHVyYXRpb247XG5cbiAgICAgICAgLy8gd3JhcCBvciBjbGlwIGdyYWluIHBvc2l0aW9uIGFuZCBkdXJhdGlvbiBpbnRvIGJ1ZmZlciBkdXJhdGlvblxuICAgICAgICBpZiAoZ3JhaW5Qb3NpdGlvbiA8IDAgfHwgZ3JhaW5Qb3NpdGlvbiA+PSBidWZmZXJEdXJhdGlvbikge1xuICAgICAgICAgIGlmICh0aGlzLmN5Y2xpYykge1xuICAgICAgICAgICAgdmFyIGN5Y2xlcyA9IGdyYWluUG9zaXRpb24gLyBidWZmZXJEdXJhdGlvbjtcbiAgICAgICAgICAgIGdyYWluUG9zaXRpb24gPSAoY3ljbGVzIC0gTWF0aC5mbG9vcihjeWNsZXMpKSAqIGJ1ZmZlckR1cmF0aW9uO1xuXG4gICAgICAgICAgICBpZiAoZ3JhaW5Qb3NpdGlvbiArIGdyYWluRHVyYXRpb24gPiB0aGlzLmJ1ZmZlci5kdXJhdGlvbikgZ3JhaW5EdXJhdGlvbiA9IHRoaXMuYnVmZmVyLmR1cmF0aW9uIC0gZ3JhaW5Qb3NpdGlvbjtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgaWYgKGdyYWluUG9zaXRpb24gPCAwKSB7XG4gICAgICAgICAgICAgIGdyYWluVGltZSAtPSBncmFpblBvc2l0aW9uO1xuICAgICAgICAgICAgICBncmFpbkR1cmF0aW9uICs9IGdyYWluUG9zaXRpb247XG4gICAgICAgICAgICAgIGdyYWluUG9zaXRpb24gPSAwO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAoZ3JhaW5Qb3NpdGlvbiArIGdyYWluRHVyYXRpb24gPiBidWZmZXJEdXJhdGlvbikgZ3JhaW5EdXJhdGlvbiA9IGJ1ZmZlckR1cmF0aW9uIC0gZ3JhaW5Qb3NpdGlvbjtcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICAvLyBtYWtlIGdyYWluXG4gICAgICAgIGlmICh0aGlzLmdhaW4gPiAwICYmIGdyYWluRHVyYXRpb24gPj0gMC4wMDEpIHtcbiAgICAgICAgICAvLyBtYWtlIGdyYWluIGVudmVsb3BlXG4gICAgICAgICAgdmFyIGVudmVsb3BlID0gYXVkaW9Db250ZXh0LmNyZWF0ZUdhaW4oKTtcbiAgICAgICAgICB2YXIgYXR0YWNrID0gdGhpcy5hdHRhY2tBYnMgKyB0aGlzLmF0dGFja1JlbCAqIGdyYWluRHVyYXRpb247XG4gICAgICAgICAgdmFyIHJlbGVhc2UgPSB0aGlzLnJlbGVhc2VBYnMgKyB0aGlzLnJlbGVhc2VSZWwgKiBncmFpbkR1cmF0aW9uO1xuXG4gICAgICAgICAgaWYgKGF0dGFjayArIHJlbGVhc2UgPiBncmFpbkR1cmF0aW9uKSB7XG4gICAgICAgICAgICB2YXIgZmFjdG9yID0gZ3JhaW5EdXJhdGlvbiAvIChhdHRhY2sgKyByZWxlYXNlKTtcbiAgICAgICAgICAgIGF0dGFjayAqPSBmYWN0b3I7XG4gICAgICAgICAgICByZWxlYXNlICo9IGZhY3RvcjtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICB2YXIgYXR0YWNrRW5kVGltZSA9IGdyYWluVGltZSArIGF0dGFjaztcbiAgICAgICAgICB2YXIgZ3JhaW5FbmRUaW1lID0gZ3JhaW5UaW1lICsgZ3JhaW5EdXJhdGlvbiAvIHJlc2FtcGxpbmdSYXRlO1xuICAgICAgICAgIHZhciByZWxlYXNlU3RhcnRUaW1lID0gZ3JhaW5FbmRUaW1lIC0gcmVsZWFzZTtcblxuICAgICAgICAgIGVudmVsb3BlLmdhaW4udmFsdWUgPSAwO1xuXG4gICAgICAgICAgaWYgKHRoaXMuYXR0YWNrU2hhcGUgPT09ICdsaW4nKSB7XG4gICAgICAgICAgICBlbnZlbG9wZS5nYWluLnNldFZhbHVlQXRUaW1lKDAuMCwgZ3JhaW5UaW1lKTtcbiAgICAgICAgICAgIGVudmVsb3BlLmdhaW4ubGluZWFyUmFtcFRvVmFsdWVBdFRpbWUodGhpcy5nYWluLCBhdHRhY2tFbmRUaW1lKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgZW52ZWxvcGUuZ2Fpbi5zZXRWYWx1ZUF0VGltZSh0aGlzLmV4cFJhbXBPZmZzZXQsIGdyYWluVGltZSk7XG4gICAgICAgICAgICBlbnZlbG9wZS5nYWluLmV4cG9uZW50aWFsUmFtcFRvVmFsdWVBdFRpbWUodGhpcy5nYWluLCBhdHRhY2tFbmRUaW1lKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBpZiAocmVsZWFzZVN0YXJ0VGltZSA+IGF0dGFja0VuZFRpbWUpIGVudmVsb3BlLmdhaW4uc2V0VmFsdWVBdFRpbWUodGhpcy5nYWluLCByZWxlYXNlU3RhcnRUaW1lKTtcblxuICAgICAgICAgIGlmICh0aGlzLnJlbGVhc2VTaGFwZSA9PT0gJ2xpbicpIHtcbiAgICAgICAgICAgIGVudmVsb3BlLmdhaW4ubGluZWFyUmFtcFRvVmFsdWVBdFRpbWUoMC4wLCBncmFpbkVuZFRpbWUpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBlbnZlbG9wZS5nYWluLmV4cG9uZW50aWFsUmFtcFRvVmFsdWVBdFRpbWUodGhpcy5leHBSYW1wT2Zmc2V0LCBncmFpbkVuZFRpbWUpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGVudmVsb3BlLmNvbm5lY3QodGhpcy5vdXRwdXROb2RlKTtcblxuICAgICAgICAgIC8vIG1ha2Ugc291cmNlXG4gICAgICAgICAgdmFyIHNvdXJjZSA9IGF1ZGlvQ29udGV4dC5jcmVhdGVCdWZmZXJTb3VyY2UoKTtcblxuICAgICAgICAgIHNvdXJjZS5idWZmZXIgPSB0aGlzLmJ1ZmZlcjtcbiAgICAgICAgICBzb3VyY2UucGxheWJhY2tSYXRlLnZhbHVlID0gcmVzYW1wbGluZ1JhdGU7XG4gICAgICAgICAgc291cmNlLmNvbm5lY3QoZW52ZWxvcGUpO1xuXG4gICAgICAgICAgc291cmNlLnN0YXJ0KGdyYWluVGltZSwgZ3JhaW5Qb3NpdGlvbik7XG4gICAgICAgICAgc291cmNlLnN0b3AoZ3JhaW5FbmRUaW1lKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICByZXR1cm4gTWF0aC5tYXgodGhpcy5wZXJpb2RNaW4sIGdyYWluUGVyaW9kKTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6ICdidWZmZXJEdXJhdGlvbicsXG4gICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICBpZiAodGhpcy5idWZmZXIpIHtcbiAgICAgICAgdmFyIGJ1ZmZlckR1cmF0aW9uID0gdGhpcy5idWZmZXIuZHVyYXRpb247XG5cbiAgICAgICAgaWYgKHRoaXMud3JhcEFyb3VuZEV4dGVuc2lvbikgYnVmZmVyRHVyYXRpb24gLT0gdGhpcy53cmFwQXJvdW5kRXh0ZW5zaW9uO1xuXG4gICAgICAgIHJldHVybiBidWZmZXJEdXJhdGlvbjtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIDA7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3VycmVudCBwb3NpdGlvblxuICAgICAqXG4gICAgICogQHR5cGUge051bWJlcn1cbiAgICAgKiBAbmFtZSBjdXJyZW50UG9zaXRpb25cbiAgICAgKiBAbWVtYmVyb2YgR3JhbnVsYXJFbmdpbmVcbiAgICAgKiBAaW5zdGFuY2VcbiAgICAgKiBAcmVhZG9ubHlcbiAgICAgKi9cblxuICB9LCB7XG4gICAga2V5OiAnY3VycmVudFBvc2l0aW9uJyxcbiAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgIHZhciBtYXN0ZXIgPSB0aGlzLm1hc3RlcjtcblxuICAgICAgaWYgKG1hc3RlciAmJiBtYXN0ZXIuY3VycmVudFBvc2l0aW9uICE9PSB1bmRlZmluZWQpIHJldHVybiBtYXN0ZXIuY3VycmVudFBvc2l0aW9uO1xuXG4gICAgICByZXR1cm4gdGhpcy5wb3NpdGlvbjtcbiAgICB9XG4gIH1dKTtcbiAgcmV0dXJuIEdyYW51bGFyRW5naW5lO1xufShfQXVkaW9UaW1lRW5naW5lMy5kZWZhdWx0KTtcblxuZXhwb3J0cy5kZWZhdWx0ID0gR3JhbnVsYXJFbmdpbmU7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247Y2hhcnNldD11dGYtODtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJa2R5WVc1MWJHRnlSVzVuYVc1bExtcHpJbDBzSW01aGJXVnpJanBiSW05d2RFOXlSR1ZtSWl3aWIzQjBJaXdpWkdWbUlpd2lkVzVrWldacGJtVmtJaXdpUjNKaGJuVnNZWEpGYm1kcGJtVWlMQ0p2Y0hScGIyNXpJaXdpWVhWa2FXOURiMjUwWlhoMElpd2lZblZtWm1WeUlpd2ljR1Z5YVc5a1FXSnpJaXdpY0dWeWFXOWtVbVZzSWl3aWNHVnlhVzlrVm1GeUlpd2ljR1Z5YVc5a1RXbHVJaXdpY0c5emFYUnBiMjRpTENKd2IzTnBkR2x2YmxaaGNpSXNJbVIxY21GMGFXOXVRV0p6SWl3aVpIVnlZWFJwYjI1U1pXd2lMQ0poZEhSaFkydEJZbk1pTENKaGRIUmhZMnRTWld3aUxDSmhkSFJoWTJ0VGFHRndaU0lzSW5KbGJHVmhjMlZCWW5NaUxDSnlaV3hsWVhObFVtVnNJaXdpY21Wc1pXRnpaVk5vWVhCbElpd2laWGh3VW1GdGNFOW1abk5sZENJc0luSmxjMkZ0Y0d4cGJtY2lMQ0p5WlhOaGJYQnNhVzVuVm1GeUlpd2laMkZwYmlJc0ltTmxiblJsY21Wa0lpd2lZM2xqYkdsaklpd2lkM0poY0VGeWIzVnVaRVY0ZEdWdWMybHZiaUlzSW05MWRIQjFkRTV2WkdVaUxDSmpjbVZoZEdWSFlXbHVJaXdpZEdsdFpTSXNJazFoZEdnaUxDSnRZWGdpTENKamRYSnlaVzUwVkdsdFpTSXNJblJ5YVdkblpYSWlMQ0puY21GcGJsUnBiV1VpTENKbmNtRnBibEJsY21sdlpDSXNJbWR5WVdsdVVHOXphWFJwYjI0aUxDSmpkWEp5Wlc1MFVHOXphWFJwYjI0aUxDSm5jbUZwYmtSMWNtRjBhVzl1SWl3aWNtVnpZVzF3YkdsdVoxSmhkR1VpTENKeVlXNWtiMjFTWlhOaGJYQnNhVzVuSWl3aWNtRnVaRzl0SWl3aWNHOTNJaXdpWW5WbVptVnlSSFZ5WVhScGIyNGlMQ0pqZVdOc1pYTWlMQ0ptYkc5dmNpSXNJbVIxY21GMGFXOXVJaXdpWlc1MlpXeHZjR1VpTENKaGRIUmhZMnNpTENKeVpXeGxZWE5sSWl3aVptRmpkRzl5SWl3aVlYUjBZV05yUlc1a1ZHbHRaU0lzSW1keVlXbHVSVzVrVkdsdFpTSXNJbkpsYkdWaGMyVlRkR0Z5ZEZScGJXVWlMQ0oyWVd4MVpTSXNJbk5sZEZaaGJIVmxRWFJVYVcxbElpd2liR2x1WldGeVVtRnRjRlJ2Vm1Gc2RXVkJkRlJwYldVaUxDSmxlSEJ2Ym1WdWRHbGhiRkpoYlhCVWIxWmhiSFZsUVhSVWFXMWxJaXdpWTI5dWJtVmpkQ0lzSW5OdmRYSmpaU0lzSW1OeVpXRjBaVUoxWm1abGNsTnZkWEpqWlNJc0luQnNZWGxpWVdOclVtRjBaU0lzSW5OMFlYSjBJaXdpYzNSdmNDSXNJbTFoYzNSbGNpSXNJa0YxWkdsdlZHbHRaVVZ1WjJsdVpTSmRMQ0p0WVhCd2FXNW5jeUk2SWpzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3UVVGQlFUczdPenM3TzBGQlJVRXNVMEZCVTBFc1VVRkJWQ3hEUVVGclFrTXNSMEZCYkVJc1JVRkJkVUpETEVkQlFYWkNMRVZCUVRSQ08wRkJRekZDTEUxQlFVbEVMRkZCUVZGRkxGTkJRVm9zUlVGRFJTeFBRVUZQUml4SFFVRlFPenRCUVVWR0xGTkJRVTlETEVkQlFWQTdRVUZEUkRzN1FVRkhSRHM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096dEpRVzFFVFVVc1l6czdPMEZCUTBvc05FSkJRVEJDTzBGQlFVRXNVVUZCWkVNc1QwRkJZeXgxUlVGQlNpeEZRVUZKTzBGQlFVRTdPMEZCUjNoQ096czdPenM3T3pzN1FVRklkMElzYzBwQlEyeENRU3hSUVVGUlF5eFpRVVJWT3p0QlFWbDRRaXhWUVVGTFF5eE5RVUZNTEVkQlFXTlFMRk5CUVZOTExGRkJRVkZGTEUxQlFXcENMRVZCUVhsQ0xFbEJRWHBDTEVOQlFXUTdPMEZCUlVFN096czdPenM3T3p0QlFWTkJMRlZCUVV0RExGTkJRVXdzUjBGQmFVSlNMRk5CUVZOTExGRkJRVkZITEZOQlFXcENMRVZCUVRSQ0xFbEJRVFZDTEVOQlFXcENPenRCUVVWQk96czdPenM3T3pzN1FVRlRRU3hWUVVGTFF5eFRRVUZNTEVkQlFXbENWQ3hUUVVGVFN5eFJRVUZSU1N4VFFVRnFRaXhGUVVFMFFpeERRVUUxUWl4RFFVRnFRanM3UVVGRlFUczdPenM3T3pzN08wRkJVMEVzVlVGQlMwTXNVMEZCVEN4SFFVRnBRbFlzVTBGQlUwc3NVVUZCVVVzc1UwRkJha0lzUlVGQk5FSXNRMEZCTlVJc1EwRkJha0k3TzBGQlJVRTdPenM3T3pzN096dEJRVk5CTEZWQlFVdERMRk5CUVV3c1IwRkJhVUpZTEZOQlFWTkxMRkZCUVZGTkxGTkJRV3BDTEVWQlFUUkNMRXRCUVRWQ0xFTkJRV3BDT3p0QlFVVkJPenM3T3pzN096czdRVUZUUVN4VlFVRkxReXhSUVVGTUxFZEJRV2RDV2l4VFFVRlRTeXhSUVVGUlR5eFJRVUZxUWl4RlFVRXlRaXhEUVVFelFpeERRVUZvUWpzN1FVRkZRVHM3T3pzN096czdPMEZCVTBFc1ZVRkJTME1zVjBGQlRDeEhRVUZ0UW1Jc1UwRkJVMHNzVVVGQlVWRXNWMEZCYWtJc1JVRkJPRUlzUzBGQk9VSXNRMEZCYmtJN08wRkJSVUU3T3pzN096czdPenRCUVZOQkxGVkJRVXRETEZkQlFVd3NSMEZCYlVKa0xGTkJRVk5MTEZGQlFWRlRMRmRCUVdwQ0xFVkJRVGhDTEVkQlFUbENMRU5CUVc1Q0xFTkJla1ozUWl4RFFYbEdLMEk3TzBGQlJYWkVPenM3T3pzN096czdRVUZUUVN4VlFVRkxReXhYUVVGTUxFZEJRVzFDWml4VFFVRlRTeXhSUVVGUlZTeFhRVUZxUWl4RlFVRTRRaXhEUVVFNVFpeERRVUZ1UWpzN1FVRkZRVHM3T3pzN096czdPMEZCVTBFc1ZVRkJTME1zVTBGQlRDeEhRVUZwUW1oQ0xGTkJRVk5MTEZGQlFWRlhMRk5CUVdwQ0xFVkJRVFJDTEVOQlFUVkNMRU5CUVdwQ096dEJRVVZCT3pzN096czdPenM3UVVGVFFTeFZRVUZMUXl4VFFVRk1MRWRCUVdsQ2FrSXNVMEZCVTBzc1VVRkJVVmtzVTBGQmFrSXNSVUZCTkVJc1IwRkJOVUlzUTBGQmFrSTdPMEZCUlVFN096czdPenM3T3p0QlFWTkJMRlZCUVV0RExGZEJRVXdzUjBGQmJVSnNRaXhUUVVGVFN5eFJRVUZSWVN4WFFVRnFRaXhGUVVFNFFpeExRVUU1UWl4RFFVRnVRanM3UVVGRlFUczdPenM3T3pzN08wRkJVMEVzVlVGQlMwTXNWVUZCVEN4SFFVRnJRbTVDTEZOQlFWTkxMRkZCUVZGakxGVkJRV3BDTEVWQlFUWkNMRU5CUVRkQ0xFTkJRV3hDT3p0QlFVVkJPenM3T3pzN096czdRVUZUUVN4VlFVRkxReXhWUVVGTUxFZEJRV3RDY0VJc1UwRkJVMHNzVVVGQlVXVXNWVUZCYWtJc1JVRkJOa0lzUjBGQk4wSXNRMEZCYkVJN08wRkJSVUU3T3pzN096czdPenRCUVZOQkxGVkJRVXRETEZsQlFVd3NSMEZCYjBKeVFpeFRRVUZUU3l4UlFVRlJaMElzV1VGQmFrSXNSVUZCSzBJc1MwRkJMMElzUTBGQmNFSTdPMEZCUlVFN096czdPenM3T3p0QlFWTkJMRlZCUVV0RExHRkJRVXdzUjBGQmNVSjBRaXhUUVVGVFN5eFJRVUZSYVVJc1lVRkJha0lzUlVGQlowTXNUVUZCYUVNc1EwRkJja0k3TzBGQlJVRTdPenM3T3pzN096dEJRVk5CTEZWQlFVdERMRlZCUVV3c1IwRkJhMEoyUWl4VFFVRlRTeXhSUVVGUmEwSXNWVUZCYWtJc1JVRkJOa0lzUTBGQk4wSXNRMEZCYkVJN08wRkJSVUU3T3pzN096czdPenRCUVZOQkxGVkJRVXRETEdGQlFVd3NSMEZCY1VKNFFpeFRRVUZUU3l4UlFVRlJiVUlzWVVGQmFrSXNSVUZCWjBNc1EwRkJhRU1zUTBGQmNrSTdPMEZCUlVFN096czdPenM3T3p0QlFWTkJMRlZCUVV0RExFbEJRVXdzUjBGQldYcENMRk5CUVZOTExGRkJRVkZ2UWl4SlFVRnFRaXhGUVVGMVFpeERRVUYyUWl4RFFVRmFPenRCUVVWQk96czdPenM3T3pzN1FVRlRRU3hWUVVGTFF5eFJRVUZNTEVkQlFXZENNVUlzVTBGQlUwc3NVVUZCVVhGQ0xGRkJRV3BDTEVWQlFUSkNMRWxCUVROQ0xFTkJRV2hDT3p0QlFVVkJPenM3T3pzN096czdRVUZUUVN4VlFVRkxReXhOUVVGTUxFZEJRV016UWl4VFFVRlRTeXhSUVVGUmMwSXNUVUZCYWtJc1JVRkJlVUlzUzBGQmVrSXNRMEZCWkRzN1FVRkZRVHM3T3pzN096czdPenRCUVZWQkxGVkJRVXRETEcxQ1FVRk1MRWRCUVRKQ05VSXNVMEZCVTBzc1VVRkJVWFZDTEcxQ1FVRnFRaXhGUVVGelF5eERRVUYwUXl4RFFVRXpRanM3UVVGRlFTeFZRVUZMUXl4VlFVRk1MRWRCUVd0Q0xFMUJRVXQyUWl4WlFVRk1MRU5CUVd0Q2QwSXNWVUZCYkVJc1JVRkJiRUk3UVVGMFVIZENPMEZCZFZCNlFqczdRVUZGUkRzN096czdPenM3T3pzN096dG5RMEYzUTFsRExFa3NSVUZCVFR0QlFVTm9Ra0VzWVVGQlQwTXNTMEZCUzBNc1IwRkJUQ3hEUVVGVFJpeEpRVUZVTEVWQlFXVXNTMEZCUzNwQ0xGbEJRVXdzUTBGQmEwSTBRaXhYUVVGcVF5eERRVUZRTzBGQlEwRXNZVUZCVDBnc1QwRkJUeXhMUVVGTFNTeFBRVUZNTEVOQlFXRktMRWxCUVdJc1EwRkJaRHRCUVVORU96dEJRVVZFT3pzN096czdPenM3T3pzMFFrRlJVVUVzU1N4RlFVRk5PMEZCUTFvc1ZVRkJTWHBDTEdWQlFXVXNTMEZCUzBFc1dVRkJlRUk3UVVGRFFTeFZRVUZKT0VJc1dVRkJXVXdzVVVGQlVYcENMR0ZCUVdFMFFpeFhRVUZ5UXp0QlFVTkJMRlZCUVVsSExHTkJRV01zUzBGQlN6ZENMRk5CUVhaQ08wRkJRMEVzVlVGQlNUaENMR2RDUVVGblFpeExRVUZMUXl4bFFVRjZRanRCUVVOQkxGVkJRVWxETEdkQ1FVRm5RaXhMUVVGTE1VSXNWMEZCZWtJN08wRkJSVUVzVlVGQlNTeExRVUZMVUN4TlFVRlVMRVZCUVdsQ08wRkJRMllzV1VGQlNXdERMR2xDUVVGcFFpeEhRVUZ5UWpzN1FVRkZRVHRCUVVOQkxGbEJRVWtzUzBGQlMyeENMRlZCUVV3c1MwRkJiMElzUTBGQmNFSXNTVUZCZVVJc1MwRkJTME1zWVVGQlRDeEhRVUZ4UWl4RFFVRnNSQ3hGUVVGeFJEdEJRVU51UkN4alFVRkphMElzYlVKQlFXMUNMRU5CUVVOV0xFdEJRVXRYTEUxQlFVd3NTMEZCWjBJc1IwRkJha0lzU1VGQmQwSXNSMEZCZUVJc1IwRkJPRUlzUzBGQlMyNUNMR0ZCUVRGRU8wRkJRMEZwUWl3eVFrRkJhVUpVTEV0QlFVdFpMRWRCUVV3c1EwRkJVeXhIUVVGVUxFVkJRV01zUTBGQlF5eExRVUZMY2tJc1ZVRkJUQ3hIUVVGclFtMUNMR2RDUVVGdVFpeEpRVUYxUXl4TlFVRnlSQ3hEUVVGcVFqdEJRVU5FT3p0QlFVVkVUQ3gxUWtGQlpTeExRVUZMTlVJc1UwRkJUQ3hIUVVGcFFpdENMR0ZCUVdoRE8wRkJRMEZCTEhsQ1FVRnBRaXhMUVVGTGVrSXNWMEZCVEN4SFFVRnRRbk5DTEZkQlFYQkRPenRCUVVWQk8wRkJRMEVzV1VGQlNTeExRVUZMTTBJc1UwRkJUQ3hIUVVGcFFpeEhRVUZ5UWl4RlFVTkZNa0lzWlVGQlpTeFBRVUZQVEN4TFFVRkxWeXhOUVVGTUxFdEJRV2RDTEVkQlFYWkNMRWxCUVRoQ0xFdEJRVXRxUXl4VFFVRnVReXhIUVVFclF6SkNMRmRCUVRsRU96dEJRVVZHTzBGQlEwRXNXVUZCU1N4TFFVRkxXQ3hSUVVGVUxFVkJRMFZaTEdsQ1FVRnBRaXhOUVVGTlJTeGhRVUYyUWpzN1FVRkZSanRCUVVOQkxGbEJRVWtzUzBGQlN6TkNMRmRCUVV3c1IwRkJiVUlzUTBGQmRrSXNSVUZEUlhsQ0xHbENRVUZwUWl4RFFVRkRMRTFCUVUxT0xFdEJRVXRYTEUxQlFVd3NSVUZCVGl4SFFVRnpRaXhEUVVGMlFpeEpRVUUwUWl4TFFVRkxPVUlzVjBGQmJFUTdPMEZCUlVZc1dVRkJTV2RETEdsQ1FVRnBRaXhMUVVGTFFTeGpRVUV4UWpzN1FVRkZRVHRCUVVOQkxGbEJRVWxRTEdkQ1FVRm5RaXhEUVVGb1FpeEpRVUZ4UWtFc2FVSkJRV2xDVHl4alFVRXhReXhGUVVFd1JEdEJRVU40UkN4alFVRkpMRXRCUVV0c1FpeE5RVUZVTEVWQlFXbENPMEZCUTJZc1owSkJRVWx0UWl4VFFVRlRVaXhuUWtGQlowSlBMR05CUVRkQ08wRkJRMEZRTERSQ1FVRm5RaXhEUVVGRFVTeFRRVUZUWkN4TFFVRkxaU3hMUVVGTUxFTkJRVmRFTEUxQlFWZ3NRMEZCVml4SlFVRm5RMFFzWTBGQmFFUTdPMEZCUlVFc1owSkJRVWxRTEdkQ1FVRm5Ra1VzWVVGQmFFSXNSMEZCWjBNc1MwRkJTMnBETEUxQlFVd3NRMEZCV1hsRExGRkJRV2hFTEVWQlEwVlNMR2RDUVVGblFpeExRVUZMYWtNc1RVRkJUQ3hEUVVGWmVVTXNVVUZCV2l4SFFVRjFRbFlzWVVGQmRrTTdRVUZEU0N4WFFVNUVMRTFCVFU4N1FVRkRUQ3huUWtGQlNVRXNaMEpCUVdkQ0xFTkJRWEJDTEVWQlFYVkNPMEZCUTNKQ1Jpd3lRa0ZCWVVVc1lVRkJZanRCUVVOQlJTd3JRa0ZCYVVKR0xHRkJRV3BDTzBGQlEwRkJMRGhDUVVGblFpeERRVUZvUWp0QlFVTkVPenRCUVVWRUxHZENRVUZKUVN4blFrRkJaMEpGTEdGQlFXaENMRWRCUVdkRFN5eGpRVUZ3UXl4RlFVTkZUQ3huUWtGQlowSkxMR2xDUVVGcFFsQXNZVUZCYWtNN1FVRkRTRHRCUVVOR096dEJRVVZFTzBGQlEwRXNXVUZCU1N4TFFVRkxZaXhKUVVGTUxFZEJRVmtzUTBGQldpeEpRVUZwUW1Vc2FVSkJRV2xDTEV0QlFYUkRMRVZCUVRaRE8wRkJRek5ETzBGQlEwRXNZMEZCU1ZNc1YwRkJWek5ETEdGQlFXRjNRaXhWUVVGaUxFVkJRV1k3UVVGRFFTeGpRVUZKYjBJc1UwRkJVeXhMUVVGTGJFTXNVMEZCVEN4SFFVRnBRaXhMUVVGTFF5eFRRVUZNTEVkQlFXbENkVUlzWVVGQkwwTTdRVUZEUVN4alFVRkpWeXhWUVVGVkxFdEJRVXRvUXl4VlFVRk1MRWRCUVd0Q0xFdEJRVXRETEZWQlFVd3NSMEZCYTBKdlFpeGhRVUZzUkRzN1FVRkZRU3hqUVVGSlZTeFRRVUZUUXl4UFFVRlVMRWRCUVcxQ1dDeGhRVUYyUWl4RlFVRnpRenRCUVVOd1F5eG5Ra0ZCU1Zrc1UwRkJVMW9zYVVKQlFXbENWU3hUUVVGVFF5eFBRVUV4UWl4RFFVRmlPMEZCUTBGRUxITkNRVUZWUlN4TlFVRldPMEZCUTBGRUxIVkNRVUZYUXl4TlFVRllPMEZCUTBRN08wRkJSVVFzWTBGQlNVTXNaMEpCUVdkQ2FrSXNXVUZCV1dNc1RVRkJhRU03UVVGRFFTeGpRVUZKU1N4bFFVRmxiRUlzV1VGQldVa3NaMEpCUVdkQ1F5eGpRVUV2UXp0QlFVTkJMR05CUVVsakxHMUNRVUZ0UWtRc1pVRkJaVWdzVDBGQmRFTTdPMEZCUlVGR0xHMUNRVUZUZUVJc1NVRkJWQ3hEUVVGakswSXNTMEZCWkN4SFFVRnpRaXhEUVVGMFFqczdRVUZGUVN4alFVRkpMRXRCUVV0MFF5eFhRVUZNTEV0QlFYRkNMRXRCUVhwQ0xFVkJRV2RETzBGQlF6bENLMElzY1VKQlFWTjRRaXhKUVVGVUxFTkJRV05uUXl4alFVRmtMRU5CUVRaQ0xFZEJRVGRDTEVWQlFXdERja0lzVTBGQmJFTTdRVUZEUVdFc2NVSkJRVk40UWl4SlFVRlVMRU5CUVdOcFF5eDFRa0ZCWkN4RFFVRnpReXhMUVVGTGFrTXNTVUZCTTBNc1JVRkJhVVEwUWl4aFFVRnFSRHRCUVVORUxGZEJTRVFzVFVGSFR6dEJRVU5NU2l4eFFrRkJVM2hDTEVsQlFWUXNRMEZCWTJkRExHTkJRV1FzUTBGQk5rSXNTMEZCUzI1RExHRkJRV3hETEVWQlFXbEVZeXhUUVVGcVJEdEJRVU5CWVN4eFFrRkJVM2hDTEVsQlFWUXNRMEZCWTJ0RExEUkNRVUZrTEVOQlFUSkRMRXRCUVV0c1F5eEpRVUZvUkN4RlFVRnpSRFJDTEdGQlFYUkVPMEZCUTBRN08wRkJSVVFzWTBGQlNVVXNiVUpCUVcxQ1JpeGhRVUYyUWl4RlFVTkZTaXhUUVVGVGVFSXNTVUZCVkN4RFFVRmpaME1zWTBGQlpDeERRVUUyUWl4TFFVRkxhRU1zU1VGQmJFTXNSVUZCZDBNNFFpeG5Ra0ZCZUVNN08wRkJSVVlzWTBGQlNTeExRVUZMYkVNc1dVRkJUQ3hMUVVGelFpeExRVUV4UWl4RlFVRnBRenRCUVVNdlFqUkNMSEZDUVVGVGVFSXNTVUZCVkN4RFFVRmphVU1zZFVKQlFXUXNRMEZCYzBNc1IwRkJkRU1zUlVGQk1rTktMRmxCUVRORE8wRkJRMFFzVjBGR1JDeE5RVVZQTzBGQlEweE1MSEZDUVVGVGVFSXNTVUZCVkN4RFFVRmphME1zTkVKQlFXUXNRMEZCTWtNc1MwRkJTM0pETEdGQlFXaEVMRVZCUVN0RVowTXNXVUZCTDBRN1FVRkRSRHM3UVVGRlJFd3NiVUpCUVZOWExFOUJRVlFzUTBGQmFVSXNTMEZCU3k5Q0xGVkJRWFJDT3p0QlFVVkJPMEZCUTBFc1kwRkJTV2RETEZOQlFWTjJSQ3hoUVVGaGQwUXNhMEpCUVdJc1JVRkJZanM3UVVGRlFVUXNhVUpCUVU5MFJDeE5RVUZRTEVkQlFXZENMRXRCUVV0QkxFMUJRWEpDTzBGQlEwRnpSQ3hwUWtGQlQwVXNXVUZCVUN4RFFVRnZRbEFzUzBGQmNFSXNSMEZCTkVKbUxHTkJRVFZDTzBGQlEwRnZRaXhwUWtGQlQwUXNUMEZCVUN4RFFVRmxXQ3hSUVVGbU96dEJRVVZCV1N4cFFrRkJUMGNzUzBGQlVDeERRVUZoTlVJc1UwRkJZaXhGUVVGM1FrVXNZVUZCZUVJN1FVRkRRWFZDTEdsQ1FVRlBTU3hKUVVGUUxFTkJRVmxZTEZsQlFWbzdRVUZEUkR0QlFVTkdPenRCUVVWRUxHRkJRVTkwUWl4TFFVRkxReXhIUVVGTUxFTkJRVk1zUzBGQlMzUkNMRk5CUVdRc1JVRkJlVUl3UWl4WFFVRjZRaXhEUVVGUU8wRkJRMFE3T3p0M1FrRndTbTlDTzBGQlEyNUNMRlZCUVVrc1MwRkJTemxDTEUxQlFWUXNSVUZCYVVJN1FVRkRaaXhaUVVGSmMwTXNhVUpCUVdsQ0xFdEJRVXQwUXl4TlFVRk1MRU5CUVZsNVF5eFJRVUZxUXpzN1FVRkZRU3haUVVGSkxFdEJRVXR3UWl4dFFrRkJWQ3hGUVVORmFVSXNhMEpCUVd0Q0xFdEJRVXRxUWl4dFFrRkJka0k3TzBGQlJVWXNaVUZCVDJsQ0xHTkJRVkE3UVVGRFJEczdRVUZGUkN4aFFVRlBMRU5CUVZBN1FVRkRSRHM3UVVGRlJEczdPenM3T3pzN096czdPM2RDUVZOelFqdEJRVU53UWl4VlFVRkpjVUlzVTBGQlV5eExRVUZMUVN4TlFVRnNRanM3UVVGRlFTeFZRVUZKUVN4VlFVRlZRU3hQUVVGUE0wSXNaVUZCVUN4TFFVRXlRbkJETEZOQlFYcERMRVZCUTBVc1QwRkJUeXRFTEU5QlFVOHpRaXhsUVVGa096dEJRVVZHTEdGQlFVOHNTMEZCU3pOQ0xGRkJRVm83UVVGRFJEczdPMFZCYUZNd1FuVkVMSGxDT3p0clFrRXdXbVF2UkN4aklpd2labWxzWlNJNklrZHlZVzUxYkdGeVJXNW5hVzVsTG1weklpd2ljMjkxY21ObGMwTnZiblJsYm5RaU9sc2lhVzF3YjNKMElFRjFaR2x2VkdsdFpVVnVaMmx1WlNCbWNtOXRJQ2N1TGk5amIzSmxMMEYxWkdsdlZHbHRaVVZ1WjJsdVpTYzdYRzVjYm1aMWJtTjBhVzl1SUc5d2RFOXlSR1ZtS0c5d2RDd2daR1ZtS1NCN1hHNGdJR2xtSUNodmNIUWdJVDA5SUhWdVpHVm1hVzVsWkNsY2JpQWdJQ0J5WlhSMWNtNGdiM0IwTzF4dVhHNGdJSEpsZEhWeWJpQmtaV1k3WEc1OVhHNWNibHh1THlvcVhHNGdLaUJIY21GdWRXeGhjaUJ6ZVc1MGFHVnphWE1nVkdsdFpVVnVaMmx1WlNCcGJYQnNaVzFsYm5ScGJtY2dkR2hsSUhOamFHVmtkV3hsWkNCcGJuUmxjbVpoWTJVdVhHNGdLaUJVYUdVZ1ozSmhhVzRnY0c5emFYUnBiMjRnS0dkeVlXbHVJRzl1YzJWMElHOXlJR05sYm5SbGNpQjBhVzFsSUdsdUlIUm9aU0JoZFdScGJ5QmlkV1ptWlhJcElHbHpYRzRnS2lCdmNIUnBiMjVoYkd4NUlHUmxkR1Z5YldsdVpXUWdZbmtnZEdobElHVnVaMmx1WlNkeklHTjFjbkpsYm5SUWIzTnBkR2x2YmlCaGRIUnlhV0oxZEdVdVhHNGdLbHh1SUNvZ1JYaGhiWEJzWlNCMGFHRjBJSE5vYjNkeklHRWdZRWR5WVc1MWJHRnlSVzVuYVc1bFlDQW9kMmwwYUNCaElHWmxkeUJ3WVhKaGJXVjBaWElnWTI5dWRISnZiSE1wSUdSeWFYWmxibHh1SUNvZ1lua2dZU0JnVTJOb1pXUjFiR1Z5WUNCaGJtUWdZU0JnVUd4aGVVTnZiblJ5YjJ4Z09seHVJQ29nZTBCc2FXNXJJR2gwZEhCek9pOHZjbUYzWjJsMExtTnZiUzkzWVhabGMycHpMM2RoZG1WekxXRjFaR2x2TDIxaGMzUmxjaTlsZUdGdGNHeGxjeTluY21GdWRXeGhjaTFsYm1kcGJtVXZhVzVrWlhndWFIUnRiSDFjYmlBcVhHNGdLaUJBWlhoMFpXNWtjeUJCZFdScGIxUnBiV1ZGYm1kcGJtVmNiaUFxSUVCbGVHRnRjR3hsWEc0Z0tpQnBiWEJ2Y25RZ0tpQmhjeUJoZFdScGJ5Qm1jbTl0SUNkM1lYWmxjeTFoZFdScGJ5YzdYRzRnS2lCamIyNXpkQ0J6WTJobFpIVnNaWElnUFNCaGRXUnBieTVuWlhSVFkyaGxaSFZzWlhJb0tUdGNiaUFxSUdOdmJuTjBJR2R5WVc1MWJHRnlSVzVuYVc1bElEMGdibVYzSUdGMVpHbHZMa2R5WVc1MWJHRnlSVzVuYVc1bEtDazdYRzRnS2x4dUlDb2djMk5vWldSMWJHVnlMbUZrWkNobmNtRnVkV3hoY2tWdVoybHVaU2s3WEc0Z0tseHVJQ3BjYmlBcUlFQndZWEpoYlNCN1QySnFaV04wZlNCdmNIUnBiMjV6UFh0OUlDMGdVR0Z5WVcxbGRHVnljMXh1SUNvZ1FIQmhjbUZ0SUh0QmRXUnBiMEoxWm1abGNuMGdXMjl3ZEdsdmJuTXVZblZtWm1WeVBXNTFiR3hkSUMwZ1FYVmthVzhnWW5WbVptVnlYRzRnS2lCQWNHRnlZVzBnZTA1MWJXSmxjbjBnVzI5d2RHbHZibk11Y0dWeWFXOWtRV0p6UFRBdU1ERmRJQzBnUVdKemIyeDFkR1VnWjNKaGFXNGdjR1Z5YVc5a0lHbHVJSE5sWTF4dUlDb2dRSEJoY21GdElIdE9kVzFpWlhKOUlGdHZjSFJwYjI1ekxuQmxjbWx2WkZKbGJEMHdYU0F0SUVkeVlXbHVJSEJsY21sdlpDQnlaV3hoZEdsMlpTQjBieUJoWW5OdmJIVjBaVnh1SUNvZ0lHUjFjbUYwYVc5dVhHNGdLaUJBY0dGeVlXMGdlMDUxYldKbGNuMGdXMjl3ZEdsdmJuTXVjR1Z5YVc5a1ZtRnlQVEJkSUMwZ1FXMXZkWFFnYjJZZ2NtRnVaRzl0SUdkeVlXbHVJSEJsY21sdlpGeHVJQ29nSUhaaGNtbGhkR2x2YmlCeVpXeGhkR2wyWlNCMGJ5Qm5jbUZwYmlCd1pYSnBiMlJjYmlBcUlFQndZWEpoYlNCN1RuVnRZbVZ5ZlNCYmIzQjBhVzl1Y3k1d1pYSnBiMlJOYVc0OU1DNHdNREZkSUMwZ1RXbHVhVzExYlNCbmNtRnBiaUJ3WlhKcGIyUmNiaUFxSUVCd1lYSmhiU0I3VG5WdFltVnlmU0JiYjNCMGFXOXVjeTV3YjNOcGRHbHZiajB3WFNBdElFZHlZV2x1SUhCdmMybDBhVzl1SUNodmJuTmxkQ0IwYVcxbElHbHVJR0YxWkdsdlhHNGdLaUFnWW5WbVptVnlLU0JwYmlCelpXTmNiaUFxSUVCd1lYSmhiU0I3VG5WdFltVnlmU0JiYjNCMGFXOXVjeTV3YjNOcGRHbHZibFpoY2owd0xqQXdNMTBnTFNCQmJXOTFkQ0J2WmlCeVlXNWtiMjBnWjNKaGFXNGdjRzl6YVhScGIyNWNiaUFxSUNCMllYSnBZWFJwYjI0Z2FXNGdjMlZqWEc0Z0tpQkFjR0Z5WVcwZ2UwNTFiV0psY24wZ1cyOXdkR2x2Ym5NdVpIVnlZWFJwYjI1QlluTTlNQzR4WFNBdElFRmljMjlzZFhSbElHZHlZV2x1SUdSMWNtRjBhVzl1SUdsdUlITmxZMXh1SUNvZ1FIQmhjbUZ0SUh0T2RXMWlaWEo5SUZ0dmNIUnBiMjV6TG1SMWNtRjBhVzl1VW1Wc1BUQmRJQzBnUjNKaGFXNGdaSFZ5WVhScGIyNGdjbVZzWVhScGRtVWdkRzhnWjNKaGFXNWNiaUFxSUNCd1pYSnBiMlFnS0c5MlpYSnNZWEFwWEc0Z0tpQkFjR0Z5WVcwZ2UwNTFiV0psY24wZ1cyOXdkR2x2Ym5NdVlYUjBZV05yUVdKelBUQmRJQzBnUVdKemIyeDFkR1VnWVhSMFlXTnJJSFJwYldVZ2FXNGdjMlZqWEc0Z0tpQkFjR0Z5WVcwZ2UwNTFiV0psY24wZ1cyOXdkR2x2Ym5NdVlYUjBZV05yVW1Wc1BUQXVOVjBnTFNCQmRIUmhZMnNnZEdsdFpTQnlaV3hoZEdsMlpTQjBieUJuY21GcGJpQmtkWEpoZEdsdmJseHVJQ29nUUhCaGNtRnRJSHRUZEhKcGJtZDlJRnR2Y0hScGIyNXpMbUYwZEdGamExTm9ZWEJsUFNkc2FXNG5YU0F0SUZOb1lYQmxJRzltSUdGMGRHRmphMXh1SUNvZ1FIQmhjbUZ0SUh0T2RXMWlaWEo5SUZ0dmNIUnBiMjV6TG5KbGJHVmhjMlZCWW5NOU1GMGdMU0JCWW5OdmJIVjBaU0J5Wld4bFlYTmxJSFJwYldVZ2FXNGdjMlZqWEc0Z0tpQkFjR0Z5WVcwZ2UwNTFiV0psY24wZ1cyOXdkR2x2Ym5NdWNtVnNaV0Z6WlZKbGJEMHdMalZkSUMwZ1VtVnNaV0Z6WlNCMGFXMWxJSEpsYkdGMGFYWmxJSFJ2SUdkeVlXbHVJR1IxY21GMGFXOXVYRzRnS2lCQWNHRnlZVzBnZTA1MWJXSmxjbjBnVzI5d2RHbHZibk11Y21Wc1pXRnpaVk5vWVhCbFBTZHNhVzRuWFNBdElGTm9ZWEJsSUc5bUlISmxiR1ZoYzJWY2JpQXFJRUJ3WVhKaGJTQjdVM1J5YVc1bmZTQmJiM0IwYVc5dWN5NWxlSEJTWVcxd1QyWm1jMlYwUFRBdU1EQXdNVjBnTFNCUFptWnpaWFFnS0hOMFlYSjBMMlZ1WkNCMllXeDFaU2xjYmlBcUlDQm1iM0lnWlhod2IyNWxiblJwWVd3Z1lYUjBZV05yTDNKbGJHVmhjMlZjYmlBcUlFQndZWEpoYlNCN1RuVnRZbVZ5ZlNCYmIzQjBhVzl1Y3k1eVpYTmhiWEJzYVc1blBUQmRJQzBnUjNKaGFXNGdjbVZ6WVcxd2JHbHVaeUJwYmlCalpXNTBYRzRnS2lCQWNHRnlZVzBnZTA1MWJXSmxjbjBnVzI5d2RHbHZibk11Y21WellXMXdiR2x1WjFaaGNqMHdYU0F0SUVGdGIzVjBJRzltSUhKaGJtUnZiU0J5WlhOaGJYQnNhVzVuSUhaaGNtbGhkR2x2YmlCcGJpQmpaVzUwWEc0Z0tpQkFjR0Z5WVcwZ2UwNTFiV0psY24wZ1cyOXdkR2x2Ym5NdVoyRnBiajB4WFNBdElFeHBibVZoY2lCbllXbHVJR1poWTNSdmNseHVJQ29nUUhCaGNtRnRJSHRDYjI5c1pXRnVmU0JiYjNCMGFXOXVjeTVqWlc1MFpYSmxaRDEwY25WbFhTQXRJRmRvWlhSb1pYSWdkR2hsSUdkeVlXbHVJSEJ2YzJsMGFXOXVJSEpsWm1WeWMxeHVJQ29nSUhSdklIUm9aU0JqWlc1MFpYSWdiMllnZEdobElHZHlZV2x1SUNodmNpQjBhR1VnWW1WbmFXNXVhVzVuS1Z4dUlDb2dRSEJoY21GdElIdENiMjlzWldGdWZTQmJiM0IwYVc5dWN5NWplV05zYVdNOVptRnNjMlZkSUMwZ1YyaGxkR2hsY2lCMGFHVWdZWFZrYVc4Z1luVm1abVZ5SUdGdVpDQm5jbUZwYmx4dUlDb2dJSEJ2YzJsMGFXOXVJR0Z5WlNCamIyNXphV1JsY21Wa0lHRnpJR041WTJ4cFkxeHVJQ29nUUhCaGNtRnRJSHRPZFcxaVpYSjlJRnR2Y0hScGIyNXpMbmR5WVhCQmNtOTFibVJGZUhSbGJuTnBiMjQ5TUYwZ0xTQlFiM0owYVc5dUlHRjBJSFJvWlNCbGJtUWdiMllnZEdobFhHNGdLaUFnWVhWa2FXOGdZblZtWm1WeUlIUm9ZWFFnYUdGeklHSmxaVzRnWTI5d2FXVmtJR1p5YjIwZ2RHaGxJR0psWjJsdWJtbHVaeUIwYnlCaGMzTjFjbVVnWTNsamJHbGpJR0psYUdGMmFXOXlYRzRnS2k5Y2JtTnNZWE56SUVkeVlXNTFiR0Z5Ulc1bmFXNWxJR1Y0ZEdWdVpITWdRWFZrYVc5VWFXMWxSVzVuYVc1bElIdGNiaUFnWTI5dWMzUnlkV04wYjNJb2IzQjBhVzl1Y3lBOUlIdDlLU0I3WEc0Z0lDQWdjM1Z3WlhJb2IzQjBhVzl1Y3k1aGRXUnBiME52Ym5SbGVIUXBPMXh1WEc0Z0lDQWdMeW9xWEc0Z0lDQWdJQ29nUVhWa2FXOGdZblZtWm1WeVhHNGdJQ0FnSUNwY2JpQWdJQ0FnS2lCQWRIbHdaU0I3UVhWa2FXOUNkV1ptWlhKOVhHNGdJQ0FnSUNvZ1FHNWhiV1VnWW5WbVptVnlYRzRnSUNBZ0lDb2dRR1JsWm1GMWJIUWdiblZzYkZ4dUlDQWdJQ0FxSUVCdFpXMWlaWEp2WmlCSGNtRnVkV3hoY2tWdVoybHVaVnh1SUNBZ0lDQXFJRUJwYm5OMFlXNWpaVnh1SUNBZ0lDQXFMMXh1SUNBZ0lIUm9hWE11WW5WbVptVnlJRDBnYjNCMFQzSkVaV1lvYjNCMGFXOXVjeTVpZFdabVpYSXNJRzUxYkd3cE8xeHVYRzRnSUNBZ0x5b3FYRzRnSUNBZ0lDb2dRV0p6YjJ4MWRHVWdaM0poYVc0Z2NHVnlhVzlrSUdsdUlITmxZMXh1SUNBZ0lDQXFYRzRnSUNBZ0lDb2dRSFI1Y0dVZ2UwNTFiV0psY24xY2JpQWdJQ0FnS2lCQWJtRnRaU0J3WlhKcGIyUkJZbk5jYmlBZ0lDQWdLaUJBWkdWbVlYVnNkQ0F3TGpBeFhHNGdJQ0FnSUNvZ1FHMWxiV0psY205bUlFZHlZVzUxYkdGeVJXNW5hVzVsWEc0Z0lDQWdJQ29nUUdsdWMzUmhibU5sWEc0Z0lDQWdJQ292WEc0Z0lDQWdkR2hwY3k1d1pYSnBiMlJCWW5NZ1BTQnZjSFJQY2tSbFppaHZjSFJwYjI1ekxuQmxjbWx2WkVGaWN5d2dNQzR3TVNrN1hHNWNiaUFnSUNBdktpcGNiaUFnSUNBZ0tpQkhjbUZwYmlCd1pYSnBiMlFnY21Wc1lYUnBkbVVnZEc4Z1lXSnpiMngxZEdVZ1pIVnlZWFJwYjI1Y2JpQWdJQ0FnS2x4dUlDQWdJQ0FxSUVCMGVYQmxJSHRPZFcxaVpYSjlYRzRnSUNBZ0lDb2dRRzVoYldVZ2NHVnlhVzlrVW1Wc1hHNGdJQ0FnSUNvZ1FHUmxabUYxYkhRZ01GeHVJQ0FnSUNBcUlFQnRaVzFpWlhKdlppQkhjbUZ1ZFd4aGNrVnVaMmx1WlZ4dUlDQWdJQ0FxSUVCcGJuTjBZVzVqWlZ4dUlDQWdJQ0FxTDF4dUlDQWdJSFJvYVhNdWNHVnlhVzlrVW1Wc0lEMGdiM0IwVDNKRVpXWW9iM0IwYVc5dWN5NXdaWEpwYjJSU1pXd3NJREFwTzF4dVhHNGdJQ0FnTHlvcVhHNGdJQ0FnSUNvZ1FXMXZkWFFnYjJZZ2NtRnVaRzl0SUdkeVlXbHVJSEJsY21sdlpDQjJZWEpwWVhScGIyNGdjbVZzWVhScGRtVWdkRzhnWjNKaGFXNGdjR1Z5YVc5a1hHNGdJQ0FnSUNwY2JpQWdJQ0FnS2lCQWRIbHdaU0I3VG5WdFltVnlmVnh1SUNBZ0lDQXFJRUJ1WVcxbElIQmxjbWx2WkZaaGNseHVJQ0FnSUNBcUlFQmtaV1poZFd4MElEQmNiaUFnSUNBZ0tpQkFiV1Z0WW1WeWIyWWdSM0poYm5Wc1lYSkZibWRwYm1WY2JpQWdJQ0FnS2lCQWFXNXpkR0Z1WTJWY2JpQWdJQ0FnS2k5Y2JpQWdJQ0IwYUdsekxuQmxjbWx2WkZaaGNpQTlJRzl3ZEU5eVJHVm1LRzl3ZEdsdmJuTXVjR1Z5YVc5a1ZtRnlMQ0F3S1R0Y2JseHVJQ0FnSUM4cUtseHVJQ0FnSUNBcUlFMXBibWx0ZFcwZ1ozSmhhVzRnY0dWeWFXOWtYRzRnSUNBZ0lDcGNiaUFnSUNBZ0tpQkFkSGx3WlNCN1RuVnRZbVZ5ZlZ4dUlDQWdJQ0FxSUVCdVlXMWxJSEJsY21sdlpFMXBibHh1SUNBZ0lDQXFJRUJrWldaaGRXeDBJREF1TURBeFhHNGdJQ0FnSUNvZ1FHMWxiV0psY205bUlFZHlZVzUxYkdGeVJXNW5hVzVsWEc0Z0lDQWdJQ29nUUdsdWMzUmhibU5sWEc0Z0lDQWdJQ292WEc0Z0lDQWdkR2hwY3k1d1pYSnBiMlJOYVc0Z1BTQnZjSFJQY2tSbFppaHZjSFJwYjI1ekxuQmxjbWx2WkUxcGJpd2dNQzR3TURFcE8xeHVYRzRnSUNBZ0x5b3FYRzRnSUNBZ0lDb2dSM0poYVc0Z2NHOXphWFJwYjI0Z0tHOXVjMlYwSUhScGJXVWdhVzRnWVhWa2FXOGdZblZtWm1WeUtTQnBiaUJ6WldOY2JpQWdJQ0FnS2x4dUlDQWdJQ0FxSUVCMGVYQmxJSHRPZFcxaVpYSjlYRzRnSUNBZ0lDb2dRRzVoYldVZ2NHOXphWFJwYjI1Y2JpQWdJQ0FnS2lCQVpHVm1ZWFZzZENBd1hHNGdJQ0FnSUNvZ1FHMWxiV0psY205bUlFZHlZVzUxYkdGeVJXNW5hVzVsWEc0Z0lDQWdJQ29nUUdsdWMzUmhibU5sWEc0Z0lDQWdJQ292WEc0Z0lDQWdkR2hwY3k1d2IzTnBkR2x2YmlBOUlHOXdkRTl5UkdWbUtHOXdkR2x2Ym5NdWNHOXphWFJwYjI0c0lEQXBPMXh1WEc0Z0lDQWdMeW9xWEc0Z0lDQWdJQ29nUVcxdmRYUWdiMllnY21GdVpHOXRJR2R5WVdsdUlIQnZjMmwwYVc5dUlIWmhjbWxoZEdsdmJpQnBiaUJ6WldOY2JpQWdJQ0FnS2x4dUlDQWdJQ0FxSUVCMGVYQmxJSHRPZFcxaVpYSjlYRzRnSUNBZ0lDb2dRRzVoYldVZ2NHOXphWFJwYjI1V1lYSmNiaUFnSUNBZ0tpQkFaR1ZtWVhWc2RDQXdMakF3TTF4dUlDQWdJQ0FxSUVCdFpXMWlaWEp2WmlCSGNtRnVkV3hoY2tWdVoybHVaVnh1SUNBZ0lDQXFJRUJwYm5OMFlXNWpaVnh1SUNBZ0lDQXFMMXh1SUNBZ0lIUm9hWE11Y0c5emFYUnBiMjVXWVhJZ1BTQnZjSFJQY2tSbFppaHZjSFJwYjI1ekxuQnZjMmwwYVc5dVZtRnlMQ0F3TGpBd015azdYRzVjYmlBZ0lDQXZLaXBjYmlBZ0lDQWdLaUJCWW5OdmJIVjBaU0JuY21GcGJpQmtkWEpoZEdsdmJpQnBiaUJ6WldOY2JpQWdJQ0FnS2x4dUlDQWdJQ0FxSUVCMGVYQmxJSHRPZFcxaVpYSjlYRzRnSUNBZ0lDb2dRRzVoYldVZ1pIVnlZWFJwYjI1QlluTmNiaUFnSUNBZ0tpQkFaR1ZtWVhWc2RDQXdMakZjYmlBZ0lDQWdLaUJBYldWdFltVnliMllnUjNKaGJuVnNZWEpGYm1kcGJtVmNiaUFnSUNBZ0tpQkFhVzV6ZEdGdVkyVmNiaUFnSUNBZ0tpOWNiaUFnSUNCMGFHbHpMbVIxY21GMGFXOXVRV0p6SUQwZ2IzQjBUM0pFWldZb2IzQjBhVzl1Y3k1a2RYSmhkR2x2YmtGaWN5d2dNQzR4S1RzZ0x5OGdZV0p6YjJ4MWRHVWdaM0poYVc0Z1pIVnlZWFJwYjI1Y2JseHVJQ0FnSUM4cUtseHVJQ0FnSUNBcUlFZHlZV2x1SUdSMWNtRjBhVzl1SUhKbGJHRjBhWFpsSUhSdklHZHlZV2x1SUhCbGNtbHZaQ0FvYjNabGNteGhjQ2xjYmlBZ0lDQWdLbHh1SUNBZ0lDQXFJRUIwZVhCbElIdE9kVzFpWlhKOVhHNGdJQ0FnSUNvZ1FHNWhiV1VnWkhWeVlYUnBiMjVTWld4Y2JpQWdJQ0FnS2lCQVpHVm1ZWFZzZENBd1hHNGdJQ0FnSUNvZ1FHMWxiV0psY205bUlFZHlZVzUxYkdGeVJXNW5hVzVsWEc0Z0lDQWdJQ29nUUdsdWMzUmhibU5sWEc0Z0lDQWdJQ292WEc0Z0lDQWdkR2hwY3k1a2RYSmhkR2x2YmxKbGJDQTlJRzl3ZEU5eVJHVm1LRzl3ZEdsdmJuTXVaSFZ5WVhScGIyNVNaV3dzSURBcE8xeHVYRzRnSUNBZ0x5b3FYRzRnSUNBZ0lDb2dRV0p6YjJ4MWRHVWdZWFIwWVdOcklIUnBiV1VnYVc0Z2MyVmpYRzRnSUNBZ0lDcGNiaUFnSUNBZ0tpQkFkSGx3WlNCN1RuVnRZbVZ5ZlZ4dUlDQWdJQ0FxSUVCdVlXMWxJR0YwZEdGamEwRmljMXh1SUNBZ0lDQXFJRUJrWldaaGRXeDBJREJjYmlBZ0lDQWdLaUJBYldWdFltVnliMllnUjNKaGJuVnNZWEpGYm1kcGJtVmNiaUFnSUNBZ0tpQkFhVzV6ZEdGdVkyVmNiaUFnSUNBZ0tpOWNiaUFnSUNCMGFHbHpMbUYwZEdGamEwRmljeUE5SUc5d2RFOXlSR1ZtS0c5d2RHbHZibk11WVhSMFlXTnJRV0p6TENBd0tUdGNibHh1SUNBZ0lDOHFLbHh1SUNBZ0lDQXFJRUYwZEdGamF5QjBhVzFsSUhKbGJHRjBhWFpsSUhSdklHZHlZV2x1SUdSMWNtRjBhVzl1WEc0Z0lDQWdJQ3BjYmlBZ0lDQWdLaUJBZEhsd1pTQjdUblZ0WW1WeWZWeHVJQ0FnSUNBcUlFQnVZVzFsSUdGMGRHRmphMUpsYkZ4dUlDQWdJQ0FxSUVCa1pXWmhkV3gwSURBdU5WeHVJQ0FnSUNBcUlFQnRaVzFpWlhKdlppQkhjbUZ1ZFd4aGNrVnVaMmx1WlZ4dUlDQWdJQ0FxSUVCcGJuTjBZVzVqWlZ4dUlDQWdJQ0FxTDF4dUlDQWdJSFJvYVhNdVlYUjBZV05yVW1Wc0lEMGdiM0IwVDNKRVpXWW9iM0IwYVc5dWN5NWhkSFJoWTJ0U1pXd3NJREF1TlNrN1hHNWNiaUFnSUNBdktpcGNiaUFnSUNBZ0tpQlRhR0Z3WlNCdlppQmhkSFJoWTJzZ0tDZHNhVzRuSUdadmNpQnNhVzVsWVhJZ2NtRnRjQ3dnSjJWNGNDY2dabTl5SUdWNGNHOXVaVzUwYVdGc0lISmhiWEFwWEc0Z0lDQWdJQ3BjYmlBZ0lDQWdLaUJBZEhsd1pTQjdVM1J5YVc1bmZWeHVJQ0FnSUNBcUlFQnVZVzFsSUdGMGRHRmphMU5vWVhCbFhHNGdJQ0FnSUNvZ1FHUmxabUYxYkhRZ0oyeHBiaWRjYmlBZ0lDQWdLaUJBYldWdFltVnliMllnUjNKaGJuVnNZWEpGYm1kcGJtVmNiaUFnSUNBZ0tpQkFhVzV6ZEdGdVkyVmNiaUFnSUNBZ0tpOWNiaUFnSUNCMGFHbHpMbUYwZEdGamExTm9ZWEJsSUQwZ2IzQjBUM0pFWldZb2IzQjBhVzl1Y3k1aGRIUmhZMnRUYUdGd1pTd2dKMnhwYmljcE8xeHVYRzRnSUNBZ0x5b3FYRzRnSUNBZ0lDb2dRV0p6YjJ4MWRHVWdjbVZzWldGelpTQjBhVzFsSUdsdUlITmxZMXh1SUNBZ0lDQXFYRzRnSUNBZ0lDb2dRSFI1Y0dVZ2UwNTFiV0psY24xY2JpQWdJQ0FnS2lCQWJtRnRaU0J5Wld4bFlYTmxRV0p6WEc0Z0lDQWdJQ29nUUdSbFptRjFiSFFnTUZ4dUlDQWdJQ0FxSUVCdFpXMWlaWEp2WmlCSGNtRnVkV3hoY2tWdVoybHVaVnh1SUNBZ0lDQXFJRUJwYm5OMFlXNWpaVnh1SUNBZ0lDQXFMMXh1SUNBZ0lIUm9hWE11Y21Wc1pXRnpaVUZpY3lBOUlHOXdkRTl5UkdWbUtHOXdkR2x2Ym5NdWNtVnNaV0Z6WlVGaWN5d2dNQ2s3WEc1Y2JpQWdJQ0F2S2lwY2JpQWdJQ0FnS2lCU1pXeGxZWE5sSUhScGJXVWdjbVZzWVhScGRtVWdkRzhnWjNKaGFXNGdaSFZ5WVhScGIyNWNiaUFnSUNBZ0tseHVJQ0FnSUNBcUlFQjBlWEJsSUh0T2RXMWlaWEo5WEc0Z0lDQWdJQ29nUUc1aGJXVWdjbVZzWldGelpWSmxiRnh1SUNBZ0lDQXFJRUJrWldaaGRXeDBJREF1TlZ4dUlDQWdJQ0FxSUVCdFpXMWlaWEp2WmlCSGNtRnVkV3hoY2tWdVoybHVaVnh1SUNBZ0lDQXFJRUJwYm5OMFlXNWpaVnh1SUNBZ0lDQXFMMXh1SUNBZ0lIUm9hWE11Y21Wc1pXRnpaVkpsYkNBOUlHOXdkRTl5UkdWbUtHOXdkR2x2Ym5NdWNtVnNaV0Z6WlZKbGJDd2dNQzQxS1R0Y2JseHVJQ0FnSUM4cUtseHVJQ0FnSUNBcUlGTm9ZWEJsSUc5bUlISmxiR1ZoYzJVZ0tDZHNhVzRuSUdadmNpQnNhVzVsWVhJZ2NtRnRjQ3dnSjJWNGNDY2dabTl5SUdWNGNHOXVaVzUwYVdGc0lISmhiWEFwWEc0Z0lDQWdJQ3BjYmlBZ0lDQWdLaUJBZEhsd1pTQjdVM1J5YVc1bmZWeHVJQ0FnSUNBcUlFQnVZVzFsSUhKbGJHVmhjMlZUYUdGd1pWeHVJQ0FnSUNBcUlFQmtaV1poZFd4MElDZHNhVzRuWEc0Z0lDQWdJQ29nUUcxbGJXSmxjbTltSUVkeVlXNTFiR0Z5Ulc1bmFXNWxYRzRnSUNBZ0lDb2dRR2x1YzNSaGJtTmxYRzRnSUNBZ0lDb3ZYRzRnSUNBZ2RHaHBjeTV5Wld4bFlYTmxVMmhoY0dVZ1BTQnZjSFJQY2tSbFppaHZjSFJwYjI1ekxuSmxiR1ZoYzJWVGFHRndaU3dnSjJ4cGJpY3BPMXh1WEc0Z0lDQWdMeW9xWEc0Z0lDQWdJQ29nVDJabWMyVjBJQ2h6ZEdGeWRDOWxibVFnZG1Gc2RXVXBJR1p2Y2lCbGVIQnZibVZ1ZEdsaGJDQmhkSFJoWTJzdmNtVnNaV0Z6WlZ4dUlDQWdJQ0FxWEc0Z0lDQWdJQ29nUUhSNWNHVWdlMDUxYldKbGNuMWNiaUFnSUNBZ0tpQkFibUZ0WlNCbGVIQlNZVzF3VDJabWMyVjBYRzRnSUNBZ0lDb2dRR1JsWm1GMWJIUWdNQzR3TURBeFhHNGdJQ0FnSUNvZ1FHMWxiV0psY205bUlFZHlZVzUxYkdGeVJXNW5hVzVsWEc0Z0lDQWdJQ29nUUdsdWMzUmhibU5sWEc0Z0lDQWdJQ292WEc0Z0lDQWdkR2hwY3k1bGVIQlNZVzF3VDJabWMyVjBJRDBnYjNCMFQzSkVaV1lvYjNCMGFXOXVjeTVsZUhCU1lXMXdUMlptYzJWMExDQXdMakF3TURFcE8xeHVYRzRnSUNBZ0x5b3FYRzRnSUNBZ0lDb2dSM0poYVc0Z2NtVnpZVzF3YkdsdVp5QnBiaUJqWlc1MFhHNGdJQ0FnSUNwY2JpQWdJQ0FnS2lCQWRIbHdaU0I3VG5WdFltVnlmVnh1SUNBZ0lDQXFJRUJ1WVcxbElISmxjMkZ0Y0d4cGJtZGNiaUFnSUNBZ0tpQkFaR1ZtWVhWc2RDQXdYRzRnSUNBZ0lDb2dRRzFsYldKbGNtOW1JRWR5WVc1MWJHRnlSVzVuYVc1bFhHNGdJQ0FnSUNvZ1FHbHVjM1JoYm1ObFhHNGdJQ0FnSUNvdlhHNGdJQ0FnZEdocGN5NXlaWE5oYlhCc2FXNW5JRDBnYjNCMFQzSkVaV1lvYjNCMGFXOXVjeTV5WlhOaGJYQnNhVzVuTENBd0tUdGNibHh1SUNBZ0lDOHFLbHh1SUNBZ0lDQXFJRUZ0YjNWMElHOW1JSEpoYm1SdmJTQnlaWE5oYlhCc2FXNW5JSFpoY21saGRHbHZiaUJwYmlCalpXNTBYRzRnSUNBZ0lDcGNiaUFnSUNBZ0tpQkFkSGx3WlNCN1RuVnRZbVZ5ZlZ4dUlDQWdJQ0FxSUVCdVlXMWxJSEpsYzJGdGNHeHBibWRXWVhKY2JpQWdJQ0FnS2lCQVpHVm1ZWFZzZENBd1hHNGdJQ0FnSUNvZ1FHMWxiV0psY205bUlFZHlZVzUxYkdGeVJXNW5hVzVsWEc0Z0lDQWdJQ29nUUdsdWMzUmhibU5sWEc0Z0lDQWdJQ292WEc0Z0lDQWdkR2hwY3k1eVpYTmhiWEJzYVc1blZtRnlJRDBnYjNCMFQzSkVaV1lvYjNCMGFXOXVjeTV5WlhOaGJYQnNhVzVuVm1GeUxDQXdLVHRjYmx4dUlDQWdJQzhxS2x4dUlDQWdJQ0FxSUV4cGJtVmhjaUJuWVdsdUlHWmhZM1J2Y2x4dUlDQWdJQ0FxWEc0Z0lDQWdJQ29nUUhSNWNHVWdlMDUxYldKbGNuMWNiaUFnSUNBZ0tpQkFibUZ0WlNCbllXbHVYRzRnSUNBZ0lDb2dRR1JsWm1GMWJIUWdNVnh1SUNBZ0lDQXFJRUJ0WlcxaVpYSnZaaUJIY21GdWRXeGhja1Z1WjJsdVpWeHVJQ0FnSUNBcUlFQnBibk4wWVc1alpWeHVJQ0FnSUNBcUwxeHVJQ0FnSUhSb2FYTXVaMkZwYmlBOUlHOXdkRTl5UkdWbUtHOXdkR2x2Ym5NdVoyRnBiaXdnTVNrN1hHNWNiaUFnSUNBdktpcGNiaUFnSUNBZ0tpQlhhR1YwYUdWeUlIUm9aU0JuY21GcGJpQndiM05wZEdsdmJpQnlaV1psY25NZ2RHOGdkR2hsSUdObGJuUmxjaUJ2WmlCMGFHVWdaM0poYVc0Z0tHOXlJSFJvWlNCaVpXZHBibTVwYm1jcFhHNGdJQ0FnSUNwY2JpQWdJQ0FnS2lCQWRIbHdaU0I3UW05dmJHVmhibjFjYmlBZ0lDQWdLaUJBYm1GdFpTQmpaVzUwWlhKbFpGeHVJQ0FnSUNBcUlFQmtaV1poZFd4MElIUnlkV1ZjYmlBZ0lDQWdLaUJBYldWdFltVnliMllnUjNKaGJuVnNZWEpGYm1kcGJtVmNiaUFnSUNBZ0tpQkFhVzV6ZEdGdVkyVmNiaUFnSUNBZ0tpOWNiaUFnSUNCMGFHbHpMbU5sYm5SbGNtVmtJRDBnYjNCMFQzSkVaV1lvYjNCMGFXOXVjeTVqWlc1MFpYSmxaQ3dnZEhKMVpTazdYRzVjYmlBZ0lDQXZLaXBjYmlBZ0lDQWdLaUJYYUdWMGFHVnlJSFJvWlNCaGRXUnBieUJpZFdabVpYSWdZVzVrSUdkeVlXbHVJSEJ2YzJsMGFXOXVJR0Z5WlNCamIyNXphV1JsY21Wa0lHRnpJR041WTJ4cFkxeHVJQ0FnSUNBcVhHNGdJQ0FnSUNvZ1FIUjVjR1VnZTBKdmIyeGxZVzU5WEc0Z0lDQWdJQ29nUUc1aGJXVWdZM2xqYkdsalhHNGdJQ0FnSUNvZ1FHUmxabUYxYkhRZ1ptRnNjMlZjYmlBZ0lDQWdLaUJBYldWdFltVnliMllnUjNKaGJuVnNZWEpGYm1kcGJtVmNiaUFnSUNBZ0tpQkFhVzV6ZEdGdVkyVmNiaUFnSUNBZ0tpOWNiaUFnSUNCMGFHbHpMbU41WTJ4cFl5QTlJRzl3ZEU5eVJHVm1LRzl3ZEdsdmJuTXVZM2xqYkdsakxDQm1ZV3h6WlNrN1hHNWNiaUFnSUNBdktpcGNiaUFnSUNBZ0tpQlFiM0owYVc5dUlHRjBJSFJvWlNCbGJtUWdiMllnZEdobElHRjFaR2x2SUdKMVptWmxjaUIwYUdGMElHaGhjeUJpWldWdUlHTnZjR2xsWkNCbWNtOXRJSFJvWlZ4dUlDQWdJQ0FxSUdKbFoybHVibWx1WnlCMGJ5QmhjM04xY21VZ1kzbGpiR2xqSUdKbGFHRjJhVzl5WEc0Z0lDQWdJQ3BjYmlBZ0lDQWdLaUJBZEhsd1pTQjdUblZ0WW1WeWZWeHVJQ0FnSUNBcUlFQnVZVzFsSUhkeVlYQkJjbTkxYm1SRmVIUmxibk5wYjI1Y2JpQWdJQ0FnS2lCQVpHVm1ZWFZzZENBd1hHNGdJQ0FnSUNvZ1FHMWxiV0psY205bUlFZHlZVzUxYkdGeVJXNW5hVzVsWEc0Z0lDQWdJQ29nUUdsdWMzUmhibU5sWEc0Z0lDQWdJQ292WEc0Z0lDQWdkR2hwY3k1M2NtRndRWEp2ZFc1a1JYaDBaVzV6YVc5dUlEMGdiM0IwVDNKRVpXWW9iM0IwYVc5dWN5NTNjbUZ3UVhKdmRXNWtSWGgwWlc1emFXOXVMQ0F3S1R0Y2JseHVJQ0FnSUhSb2FYTXViM1YwY0hWMFRtOWtaU0E5SUhSb2FYTXVZWFZrYVc5RGIyNTBaWGgwTG1OeVpXRjBaVWRoYVc0b0tUdGNiaUFnZlZ4dVhHNGdJQzhxS2x4dUlDQWdLaUJIWlhRZ1luVm1abVZ5SUdSMWNtRjBhVzl1SUNobGVHTnNkV1JwYm1jZ2QzSmhjRUZ5YjNWdVpFVjRkR1Z1YzJsdmJpbGNiaUFnSUNwY2JpQWdJQ29nUUhSNWNHVWdlMDUxYldKbGNuMWNiaUFnSUNvZ1FHNWhiV1VnWW5WbVptVnlSSFZ5WVhScGIyNWNiaUFnSUNvZ1FHMWxiV0psY205bUlFZHlZVzUxYkdGeVJXNW5hVzVsWEc0Z0lDQXFJRUJwYm5OMFlXNWpaVnh1SUNBZ0tpQkFjbVZoWkc5dWJIbGNiaUFnSUNvdlhHNGdJR2RsZENCaWRXWm1aWEpFZFhKaGRHbHZiaWdwSUh0Y2JpQWdJQ0JwWmlBb2RHaHBjeTVpZFdabVpYSXBJSHRjYmlBZ0lDQWdJSFpoY2lCaWRXWm1aWEpFZFhKaGRHbHZiaUE5SUhSb2FYTXVZblZtWm1WeUxtUjFjbUYwYVc5dU8xeHVYRzRnSUNBZ0lDQnBaaUFvZEdocGN5NTNjbUZ3UVhKdmRXNWtSWGgwWlc1emFXOXVLVnh1SUNBZ0lDQWdJQ0JpZFdabVpYSkVkWEpoZEdsdmJpQXRQU0IwYUdsekxuZHlZWEJCY205MWJtUkZlSFJsYm5OcGIyNDdYRzVjYmlBZ0lDQWdJSEpsZEhWeWJpQmlkV1ptWlhKRWRYSmhkR2x2Ymp0Y2JpQWdJQ0I5WEc1Y2JpQWdJQ0J5WlhSMWNtNGdNRHRjYmlBZ2ZWeHVYRzRnSUM4cUtseHVJQ0FnS2lCRGRYSnlaVzUwSUhCdmMybDBhVzl1WEc0Z0lDQXFYRzRnSUNBcUlFQjBlWEJsSUh0T2RXMWlaWEo5WEc0Z0lDQXFJRUJ1WVcxbElHTjFjbkpsYm5SUWIzTnBkR2x2Ymx4dUlDQWdLaUJBYldWdFltVnliMllnUjNKaGJuVnNZWEpGYm1kcGJtVmNiaUFnSUNvZ1FHbHVjM1JoYm1ObFhHNGdJQ0FxSUVCeVpXRmtiMjVzZVZ4dUlDQWdLaTljYmlBZ1oyVjBJR04xY25KbGJuUlFiM05wZEdsdmJpZ3BJSHRjYmlBZ0lDQjJZWElnYldGemRHVnlJRDBnZEdocGN5NXRZWE4wWlhJN1hHNWNiaUFnSUNCcFppQW9iV0Z6ZEdWeUlDWW1JRzFoYzNSbGNpNWpkWEp5Wlc1MFVHOXphWFJwYjI0Z0lUMDlJSFZ1WkdWbWFXNWxaQ2xjYmlBZ0lDQWdJSEpsZEhWeWJpQnRZWE4wWlhJdVkzVnljbVZ1ZEZCdmMybDBhVzl1TzF4dVhHNGdJQ0FnY21WMGRYSnVJSFJvYVhNdWNHOXphWFJwYjI0N1hHNGdJSDFjYmx4dUlDQmhaSFpoYm1ObFZHbHRaU2gwYVcxbEtTQjdYRzRnSUNBZ2RHbHRaU0E5SUUxaGRHZ3ViV0Y0S0hScGJXVXNJSFJvYVhNdVlYVmthVzlEYjI1MFpYaDBMbU4xY25KbGJuUlVhVzFsS1R0Y2JpQWdJQ0J5WlhSMWNtNGdkR2x0WlNBcklIUm9hWE11ZEhKcFoyZGxjaWgwYVcxbEtUdGNiaUFnZlZ4dVhHNGdJQzhxS2x4dUlDQWdLaUJVY21sbloyVnlJR0VnWjNKaGFXNHVJRlJvYVhNZ1puVnVZM1JwYjI0Z1kyRnVJR0psSUdOaGJHeGxaQ0JoZENCaGJua2dkR2x0WlNBb2QyaGxkR2hsY2lCMGFHVmNiaUFnSUNvZ1pXNW5hVzVsSUdseklITmphR1ZrZFd4bFpDQnZjaUJ1YjNRcElIUnZJR2RsYm1WeVlYUmxJR0VnYzJsdVoyeGxJR2R5WVdsdUlHRmpZMjl5WkdsdVp5QjBieUIwYUdWY2JpQWdJQ29nWTNWeWNtVnVkQ0JuY21GcGJpQndZWEpoYldWMFpYSnpMbHh1SUNBZ0tseHVJQ0FnS2lCQWNHRnlZVzBnZTA1MWJXSmxjbjBnZEdsdFpTQXRJR2R5WVdsdUlITjViblJvWlhOcGN5QmhkV1JwYnlCMGFXMWxYRzRnSUNBcUlFQnlaWFIxY200Z2UwNTFiV0psY24wZ0xTQndaWEpwYjJRZ2RHOGdibVY0ZENCbmNtRnBibHh1SUNBZ0tpOWNiaUFnZEhKcFoyZGxjaWgwYVcxbEtTQjdYRzRnSUNBZ2RtRnlJR0YxWkdsdlEyOXVkR1Y0ZENBOUlIUm9hWE11WVhWa2FXOURiMjUwWlhoME8xeHVJQ0FnSUhaaGNpQm5jbUZwYmxScGJXVWdQU0IwYVcxbElIeDhJR0YxWkdsdlEyOXVkR1Y0ZEM1amRYSnlaVzUwVkdsdFpUdGNiaUFnSUNCMllYSWdaM0poYVc1UVpYSnBiMlFnUFNCMGFHbHpMbkJsY21sdlpFRmljenRjYmlBZ0lDQjJZWElnWjNKaGFXNVFiM05wZEdsdmJpQTlJSFJvYVhNdVkzVnljbVZ1ZEZCdmMybDBhVzl1TzF4dUlDQWdJSFpoY2lCbmNtRnBia1IxY21GMGFXOXVJRDBnZEdocGN5NWtkWEpoZEdsdmJrRmljenRjYmx4dUlDQWdJR2xtSUNoMGFHbHpMbUoxWm1abGNpa2dlMXh1SUNBZ0lDQWdkbUZ5SUhKbGMyRnRjR3hwYm1kU1lYUmxJRDBnTVM0d08xeHVYRzRnSUNBZ0lDQXZMeUJqWVd4amRXeGhkR1VnY21WellXMXdiR2x1WjF4dUlDQWdJQ0FnYVdZZ0tIUm9hWE11Y21WellXMXdiR2x1WnlBaFBUMGdNQ0I4ZkNCMGFHbHpMbkpsYzJGdGNHeHBibWRXWVhJZ1BpQXdLU0I3WEc0Z0lDQWdJQ0FnSUhaaGNpQnlZVzVrYjIxU1pYTmhiWEJzYVc1bklEMGdLRTFoZEdndWNtRnVaRzl0S0NrZ0xTQXdMalVwSUNvZ01pNHdJQ29nZEdocGN5NXlaWE5oYlhCc2FXNW5WbUZ5TzF4dUlDQWdJQ0FnSUNCeVpYTmhiWEJzYVc1blVtRjBaU0E5SUUxaGRHZ3VjRzkzS0RJdU1Dd2dLSFJvYVhNdWNtVnpZVzF3YkdsdVp5QXJJSEpoYm1SdmJWSmxjMkZ0Y0d4cGJtY3BJQzhnTVRJd01DNHdLVHRjYmlBZ0lDQWdJSDFjYmx4dUlDQWdJQ0FnWjNKaGFXNVFaWEpwYjJRZ0t6MGdkR2hwY3k1d1pYSnBiMlJTWld3Z0tpQm5jbUZwYmtSMWNtRjBhVzl1TzF4dUlDQWdJQ0FnWjNKaGFXNUVkWEpoZEdsdmJpQXJQU0IwYUdsekxtUjFjbUYwYVc5dVVtVnNJQ29nWjNKaGFXNVFaWEpwYjJRN1hHNWNiaUFnSUNBZ0lDOHZJR2R5WVdsdUlIQmxjbWx2WkNCeVlXNWtiMjRnZG1GeWFXRjBhVzl1WEc0Z0lDQWdJQ0JwWmlBb2RHaHBjeTV3WlhKcGIyUldZWElnUGlBd0xqQXBYRzRnSUNBZ0lDQWdJR2R5WVdsdVVHVnlhVzlrSUNzOUlESXVNQ0FxSUNoTllYUm9MbkpoYm1SdmJTZ3BJQzBnTUM0MUtTQXFJSFJvYVhNdWNHVnlhVzlrVm1GeUlDb2daM0poYVc1UVpYSnBiMlE3WEc1Y2JpQWdJQ0FnSUM4dklHTmxiblJsY2lCbmNtRnBibHh1SUNBZ0lDQWdhV1lnS0hSb2FYTXVZMlZ1ZEdWeVpXUXBYRzRnSUNBZ0lDQWdJR2R5WVdsdVVHOXphWFJwYjI0Z0xUMGdNQzQxSUNvZ1ozSmhhVzVFZFhKaGRHbHZianRjYmx4dUlDQWdJQ0FnTHk4Z2NtRnVaRzl0YVhwbElHZHlZV2x1SUhCdmMybDBhVzl1WEc0Z0lDQWdJQ0JwWmlBb2RHaHBjeTV3YjNOcGRHbHZibFpoY2lBK0lEQXBYRzRnSUNBZ0lDQWdJR2R5WVdsdVVHOXphWFJwYjI0Z0t6MGdLREl1TUNBcUlFMWhkR2d1Y21GdVpHOXRLQ2tnTFNBeEtTQXFJSFJvYVhNdWNHOXphWFJwYjI1V1lYSTdYRzVjYmlBZ0lDQWdJSFpoY2lCaWRXWm1aWEpFZFhKaGRHbHZiaUE5SUhSb2FYTXVZblZtWm1WeVJIVnlZWFJwYjI0N1hHNWNiaUFnSUNBZ0lDOHZJSGR5WVhBZ2IzSWdZMnhwY0NCbmNtRnBiaUJ3YjNOcGRHbHZiaUJoYm1RZ1pIVnlZWFJwYjI0Z2FXNTBieUJpZFdabVpYSWdaSFZ5WVhScGIyNWNiaUFnSUNBZ0lHbG1JQ2huY21GcGJsQnZjMmwwYVc5dUlEd2dNQ0I4ZkNCbmNtRnBibEJ2YzJsMGFXOXVJRDQ5SUdKMVptWmxja1IxY21GMGFXOXVLU0I3WEc0Z0lDQWdJQ0FnSUdsbUlDaDBhR2x6TG1ONVkyeHBZeWtnZTF4dUlDQWdJQ0FnSUNBZ0lIWmhjaUJqZVdOc1pYTWdQU0JuY21GcGJsQnZjMmwwYVc5dUlDOGdZblZtWm1WeVJIVnlZWFJwYjI0N1hHNGdJQ0FnSUNBZ0lDQWdaM0poYVc1UWIzTnBkR2x2YmlBOUlDaGplV05zWlhNZ0xTQk5ZWFJvTG1ac2IyOXlLR041WTJ4bGN5a3BJQ29nWW5WbVptVnlSSFZ5WVhScGIyNDdYRzVjYmlBZ0lDQWdJQ0FnSUNCcFppQW9aM0poYVc1UWIzTnBkR2x2YmlBcklHZHlZV2x1UkhWeVlYUnBiMjRnUGlCMGFHbHpMbUoxWm1abGNpNWtkWEpoZEdsdmJpbGNiaUFnSUNBZ0lDQWdJQ0FnSUdkeVlXbHVSSFZ5WVhScGIyNGdQU0IwYUdsekxtSjFabVpsY2k1a2RYSmhkR2x2YmlBdElHZHlZV2x1VUc5emFYUnBiMjQ3WEc0Z0lDQWdJQ0FnSUgwZ1pXeHpaU0I3WEc0Z0lDQWdJQ0FnSUNBZ2FXWWdLR2R5WVdsdVVHOXphWFJwYjI0Z1BDQXdLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQm5jbUZwYmxScGJXVWdMVDBnWjNKaGFXNVFiM05wZEdsdmJqdGNiaUFnSUNBZ0lDQWdJQ0FnSUdkeVlXbHVSSFZ5WVhScGIyNGdLejBnWjNKaGFXNVFiM05wZEdsdmJqdGNiaUFnSUNBZ0lDQWdJQ0FnSUdkeVlXbHVVRzl6YVhScGIyNGdQU0F3TzF4dUlDQWdJQ0FnSUNBZ0lIMWNibHh1SUNBZ0lDQWdJQ0FnSUdsbUlDaG5jbUZwYmxCdmMybDBhVzl1SUNzZ1ozSmhhVzVFZFhKaGRHbHZiaUErSUdKMVptWmxja1IxY21GMGFXOXVLVnh1SUNBZ0lDQWdJQ0FnSUNBZ1ozSmhhVzVFZFhKaGRHbHZiaUE5SUdKMVptWmxja1IxY21GMGFXOXVJQzBnWjNKaGFXNVFiM05wZEdsdmJqdGNiaUFnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdmVnh1WEc0Z0lDQWdJQ0F2THlCdFlXdGxJR2R5WVdsdVhHNGdJQ0FnSUNCcFppQW9kR2hwY3k1bllXbHVJRDRnTUNBbUppQm5jbUZwYmtSMWNtRjBhVzl1SUQ0OUlEQXVNREF4S1NCN1hHNGdJQ0FnSUNBZ0lDOHZJRzFoYTJVZ1ozSmhhVzRnWlc1MlpXeHZjR1ZjYmlBZ0lDQWdJQ0FnZG1GeUlHVnVkbVZzYjNCbElEMGdZWFZrYVc5RGIyNTBaWGgwTG1OeVpXRjBaVWRoYVc0b0tUdGNiaUFnSUNBZ0lDQWdkbUZ5SUdGMGRHRmpheUE5SUhSb2FYTXVZWFIwWVdOclFXSnpJQ3NnZEdocGN5NWhkSFJoWTJ0U1pXd2dLaUJuY21GcGJrUjFjbUYwYVc5dU8xeHVJQ0FnSUNBZ0lDQjJZWElnY21Wc1pXRnpaU0E5SUhSb2FYTXVjbVZzWldGelpVRmljeUFySUhSb2FYTXVjbVZzWldGelpWSmxiQ0FxSUdkeVlXbHVSSFZ5WVhScGIyNDdYRzVjYmlBZ0lDQWdJQ0FnYVdZZ0tHRjBkR0ZqYXlBcklISmxiR1ZoYzJVZ1BpQm5jbUZwYmtSMWNtRjBhVzl1S1NCN1hHNGdJQ0FnSUNBZ0lDQWdkbUZ5SUdaaFkzUnZjaUE5SUdkeVlXbHVSSFZ5WVhScGIyNGdMeUFvWVhSMFlXTnJJQ3NnY21Wc1pXRnpaU2s3WEc0Z0lDQWdJQ0FnSUNBZ1lYUjBZV05ySUNvOUlHWmhZM1J2Y2p0Y2JpQWdJQ0FnSUNBZ0lDQnlaV3hsWVhObElDbzlJR1poWTNSdmNqdGNiaUFnSUNBZ0lDQWdmVnh1WEc0Z0lDQWdJQ0FnSUhaaGNpQmhkSFJoWTJ0RmJtUlVhVzFsSUQwZ1ozSmhhVzVVYVcxbElDc2dZWFIwWVdOck8xeHVJQ0FnSUNBZ0lDQjJZWElnWjNKaGFXNUZibVJVYVcxbElEMGdaM0poYVc1VWFXMWxJQ3NnWjNKaGFXNUVkWEpoZEdsdmJpQXZJSEpsYzJGdGNHeHBibWRTWVhSbE8xeHVJQ0FnSUNBZ0lDQjJZWElnY21Wc1pXRnpaVk4wWVhKMFZHbHRaU0E5SUdkeVlXbHVSVzVrVkdsdFpTQXRJSEpsYkdWaGMyVTdYRzVjYmlBZ0lDQWdJQ0FnWlc1MlpXeHZjR1V1WjJGcGJpNTJZV3gxWlNBOUlEQTdYRzVjYmlBZ0lDQWdJQ0FnYVdZZ0tIUm9hWE11WVhSMFlXTnJVMmhoY0dVZ1BUMDlJQ2RzYVc0bktTQjdYRzRnSUNBZ0lDQWdJQ0FnWlc1MlpXeHZjR1V1WjJGcGJpNXpaWFJXWVd4MVpVRjBWR2x0WlNnd0xqQXNJR2R5WVdsdVZHbHRaU2s3WEc0Z0lDQWdJQ0FnSUNBZ1pXNTJaV3h2Y0dVdVoyRnBiaTVzYVc1bFlYSlNZVzF3Vkc5V1lXeDFaVUYwVkdsdFpTaDBhR2x6TG1kaGFXNHNJR0YwZEdGamEwVnVaRlJwYldVcE8xeHVJQ0FnSUNBZ0lDQjlJR1ZzYzJVZ2UxeHVJQ0FnSUNBZ0lDQWdJR1Z1ZG1Wc2IzQmxMbWRoYVc0dWMyVjBWbUZzZFdWQmRGUnBiV1VvZEdocGN5NWxlSEJTWVcxd1QyWm1jMlYwTENCbmNtRnBibFJwYldVcE8xeHVJQ0FnSUNBZ0lDQWdJR1Z1ZG1Wc2IzQmxMbWRoYVc0dVpYaHdiMjVsYm5ScFlXeFNZVzF3Vkc5V1lXeDFaVUYwVkdsdFpTaDBhR2x6TG1kaGFXNHNJR0YwZEdGamEwVnVaRlJwYldVcE8xeHVJQ0FnSUNBZ0lDQjlYRzVjYmlBZ0lDQWdJQ0FnYVdZZ0tISmxiR1ZoYzJWVGRHRnlkRlJwYldVZ1BpQmhkSFJoWTJ0RmJtUlVhVzFsS1Z4dUlDQWdJQ0FnSUNBZ0lHVnVkbVZzYjNCbExtZGhhVzR1YzJWMFZtRnNkV1ZCZEZScGJXVW9kR2hwY3k1bllXbHVMQ0J5Wld4bFlYTmxVM1JoY25SVWFXMWxLVHRjYmx4dUlDQWdJQ0FnSUNCcFppQW9kR2hwY3k1eVpXeGxZWE5sVTJoaGNHVWdQVDA5SUNkc2FXNG5LU0I3WEc0Z0lDQWdJQ0FnSUNBZ1pXNTJaV3h2Y0dVdVoyRnBiaTVzYVc1bFlYSlNZVzF3Vkc5V1lXeDFaVUYwVkdsdFpTZ3dMakFzSUdkeVlXbHVSVzVrVkdsdFpTazdYRzRnSUNBZ0lDQWdJSDBnWld4elpTQjdYRzRnSUNBZ0lDQWdJQ0FnWlc1MlpXeHZjR1V1WjJGcGJpNWxlSEJ2Ym1WdWRHbGhiRkpoYlhCVWIxWmhiSFZsUVhSVWFXMWxLSFJvYVhNdVpYaHdVbUZ0Y0U5bVpuTmxkQ3dnWjNKaGFXNUZibVJVYVcxbEtUdGNiaUFnSUNBZ0lDQWdmVnh1WEc0Z0lDQWdJQ0FnSUdWdWRtVnNiM0JsTG1OdmJtNWxZM1FvZEdocGN5NXZkWFJ3ZFhST2IyUmxLVHRjYmx4dUlDQWdJQ0FnSUNBdkx5QnRZV3RsSUhOdmRYSmpaVnh1SUNBZ0lDQWdJQ0IyWVhJZ2MyOTFjbU5sSUQwZ1lYVmthVzlEYjI1MFpYaDBMbU55WldGMFpVSjFabVpsY2xOdmRYSmpaU2dwTzF4dVhHNGdJQ0FnSUNBZ0lITnZkWEpqWlM1aWRXWm1aWElnUFNCMGFHbHpMbUoxWm1abGNqdGNiaUFnSUNBZ0lDQWdjMjkxY21ObExuQnNZWGxpWVdOclVtRjBaUzUyWVd4MVpTQTlJSEpsYzJGdGNHeHBibWRTWVhSbE8xeHVJQ0FnSUNBZ0lDQnpiM1Z5WTJVdVkyOXVibVZqZENobGJuWmxiRzl3WlNrN1hHNWNiaUFnSUNBZ0lDQWdjMjkxY21ObExuTjBZWEowS0dkeVlXbHVWR2x0WlN3Z1ozSmhhVzVRYjNOcGRHbHZiaWs3WEc0Z0lDQWdJQ0FnSUhOdmRYSmpaUzV6ZEc5d0tHZHlZV2x1Ulc1a1ZHbHRaU2s3WEc0Z0lDQWdJQ0I5WEc0Z0lDQWdmVnh1WEc0Z0lDQWdjbVYwZFhKdUlFMWhkR2d1YldGNEtIUm9hWE11Y0dWeWFXOWtUV2x1TENCbmNtRnBibEJsY21sdlpDazdYRzRnSUgxY2JuMWNibHh1Wlhod2IzSjBJR1JsWm1GMWJIUWdSM0poYm5Wc1lYSkZibWRwYm1VN1hHNGlYWDA9IiwiJ3VzZSBzdHJpY3QnO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuXG52YXIgX2dldFByb3RvdHlwZU9mID0gcmVxdWlyZSgnYmFiZWwtcnVudGltZS9jb3JlLWpzL29iamVjdC9nZXQtcHJvdG90eXBlLW9mJyk7XG5cbnZhciBfZ2V0UHJvdG90eXBlT2YyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfZ2V0UHJvdG90eXBlT2YpO1xuXG52YXIgX2NsYXNzQ2FsbENoZWNrMiA9IHJlcXVpcmUoJ2JhYmVsLXJ1bnRpbWUvaGVscGVycy9jbGFzc0NhbGxDaGVjaycpO1xuXG52YXIgX2NsYXNzQ2FsbENoZWNrMyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2NsYXNzQ2FsbENoZWNrMik7XG5cbnZhciBfY3JlYXRlQ2xhc3MyID0gcmVxdWlyZSgnYmFiZWwtcnVudGltZS9oZWxwZXJzL2NyZWF0ZUNsYXNzJyk7XG5cbnZhciBfY3JlYXRlQ2xhc3MzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfY3JlYXRlQ2xhc3MyKTtcblxudmFyIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuMiA9IHJlcXVpcmUoJ2JhYmVsLXJ1bnRpbWUvaGVscGVycy9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuJyk7XG5cbnZhciBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybjMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuMik7XG5cbnZhciBfaW5oZXJpdHMyID0gcmVxdWlyZSgnYmFiZWwtcnVudGltZS9oZWxwZXJzL2luaGVyaXRzJyk7XG5cbnZhciBfaW5oZXJpdHMzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfaW5oZXJpdHMyKTtcblxudmFyIF9BdWRpb1RpbWVFbmdpbmUyID0gcmVxdWlyZSgnLi4vY29yZS9BdWRpb1RpbWVFbmdpbmUnKTtcblxudmFyIF9BdWRpb1RpbWVFbmdpbmUzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfQXVkaW9UaW1lRW5naW5lMik7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cbmZ1bmN0aW9uIG9wdE9yRGVmKG9wdCwgZGVmKSB7XG4gIGlmIChvcHQgIT09IHVuZGVmaW5lZCkgcmV0dXJuIG9wdDtcblxuICByZXR1cm4gZGVmO1xufVxuXG4vKipcbiAqIE1ldHJvbm9tZSBhdWRpbyBlbmdpbmUuIEl0IGV4dGVuZHMgVGltZSBFbmdpbmUgYXMgYSB0cmFuc3BvcnRlZCBpbnRlcmZhY2UuXG4gKiBbZXhhbXBsZV17QGxpbmsgaHR0cHM6Ly9yYXdnaXQuY29tL3dhdmVzanMvd2F2ZXMtYXVkaW8vbWFzdGVyL2V4YW1wbGVzL21ldHJvbm9tZS9pbmRleC5odG1sfVxuICpcbiAqIEBleHRlbmRzIEF1ZGlvVGltZUVuZ2luZVxuICogQGV4YW1wbGVcbiAqIGltcG9ydCAqIGFzIGF1ZGlvIGZyb20gJ3dhdmVzLWF1ZGlvJztcbiAqIGNvbnN0IHNjaGVkdWxlciA9IGF1ZGlvLmdldFNjaGVkdWxlcigpO1xuICogY29uc3QgbWV0cm9ub21lID0gbmV3IGF1ZGlvLk1ldHJvbm9tZSh7cGVyaW9kOiAwLjMzM30pO1xuICpcbiAqIHNjaGVkdWxlci5hZGQobWV0cm9ub21lKTtcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gW29wdGlvbnM9e31dIC0gRGVmYXVsdCBvcHRpb25zXG4gKiBAcGFyYW0ge051bWJlcn0gW29wdGlvbnMucGVyaW9kPTFdIC0gTWV0cm9ub21lIHBlcmlvZFxuICogQHBhcmFtIHtOdW1iZXJ9IFtvcHRpb25zLmNsaWNrRnJlcT02MDBdIC0gTWV0cm9ub21lIGNsaWNrIGZyZXF1ZW5jeVxuICogQHBhcmFtIHtOdW1iZXJ9IFtvcHRpb25zLmNsaWNrQXR0YWNrPTAuMDAyXSAtIE1ldHJvbm9tZSBjbGljayBhdHRhY2sgdGltZVxuICogQHBhcmFtIHtOdW1iZXJ9IFtvcHRpb25zLmNsaWNrUmVsZWFzZT0wLjA5OF0gLSBNZXRyb25vbWUgY2xpY2sgcmVsZWFzZSB0aW1lXG4gKiBAcGFyYW0ge051bWJlcn0gW29wdGlvbnMuZ2Fpbj0xXSAtIEdhaW5cbiAqL1xuXG52YXIgTWV0cm9ub21lID0gZnVuY3Rpb24gKF9BdWRpb1RpbWVFbmdpbmUpIHtcbiAgKDAsIF9pbmhlcml0czMuZGVmYXVsdCkoTWV0cm9ub21lLCBfQXVkaW9UaW1lRW5naW5lKTtcblxuICBmdW5jdGlvbiBNZXRyb25vbWUoKSB7XG4gICAgdmFyIG9wdGlvbnMgPSBhcmd1bWVudHMubGVuZ3RoID4gMCAmJiBhcmd1bWVudHNbMF0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1swXSA6IHt9O1xuICAgICgwLCBfY2xhc3NDYWxsQ2hlY2szLmRlZmF1bHQpKHRoaXMsIE1ldHJvbm9tZSk7XG5cbiAgICAvKipcbiAgICAgKiBNZXRyb25vbWUgcGVyaW9kXG4gICAgICogQHR5cGUge051bWJlcn1cbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqL1xuICAgIHZhciBfdGhpcyA9ICgwLCBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybjMuZGVmYXVsdCkodGhpcywgKE1ldHJvbm9tZS5fX3Byb3RvX18gfHwgKDAsIF9nZXRQcm90b3R5cGVPZjIuZGVmYXVsdCkoTWV0cm9ub21lKSkuY2FsbCh0aGlzLCBvcHRpb25zLmF1ZGlvQ29udGV4dCkpO1xuXG4gICAgX3RoaXMuX19wZXJpb2QgPSBvcHRPckRlZihvcHRpb25zLnBlcmlvZCwgMSk7XG5cbiAgICAvKipcbiAgICAgKiBNZXRyb25vbWUgY2xpY2sgZnJlcXVlbmN5XG4gICAgICpcbiAgICAgKiBAdHlwZSB7TnVtYmVyfVxuICAgICAqIEBtZW1iZXJvZiBNZXRyb25vbWVcbiAgICAgKiBAbmFtZSBjbGlja0ZyZXFcbiAgICAgKiBAaW5zdGFuY2VcbiAgICAgKi9cbiAgICBfdGhpcy5jbGlja0ZyZXEgPSBvcHRPckRlZihvcHRpb25zLmNsaWNrRnJlcSwgNjAwKTtcblxuICAgIC8qKlxuICAgICAqIE1ldHJvbm9tZSBjbGljayBhdHRhY2sgdGltZVxuICAgICAqXG4gICAgICogQHR5cGUge051bWJlcn1cbiAgICAgKiBAbWVtYmVyb2YgTWV0cm9ub21lXG4gICAgICogQG5hbWUgY2xpY2tBdHRhY2tcbiAgICAgKiBAaW5zdGFuY2VcbiAgICAgKi9cbiAgICBfdGhpcy5jbGlja0F0dGFjayA9IG9wdE9yRGVmKG9wdGlvbnMuY2xpY2tBdHRhY2ssIDAuMDAyKTtcblxuICAgIC8qKlxuICAgICAqIE1ldHJvbm9tZSBjbGljayByZWxlYXNlIHRpbWVcbiAgICAgKlxuICAgICAqIEB0eXBlIHtOdW1iZXJ9XG4gICAgICogQG1lbWJlcm9mIE1ldHJvbm9tZVxuICAgICAqIEBuYW1lIGNsaWNrUmVsZWFzZVxuICAgICAqIEBpbnN0YW5jZVxuICAgICAqL1xuICAgIF90aGlzLmNsaWNrUmVsZWFzZSA9IG9wdE9yRGVmKG9wdGlvbnMuY2xpY2tSZWxlYXNlLCAwLjA5OCk7XG5cbiAgICBfdGhpcy5fX2xhc3RUaW1lID0gMDtcbiAgICBfdGhpcy5fX3BoYXNlID0gMDtcblxuICAgIF90aGlzLl9fZ2Fpbk5vZGUgPSBfdGhpcy5hdWRpb0NvbnRleHQuY3JlYXRlR2FpbigpO1xuICAgIF90aGlzLl9fZ2Fpbk5vZGUuZ2Fpbi52YWx1ZSA9IG9wdE9yRGVmKG9wdGlvbnMuZ2FpbiwgMSk7XG5cbiAgICBfdGhpcy5vdXRwdXROb2RlID0gX3RoaXMuX19nYWluTm9kZTtcbiAgICByZXR1cm4gX3RoaXM7XG4gIH1cblxuICAvLyBUaW1lRW5naW5lIG1ldGhvZCAoc2NoZWR1bGVkIGludGVyZmFjZSlcblxuXG4gICgwLCBfY3JlYXRlQ2xhc3MzLmRlZmF1bHQpKE1ldHJvbm9tZSwgW3tcbiAgICBrZXk6ICdhZHZhbmNlVGltZScsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGFkdmFuY2VUaW1lKHRpbWUpIHtcbiAgICAgIHRoaXMudHJpZ2dlcih0aW1lKTtcbiAgICAgIHRoaXMuX19sYXN0VGltZSA9IHRpbWU7XG4gICAgICByZXR1cm4gdGltZSArIHRoaXMuX19wZXJpb2Q7XG4gICAgfVxuXG4gICAgLy8gVGltZUVuZ2luZSBtZXRob2QgKHRyYW5zcG9ydGVkIGludGVyZmFjZSlcblxuICB9LCB7XG4gICAga2V5OiAnc3luY1Bvc2l0aW9uJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gc3luY1Bvc2l0aW9uKHRpbWUsIHBvc2l0aW9uLCBzcGVlZCkge1xuICAgICAgaWYgKHRoaXMuX19wZXJpb2QgPiAwKSB7XG4gICAgICAgIHZhciBuZXh0UG9zaXRpb24gPSAoTWF0aC5mbG9vcihwb3NpdGlvbiAvIHRoaXMuX19wZXJpb2QpICsgdGhpcy5fX3BoYXNlKSAqIHRoaXMuX19wZXJpb2Q7XG5cbiAgICAgICAgaWYgKHNwZWVkID4gMCAmJiBuZXh0UG9zaXRpb24gPCBwb3NpdGlvbikgbmV4dFBvc2l0aW9uICs9IHRoaXMuX19wZXJpb2Q7ZWxzZSBpZiAoc3BlZWQgPCAwICYmIG5leHRQb3NpdGlvbiA+IHBvc2l0aW9uKSBuZXh0UG9zaXRpb24gLT0gdGhpcy5fX3BlcmlvZDtcblxuICAgICAgICByZXR1cm4gbmV4dFBvc2l0aW9uO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gSW5maW5pdHkgKiBzcGVlZDtcbiAgICB9XG5cbiAgICAvLyBUaW1lRW5naW5lIG1ldGhvZCAodHJhbnNwb3J0ZWQgaW50ZXJmYWNlKVxuXG4gIH0sIHtcbiAgICBrZXk6ICdhZHZhbmNlUG9zaXRpb24nLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBhZHZhbmNlUG9zaXRpb24odGltZSwgcG9zaXRpb24sIHNwZWVkKSB7XG4gICAgICB0aGlzLnRyaWdnZXIodGltZSk7XG5cbiAgICAgIGlmIChzcGVlZCA8IDApIHJldHVybiBwb3NpdGlvbiAtIHRoaXMuX19wZXJpb2Q7XG5cbiAgICAgIHJldHVybiBwb3NpdGlvbiArIHRoaXMuX19wZXJpb2Q7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVHJpZ2dlciBtZXRyb25vbWUgY2xpY2tcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gdGltZSBtZXRyb25vbWUgY2xpY2sgc3ludGhlc2lzIGF1ZGlvIHRpbWVcbiAgICAgKi9cblxuICB9LCB7XG4gICAga2V5OiAndHJpZ2dlcicsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHRyaWdnZXIodGltZSkge1xuICAgICAgdmFyIGF1ZGlvQ29udGV4dCA9IHRoaXMuYXVkaW9Db250ZXh0O1xuICAgICAgdmFyIGNsaWNrQXR0YWNrID0gdGhpcy5jbGlja0F0dGFjaztcbiAgICAgIHZhciBjbGlja1JlbGVhc2UgPSB0aGlzLmNsaWNrUmVsZWFzZTtcblxuICAgICAgdmFyIGVudiA9IGF1ZGlvQ29udGV4dC5jcmVhdGVHYWluKCk7XG4gICAgICBlbnYuZ2Fpbi52YWx1ZSA9IDAuMDtcbiAgICAgIGVudi5nYWluLnNldFZhbHVlQXRUaW1lKDAsIHRpbWUpO1xuICAgICAgZW52LmdhaW4ubGluZWFyUmFtcFRvVmFsdWVBdFRpbWUoMS4wLCB0aW1lICsgY2xpY2tBdHRhY2spO1xuICAgICAgZW52LmdhaW4uZXhwb25lbnRpYWxSYW1wVG9WYWx1ZUF0VGltZSgwLjAwMDAwMDEsIHRpbWUgKyBjbGlja0F0dGFjayArIGNsaWNrUmVsZWFzZSk7XG4gICAgICBlbnYuZ2Fpbi5zZXRWYWx1ZUF0VGltZSgwLCB0aW1lKTtcbiAgICAgIGVudi5jb25uZWN0KHRoaXMub3V0cHV0Tm9kZSk7XG5cbiAgICAgIHZhciBvc2MgPSBhdWRpb0NvbnRleHQuY3JlYXRlT3NjaWxsYXRvcigpO1xuICAgICAgb3NjLmZyZXF1ZW5jeS52YWx1ZSA9IHRoaXMuY2xpY2tGcmVxO1xuICAgICAgb3NjLnN0YXJ0KHRpbWUpO1xuICAgICAgb3NjLnN0b3AodGltZSArIGNsaWNrQXR0YWNrICsgY2xpY2tSZWxlYXNlKTtcbiAgICAgIG9zYy5jb25uZWN0KGVudik7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogbGluZWFyIGdhaW4gZmFjdG9yXG4gICAgICpcbiAgICAgKiBAdHlwZSB7TnVtYmVyfVxuICAgICAqIEBuYW1lIGdhaW5cbiAgICAgKiBAbWVtYmVyb2YgTWV0cm9ub21lXG4gICAgICogQGluc3RhbmNlXG4gICAgICovXG5cbiAgfSwge1xuICAgIGtleTogJ2dhaW4nLFxuICAgIHNldDogZnVuY3Rpb24gc2V0KHZhbHVlKSB7XG4gICAgICB0aGlzLl9fZ2Fpbk5vZGUuZ2Fpbi52YWx1ZSA9IHZhbHVlO1xuICAgIH0sXG4gICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICByZXR1cm4gdGhpcy5fX2dhaW5Ob2RlLmdhaW4udmFsdWU7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogbWV0cm9ub21lIHBlcmlvZFxuICAgICAqXG4gICAgICogQHR5cGUge051bWJlcn1cbiAgICAgKiBAbmFtZSBwZXJpb2RcbiAgICAgKiBAbWVtYmVyb2YgTWV0cm9ub21lXG4gICAgICogQGluc3RhbmNlXG4gICAgICovXG5cbiAgfSwge1xuICAgIGtleTogJ3BlcmlvZCcsXG4gICAgc2V0OiBmdW5jdGlvbiBzZXQocGVyaW9kKSB7XG4gICAgICB0aGlzLl9fcGVyaW9kID0gcGVyaW9kO1xuXG4gICAgICB2YXIgbWFzdGVyID0gdGhpcy5tYXN0ZXI7XG5cbiAgICAgIGlmIChtYXN0ZXIpIHtcbiAgICAgICAgaWYgKG1hc3Rlci5yZXNldEVuZ2luZVRpbWUpIG1hc3Rlci5yZXNldEVuZ2luZVRpbWUodGhpcywgdGhpcy5fX2xhc3RUaW1lICsgcGVyaW9kKTtlbHNlIGlmIChtYXN0ZXIucmVzZXRFbmdpbmVQb3NpdGlvbikgbWFzdGVyLnJlc2V0RW5naW5lUG9zaXRpb24odGhpcyk7XG4gICAgICB9XG4gICAgfSxcbiAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgIHJldHVybiB0aGlzLl9fcGVyaW9kO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFNldCBwaGFzZSBwYXJhbWV0ZXIgKGF2YWlsYWJsZSBvbmx5IHdoZW4gJ3RyYW5zcG9ydGVkJyksIHNob3VsZCBiZVxuICAgICAqIGJldHdlZW4gWzAsIDFbXG4gICAgICpcbiAgICAgKiBAdHlwZSB7TnVtYmVyfVxuICAgICAqIEBuYW1lIHBoYXNlXG4gICAgICogQG1lbWJlcm9mIE1ldHJvbm9tZVxuICAgICAqIEBpbnN0YW5jZVxuICAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6ICdwaGFzZScsXG4gICAgc2V0OiBmdW5jdGlvbiBzZXQocGhhc2UpIHtcbiAgICAgIHRoaXMuX19waGFzZSA9IHBoYXNlIC0gTWF0aC5mbG9vcihwaGFzZSk7XG5cbiAgICAgIHZhciBtYXN0ZXIgPSB0aGlzLm1hc3RlcjtcblxuICAgICAgaWYgKG1hc3RlciAmJiBtYXN0ZXIucmVzZXRFbmdpbmVQb3NpdGlvbiAhPT0gdW5kZWZpbmVkKSBtYXN0ZXIucmVzZXRFbmdpbmVQb3NpdGlvbih0aGlzKTtcbiAgICB9LFxuICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgcmV0dXJuIHRoaXMuX19waGFzZTtcbiAgICB9XG4gIH1dKTtcbiAgcmV0dXJuIE1ldHJvbm9tZTtcbn0oX0F1ZGlvVGltZUVuZ2luZTMuZGVmYXVsdCk7XG5cbmV4cG9ydHMuZGVmYXVsdCA9IE1ldHJvbm9tZTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtjaGFyc2V0PXV0Zi04O2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZ6SWpwYklrMWxkSEp2Ym05dFpTNXFjeUpkTENKdVlXMWxjeUk2V3lKdmNIUlBja1JsWmlJc0ltOXdkQ0lzSW1SbFppSXNJblZ1WkdWbWFXNWxaQ0lzSWsxbGRISnZibTl0WlNJc0ltOXdkR2x2Ym5NaUxDSmhkV1JwYjBOdmJuUmxlSFFpTENKZlgzQmxjbWx2WkNJc0luQmxjbWx2WkNJc0ltTnNhV05yUm5KbGNTSXNJbU5zYVdOclFYUjBZV05ySWl3aVkyeHBZMnRTWld4bFlYTmxJaXdpWDE5c1lYTjBWR2x0WlNJc0lsOWZjR2hoYzJVaUxDSmZYMmRoYVc1T2IyUmxJaXdpWTNKbFlYUmxSMkZwYmlJc0ltZGhhVzRpTENKMllXeDFaU0lzSW05MWRIQjFkRTV2WkdVaUxDSjBhVzFsSWl3aWRISnBaMmRsY2lJc0luQnZjMmwwYVc5dUlpd2ljM0JsWldRaUxDSnVaWGgwVUc5emFYUnBiMjRpTENKTllYUm9JaXdpWm14dmIzSWlMQ0pKYm1acGJtbDBlU0lzSW1WdWRpSXNJbk5sZEZaaGJIVmxRWFJVYVcxbElpd2liR2x1WldGeVVtRnRjRlJ2Vm1Gc2RXVkJkRlJwYldVaUxDSmxlSEJ2Ym1WdWRHbGhiRkpoYlhCVWIxWmhiSFZsUVhSVWFXMWxJaXdpWTI5dWJtVmpkQ0lzSW05ell5SXNJbU55WldGMFpVOXpZMmxzYkdGMGIzSWlMQ0ptY21WeGRXVnVZM2tpTENKemRHRnlkQ0lzSW5OMGIzQWlMQ0p0WVhOMFpYSWlMQ0p5WlhObGRFVnVaMmx1WlZScGJXVWlMQ0p5WlhObGRFVnVaMmx1WlZCdmMybDBhVzl1SWl3aWNHaGhjMlVpTENKQmRXUnBiMVJwYldWRmJtZHBibVVpWFN3aWJXRndjR2x1WjNNaU9pSTdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN08wRkJRVUU3T3pzN096dEJRVVZCTEZOQlFWTkJMRkZCUVZRc1EwRkJhMEpETEVkQlFXeENMRVZCUVhWQ1F5eEhRVUYyUWl4RlFVRTBRanRCUVVNeFFpeE5RVUZIUkN4UlFVRlJSU3hUUVVGWUxFVkJRMFVzVDBGQlQwWXNSMEZCVURzN1FVRkZSaXhUUVVGUFF5eEhRVUZRTzBGQlEwUTdPMEZCUlVRN096czdPenM3T3pzN096czdPenM3T3pzN08wbEJiVUpOUlN4VE96czdRVUZEU2l4MVFrRkJNRUk3UVVGQlFTeFJRVUZrUXl4UFFVRmpMSFZGUVVGS0xFVkJRVWs3UVVGQlFUczdRVUZIZUVJN096czdPMEZCU0hkQ0xEUkpRVU5zUWtFc1VVRkJVVU1zV1VGRVZUczdRVUZSZUVJc1ZVRkJTME1zVVVGQlRDeEhRVUZuUWxBc1UwRkJVMHNzVVVGQlVVY3NUVUZCYWtJc1JVRkJlVUlzUTBGQmVrSXNRMEZCYUVJN08wRkJSVUU3T3pzN096czdPMEZCVVVFc1ZVRkJTME1zVTBGQlRDeEhRVUZwUWxRc1UwRkJVMHNzVVVGQlVVa3NVMEZCYWtJc1JVRkJORUlzUjBGQk5VSXNRMEZCYWtJN08wRkJSVUU3T3pzN096czdPMEZCVVVFc1ZVRkJTME1zVjBGQlRDeEhRVUZ0UWxZc1UwRkJVMHNzVVVGQlVVc3NWMEZCYWtJc1JVRkJPRUlzUzBGQk9VSXNRMEZCYmtJN08wRkJSVUU3T3pzN096czdPMEZCVVVFc1ZVRkJTME1zV1VGQlRDeEhRVUZ2UWxnc1UwRkJVMHNzVVVGQlVVMHNXVUZCYWtJc1JVRkJLMElzUzBGQkwwSXNRMEZCY0VJN08wRkJSVUVzVlVGQlMwTXNWVUZCVEN4SFFVRnJRaXhEUVVGc1FqdEJRVU5CTEZWQlFVdERMRTlCUVV3c1IwRkJaU3hEUVVGbU96dEJRVVZCTEZWQlFVdERMRlZCUVV3c1IwRkJhMElzVFVGQlMxSXNXVUZCVEN4RFFVRnJRbE1zVlVGQmJFSXNSVUZCYkVJN1FVRkRRU3hWUVVGTFJDeFZRVUZNTEVOQlFXZENSU3hKUVVGb1FpeERRVUZ4UWtNc1MwRkJja0lzUjBGQk5rSnFRaXhUUVVGVFN5eFJRVUZSVnl4SlFVRnFRaXhGUVVGMVFpeERRVUYyUWl4RFFVRTNRanM3UVVGRlFTeFZRVUZMUlN4VlFVRk1MRWRCUVd0Q0xFMUJRVXRLTEZWQlFYWkNPMEZCT1VOM1FqdEJRU3REZWtJN08wRkJSVVE3T3pzN08yZERRVU5aU3l4SkxFVkJRVTA3UVVGRGFFSXNWMEZCUzBNc1QwRkJUQ3hEUVVGaFJDeEpRVUZpTzBGQlEwRXNWMEZCUzFBc1ZVRkJUQ3hIUVVGclFrOHNTVUZCYkVJN1FVRkRRU3hoUVVGUFFTeFBRVUZQTEV0QlFVdGFMRkZCUVc1Q08wRkJRMFE3TzBGQlJVUTdPenM3YVVOQlEyRlpMRWtzUlVGQlRVVXNVU3hGUVVGVlF5eExMRVZCUVU4N1FVRkRiRU1zVlVGQlNTeExRVUZMWml4UlFVRk1MRWRCUVdkQ0xFTkJRWEJDTEVWQlFYVkNPMEZCUTNKQ0xGbEJRVWxuUWl4bFFVRmxMRU5CUVVORExFdEJRVXRETEV0QlFVd3NRMEZCVjBvc1YwRkJWeXhMUVVGTFpDeFJRVUV6UWl4SlFVRjFReXhMUVVGTFRTeFBRVUUzUXl4SlFVRjNSQ3hMUVVGTFRpeFJRVUZvUmpzN1FVRkZRU3haUVVGSlpTeFJRVUZSTEVOQlFWSXNTVUZCWVVNc1pVRkJaVVlzVVVGQmFFTXNSVUZEUlVVc1owSkJRV2RDTEV0QlFVdG9RaXhSUVVGeVFpeERRVVJHTEV0QlJVc3NTVUZCU1dVc1VVRkJVU3hEUVVGU0xFbEJRV0ZETEdWQlFXVkdMRkZCUVdoRExFVkJRMGhGTEdkQ1FVRm5RaXhMUVVGTGFFSXNVVUZCY2tJN08wRkJSVVlzWlVGQlQyZENMRmxCUVZBN1FVRkRSRHM3UVVGRlJDeGhRVUZQUnl4WFFVRlhTaXhMUVVGc1FqdEJRVU5FT3p0QlFVVkVPenM3TzI5RFFVTm5Ra2dzU1N4RlFVRk5SU3hSTEVWQlFWVkRMRXNzUlVGQlR6dEJRVU55UXl4WFFVRkxSaXhQUVVGTUxFTkJRV0ZFTEVsQlFXSTdPMEZCUlVFc1ZVRkJTVWNzVVVGQlVTeERRVUZhTEVWQlEwVXNUMEZCVDBRc1YwRkJWeXhMUVVGTFpDeFJRVUYyUWpzN1FVRkZSaXhoUVVGUFl5eFhRVUZYTEV0QlFVdGtMRkZCUVhaQ08wRkJRMFE3TzBGQlJVUTdPenM3T3pzN05FSkJTVkZaTEVrc1JVRkJUVHRCUVVOYUxGVkJRVTFpTEdWQlFXVXNTMEZCUzBFc1dVRkJNVUk3UVVGRFFTeFZRVUZOU1N4alFVRmpMRXRCUVV0QkxGZEJRWHBDTzBGQlEwRXNWVUZCVFVNc1pVRkJaU3hMUVVGTFFTeFpRVUV4UWpzN1FVRkZRU3hWUVVGTlowSXNUVUZCVFhKQ0xHRkJRV0ZUTEZWQlFXSXNSVUZCV2p0QlFVTkJXU3hWUVVGSldDeEpRVUZLTEVOQlFWTkRMRXRCUVZRc1IwRkJhVUlzUjBGQmFrSTdRVUZEUVZVc1ZVRkJTVmdzU1VGQlNpeERRVUZUV1N4alFVRlVMRU5CUVhkQ0xFTkJRWGhDTEVWQlFUSkNWQ3hKUVVFelFqdEJRVU5CVVN4VlFVRkpXQ3hKUVVGS0xFTkJRVk5oTEhWQ1FVRlVMRU5CUVdsRExFZEJRV3BETEVWQlFYTkRWaXhQUVVGUFZDeFhRVUUzUXp0QlFVTkJhVUlzVlVGQlNWZ3NTVUZCU2l4RFFVRlRZeXcwUWtGQlZDeERRVUZ6UXl4VFFVRjBReXhGUVVGcFJGZ3NUMEZCVDFRc1YwRkJVQ3hIUVVGeFFrTXNXVUZCZEVVN1FVRkRRV2RDTEZWQlFVbFlMRWxCUVVvc1EwRkJVMWtzWTBGQlZDeERRVUYzUWl4RFFVRjRRaXhGUVVFeVFsUXNTVUZCTTBJN1FVRkRRVkVzVlVGQlNVa3NUMEZCU2l4RFFVRlpMRXRCUVV0aUxGVkJRV3BDT3p0QlFVVkJMRlZCUVUxakxFMUJRVTB4UWl4aFFVRmhNa0lzWjBKQlFXSXNSVUZCV2p0QlFVTkJSQ3hWUVVGSlJTeFRRVUZLTEVOQlFXTnFRaXhMUVVGa0xFZEJRWE5DTEV0QlFVdFNMRk5CUVROQ08wRkJRMEYxUWl4VlFVRkpSeXhMUVVGS0xFTkJRVlZvUWl4SlFVRldPMEZCUTBGaExGVkJRVWxKTEVsQlFVb3NRMEZCVTJwQ0xFOUJRVTlVTEZkQlFWQXNSMEZCY1VKRExGbEJRVGxDTzBGQlEwRnhRaXhWUVVGSlJDeFBRVUZLTEVOQlFWbEtMRWRCUVZvN1FVRkRSRHM3UVVGRlJEczdPenM3T3pzN096czdjMEpCVVZOV0xFc3NSVUZCVHp0QlFVTmtMRmRCUVV0SUxGVkJRVXdzUTBGQlowSkZMRWxCUVdoQ0xFTkJRWEZDUXl4TFFVRnlRaXhIUVVFMlFrRXNTMEZCTjBJN1FVRkRSQ3hMTzNkQ1FVVlZPMEZCUTFRc1lVRkJUeXhMUVVGTFNDeFZRVUZNTEVOQlFXZENSU3hKUVVGb1FpeERRVUZ4UWtNc1MwRkJOVUk3UVVGRFJEczdRVUZGUkRzN096czdPenM3T3pzN2MwSkJVVmRVTEUwc1JVRkJVVHRCUVVOcVFpeFhRVUZMUkN4UlFVRk1MRWRCUVdkQ1F5eE5RVUZvUWpzN1FVRkZRU3hWUVVGTk5rSXNVMEZCVXl4TFFVRkxRU3hOUVVGd1FqczdRVUZGUVN4VlFVRkpRU3hOUVVGS0xFVkJRVms3UVVGRFZpeFpRVUZKUVN4UFFVRlBReXhsUVVGWUxFVkJRMFZFTEU5QlFVOURMR1ZCUVZBc1EwRkJkVUlzU1VGQmRrSXNSVUZCTmtJc1MwRkJTekZDTEZWQlFVd3NSMEZCYTBKS0xFMUJRUzlETEVWQlJFWXNTMEZGU3l4SlFVRkpOa0lzVDBGQlQwVXNiVUpCUVZnc1JVRkRTRVlzVDBGQlQwVXNiVUpCUVZBc1EwRkJNa0lzU1VGQk0wSTdRVUZEU0R0QlFVTkdMRXM3ZDBKQlJWazdRVUZEV0N4aFFVRlBMRXRCUVV0b1F5eFJRVUZhTzBGQlEwUTdPMEZCUlVRN096czdPenM3T3pzN096dHpRa0ZUVldsRExFc3NSVUZCVHp0QlFVTm1MRmRCUVVzelFpeFBRVUZNTEVkQlFXVXlRaXhSUVVGUmFFSXNTMEZCUzBNc1MwRkJUQ3hEUVVGWFpTeExRVUZZTEVOQlFYWkNPenRCUVVWQkxGVkJRVTFJTEZOQlFWTXNTMEZCUzBFc1RVRkJjRUk3TzBGQlJVRXNWVUZCU1VFc1ZVRkJWVUVzVDBGQlQwVXNiVUpCUVZBc1MwRkJLMEp3UXl4VFFVRTNReXhGUVVORmEwTXNUMEZCVDBVc2JVSkJRVkFzUTBGQk1rSXNTVUZCTTBJN1FVRkRTQ3hMTzNkQ1FVVlhPMEZCUTFZc1lVRkJUeXhMUVVGTE1VSXNUMEZCV2p0QlFVTkVPenM3UlVGNFMzRkNORUlzZVVJN08ydENRVEpMVkhKRExGTWlMQ0ptYVd4bElqb2lUV1YwY205dWIyMWxMbXB6SWl3aWMyOTFjbU5sYzBOdmJuUmxiblFpT2xzaWFXMXdiM0owSUVGMVpHbHZWR2x0WlVWdVoybHVaU0JtY205dElDY3VMaTlqYjNKbEwwRjFaR2x2VkdsdFpVVnVaMmx1WlNjN1hHNWNibVoxYm1OMGFXOXVJRzl3ZEU5eVJHVm1LRzl3ZEN3Z1pHVm1LU0I3WEc0Z0lHbG1LRzl3ZENBaFBUMGdkVzVrWldacGJtVmtLVnh1SUNBZ0lISmxkSFZ5YmlCdmNIUTdYRzVjYmlBZ2NtVjBkWEp1SUdSbFpqdGNibjFjYmx4dUx5b3FYRzRnS2lCTlpYUnliMjV2YldVZ1lYVmthVzhnWlc1bmFXNWxMaUJKZENCbGVIUmxibVJ6SUZScGJXVWdSVzVuYVc1bElHRnpJR0VnZEhKaGJuTndiM0owWldRZ2FXNTBaWEptWVdObExseHVJQ29nVzJWNFlXMXdiR1ZkZTBCc2FXNXJJR2gwZEhCek9pOHZjbUYzWjJsMExtTnZiUzkzWVhabGMycHpMM2RoZG1WekxXRjFaR2x2TDIxaGMzUmxjaTlsZUdGdGNHeGxjeTl0WlhSeWIyNXZiV1V2YVc1a1pYZ3VhSFJ0YkgxY2JpQXFYRzRnS2lCQVpYaDBaVzVrY3lCQmRXUnBiMVJwYldWRmJtZHBibVZjYmlBcUlFQmxlR0Z0Y0d4bFhHNGdLaUJwYlhCdmNuUWdLaUJoY3lCaGRXUnBieUJtY205dElDZDNZWFpsY3kxaGRXUnBieWM3WEc0Z0tpQmpiMjV6ZENCelkyaGxaSFZzWlhJZ1BTQmhkV1JwYnk1blpYUlRZMmhsWkhWc1pYSW9LVHRjYmlBcUlHTnZibk4wSUcxbGRISnZibTl0WlNBOUlHNWxkeUJoZFdScGJ5NU5aWFJ5YjI1dmJXVW9lM0JsY21sdlpEb2dNQzR6TXpOOUtUdGNiaUFxWEc0Z0tpQnpZMmhsWkhWc1pYSXVZV1JrS0cxbGRISnZibTl0WlNrN1hHNGdLbHh1SUNvZ1FIQmhjbUZ0SUh0UFltcGxZM1I5SUZ0dmNIUnBiMjV6UFh0OVhTQXRJRVJsWm1GMWJIUWdiM0IwYVc5dWMxeHVJQ29nUUhCaGNtRnRJSHRPZFcxaVpYSjlJRnR2Y0hScGIyNXpMbkJsY21sdlpEMHhYU0F0SUUxbGRISnZibTl0WlNCd1pYSnBiMlJjYmlBcUlFQndZWEpoYlNCN1RuVnRZbVZ5ZlNCYmIzQjBhVzl1Y3k1amJHbGphMFp5WlhFOU5qQXdYU0F0SUUxbGRISnZibTl0WlNCamJHbGpheUJtY21WeGRXVnVZM2xjYmlBcUlFQndZWEpoYlNCN1RuVnRZbVZ5ZlNCYmIzQjBhVzl1Y3k1amJHbGphMEYwZEdGamF6MHdMakF3TWwwZ0xTQk5aWFJ5YjI1dmJXVWdZMnhwWTJzZ1lYUjBZV05ySUhScGJXVmNiaUFxSUVCd1lYSmhiU0I3VG5WdFltVnlmU0JiYjNCMGFXOXVjeTVqYkdsamExSmxiR1ZoYzJVOU1DNHdPVGhkSUMwZ1RXVjBjbTl1YjIxbElHTnNhV05ySUhKbGJHVmhjMlVnZEdsdFpWeHVJQ29nUUhCaGNtRnRJSHRPZFcxaVpYSjlJRnR2Y0hScGIyNXpMbWRoYVc0OU1WMGdMU0JIWVdsdVhHNGdLaTljYm1Oc1lYTnpJRTFsZEhKdmJtOXRaU0JsZUhSbGJtUnpJRUYxWkdsdlZHbHRaVVZ1WjJsdVpTQjdYRzRnSUdOdmJuTjBjblZqZEc5eUtHOXdkR2x2Ym5NZ1BTQjdmU2tnZTF4dUlDQWdJSE4xY0dWeUtHOXdkR2x2Ym5NdVlYVmthVzlEYjI1MFpYaDBLVHRjYmx4dUlDQWdJQzhxS2x4dUlDQWdJQ0FxSUUxbGRISnZibTl0WlNCd1pYSnBiMlJjYmlBZ0lDQWdLaUJBZEhsd1pTQjdUblZ0WW1WeWZWeHVJQ0FnSUNBcUlFQndjbWwyWVhSbFhHNGdJQ0FnSUNvdlhHNGdJQ0FnZEdocGN5NWZYM0JsY21sdlpDQTlJRzl3ZEU5eVJHVm1LRzl3ZEdsdmJuTXVjR1Z5YVc5a0xDQXhLVHRjYmx4dUlDQWdJQzhxS2x4dUlDQWdJQ0FxSUUxbGRISnZibTl0WlNCamJHbGpheUJtY21WeGRXVnVZM2xjYmlBZ0lDQWdLbHh1SUNBZ0lDQXFJRUIwZVhCbElIdE9kVzFpWlhKOVhHNGdJQ0FnSUNvZ1FHMWxiV0psY205bUlFMWxkSEp2Ym05dFpWeHVJQ0FnSUNBcUlFQnVZVzFsSUdOc2FXTnJSbkpsY1Z4dUlDQWdJQ0FxSUVCcGJuTjBZVzVqWlZ4dUlDQWdJQ0FxTDF4dUlDQWdJSFJvYVhNdVkyeHBZMnRHY21WeElEMGdiM0IwVDNKRVpXWW9iM0IwYVc5dWN5NWpiR2xqYTBaeVpYRXNJRFl3TUNrN1hHNWNiaUFnSUNBdktpcGNiaUFnSUNBZ0tpQk5aWFJ5YjI1dmJXVWdZMnhwWTJzZ1lYUjBZV05ySUhScGJXVmNiaUFnSUNBZ0tseHVJQ0FnSUNBcUlFQjBlWEJsSUh0T2RXMWlaWEo5WEc0Z0lDQWdJQ29nUUcxbGJXSmxjbTltSUUxbGRISnZibTl0WlZ4dUlDQWdJQ0FxSUVCdVlXMWxJR05zYVdOclFYUjBZV05yWEc0Z0lDQWdJQ29nUUdsdWMzUmhibU5sWEc0Z0lDQWdJQ292WEc0Z0lDQWdkR2hwY3k1amJHbGphMEYwZEdGamF5QTlJRzl3ZEU5eVJHVm1LRzl3ZEdsdmJuTXVZMnhwWTJ0QmRIUmhZMnNzSURBdU1EQXlLVHRjYmx4dUlDQWdJQzhxS2x4dUlDQWdJQ0FxSUUxbGRISnZibTl0WlNCamJHbGpheUJ5Wld4bFlYTmxJSFJwYldWY2JpQWdJQ0FnS2x4dUlDQWdJQ0FxSUVCMGVYQmxJSHRPZFcxaVpYSjlYRzRnSUNBZ0lDb2dRRzFsYldKbGNtOW1JRTFsZEhKdmJtOXRaVnh1SUNBZ0lDQXFJRUJ1WVcxbElHTnNhV05yVW1Wc1pXRnpaVnh1SUNBZ0lDQXFJRUJwYm5OMFlXNWpaVnh1SUNBZ0lDQXFMMXh1SUNBZ0lIUm9hWE11WTJ4cFkydFNaV3hsWVhObElEMGdiM0IwVDNKRVpXWW9iM0IwYVc5dWN5NWpiR2xqYTFKbGJHVmhjMlVzSURBdU1EazRLVHRjYmx4dUlDQWdJSFJvYVhNdVgxOXNZWE4wVkdsdFpTQTlJREE3WEc0Z0lDQWdkR2hwY3k1ZlgzQm9ZWE5sSUQwZ01EdGNibHh1SUNBZ0lIUm9hWE11WDE5bllXbHVUbTlrWlNBOUlIUm9hWE11WVhWa2FXOURiMjUwWlhoMExtTnlaV0YwWlVkaGFXNG9LVHRjYmlBZ0lDQjBhR2x6TGw5ZloyRnBiazV2WkdVdVoyRnBiaTUyWVd4MVpTQTlJRzl3ZEU5eVJHVm1LRzl3ZEdsdmJuTXVaMkZwYml3Z01TazdYRzVjYmlBZ0lDQjBhR2x6TG05MWRIQjFkRTV2WkdVZ1BTQjBhR2x6TGw5ZloyRnBiazV2WkdVN1hHNGdJSDFjYmx4dUlDQXZMeUJVYVcxbFJXNW5hVzVsSUcxbGRHaHZaQ0FvYzJOb1pXUjFiR1ZrSUdsdWRHVnlabUZqWlNsY2JpQWdZV1IyWVc1alpWUnBiV1VvZEdsdFpTa2dlMXh1SUNBZ0lIUm9hWE11ZEhKcFoyZGxjaWgwYVcxbEtUdGNiaUFnSUNCMGFHbHpMbDlmYkdGemRGUnBiV1VnUFNCMGFXMWxPMXh1SUNBZ0lISmxkSFZ5YmlCMGFXMWxJQ3NnZEdocGN5NWZYM0JsY21sdlpEdGNiaUFnZlZ4dVhHNGdJQzh2SUZScGJXVkZibWRwYm1VZ2JXVjBhRzlrSUNoMGNtRnVjM0J2Y25SbFpDQnBiblJsY21aaFkyVXBYRzRnSUhONWJtTlFiM05wZEdsdmJpaDBhVzFsTENCd2IzTnBkR2x2Yml3Z2MzQmxaV1FwSUh0Y2JpQWdJQ0JwWmlBb2RHaHBjeTVmWDNCbGNtbHZaQ0ErSURBcElIdGNiaUFnSUNBZ0lIWmhjaUJ1WlhoMFVHOXphWFJwYjI0Z1BTQW9UV0YwYUM1bWJHOXZjaWh3YjNOcGRHbHZiaUF2SUhSb2FYTXVYMTl3WlhKcGIyUXBJQ3NnZEdocGN5NWZYM0JvWVhObEtTQXFJSFJvYVhNdVgxOXdaWEpwYjJRN1hHNWNiaUFnSUNBZ0lHbG1JQ2h6Y0dWbFpDQStJREFnSmlZZ2JtVjRkRkJ2YzJsMGFXOXVJRHdnY0c5emFYUnBiMjRwWEc0Z0lDQWdJQ0FnSUc1bGVIUlFiM05wZEdsdmJpQXJQU0IwYUdsekxsOWZjR1Z5YVc5a08xeHVJQ0FnSUNBZ1pXeHpaU0JwWmlBb2MzQmxaV1FnUENBd0lDWW1JRzVsZUhSUWIzTnBkR2x2YmlBK0lIQnZjMmwwYVc5dUtWeHVJQ0FnSUNBZ0lDQnVaWGgwVUc5emFYUnBiMjRnTFQwZ2RHaHBjeTVmWDNCbGNtbHZaRHRjYmx4dUlDQWdJQ0FnY21WMGRYSnVJRzVsZUhSUWIzTnBkR2x2Ymp0Y2JpQWdJQ0I5WEc1Y2JpQWdJQ0J5WlhSMWNtNGdTVzVtYVc1cGRIa2dLaUJ6Y0dWbFpEdGNiaUFnZlZ4dVhHNGdJQzh2SUZScGJXVkZibWRwYm1VZ2JXVjBhRzlrSUNoMGNtRnVjM0J2Y25SbFpDQnBiblJsY21aaFkyVXBYRzRnSUdGa2RtRnVZMlZRYjNOcGRHbHZiaWgwYVcxbExDQndiM05wZEdsdmJpd2djM0JsWldRcElIdGNiaUFnSUNCMGFHbHpMblJ5YVdkblpYSW9kR2x0WlNrN1hHNWNiaUFnSUNCcFppQW9jM0JsWldRZ1BDQXdLVnh1SUNBZ0lDQWdjbVYwZFhKdUlIQnZjMmwwYVc5dUlDMGdkR2hwY3k1ZlgzQmxjbWx2WkR0Y2JseHVJQ0FnSUhKbGRIVnliaUJ3YjNOcGRHbHZiaUFySUhSb2FYTXVYMTl3WlhKcGIyUTdYRzRnSUgxY2JseHVJQ0F2S2lwY2JpQWdJQ29nVkhKcFoyZGxjaUJ0WlhSeWIyNXZiV1VnWTJ4cFkydGNiaUFnSUNvZ1FIQmhjbUZ0SUh0T2RXMWlaWEo5SUhScGJXVWdiV1YwY205dWIyMWxJR05zYVdOcklITjViblJvWlhOcGN5QmhkV1JwYnlCMGFXMWxYRzRnSUNBcUwxeHVJQ0IwY21sbloyVnlLSFJwYldVcElIdGNiaUFnSUNCamIyNXpkQ0JoZFdScGIwTnZiblJsZUhRZ1BTQjBhR2x6TG1GMVpHbHZRMjl1ZEdWNGREdGNiaUFnSUNCamIyNXpkQ0JqYkdsamEwRjBkR0ZqYXlBOUlIUm9hWE11WTJ4cFkydEJkSFJoWTJzN1hHNGdJQ0FnWTI5dWMzUWdZMnhwWTJ0U1pXeGxZWE5sSUQwZ2RHaHBjeTVqYkdsamExSmxiR1ZoYzJVN1hHNWNiaUFnSUNCamIyNXpkQ0JsYm5ZZ1BTQmhkV1JwYjBOdmJuUmxlSFF1WTNKbFlYUmxSMkZwYmlncE8xeHVJQ0FnSUdWdWRpNW5ZV2x1TG5aaGJIVmxJRDBnTUM0d08xeHVJQ0FnSUdWdWRpNW5ZV2x1TG5ObGRGWmhiSFZsUVhSVWFXMWxLREFzSUhScGJXVXBPMXh1SUNBZ0lHVnVkaTVuWVdsdUxteHBibVZoY2xKaGJYQlViMVpoYkhWbFFYUlVhVzFsS0RFdU1Dd2dkR2x0WlNBcklHTnNhV05yUVhSMFlXTnJLVHRjYmlBZ0lDQmxibll1WjJGcGJpNWxlSEJ2Ym1WdWRHbGhiRkpoYlhCVWIxWmhiSFZsUVhSVWFXMWxLREF1TURBd01EQXdNU3dnZEdsdFpTQXJJR05zYVdOclFYUjBZV05ySUNzZ1kyeHBZMnRTWld4bFlYTmxLVHRjYmlBZ0lDQmxibll1WjJGcGJpNXpaWFJXWVd4MVpVRjBWR2x0WlNnd0xDQjBhVzFsS1R0Y2JpQWdJQ0JsYm5ZdVkyOXVibVZqZENoMGFHbHpMbTkxZEhCMWRFNXZaR1VwTzF4dVhHNGdJQ0FnWTI5dWMzUWdiM05qSUQwZ1lYVmthVzlEYjI1MFpYaDBMbU55WldGMFpVOXpZMmxzYkdGMGIzSW9LVHRjYmlBZ0lDQnZjMk11Wm5KbGNYVmxibU41TG5aaGJIVmxJRDBnZEdocGN5NWpiR2xqYTBaeVpYRTdYRzRnSUNBZ2IzTmpMbk4wWVhKMEtIUnBiV1VwTzF4dUlDQWdJRzl6WXk1emRHOXdLSFJwYldVZ0t5QmpiR2xqYTBGMGRHRmpheUFySUdOc2FXTnJVbVZzWldGelpTazdYRzRnSUNBZ2IzTmpMbU52Ym01bFkzUW9aVzUyS1R0Y2JpQWdmVnh1WEc0Z0lDOHFLbHh1SUNBZ0tpQnNhVzVsWVhJZ1oyRnBiaUJtWVdOMGIzSmNiaUFnSUNwY2JpQWdJQ29nUUhSNWNHVWdlMDUxYldKbGNuMWNiaUFnSUNvZ1FHNWhiV1VnWjJGcGJseHVJQ0FnS2lCQWJXVnRZbVZ5YjJZZ1RXVjBjbTl1YjIxbFhHNGdJQ0FxSUVCcGJuTjBZVzVqWlZ4dUlDQWdLaTljYmlBZ2MyVjBJR2RoYVc0b2RtRnNkV1VwSUh0Y2JpQWdJQ0IwYUdsekxsOWZaMkZwYms1dlpHVXVaMkZwYmk1MllXeDFaU0E5SUhaaGJIVmxPMXh1SUNCOVhHNWNiaUFnWjJWMElHZGhhVzRvS1NCN1hHNGdJQ0FnY21WMGRYSnVJSFJvYVhNdVgxOW5ZV2x1VG05a1pTNW5ZV2x1TG5aaGJIVmxPMXh1SUNCOVhHNWNiaUFnTHlvcVhHNGdJQ0FxSUcxbGRISnZibTl0WlNCd1pYSnBiMlJjYmlBZ0lDcGNiaUFnSUNvZ1FIUjVjR1VnZTA1MWJXSmxjbjFjYmlBZ0lDb2dRRzVoYldVZ2NHVnlhVzlrWEc0Z0lDQXFJRUJ0WlcxaVpYSnZaaUJOWlhSeWIyNXZiV1ZjYmlBZ0lDb2dRR2x1YzNSaGJtTmxYRzRnSUNBcUwxeHVJQ0J6WlhRZ2NHVnlhVzlrS0hCbGNtbHZaQ2tnZTF4dUlDQWdJSFJvYVhNdVgxOXdaWEpwYjJRZ1BTQndaWEpwYjJRN1hHNWNiaUFnSUNCamIyNXpkQ0J0WVhOMFpYSWdQU0IwYUdsekxtMWhjM1JsY2p0Y2JseHVJQ0FnSUdsbUlDaHRZWE4wWlhJcElIdGNiaUFnSUNBZ0lHbG1JQ2h0WVhOMFpYSXVjbVZ6WlhSRmJtZHBibVZVYVcxbEtWeHVJQ0FnSUNBZ0lDQnRZWE4wWlhJdWNtVnpaWFJGYm1kcGJtVlVhVzFsS0hSb2FYTXNJSFJvYVhNdVgxOXNZWE4wVkdsdFpTQXJJSEJsY21sdlpDazdYRzRnSUNBZ0lDQmxiSE5sSUdsbUlDaHRZWE4wWlhJdWNtVnpaWFJGYm1kcGJtVlFiM05wZEdsdmJpbGNiaUFnSUNBZ0lDQWdiV0Z6ZEdWeUxuSmxjMlYwUlc1bmFXNWxVRzl6YVhScGIyNG9kR2hwY3lrN1hHNGdJQ0FnZlZ4dUlDQjlYRzVjYmlBZ1oyVjBJSEJsY21sdlpDZ3BJSHRjYmlBZ0lDQnlaWFIxY200Z2RHaHBjeTVmWDNCbGNtbHZaRHRjYmlBZ2ZWeHVYRzRnSUM4cUtseHVJQ0FnS2lCVFpYUWdjR2hoYzJVZ2NHRnlZVzFsZEdWeUlDaGhkbUZwYkdGaWJHVWdiMjVzZVNCM2FHVnVJQ2QwY21GdWMzQnZjblJsWkNjcExDQnphRzkxYkdRZ1ltVmNiaUFnSUNvZ1ltVjBkMlZsYmlCYk1Dd2dNVnRjYmlBZ0lDcGNiaUFnSUNvZ1FIUjVjR1VnZTA1MWJXSmxjbjFjYmlBZ0lDb2dRRzVoYldVZ2NHaGhjMlZjYmlBZ0lDb2dRRzFsYldKbGNtOW1JRTFsZEhKdmJtOXRaVnh1SUNBZ0tpQkFhVzV6ZEdGdVkyVmNiaUFnSUNvdlhHNGdJSE5sZENCd2FHRnpaU2h3YUdGelpTa2dlMXh1SUNBZ0lIUm9hWE11WDE5d2FHRnpaU0E5SUhCb1lYTmxJQzBnVFdGMGFDNW1iRzl2Y2lod2FHRnpaU2s3WEc1Y2JpQWdJQ0JqYjI1emRDQnRZWE4wWlhJZ1BTQjBhR2x6TG0xaGMzUmxjanRjYmx4dUlDQWdJR2xtSUNodFlYTjBaWElnSmlZZ2JXRnpkR1Z5TG5KbGMyVjBSVzVuYVc1bFVHOXphWFJwYjI0Z0lUMDlJSFZ1WkdWbWFXNWxaQ2xjYmlBZ0lDQWdJRzFoYzNSbGNpNXlaWE5sZEVWdVoybHVaVkJ2YzJsMGFXOXVLSFJvYVhNcE8xeHVJQ0I5WEc1Y2JpQWdaMlYwSUhCb1lYTmxLQ2tnZTF4dUlDQWdJSEpsZEhWeWJpQjBhR2x6TGw5ZmNHaGhjMlU3WEc0Z0lIMWNibjFjYmx4dVpYaHdiM0owSUdSbFptRjFiSFFnVFdWMGNtOXViMjFsTzF4dUlsMTkiLCIndXNlIHN0cmljdCc7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5cbnZhciBfZ2V0UHJvdG90eXBlT2YgPSByZXF1aXJlKCdiYWJlbC1ydW50aW1lL2NvcmUtanMvb2JqZWN0L2dldC1wcm90b3R5cGUtb2YnKTtcblxudmFyIF9nZXRQcm90b3R5cGVPZjIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9nZXRQcm90b3R5cGVPZik7XG5cbnZhciBfY2xhc3NDYWxsQ2hlY2syID0gcmVxdWlyZSgnYmFiZWwtcnVudGltZS9oZWxwZXJzL2NsYXNzQ2FsbENoZWNrJyk7XG5cbnZhciBfY2xhc3NDYWxsQ2hlY2szID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfY2xhc3NDYWxsQ2hlY2syKTtcblxudmFyIF9jcmVhdGVDbGFzczIgPSByZXF1aXJlKCdiYWJlbC1ydW50aW1lL2hlbHBlcnMvY3JlYXRlQ2xhc3MnKTtcblxudmFyIF9jcmVhdGVDbGFzczMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9jcmVhdGVDbGFzczIpO1xuXG52YXIgX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4yID0gcmVxdWlyZSgnYmFiZWwtcnVudGltZS9oZWxwZXJzL3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4nKTtcblxudmFyIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuMyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4yKTtcblxudmFyIF9pbmhlcml0czIgPSByZXF1aXJlKCdiYWJlbC1ydW50aW1lL2hlbHBlcnMvaW5oZXJpdHMnKTtcblxudmFyIF9pbmhlcml0czMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9pbmhlcml0czIpO1xuXG52YXIgX0F1ZGlvVGltZUVuZ2luZTIgPSByZXF1aXJlKCcuLi9jb3JlL0F1ZGlvVGltZUVuZ2luZScpO1xuXG52YXIgX0F1ZGlvVGltZUVuZ2luZTMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9BdWRpb1RpbWVFbmdpbmUyKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxuZnVuY3Rpb24gb3B0T3JEZWYob3B0LCBkZWYpIHtcbiAgaWYgKG9wdCAhPT0gdW5kZWZpbmVkKSByZXR1cm4gb3B0O1xuXG4gIHJldHVybiBkZWY7XG59XG5cbi8qKlxuICogVXNlZCB3aXRoIGEgYnVmZmVyIHRvIHNlcnZlIGF1ZGlvIGZpbGVzLlxuICpcbiAqIFtleGFtcGxlXXtAbGluayBodHRwczovL3Jhd2dpdC5jb20vd2F2ZXNqcy93YXZlcy1hdWRpby9tYXN0ZXIvZXhhbXBsZXMvcGxheWVyLWVuZ2luZS9pbmRleC5odG1sfVxuICpcbiAqIEBleHRlbmRzIEF1ZGlvVGltZUVuZ2luZVxuICogQGV4YW1wbGVcbiAqIGltcG9ydCAqIGFzIGF1ZGlvIGZyb20gJ3dhdmVzLWF1ZGlvJztcbiAqIGNvbnN0IHBsYXllckVuZ2luZSA9IGF1ZGlvLlBsYXllckVuZ2luZSgpO1xuICogY29uc3QgcGxheUNvbnRyb2wgPSBuZXcgYXVkaW8uUGxheUNvbnRyb2wocGxheWVyRW5naW5lKTtcbiAqXG4gKiBwbGF5Q29udHJvbC5zdGFydCgpO1xuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBbb3B0aW9ucz17fV0gLSBEZWZhdWx0IG9wdGlvbnNcbiAqIEBwYXJhbSB7TnVtYmVyfSBbb3B0aW9ucy5idWZmZXI9MV0gLSBBdWRpbyBidWZmZXJcbiAqIEBwYXJhbSB7TnVtYmVyfSBbb3B0aW9ucy5mYWRlVGltZT0wLjAwNV0gLSBGYWRlIHRpbWUgZm9yIGNoYWluaW5nIHNlZ21lbnRzXG4gKiBAcGFyYW0ge051bWJlcn0gW29wdGlvbnMuY3ljbGljPWZhbHNlXSAtIExvb3AgbW9kZVxuICogQHBhcmFtIHtOdW1iZXJ9IFtvcHRpb25zLmdhaW49MV0gLSBHYWluXG4gKi9cblxudmFyIFBsYXllckVuZ2luZSA9IGZ1bmN0aW9uIChfQXVkaW9UaW1lRW5naW5lKSB7XG4gICgwLCBfaW5oZXJpdHMzLmRlZmF1bHQpKFBsYXllckVuZ2luZSwgX0F1ZGlvVGltZUVuZ2luZSk7XG5cbiAgZnVuY3Rpb24gUGxheWVyRW5naW5lKCkge1xuICAgIHZhciBvcHRpb25zID0gYXJndW1lbnRzLmxlbmd0aCA+IDAgJiYgYXJndW1lbnRzWzBdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMF0gOiB7fTtcbiAgICAoMCwgX2NsYXNzQ2FsbENoZWNrMy5kZWZhdWx0KSh0aGlzLCBQbGF5ZXJFbmdpbmUpO1xuXG4gICAgdmFyIF90aGlzID0gKDAsIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuMy5kZWZhdWx0KSh0aGlzLCAoUGxheWVyRW5naW5lLl9fcHJvdG9fXyB8fCAoMCwgX2dldFByb3RvdHlwZU9mMi5kZWZhdWx0KShQbGF5ZXJFbmdpbmUpKS5jYWxsKHRoaXMsIG9wdGlvbnMuYXVkaW9Db250ZXh0KSk7XG5cbiAgICBfdGhpcy50cmFuc3BvcnQgPSBudWxsOyAvLyBzZXQgd2hlbiBhZGRlZCB0byB0cmFuc3BvcnRlclxuXG4gICAgLyoqXG4gICAgICogQXVkaW8gYnVmZmVyXG4gICAgICpcbiAgICAgKiBAdHlwZSB7QXVkaW9CdWZmZXJ9XG4gICAgICogQG5hbWUgYnVmZmVyXG4gICAgICogQG1lbWJlcm9mIFBsYXllckVuZ2luZVxuICAgICAqIEBpbnN0YW5jZVxuICAgICAqIEBkZWZhdWx0IG51bGxcbiAgICAgKi9cbiAgICBfdGhpcy5idWZmZXIgPSBvcHRPckRlZihvcHRpb25zLmJ1ZmZlciwgbnVsbCk7XG5cbiAgICAvKipcbiAgICAgKiBGYWRlIHRpbWUgZm9yIGNoYWluaW5nIHNlZ21lbnRzIChlLmcuIGluIHN0YXJ0LCBzdG9wLCBhbmQgc2VlaylcbiAgICAgKlxuICAgICAqIEB0eXBlIHtOdW1iZXJ9XG4gICAgICogQG5hbWUgZmFkZVRpbWVcbiAgICAgKiBAbWVtYmVyb2YgUGxheWVyRW5naW5lXG4gICAgICogQGluc3RhbmNlXG4gICAgICogQGRlZmF1bHQgMC4wMDVcbiAgICAgKi9cbiAgICBfdGhpcy5mYWRlVGltZSA9IG9wdE9yRGVmKG9wdGlvbnMuZmFkZVRpbWUsIDAuMDA1KTtcblxuICAgIF90aGlzLl9fdGltZSA9IDA7XG4gICAgX3RoaXMuX19wb3NpdGlvbiA9IDA7XG4gICAgX3RoaXMuX19zcGVlZCA9IDA7XG5cbiAgICBfdGhpcy5fX2J1ZmZlclNvdXJjZSA9IG51bGw7XG4gICAgX3RoaXMuX19lbnZOb2RlID0gbnVsbDtcblxuICAgIF90aGlzLl9fZ2Fpbk5vZGUgPSBfdGhpcy5hdWRpb0NvbnRleHQuY3JlYXRlR2FpbigpO1xuICAgIF90aGlzLl9fZ2Fpbk5vZGUuZ2Fpbi52YWx1ZSA9IG9wdE9yRGVmKG9wdGlvbnMuZ2FpbiwgMSk7XG5cbiAgICBfdGhpcy5fX2N5Y2xpYyA9IG9wdE9yRGVmKG9wdGlvbnMuY3ljbGljLCBmYWxzZSk7XG5cbiAgICBfdGhpcy5vdXRwdXROb2RlID0gX3RoaXMuX19nYWluTm9kZTtcbiAgICByZXR1cm4gX3RoaXM7XG4gIH1cblxuICAoMCwgX2NyZWF0ZUNsYXNzMy5kZWZhdWx0KShQbGF5ZXJFbmdpbmUsIFt7XG4gICAga2V5OiAnX19zdGFydCcsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIF9fc3RhcnQodGltZSwgcG9zaXRpb24sIHNwZWVkKSB7XG4gICAgICB2YXIgYXVkaW9Db250ZXh0ID0gdGhpcy5hdWRpb0NvbnRleHQ7XG5cbiAgICAgIGlmICh0aGlzLmJ1ZmZlcikge1xuICAgICAgICB2YXIgYnVmZmVyRHVyYXRpb24gPSB0aGlzLmJ1ZmZlci5kdXJhdGlvbjtcblxuICAgICAgICBpZiAodGhpcy5fX2N5Y2xpYyAmJiAocG9zaXRpb24gPCAwIHx8IHBvc2l0aW9uID49IGJ1ZmZlckR1cmF0aW9uKSkge1xuICAgICAgICAgIHZhciBwaGFzZSA9IHBvc2l0aW9uIC8gYnVmZmVyRHVyYXRpb247XG4gICAgICAgICAgcG9zaXRpb24gPSAocGhhc2UgLSBNYXRoLmZsb29yKHBoYXNlKSkgKiBidWZmZXJEdXJhdGlvbjtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChwb3NpdGlvbiA+PSAwICYmIHBvc2l0aW9uIDwgYnVmZmVyRHVyYXRpb24gJiYgc3BlZWQgPiAwKSB7XG4gICAgICAgICAgdGhpcy5fX2Vudk5vZGUgPSBhdWRpb0NvbnRleHQuY3JlYXRlR2FpbigpO1xuICAgICAgICAgIHRoaXMuX19lbnZOb2RlLmdhaW4uc2V0VmFsdWVBdFRpbWUoMCwgdGltZSk7XG4gICAgICAgICAgdGhpcy5fX2Vudk5vZGUuZ2Fpbi5saW5lYXJSYW1wVG9WYWx1ZUF0VGltZSgxLCB0aW1lICsgdGhpcy5mYWRlVGltZSk7XG4gICAgICAgICAgdGhpcy5fX2Vudk5vZGUuY29ubmVjdCh0aGlzLl9fZ2Fpbk5vZGUpO1xuXG4gICAgICAgICAgdGhpcy5fX2J1ZmZlclNvdXJjZSA9IGF1ZGlvQ29udGV4dC5jcmVhdGVCdWZmZXJTb3VyY2UoKTtcbiAgICAgICAgICB0aGlzLl9fYnVmZmVyU291cmNlLmJ1ZmZlciA9IHRoaXMuYnVmZmVyO1xuICAgICAgICAgIHRoaXMuX19idWZmZXJTb3VyY2UucGxheWJhY2tSYXRlLnZhbHVlID0gc3BlZWQ7XG4gICAgICAgICAgdGhpcy5fX2J1ZmZlclNvdXJjZS5sb29wID0gdGhpcy5fX2N5Y2xpYztcbiAgICAgICAgICB0aGlzLl9fYnVmZmVyU291cmNlLmxvb3BTdGFydCA9IDA7XG4gICAgICAgICAgdGhpcy5fX2J1ZmZlclNvdXJjZS5sb29wRW5kID0gYnVmZmVyRHVyYXRpb247XG4gICAgICAgICAgdGhpcy5fX2J1ZmZlclNvdXJjZS5zdGFydCh0aW1lLCBwb3NpdGlvbik7XG4gICAgICAgICAgdGhpcy5fX2J1ZmZlclNvdXJjZS5jb25uZWN0KHRoaXMuX19lbnZOb2RlKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ19faGFsdCcsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIF9faGFsdCh0aW1lKSB7XG4gICAgICBpZiAodGhpcy5fX2J1ZmZlclNvdXJjZSkge1xuICAgICAgICB0aGlzLl9fZW52Tm9kZS5nYWluLmNhbmNlbFNjaGVkdWxlZFZhbHVlcyh0aW1lKTtcbiAgICAgICAgdGhpcy5fX2Vudk5vZGUuZ2Fpbi5zZXRWYWx1ZUF0VGltZSh0aGlzLl9fZW52Tm9kZS5nYWluLnZhbHVlLCB0aW1lKTtcbiAgICAgICAgdGhpcy5fX2Vudk5vZGUuZ2Fpbi5saW5lYXJSYW1wVG9WYWx1ZUF0VGltZSgwLCB0aW1lICsgdGhpcy5mYWRlVGltZSk7XG4gICAgICAgIHRoaXMuX19idWZmZXJTb3VyY2Uuc3RvcCh0aW1lICsgdGhpcy5mYWRlVGltZSk7XG5cbiAgICAgICAgdGhpcy5fX2J1ZmZlclNvdXJjZSA9IG51bGw7XG4gICAgICAgIHRoaXMuX19lbnZOb2RlID0gbnVsbDtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBUaW1lRW5naW5lIG1ldGhvZCAoc3BlZWQtY29udHJvbGxlZCBpbnRlcmZhY2UpXG5cbiAgfSwge1xuICAgIGtleTogJ3N5bmNTcGVlZCcsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHN5bmNTcGVlZCh0aW1lLCBwb3NpdGlvbiwgc3BlZWQpIHtcbiAgICAgIHZhciBzZWVrID0gYXJndW1lbnRzLmxlbmd0aCA+IDMgJiYgYXJndW1lbnRzWzNdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbM10gOiBmYWxzZTtcblxuICAgICAgdmFyIGxhc3RTcGVlZCA9IHRoaXMuX19zcGVlZDtcblxuICAgICAgaWYgKHNwZWVkICE9PSBsYXN0U3BlZWQgfHwgc2Vlaykge1xuICAgICAgICBpZiAoc2VlayB8fCBsYXN0U3BlZWQgKiBzcGVlZCA8IDApIHtcbiAgICAgICAgICB0aGlzLl9faGFsdCh0aW1lKTtcbiAgICAgICAgICB0aGlzLl9fc3RhcnQodGltZSwgcG9zaXRpb24sIHNwZWVkKTtcbiAgICAgICAgfSBlbHNlIGlmIChsYXN0U3BlZWQgPT09IDAgfHwgc2Vlaykge1xuICAgICAgICAgIHRoaXMuX19zdGFydCh0aW1lLCBwb3NpdGlvbiwgc3BlZWQpO1xuICAgICAgICB9IGVsc2UgaWYgKHNwZWVkID09PSAwKSB7XG4gICAgICAgICAgdGhpcy5fX2hhbHQodGltZSk7XG4gICAgICAgIH0gZWxzZSBpZiAodGhpcy5fX2J1ZmZlclNvdXJjZSkge1xuICAgICAgICAgIHRoaXMuX19idWZmZXJTb3VyY2UucGxheWJhY2tSYXRlLnNldFZhbHVlQXRUaW1lKHNwZWVkLCB0aW1lKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMuX19zcGVlZCA9IHNwZWVkO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFNldCB3aGV0aGVyIHRoZSBhdWRpbyBidWZmZXIgaXMgY29uc2lkZXJlZCBhcyBjeWNsaWNcbiAgICAgKiBAdHlwZSB7Qm9vbH1cbiAgICAgKiBAbmFtZSBjeWNsaWNcbiAgICAgKiBAbWVtYmVyb2YgUGxheWVyRW5naW5lXG4gICAgICogQGluc3RhbmNlXG4gICAgICovXG5cbiAgfSwge1xuICAgIGtleTogJ2N5Y2xpYycsXG4gICAgc2V0OiBmdW5jdGlvbiBzZXQoY3ljbGljKSB7XG4gICAgICBpZiAoY3ljbGljICE9PSB0aGlzLl9fY3ljbGljKSB7XG4gICAgICAgIHZhciB0aW1lID0gdGhpcy5jdXJyZW50VGltZTtcbiAgICAgICAgdmFyIHBvc2l0aW9uID0gdGhpcy5jdXJyZW50b3NpdGlvbjtcblxuICAgICAgICB0aGlzLl9faGFsdCh0aW1lKTtcbiAgICAgICAgdGhpcy5fX2N5Y2xpYyA9IGN5Y2xpYztcblxuICAgICAgICBpZiAodGhpcy5fX3NwZWVkICE9PSAwKSB0aGlzLl9fc3RhcnQodGltZSwgcG9zaXRpb24sIHRoaXMuX19zcGVlZCk7XG4gICAgICB9XG4gICAgfSxcbiAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgIHJldHVybiB0aGlzLl9fY3ljbGljO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIExpbmVhciBnYWluIGZhY3RvclxuICAgICAqIEB0eXBlIHtOdW1iZXJ9XG4gICAgICogQG5hbWUgZ2FpblxuICAgICAqIEBtZW1iZXJvZiBQbGF5ZXJFbmdpbmVcbiAgICAgKiBAaW5zdGFuY2VcbiAgICAgKi9cblxuICB9LCB7XG4gICAga2V5OiAnZ2FpbicsXG4gICAgc2V0OiBmdW5jdGlvbiBzZXQodmFsdWUpIHtcbiAgICAgIHZhciB0aW1lID0gdGhpcy5jdXJyZW50VGltZTtcbiAgICAgIHRoaXMuX19nYWluTm9kZS5nYWluLmNhbmNlbFNjaGVkdWxlZFZhbHVlcyh0aW1lKTtcbiAgICAgIHRoaXMuX19nYWluTm9kZS5nYWluLnNldFZhbHVlQXRUaW1lKHRoaXMuX19nYWluTm9kZS5nYWluLnZhbHVlLCB0aW1lKTtcbiAgICAgIHRoaXMuX19nYWluTm9kZS5nYWluLmxpbmVhclJhbXBUb1ZhbHVlQXRUaW1lKDAsIHRpbWUgKyB0aGlzLmZhZGVUaW1lKTtcbiAgICB9LFxuICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgcmV0dXJuIHRoaXMuX19nYWluTm9kZS5nYWluLnZhbHVlO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEdldCBidWZmZXIgZHVyYXRpb25cbiAgICAgKiBAdHlwZSB7TnVtYmVyfVxuICAgICAqIEBuYW1lIGJ1ZmZlckR1cmF0aW9uXG4gICAgICogQG1lbWJlcm9mIFBsYXllckVuZ2luZVxuICAgICAqIEBpbnN0YW5jZVxuICAgICAqIEByZWFkb25seVxuICAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6ICdidWZmZXJEdXJhdGlvbicsXG4gICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICBpZiAodGhpcy5idWZmZXIpIHJldHVybiB0aGlzLmJ1ZmZlci5kdXJhdGlvbjtcblxuICAgICAgcmV0dXJuIDA7XG4gICAgfVxuICB9XSk7XG4gIHJldHVybiBQbGF5ZXJFbmdpbmU7XG59KF9BdWRpb1RpbWVFbmdpbmUzLmRlZmF1bHQpO1xuXG5leHBvcnRzLmRlZmF1bHQgPSBQbGF5ZXJFbmdpbmU7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247Y2hhcnNldD11dGYtODtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJbEJzWVhsbGNrVnVaMmx1WlM1cWN5SmRMQ0p1WVcxbGN5STZXeUp2Y0hSUGNrUmxaaUlzSW05d2RDSXNJbVJsWmlJc0luVnVaR1ZtYVc1bFpDSXNJbEJzWVhsbGNrVnVaMmx1WlNJc0ltOXdkR2x2Ym5NaUxDSmhkV1JwYjBOdmJuUmxlSFFpTENKMGNtRnVjM0J2Y25RaUxDSmlkV1ptWlhJaUxDSm1ZV1JsVkdsdFpTSXNJbDlmZEdsdFpTSXNJbDlmY0c5emFYUnBiMjRpTENKZlgzTndaV1ZrSWl3aVgxOWlkV1ptWlhKVGIzVnlZMlVpTENKZlgyVnVkazV2WkdVaUxDSmZYMmRoYVc1T2IyUmxJaXdpWTNKbFlYUmxSMkZwYmlJc0ltZGhhVzRpTENKMllXeDFaU0lzSWw5ZlkzbGpiR2xqSWl3aVkzbGpiR2xqSWl3aWIzVjBjSFYwVG05a1pTSXNJblJwYldVaUxDSndiM05wZEdsdmJpSXNJbk53WldWa0lpd2lZblZtWm1WeVJIVnlZWFJwYjI0aUxDSmtkWEpoZEdsdmJpSXNJbkJvWVhObElpd2lUV0YwYUNJc0ltWnNiMjl5SWl3aWMyVjBWbUZzZFdWQmRGUnBiV1VpTENKc2FXNWxZWEpTWVcxd1ZHOVdZV3gxWlVGMFZHbHRaU0lzSW1OdmJtNWxZM1FpTENKamNtVmhkR1ZDZFdabVpYSlRiM1Z5WTJVaUxDSndiR0Y1WW1GamExSmhkR1VpTENKc2IyOXdJaXdpYkc5dmNGTjBZWEowSWl3aWJHOXZjRVZ1WkNJc0luTjBZWEowSWl3aVkyRnVZMlZzVTJOb1pXUjFiR1ZrVm1Gc2RXVnpJaXdpYzNSdmNDSXNJbk5sWldzaUxDSnNZWE4wVTNCbFpXUWlMQ0pmWDJoaGJIUWlMQ0pmWDNOMFlYSjBJaXdpWTNWeWNtVnVkRlJwYldVaUxDSmpkWEp5Wlc1MGIzTnBkR2x2YmlJc0lrRjFaR2x2VkdsdFpVVnVaMmx1WlNKZExDSnRZWEJ3YVc1bmN5STZJanM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdRVUZCUVRzN096czdPMEZCUlVFc1UwRkJVMEVzVVVGQlZDeERRVUZyUWtNc1IwRkJiRUlzUlVGQmRVSkRMRWRCUVhaQ0xFVkJRVFJDTzBGQlF6RkNMRTFCUVVkRUxGRkJRVkZGTEZOQlFWZ3NSVUZEUlN4UFFVRlBSaXhIUVVGUU96dEJRVVZHTEZOQlFVOURMRWRCUVZBN1FVRkRSRHM3UVVGRlJEczdPenM3T3pzN096czdPenM3T3pzN096czdTVUZ0UWsxRkxGazdPenRCUVVOS0xEQkNRVUV3UWp0QlFVRkJMRkZCUVdSRExFOUJRV01zZFVWQlFVb3NSVUZCU1R0QlFVRkJPenRCUVVGQkxHdEtRVU5zUWtFc1VVRkJVVU1zV1VGRVZUczdRVUZIZUVJc1ZVRkJTME1zVTBGQlRDeEhRVUZwUWl4SlFVRnFRaXhEUVVoM1FpeERRVWRFT3p0QlFVVjJRanM3T3pzN096czdPMEZCVTBFc1ZVRkJTME1zVFVGQlRDeEhRVUZqVWl4VFFVRlRTeXhSUVVGUlJ5eE5RVUZxUWl4RlFVRjVRaXhKUVVGNlFpeERRVUZrT3p0QlFVVkJPenM3T3pzN096czdRVUZUUVN4VlFVRkxReXhSUVVGTUxFZEJRV2RDVkN4VFFVRlRTeXhSUVVGUlNTeFJRVUZxUWl4RlFVRXlRaXhMUVVFelFpeERRVUZvUWpzN1FVRkZRU3hWUVVGTFF5eE5RVUZNTEVkQlFXTXNRMEZCWkR0QlFVTkJMRlZCUVV0RExGVkJRVXdzUjBGQmEwSXNRMEZCYkVJN1FVRkRRU3hWUVVGTFF5eFBRVUZNTEVkQlFXVXNRMEZCWmpzN1FVRkZRU3hWUVVGTFF5eGpRVUZNTEVkQlFYTkNMRWxCUVhSQ08wRkJRMEVzVlVGQlMwTXNVMEZCVEN4SFFVRnBRaXhKUVVGcVFqczdRVUZGUVN4VlFVRkxReXhWUVVGTUxFZEJRV3RDTEUxQlFVdFVMRmxCUVV3c1EwRkJhMEpWTEZWQlFXeENMRVZCUVd4Q08wRkJRMEVzVlVGQlMwUXNWVUZCVEN4RFFVRm5Ra1VzU1VGQmFFSXNRMEZCY1VKRExFdEJRWEpDTEVkQlFUWkNiRUlzVTBGQlUwc3NVVUZCVVZrc1NVRkJha0lzUlVGQmRVSXNRMEZCZGtJc1EwRkJOMEk3TzBGQlJVRXNWVUZCUzBVc1VVRkJUQ3hIUVVGblFtNUNMRk5CUVZOTExGRkJRVkZsTEUxQlFXcENMRVZCUVhsQ0xFdEJRWHBDTEVOQlFXaENPenRCUVVWQkxGVkJRVXRETEZWQlFVd3NSMEZCYTBJc1RVRkJTMDRzVlVGQmRrSTdRVUYyUTNkQ08wRkJkME42UWpzN096czBRa0ZGVDA4c1NTeEZRVUZOUXl4UkxFVkJRVlZETEVzc1JVRkJUenRCUVVNM1FpeFZRVUZKYkVJc1pVRkJaU3hMUVVGTFFTeFpRVUY0UWpzN1FVRkZRU3hWUVVGSkxFdEJRVXRGTEUxQlFWUXNSVUZCYVVJN1FVRkRaaXhaUVVGSmFVSXNhVUpCUVdsQ0xFdEJRVXRxUWl4TlFVRk1MRU5CUVZsclFpeFJRVUZxUXpzN1FVRkZRU3haUVVGSkxFdEJRVXRRTEZGQlFVd3NTMEZCYTBKSkxGZEJRVmNzUTBGQldDeEpRVUZuUWtFc1dVRkJXVVVzWTBGQk9VTXNRMEZCU2l4RlFVRnRSVHRCUVVOcVJTeGpRVUZKUlN4UlFVRlJTaXhYUVVGWFJTeGpRVUYyUWp0QlFVTkJSaXh4UWtGQlZ5eERRVUZEU1N4UlFVRlJReXhMUVVGTFF5eExRVUZNTEVOQlFWZEdMRXRCUVZnc1EwRkJWQ3hKUVVFNFFrWXNZMEZCZWtNN1FVRkRSRHM3UVVGRlJDeFpRVUZKUml4WlFVRlpMRU5CUVZvc1NVRkJhVUpCTEZkQlFWZEZMR05CUVRWQ0xFbEJRVGhEUkN4UlFVRlJMRU5CUVRGRUxFVkJRVFpFTzBGQlF6TkVMR1ZCUVV0V0xGTkJRVXdzUjBGQmFVSlNMR0ZCUVdGVkxGVkJRV0lzUlVGQmFrSTdRVUZEUVN4bFFVRkxSaXhUUVVGTUxFTkJRV1ZITEVsQlFXWXNRMEZCYjBKaExHTkJRWEJDTEVOQlFXMURMRU5CUVc1RExFVkJRWE5EVWl4SlFVRjBRenRCUVVOQkxHVkJRVXRTTEZOQlFVd3NRMEZCWlVjc1NVRkJaaXhEUVVGdlFtTXNkVUpCUVhCQ0xFTkJRVFJETEVOQlFUVkRMRVZCUVN0RFZDeFBRVUZQTEV0QlFVdGlMRkZCUVRORU8wRkJRMEVzWlVGQlMwc3NVMEZCVEN4RFFVRmxhMElzVDBGQlppeERRVUYxUWl4TFFVRkxha0lzVlVGQk5VSTdPMEZCUlVFc1pVRkJTMFlzWTBGQlRDeEhRVUZ6UWxBc1lVRkJZVEpDTEd0Q1FVRmlMRVZCUVhSQ08wRkJRMEVzWlVGQlMzQkNMR05CUVV3c1EwRkJiMEpNTEUxQlFYQkNMRWRCUVRaQ0xFdEJRVXRCTEUxQlFXeERPMEZCUTBFc1pVRkJTMHNzWTBGQlRDeERRVUZ2UW5GQ0xGbEJRWEJDTEVOQlFXbERhRUlzUzBGQmFrTXNSMEZCZVVOTkxFdEJRWHBETzBGQlEwRXNaVUZCUzFnc1kwRkJUQ3hEUVVGdlFuTkNMRWxCUVhCQ0xFZEJRVEpDTEV0QlFVdG9RaXhSUVVGb1F6dEJRVU5CTEdWQlFVdE9MR05CUVV3c1EwRkJiMEoxUWl4VFFVRndRaXhIUVVGblF5eERRVUZvUXp0QlFVTkJMR1ZCUVV0MlFpeGpRVUZNTEVOQlFXOUNkMElzVDBGQmNFSXNSMEZCT0VKYUxHTkJRVGxDTzBGQlEwRXNaVUZCUzFvc1kwRkJUQ3hEUVVGdlFubENMRXRCUVhCQ0xFTkJRVEJDYUVJc1NVRkJNVUlzUlVGQlowTkRMRkZCUVdoRE8wRkJRMEVzWlVGQlMxWXNZMEZCVEN4RFFVRnZRbTFDTEU5QlFYQkNMRU5CUVRSQ0xFdEJRVXRzUWl4VFFVRnFRenRCUVVORU8wRkJRMFk3UVVGRFJqczdPekpDUVVWTlVTeEpMRVZCUVUwN1FVRkRXQ3hWUVVGSkxFdEJRVXRVTEdOQlFWUXNSVUZCZVVJN1FVRkRka0lzWVVGQlMwTXNVMEZCVEN4RFFVRmxSeXhKUVVGbUxFTkJRVzlDYzBJc2NVSkJRWEJDTEVOQlFUQkRha0lzU1VGQk1VTTdRVUZEUVN4aFFVRkxVaXhUUVVGTUxFTkJRV1ZITEVsQlFXWXNRMEZCYjBKaExHTkJRWEJDTEVOQlFXMURMRXRCUVV0b1FpeFRRVUZNTEVOQlFXVkhMRWxCUVdZc1EwRkJiMEpETEV0QlFYWkVMRVZCUVRoRVNTeEpRVUU1UkR0QlFVTkJMR0ZCUVV0U0xGTkJRVXdzUTBGQlpVY3NTVUZCWml4RFFVRnZRbU1zZFVKQlFYQkNMRU5CUVRSRExFTkJRVFZETEVWQlFTdERWQ3hQUVVGUExFdEJRVXRpTEZGQlFUTkVPMEZCUTBFc1lVRkJTMGtzWTBGQlRDeERRVUZ2UWpKQ0xFbEJRWEJDTEVOQlFYbENiRUlzVDBGQlR5eExRVUZMWWl4UlFVRnlRenM3UVVGRlFTeGhRVUZMU1N4alFVRk1MRWRCUVhOQ0xFbEJRWFJDTzBGQlEwRXNZVUZCUzBNc1UwRkJUQ3hIUVVGcFFpeEpRVUZxUWp0QlFVTkVPMEZCUTBZN08wRkJSVVE3T3pzN09FSkJRMVZSTEVrc1JVRkJUVU1zVVN4RlFVRlZReXhMTEVWQlFYRkNPMEZCUVVFc1ZVRkJaR2xDTEVsQlFXTXNkVVZCUVZBc1MwRkJUenM3UVVGRE4wTXNWVUZCU1VNc1dVRkJXU3hMUVVGTE9VSXNUMEZCY2tJN08wRkJSVUVzVlVGQlNWa3NWVUZCVld0Q0xGTkJRVllzU1VGQmRVSkVMRWxCUVROQ0xFVkJRV2xETzBGQlF5OUNMRmxCUVVsQkxGRkJRVkZETEZsQlFWbHNRaXhMUVVGYUxFZEJRVzlDTEVOQlFXaERMRVZCUVcxRE8wRkJRMnBETEdWQlFVdHRRaXhOUVVGTUxFTkJRVmx5UWl4SlFVRmFPMEZCUTBFc1pVRkJTM05DTEU5QlFVd3NRMEZCWVhSQ0xFbEJRV0lzUlVGQmJVSkRMRkZCUVc1Q0xFVkJRVFpDUXl4TFFVRTNRanRCUVVORUxGTkJTRVFzVFVGSFR5eEpRVUZKYTBJc1kwRkJZeXhEUVVGa0xFbEJRVzFDUkN4SlFVRjJRaXhGUVVFMlFqdEJRVU5zUXl4bFFVRkxSeXhQUVVGTUxFTkJRV0YwUWl4SlFVRmlMRVZCUVcxQ1F5eFJRVUZ1UWl4RlFVRTJRa01zUzBGQk4wSTdRVUZEUkN4VFFVWk5MRTFCUlVFc1NVRkJTVUVzVlVGQlZTeERRVUZrTEVWQlFXbENPMEZCUTNSQ0xHVkJRVXR0UWl4TlFVRk1MRU5CUVZseVFpeEpRVUZhTzBGQlEwUXNVMEZHVFN4TlFVVkJMRWxCUVVrc1MwRkJTMVFzWTBGQlZDeEZRVUY1UWp0QlFVTTVRaXhsUVVGTFFTeGpRVUZNTEVOQlFXOUNjVUlzV1VGQmNFSXNRMEZCYVVOS0xHTkJRV3BETEVOQlFXZEVUaXhMUVVGb1JDeEZRVUYxUkVZc1NVRkJka1E3UVVGRFJEczdRVUZGUkN4aFFVRkxWaXhQUVVGTUxFZEJRV1ZaTEV0QlFXWTdRVUZEUkR0QlFVTkdPenRCUVVWRU96czdPenM3T3pzN08zTkNRVTlYU2l4TkxFVkJRVkU3UVVGRGFrSXNWVUZCU1VFc1YwRkJWeXhMUVVGTFJDeFJRVUZ3UWl4RlFVRTRRanRCUVVNMVFpeFpRVUZKUnl4UFFVRlBMRXRCUVV0MVFpeFhRVUZvUWp0QlFVTkJMRmxCUVVsMFFpeFhRVUZYTEV0QlFVdDFRaXhqUVVGd1FqczdRVUZGUVN4aFFVRkxTQ3hOUVVGTUxFTkJRVmx5UWl4SlFVRmFPMEZCUTBFc1lVRkJTMGdzVVVGQlRDeEhRVUZuUWtNc1RVRkJhRUk3TzBGQlJVRXNXVUZCU1N4TFFVRkxVaXhQUVVGTUxFdEJRV2xDTEVOQlFYSkNMRVZCUTBVc1MwRkJTMmRETEU5QlFVd3NRMEZCWVhSQ0xFbEJRV0lzUlVGQmJVSkRMRkZCUVc1Q0xFVkJRVFpDTEV0QlFVdFlMRTlCUVd4RE8wRkJRMGc3UVVGRFJpeExPM2RDUVVWWk8wRkJRMWdzWVVGQlR5eExRVUZMVHl4UlFVRmFPMEZCUTBRN08wRkJSVVE3T3pzN096czdPenM3YzBKQlQxTkVMRXNzUlVGQlR6dEJRVU5rTEZWQlFVbEpMRTlCUVU4c1MwRkJTM1ZDTEZkQlFXaENPMEZCUTBFc1YwRkJTemxDTEZWQlFVd3NRMEZCWjBKRkxFbEJRV2hDTEVOQlFYRkNjMElzY1VKQlFYSkNMRU5CUVRKRGFrSXNTVUZCTTBNN1FVRkRRU3hYUVVGTFVDeFZRVUZNTEVOQlFXZENSU3hKUVVGb1FpeERRVUZ4UW1Fc1kwRkJja0lzUTBGQmIwTXNTMEZCUzJZc1ZVRkJUQ3hEUVVGblFrVXNTVUZCYUVJc1EwRkJjVUpETEV0QlFYcEVMRVZCUVdkRlNTeEpRVUZvUlR0QlFVTkJMRmRCUVV0UUxGVkJRVXdzUTBGQlowSkZMRWxCUVdoQ0xFTkJRWEZDWXl4MVFrRkJja0lzUTBGQk5rTXNRMEZCTjBNc1JVRkJaMFJVTEU5QlFVOHNTMEZCUzJJc1VVRkJOVVE3UVVGRFJDeExPM2RDUVVWVk8wRkJRMVFzWVVGQlR5eExRVUZMVFN4VlFVRk1MRU5CUVdkQ1JTeEpRVUZvUWl4RFFVRnhRa01zUzBGQk5VSTdRVUZEUkRzN1FVRkZSRHM3T3pzN096czdPenM3ZDBKQlVYRkNPMEZCUTI1Q0xGVkJRVWNzUzBGQlMxWXNUVUZCVWl4RlFVTkZMRTlCUVU4c1MwRkJTMEVzVFVGQlRDeERRVUZaYTBJc1VVRkJia0k3TzBGQlJVWXNZVUZCVHl4RFFVRlFPMEZCUTBRN096dEZRUzlLZDBKeFFpeDVRanM3YTBKQmEwdGFNME1zV1NJc0ltWnBiR1VpT2lKUWJHRjVaWEpGYm1kcGJtVXVhbk1pTENKemIzVnlZMlZ6UTI5dWRHVnVkQ0k2V3lKcGJYQnZjblFnUVhWa2FXOVVhVzFsUlc1bmFXNWxJR1p5YjIwZ0p5NHVMMk52Y21VdlFYVmthVzlVYVcxbFJXNW5hVzVsSnp0Y2JseHVablZ1WTNScGIyNGdiM0IwVDNKRVpXWW9iM0IwTENCa1pXWXBJSHRjYmlBZ2FXWW9iM0IwSUNFOVBTQjFibVJsWm1sdVpXUXBYRzRnSUNBZ2NtVjBkWEp1SUc5d2REdGNibHh1SUNCeVpYUjFjbTRnWkdWbU8xeHVmVnh1WEc0dktpcGNiaUFxSUZWelpXUWdkMmwwYUNCaElHSjFabVpsY2lCMGJ5QnpaWEoyWlNCaGRXUnBieUJtYVd4bGN5NWNiaUFxWEc0Z0tpQmJaWGhoYlhCc1pWMTdRR3hwYm1zZ2FIUjBjSE02THk5eVlYZG5hWFF1WTI5dEwzZGhkbVZ6YW5NdmQyRjJaWE10WVhWa2FXOHZiV0Z6ZEdWeUwyVjRZVzF3YkdWekwzQnNZWGxsY2kxbGJtZHBibVV2YVc1a1pYZ3VhSFJ0YkgxY2JpQXFYRzRnS2lCQVpYaDBaVzVrY3lCQmRXUnBiMVJwYldWRmJtZHBibVZjYmlBcUlFQmxlR0Z0Y0d4bFhHNGdLaUJwYlhCdmNuUWdLaUJoY3lCaGRXUnBieUJtY205dElDZDNZWFpsY3kxaGRXUnBieWM3WEc0Z0tpQmpiMjV6ZENCd2JHRjVaWEpGYm1kcGJtVWdQU0JoZFdScGJ5NVFiR0Y1WlhKRmJtZHBibVVvS1R0Y2JpQXFJR052Ym5OMElIQnNZWGxEYjI1MGNtOXNJRDBnYm1WM0lHRjFaR2x2TGxCc1lYbERiMjUwY205c0tIQnNZWGxsY2tWdVoybHVaU2s3WEc0Z0tseHVJQ29nY0d4aGVVTnZiblJ5YjJ3dWMzUmhjblFvS1R0Y2JpQXFYRzRnS2lCQWNHRnlZVzBnZTA5aWFtVmpkSDBnVzI5d2RHbHZibk05ZTMxZElDMGdSR1ZtWVhWc2RDQnZjSFJwYjI1elhHNGdLaUJBY0dGeVlXMGdlMDUxYldKbGNuMGdXMjl3ZEdsdmJuTXVZblZtWm1WeVBURmRJQzBnUVhWa2FXOGdZblZtWm1WeVhHNGdLaUJBY0dGeVlXMGdlMDUxYldKbGNuMGdXMjl3ZEdsdmJuTXVabUZrWlZScGJXVTlNQzR3TURWZElDMGdSbUZrWlNCMGFXMWxJR1p2Y2lCamFHRnBibWx1WnlCelpXZHRaVzUwYzF4dUlDb2dRSEJoY21GdElIdE9kVzFpWlhKOUlGdHZjSFJwYjI1ekxtTjVZMnhwWXoxbVlXeHpaVjBnTFNCTWIyOXdJRzF2WkdWY2JpQXFJRUJ3WVhKaGJTQjdUblZ0WW1WeWZTQmJiM0IwYVc5dWN5NW5ZV2x1UFRGZElDMGdSMkZwYmx4dUlDb3ZYRzVqYkdGemN5QlFiR0Y1WlhKRmJtZHBibVVnWlhoMFpXNWtjeUJCZFdScGIxUnBiV1ZGYm1kcGJtVWdlMXh1SUNCamIyNXpkSEoxWTNSdmNpaHZjSFJwYjI1eklEMGdlMzBwSUh0Y2JpQWdJQ0J6ZFhCbGNpaHZjSFJwYjI1ekxtRjFaR2x2UTI5dWRHVjRkQ2s3WEc1Y2JpQWdJQ0IwYUdsekxuUnlZVzV6Y0c5eWRDQTlJRzUxYkd3N0lDOHZJSE5sZENCM2FHVnVJR0ZrWkdWa0lIUnZJSFJ5WVc1emNHOXlkR1Z5WEc1Y2JpQWdJQ0F2S2lwY2JpQWdJQ0FnS2lCQmRXUnBieUJpZFdabVpYSmNiaUFnSUNBZ0tseHVJQ0FnSUNBcUlFQjBlWEJsSUh0QmRXUnBiMEoxWm1abGNuMWNiaUFnSUNBZ0tpQkFibUZ0WlNCaWRXWm1aWEpjYmlBZ0lDQWdLaUJBYldWdFltVnliMllnVUd4aGVXVnlSVzVuYVc1bFhHNGdJQ0FnSUNvZ1FHbHVjM1JoYm1ObFhHNGdJQ0FnSUNvZ1FHUmxabUYxYkhRZ2JuVnNiRnh1SUNBZ0lDQXFMMXh1SUNBZ0lIUm9hWE11WW5WbVptVnlJRDBnYjNCMFQzSkVaV1lvYjNCMGFXOXVjeTVpZFdabVpYSXNJRzUxYkd3cE8xeHVYRzRnSUNBZ0x5b3FYRzRnSUNBZ0lDb2dSbUZrWlNCMGFXMWxJR1p2Y2lCamFHRnBibWx1WnlCelpXZHRaVzUwY3lBb1pTNW5MaUJwYmlCemRHRnlkQ3dnYzNSdmNDd2dZVzVrSUhObFpXc3BYRzRnSUNBZ0lDcGNiaUFnSUNBZ0tpQkFkSGx3WlNCN1RuVnRZbVZ5ZlZ4dUlDQWdJQ0FxSUVCdVlXMWxJR1poWkdWVWFXMWxYRzRnSUNBZ0lDb2dRRzFsYldKbGNtOW1JRkJzWVhsbGNrVnVaMmx1WlZ4dUlDQWdJQ0FxSUVCcGJuTjBZVzVqWlZ4dUlDQWdJQ0FxSUVCa1pXWmhkV3gwSURBdU1EQTFYRzRnSUNBZ0lDb3ZYRzRnSUNBZ2RHaHBjeTVtWVdSbFZHbHRaU0E5SUc5d2RFOXlSR1ZtS0c5d2RHbHZibk11Wm1Ga1pWUnBiV1VzSURBdU1EQTFLVHRjYmx4dUlDQWdJSFJvYVhNdVgxOTBhVzFsSUQwZ01EdGNiaUFnSUNCMGFHbHpMbDlmY0c5emFYUnBiMjRnUFNBd08xeHVJQ0FnSUhSb2FYTXVYMTl6Y0dWbFpDQTlJREE3WEc1Y2JpQWdJQ0IwYUdsekxsOWZZblZtWm1WeVUyOTFjbU5sSUQwZ2JuVnNiRHRjYmlBZ0lDQjBhR2x6TGw5ZlpXNTJUbTlrWlNBOUlHNTFiR3c3WEc1Y2JpQWdJQ0IwYUdsekxsOWZaMkZwYms1dlpHVWdQU0IwYUdsekxtRjFaR2x2UTI5dWRHVjRkQzVqY21WaGRHVkhZV2x1S0NrN1hHNGdJQ0FnZEdocGN5NWZYMmRoYVc1T2IyUmxMbWRoYVc0dWRtRnNkV1VnUFNCdmNIUlBja1JsWmlodmNIUnBiMjV6TG1kaGFXNHNJREVwTzF4dVhHNGdJQ0FnZEdocGN5NWZYMk41WTJ4cFl5QTlJRzl3ZEU5eVJHVm1LRzl3ZEdsdmJuTXVZM2xqYkdsakxDQm1ZV3h6WlNrN1hHNWNiaUFnSUNCMGFHbHpMbTkxZEhCMWRFNXZaR1VnUFNCMGFHbHpMbDlmWjJGcGJrNXZaR1U3WEc0Z0lIMWNibHh1SUNCZlgzTjBZWEowS0hScGJXVXNJSEJ2YzJsMGFXOXVMQ0J6Y0dWbFpDa2dlMXh1SUNBZ0lIWmhjaUJoZFdScGIwTnZiblJsZUhRZ1BTQjBhR2x6TG1GMVpHbHZRMjl1ZEdWNGREdGNibHh1SUNBZ0lHbG1JQ2gwYUdsekxtSjFabVpsY2lrZ2UxeHVJQ0FnSUNBZ2RtRnlJR0oxWm1abGNrUjFjbUYwYVc5dUlEMGdkR2hwY3k1aWRXWm1aWEl1WkhWeVlYUnBiMjQ3WEc1Y2JpQWdJQ0FnSUdsbUlDaDBhR2x6TGw5ZlkzbGpiR2xqSUNZbUlDaHdiM05wZEdsdmJpQThJREFnZkh3Z2NHOXphWFJwYjI0Z1BqMGdZblZtWm1WeVJIVnlZWFJwYjI0cEtTQjdYRzRnSUNBZ0lDQWdJSFpoY2lCd2FHRnpaU0E5SUhCdmMybDBhVzl1SUM4Z1luVm1abVZ5UkhWeVlYUnBiMjQ3WEc0Z0lDQWdJQ0FnSUhCdmMybDBhVzl1SUQwZ0tIQm9ZWE5sSUMwZ1RXRjBhQzVtYkc5dmNpaHdhR0Z6WlNrcElDb2dZblZtWm1WeVJIVnlZWFJwYjI0N1hHNGdJQ0FnSUNCOVhHNWNiaUFnSUNBZ0lHbG1JQ2h3YjNOcGRHbHZiaUErUFNBd0lDWW1JSEJ2YzJsMGFXOXVJRHdnWW5WbVptVnlSSFZ5WVhScGIyNGdKaVlnYzNCbFpXUWdQaUF3S1NCN1hHNGdJQ0FnSUNBZ0lIUm9hWE11WDE5bGJuWk9iMlJsSUQwZ1lYVmthVzlEYjI1MFpYaDBMbU55WldGMFpVZGhhVzRvS1R0Y2JpQWdJQ0FnSUNBZ2RHaHBjeTVmWDJWdWRrNXZaR1V1WjJGcGJpNXpaWFJXWVd4MVpVRjBWR2x0WlNnd0xDQjBhVzFsS1R0Y2JpQWdJQ0FnSUNBZ2RHaHBjeTVmWDJWdWRrNXZaR1V1WjJGcGJpNXNhVzVsWVhKU1lXMXdWRzlXWVd4MVpVRjBWR2x0WlNneExDQjBhVzFsSUNzZ2RHaHBjeTVtWVdSbFZHbHRaU2s3WEc0Z0lDQWdJQ0FnSUhSb2FYTXVYMTlsYm5aT2IyUmxMbU52Ym01bFkzUW9kR2hwY3k1ZlgyZGhhVzVPYjJSbEtUdGNibHh1SUNBZ0lDQWdJQ0IwYUdsekxsOWZZblZtWm1WeVUyOTFjbU5sSUQwZ1lYVmthVzlEYjI1MFpYaDBMbU55WldGMFpVSjFabVpsY2xOdmRYSmpaU2dwTzF4dUlDQWdJQ0FnSUNCMGFHbHpMbDlmWW5WbVptVnlVMjkxY21ObExtSjFabVpsY2lBOUlIUm9hWE11WW5WbVptVnlPMXh1SUNBZ0lDQWdJQ0IwYUdsekxsOWZZblZtWm1WeVUyOTFjbU5sTG5Cc1lYbGlZV05yVW1GMFpTNTJZV3gxWlNBOUlITndaV1ZrTzF4dUlDQWdJQ0FnSUNCMGFHbHpMbDlmWW5WbVptVnlVMjkxY21ObExteHZiM0FnUFNCMGFHbHpMbDlmWTNsamJHbGpPMXh1SUNBZ0lDQWdJQ0IwYUdsekxsOWZZblZtWm1WeVUyOTFjbU5sTG14dmIzQlRkR0Z5ZENBOUlEQTdYRzRnSUNBZ0lDQWdJSFJvYVhNdVgxOWlkV1ptWlhKVGIzVnlZMlV1Ykc5dmNFVnVaQ0E5SUdKMVptWmxja1IxY21GMGFXOXVPMXh1SUNBZ0lDQWdJQ0IwYUdsekxsOWZZblZtWm1WeVUyOTFjbU5sTG5OMFlYSjBLSFJwYldVc0lIQnZjMmwwYVc5dUtUdGNiaUFnSUNBZ0lDQWdkR2hwY3k1ZlgySjFabVpsY2xOdmRYSmpaUzVqYjI1dVpXTjBLSFJvYVhNdVgxOWxiblpPYjJSbEtUdGNiaUFnSUNBZ0lIMWNiaUFnSUNCOVhHNGdJSDFjYmx4dUlDQmZYMmhoYkhRb2RHbHRaU2tnZTF4dUlDQWdJR2xtSUNoMGFHbHpMbDlmWW5WbVptVnlVMjkxY21ObEtTQjdYRzRnSUNBZ0lDQjBhR2x6TGw5ZlpXNTJUbTlrWlM1bllXbHVMbU5oYm1ObGJGTmphR1ZrZFd4bFpGWmhiSFZsY3loMGFXMWxLVHRjYmlBZ0lDQWdJSFJvYVhNdVgxOWxiblpPYjJSbExtZGhhVzR1YzJWMFZtRnNkV1ZCZEZScGJXVW9kR2hwY3k1ZlgyVnVkazV2WkdVdVoyRnBiaTUyWVd4MVpTd2dkR2x0WlNrN1hHNGdJQ0FnSUNCMGFHbHpMbDlmWlc1MlRtOWtaUzVuWVdsdUxteHBibVZoY2xKaGJYQlViMVpoYkhWbFFYUlVhVzFsS0RBc0lIUnBiV1VnS3lCMGFHbHpMbVpoWkdWVWFXMWxLVHRjYmlBZ0lDQWdJSFJvYVhNdVgxOWlkV1ptWlhKVGIzVnlZMlV1YzNSdmNDaDBhVzFsSUNzZ2RHaHBjeTVtWVdSbFZHbHRaU2s3WEc1Y2JpQWdJQ0FnSUhSb2FYTXVYMTlpZFdabVpYSlRiM1Z5WTJVZ1BTQnVkV3hzTzF4dUlDQWdJQ0FnZEdocGN5NWZYMlZ1ZGs1dlpHVWdQU0J1ZFd4c08xeHVJQ0FnSUgxY2JpQWdmVnh1WEc0Z0lDOHZJRlJwYldWRmJtZHBibVVnYldWMGFHOWtJQ2h6Y0dWbFpDMWpiMjUwY205c2JHVmtJR2x1ZEdWeVptRmpaU2xjYmlBZ2MzbHVZMU53WldWa0tIUnBiV1VzSUhCdmMybDBhVzl1TENCemNHVmxaQ3dnYzJWbGF5QTlJR1poYkhObEtTQjdYRzRnSUNBZ2RtRnlJR3hoYzNSVGNHVmxaQ0E5SUhSb2FYTXVYMTl6Y0dWbFpEdGNibHh1SUNBZ0lHbG1JQ2h6Y0dWbFpDQWhQVDBnYkdGemRGTndaV1ZrSUh4OElITmxaV3NwSUh0Y2JpQWdJQ0FnSUdsbUlDaHpaV1ZySUh4OElHeGhjM1JUY0dWbFpDQXFJSE53WldWa0lEd2dNQ2tnZTF4dUlDQWdJQ0FnSUNCMGFHbHpMbDlmYUdGc2RDaDBhVzFsS1R0Y2JpQWdJQ0FnSUNBZ2RHaHBjeTVmWDNOMFlYSjBLSFJwYldVc0lIQnZjMmwwYVc5dUxDQnpjR1ZsWkNrN1hHNGdJQ0FnSUNCOUlHVnNjMlVnYVdZZ0tHeGhjM1JUY0dWbFpDQTlQVDBnTUNCOGZDQnpaV1ZyS1NCN1hHNGdJQ0FnSUNBZ0lIUm9hWE11WDE5emRHRnlkQ2gwYVcxbExDQndiM05wZEdsdmJpd2djM0JsWldRcE8xeHVJQ0FnSUNBZ2ZTQmxiSE5sSUdsbUlDaHpjR1ZsWkNBOVBUMGdNQ2tnZTF4dUlDQWdJQ0FnSUNCMGFHbHpMbDlmYUdGc2RDaDBhVzFsS1R0Y2JpQWdJQ0FnSUgwZ1pXeHpaU0JwWmlBb2RHaHBjeTVmWDJKMVptWmxjbE52ZFhKalpTa2dlMXh1SUNBZ0lDQWdJQ0IwYUdsekxsOWZZblZtWm1WeVUyOTFjbU5sTG5Cc1lYbGlZV05yVW1GMFpTNXpaWFJXWVd4MVpVRjBWR2x0WlNoemNHVmxaQ3dnZEdsdFpTazdYRzRnSUNBZ0lDQjlYRzVjYmlBZ0lDQWdJSFJvYVhNdVgxOXpjR1ZsWkNBOUlITndaV1ZrTzF4dUlDQWdJSDFjYmlBZ2ZWeHVYRzRnSUM4cUtseHVJQ0FnS2lCVFpYUWdkMmhsZEdobGNpQjBhR1VnWVhWa2FXOGdZblZtWm1WeUlHbHpJR052Ym5OcFpHVnlaV1FnWVhNZ1kzbGpiR2xqWEc0Z0lDQXFJRUIwZVhCbElIdENiMjlzZlZ4dUlDQWdLaUJBYm1GdFpTQmplV05zYVdOY2JpQWdJQ29nUUcxbGJXSmxjbTltSUZCc1lYbGxja1Z1WjJsdVpWeHVJQ0FnS2lCQWFXNXpkR0Z1WTJWY2JpQWdJQ292WEc0Z0lITmxkQ0JqZVdOc2FXTW9ZM2xqYkdsaktTQjdYRzRnSUNBZ2FXWWdLR041WTJ4cFl5QWhQVDBnZEdocGN5NWZYMk41WTJ4cFl5a2dlMXh1SUNBZ0lDQWdkbUZ5SUhScGJXVWdQU0IwYUdsekxtTjFjbkpsYm5SVWFXMWxPMXh1SUNBZ0lDQWdkbUZ5SUhCdmMybDBhVzl1SUQwZ2RHaHBjeTVqZFhKeVpXNTBiM05wZEdsdmJqdGNibHh1SUNBZ0lDQWdkR2hwY3k1ZlgyaGhiSFFvZEdsdFpTazdYRzRnSUNBZ0lDQjBhR2x6TGw5ZlkzbGpiR2xqSUQwZ1kzbGpiR2xqTzF4dVhHNGdJQ0FnSUNCcFppQW9kR2hwY3k1ZlgzTndaV1ZrSUNFOVBTQXdLVnh1SUNBZ0lDQWdJQ0IwYUdsekxsOWZjM1JoY25Rb2RHbHRaU3dnY0c5emFYUnBiMjRzSUhSb2FYTXVYMTl6Y0dWbFpDazdYRzRnSUNBZ2ZWeHVJQ0I5WEc1Y2JpQWdaMlYwSUdONVkyeHBZeWdwSUh0Y2JpQWdJQ0J5WlhSMWNtNGdkR2hwY3k1ZlgyTjVZMnhwWXp0Y2JpQWdmVnh1WEc0Z0lDOHFLbHh1SUNBZ0tpQk1hVzVsWVhJZ1oyRnBiaUJtWVdOMGIzSmNiaUFnSUNvZ1FIUjVjR1VnZTA1MWJXSmxjbjFjYmlBZ0lDb2dRRzVoYldVZ1oyRnBibHh1SUNBZ0tpQkFiV1Z0WW1WeWIyWWdVR3hoZVdWeVJXNW5hVzVsWEc0Z0lDQXFJRUJwYm5OMFlXNWpaVnh1SUNBZ0tpOWNiaUFnYzJWMElHZGhhVzRvZG1Gc2RXVXBJSHRjYmlBZ0lDQjJZWElnZEdsdFpTQTlJSFJvYVhNdVkzVnljbVZ1ZEZScGJXVTdYRzRnSUNBZ2RHaHBjeTVmWDJkaGFXNU9iMlJsTG1kaGFXNHVZMkZ1WTJWc1UyTm9aV1IxYkdWa1ZtRnNkV1Z6S0hScGJXVXBPMXh1SUNBZ0lIUm9hWE11WDE5bllXbHVUbTlrWlM1bllXbHVMbk5sZEZaaGJIVmxRWFJVYVcxbEtIUm9hWE11WDE5bllXbHVUbTlrWlM1bllXbHVMblpoYkhWbExDQjBhVzFsS1R0Y2JpQWdJQ0IwYUdsekxsOWZaMkZwYms1dlpHVXVaMkZwYmk1c2FXNWxZWEpTWVcxd1ZHOVdZV3gxWlVGMFZHbHRaU2d3TENCMGFXMWxJQ3NnZEdocGN5NW1ZV1JsVkdsdFpTazdYRzRnSUgxY2JseHVJQ0JuWlhRZ1oyRnBiaWdwSUh0Y2JpQWdJQ0J5WlhSMWNtNGdkR2hwY3k1ZlgyZGhhVzVPYjJSbExtZGhhVzR1ZG1Gc2RXVTdYRzRnSUgxY2JseHVJQ0F2S2lwY2JpQWdJQ29nUjJWMElHSjFabVpsY2lCa2RYSmhkR2x2Ymx4dUlDQWdLaUJBZEhsd1pTQjdUblZ0WW1WeWZWeHVJQ0FnS2lCQWJtRnRaU0JpZFdabVpYSkVkWEpoZEdsdmJseHVJQ0FnS2lCQWJXVnRZbVZ5YjJZZ1VHeGhlV1Z5Ulc1bmFXNWxYRzRnSUNBcUlFQnBibk4wWVc1alpWeHVJQ0FnS2lCQWNtVmhaRzl1YkhsY2JpQWdJQ292WEc0Z0lHZGxkQ0JpZFdabVpYSkVkWEpoZEdsdmJpZ3BJSHRjYmlBZ0lDQnBaaWgwYUdsekxtSjFabVpsY2lsY2JpQWdJQ0FnSUhKbGRIVnliaUIwYUdsekxtSjFabVpsY2k1a2RYSmhkR2x2Ymp0Y2JseHVJQ0FnSUhKbGRIVnliaUF3TzF4dUlDQjlYRzU5WEc1Y2JtVjRjRzl5ZENCa1pXWmhkV3gwSUZCc1lYbGxja1Z1WjJsdVpUdGNiaUpkZlE9PSIsIid1c2Ugc3RyaWN0JztcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcblxudmFyIF9nZXRQcm90b3R5cGVPZiA9IHJlcXVpcmUoJ2JhYmVsLXJ1bnRpbWUvY29yZS1qcy9vYmplY3QvZ2V0LXByb3RvdHlwZS1vZicpO1xuXG52YXIgX2dldFByb3RvdHlwZU9mMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2dldFByb3RvdHlwZU9mKTtcblxudmFyIF9jbGFzc0NhbGxDaGVjazIgPSByZXF1aXJlKCdiYWJlbC1ydW50aW1lL2hlbHBlcnMvY2xhc3NDYWxsQ2hlY2snKTtcblxudmFyIF9jbGFzc0NhbGxDaGVjazMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9jbGFzc0NhbGxDaGVjazIpO1xuXG52YXIgX2NyZWF0ZUNsYXNzMiA9IHJlcXVpcmUoJ2JhYmVsLXJ1bnRpbWUvaGVscGVycy9jcmVhdGVDbGFzcycpO1xuXG52YXIgX2NyZWF0ZUNsYXNzMyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2NyZWF0ZUNsYXNzMik7XG5cbnZhciBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybjIgPSByZXF1aXJlKCdiYWJlbC1ydW50aW1lL2hlbHBlcnMvcG9zc2libGVDb25zdHJ1Y3RvclJldHVybicpO1xuXG52YXIgX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4zID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybjIpO1xuXG52YXIgX2luaGVyaXRzMiA9IHJlcXVpcmUoJ2JhYmVsLXJ1bnRpbWUvaGVscGVycy9pbmhlcml0cycpO1xuXG52YXIgX2luaGVyaXRzMyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2luaGVyaXRzMik7XG5cbnZhciBfQXVkaW9UaW1lRW5naW5lMiA9IHJlcXVpcmUoJy4uL2NvcmUvQXVkaW9UaW1lRW5naW5lJyk7XG5cbnZhciBfQXVkaW9UaW1lRW5naW5lMyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX0F1ZGlvVGltZUVuZ2luZTIpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG5mdW5jdGlvbiBvcHRPckRlZihvcHQsIGRlZikge1xuICBpZiAob3B0ICE9PSB1bmRlZmluZWQpIHJldHVybiBvcHQ7XG5cbiAgcmV0dXJuIGRlZjtcbn1cblxuZnVuY3Rpb24gZ2V0Q3VycmVudE9yUHJldmlvdXNJbmRleChzb3J0ZWRBcnJheSwgdmFsdWUpIHtcbiAgdmFyIGluZGV4ID0gYXJndW1lbnRzLmxlbmd0aCA+IDIgJiYgYXJndW1lbnRzWzJdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMl0gOiAtMTtcblxuICB2YXIgc2l6ZSA9IHNvcnRlZEFycmF5Lmxlbmd0aDtcblxuICBpZiAoc2l6ZSA+IDApIHtcbiAgICB2YXIgZmlyc3RWYWwgPSBzb3J0ZWRBcnJheVswXTtcbiAgICB2YXIgbGFzdFZhbCA9IHNvcnRlZEFycmF5W3NpemUgLSAxXTtcblxuICAgIGlmICh2YWx1ZSA8IGZpcnN0VmFsKSBpbmRleCA9IC0xO2Vsc2UgaWYgKHZhbHVlID49IGxhc3RWYWwpIGluZGV4ID0gc2l6ZSAtIDE7ZWxzZSB7XG4gICAgICBpZiAoaW5kZXggPCAwIHx8IGluZGV4ID49IHNpemUpIGluZGV4ID0gTWF0aC5mbG9vcigoc2l6ZSAtIDEpICogKHZhbHVlIC0gZmlyc3RWYWwpIC8gKGxhc3RWYWwgLSBmaXJzdFZhbCkpO1xuXG4gICAgICB3aGlsZSAoc29ydGVkQXJyYXlbaW5kZXhdID4gdmFsdWUpIHtcbiAgICAgICAgaW5kZXgtLTtcbiAgICAgIH13aGlsZSAoc29ydGVkQXJyYXlbaW5kZXggKyAxXSA8PSB2YWx1ZSkge1xuICAgICAgICBpbmRleCsrO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiBpbmRleDtcbn1cblxuZnVuY3Rpb24gZ2V0Q3VycmVudE9yTmV4dEluZGV4KHNvcnRlZEFycmF5LCB2YWx1ZSkge1xuICB2YXIgaW5kZXggPSBhcmd1bWVudHMubGVuZ3RoID4gMiAmJiBhcmd1bWVudHNbMl0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1syXSA6IC0xO1xuXG4gIHZhciBzaXplID0gc29ydGVkQXJyYXkubGVuZ3RoO1xuXG4gIGlmIChzaXplID4gMCkge1xuICAgIHZhciBmaXJzdFZhbCA9IHNvcnRlZEFycmF5WzBdO1xuICAgIHZhciBsYXN0VmFsID0gc29ydGVkQXJyYXlbc2l6ZSAtIDFdO1xuXG4gICAgaWYgKHZhbHVlIDw9IGZpcnN0VmFsKSBpbmRleCA9IDA7ZWxzZSBpZiAodmFsdWUgPj0gbGFzdFZhbCkgaW5kZXggPSBzaXplO2Vsc2Uge1xuICAgICAgaWYgKGluZGV4IDwgMCB8fCBpbmRleCA+PSBzaXplKSBpbmRleCA9IE1hdGguZmxvb3IoKHNpemUgLSAxKSAqICh2YWx1ZSAtIGZpcnN0VmFsKSAvIChsYXN0VmFsIC0gZmlyc3RWYWwpKTtcblxuICAgICAgd2hpbGUgKHNvcnRlZEFycmF5W2luZGV4XSA8IHZhbHVlKSB7XG4gICAgICAgIGluZGV4Kys7XG4gICAgICB9d2hpbGUgKHNvcnRlZEFycmF5W2luZGV4IC0gMV0gPj0gdmFsdWUpIHtcbiAgICAgICAgaW5kZXgtLTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICByZXR1cm4gaW5kZXg7XG59XG5cbi8qKlxuICogVXNlZCB3aXRoIGEgYnVmZmVyIHRvIHNlcnZlIGF1ZGlvIGZpbGVzIHZpYSBncmFudWxhciBzeW50aGVzaXMuXG4gKlxuICogVGhlIGVuZ2luZSBpbXBsZW1lbnRzIHRoZSBcInNjaGVkdWxlZFwiIGFuZCBcInRyYW5zcG9ydGVkXCIgaW50ZXJmYWNlcy5cbiAqIFdoZW4gXCJzY2hlZHVsZWRcIiwgdGhlIGVuZ2luZSAgZ2VuZXJhdGVzIHNlZ21lbnRzIG1vcmUgb3IgbGVzc8KgcGVyaW9kaWNhbGx5XG4gKiAoY29udHJvbGxlZCBieSB0aGUgcGVyaW9kQWJzLCBwZXJpb2RSZWwsIGFuZCBwZXJpb1ZhciBhdHRyaWJ1dGVzKS5cbiAqIFdoZW4gXCJ0cmFuc3BvcnRlZFwiLCB0aGUgZW5naW5lIGdlbmVyYXRlcyBzZWdtZW50cyBhdCB0aGUgcG9zaXRpb24gb2YgdGhlaXIgb25zZXQgdGltZS5cbiAqXG4gKiBFeGFtcGxlIHRoYXQgc2hvd3MgYSBgU2VnbWVudEVuZ2luZWAgd2l0aCBhIGZldyBwYXJhbWV0ZXIgY29udHJvbHMgcnVubmluZyBpbiBhIGBTY2hlZHVsZXJgLlxuICoge0BsaW5rIGh0dHBzOi8vcmF3Z2l0LmNvbS93YXZlc2pzL3dhdmVzLWF1ZGlvL21hc3Rlci9leGFtcGxlcy9zZWdtZW50LWVuZ2luZS9pbmRleC5odG1sfVxuICpcbiAqIEBleHRlbmRzIEF1ZGlvVGltZUVuZ2luZVxuICogQGV4YW1wbGVcbiAqIGltcG9ydCAqIGFzIGF1ZGlvIGZyb20gJ3dhdmVzLWF1ZGlvJztcbiAqIGNvbnN0IHNjaGVkdWxlciA9IGF1ZGlvLmdldFNjaGVkdWxlcigpO1xuICogY29uc3Qgc2VnbWVudEVuZ2luZSA9IG5ldyBhdWRpby5TZWdtZW50RW5naW5lKCk7XG4gKlxuICogc2NoZWR1bGVyLmFkZChzZWdtZW50RW5naW5lKTtcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gW29wdGlvbnM9e31dIC0gRGVmYXVsdCBvcHRpb25zXG4gKiBAcGFyYW0ge0F1ZGlvQnVmZmVyfSBbb3B0aW9ucy5idWZmZXI9bnVsbF0gLSBBdWRpbyBidWZmZXJcbiAqIEBwYXJhbSB7TnVtYmVyfSBbb3B0aW9ucy5wZXJpb2RBYnM9MF0gLSBBYnNvbHV0ZSBzZWdtZW50IHBlcmlvZCBpbiBzZWNcbiAqIEBwYXJhbSB7TnVtYmVyfSBbb3B0aW9ucy5wZXJpb2RSZWw9MV0gLSBTZWdtZW50IHBlcmlvZCByZWxhdGl2ZSB0byBpbnRlci1zZWdtZW50IGRpc3RhbmNlXG4gKiBAcGFyYW0ge051bWJlcn0gW29wdGlvbnMucGVyaW9kVmFyPTBdIC0gQW1vdXQgb2YgcmFuZG9tIHNlZ21lbnQgcGVyaW9kIHZhcmlhdGlvbiByZWxhdGl2ZVxuICogIHRvIHNlZ21lbnQgcGVyaW9kXG4gKiBAcGFyYW0ge051bWJlcn0gW29wdGlvbnMucGVyaW9kTWluPTAuMDAxXSAtIE1pbmltdW0gc2VnbWVudCBwZXJpb2RcbiAqIEBwYXJhbSB7TnVtYmVyfSBbb3B0aW9ucy5wb3NpdGlvbkFycmF5PVswLjBdXSAtIEFycmF5IG9mIHNlZ21lbnQgcG9zaXRpb25zIChvbnNldCB0aW1lc1xuICogIGluIGF1ZGlvIGJ1ZmZlcikgaW4gc2VjXG4gKiBAcGFyYW0ge051bWJlcn0gW29wdGlvbnMucG9zaXRpb25WYXI9MF0gLSBBbW91dCBvZiByYW5kb20gc2VnbWVudCBwb3NpdGlvbiB2YXJpYXRpb24gaW4gc2VjXG4gKiBAcGFyYW0ge051bWJlcn0gW29wdGlvbnMuZHVyYXRpb25BcnJheT1bMC4wXV0gLSBBcnJheSBvZiBzZWdtZW50IGR1cmF0aW9ucyBpbiBzZWNcbiAqIEBwYXJhbSB7TnVtYmVyfSBbb3B0aW9ucy5kdXJhdGlvbkFicz0wXSAtIEFic29sdXRlIHNlZ21lbnQgZHVyYXRpb24gaW4gc2VjXG4gKiBAcGFyYW0ge051bWJlcn0gW29wdGlvbnMuZHVyYXRpb25SZWw9MV0gLSBTZWdtZW50IGR1cmF0aW9uIHJlbGF0aXZlIHRvIGdpdmVuIHNlZ21lbnRcbiAqICBkdXJhdGlvbiBvciBpbnRlci1zZWdtZW50IGRpc3RhbmNlXG4gKiBAcGFyYW0ge0FycmF5fSBbb3B0aW9ucy5vZmZzZXRBcnJheT1bMC4wXV0gLSBBcnJheSBvZiBzZWdtZW50IG9mZnNldHMgaW4gc2VjXG4gKiBAcGFyYW0ge051bWJlcn0gW29wdGlvbnMub2Zmc2V0QWJzPS0wLjAwNV0gLSBBYnNvbHV0ZSBzZWdtZW50IG9mZnNldCBpbiBzZWNcbiAqIEBwYXJhbSB7TnVtYmVyfSBbb3B0aW9ucy5vZmZzZXRSZWw9MF0gLSBTZWdtZW50IG9mZnNldCByZWxhdGl2ZSB0byBzZWdtZW50IGR1cmF0aW9uXG4gKiBAcGFyYW0ge051bWJlcn0gW29wdGlvbnMuZGVsYXk9MC4wMDVdIC0gVGltZSBieSB3aGljaCBhbGwgc2VnbWVudHMgYXJlIGRlbGF5ZWQgKGVzcGVjaWFsbHlcbiAqICB0byByZWFsaXplIHNlZ21lbnQgb2Zmc2V0cylcbiAqIEBwYXJhbSB7TnVtYmVyfSBbb3B0aW9ucy5hdHRhY2tBYnM9MC4wMDVdIC0gQWJzb2x1dGUgYXR0YWNrIHRpbWUgaW4gc2VjXG4gKiBAcGFyYW0ge051bWJlcn0gW29wdGlvbnMuYXR0YWNrUmVsPTBdIC0gQXR0YWNrIHRpbWUgcmVsYXRpdmUgdG8gc2VnbWVudCBkdXJhdGlvblxuICogQHBhcmFtIHtOdW1iZXJ9IFtvcHRpb25zLnJlbGVhc2VBYnM9MC4wMDVdIC0gQWJzb2x1dGUgcmVsZWFzZSB0aW1lIGluIHNlY1xuICogQHBhcmFtIHtOdW1iZXJ9IFtvcHRpb25zLnJlbGVhc2VSZWw9MF0gLSBSZWxlYXNlIHRpbWUgcmVsYXRpdmUgdG8gc2VnbWVudCBkdXJhdGlvblxuICogQHBhcmFtIHtOdW1iZXJ9IFtvcHRpb25zLnJlc2FtcGxpbmc9MF0gLSBTZWdtZW50IHJlc2FtcGxpbmcgaW4gY2VudFxuICogQHBhcmFtIHtOdW1iZXJ9IFtvcHRpb25zLnJlc2FtcGxpbmdWYXI9MF0gLSBBbW91dCBvZiByYW5kb20gcmVzYW1wbGluZyB2YXJpYXRpb24gaW4gY2VudFxuICogQHBhcmFtIHtOdW1iZXJ9IFtvcHRpb25zLmdhaW49MV0gLSBMaW5lYXIgZ2FpbiBmYWN0b3JcbiAqIEBwYXJhbSB7TnVtYmVyfSBbb3B0aW9ucy5hYm9ydFRpbWU9MC4wMDVdIC0gZmFkZS1vdXQgdGltZSB3aGVuIGFib3J0ZWRcbiAqIEBwYXJhbSB7TnVtYmVyfSBbb3B0aW9ucy5zZWdtZW50SW5kZXg9MF0gLSBJbmRleCBvZiB0aGUgc2VnbWVudCB0byBzeW50aGVzaXplIChpLmUuIG9mXG4gKiAgdGhpcy5wb3NpdGlvbkFycmF5L2R1cmF0aW9uQXJyYXkvb2Zmc2V0QXJyYXkpXG4gKiBAcGFyYW0ge0Jvb2x9IFtvcHRpb25zLmN5Y2xpYz1mYWxzZV0gLSBXaGV0aGVyIHRoZSBhdWRpbyBidWZmZXIgYW5kIHNlZ21lbnQgaW5kaWNlcyBhcmVcbiAqICBjb25zaWRlcmVkIGFzIGN5Y2xpY1xuICogQHBhcmFtIHtOdW1iZXJ9IFtvcHRpb25zLndyYXBBcm91bmRFeHRlbnNpb249MF0gLSBQb3J0aW9uIGF0IHRoZSBlbmQgb2YgdGhlIGF1ZGlvIGJ1ZmZlclxuICogIHRoYXQgaGFzIGJlZW4gY29waWVkIGZyb20gdGhlIGJlZ2lubmluZyB0byBhc3N1cmUgY3ljbGljIGJlaGF2aW9yXG4gKi9cblxudmFyIFNlZ21lbnRFbmdpbmUgPSBmdW5jdGlvbiAoX0F1ZGlvVGltZUVuZ2luZSkge1xuICAoMCwgX2luaGVyaXRzMy5kZWZhdWx0KShTZWdtZW50RW5naW5lLCBfQXVkaW9UaW1lRW5naW5lKTtcblxuICBmdW5jdGlvbiBTZWdtZW50RW5naW5lKCkge1xuICAgIHZhciBvcHRpb25zID0gYXJndW1lbnRzLmxlbmd0aCA+IDAgJiYgYXJndW1lbnRzWzBdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMF0gOiB7fTtcbiAgICAoMCwgX2NsYXNzQ2FsbENoZWNrMy5kZWZhdWx0KSh0aGlzLCBTZWdtZW50RW5naW5lKTtcblxuICAgIC8qKlxuICAgICAqIEF1ZGlvIGJ1ZmZlclxuICAgICAqIEBuYW1lIGJ1ZmZlclxuICAgICAqIEB0eXBlIHtBdWRpb0J1ZmZlcn1cbiAgICAgKiBAZGVmYXVsdCBudWxsXG4gICAgICogQG1lbWJlcm9mIFNlZ21lbnRFbmdpbmVcbiAgICAgKiBAaW5zdGFuY2VcbiAgICAgKi9cbiAgICB2YXIgX3RoaXMgPSAoMCwgX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4zLmRlZmF1bHQpKHRoaXMsIChTZWdtZW50RW5naW5lLl9fcHJvdG9fXyB8fCAoMCwgX2dldFByb3RvdHlwZU9mMi5kZWZhdWx0KShTZWdtZW50RW5naW5lKSkuY2FsbCh0aGlzLCBvcHRpb25zLmF1ZGlvQ29udGV4dCkpO1xuXG4gICAgX3RoaXMuYnVmZmVyID0gb3B0T3JEZWYob3B0aW9ucy5idWZmZXIsIG51bGwpO1xuXG4gICAgLyoqXG4gICAgICogQWJzb2x1dGUgc2VnbWVudCBwZXJpb2QgaW4gc2VjXG4gICAgICogQG5hbWUgcGVyaW9kQWJzXG4gICAgICogQHR5cGUge051bWJlcn1cbiAgICAgKiBAZGVmYXVsdCAwXG4gICAgICogQG1lbWJlcm9mIFNlZ21lbnRFbmdpbmVcbiAgICAgKiBAaW5zdGFuY2VcbiAgICAgKi9cbiAgICBfdGhpcy5wZXJpb2RBYnMgPSBvcHRPckRlZihvcHRpb25zLnBlcmlvZEFicywgMCk7XG5cbiAgICAvKipcbiAgICAgKiBTZWdtZW50IHBlcmlvZCByZWxhdGl2ZSB0byBpbnRlci1zZWdtZW50IGRpc3RhbmNlXG4gICAgICogQG5hbWUgcGVyaW9kUmVsXG4gICAgICogQHR5cGUge051bWJlcn1cbiAgICAgKiBAZGVmYXVsdCAxXG4gICAgICogQG1lbWJlcm9mIFNlZ21lbnRFbmdpbmVcbiAgICAgKiBAaW5zdGFuY2VcbiAgICAgKi9cbiAgICBfdGhpcy5wZXJpb2RSZWwgPSBvcHRPckRlZihvcHRpb25zLnBlcmlvZFJlbCwgMSk7XG5cbiAgICAvKipcbiAgICAgKiBBbW91dCBvZiByYW5kb20gc2VnbWVudCBwZXJpb2QgdmFyaWF0aW9uIHJlbGF0aXZlIHRvIHNlZ21lbnQgcGVyaW9kXG4gICAgICogQG5hbWUgcGVyaW9kVmFyXG4gICAgICogQHR5cGUge051bWJlcn1cbiAgICAgKiBAZGVmYXVsdCAwXG4gICAgICogQG1lbWJlcm9mIFNlZ21lbnRFbmdpbmVcbiAgICAgKiBAaW5zdGFuY2VcbiAgICAgKi9cbiAgICBfdGhpcy5wZXJpb2RWYXIgPSBvcHRPckRlZihvcHRpb25zLnBlcmlvZFZhciwgMCk7XG5cbiAgICAvKipcbiAgICAgKiBNaW5pbXVtIHNlZ21lbnQgcGVyaW9kXG4gICAgICogQG5hbWUgcGVyaW9kTWluXG4gICAgICogQHR5cGUge051bWJlcn1cbiAgICAgKiBAZGVmYXVsdCAwLjAwMVxuICAgICAqIEBtZW1iZXJvZiBTZWdtZW50RW5naW5lXG4gICAgICogQGluc3RhbmNlXG4gICAgICovXG4gICAgX3RoaXMucGVyaW9kTWluID0gb3B0T3JEZWYob3B0aW9ucy5wZXJpb2RNaW4sIDAuMDAxKTtcblxuICAgIC8qKlxuICAgICAqIEFycmF5IG9mIHNlZ21lbnQgcG9zaXRpb25zIChvbnNldCB0aW1lcyBpbiBhdWRpbyBidWZmZXIpIGluIHNlY1xuICAgICAqIEBuYW1lIHBvc2l0aW9uQXJyYXlcbiAgICAgKiBAdHlwZSB7TnVtYmVyfVxuICAgICAqIEBkZWZhdWx0IFswLjBdXG4gICAgICogQG1lbWJlcm9mIFNlZ21lbnRFbmdpbmVcbiAgICAgKiBAaW5zdGFuY2VcbiAgICAgKi9cbiAgICBfdGhpcy5wb3NpdGlvbkFycmF5ID0gb3B0T3JEZWYob3B0aW9ucy5wb3NpdGlvbkFycmF5LCBbMC4wXSk7XG5cbiAgICAvKipcbiAgICAgKiBBbW91dCBvZiByYW5kb20gc2VnbWVudCBwb3NpdGlvbiB2YXJpYXRpb24gaW4gc2VjXG4gICAgICogQG5hbWUgcG9zaXRpb25WYXJcbiAgICAgKiBAdHlwZSB7TnVtYmVyfVxuICAgICAqIEBkZWZhdWx0IDBcbiAgICAgKiBAbWVtYmVyb2YgU2VnbWVudEVuZ2luZVxuICAgICAqIEBpbnN0YW5jZVxuICAgICAqL1xuICAgIF90aGlzLnBvc2l0aW9uVmFyID0gb3B0T3JEZWYob3B0aW9ucy5wb3NpdGlvblZhciwgMCk7XG5cbiAgICAvKipcbiAgICAgKiBBcnJheSBvZiBzZWdtZW50IGR1cmF0aW9ucyBpbiBzZWNcbiAgICAgKiBAbmFtZSBkdXJhdGlvbkFycmF5XG4gICAgICogQHR5cGUge051bWJlcn1cbiAgICAgKiBAZGVmYXVsdCBbMC4wXVxuICAgICAqIEBtZW1iZXJvZiBTZWdtZW50RW5naW5lXG4gICAgICogQGluc3RhbmNlXG4gICAgICovXG4gICAgX3RoaXMuZHVyYXRpb25BcnJheSA9IG9wdE9yRGVmKG9wdGlvbnMuZHVyYXRpb25BcnJheSwgWzAuMF0pO1xuXG4gICAgLyoqXG4gICAgICogQWJzb2x1dGUgc2VnbWVudCBkdXJhdGlvbiBpbiBzZWNcbiAgICAgKiBAbmFtZSBkdXJhdGlvbkFic1xuICAgICAqIEB0eXBlIHtOdW1iZXJ9XG4gICAgICogQGRlZmF1bHQgMFxuICAgICAqIEBtZW1iZXJvZiBTZWdtZW50RW5naW5lXG4gICAgICogQGluc3RhbmNlXG4gICAgICovXG4gICAgX3RoaXMuZHVyYXRpb25BYnMgPSBvcHRPckRlZihvcHRpb25zLmR1cmF0aW9uQWJzLCAwKTtcblxuICAgIC8qKlxuICAgICAqIFNlZ21lbnQgZHVyYXRpb24gcmVsYXRpdmUgdG8gZ2l2ZW4gc2VnbWVudCBkdXJhdGlvbiBvciBpbnRlci1zZWdtZW50IGRpc3RhbmNlXG4gICAgICogQG5hbWUgZHVyYXRpb25SZWxcbiAgICAgKiBAdHlwZSB7TnVtYmVyfVxuICAgICAqIEBkZWZhdWx0IDFcbiAgICAgKiBAbWVtYmVyb2YgU2VnbWVudEVuZ2luZVxuICAgICAqIEBpbnN0YW5jZVxuICAgICAqL1xuICAgIF90aGlzLmR1cmF0aW9uUmVsID0gb3B0T3JEZWYob3B0aW9ucy5kdXJhdGlvblJlbCwgMSk7XG5cbiAgICAvKipcbiAgICAgKiBBcnJheSBvZiBzZWdtZW50IG9mZnNldHMgaW4gc2VjXG4gICAgICpcbiAgICAgKiBvZmZzZXQgPiAwOiB0aGUgc2VnbWVudCdzIHJlZmVyZW5jZSBwb3NpdGlvbiBpcyBhZnRlciB0aGUgZ2l2ZW4gc2VnbWVudCBwb3NpdGlvblxuICAgICAqIG9mZnNldCA8IDA6IHRoZSBnaXZlbiBzZWdtZW50IHBvc2l0aW9uIGlzIHRoZSBzZWdtZW50J3MgcmVmZXJlbmNlIHBvc2l0aW9uXG4gICAgICogYW5kIHRoZSBkdXJhdGlvbiBoYXMgdG8gYmUgY29ycmVjdGVkIGJ5IHRoZSBvZmZzZXRcbiAgICAgKlxuICAgICAqIEBuYW1lIG9mZnNldEFycmF5XG4gICAgICogQHR5cGUge0FycmF5fVxuICAgICAqIEBkZWZhdWx0IFswLjBdXG4gICAgICogQG1lbWJlcm9mIFNlZ21lbnRFbmdpbmVcbiAgICAgKiBAaW5zdGFuY2VcbiAgICAgKi9cbiAgICBfdGhpcy5vZmZzZXRBcnJheSA9IG9wdE9yRGVmKG9wdGlvbnMub2Zmc2V0QXJyYXksIFswLjBdKTtcblxuICAgIC8qKlxuICAgICAqIEFic29sdXRlIHNlZ21lbnQgb2Zmc2V0IGluIHNlY1xuICAgICAqIEBuYW1lIG9mZnNldEFic1xuICAgICAqIEB0eXBlIHtOdW1iZXJ9XG4gICAgICogQGRlZmF1bHQgLTAuMDA1XG4gICAgICogQG1lbWJlcm9mIFNlZ21lbnRFbmdpbmVcbiAgICAgKiBAaW5zdGFuY2VcbiAgICAgKi9cbiAgICBfdGhpcy5vZmZzZXRBYnMgPSBvcHRPckRlZihvcHRpb25zLm9mZnNldEFicywgLTAuMDA1KTtcblxuICAgIC8qKlxuICAgICAqIFNlZ21lbnQgb2Zmc2V0IHJlbGF0aXZlIHRvIHNlZ21lbnQgZHVyYXRpb25cbiAgICAgKiBAbmFtZSBvZmZzZXRSZWxcbiAgICAgKiBAdHlwZSB7TnVtYmVyfVxuICAgICAqIEBkZWZhdWx0IDBcbiAgICAgKiBAbWVtYmVyb2YgU2VnbWVudEVuZ2luZVxuICAgICAqIEBpbnN0YW5jZVxuICAgICAqL1xuICAgIF90aGlzLm9mZnNldFJlbCA9IG9wdE9yRGVmKG9wdGlvbnMub2Zmc2V0UmVsLCAwKTtcblxuICAgIC8qKlxuICAgICAqIFRpbWUgYnkgd2hpY2ggYWxsIHNlZ21lbnRzIGFyZSBkZWxheWVkIChlc3BlY2lhbGx5IHRvIHJlYWxpemUgc2VnbWVudCBvZmZzZXRzKVxuICAgICAqIEBuYW1lIGRlbGF5XG4gICAgICogQHR5cGUge051bWJlcn1cbiAgICAgKiBAZGVmYXVsdCAwLjAwNVxuICAgICAqIEBtZW1iZXJvZiBTZWdtZW50RW5naW5lXG4gICAgICogQGluc3RhbmNlXG4gICAgICovXG4gICAgX3RoaXMuZGVsYXkgPSBvcHRPckRlZihvcHRpb25zLmRlbGF5LCAwLjAwNSk7XG5cbiAgICAvKipcbiAgICAgKiBBYnNvbHV0ZSBhdHRhY2sgdGltZSBpbiBzZWNcbiAgICAgKiBAbmFtZSBhdHRhY2tBYnNcbiAgICAgKiBAdHlwZSB7TnVtYmVyfVxuICAgICAqIEBkZWZhdWx0IDAuMDA1XG4gICAgICogQG1lbWJlcm9mIFNlZ21lbnRFbmdpbmVcbiAgICAgKiBAaW5zdGFuY2VcbiAgICAgKi9cbiAgICBfdGhpcy5hdHRhY2tBYnMgPSBvcHRPckRlZihvcHRpb25zLmF0dGFja0FicywgMC4wMDUpO1xuXG4gICAgLyoqXG4gICAgICogQXR0YWNrIHRpbWUgcmVsYXRpdmUgdG8gc2VnbWVudCBkdXJhdGlvblxuICAgICAqIEBuYW1lIGF0dGFja1JlbFxuICAgICAqIEB0eXBlIHtOdW1iZXJ9XG4gICAgICogQGRlZmF1bHQgMFxuICAgICAqIEBtZW1iZXJvZiBTZWdtZW50RW5naW5lXG4gICAgICogQGluc3RhbmNlXG4gICAgICovXG4gICAgX3RoaXMuYXR0YWNrUmVsID0gb3B0T3JEZWYob3B0aW9ucy5hdHRhY2tSZWwsIDApO1xuXG4gICAgLyoqXG4gICAgICogQWJzb2x1dGUgcmVsZWFzZSB0aW1lIGluIHNlY1xuICAgICAqIEBuYW1lIHJlbGVhc2VBYnNcbiAgICAgKiBAdHlwZSB7TnVtYmVyfVxuICAgICAqIEBkZWZhdWx0IDAuMDA1XG4gICAgICogQG1lbWJlcm9mIFNlZ21lbnRFbmdpbmVcbiAgICAgKiBAaW5zdGFuY2VcbiAgICAgKi9cbiAgICBfdGhpcy5yZWxlYXNlQWJzID0gb3B0T3JEZWYob3B0aW9ucy5yZWxlYXNlQWJzLCAwLjAwNSk7XG5cbiAgICAvKipcbiAgICAgKiBSZWxlYXNlIHRpbWUgcmVsYXRpdmUgdG8gc2VnbWVudCBkdXJhdGlvblxuICAgICAqIEBuYW1lIHJlbGVhc2VSZWxcbiAgICAgKiBAdHlwZSB7TnVtYmVyfVxuICAgICAqIEBkZWZhdWx0IDBcbiAgICAgKiBAbWVtYmVyb2YgU2VnbWVudEVuZ2luZVxuICAgICAqIEBpbnN0YW5jZVxuICAgICAqL1xuICAgIF90aGlzLnJlbGVhc2VSZWwgPSBvcHRPckRlZihvcHRpb25zLnJlbGVhc2VSZWwsIDApO1xuXG4gICAgLyoqXG4gICAgICogU2VnbWVudCByZXNhbXBsaW5nIGluIGNlbnRcbiAgICAgKiBAbmFtZSByZXNhbXBsaW5nXG4gICAgICogQHR5cGUge051bWJlcn1cbiAgICAgKiBAZGVmYXVsdCAwXG4gICAgICogQG1lbWJlcm9mIFNlZ21lbnRFbmdpbmVcbiAgICAgKiBAaW5zdGFuY2VcbiAgICAgKi9cbiAgICBfdGhpcy5yZXNhbXBsaW5nID0gb3B0T3JEZWYob3B0aW9ucy5yZXNhbXBsaW5nLCAwKTtcblxuICAgIC8qKlxuICAgICAqIEFtb3V0IG9mIHJhbmRvbSByZXNhbXBsaW5nIHZhcmlhdGlvbiBpbiBjZW50XG4gICAgICogQG5hbWUgcmVzYW1wbGluZ1ZhclxuICAgICAqIEB0eXBlIHtOdW1iZXJ9XG4gICAgICogQGRlZmF1bHQgMFxuICAgICAqIEBtZW1iZXJvZiBTZWdtZW50RW5naW5lXG4gICAgICogQGluc3RhbmNlXG4gICAgICovXG4gICAgX3RoaXMucmVzYW1wbGluZ1ZhciA9IG9wdE9yRGVmKG9wdGlvbnMucmVzYW1wbGluZ1ZhciwgMCk7XG5cbiAgICAvKipcbiAgICAgKiBMaW5lYXIgZ2FpbiBmYWN0b3JcbiAgICAgKiBAbmFtZSBnYWluXG4gICAgICogQHR5cGUge051bWJlcn1cbiAgICAgKiBAZGVmYXVsdCAxXG4gICAgICogQG1lbWJlcm9mIFNlZ21lbnRFbmdpbmVcbiAgICAgKiBAaW5zdGFuY2VcbiAgICAgKi9cbiAgICBfdGhpcy5nYWluID0gb3B0T3JEZWYob3B0aW9ucy5nYWluLCAxKTtcblxuICAgIC8qKlxuICAgICAqIEluZGV4IG9mIHRoZSBzZWdtZW50IHRvIHN5bnRoZXNpemUgKGkuZS4gb2YgdGhpcy5wb3NpdGlvbkFycmF5L2R1cmF0aW9uQXJyYXkvb2Zmc2V0QXJyYXkpXG4gICAgICogQG5hbWUgc2VnbWVudEluZGV4XG4gICAgICogQHR5cGUge051bWJlcn1cbiAgICAgKiBAZGVmYXVsdCAwXG4gICAgICogQG1lbWJlcm9mIFNlZ21lbnRFbmdpbmVcbiAgICAgKiBAaW5zdGFuY2VcbiAgICAgKi9cbiAgICBfdGhpcy5zZWdtZW50SW5kZXggPSBvcHRPckRlZihvcHRpb25zLnNlZ21lbnRJbmRleCwgMCk7XG5cbiAgICAvKipcbiAgICAgKiBXaGV0aGVyIHRoZSBhdWRpbyBidWZmZXIgYW5kIHNlZ21lbnQgaW5kaWNlcyBhcmUgY29uc2lkZXJlZCBhcyBjeWNsaWNcbiAgICAgKiBAbmFtZSBjeWNsaWNcbiAgICAgKiBAdHlwZSB7Qm9vbH1cbiAgICAgKiBAZGVmYXVsdCBmYWxzZVxuICAgICAqIEBtZW1iZXJvZiBTZWdtZW50RW5naW5lXG4gICAgICogQGluc3RhbmNlXG4gICAgICovXG4gICAgX3RoaXMuY3ljbGljID0gb3B0T3JEZWYob3B0aW9ucy5jeWNsaWMsIGZhbHNlKTtcbiAgICBfdGhpcy5fX2N5Y2xpY09mZnNldCA9IDA7XG5cbiAgICAvKipcbiAgICAgKiBXaGV0aGVyIHRoZSBsYXN0IHNlZ21lbnQgaXMgYWJvcnRlZCB3aGVuIHRyaWdnZXJpbmcgdGhlIG5leHRcbiAgICAgKiBAbmFtZSBtb25vcGhvbmljXG4gICAgICogQHR5cGUge051bWJlcn1cbiAgICAgKiBAZGVmYXVsdCBmYWxzZVxuICAgICAqIEBtZW1iZXJvZiBTZWdtZW50RW5naW5lXG4gICAgICogQGluc3RhbmNlXG4gICAgICovXG4gICAgX3RoaXMubW9ub3Bob25pYyA9IG9wdE9yRGVmKG9wdGlvbnMubW9ub3Bob25pYywgZmFsc2UpO1xuICAgIF90aGlzLl9fY3VycmVudFNyYyA9IG51bGw7XG4gICAgX3RoaXMuX19jdXJyZW50RW52ID0gbnVsbDtcbiAgICBfdGhpcy5fX3JlbGVhc2VTdGFydFRpbWUgPSAwO1xuICAgIF90aGlzLl9fY3VycmVudEdhaW4gPSAwO1xuICAgIF90aGlzLl9fY3VycmVudEVuZFRpbWUgPSAwO1xuXG4gICAgLyoqXG4gICAgICogRmFkZS1vdXQgdGltZSAod2hlbiBhYm9ydGVkKVxuICAgICAqIEBuYW1lIGFib3J0VGltZVxuICAgICAqIEB0eXBlIHtOdW1iZXJ9XG4gICAgICogQGRlZmF1bHQgMC4wMDVcbiAgICAgKiBAbWVtYmVyb2YgU2VnbWVudEVuZ2luZVxuICAgICAqIEBpbnN0YW5jZVxuICAgICAqL1xuICAgIF90aGlzLmFib3J0VGltZSA9IG9wdE9yRGVmKG9wdGlvbnMuYWJvcnRUaW1lLCAwLjAwNSk7XG5cbiAgICAvKipcbiAgICAgKiBQb3J0aW9uIGF0IHRoZSBlbmQgb2YgdGhlIGF1ZGlvIGJ1ZmZlciB0aGF0IGhhcyBiZWVuIGNvcGllZCBmcm9tIHRoZSBiZWdpbm5pbmcgdG8gYXNzdXJlIGN5Y2xpYyBiZWhhdmlvclxuICAgICAqIEBuYW1lIHdyYXBBcm91bmRFeHRlbnNpb25cbiAgICAgKiBAdHlwZSB7TnVtYmVyfVxuICAgICAqIEBkZWZhdWx0IDBcbiAgICAgKiBAbWVtYmVyb2YgU2VnbWVudEVuZ2luZVxuICAgICAqIEBpbnN0YW5jZVxuICAgICAqL1xuICAgIF90aGlzLndyYXBBcm91bmRFeHRlbnNpb24gPSBvcHRPckRlZihvcHRpb25zLndyYXBBcm91bmRFeHRlbnNpb24sIDApO1xuXG4gICAgX3RoaXMub3V0cHV0Tm9kZSA9IF90aGlzLmF1ZGlvQ29udGV4dC5jcmVhdGVHYWluKCk7XG4gICAgcmV0dXJuIF90aGlzO1xuICB9XG5cbiAgLyoqXG4gICAqIEdldCBidWZmZXIgZHVyYXRpb24gKGV4Y2x1ZGluZyB3cmFwQXJvdW5kRXh0ZW5zaW9uKVxuICAgKlxuICAgKiBAdHlwZSB7TnVtYmVyfVxuICAgKiBAZGVmYXVsdCAwXG4gICAqIEBtZW1iZXJvZiBTZWdtZW50RW5naW5lXG4gICAqIEBpbnN0YW5jZVxuICAgKi9cblxuXG4gICgwLCBfY3JlYXRlQ2xhc3MzLmRlZmF1bHQpKFNlZ21lbnRFbmdpbmUsIFt7XG4gICAga2V5OiAnYWR2YW5jZVRpbWUnLFxuXG5cbiAgICAvLyBUaW1lRW5naW5lIG1ldGhvZCAodHJhbnNwb3J0ZWQgaW50ZXJmYWNlKVxuICAgIHZhbHVlOiBmdW5jdGlvbiBhZHZhbmNlVGltZSh0aW1lKSB7XG4gICAgICB0aW1lID0gTWF0aC5tYXgodGltZSwgdGhpcy5hdWRpb0NvbnRleHQuY3VycmVudFRpbWUpO1xuICAgICAgcmV0dXJuIHRpbWUgKyB0aGlzLnRyaWdnZXIodGltZSk7XG4gICAgfVxuXG4gICAgLy8gVGltZUVuZ2luZSBtZXRob2QgKHRyYW5zcG9ydGVkIGludGVyZmFjZSlcblxuICB9LCB7XG4gICAga2V5OiAnc3luY1Bvc2l0aW9uJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gc3luY1Bvc2l0aW9uKHRpbWUsIHBvc2l0aW9uLCBzcGVlZCkge1xuICAgICAgdmFyIGluZGV4ID0gdGhpcy5zZWdtZW50SW5kZXg7XG4gICAgICB2YXIgY3ljbGljT2Zmc2V0ID0gMDtcbiAgICAgIHZhciBidWZmZXJEdXJhdGlvbiA9IHRoaXMuYnVmZmVyRHVyYXRpb247XG5cbiAgICAgIGlmICh0aGlzLmN5Y2xpYykge1xuICAgICAgICB2YXIgY3ljbGVzID0gcG9zaXRpb24gLyBidWZmZXJEdXJhdGlvbjtcblxuICAgICAgICBjeWNsaWNPZmZzZXQgPSBNYXRoLmZsb29yKGN5Y2xlcykgKiBidWZmZXJEdXJhdGlvbjtcbiAgICAgICAgcG9zaXRpb24gLT0gY3ljbGljT2Zmc2V0O1xuICAgICAgfVxuXG4gICAgICBpZiAoc3BlZWQgPiAwKSB7XG4gICAgICAgIGluZGV4ID0gZ2V0Q3VycmVudE9yTmV4dEluZGV4KHRoaXMucG9zaXRpb25BcnJheSwgcG9zaXRpb24pO1xuXG4gICAgICAgIGlmIChpbmRleCA+PSB0aGlzLnBvc2l0aW9uQXJyYXkubGVuZ3RoKSB7XG4gICAgICAgICAgaW5kZXggPSAwO1xuICAgICAgICAgIGN5Y2xpY09mZnNldCArPSBidWZmZXJEdXJhdGlvbjtcblxuICAgICAgICAgIGlmICghdGhpcy5jeWNsaWMpIHJldHVybiBJbmZpbml0eTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIGlmIChzcGVlZCA8IDApIHtcbiAgICAgICAgaW5kZXggPSBnZXRDdXJyZW50T3JQcmV2aW91c0luZGV4KHRoaXMucG9zaXRpb25BcnJheSwgcG9zaXRpb24pO1xuXG4gICAgICAgIGlmIChpbmRleCA8IDApIHtcbiAgICAgICAgICBpbmRleCA9IHRoaXMucG9zaXRpb25BcnJheS5sZW5ndGggLSAxO1xuICAgICAgICAgIGN5Y2xpY09mZnNldCAtPSBidWZmZXJEdXJhdGlvbjtcblxuICAgICAgICAgIGlmICghdGhpcy5jeWNsaWMpIHJldHVybiAtSW5maW5pdHk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiBJbmZpbml0eTtcbiAgICAgIH1cblxuICAgICAgdGhpcy5zZWdtZW50SW5kZXggPSBpbmRleDtcbiAgICAgIHRoaXMuX19jeWNsaWNPZmZzZXQgPSBjeWNsaWNPZmZzZXQ7XG5cbiAgICAgIHJldHVybiBjeWNsaWNPZmZzZXQgKyB0aGlzLnBvc2l0aW9uQXJyYXlbaW5kZXhdO1xuICAgIH1cblxuICAgIC8vIFRpbWVFbmdpbmUgbWV0aG9kICh0cmFuc3BvcnRlZCBpbnRlcmZhY2UpXG5cbiAgfSwge1xuICAgIGtleTogJ2FkdmFuY2VQb3NpdGlvbicsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGFkdmFuY2VQb3NpdGlvbih0aW1lLCBwb3NpdGlvbiwgc3BlZWQpIHtcbiAgICAgIHZhciBpbmRleCA9IHRoaXMuc2VnbWVudEluZGV4O1xuICAgICAgdmFyIGN5Y2xpY09mZnNldCA9IHRoaXMuX19jeWNsaWNPZmZzZXQ7XG5cbiAgICAgIHRoaXMudHJpZ2dlcih0aW1lKTtcblxuICAgICAgaWYgKHNwZWVkID4gMCkge1xuICAgICAgICBpbmRleCsrO1xuXG4gICAgICAgIGlmIChpbmRleCA+PSB0aGlzLnBvc2l0aW9uQXJyYXkubGVuZ3RoKSB7XG4gICAgICAgICAgaW5kZXggPSAwO1xuICAgICAgICAgIGN5Y2xpY09mZnNldCArPSB0aGlzLmJ1ZmZlckR1cmF0aW9uO1xuXG4gICAgICAgICAgaWYgKCF0aGlzLmN5Y2xpYykgcmV0dXJuIEluZmluaXR5O1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBpbmRleC0tO1xuXG4gICAgICAgIGlmIChpbmRleCA8IDApIHtcbiAgICAgICAgICBpbmRleCA9IHRoaXMucG9zaXRpb25BcnJheS5sZW5ndGggLSAxO1xuICAgICAgICAgIGN5Y2xpY09mZnNldCAtPSB0aGlzLmJ1ZmZlckR1cmF0aW9uO1xuXG4gICAgICAgICAgaWYgKCF0aGlzLmN5Y2xpYykgcmV0dXJuIC1JbmZpbml0eTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICB0aGlzLnNlZ21lbnRJbmRleCA9IGluZGV4O1xuICAgICAgdGhpcy5fX2N5Y2xpY09mZnNldCA9IGN5Y2xpY09mZnNldDtcblxuICAgICAgcmV0dXJuIGN5Y2xpY09mZnNldCArIHRoaXMucG9zaXRpb25BcnJheVtpbmRleF07XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVHJpZ2dlciBhIHNlZ21lbnQuXG4gICAgICogVGhpcyBmdW5jdGlvbiBjYW4gYmUgY2FsbGVkIGF0IGFueSB0aW1lICh3aGV0aGVyIHRoZSBlbmdpbmUgaXMgc2NoZWR1bGVkL3RyYW5zcG9ydGVkIG9yIG5vdClcbiAgICAgKiB0byBnZW5lcmF0ZSBhIHNpbmdsZSBzZWdtZW50IGFjY29yZGluZyB0byB0aGUgY3VycmVudCBzZWdtZW50IHBhcmFtZXRlcnMuXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gdGltZSBzZWdtZW50IHN5bnRoZXNpcyBhdWRpbyB0aW1lXG4gICAgICogQHJldHVybiB7TnVtYmVyfSBwZXJpb2QgdG8gbmV4dCBzZWdtZW50XG4gICAgICovXG5cbiAgfSwge1xuICAgIGtleTogJ3RyaWdnZXInLFxuICAgIHZhbHVlOiBmdW5jdGlvbiB0cmlnZ2VyKHRpbWUpIHtcbiAgICAgIHZhciBhdWRpb0NvbnRleHQgPSB0aGlzLmF1ZGlvQ29udGV4dDtcbiAgICAgIHZhciBzZWdtZW50VGltZSA9ICh0aW1lIHx8IGF1ZGlvQ29udGV4dC5jdXJyZW50VGltZSkgKyB0aGlzLmRlbGF5O1xuICAgICAgdmFyIHNlZ21lbnRQZXJpb2QgPSB0aGlzLnBlcmlvZEFicztcbiAgICAgIHZhciBzZWdtZW50SW5kZXggPSB0aGlzLnNlZ21lbnRJbmRleDtcblxuICAgICAgaWYgKHRoaXMuYnVmZmVyKSB7XG4gICAgICAgIHZhciBzZWdtZW50UG9zaXRpb24gPSAwLjA7XG4gICAgICAgIHZhciBzZWdtZW50RHVyYXRpb24gPSAwLjA7XG4gICAgICAgIHZhciBzZWdtZW50T2Zmc2V0ID0gMC4wO1xuICAgICAgICB2YXIgcmVzYW1wbGluZ1JhdGUgPSAxLjA7XG4gICAgICAgIHZhciBidWZmZXJEdXJhdGlvbiA9IHRoaXMuYnVmZmVyRHVyYXRpb247XG5cbiAgICAgICAgaWYgKHRoaXMuY3ljbGljKSBzZWdtZW50SW5kZXggPSBzZWdtZW50SW5kZXggJSB0aGlzLnBvc2l0aW9uQXJyYXkubGVuZ3RoO2Vsc2Ugc2VnbWVudEluZGV4ID0gTWF0aC5tYXgoMCwgTWF0aC5taW4oc2VnbWVudEluZGV4LCB0aGlzLnBvc2l0aW9uQXJyYXkubGVuZ3RoIC0gMSkpO1xuXG4gICAgICAgIGlmICh0aGlzLnBvc2l0aW9uQXJyYXkpIHNlZ21lbnRQb3NpdGlvbiA9IHRoaXMucG9zaXRpb25BcnJheVtzZWdtZW50SW5kZXhdIHx8IDA7XG5cbiAgICAgICAgaWYgKHRoaXMuZHVyYXRpb25BcnJheSkgc2VnbWVudER1cmF0aW9uID0gdGhpcy5kdXJhdGlvbkFycmF5W3NlZ21lbnRJbmRleF0gfHwgMDtcblxuICAgICAgICBpZiAodGhpcy5vZmZzZXRBcnJheSkgc2VnbWVudE9mZnNldCA9IHRoaXMub2Zmc2V0QXJyYXlbc2VnbWVudEluZGV4XSB8fCAwO1xuXG4gICAgICAgIC8vIGNhbGN1bGF0ZSByZXNhbXBsaW5nXG4gICAgICAgIGlmICh0aGlzLnJlc2FtcGxpbmcgIT09IDAgfHwgdGhpcy5yZXNhbXBsaW5nVmFyID4gMCkge1xuICAgICAgICAgIHZhciByYW5kb21SZXNhbXBsaW5nID0gKE1hdGgucmFuZG9tKCkgLSAwLjUpICogMi4wICogdGhpcy5yZXNhbXBsaW5nVmFyO1xuICAgICAgICAgIHJlc2FtcGxpbmdSYXRlID0gTWF0aC5wb3coMi4wLCAodGhpcy5yZXNhbXBsaW5nICsgcmFuZG9tUmVzYW1wbGluZykgLyAxMjAwLjApO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gY2FsY3VsYXRlIGludGVyLXNlZ21lbnQgZGlzdGFuY2VcbiAgICAgICAgaWYgKHNlZ21lbnREdXJhdGlvbiA9PT0gMCB8fCB0aGlzLnBlcmlvZFJlbCA+IDApIHtcbiAgICAgICAgICB2YXIgbmV4dFNlZ21lbnRJbmRleCA9IHNlZ21lbnRJbmRleCArIDE7XG4gICAgICAgICAgdmFyIG5leHRQb3NpdGlvbiwgbmV4dE9mZnNldDtcblxuICAgICAgICAgIGlmIChuZXh0U2VnbWVudEluZGV4ID09PSB0aGlzLnBvc2l0aW9uQXJyYXkubGVuZ3RoKSB7XG4gICAgICAgICAgICBpZiAodGhpcy5jeWNsaWMpIHtcbiAgICAgICAgICAgICAgbmV4dFBvc2l0aW9uID0gdGhpcy5wb3NpdGlvbkFycmF5WzBdICsgYnVmZmVyRHVyYXRpb247XG4gICAgICAgICAgICAgIG5leHRPZmZzZXQgPSB0aGlzLm9mZnNldEFycmF5WzBdO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgbmV4dFBvc2l0aW9uID0gYnVmZmVyRHVyYXRpb247XG4gICAgICAgICAgICAgIG5leHRPZmZzZXQgPSAwO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBuZXh0UG9zaXRpb24gPSB0aGlzLnBvc2l0aW9uQXJyYXlbbmV4dFNlZ21lbnRJbmRleF07XG4gICAgICAgICAgICBuZXh0T2Zmc2V0ID0gdGhpcy5vZmZzZXRBcnJheVtuZXh0U2VnbWVudEluZGV4XTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICB2YXIgaW50ZXJTZWdtZW50RGlzdGFuY2UgPSBuZXh0UG9zaXRpb24gLSBzZWdtZW50UG9zaXRpb247XG5cbiAgICAgICAgICAvLyBjb3JyZWN0IGludGVyLXNlZ21lbnQgZGlzdGFuY2UgYnkgb2Zmc2V0c1xuICAgICAgICAgIC8vICAgb2Zmc2V0ID4gMDogdGhlIHNlZ21lbnQncyByZWZlcmVuY2UgcG9zaXRpb24gaXMgYWZ0ZXIgdGhlIGdpdmVuIHNlZ21lbnQgcG9zaXRpb25cbiAgICAgICAgICBpZiAoc2VnbWVudE9mZnNldCA+IDApIGludGVyU2VnbWVudERpc3RhbmNlIC09IHNlZ21lbnRPZmZzZXQ7XG5cbiAgICAgICAgICBpZiAobmV4dE9mZnNldCA+IDApIGludGVyU2VnbWVudERpc3RhbmNlICs9IG5leHRPZmZzZXQ7XG5cbiAgICAgICAgICBpZiAoaW50ZXJTZWdtZW50RGlzdGFuY2UgPCAwKSBpbnRlclNlZ21lbnREaXN0YW5jZSA9IDA7XG5cbiAgICAgICAgICAvLyB1c2UgaW50ZXItc2VnbWVudCBkaXN0YW5jZSBpbnN0ZWFkIG9mIHNlZ21lbnQgZHVyYXRpb25cbiAgICAgICAgICBpZiAoc2VnbWVudER1cmF0aW9uID09PSAwKSBzZWdtZW50RHVyYXRpb24gPSBpbnRlclNlZ21lbnREaXN0YW5jZTtcblxuICAgICAgICAgIC8vIGNhbGN1bGF0ZSBwZXJpb2QgcmVsYXRpdmUgdG8gaW50ZXIgbWFya2VyIGRpc3RhbmNlXG4gICAgICAgICAgc2VnbWVudFBlcmlvZCArPSB0aGlzLnBlcmlvZFJlbCAqIGludGVyU2VnbWVudERpc3RhbmNlO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gYWRkIHJlbGF0aXZlIGFuZCBhYnNvbHV0ZSBzZWdtZW50IGR1cmF0aW9uXG4gICAgICAgIHNlZ21lbnREdXJhdGlvbiAqPSB0aGlzLmR1cmF0aW9uUmVsO1xuICAgICAgICBzZWdtZW50RHVyYXRpb24gKz0gdGhpcy5kdXJhdGlvbkFicztcblxuICAgICAgICAvLyBhZGQgcmVsYXRpdmUgYW5kIGFic29sdXRlIHNlZ21lbnQgb2Zmc2V0XG4gICAgICAgIHNlZ21lbnRPZmZzZXQgKj0gdGhpcy5vZmZzZXRSZWw7XG4gICAgICAgIHNlZ21lbnRPZmZzZXQgKz0gdGhpcy5vZmZzZXRBYnM7XG5cbiAgICAgICAgLy8gYXBwbHkgc2VnbWVudCBvZmZzZXRcbiAgICAgICAgLy8gICBvZmZzZXQgPiAwOiB0aGUgc2VnbWVudCdzIHJlZmVyZW5jZSBwb3NpdGlvbiBpcyBhZnRlciB0aGUgZ2l2ZW4gc2VnbWVudCBwb3NpdGlvblxuICAgICAgICAvLyAgIG9mZnNldCA8IDA6IHRoZSBnaXZlbiBzZWdtZW50IHBvc2l0aW9uIGlzIHRoZSBzZWdtZW50J3MgcmVmZXJlbmNlIHBvc2l0aW9uIGFuZCB0aGUgZHVyYXRpb24gaGFzIHRvIGJlIGNvcnJlY3RlZCBieSB0aGUgb2Zmc2V0XG4gICAgICAgIGlmIChzZWdtZW50T2Zmc2V0IDwgMCkge1xuICAgICAgICAgIHNlZ21lbnREdXJhdGlvbiAtPSBzZWdtZW50T2Zmc2V0O1xuICAgICAgICAgIHNlZ21lbnRQb3NpdGlvbiArPSBzZWdtZW50T2Zmc2V0O1xuICAgICAgICAgIHNlZ21lbnRUaW1lICs9IHNlZ21lbnRPZmZzZXQgLyByZXNhbXBsaW5nUmF0ZTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBzZWdtZW50VGltZSAtPSBzZWdtZW50T2Zmc2V0IC8gcmVzYW1wbGluZ1JhdGU7XG4gICAgICAgIH1cblxuICAgICAgICAvLyByYW5kb21pemUgc2VnbWVudCBwb3NpdGlvblxuICAgICAgICBpZiAodGhpcy5wb3NpdGlvblZhciA+IDApIHNlZ21lbnRQb3NpdGlvbiArPSAyLjAgKiAoTWF0aC5yYW5kb20oKSAtIDAuNSkgKiB0aGlzLnBvc2l0aW9uVmFyO1xuXG4gICAgICAgIC8vIHNob3J0ZW4gZHVyYXRpb24gb2Ygc2VnbWVudHMgb3ZlciB0aGUgZWRnZXMgb2YgdGhlIGJ1ZmZlclxuICAgICAgICBpZiAoc2VnbWVudFBvc2l0aW9uIDwgMCkge1xuICAgICAgICAgIC8vc2VnbWVudFRpbWUgLT0gZ3JhaW5Qb3NpdGlvbjsgaG0sIG5vdCBzdXJlIGlmIHdlIHdhbnQgdG8gZG8gdGhpc1xuICAgICAgICAgIHNlZ21lbnREdXJhdGlvbiArPSBzZWdtZW50UG9zaXRpb247XG4gICAgICAgICAgc2VnbWVudFBvc2l0aW9uID0gMDtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChzZWdtZW50UG9zaXRpb24gKyBzZWdtZW50RHVyYXRpb24gPiB0aGlzLmJ1ZmZlci5kdXJhdGlvbikgc2VnbWVudER1cmF0aW9uID0gdGhpcy5idWZmZXIuZHVyYXRpb24gLSBzZWdtZW50UG9zaXRpb247XG5cbiAgICAgICAgc2VnbWVudER1cmF0aW9uIC89IHJlc2FtcGxpbmdSYXRlO1xuXG4gICAgICAgIGlmICh0aGlzLm1vbm9waG9uaWMpIHRoaXMuYWJvcnQoc2VnbWVudFRpbWUpO1xuXG4gICAgICAgIC8vIG1ha2Ugc2VnbWVudFxuICAgICAgICBpZiAodGhpcy5nYWluID4gMCAmJiBzZWdtZW50RHVyYXRpb24gPiAwKSB7XG4gICAgICAgICAgLy8gbWFrZSBzZWdtZW50IGVudmVsb3BlXG4gICAgICAgICAgdmFyIGVudmVsb3BlID0gYXVkaW9Db250ZXh0LmNyZWF0ZUdhaW4oKTtcbiAgICAgICAgICB2YXIgYXR0YWNrID0gdGhpcy5hdHRhY2tBYnMgKyB0aGlzLmF0dGFja1JlbCAqIHNlZ21lbnREdXJhdGlvbjtcbiAgICAgICAgICB2YXIgcmVsZWFzZSA9IHRoaXMucmVsZWFzZUFicyArIHRoaXMucmVsZWFzZVJlbCAqIHNlZ21lbnREdXJhdGlvbjtcblxuICAgICAgICAgIGlmIChhdHRhY2sgKyByZWxlYXNlID4gc2VnbWVudER1cmF0aW9uKSB7XG4gICAgICAgICAgICB2YXIgZmFjdG9yID0gc2VnbWVudER1cmF0aW9uIC8gKGF0dGFjayArIHJlbGVhc2UpO1xuICAgICAgICAgICAgYXR0YWNrICo9IGZhY3RvcjtcbiAgICAgICAgICAgIHJlbGVhc2UgKj0gZmFjdG9yO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIHZhciBhdHRhY2tFbmRUaW1lID0gc2VnbWVudFRpbWUgKyBhdHRhY2s7XG4gICAgICAgICAgdmFyIHNlZ21lbnRFbmRUaW1lID0gc2VnbWVudFRpbWUgKyBzZWdtZW50RHVyYXRpb247XG4gICAgICAgICAgdmFyIHJlbGVhc2VTdGFydFRpbWUgPSBzZWdtZW50RW5kVGltZSAtIHJlbGVhc2U7XG5cbiAgICAgICAgICBlbnZlbG9wZS5nYWluLnZhbHVlID0gMDtcbiAgICAgICAgICBlbnZlbG9wZS5nYWluLnNldFZhbHVlQXRUaW1lKDAuMCwgc2VnbWVudFRpbWUpO1xuICAgICAgICAgIGVudmVsb3BlLmdhaW4ubGluZWFyUmFtcFRvVmFsdWVBdFRpbWUodGhpcy5nYWluLCBhdHRhY2tFbmRUaW1lKTtcblxuICAgICAgICAgIGlmIChyZWxlYXNlU3RhcnRUaW1lID4gYXR0YWNrRW5kVGltZSkgZW52ZWxvcGUuZ2Fpbi5zZXRWYWx1ZUF0VGltZSh0aGlzLmdhaW4sIHJlbGVhc2VTdGFydFRpbWUpO1xuXG4gICAgICAgICAgZW52ZWxvcGUuZ2Fpbi5saW5lYXJSYW1wVG9WYWx1ZUF0VGltZSgwLjAsIHNlZ21lbnRFbmRUaW1lKTtcbiAgICAgICAgICBlbnZlbG9wZS5jb25uZWN0KHRoaXMub3V0cHV0Tm9kZSk7XG5cbiAgICAgICAgICB0aGlzLl9fY3VycmVudEVudiA9IGVudmVsb3BlO1xuXG4gICAgICAgICAgLy8gbWFrZSBzb3VyY2VcbiAgICAgICAgICB2YXIgc291cmNlID0gYXVkaW9Db250ZXh0LmNyZWF0ZUJ1ZmZlclNvdXJjZSgpO1xuXG4gICAgICAgICAgc291cmNlLmJ1ZmZlciA9IHRoaXMuYnVmZmVyO1xuICAgICAgICAgIHNvdXJjZS5wbGF5YmFja1JhdGUudmFsdWUgPSByZXNhbXBsaW5nUmF0ZTtcbiAgICAgICAgICBzb3VyY2UuY29ubmVjdChlbnZlbG9wZSk7XG5cbiAgICAgICAgICBzb3VyY2Uuc3RhcnQoc2VnbWVudFRpbWUsIHNlZ21lbnRQb3NpdGlvbik7XG4gICAgICAgICAgc291cmNlLnN0b3Aoc2VnbWVudFRpbWUgKyBzZWdtZW50RHVyYXRpb24pO1xuXG4gICAgICAgICAgdGhpcy5fX2N1cnJlbnRTcmMgPSBzb3VyY2U7XG4gICAgICAgICAgdGhpcy5fX3JlbGVhc2VTdGFydFRpbWUgPSByZWxlYXNlU3RhcnRUaW1lO1xuICAgICAgICAgIHRoaXMuX19jdXJyZW50R2FpbiA9IHRoaXMuZ2FpbjtcbiAgICAgICAgICB0aGlzLl9fY3VycmVudEVuZFRpbWUgPSBzZWdtZW50RW5kVGltZTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICAvLyBzZWdtZW50IHBlcmlvZCByYW5kb24gdmFyaWF0aW9uXG4gICAgICBpZiAodGhpcy5wZXJpb2RWYXIgPiAwLjApIHNlZ21lbnRQZXJpb2QgKz0gMi4wICogKE1hdGgucmFuZG9tKCkgLSAwLjUpICogdGhpcy5wZXJpb2RWYXIgKiBzZWdtZW50UGVyaW9kO1xuXG4gICAgICByZXR1cm4gTWF0aC5tYXgodGhpcy5wZXJpb2RNaW4sIHNlZ21lbnRQZXJpb2QpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEFib3J0IHRoZSBjdXJyZW50IHNlZ21lbnQgYXQgZ2l2ZW4gdGltZSwgZmFkZSBvdXQgZHVyYXRpb25cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSB0aW1lIC0gYWJvcnQgdGltZVxuICAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6ICdhYm9ydCcsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGFib3J0KHRpbWUpIHtcbiAgICAgIHZhciBhdWRpb0NvbnRleHQgPSB0aGlzLmF1ZGlvQ29udGV4dDtcbiAgICAgIHZhciBlbmRUaW1lID0gdGhpcy5fX2N1cnJlbnRFbmRUaW1lO1xuICAgICAgdmFyIGFib3J0VGltZSA9IHRpbWUgfHwgYXVkaW9Db250ZXh0LmN1cnJlbnRUaW1lO1xuXG4gICAgICBpZiAoYWJvcnRUaW1lIDwgZW5kVGltZSkge1xuICAgICAgICB2YXIgc2VnbWVudEVuZFRpbWUgPSBNYXRoLm1pbihhYm9ydFRpbWUgKyB0aGlzLmFib3J0VGltZSwgZW5kVGltZSk7XG4gICAgICAgIHZhciBlbnZlbG9wZSA9IHRoaXMuX19jdXJyZW50RW52O1xuICAgICAgICB2YXIgY3VycmVudEdhaW5WYWx1ZSA9IHRoaXMuX19jdXJyZW50R2FpbjtcblxuICAgICAgICBpZiAoYWJvcnRUaW1lID4gdGhpcy5fX3JlbGVhc2VTdGFydFRpbWUpIHtcbiAgICAgICAgICB2YXIgcmVsZWFzZVN0YXJ0ID0gdGhpcy5fX3JlbGVhc2VTdGFydFRpbWU7XG4gICAgICAgICAgY3VycmVudEdhaW5WYWx1ZSAqPSAoYWJvcnRUaW1lIC0gcmVsZWFzZVN0YXJ0KSAvIChlbmRUaW1lIC0gcmVsZWFzZVN0YXJ0KTtcbiAgICAgICAgfVxuXG4gICAgICAgIGVudmVsb3BlLmdhaW4uY2FuY2VsU2NoZWR1bGVkVmFsdWVzKGFib3J0VGltZSk7XG4gICAgICAgIGVudmVsb3BlLmdhaW4uc2V0VmFsdWVBdFRpbWUoY3VycmVudEdhaW5WYWx1ZSwgYWJvcnRUaW1lKTtcbiAgICAgICAgZW52ZWxvcGUuZ2Fpbi5saW5lYXJSYW1wVG9WYWx1ZUF0VGltZSgwLCBzZWdtZW50RW5kVGltZSk7XG5cbiAgICAgICAgdGhpcy5fX2N1cnJlbnRTcmMgPSBudWxsO1xuICAgICAgICB0aGlzLl9fY3VycmVudEVudiA9IG51bGw7XG4gICAgICAgIHRoaXMuX19yZWxlYXNlU3RhcnRUaW1lID0gMDtcbiAgICAgICAgdGhpcy5fX2N1cnJlbnRHYWluID0gMDtcbiAgICAgICAgdGhpcy5fX2N1cnJlbnRFbmRUaW1lID0gMDtcbiAgICAgIH1cbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6ICdidWZmZXJEdXJhdGlvbicsXG4gICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICBpZiAodGhpcy5idWZmZXIpIHtcbiAgICAgICAgdmFyIGJ1ZmZlckR1cmF0aW9uID0gdGhpcy5idWZmZXIuZHVyYXRpb247XG5cbiAgICAgICAgaWYgKHRoaXMud3JhcEFyb3VuZEV4dGVuc2lvbikgYnVmZmVyRHVyYXRpb24gLT0gdGhpcy53cmFwQXJvdW5kRXh0ZW5zaW9uO1xuXG4gICAgICAgIHJldHVybiBidWZmZXJEdXJhdGlvbjtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIDA7XG4gICAgfVxuICB9XSk7XG4gIHJldHVybiBTZWdtZW50RW5naW5lO1xufShfQXVkaW9UaW1lRW5naW5lMy5kZWZhdWx0KTtcblxuZXhwb3J0cy5kZWZhdWx0ID0gU2VnbWVudEVuZ2luZTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtjaGFyc2V0PXV0Zi04O2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZ6SWpwYklsTmxaMjFsYm5SRmJtZHBibVV1YW5NaVhTd2libUZ0WlhNaU9sc2liM0IwVDNKRVpXWWlMQ0p2Y0hRaUxDSmtaV1lpTENKMWJtUmxabWx1WldRaUxDSm5aWFJEZFhKeVpXNTBUM0pRY21WMmFXOTFjMGx1WkdWNElpd2ljMjl5ZEdWa1FYSnlZWGtpTENKMllXeDFaU0lzSW1sdVpHVjRJaXdpYzJsNlpTSXNJbXhsYm1kMGFDSXNJbVpwY25OMFZtRnNJaXdpYkdGemRGWmhiQ0lzSWsxaGRHZ2lMQ0ptYkc5dmNpSXNJbWRsZEVOMWNuSmxiblJQY2s1bGVIUkpibVJsZUNJc0lsTmxaMjFsYm5SRmJtZHBibVVpTENKdmNIUnBiMjV6SWl3aVlYVmthVzlEYjI1MFpYaDBJaXdpWW5WbVptVnlJaXdpY0dWeWFXOWtRV0p6SWl3aWNHVnlhVzlrVW1Wc0lpd2ljR1Z5YVc5a1ZtRnlJaXdpY0dWeWFXOWtUV2x1SWl3aWNHOXphWFJwYjI1QmNuSmhlU0lzSW5CdmMybDBhVzl1Vm1GeUlpd2laSFZ5WVhScGIyNUJjbkpoZVNJc0ltUjFjbUYwYVc5dVFXSnpJaXdpWkhWeVlYUnBiMjVTWld3aUxDSnZabVp6WlhSQmNuSmhlU0lzSW05bVpuTmxkRUZpY3lJc0ltOW1abk5sZEZKbGJDSXNJbVJsYkdGNUlpd2lZWFIwWVdOclFXSnpJaXdpWVhSMFlXTnJVbVZzSWl3aWNtVnNaV0Z6WlVGaWN5SXNJbkpsYkdWaGMyVlNaV3dpTENKeVpYTmhiWEJzYVc1bklpd2ljbVZ6WVcxd2JHbHVaMVpoY2lJc0ltZGhhVzRpTENKelpXZHRaVzUwU1c1a1pYZ2lMQ0pqZVdOc2FXTWlMQ0pmWDJONVkyeHBZMDltWm5ObGRDSXNJbTF2Ym05d2FHOXVhV01pTENKZlgyTjFjbkpsYm5SVGNtTWlMQ0pmWDJOMWNuSmxiblJGYm5ZaUxDSmZYM0psYkdWaGMyVlRkR0Z5ZEZScGJXVWlMQ0pmWDJOMWNuSmxiblJIWVdsdUlpd2lYMTlqZFhKeVpXNTBSVzVrVkdsdFpTSXNJbUZpYjNKMFZHbHRaU0lzSW5keVlYQkJjbTkxYm1SRmVIUmxibk5wYjI0aUxDSnZkWFJ3ZFhST2IyUmxJaXdpWTNKbFlYUmxSMkZwYmlJc0luUnBiV1VpTENKdFlYZ2lMQ0pqZFhKeVpXNTBWR2x0WlNJc0luUnlhV2RuWlhJaUxDSndiM05wZEdsdmJpSXNJbk53WldWa0lpd2lZM2xqYkdsalQyWm1jMlYwSWl3aVluVm1abVZ5UkhWeVlYUnBiMjRpTENKamVXTnNaWE1pTENKSmJtWnBibWwwZVNJc0luTmxaMjFsYm5SVWFXMWxJaXdpYzJWbmJXVnVkRkJsY21sdlpDSXNJbk5sWjIxbGJuUlFiM05wZEdsdmJpSXNJbk5sWjIxbGJuUkVkWEpoZEdsdmJpSXNJbk5sWjIxbGJuUlBabVp6WlhRaUxDSnlaWE5oYlhCc2FXNW5VbUYwWlNJc0ltMXBiaUlzSW5KaGJtUnZiVkpsYzJGdGNHeHBibWNpTENKeVlXNWtiMjBpTENKd2IzY2lMQ0p1WlhoMFUyVm5iV1Z1ZEVsdVpHVjRJaXdpYm1WNGRGQnZjMmwwYVc5dUlpd2libVY0ZEU5bVpuTmxkQ0lzSW1sdWRHVnlVMlZuYldWdWRFUnBjM1JoYm1ObElpd2laSFZ5WVhScGIyNGlMQ0poWW05eWRDSXNJbVZ1ZG1Wc2IzQmxJaXdpWVhSMFlXTnJJaXdpY21Wc1pXRnpaU0lzSW1aaFkzUnZjaUlzSW1GMGRHRmphMFZ1WkZScGJXVWlMQ0p6WldkdFpXNTBSVzVrVkdsdFpTSXNJbkpsYkdWaGMyVlRkR0Z5ZEZScGJXVWlMQ0p6WlhSV1lXeDFaVUYwVkdsdFpTSXNJbXhwYm1WaGNsSmhiWEJVYjFaaGJIVmxRWFJVYVcxbElpd2lZMjl1Ym1WamRDSXNJbk52ZFhKalpTSXNJbU55WldGMFpVSjFabVpsY2xOdmRYSmpaU0lzSW5Cc1lYbGlZV05yVW1GMFpTSXNJbk4wWVhKMElpd2ljM1J2Y0NJc0ltVnVaRlJwYldVaUxDSmpkWEp5Wlc1MFIyRnBibFpoYkhWbElpd2ljbVZzWldGelpWTjBZWEowSWl3aVkyRnVZMlZzVTJOb1pXUjFiR1ZrVm1Gc2RXVnpJaXdpUVhWa2FXOVVhVzFsUlc1bmFXNWxJbDBzSW0xaGNIQnBibWR6SWpvaU96czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3p0QlFVRkJPenM3T3pzN1FVRkZRU3hUUVVGVFFTeFJRVUZVTEVOQlFXdENReXhIUVVGc1FpeEZRVUYxUWtNc1IwRkJka0lzUlVGQk5FSTdRVUZETVVJc1RVRkJTVVFzVVVGQlVVVXNVMEZCV2l4RlFVTkZMRTlCUVU5R0xFZEJRVkE3TzBGQlJVWXNVMEZCVDBNc1IwRkJVRHRCUVVORU96dEJRVVZFTEZOQlFWTkZMSGxDUVVGVUxFTkJRVzFEUXl4WFFVRnVReXhGUVVGblJFTXNTMEZCYUVRc1JVRkJiVVU3UVVGQlFTeE5RVUZhUXl4TFFVRlpMSFZGUVVGS0xFTkJRVU1zUTBGQlJ6czdRVUZEYWtVc1RVRkJTVU1zVDBGQlQwZ3NXVUZCV1Vrc1RVRkJka0k3TzBGQlJVRXNUVUZCU1VRc1QwRkJUeXhEUVVGWUxFVkJRV003UVVGRFdpeFJRVUZKUlN4WFFVRlhUQ3haUVVGWkxFTkJRVm9zUTBGQlpqdEJRVU5CTEZGQlFVbE5MRlZCUVZWT0xGbEJRVmxITEU5QlFVOHNRMEZCYmtJc1EwRkJaRHM3UVVGRlFTeFJRVUZKUml4UlFVRlJTU3hSUVVGYUxFVkJRMFZJTEZGQlFWRXNRMEZCUXl4RFFVRlVMRU5CUkVZc1MwRkZTeXhKUVVGSlJDeFRRVUZUU3l4UFFVRmlMRVZCUTBoS0xGRkJRVkZETEU5QlFVOHNRMEZCWml4RFFVUkhMRXRCUlVFN1FVRkRTQ3hWUVVGSlJDeFJRVUZSTEVOQlFWSXNTVUZCWVVFc1UwRkJVME1zU1VGQk1VSXNSVUZEUlVRc1VVRkJVVXNzUzBGQlMwTXNTMEZCVEN4RFFVRlhMRU5CUVVOTUxFOUJRVThzUTBGQlVpeExRVUZqUml4UlFVRlJTU3hSUVVGMFFpeExRVUZ0UTBNc1ZVRkJWVVFzVVVGQk4wTXNRMEZCV0N4RFFVRlNPenRCUVVWR0xHRkJRVTlNTEZsQlFWbEZMRXRCUVZvc1NVRkJjVUpFTEV0QlFUVkNPMEZCUTBWRE8wRkJSRVlzVDBGSFFTeFBRVUZQUml4WlFVRlpSU3hSUVVGUkxFTkJRWEJDTEV0QlFUQkNSQ3hMUVVGcVF6dEJRVU5GUXp0QlFVUkdPMEZCUlVRN1FVRkRSanM3UVVGRlJDeFRRVUZQUVN4TFFVRlFPMEZCUTBRN08wRkJSVVFzVTBGQlUwOHNjVUpCUVZRc1EwRkJLMEpVTEZkQlFTOUNMRVZCUVRSRFF5eExRVUUxUXl4RlFVRXJSRHRCUVVGQkxFMUJRVnBETEV0QlFWa3NkVVZCUVVvc1EwRkJReXhEUVVGSE96dEJRVU0zUkN4TlFVRkpReXhQUVVGUFNDeFpRVUZaU1N4TlFVRjJRanM3UVVGRlFTeE5RVUZKUkN4UFFVRlBMRU5CUVZnc1JVRkJZenRCUVVOYUxGRkJRVWxGTEZkQlFWZE1MRmxCUVZrc1EwRkJXaXhEUVVGbU8wRkJRMEVzVVVGQlNVMHNWVUZCVlU0c1dVRkJXVWNzVDBGQlR5eERRVUZ1UWl4RFFVRmtPenRCUVVWQkxGRkJRVWxHTEZOQlFWTkpMRkZCUVdJc1JVRkRSVWdzVVVGQlVTeERRVUZTTEVOQlJFWXNTMEZGU3l4SlFVRkpSQ3hUUVVGVFN5eFBRVUZpTEVWQlEwaEtMRkZCUVZGRExFbEJRVklzUTBGRVJ5eExRVVZCTzBGQlEwZ3NWVUZCU1VRc1VVRkJVU3hEUVVGU0xFbEJRV0ZCTEZOQlFWTkRMRWxCUVRGQ0xFVkJRMFZFTEZGQlFWRkxMRXRCUVV0RExFdEJRVXdzUTBGQlZ5eERRVUZEVEN4UFFVRlBMRU5CUVZJc1MwRkJZMFlzVVVGQlVVa3NVVUZCZEVJc1MwRkJiVU5ETEZWQlFWVkVMRkZCUVRkRExFTkJRVmdzUTBGQlVqczdRVUZGUml4aFFVRlBUQ3haUVVGWlJTeExRVUZhTEVsQlFYRkNSQ3hMUVVFMVFqdEJRVU5GUXp0QlFVUkdMRTlCUjBFc1QwRkJUMFlzV1VGQldVVXNVVUZCVVN4RFFVRndRaXhMUVVFd1FrUXNTMEZCYWtNN1FVRkRSVU03UVVGRVJqdEJRVVZFTzBGQlEwWTdPMEZCUlVRc1UwRkJUMEVzUzBGQlVEdEJRVU5FT3p0QlFVVkVPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdTVUZ4UkUxUkxHRTdPenRCUVVOS0xESkNRVUV3UWp0QlFVRkJMRkZCUVdSRExFOUJRV01zZFVWQlFVb3NSVUZCU1R0QlFVRkJPenRCUVVkNFFqczdPenM3T3pzN1FVRklkMElzYjBwQlEyeENRU3hSUVVGUlF5eFpRVVJWT3p0QlFWZDRRaXhWUVVGTFF5eE5RVUZNTEVkQlFXTnNRaXhUUVVGVFowSXNVVUZCVVVVc1RVRkJha0lzUlVGQmVVSXNTVUZCZWtJc1EwRkJaRHM3UVVGRlFUczdPenM3T3pzN1FVRlJRU3hWUVVGTFF5eFRRVUZNTEVkQlFXbENia0lzVTBGQlUyZENMRkZCUVZGSExGTkJRV3BDTEVWQlFUUkNMRU5CUVRWQ0xFTkJRV3BDT3p0QlFVVkJPenM3T3pzN096dEJRVkZCTEZWQlFVdERMRk5CUVV3c1IwRkJhVUp3UWl4VFFVRlRaMElzVVVGQlVVa3NVMEZCYWtJc1JVRkJORUlzUTBGQk5VSXNRMEZCYWtJN08wRkJSVUU3T3pzN096czdPMEZCVVVFc1ZVRkJTME1zVTBGQlRDeEhRVUZwUW5KQ0xGTkJRVk5uUWl4UlFVRlJTeXhUUVVGcVFpeEZRVUUwUWl4RFFVRTFRaXhEUVVGcVFqczdRVUZGUVRzN096czdPenM3UVVGUlFTeFZRVUZMUXl4VFFVRk1MRWRCUVdsQ2RFSXNVMEZCVTJkQ0xGRkJRVkZOTEZOQlFXcENMRVZCUVRSQ0xFdEJRVFZDTEVOQlFXcENPenRCUVVWQk96czdPenM3T3p0QlFWRkJMRlZCUVV0RExHRkJRVXdzUjBGQmNVSjJRaXhUUVVGVFowSXNVVUZCVVU4c1lVRkJha0lzUlVGQlowTXNRMEZCUXl4SFFVRkVMRU5CUVdoRExFTkJRWEpDT3p0QlFVVkJPenM3T3pzN096dEJRVkZCTEZWQlFVdERMRmRCUVV3c1IwRkJiVUo0UWl4VFFVRlRaMElzVVVGQlVWRXNWMEZCYWtJc1JVRkJPRUlzUTBGQk9VSXNRMEZCYmtJN08wRkJSVUU3T3pzN096czdPMEZCVVVFc1ZVRkJTME1zWVVGQlRDeEhRVUZ4UW5wQ0xGTkJRVk5uUWl4UlFVRlJVeXhoUVVGcVFpeEZRVUZuUXl4RFFVRkRMRWRCUVVRc1EwRkJhRU1zUTBGQmNrSTdPMEZCUlVFN096czdPenM3TzBGQlVVRXNWVUZCUzBNc1YwRkJUQ3hIUVVGdFFqRkNMRk5CUVZOblFpeFJRVUZSVlN4WFFVRnFRaXhGUVVFNFFpeERRVUU1UWl4RFFVRnVRanM3UVVGRlFUczdPenM3T3pzN1FVRlJRU3hWUVVGTFF5eFhRVUZNTEVkQlFXMUNNMElzVTBGQlUyZENMRkZCUVZGWExGZEJRV3BDTEVWQlFUaENMRU5CUVRsQ0xFTkJRVzVDT3p0QlFVVkJPenM3T3pzN096czdPenM3TzBGQllVRXNWVUZCUzBNc1YwRkJUQ3hIUVVGdFFqVkNMRk5CUVZOblFpeFJRVUZSV1N4WFFVRnFRaXhGUVVFNFFpeERRVUZETEVkQlFVUXNRMEZCT1VJc1EwRkJia0k3TzBGQlJVRTdPenM3T3pzN08wRkJVVUVzVlVGQlMwTXNVMEZCVEN4SFFVRnBRamRDTEZOQlFWTm5RaXhSUVVGUllTeFRRVUZxUWl4RlFVRTBRaXhEUVVGRExFdEJRVGRDTEVOQlFXcENPenRCUVVWQk96czdPenM3T3p0QlFWRkJMRlZCUVV0RExGTkJRVXdzUjBGQmFVSTVRaXhUUVVGVFowSXNVVUZCVVdNc1UwRkJha0lzUlVGQk5FSXNRMEZCTlVJc1EwRkJha0k3TzBGQlJVRTdPenM3T3pzN08wRkJVVUVzVlVGQlMwTXNTMEZCVEN4SFFVRmhMMElzVTBGQlUyZENMRkZCUVZGbExFdEJRV3BDTEVWQlFYZENMRXRCUVhoQ0xFTkJRV0k3TzBGQlJVRTdPenM3T3pzN08wRkJVVUVzVlVGQlMwTXNVMEZCVEN4SFFVRnBRbWhETEZOQlFWTm5RaXhSUVVGUlowSXNVMEZCYWtJc1JVRkJORUlzUzBGQk5VSXNRMEZCYWtJN08wRkJSVUU3T3pzN096czdPMEZCVVVFc1ZVRkJTME1zVTBGQlRDeEhRVUZwUW1wRExGTkJRVk5uUWl4UlFVRlJhVUlzVTBGQmFrSXNSVUZCTkVJc1EwRkJOVUlzUTBGQmFrSTdPMEZCUlVFN096czdPenM3TzBGQlVVRXNWVUZCUzBNc1ZVRkJUQ3hIUVVGclFteERMRk5CUVZOblFpeFJRVUZSYTBJc1ZVRkJha0lzUlVGQk5rSXNTMEZCTjBJc1EwRkJiRUk3TzBGQlJVRTdPenM3T3pzN08wRkJVVUVzVlVGQlMwTXNWVUZCVEN4SFFVRnJRbTVETEZOQlFWTm5RaXhSUVVGUmJVSXNWVUZCYWtJc1JVRkJOa0lzUTBGQk4wSXNRMEZCYkVJN08wRkJSVUU3T3pzN096czdPMEZCVVVFc1ZVRkJTME1zVlVGQlRDeEhRVUZyUW5CRExGTkJRVk5uUWl4UlFVRlJiMElzVlVGQmFrSXNSVUZCTmtJc1EwRkJOMElzUTBGQmJFSTdPMEZCUlVFN096czdPenM3TzBGQlVVRXNWVUZCUzBNc1lVRkJUQ3hIUVVGeFFuSkRMRk5CUVZOblFpeFJRVUZSY1VJc1lVRkJha0lzUlVGQlowTXNRMEZCYUVNc1EwRkJja0k3TzBGQlJVRTdPenM3T3pzN08wRkJVVUVzVlVGQlMwTXNTVUZCVEN4SFFVRlpkRU1zVTBGQlUyZENMRkZCUVZGelFpeEpRVUZxUWl4RlFVRjFRaXhEUVVGMlFpeERRVUZhT3p0QlFVVkJPenM3T3pzN096dEJRVkZCTEZWQlFVdERMRmxCUVV3c1IwRkJiMEoyUXl4VFFVRlRaMElzVVVGQlVYVkNMRmxCUVdwQ0xFVkJRU3RDTEVOQlFTOUNMRU5CUVhCQ096dEJRVVZCT3pzN096czdPenRCUVZGQkxGVkJRVXRETEUxQlFVd3NSMEZCWTNoRExGTkJRVk5uUWl4UlFVRlJkMElzVFVGQmFrSXNSVUZCZVVJc1MwRkJla0lzUTBGQlpEdEJRVU5CTEZWQlFVdERMR05CUVV3c1IwRkJjMElzUTBGQmRFSTdPMEZCUlVFN096czdPenM3TzBGQlVVRXNWVUZCUzBNc1ZVRkJUQ3hIUVVGclFqRkRMRk5CUVZOblFpeFJRVUZSTUVJc1ZVRkJha0lzUlVGQk5rSXNTMEZCTjBJc1EwRkJiRUk3UVVGRFFTeFZRVUZMUXl4WlFVRk1MRWRCUVc5Q0xFbEJRWEJDTzBGQlEwRXNWVUZCUzBNc1dVRkJUQ3hIUVVGdlFpeEpRVUZ3UWp0QlFVTkJMRlZCUVV0RExHdENRVUZNTEVkQlFUQkNMRU5CUVRGQ08wRkJRMEVzVlVGQlMwTXNZVUZCVEN4SFFVRnhRaXhEUVVGeVFqdEJRVU5CTEZWQlFVdERMR2RDUVVGTUxFZEJRWGRDTEVOQlFYaENPenRCUVVWQk96czdPenM3T3p0QlFWRkJMRlZCUVV0RExGTkJRVXdzUjBGQmFVSm9SQ3hUUVVGVFowSXNVVUZCVVdkRExGTkJRV3BDTEVWQlFUUkNMRXRCUVRWQ0xFTkJRV3BDT3p0QlFVVkJPenM3T3pzN096dEJRVkZCTEZWQlFVdERMRzFDUVVGTUxFZEJRVEpDYWtRc1UwRkJVMmRDTEZGQlFWRnBReXh0UWtGQmFrSXNSVUZCYzBNc1EwRkJkRU1zUTBGQk0wSTdPMEZCUlVFc1ZVRkJTME1zVlVGQlRDeEhRVUZyUWl4TlFVRkxha01zV1VGQlRDeERRVUZyUW10RExGVkJRV3hDTEVWQlFXeENPMEZCYkZKM1FqdEJRVzFTZWtJN08wRkJSVVE3T3pzN096czdPenM3T3pzN08wRkJjVUpCTzJkRFFVTlpReXhKTEVWQlFVMDdRVUZEYUVKQkxHRkJRVTk0UXl4TFFVRkxlVU1zUjBGQlRDeERRVUZUUkN4SlFVRlVMRVZCUVdVc1MwRkJTMjVETEZsQlFVd3NRMEZCYTBKeFF5eFhRVUZxUXl4RFFVRlFPMEZCUTBFc1lVRkJUMFlzVDBGQlR5eExRVUZMUnl4UFFVRk1MRU5CUVdGSUxFbEJRV0lzUTBGQlpEdEJRVU5FT3p0QlFVVkVPenM3TzJsRFFVTmhRU3hKTEVWQlFVMUpMRkVzUlVGQlZVTXNTeXhGUVVGUE8wRkJRMnhETEZWQlFVbHNSQ3hSUVVGUkxFdEJRVXRuUXl4WlFVRnFRanRCUVVOQkxGVkJRVWx0UWl4bFFVRmxMRU5CUVc1Q08wRkJRMEVzVlVGQlNVTXNhVUpCUVdsQ0xFdEJRVXRCTEdOQlFURkNPenRCUVVWQkxGVkJRVWtzUzBGQlMyNUNMRTFCUVZRc1JVRkJhVUk3UVVGRFppeFpRVUZKYjBJc1UwRkJVMG9zVjBGQlYwY3NZMEZCZUVJN08wRkJSVUZFTEhWQ1FVRmxPVU1zUzBGQlMwTXNTMEZCVEN4RFFVRlhLME1zVFVGQldDeEpRVUZ4UWtRc1kwRkJjRU03UVVGRFFVZ3NiMEpCUVZsRkxGbEJRVm83UVVGRFJEczdRVUZGUkN4VlFVRkpSQ3hSUVVGUkxFTkJRVm9zUlVGQlpUdEJRVU5pYkVRc1owSkJRVkZQTEhOQ1FVRnpRaXhMUVVGTFV5eGhRVUV6UWl4RlFVRXdRMmxETEZGQlFURkRMRU5CUVZJN08wRkJSVUVzV1VGQlNXcEVMRk5CUVZNc1MwRkJTMmRDTEdGQlFVd3NRMEZCYlVKa0xFMUJRV2hETEVWQlFYZERPMEZCUTNSRFJpeHJRa0ZCVVN4RFFVRlNPMEZCUTBGdFJDd3dRa0ZCWjBKRExHTkJRV2hDT3p0QlFVVkJMR05CUVVrc1EwRkJReXhMUVVGTGJrSXNUVUZCVml4RlFVTkZMRTlCUVU5eFFpeFJRVUZRTzBGQlEwZzdRVUZEUml4UFFWWkVMRTFCVlU4c1NVRkJTVW9zVVVGQlVTeERRVUZhTEVWQlFXVTdRVUZEY0VKc1JDeG5Ra0ZCVVVnc01FSkJRVEJDTEV0QlFVdHRRaXhoUVVFdlFpeEZRVUU0UTJsRExGRkJRVGxETEVOQlFWSTdPMEZCUlVFc1dVRkJTV3BFTEZGQlFWRXNRMEZCV2l4RlFVRmxPMEZCUTJKQkxHdENRVUZSTEV0QlFVdG5RaXhoUVVGTUxFTkJRVzFDWkN4TlFVRnVRaXhIUVVFMFFpeERRVUZ3UXp0QlFVTkJhVVFzTUVKQlFXZENReXhqUVVGb1FqczdRVUZGUVN4alFVRkpMRU5CUVVNc1MwRkJTMjVDTEUxQlFWWXNSVUZEUlN4UFFVRlBMRU5CUVVOeFFpeFJRVUZTTzBGQlEwZzdRVUZEUml4UFFWWk5MRTFCVlVFN1FVRkRUQ3hsUVVGUFFTeFJRVUZRTzBGQlEwUTdPMEZCUlVRc1YwRkJTM1JDTEZsQlFVd3NSMEZCYjBKb1F5eExRVUZ3UWp0QlFVTkJMRmRCUVV0clF5eGpRVUZNTEVkQlFYTkNhVUlzV1VGQmRFSTdPMEZCUlVFc1lVRkJUMEVzWlVGQlpTeExRVUZMYmtNc1lVRkJUQ3hEUVVGdFFtaENMRXRCUVc1Q0xFTkJRWFJDTzBGQlEwUTdPMEZCUlVRN096czdiME5CUTJkQ05rTXNTU3hGUVVGTlNTeFJMRVZCUVZWRExFc3NSVUZCVHp0QlFVTnlReXhWUVVGSmJFUXNVVUZCVVN4TFFVRkxaME1zV1VGQmFrSTdRVUZEUVN4VlFVRkpiVUlzWlVGQlpTeExRVUZMYWtJc1kwRkJlRUk3TzBGQlJVRXNWMEZCUzJNc1QwRkJUQ3hEUVVGaFNDeEpRVUZpT3p0QlFVVkJMRlZCUVVsTExGRkJRVkVzUTBGQldpeEZRVUZsTzBGQlEySnNSRHM3UVVGRlFTeFpRVUZKUVN4VFFVRlRMRXRCUVV0blFpeGhRVUZNTEVOQlFXMUNaQ3hOUVVGb1F5eEZRVUYzUXp0QlFVTjBRMFlzYTBKQlFWRXNRMEZCVWp0QlFVTkJiVVFzTUVKQlFXZENMRXRCUVV0RExHTkJRWEpDT3p0QlFVVkJMR05CUVVrc1EwRkJReXhMUVVGTGJrSXNUVUZCVml4RlFVTkZMRTlCUVU5eFFpeFJRVUZRTzBGQlEwZzdRVUZEUml4UFFWWkVMRTFCVlU4N1FVRkRUSFJFT3p0QlFVVkJMRmxCUVVsQkxGRkJRVkVzUTBGQldpeEZRVUZsTzBGQlEySkJMR3RDUVVGUkxFdEJRVXRuUWl4aFFVRk1MRU5CUVcxQ1pDeE5RVUZ1UWl4SFFVRTBRaXhEUVVGd1F6dEJRVU5CYVVRc01FSkJRV2RDTEV0QlFVdERMR05CUVhKQ096dEJRVVZCTEdOQlFVa3NRMEZCUXl4TFFVRkxia0lzVFVGQlZpeEZRVU5GTEU5QlFVOHNRMEZCUTNGQ0xGRkJRVkk3UVVGRFNEdEJRVU5HT3p0QlFVVkVMRmRCUVV0MFFpeFpRVUZNTEVkQlFXOUNhRU1zUzBGQmNFSTdRVUZEUVN4WFFVRkxhME1zWTBGQlRDeEhRVUZ6UW1sQ0xGbEJRWFJDT3p0QlFVVkJMR0ZCUVU5QkxHVkJRV1VzUzBGQlMyNURMR0ZCUVV3c1EwRkJiVUpvUWl4TFFVRnVRaXhEUVVGMFFqdEJRVU5FT3p0QlFVVkVPenM3T3pzN096czdPenMwUWtGUlVUWkRMRWtzUlVGQlRUdEJRVU5hTEZWQlFVbHVReXhsUVVGbExFdEJRVXRCTEZsQlFYaENPMEZCUTBFc1ZVRkJTVFpETEdOQlFXTXNRMEZCUTFZc1VVRkJVVzVETEdGQlFXRnhReXhYUVVGMFFpeEpRVUZ4UXl4TFFVRkxka0lzUzBGQk5VUTdRVUZEUVN4VlFVRkpaME1zWjBKQlFXZENMRXRCUVVzMVF5eFRRVUY2UWp0QlFVTkJMRlZCUVVsdlFpeGxRVUZsTEV0QlFVdEJMRmxCUVhoQ096dEJRVVZCTEZWQlFVa3NTMEZCUzNKQ0xFMUJRVlFzUlVGQmFVSTdRVUZEWml4WlFVRkpPRU1zYTBKQlFXdENMRWRCUVhSQ08wRkJRMEVzV1VGQlNVTXNhMEpCUVd0Q0xFZEJRWFJDTzBGQlEwRXNXVUZCU1VNc1owSkJRV2RDTEVkQlFYQkNPMEZCUTBFc1dVRkJTVU1zYVVKQlFXbENMRWRCUVhKQ08wRkJRMEVzV1VGQlNWSXNhVUpCUVdsQ0xFdEJRVXRCTEdOQlFURkNPenRCUVVWQkxGbEJRVWtzUzBGQlMyNUNMRTFCUVZRc1JVRkRSVVFzWlVGQlpVRXNaVUZCWlN4TFFVRkxhRUlzWVVGQlRDeERRVUZ0UW1Rc1RVRkJha1FzUTBGRVJpeExRVWRGT0VJc1pVRkJaVE5DTEV0QlFVdDVReXhIUVVGTUxFTkJRVk1zUTBGQlZDeEZRVUZaZWtNc1MwRkJTM2RFTEVkQlFVd3NRMEZCVXpkQ0xGbEJRVlFzUlVGQmRVSXNTMEZCUzJoQ0xHRkJRVXdzUTBGQmJVSmtMRTFCUVc1Q0xFZEJRVFJDTEVOQlFXNUVMRU5CUVZvc1EwRkJaanM3UVVGRlJpeFpRVUZKTEV0QlFVdGpMR0ZCUVZRc1JVRkRSWGxETEd0Q1FVRnJRaXhMUVVGTGVrTXNZVUZCVEN4RFFVRnRRbWRDTEZsQlFXNUNMRXRCUVc5RExFTkJRWFJFT3p0QlFVVkdMRmxCUVVrc1MwRkJTMlFzWVVGQlZDeEZRVU5GZDBNc2EwSkJRV3RDTEV0QlFVdDRReXhoUVVGTUxFTkJRVzFDWXl4WlFVRnVRaXhMUVVGdlF5eERRVUYwUkRzN1FVRkZSaXhaUVVGSkxFdEJRVXRZTEZkQlFWUXNSVUZEUlhORExHZENRVUZuUWl4TFFVRkxkRU1zVjBGQlRDeERRVUZwUWxjc1dVRkJha0lzUzBGQmEwTXNRMEZCYkVRN08wRkJSVVk3UVVGRFFTeFpRVUZKTEV0QlFVdElMRlZCUVV3c1MwRkJiMElzUTBGQmNFSXNTVUZCZVVJc1MwRkJTME1zWVVGQlRDeEhRVUZ4UWl4RFFVRnNSQ3hGUVVGeFJEdEJRVU51UkN4alFVRkpaME1zYlVKQlFXMUNMRU5CUVVONlJDeExRVUZMTUVRc1RVRkJUQ3hMUVVGblFpeEhRVUZxUWl4SlFVRjNRaXhIUVVGNFFpeEhRVUU0UWl4TFFVRkxha01zWVVGQk1VUTdRVUZEUVRoQ0xESkNRVUZwUW5aRUxFdEJRVXN5UkN4SFFVRk1MRU5CUVZNc1IwRkJWQ3hGUVVGakxFTkJRVU1zUzBGQlMyNURMRlZCUVV3c1IwRkJhMEpwUXl4blFrRkJia0lzU1VGQmRVTXNUVUZCY2tRc1EwRkJha0k3UVVGRFJEczdRVUZGUkR0QlFVTkJMRmxCUVVsS0xHOUNRVUZ2UWl4RFFVRndRaXhKUVVGNVFpeExRVUZMTjBNc1UwRkJUQ3hIUVVGcFFpeERRVUU1UXl4RlFVRnBSRHRCUVVNdlF5eGpRVUZKYjBRc2JVSkJRVzFDYWtNc1pVRkJaU3hEUVVGMFF6dEJRVU5CTEdOQlFVbHJReXhaUVVGS0xFVkJRV3RDUXl4VlFVRnNRanM3UVVGRlFTeGpRVUZKUml4eFFrRkJjVUlzUzBGQlMycEVMR0ZCUVV3c1EwRkJiVUprTEUxQlFUVkRMRVZCUVc5RU8wRkJRMnhFTEdkQ1FVRkpMRXRCUVVzclFpeE5RVUZVTEVWQlFXbENPMEZCUTJacFF5dzJRa0ZCWlN4TFFVRkxiRVFzWVVGQlRDeERRVUZ0UWl4RFFVRnVRaXhKUVVGM1FtOURMR05CUVhaRE8wRkJRMEZsTERKQ1FVRmhMRXRCUVVzNVF5eFhRVUZNTEVOQlFXbENMRU5CUVdwQ0xFTkJRV0k3UVVGRFJDeGhRVWhFTEUxQlIwODdRVUZEVERaRExEWkNRVUZsWkN4alFVRm1PMEZCUTBGbExESkNRVUZoTEVOQlFXSTdRVUZEUkR0QlFVTkdMRmRCVWtRc1RVRlJUenRCUVVOTVJDd3lRa0ZCWlN4TFFVRkxiRVFzWVVGQlRDeERRVUZ0UW1sRUxHZENRVUZ1UWl4RFFVRm1PMEZCUTBGRkxIbENRVUZoTEV0QlFVczVReXhYUVVGTUxFTkJRV2xDTkVNc1owSkJRV3BDTEVOQlFXSTdRVUZEUkRzN1FVRkZSQ3hqUVVGSlJ5eDFRa0ZCZFVKR0xHVkJRV1ZVTEdWQlFURkRPenRCUVVWQk8wRkJRMEU3UVVGRFFTeGpRVUZKUlN4blFrRkJaMElzUTBGQmNFSXNSVUZEUlZNc2QwSkJRWGRDVkN4aFFVRjRRanM3UVVGRlJpeGpRVUZKVVN4aFFVRmhMRU5CUVdwQ0xFVkJRMFZETEhkQ1FVRjNRa1FzVlVGQmVFSTdPMEZCUlVZc1kwRkJTVU1zZFVKQlFYVkNMRU5CUVROQ0xFVkJRMFZCTEhWQ1FVRjFRaXhEUVVGMlFqczdRVUZGUmp0QlFVTkJMR05CUVVsV0xHOUNRVUZ2UWl4RFFVRjRRaXhGUVVORlFTeHJRa0ZCYTBKVkxHOUNRVUZzUWpzN1FVRkZSanRCUVVOQldpd3lRa0ZCYVVJc1MwRkJTek5ETEZOQlFVd3NSMEZCYVVKMVJDeHZRa0ZCYkVNN1FVRkRSRHM3UVVGRlJEdEJRVU5CVml3eVFrRkJiVUlzUzBGQlMzUkRMRmRCUVhoQ08wRkJRMEZ6UXl3eVFrRkJiVUlzUzBGQlMzWkRMRmRCUVhoQ096dEJRVVZCTzBGQlEwRjNReXg1UWtGQmFVSXNTMEZCUzNCRExGTkJRWFJDTzBGQlEwRnZReXg1UWtGQmFVSXNTMEZCUzNKRExGTkJRWFJDT3p0QlFVVkJPMEZCUTBFN1FVRkRRVHRCUVVOQkxGbEJRVWx4UXl4blFrRkJaMElzUTBGQmNFSXNSVUZCZFVJN1FVRkRja0pFTERaQ1FVRnRRa01zWVVGQmJrSTdRVUZEUVVZc05rSkJRVzFDUlN4aFFVRnVRanRCUVVOQlNpeDVRa0ZCWjBKSkxHZENRVUZuUWtNc1kwRkJhRU03UVVGRFJDeFRRVXBFTEUxQlNVODdRVUZEVEV3c2VVSkJRV2RDU1N4blFrRkJaMEpETEdOQlFXaERPMEZCUTBRN08wRkJSVVE3UVVGRFFTeFpRVUZKTEV0QlFVc3pReXhYUVVGTUxFZEJRVzFDTEVOQlFYWkNMRVZCUTBWM1F5eHRRa0ZCYlVJc1QwRkJUM0JFTEV0QlFVc3dSQ3hOUVVGTUxFdEJRV2RDTEVkQlFYWkNMRWxCUVRoQ0xFdEJRVXM1UXl4WFFVRjBSRHM3UVVGRlJqdEJRVU5CTEZsQlFVbDNReXhyUWtGQmEwSXNRMEZCZEVJc1JVRkJlVUk3UVVGRGRrSTdRVUZEUVVNc05rSkJRVzFDUkN4bFFVRnVRanRCUVVOQlFTdzBRa0ZCYTBJc1EwRkJiRUk3UVVGRFJEczdRVUZGUkN4WlFVRkpRU3hyUWtGQmEwSkRMR1ZCUVd4Q0xFZEJRVzlETEV0QlFVc3ZReXhOUVVGTUxFTkJRVmt3UkN4UlFVRndSQ3hGUVVORldDeHJRa0ZCYTBJc1MwRkJTeTlETEUxQlFVd3NRMEZCV1RCRUxGRkJRVm9zUjBGQmRVSmFMR1ZCUVhwRE96dEJRVVZHUXl3eVFrRkJiVUpGTEdOQlFXNUNPenRCUVVWQkxGbEJRVWtzUzBGQlMzcENMRlZCUVZRc1JVRkRSU3hMUVVGTGJVTXNTMEZCVEN4RFFVRlhaaXhYUVVGWU96dEJRVVZHTzBGQlEwRXNXVUZCU1N4TFFVRkxlRUlzU1VGQlRDeEhRVUZaTEVOQlFWb3NTVUZCYVVJeVFpeHJRa0ZCYTBJc1EwRkJka01zUlVGQk1FTTdRVUZEZUVNN1FVRkRRU3hqUVVGSllTeFhRVUZYTjBRc1lVRkJZV3RETEZWQlFXSXNSVUZCWmp0QlFVTkJMR05CUVVrMFFpeFRRVUZUTEV0QlFVc3ZReXhUUVVGTUxFZEJRV2xDTEV0QlFVdERMRk5CUVV3c1IwRkJhVUpuUXl4bFFVRXZRenRCUVVOQkxHTkJRVWxsTEZWQlFWVXNTMEZCU3psRExGVkJRVXdzUjBGQmEwSXNTMEZCUzBNc1ZVRkJUQ3hIUVVGclFqaENMR1ZCUVd4RU96dEJRVVZCTEdOQlFVbGpMRk5CUVZORExFOUJRVlFzUjBGQmJVSm1MR1ZCUVhaQ0xFVkJRWGRETzBGQlEzUkRMR2RDUVVGSlowSXNVMEZCVTJoQ0xHMUNRVUZ0UW1Nc1UwRkJVME1zVDBGQk5VSXNRMEZCWWp0QlFVTkJSQ3h6UWtGQlZVVXNUVUZCVmp0QlFVTkJSQ3gxUWtGQlYwTXNUVUZCV0R0QlFVTkVPenRCUVVWRUxHTkJRVWxETEdkQ1FVRm5RbkJDTEdOQlFXTnBRaXhOUVVGc1F6dEJRVU5CTEdOQlFVbEpMR2xDUVVGcFFuSkNMR05CUVdOSExHVkJRVzVETzBGQlEwRXNZMEZCU1cxQ0xHMUNRVUZ0UWtRc2FVSkJRV2xDU0N4UFFVRjRRenM3UVVGRlFVWXNiVUpCUVZONFF5eEpRVUZVTEVOQlFXTm9ReXhMUVVGa0xFZEJRWE5DTEVOQlFYUkNPMEZCUTBGM1JTeHRRa0ZCVTNoRExFbEJRVlFzUTBGQll5dERMR05CUVdRc1EwRkJOa0lzUjBGQk4wSXNSVUZCYTBOMlFpeFhRVUZzUXp0QlFVTkJaMElzYlVKQlFWTjRReXhKUVVGVUxFTkJRV05uUkN4MVFrRkJaQ3hEUVVGelF5eExRVUZMYUVRc1NVRkJNME1zUlVGQmFVUTBReXhoUVVGcVJEczdRVUZGUVN4alFVRkpSU3h0UWtGQmJVSkdMR0ZCUVhaQ0xFVkJRMFZLTEZOQlFWTjRReXhKUVVGVUxFTkJRV01yUXl4alFVRmtMRU5CUVRaQ0xFdEJRVXN2UXl4SlFVRnNReXhGUVVGM1F6aERMR2RDUVVGNFF6czdRVUZGUms0c2JVSkJRVk40UXl4SlFVRlVMRU5CUVdOblJDeDFRa0ZCWkN4RFFVRnpReXhIUVVGMFF5eEZRVUV5UTBnc1kwRkJNME03UVVGRFFVd3NiVUpCUVZOVExFOUJRVlFzUTBGQmFVSXNTMEZCUzNKRExGVkJRWFJDT3p0QlFVVkJMR1ZCUVV0T0xGbEJRVXdzUjBGQmIwSnJReXhSUVVGd1FqczdRVUZGUVR0QlFVTkJMR05CUVVsVkxGTkJRVk4yUlN4aFFVRmhkMFVzYTBKQlFXSXNSVUZCWWpzN1FVRkZRVVFzYVVKQlFVOTBSU3hOUVVGUUxFZEJRV2RDTEV0QlFVdEJMRTFCUVhKQ08wRkJRMEZ6UlN4cFFrRkJUMFVzV1VGQlVDeERRVUZ2UW5CR0xFdEJRWEJDTEVkQlFUUkNOa1FzWTBGQk5VSTdRVUZEUVhGQ0xHbENRVUZQUkN4UFFVRlFMRU5CUVdWVUxGRkJRV1k3TzBGQlJVRlZMR2xDUVVGUFJ5eExRVUZRTEVOQlFXRTNRaXhYUVVGaUxFVkJRVEJDUlN4bFFVRXhRanRCUVVOQmQwSXNhVUpCUVU5SkxFbEJRVkFzUTBGQldUbENMR05CUVdOSExHVkJRVEZDT3p0QlFVVkJMR1ZCUVV0MFFpeFpRVUZNTEVkQlFXOUNOa01zVFVGQmNFSTdRVUZEUVN4bFFVRkxNME1zYTBKQlFVd3NSMEZCTUVKMVF5eG5Ra0ZCTVVJN1FVRkRRU3hsUVVGTGRFTXNZVUZCVEN4SFFVRnhRaXhMUVVGTFVpeEpRVUV4UWp0QlFVTkJMR1ZCUVV0VExHZENRVUZNTEVkQlFYZENiME1zWTBGQmVFSTdRVUZEUkR0QlFVTkdPenRCUVVWRU8wRkJRMEVzVlVGQlNTeExRVUZMT1VRc1UwRkJUQ3hIUVVGcFFpeEhRVUZ5UWl4RlFVTkZNRU1zYVVKQlFXbENMRTlCUVU5dVJDeExRVUZMTUVRc1RVRkJUQ3hMUVVGblFpeEhRVUYyUWl4SlFVRTRRaXhMUVVGTGFrUXNVMEZCYmtNc1IwRkJLME13UXl4aFFVRm9SVHM3UVVGRlJpeGhRVUZQYmtRc1MwRkJTM2xETEVkQlFVd3NRMEZCVXl4TFFVRkxMMElzVTBGQlpDeEZRVUY1UW5sRExHRkJRWHBDTEVOQlFWQTdRVUZEUkRzN1FVRkZSRHM3T3pzN096czdNRUpCUzAxWUxFa3NSVUZCVFR0QlFVTldMRlZCUVUxdVF5eGxRVUZsTEV0QlFVdEJMRmxCUVRGQ08wRkJRMEVzVlVGQlRUUkZMRlZCUVZVc1MwRkJTemxETEdkQ1FVRnlRanRCUVVOQkxGVkJRVTFETEZsQlFWbEpMRkZCUVZGdVF5eGhRVUZoY1VNc1YwRkJka003TzBGQlJVRXNWVUZCU1U0c1dVRkJXVFpETEU5QlFXaENMRVZCUVhsQ08wRkJRM1pDTEZsQlFVMVdMR2xDUVVGcFFuWkZMRXRCUVV0M1JDeEhRVUZNTEVOQlFWTndRaXhaUVVGWkxFdEJRVXRCTEZOQlFURkNMRVZCUVhGRE5rTXNUMEZCY2tNc1EwRkJka0k3UVVGRFFTeFpRVUZOWml4WFFVRlhMRXRCUVV0c1F5eFpRVUYwUWp0QlFVTkJMRmxCUVVsclJDeHRRa0ZCYlVJc1MwRkJTMmhFTEdGQlFUVkNPenRCUVVWQkxGbEJRVWxGTEZsQlFWa3NTMEZCUzBnc2EwSkJRWEpDTEVWQlFYbERPMEZCUTNaRExHTkJRVTFyUkN4bFFVRmxMRXRCUVV0c1JDeHJRa0ZCTVVJN1FVRkRRV2xFTERoQ1FVRnZRaXhEUVVGRE9VTXNXVUZCV1N0RExGbEJRV0lzUzBGQk9FSkdMRlZCUVZWRkxGbEJRWGhETEVOQlFYQkNPMEZCUTBRN08wRkJSVVJxUWl4cFFrRkJVM2hETEVsQlFWUXNRMEZCWXpCRUxIRkNRVUZrTEVOQlFXOURhRVFzVTBGQmNFTTdRVUZEUVRoQ0xHbENRVUZUZUVNc1NVRkJWQ3hEUVVGakswTXNZMEZCWkN4RFFVRTJRbE1zWjBKQlFUZENMRVZCUVN0RE9VTXNVMEZCTDBNN1FVRkRRVGhDTEdsQ1FVRlRlRU1zU1VGQlZDeERRVUZqWjBRc2RVSkJRV1FzUTBGQmMwTXNRMEZCZEVNc1JVRkJlVU5JTEdOQlFYcERPenRCUVVWQkxHRkJRVXQ0UXl4WlFVRk1MRWRCUVc5Q0xFbEJRWEJDTzBGQlEwRXNZVUZCUzBNc1dVRkJUQ3hIUVVGdlFpeEpRVUZ3UWp0QlFVTkJMR0ZCUVV0RExHdENRVUZNTEVkQlFUQkNMRU5CUVRGQ08wRkJRMEVzWVVGQlMwTXNZVUZCVEN4SFFVRnhRaXhEUVVGeVFqdEJRVU5CTEdGQlFVdERMR2RDUVVGTUxFZEJRWGRDTEVOQlFYaENPMEZCUTBRN1FVRkRSanM3TzNkQ1FURlRiMEk3UVVGRGJrSXNWVUZCU1N4TFFVRkxOMElzVFVGQlZDeEZRVUZwUWp0QlFVTm1MRmxCUVVsNVF5eHBRa0ZCYVVJc1MwRkJTM3BETEUxQlFVd3NRMEZCV1RCRUxGRkJRV3BET3p0QlFVVkJMRmxCUVVrc1MwRkJTek5DTEcxQ1FVRlVMRVZCUTBWVkxHdENRVUZyUWl4TFFVRkxWaXh0UWtGQmRrSTdPMEZCUlVZc1pVRkJUMVVzWTBGQlVEdEJRVU5FT3p0QlFVVkVMR0ZCUVU4c1EwRkJVRHRCUVVORU96czdSVUY2VTNsQ2MwTXNlVUk3TzJ0Q1FUSnJRbUpzUml4aElpd2labWxzWlNJNklsTmxaMjFsYm5SRmJtZHBibVV1YW5NaUxDSnpiM1Z5WTJWelEyOXVkR1Z1ZENJNld5SnBiWEJ2Y25RZ1FYVmthVzlVYVcxbFJXNW5hVzVsSUdaeWIyMGdKeTR1TDJOdmNtVXZRWFZrYVc5VWFXMWxSVzVuYVc1bEp6dGNibHh1Wm5WdVkzUnBiMjRnYjNCMFQzSkVaV1lvYjNCMExDQmtaV1lwSUh0Y2JpQWdhV1lnS0c5d2RDQWhQVDBnZFc1a1pXWnBibVZrS1Z4dUlDQWdJSEpsZEhWeWJpQnZjSFE3WEc1Y2JpQWdjbVYwZFhKdUlHUmxaanRjYm4xY2JseHVablZ1WTNScGIyNGdaMlYwUTNWeWNtVnVkRTl5VUhKbGRtbHZkWE5KYm1SbGVDaHpiM0owWldSQmNuSmhlU3dnZG1Gc2RXVXNJR2x1WkdWNElEMGdMVEVwSUh0Y2JpQWdkbUZ5SUhOcGVtVWdQU0J6YjNKMFpXUkJjbkpoZVM1c1pXNW5kR2c3WEc1Y2JpQWdhV1lnS0hOcGVtVWdQaUF3S1NCN1hHNGdJQ0FnZG1GeUlHWnBjbk4wVm1Gc0lEMGdjMjl5ZEdWa1FYSnlZWGxiTUYwN1hHNGdJQ0FnZG1GeUlHeGhjM1JXWVd3Z1BTQnpiM0owWldSQmNuSmhlVnR6YVhwbElDMGdNVjA3WEc1Y2JpQWdJQ0JwWmlBb2RtRnNkV1VnUENCbWFYSnpkRlpoYkNsY2JpQWdJQ0FnSUdsdVpHVjRJRDBnTFRFN1hHNGdJQ0FnWld4elpTQnBaaUFvZG1Gc2RXVWdQajBnYkdGemRGWmhiQ2xjYmlBZ0lDQWdJR2x1WkdWNElEMGdjMmw2WlNBdElERTdYRzRnSUNBZ1pXeHpaU0I3WEc0Z0lDQWdJQ0JwWmlBb2FXNWtaWGdnUENBd0lIeDhJR2x1WkdWNElENDlJSE5wZW1VcFhHNGdJQ0FnSUNBZ0lHbHVaR1Y0SUQwZ1RXRjBhQzVtYkc5dmNpZ29jMmw2WlNBdElERXBJQ29nS0haaGJIVmxJQzBnWm1seWMzUldZV3dwSUM4Z0tHeGhjM1JXWVd3Z0xTQm1hWEp6ZEZaaGJDa3BPMXh1WEc0Z0lDQWdJQ0IzYUdsc1pTQW9jMjl5ZEdWa1FYSnlZWGxiYVc1a1pYaGRJRDRnZG1Gc2RXVXBYRzRnSUNBZ0lDQWdJR2x1WkdWNExTMDdYRzVjYmlBZ0lDQWdJSGRvYVd4bElDaHpiM0owWldSQmNuSmhlVnRwYm1SbGVDQXJJREZkSUR3OUlIWmhiSFZsS1Z4dUlDQWdJQ0FnSUNCcGJtUmxlQ3NyTzF4dUlDQWdJSDFjYmlBZ2ZWeHVYRzRnSUhKbGRIVnliaUJwYm1SbGVEdGNibjFjYmx4dVpuVnVZM1JwYjI0Z1oyVjBRM1Z5Y21WdWRFOXlUbVY0ZEVsdVpHVjRLSE52Y25SbFpFRnljbUY1TENCMllXeDFaU3dnYVc1a1pYZ2dQU0F0TVNrZ2UxeHVJQ0IyWVhJZ2MybDZaU0E5SUhOdmNuUmxaRUZ5Y21GNUxteGxibWQwYUR0Y2JseHVJQ0JwWmlBb2MybDZaU0ErSURBcElIdGNiaUFnSUNCMllYSWdabWx5YzNSV1lXd2dQU0J6YjNKMFpXUkJjbkpoZVZzd1hUdGNiaUFnSUNCMllYSWdiR0Z6ZEZaaGJDQTlJSE52Y25SbFpFRnljbUY1VzNOcGVtVWdMU0F4WFR0Y2JseHVJQ0FnSUdsbUlDaDJZV3gxWlNBOFBTQm1hWEp6ZEZaaGJDbGNiaUFnSUNBZ0lHbHVaR1Y0SUQwZ01EdGNiaUFnSUNCbGJITmxJR2xtSUNoMllXeDFaU0ErUFNCc1lYTjBWbUZzS1Z4dUlDQWdJQ0FnYVc1a1pYZ2dQU0J6YVhwbE8xeHVJQ0FnSUdWc2MyVWdlMXh1SUNBZ0lDQWdhV1lnS0dsdVpHVjRJRHdnTUNCOGZDQnBibVJsZUNBK1BTQnphWHBsS1Z4dUlDQWdJQ0FnSUNCcGJtUmxlQ0E5SUUxaGRHZ3VabXh2YjNJb0tITnBlbVVnTFNBeEtTQXFJQ2gyWVd4MVpTQXRJR1pwY25OMFZtRnNLU0F2SUNoc1lYTjBWbUZzSUMwZ1ptbHljM1JXWVd3cEtUdGNibHh1SUNBZ0lDQWdkMmhwYkdVZ0tITnZjblJsWkVGeWNtRjVXMmx1WkdWNFhTQThJSFpoYkhWbEtWeHVJQ0FnSUNBZ0lDQnBibVJsZUNzck8xeHVYRzRnSUNBZ0lDQjNhR2xzWlNBb2MyOXlkR1ZrUVhKeVlYbGJhVzVrWlhnZ0xTQXhYU0ErUFNCMllXeDFaU2xjYmlBZ0lDQWdJQ0FnYVc1a1pYZ3RMVHRjYmlBZ0lDQjlYRzRnSUgxY2JseHVJQ0J5WlhSMWNtNGdhVzVrWlhnN1hHNTlYRzVjYmk4cUtseHVJQ29nVlhObFpDQjNhWFJvSUdFZ1luVm1abVZ5SUhSdklITmxjblpsSUdGMVpHbHZJR1pwYkdWeklIWnBZU0JuY21GdWRXeGhjaUJ6ZVc1MGFHVnphWE11WEc0Z0tseHVJQ29nVkdobElHVnVaMmx1WlNCcGJYQnNaVzFsYm5SeklIUm9aU0JjSW5OamFHVmtkV3hsWkZ3aUlHRnVaQ0JjSW5SeVlXNXpjRzl5ZEdWa1hDSWdhVzUwWlhKbVlXTmxjeTVjYmlBcUlGZG9aVzRnWENKelkyaGxaSFZzWldSY0lpd2dkR2hsSUdWdVoybHVaU0FnWjJWdVpYSmhkR1Z6SUhObFoyMWxiblJ6SUcxdmNtVWdiM0lnYkdWemM4S2djR1Z5YVc5a2FXTmhiR3g1WEc0Z0tpQW9ZMjl1ZEhKdmJHeGxaQ0JpZVNCMGFHVWdjR1Z5YVc5a1FXSnpMQ0J3WlhKcGIyUlNaV3dzSUdGdVpDQndaWEpwYjFaaGNpQmhkSFJ5YVdKMWRHVnpLUzVjYmlBcUlGZG9aVzRnWENKMGNtRnVjM0J2Y25SbFpGd2lMQ0IwYUdVZ1pXNW5hVzVsSUdkbGJtVnlZWFJsY3lCelpXZHRaVzUwY3lCaGRDQjBhR1VnY0c5emFYUnBiMjRnYjJZZ2RHaGxhWElnYjI1elpYUWdkR2x0WlM1Y2JpQXFYRzRnS2lCRmVHRnRjR3hsSUhSb1lYUWdjMmh2ZDNNZ1lTQmdVMlZuYldWdWRFVnVaMmx1WldBZ2QybDBhQ0JoSUdabGR5QndZWEpoYldWMFpYSWdZMjl1ZEhKdmJITWdjblZ1Ym1sdVp5QnBiaUJoSUdCVFkyaGxaSFZzWlhKZ0xseHVJQ29nZTBCc2FXNXJJR2gwZEhCek9pOHZjbUYzWjJsMExtTnZiUzkzWVhabGMycHpMM2RoZG1WekxXRjFaR2x2TDIxaGMzUmxjaTlsZUdGdGNHeGxjeTl6WldkdFpXNTBMV1Z1WjJsdVpTOXBibVJsZUM1b2RHMXNmVnh1SUNwY2JpQXFJRUJsZUhSbGJtUnpJRUYxWkdsdlZHbHRaVVZ1WjJsdVpWeHVJQ29nUUdWNFlXMXdiR1ZjYmlBcUlHbHRjRzl5ZENBcUlHRnpJR0YxWkdsdklHWnliMjBnSjNkaGRtVnpMV0YxWkdsdkp6dGNiaUFxSUdOdmJuTjBJSE5qYUdWa2RXeGxjaUE5SUdGMVpHbHZMbWRsZEZOamFHVmtkV3hsY2lncE8xeHVJQ29nWTI5dWMzUWdjMlZuYldWdWRFVnVaMmx1WlNBOUlHNWxkeUJoZFdScGJ5NVRaV2R0Wlc1MFJXNW5hVzVsS0NrN1hHNGdLbHh1SUNvZ2MyTm9aV1IxYkdWeUxtRmtaQ2h6WldkdFpXNTBSVzVuYVc1bEtUdGNiaUFxWEc0Z0tpQkFjR0Z5WVcwZ2UwOWlhbVZqZEgwZ1cyOXdkR2x2Ym5NOWUzMWRJQzBnUkdWbVlYVnNkQ0J2Y0hScGIyNXpYRzRnS2lCQWNHRnlZVzBnZTBGMVpHbHZRblZtWm1WeWZTQmJiM0IwYVc5dWN5NWlkV1ptWlhJOWJuVnNiRjBnTFNCQmRXUnBieUJpZFdabVpYSmNiaUFxSUVCd1lYSmhiU0I3VG5WdFltVnlmU0JiYjNCMGFXOXVjeTV3WlhKcGIyUkJZbk05TUYwZ0xTQkJZbk52YkhWMFpTQnpaV2R0Wlc1MElIQmxjbWx2WkNCcGJpQnpaV05jYmlBcUlFQndZWEpoYlNCN1RuVnRZbVZ5ZlNCYmIzQjBhVzl1Y3k1d1pYSnBiMlJTWld3OU1WMGdMU0JUWldkdFpXNTBJSEJsY21sdlpDQnlaV3hoZEdsMlpTQjBieUJwYm5SbGNpMXpaV2R0Wlc1MElHUnBjM1JoYm1ObFhHNGdLaUJBY0dGeVlXMGdlMDUxYldKbGNuMGdXMjl3ZEdsdmJuTXVjR1Z5YVc5a1ZtRnlQVEJkSUMwZ1FXMXZkWFFnYjJZZ2NtRnVaRzl0SUhObFoyMWxiblFnY0dWeWFXOWtJSFpoY21saGRHbHZiaUJ5Wld4aGRHbDJaVnh1SUNvZ0lIUnZJSE5sWjIxbGJuUWdjR1Z5YVc5a1hHNGdLaUJBY0dGeVlXMGdlMDUxYldKbGNuMGdXMjl3ZEdsdmJuTXVjR1Z5YVc5a1RXbHVQVEF1TURBeFhTQXRJRTFwYm1sdGRXMGdjMlZuYldWdWRDQndaWEpwYjJSY2JpQXFJRUJ3WVhKaGJTQjdUblZ0WW1WeWZTQmJiM0IwYVc5dWN5NXdiM05wZEdsdmJrRnljbUY1UFZzd0xqQmRYU0F0SUVGeWNtRjVJRzltSUhObFoyMWxiblFnY0c5emFYUnBiMjV6SUNodmJuTmxkQ0IwYVcxbGMxeHVJQ29nSUdsdUlHRjFaR2x2SUdKMVptWmxjaWtnYVc0Z2MyVmpYRzRnS2lCQWNHRnlZVzBnZTA1MWJXSmxjbjBnVzI5d2RHbHZibk11Y0c5emFYUnBiMjVXWVhJOU1GMGdMU0JCYlc5MWRDQnZaaUJ5WVc1a2IyMGdjMlZuYldWdWRDQndiM05wZEdsdmJpQjJZWEpwWVhScGIyNGdhVzRnYzJWalhHNGdLaUJBY0dGeVlXMGdlMDUxYldKbGNuMGdXMjl3ZEdsdmJuTXVaSFZ5WVhScGIyNUJjbkpoZVQxYk1DNHdYVjBnTFNCQmNuSmhlU0J2WmlCelpXZHRaVzUwSUdSMWNtRjBhVzl1Y3lCcGJpQnpaV05jYmlBcUlFQndZWEpoYlNCN1RuVnRZbVZ5ZlNCYmIzQjBhVzl1Y3k1a2RYSmhkR2x2YmtGaWN6MHdYU0F0SUVGaWMyOXNkWFJsSUhObFoyMWxiblFnWkhWeVlYUnBiMjRnYVc0Z2MyVmpYRzRnS2lCQWNHRnlZVzBnZTA1MWJXSmxjbjBnVzI5d2RHbHZibk11WkhWeVlYUnBiMjVTWld3OU1WMGdMU0JUWldkdFpXNTBJR1IxY21GMGFXOXVJSEpsYkdGMGFYWmxJSFJ2SUdkcGRtVnVJSE5sWjIxbGJuUmNiaUFxSUNCa2RYSmhkR2x2YmlCdmNpQnBiblJsY2kxelpXZHRaVzUwSUdScGMzUmhibU5sWEc0Z0tpQkFjR0Z5WVcwZ2UwRnljbUY1ZlNCYmIzQjBhVzl1Y3k1dlptWnpaWFJCY25KaGVUMWJNQzR3WFYwZ0xTQkJjbkpoZVNCdlppQnpaV2R0Wlc1MElHOW1abk5sZEhNZ2FXNGdjMlZqWEc0Z0tpQkFjR0Z5WVcwZ2UwNTFiV0psY24wZ1cyOXdkR2x2Ym5NdWIyWm1jMlYwUVdKelBTMHdMakF3TlYwZ0xTQkJZbk52YkhWMFpTQnpaV2R0Wlc1MElHOW1abk5sZENCcGJpQnpaV05jYmlBcUlFQndZWEpoYlNCN1RuVnRZbVZ5ZlNCYmIzQjBhVzl1Y3k1dlptWnpaWFJTWld3OU1GMGdMU0JUWldkdFpXNTBJRzltWm5ObGRDQnlaV3hoZEdsMlpTQjBieUJ6WldkdFpXNTBJR1IxY21GMGFXOXVYRzRnS2lCQWNHRnlZVzBnZTA1MWJXSmxjbjBnVzI5d2RHbHZibk11WkdWc1lYazlNQzR3TURWZElDMGdWR2x0WlNCaWVTQjNhR2xqYUNCaGJHd2djMlZuYldWdWRITWdZWEpsSUdSbGJHRjVaV1FnS0dWemNHVmphV0ZzYkhsY2JpQXFJQ0IwYnlCeVpXRnNhWHBsSUhObFoyMWxiblFnYjJabWMyVjBjeWxjYmlBcUlFQndZWEpoYlNCN1RuVnRZbVZ5ZlNCYmIzQjBhVzl1Y3k1aGRIUmhZMnRCWW5NOU1DNHdNRFZkSUMwZ1FXSnpiMngxZEdVZ1lYUjBZV05ySUhScGJXVWdhVzRnYzJWalhHNGdLaUJBY0dGeVlXMGdlMDUxYldKbGNuMGdXMjl3ZEdsdmJuTXVZWFIwWVdOclVtVnNQVEJkSUMwZ1FYUjBZV05ySUhScGJXVWdjbVZzWVhScGRtVWdkRzhnYzJWbmJXVnVkQ0JrZFhKaGRHbHZibHh1SUNvZ1FIQmhjbUZ0SUh0T2RXMWlaWEo5SUZ0dmNIUnBiMjV6TG5KbGJHVmhjMlZCWW5NOU1DNHdNRFZkSUMwZ1FXSnpiMngxZEdVZ2NtVnNaV0Z6WlNCMGFXMWxJR2x1SUhObFkxeHVJQ29nUUhCaGNtRnRJSHRPZFcxaVpYSjlJRnR2Y0hScGIyNXpMbkpsYkdWaGMyVlNaV3c5TUYwZ0xTQlNaV3hsWVhObElIUnBiV1VnY21Wc1lYUnBkbVVnZEc4Z2MyVm5iV1Z1ZENCa2RYSmhkR2x2Ymx4dUlDb2dRSEJoY21GdElIdE9kVzFpWlhKOUlGdHZjSFJwYjI1ekxuSmxjMkZ0Y0d4cGJtYzlNRjBnTFNCVFpXZHRaVzUwSUhKbGMyRnRjR3hwYm1jZ2FXNGdZMlZ1ZEZ4dUlDb2dRSEJoY21GdElIdE9kVzFpWlhKOUlGdHZjSFJwYjI1ekxuSmxjMkZ0Y0d4cGJtZFdZWEk5TUYwZ0xTQkJiVzkxZENCdlppQnlZVzVrYjIwZ2NtVnpZVzF3YkdsdVp5QjJZWEpwWVhScGIyNGdhVzRnWTJWdWRGeHVJQ29nUUhCaGNtRnRJSHRPZFcxaVpYSjlJRnR2Y0hScGIyNXpMbWRoYVc0OU1WMGdMU0JNYVc1bFlYSWdaMkZwYmlCbVlXTjBiM0pjYmlBcUlFQndZWEpoYlNCN1RuVnRZbVZ5ZlNCYmIzQjBhVzl1Y3k1aFltOXlkRlJwYldVOU1DNHdNRFZkSUMwZ1ptRmtaUzF2ZFhRZ2RHbHRaU0IzYUdWdUlHRmliM0owWldSY2JpQXFJRUJ3WVhKaGJTQjdUblZ0WW1WeWZTQmJiM0IwYVc5dWN5NXpaV2R0Wlc1MFNXNWtaWGc5TUYwZ0xTQkpibVJsZUNCdlppQjBhR1VnYzJWbmJXVnVkQ0IwYnlCemVXNTBhR1Z6YVhwbElDaHBMbVV1SUc5bVhHNGdLaUFnZEdocGN5NXdiM05wZEdsdmJrRnljbUY1TDJSMWNtRjBhVzl1UVhKeVlYa3ZiMlptYzJWMFFYSnlZWGtwWEc0Z0tpQkFjR0Z5WVcwZ2UwSnZiMng5SUZ0dmNIUnBiMjV6TG1ONVkyeHBZejFtWVd4elpWMGdMU0JYYUdWMGFHVnlJSFJvWlNCaGRXUnBieUJpZFdabVpYSWdZVzVrSUhObFoyMWxiblFnYVc1a2FXTmxjeUJoY21WY2JpQXFJQ0JqYjI1emFXUmxjbVZrSUdGeklHTjVZMnhwWTF4dUlDb2dRSEJoY21GdElIdE9kVzFpWlhKOUlGdHZjSFJwYjI1ekxuZHlZWEJCY205MWJtUkZlSFJsYm5OcGIyNDlNRjBnTFNCUWIzSjBhVzl1SUdGMElIUm9aU0JsYm1RZ2IyWWdkR2hsSUdGMVpHbHZJR0oxWm1abGNseHVJQ29nSUhSb1lYUWdhR0Z6SUdKbFpXNGdZMjl3YVdWa0lHWnliMjBnZEdobElHSmxaMmx1Ym1sdVp5QjBieUJoYzNOMWNtVWdZM2xqYkdsaklHSmxhR0YyYVc5eVhHNGdLaTljYm1Oc1lYTnpJRk5sWjIxbGJuUkZibWRwYm1VZ1pYaDBaVzVrY3lCQmRXUnBiMVJwYldWRmJtZHBibVVnZTF4dUlDQmpiMjV6ZEhKMVkzUnZjaWh2Y0hScGIyNXpJRDBnZTMwcElIdGNiaUFnSUNCemRYQmxjaWh2Y0hScGIyNXpMbUYxWkdsdlEyOXVkR1Y0ZENrN1hHNWNiaUFnSUNBdktpcGNiaUFnSUNBZ0tpQkJkV1JwYnlCaWRXWm1aWEpjYmlBZ0lDQWdLaUJBYm1GdFpTQmlkV1ptWlhKY2JpQWdJQ0FnS2lCQWRIbHdaU0I3UVhWa2FXOUNkV1ptWlhKOVhHNGdJQ0FnSUNvZ1FHUmxabUYxYkhRZ2JuVnNiRnh1SUNBZ0lDQXFJRUJ0WlcxaVpYSnZaaUJUWldkdFpXNTBSVzVuYVc1bFhHNGdJQ0FnSUNvZ1FHbHVjM1JoYm1ObFhHNGdJQ0FnSUNvdlhHNGdJQ0FnZEdocGN5NWlkV1ptWlhJZ1BTQnZjSFJQY2tSbFppaHZjSFJwYjI1ekxtSjFabVpsY2l3Z2JuVnNiQ2s3WEc1Y2JpQWdJQ0F2S2lwY2JpQWdJQ0FnS2lCQlluTnZiSFYwWlNCelpXZHRaVzUwSUhCbGNtbHZaQ0JwYmlCelpXTmNiaUFnSUNBZ0tpQkFibUZ0WlNCd1pYSnBiMlJCWW5OY2JpQWdJQ0FnS2lCQWRIbHdaU0I3VG5WdFltVnlmVnh1SUNBZ0lDQXFJRUJrWldaaGRXeDBJREJjYmlBZ0lDQWdLaUJBYldWdFltVnliMllnVTJWbmJXVnVkRVZ1WjJsdVpWeHVJQ0FnSUNBcUlFQnBibk4wWVc1alpWeHVJQ0FnSUNBcUwxeHVJQ0FnSUhSb2FYTXVjR1Z5YVc5a1FXSnpJRDBnYjNCMFQzSkVaV1lvYjNCMGFXOXVjeTV3WlhKcGIyUkJZbk1zSURBcE8xeHVYRzRnSUNBZ0x5b3FYRzRnSUNBZ0lDb2dVMlZuYldWdWRDQndaWEpwYjJRZ2NtVnNZWFJwZG1VZ2RHOGdhVzUwWlhJdGMyVm5iV1Z1ZENCa2FYTjBZVzVqWlZ4dUlDQWdJQ0FxSUVCdVlXMWxJSEJsY21sdlpGSmxiRnh1SUNBZ0lDQXFJRUIwZVhCbElIdE9kVzFpWlhKOVhHNGdJQ0FnSUNvZ1FHUmxabUYxYkhRZ01WeHVJQ0FnSUNBcUlFQnRaVzFpWlhKdlppQlRaV2R0Wlc1MFJXNW5hVzVsWEc0Z0lDQWdJQ29nUUdsdWMzUmhibU5sWEc0Z0lDQWdJQ292WEc0Z0lDQWdkR2hwY3k1d1pYSnBiMlJTWld3Z1BTQnZjSFJQY2tSbFppaHZjSFJwYjI1ekxuQmxjbWx2WkZKbGJDd2dNU2s3WEc1Y2JpQWdJQ0F2S2lwY2JpQWdJQ0FnS2lCQmJXOTFkQ0J2WmlCeVlXNWtiMjBnYzJWbmJXVnVkQ0J3WlhKcGIyUWdkbUZ5YVdGMGFXOXVJSEpsYkdGMGFYWmxJSFJ2SUhObFoyMWxiblFnY0dWeWFXOWtYRzRnSUNBZ0lDb2dRRzVoYldVZ2NHVnlhVzlrVm1GeVhHNGdJQ0FnSUNvZ1FIUjVjR1VnZTA1MWJXSmxjbjFjYmlBZ0lDQWdLaUJBWkdWbVlYVnNkQ0F3WEc0Z0lDQWdJQ29nUUcxbGJXSmxjbTltSUZObFoyMWxiblJGYm1kcGJtVmNiaUFnSUNBZ0tpQkFhVzV6ZEdGdVkyVmNiaUFnSUNBZ0tpOWNiaUFnSUNCMGFHbHpMbkJsY21sdlpGWmhjaUE5SUc5d2RFOXlSR1ZtS0c5d2RHbHZibk11Y0dWeWFXOWtWbUZ5TENBd0tUdGNibHh1SUNBZ0lDOHFLbHh1SUNBZ0lDQXFJRTFwYm1sdGRXMGdjMlZuYldWdWRDQndaWEpwYjJSY2JpQWdJQ0FnS2lCQWJtRnRaU0J3WlhKcGIyUk5hVzVjYmlBZ0lDQWdLaUJBZEhsd1pTQjdUblZ0WW1WeWZWeHVJQ0FnSUNBcUlFQmtaV1poZFd4MElEQXVNREF4WEc0Z0lDQWdJQ29nUUcxbGJXSmxjbTltSUZObFoyMWxiblJGYm1kcGJtVmNiaUFnSUNBZ0tpQkFhVzV6ZEdGdVkyVmNiaUFnSUNBZ0tpOWNiaUFnSUNCMGFHbHpMbkJsY21sdlpFMXBiaUE5SUc5d2RFOXlSR1ZtS0c5d2RHbHZibk11Y0dWeWFXOWtUV2x1TENBd0xqQXdNU2s3WEc1Y2JpQWdJQ0F2S2lwY2JpQWdJQ0FnS2lCQmNuSmhlU0J2WmlCelpXZHRaVzUwSUhCdmMybDBhVzl1Y3lBb2IyNXpaWFFnZEdsdFpYTWdhVzRnWVhWa2FXOGdZblZtWm1WeUtTQnBiaUJ6WldOY2JpQWdJQ0FnS2lCQWJtRnRaU0J3YjNOcGRHbHZia0Z5Y21GNVhHNGdJQ0FnSUNvZ1FIUjVjR1VnZTA1MWJXSmxjbjFjYmlBZ0lDQWdLaUJBWkdWbVlYVnNkQ0JiTUM0d1hWeHVJQ0FnSUNBcUlFQnRaVzFpWlhKdlppQlRaV2R0Wlc1MFJXNW5hVzVsWEc0Z0lDQWdJQ29nUUdsdWMzUmhibU5sWEc0Z0lDQWdJQ292WEc0Z0lDQWdkR2hwY3k1d2IzTnBkR2x2YmtGeWNtRjVJRDBnYjNCMFQzSkVaV1lvYjNCMGFXOXVjeTV3YjNOcGRHbHZia0Z5Y21GNUxDQmJNQzR3WFNrN1hHNWNiaUFnSUNBdktpcGNiaUFnSUNBZ0tpQkJiVzkxZENCdlppQnlZVzVrYjIwZ2MyVm5iV1Z1ZENCd2IzTnBkR2x2YmlCMllYSnBZWFJwYjI0Z2FXNGdjMlZqWEc0Z0lDQWdJQ29nUUc1aGJXVWdjRzl6YVhScGIyNVdZWEpjYmlBZ0lDQWdLaUJBZEhsd1pTQjdUblZ0WW1WeWZWeHVJQ0FnSUNBcUlFQmtaV1poZFd4MElEQmNiaUFnSUNBZ0tpQkFiV1Z0WW1WeWIyWWdVMlZuYldWdWRFVnVaMmx1WlZ4dUlDQWdJQ0FxSUVCcGJuTjBZVzVqWlZ4dUlDQWdJQ0FxTDF4dUlDQWdJSFJvYVhNdWNHOXphWFJwYjI1V1lYSWdQU0J2Y0hSUGNrUmxaaWh2Y0hScGIyNXpMbkJ2YzJsMGFXOXVWbUZ5TENBd0tUdGNibHh1SUNBZ0lDOHFLbHh1SUNBZ0lDQXFJRUZ5Y21GNUlHOW1JSE5sWjIxbGJuUWdaSFZ5WVhScGIyNXpJR2x1SUhObFkxeHVJQ0FnSUNBcUlFQnVZVzFsSUdSMWNtRjBhVzl1UVhKeVlYbGNiaUFnSUNBZ0tpQkFkSGx3WlNCN1RuVnRZbVZ5ZlZ4dUlDQWdJQ0FxSUVCa1pXWmhkV3gwSUZzd0xqQmRYRzRnSUNBZ0lDb2dRRzFsYldKbGNtOW1JRk5sWjIxbGJuUkZibWRwYm1WY2JpQWdJQ0FnS2lCQWFXNXpkR0Z1WTJWY2JpQWdJQ0FnS2k5Y2JpQWdJQ0IwYUdsekxtUjFjbUYwYVc5dVFYSnlZWGtnUFNCdmNIUlBja1JsWmlodmNIUnBiMjV6TG1SMWNtRjBhVzl1UVhKeVlYa3NJRnN3TGpCZEtUdGNibHh1SUNBZ0lDOHFLbHh1SUNBZ0lDQXFJRUZpYzI5c2RYUmxJSE5sWjIxbGJuUWdaSFZ5WVhScGIyNGdhVzRnYzJWalhHNGdJQ0FnSUNvZ1FHNWhiV1VnWkhWeVlYUnBiMjVCWW5OY2JpQWdJQ0FnS2lCQWRIbHdaU0I3VG5WdFltVnlmVnh1SUNBZ0lDQXFJRUJrWldaaGRXeDBJREJjYmlBZ0lDQWdLaUJBYldWdFltVnliMllnVTJWbmJXVnVkRVZ1WjJsdVpWeHVJQ0FnSUNBcUlFQnBibk4wWVc1alpWeHVJQ0FnSUNBcUwxeHVJQ0FnSUhSb2FYTXVaSFZ5WVhScGIyNUJZbk1nUFNCdmNIUlBja1JsWmlodmNIUnBiMjV6TG1SMWNtRjBhVzl1UVdKekxDQXdLVHRjYmx4dUlDQWdJQzhxS2x4dUlDQWdJQ0FxSUZObFoyMWxiblFnWkhWeVlYUnBiMjRnY21Wc1lYUnBkbVVnZEc4Z1oybDJaVzRnYzJWbmJXVnVkQ0JrZFhKaGRHbHZiaUJ2Y2lCcGJuUmxjaTF6WldkdFpXNTBJR1JwYzNSaGJtTmxYRzRnSUNBZ0lDb2dRRzVoYldVZ1pIVnlZWFJwYjI1U1pXeGNiaUFnSUNBZ0tpQkFkSGx3WlNCN1RuVnRZbVZ5ZlZ4dUlDQWdJQ0FxSUVCa1pXWmhkV3gwSURGY2JpQWdJQ0FnS2lCQWJXVnRZbVZ5YjJZZ1UyVm5iV1Z1ZEVWdVoybHVaVnh1SUNBZ0lDQXFJRUJwYm5OMFlXNWpaVnh1SUNBZ0lDQXFMMXh1SUNBZ0lIUm9hWE11WkhWeVlYUnBiMjVTWld3Z1BTQnZjSFJQY2tSbFppaHZjSFJwYjI1ekxtUjFjbUYwYVc5dVVtVnNMQ0F4S1R0Y2JseHVJQ0FnSUM4cUtseHVJQ0FnSUNBcUlFRnljbUY1SUc5bUlITmxaMjFsYm5RZ2IyWm1jMlYwY3lCcGJpQnpaV05jYmlBZ0lDQWdLbHh1SUNBZ0lDQXFJRzltWm5ObGRDQStJREE2SUhSb1pTQnpaV2R0Wlc1MEozTWdjbVZtWlhKbGJtTmxJSEJ2YzJsMGFXOXVJR2x6SUdGbWRHVnlJSFJvWlNCbmFYWmxiaUJ6WldkdFpXNTBJSEJ2YzJsMGFXOXVYRzRnSUNBZ0lDb2diMlptYzJWMElEd2dNRG9nZEdobElHZHBkbVZ1SUhObFoyMWxiblFnY0c5emFYUnBiMjRnYVhNZ2RHaGxJSE5sWjIxbGJuUW5jeUJ5WldabGNtVnVZMlVnY0c5emFYUnBiMjVjYmlBZ0lDQWdLaUJoYm1RZ2RHaGxJR1IxY21GMGFXOXVJR2hoY3lCMGJ5QmlaU0JqYjNKeVpXTjBaV1FnWW5rZ2RHaGxJRzltWm5ObGRGeHVJQ0FnSUNBcVhHNGdJQ0FnSUNvZ1FHNWhiV1VnYjJabWMyVjBRWEp5WVhsY2JpQWdJQ0FnS2lCQWRIbHdaU0I3UVhKeVlYbDlYRzRnSUNBZ0lDb2dRR1JsWm1GMWJIUWdXekF1TUYxY2JpQWdJQ0FnS2lCQWJXVnRZbVZ5YjJZZ1UyVm5iV1Z1ZEVWdVoybHVaVnh1SUNBZ0lDQXFJRUJwYm5OMFlXNWpaVnh1SUNBZ0lDQXFMMXh1SUNBZ0lIUm9hWE11YjJabWMyVjBRWEp5WVhrZ1BTQnZjSFJQY2tSbFppaHZjSFJwYjI1ekxtOW1abk5sZEVGeWNtRjVMQ0JiTUM0d1hTazdYRzVjYmlBZ0lDQXZLaXBjYmlBZ0lDQWdLaUJCWW5OdmJIVjBaU0J6WldkdFpXNTBJRzltWm5ObGRDQnBiaUJ6WldOY2JpQWdJQ0FnS2lCQWJtRnRaU0J2Wm1aelpYUkJZbk5jYmlBZ0lDQWdLaUJBZEhsd1pTQjdUblZ0WW1WeWZWeHVJQ0FnSUNBcUlFQmtaV1poZFd4MElDMHdMakF3TlZ4dUlDQWdJQ0FxSUVCdFpXMWlaWEp2WmlCVFpXZHRaVzUwUlc1bmFXNWxYRzRnSUNBZ0lDb2dRR2x1YzNSaGJtTmxYRzRnSUNBZ0lDb3ZYRzRnSUNBZ2RHaHBjeTV2Wm1aelpYUkJZbk1nUFNCdmNIUlBja1JsWmlodmNIUnBiMjV6TG05bVpuTmxkRUZpY3l3Z0xUQXVNREExS1R0Y2JseHVJQ0FnSUM4cUtseHVJQ0FnSUNBcUlGTmxaMjFsYm5RZ2IyWm1jMlYwSUhKbGJHRjBhWFpsSUhSdklITmxaMjFsYm5RZ1pIVnlZWFJwYjI1Y2JpQWdJQ0FnS2lCQWJtRnRaU0J2Wm1aelpYUlNaV3hjYmlBZ0lDQWdLaUJBZEhsd1pTQjdUblZ0WW1WeWZWeHVJQ0FnSUNBcUlFQmtaV1poZFd4MElEQmNiaUFnSUNBZ0tpQkFiV1Z0WW1WeWIyWWdVMlZuYldWdWRFVnVaMmx1WlZ4dUlDQWdJQ0FxSUVCcGJuTjBZVzVqWlZ4dUlDQWdJQ0FxTDF4dUlDQWdJSFJvYVhNdWIyWm1jMlYwVW1Wc0lEMGdiM0IwVDNKRVpXWW9iM0IwYVc5dWN5NXZabVp6WlhSU1pXd3NJREFwTzF4dVhHNGdJQ0FnTHlvcVhHNGdJQ0FnSUNvZ1ZHbHRaU0JpZVNCM2FHbGphQ0JoYkd3Z2MyVm5iV1Z1ZEhNZ1lYSmxJR1JsYkdGNVpXUWdLR1Z6Y0dWamFXRnNiSGtnZEc4Z2NtVmhiR2w2WlNCelpXZHRaVzUwSUc5bVpuTmxkSE1wWEc0Z0lDQWdJQ29nUUc1aGJXVWdaR1ZzWVhsY2JpQWdJQ0FnS2lCQWRIbHdaU0I3VG5WdFltVnlmVnh1SUNBZ0lDQXFJRUJrWldaaGRXeDBJREF1TURBMVhHNGdJQ0FnSUNvZ1FHMWxiV0psY205bUlGTmxaMjFsYm5SRmJtZHBibVZjYmlBZ0lDQWdLaUJBYVc1emRHRnVZMlZjYmlBZ0lDQWdLaTljYmlBZ0lDQjBhR2x6TG1SbGJHRjVJRDBnYjNCMFQzSkVaV1lvYjNCMGFXOXVjeTVrWld4aGVTd2dNQzR3TURVcE8xeHVYRzRnSUNBZ0x5b3FYRzRnSUNBZ0lDb2dRV0p6YjJ4MWRHVWdZWFIwWVdOcklIUnBiV1VnYVc0Z2MyVmpYRzRnSUNBZ0lDb2dRRzVoYldVZ1lYUjBZV05yUVdKelhHNGdJQ0FnSUNvZ1FIUjVjR1VnZTA1MWJXSmxjbjFjYmlBZ0lDQWdLaUJBWkdWbVlYVnNkQ0F3TGpBd05WeHVJQ0FnSUNBcUlFQnRaVzFpWlhKdlppQlRaV2R0Wlc1MFJXNW5hVzVsWEc0Z0lDQWdJQ29nUUdsdWMzUmhibU5sWEc0Z0lDQWdJQ292WEc0Z0lDQWdkR2hwY3k1aGRIUmhZMnRCWW5NZ1BTQnZjSFJQY2tSbFppaHZjSFJwYjI1ekxtRjBkR0ZqYTBGaWN5d2dNQzR3TURVcE8xeHVYRzRnSUNBZ0x5b3FYRzRnSUNBZ0lDb2dRWFIwWVdOcklIUnBiV1VnY21Wc1lYUnBkbVVnZEc4Z2MyVm5iV1Z1ZENCa2RYSmhkR2x2Ymx4dUlDQWdJQ0FxSUVCdVlXMWxJR0YwZEdGamExSmxiRnh1SUNBZ0lDQXFJRUIwZVhCbElIdE9kVzFpWlhKOVhHNGdJQ0FnSUNvZ1FHUmxabUYxYkhRZ01GeHVJQ0FnSUNBcUlFQnRaVzFpWlhKdlppQlRaV2R0Wlc1MFJXNW5hVzVsWEc0Z0lDQWdJQ29nUUdsdWMzUmhibU5sWEc0Z0lDQWdJQ292WEc0Z0lDQWdkR2hwY3k1aGRIUmhZMnRTWld3Z1BTQnZjSFJQY2tSbFppaHZjSFJwYjI1ekxtRjBkR0ZqYTFKbGJDd2dNQ2s3WEc1Y2JpQWdJQ0F2S2lwY2JpQWdJQ0FnS2lCQlluTnZiSFYwWlNCeVpXeGxZWE5sSUhScGJXVWdhVzRnYzJWalhHNGdJQ0FnSUNvZ1FHNWhiV1VnY21Wc1pXRnpaVUZpYzF4dUlDQWdJQ0FxSUVCMGVYQmxJSHRPZFcxaVpYSjlYRzRnSUNBZ0lDb2dRR1JsWm1GMWJIUWdNQzR3TURWY2JpQWdJQ0FnS2lCQWJXVnRZbVZ5YjJZZ1UyVm5iV1Z1ZEVWdVoybHVaVnh1SUNBZ0lDQXFJRUJwYm5OMFlXNWpaVnh1SUNBZ0lDQXFMMXh1SUNBZ0lIUm9hWE11Y21Wc1pXRnpaVUZpY3lBOUlHOXdkRTl5UkdWbUtHOXdkR2x2Ym5NdWNtVnNaV0Z6WlVGaWN5d2dNQzR3TURVcE8xeHVYRzRnSUNBZ0x5b3FYRzRnSUNBZ0lDb2dVbVZzWldGelpTQjBhVzFsSUhKbGJHRjBhWFpsSUhSdklITmxaMjFsYm5RZ1pIVnlZWFJwYjI1Y2JpQWdJQ0FnS2lCQWJtRnRaU0J5Wld4bFlYTmxVbVZzWEc0Z0lDQWdJQ29nUUhSNWNHVWdlMDUxYldKbGNuMWNiaUFnSUNBZ0tpQkFaR1ZtWVhWc2RDQXdYRzRnSUNBZ0lDb2dRRzFsYldKbGNtOW1JRk5sWjIxbGJuUkZibWRwYm1WY2JpQWdJQ0FnS2lCQWFXNXpkR0Z1WTJWY2JpQWdJQ0FnS2k5Y2JpQWdJQ0IwYUdsekxuSmxiR1ZoYzJWU1pXd2dQU0J2Y0hSUGNrUmxaaWh2Y0hScGIyNXpMbkpsYkdWaGMyVlNaV3dzSURBcE8xeHVYRzRnSUNBZ0x5b3FYRzRnSUNBZ0lDb2dVMlZuYldWdWRDQnlaWE5oYlhCc2FXNW5JR2x1SUdObGJuUmNiaUFnSUNBZ0tpQkFibUZ0WlNCeVpYTmhiWEJzYVc1blhHNGdJQ0FnSUNvZ1FIUjVjR1VnZTA1MWJXSmxjbjFjYmlBZ0lDQWdLaUJBWkdWbVlYVnNkQ0F3WEc0Z0lDQWdJQ29nUUcxbGJXSmxjbTltSUZObFoyMWxiblJGYm1kcGJtVmNiaUFnSUNBZ0tpQkFhVzV6ZEdGdVkyVmNiaUFnSUNBZ0tpOWNiaUFnSUNCMGFHbHpMbkpsYzJGdGNHeHBibWNnUFNCdmNIUlBja1JsWmlodmNIUnBiMjV6TG5KbGMyRnRjR3hwYm1jc0lEQXBPMXh1WEc0Z0lDQWdMeW9xWEc0Z0lDQWdJQ29nUVcxdmRYUWdiMllnY21GdVpHOXRJSEpsYzJGdGNHeHBibWNnZG1GeWFXRjBhVzl1SUdsdUlHTmxiblJjYmlBZ0lDQWdLaUJBYm1GdFpTQnlaWE5oYlhCc2FXNW5WbUZ5WEc0Z0lDQWdJQ29nUUhSNWNHVWdlMDUxYldKbGNuMWNiaUFnSUNBZ0tpQkFaR1ZtWVhWc2RDQXdYRzRnSUNBZ0lDb2dRRzFsYldKbGNtOW1JRk5sWjIxbGJuUkZibWRwYm1WY2JpQWdJQ0FnS2lCQWFXNXpkR0Z1WTJWY2JpQWdJQ0FnS2k5Y2JpQWdJQ0IwYUdsekxuSmxjMkZ0Y0d4cGJtZFdZWElnUFNCdmNIUlBja1JsWmlodmNIUnBiMjV6TG5KbGMyRnRjR3hwYm1kV1lYSXNJREFwTzF4dVhHNGdJQ0FnTHlvcVhHNGdJQ0FnSUNvZ1RHbHVaV0Z5SUdkaGFXNGdabUZqZEc5eVhHNGdJQ0FnSUNvZ1FHNWhiV1VnWjJGcGJseHVJQ0FnSUNBcUlFQjBlWEJsSUh0T2RXMWlaWEo5WEc0Z0lDQWdJQ29nUUdSbFptRjFiSFFnTVZ4dUlDQWdJQ0FxSUVCdFpXMWlaWEp2WmlCVFpXZHRaVzUwUlc1bmFXNWxYRzRnSUNBZ0lDb2dRR2x1YzNSaGJtTmxYRzRnSUNBZ0lDb3ZYRzRnSUNBZ2RHaHBjeTVuWVdsdUlEMGdiM0IwVDNKRVpXWW9iM0IwYVc5dWN5NW5ZV2x1TENBeEtUdGNibHh1SUNBZ0lDOHFLbHh1SUNBZ0lDQXFJRWx1WkdWNElHOW1JSFJvWlNCelpXZHRaVzUwSUhSdklITjViblJvWlhOcGVtVWdLR2t1WlM0Z2IyWWdkR2hwY3k1d2IzTnBkR2x2YmtGeWNtRjVMMlIxY21GMGFXOXVRWEp5WVhrdmIyWm1jMlYwUVhKeVlYa3BYRzRnSUNBZ0lDb2dRRzVoYldVZ2MyVm5iV1Z1ZEVsdVpHVjRYRzRnSUNBZ0lDb2dRSFI1Y0dVZ2UwNTFiV0psY24xY2JpQWdJQ0FnS2lCQVpHVm1ZWFZzZENBd1hHNGdJQ0FnSUNvZ1FHMWxiV0psY205bUlGTmxaMjFsYm5SRmJtZHBibVZjYmlBZ0lDQWdLaUJBYVc1emRHRnVZMlZjYmlBZ0lDQWdLaTljYmlBZ0lDQjBhR2x6TG5ObFoyMWxiblJKYm1SbGVDQTlJRzl3ZEU5eVJHVm1LRzl3ZEdsdmJuTXVjMlZuYldWdWRFbHVaR1Y0TENBd0tUdGNibHh1SUNBZ0lDOHFLbHh1SUNBZ0lDQXFJRmRvWlhSb1pYSWdkR2hsSUdGMVpHbHZJR0oxWm1abGNpQmhibVFnYzJWbmJXVnVkQ0JwYm1ScFkyVnpJR0Z5WlNCamIyNXphV1JsY21Wa0lHRnpJR041WTJ4cFkxeHVJQ0FnSUNBcUlFQnVZVzFsSUdONVkyeHBZMXh1SUNBZ0lDQXFJRUIwZVhCbElIdENiMjlzZlZ4dUlDQWdJQ0FxSUVCa1pXWmhkV3gwSUdaaGJITmxYRzRnSUNBZ0lDb2dRRzFsYldKbGNtOW1JRk5sWjIxbGJuUkZibWRwYm1WY2JpQWdJQ0FnS2lCQWFXNXpkR0Z1WTJWY2JpQWdJQ0FnS2k5Y2JpQWdJQ0IwYUdsekxtTjVZMnhwWXlBOUlHOXdkRTl5UkdWbUtHOXdkR2x2Ym5NdVkzbGpiR2xqTENCbVlXeHpaU2s3WEc0Z0lDQWdkR2hwY3k1ZlgyTjVZMnhwWTA5bVpuTmxkQ0E5SURBN1hHNWNiaUFnSUNBdktpcGNiaUFnSUNBZ0tpQlhhR1YwYUdWeUlIUm9aU0JzWVhOMElITmxaMjFsYm5RZ2FYTWdZV0p2Y25SbFpDQjNhR1Z1SUhSeWFXZG5aWEpwYm1jZ2RHaGxJRzVsZUhSY2JpQWdJQ0FnS2lCQWJtRnRaU0J0YjI1dmNHaHZibWxqWEc0Z0lDQWdJQ29nUUhSNWNHVWdlMDUxYldKbGNuMWNiaUFnSUNBZ0tpQkFaR1ZtWVhWc2RDQm1ZV3h6WlZ4dUlDQWdJQ0FxSUVCdFpXMWlaWEp2WmlCVFpXZHRaVzUwUlc1bmFXNWxYRzRnSUNBZ0lDb2dRR2x1YzNSaGJtTmxYRzRnSUNBZ0lDb3ZYRzRnSUNBZ2RHaHBjeTV0YjI1dmNHaHZibWxqSUQwZ2IzQjBUM0pFWldZb2IzQjBhVzl1Y3k1dGIyNXZjR2h2Ym1sakxDQm1ZV3h6WlNrN1hHNGdJQ0FnZEdocGN5NWZYMk4xY25KbGJuUlRjbU1nUFNCdWRXeHNPMXh1SUNBZ0lIUm9hWE11WDE5amRYSnlaVzUwUlc1MklEMGdiblZzYkR0Y2JpQWdJQ0IwYUdsekxsOWZjbVZzWldGelpWTjBZWEowVkdsdFpTQTlJREE3WEc0Z0lDQWdkR2hwY3k1ZlgyTjFjbkpsYm5SSFlXbHVJRDBnTUR0Y2JpQWdJQ0IwYUdsekxsOWZZM1Z5Y21WdWRFVnVaRlJwYldVZ1BTQXdPMXh1WEc0Z0lDQWdMeW9xWEc0Z0lDQWdJQ29nUm1Ga1pTMXZkWFFnZEdsdFpTQW9kMmhsYmlCaFltOXlkR1ZrS1Z4dUlDQWdJQ0FxSUVCdVlXMWxJR0ZpYjNKMFZHbHRaVnh1SUNBZ0lDQXFJRUIwZVhCbElIdE9kVzFpWlhKOVhHNGdJQ0FnSUNvZ1FHUmxabUYxYkhRZ01DNHdNRFZjYmlBZ0lDQWdLaUJBYldWdFltVnliMllnVTJWbmJXVnVkRVZ1WjJsdVpWeHVJQ0FnSUNBcUlFQnBibk4wWVc1alpWeHVJQ0FnSUNBcUwxeHVJQ0FnSUhSb2FYTXVZV0p2Y25SVWFXMWxJRDBnYjNCMFQzSkVaV1lvYjNCMGFXOXVjeTVoWW05eWRGUnBiV1VzSURBdU1EQTFLVHRjYmx4dUlDQWdJQzhxS2x4dUlDQWdJQ0FxSUZCdmNuUnBiMjRnWVhRZ2RHaGxJR1Z1WkNCdlppQjBhR1VnWVhWa2FXOGdZblZtWm1WeUlIUm9ZWFFnYUdGeklHSmxaVzRnWTI5d2FXVmtJR1p5YjIwZ2RHaGxJR0psWjJsdWJtbHVaeUIwYnlCaGMzTjFjbVVnWTNsamJHbGpJR0psYUdGMmFXOXlYRzRnSUNBZ0lDb2dRRzVoYldVZ2QzSmhjRUZ5YjNWdVpFVjRkR1Z1YzJsdmJseHVJQ0FnSUNBcUlFQjBlWEJsSUh0T2RXMWlaWEo5WEc0Z0lDQWdJQ29nUUdSbFptRjFiSFFnTUZ4dUlDQWdJQ0FxSUVCdFpXMWlaWEp2WmlCVFpXZHRaVzUwUlc1bmFXNWxYRzRnSUNBZ0lDb2dRR2x1YzNSaGJtTmxYRzRnSUNBZ0lDb3ZYRzRnSUNBZ2RHaHBjeTUzY21Gd1FYSnZkVzVrUlhoMFpXNXphVzl1SUQwZ2IzQjBUM0pFWldZb2IzQjBhVzl1Y3k1M2NtRndRWEp2ZFc1a1JYaDBaVzV6YVc5dUxDQXdLVHRjYmx4dUlDQWdJSFJvYVhNdWIzVjBjSFYwVG05a1pTQTlJSFJvYVhNdVlYVmthVzlEYjI1MFpYaDBMbU55WldGMFpVZGhhVzRvS1R0Y2JpQWdmVnh1WEc0Z0lDOHFLbHh1SUNBZ0tpQkhaWFFnWW5WbVptVnlJR1IxY21GMGFXOXVJQ2hsZUdOc2RXUnBibWNnZDNKaGNFRnliM1Z1WkVWNGRHVnVjMmx2YmlsY2JpQWdJQ3BjYmlBZ0lDb2dRSFI1Y0dVZ2UwNTFiV0psY24xY2JpQWdJQ29nUUdSbFptRjFiSFFnTUZ4dUlDQWdLaUJBYldWdFltVnliMllnVTJWbmJXVnVkRVZ1WjJsdVpWeHVJQ0FnS2lCQWFXNXpkR0Z1WTJWY2JpQWdJQ292WEc0Z0lHZGxkQ0JpZFdabVpYSkVkWEpoZEdsdmJpZ3BJSHRjYmlBZ0lDQnBaaUFvZEdocGN5NWlkV1ptWlhJcElIdGNiaUFnSUNBZ0lIWmhjaUJpZFdabVpYSkVkWEpoZEdsdmJpQTlJSFJvYVhNdVluVm1abVZ5TG1SMWNtRjBhVzl1TzF4dVhHNGdJQ0FnSUNCcFppQW9kR2hwY3k1M2NtRndRWEp2ZFc1a1JYaDBaVzV6YVc5dUtWeHVJQ0FnSUNBZ0lDQmlkV1ptWlhKRWRYSmhkR2x2YmlBdFBTQjBhR2x6TG5keVlYQkJjbTkxYm1SRmVIUmxibk5wYjI0N1hHNWNiaUFnSUNBZ0lISmxkSFZ5YmlCaWRXWm1aWEpFZFhKaGRHbHZianRjYmlBZ0lDQjlYRzVjYmlBZ0lDQnlaWFIxY200Z01EdGNiaUFnZlZ4dVhHNGdJQzh2SUZScGJXVkZibWRwYm1VZ2JXVjBhRzlrSUNoMGNtRnVjM0J2Y25SbFpDQnBiblJsY21aaFkyVXBYRzRnSUdGa2RtRnVZMlZVYVcxbEtIUnBiV1VwSUh0Y2JpQWdJQ0IwYVcxbElEMGdUV0YwYUM1dFlYZ29kR2x0WlN3Z2RHaHBjeTVoZFdScGIwTnZiblJsZUhRdVkzVnljbVZ1ZEZScGJXVXBPMXh1SUNBZ0lISmxkSFZ5YmlCMGFXMWxJQ3NnZEdocGN5NTBjbWxuWjJWeUtIUnBiV1VwTzF4dUlDQjlYRzVjYmlBZ0x5OGdWR2x0WlVWdVoybHVaU0J0WlhSb2IyUWdLSFJ5WVc1emNHOXlkR1ZrSUdsdWRHVnlabUZqWlNsY2JpQWdjM2x1WTFCdmMybDBhVzl1S0hScGJXVXNJSEJ2YzJsMGFXOXVMQ0J6Y0dWbFpDa2dlMXh1SUNBZ0lIWmhjaUJwYm1SbGVDQTlJSFJvYVhNdWMyVm5iV1Z1ZEVsdVpHVjRPMXh1SUNBZ0lIWmhjaUJqZVdOc2FXTlBabVp6WlhRZ1BTQXdPMXh1SUNBZ0lIWmhjaUJpZFdabVpYSkVkWEpoZEdsdmJpQTlJSFJvYVhNdVluVm1abVZ5UkhWeVlYUnBiMjQ3WEc1Y2JpQWdJQ0JwWmlBb2RHaHBjeTVqZVdOc2FXTXBJSHRjYmlBZ0lDQWdJSFpoY2lCamVXTnNaWE1nUFNCd2IzTnBkR2x2YmlBdklHSjFabVpsY2tSMWNtRjBhVzl1TzF4dVhHNGdJQ0FnSUNCamVXTnNhV05QWm1aelpYUWdQU0JOWVhSb0xtWnNiMjl5S0dONVkyeGxjeWtnS2lCaWRXWm1aWEpFZFhKaGRHbHZianRjYmlBZ0lDQWdJSEJ2YzJsMGFXOXVJQzA5SUdONVkyeHBZMDltWm5ObGREdGNiaUFnSUNCOVhHNWNiaUFnSUNCcFppQW9jM0JsWldRZ1BpQXdLU0I3WEc0Z0lDQWdJQ0JwYm1SbGVDQTlJR2RsZEVOMWNuSmxiblJQY2s1bGVIUkpibVJsZUNoMGFHbHpMbkJ2YzJsMGFXOXVRWEp5WVhrc0lIQnZjMmwwYVc5dUtUdGNibHh1SUNBZ0lDQWdhV1lnS0dsdVpHVjRJRDQ5SUhSb2FYTXVjRzl6YVhScGIyNUJjbkpoZVM1c1pXNW5kR2dwSUh0Y2JpQWdJQ0FnSUNBZ2FXNWtaWGdnUFNBd08xeHVJQ0FnSUNBZ0lDQmplV05zYVdOUFptWnpaWFFnS3owZ1luVm1abVZ5UkhWeVlYUnBiMjQ3WEc1Y2JpQWdJQ0FnSUNBZ2FXWWdLQ0YwYUdsekxtTjVZMnhwWXlsY2JpQWdJQ0FnSUNBZ0lDQnlaWFIxY200Z1NXNW1hVzVwZEhrN1hHNGdJQ0FnSUNCOVhHNGdJQ0FnZlNCbGJITmxJR2xtSUNoemNHVmxaQ0E4SURBcElIdGNiaUFnSUNBZ0lHbHVaR1Y0SUQwZ1oyVjBRM1Z5Y21WdWRFOXlVSEpsZG1sdmRYTkpibVJsZUNoMGFHbHpMbkJ2YzJsMGFXOXVRWEp5WVhrc0lIQnZjMmwwYVc5dUtUdGNibHh1SUNBZ0lDQWdhV1lnS0dsdVpHVjRJRHdnTUNrZ2UxeHVJQ0FnSUNBZ0lDQnBibVJsZUNBOUlIUm9hWE11Y0c5emFYUnBiMjVCY25KaGVTNXNaVzVuZEdnZ0xTQXhPMXh1SUNBZ0lDQWdJQ0JqZVdOc2FXTlBabVp6WlhRZ0xUMGdZblZtWm1WeVJIVnlZWFJwYjI0N1hHNWNiaUFnSUNBZ0lDQWdhV1lnS0NGMGFHbHpMbU41WTJ4cFl5bGNiaUFnSUNBZ0lDQWdJQ0J5WlhSMWNtNGdMVWx1Wm1sdWFYUjVPMXh1SUNBZ0lDQWdmVnh1SUNBZ0lIMGdaV3h6WlNCN1hHNGdJQ0FnSUNCeVpYUjFjbTRnU1c1bWFXNXBkSGs3WEc0Z0lDQWdmVnh1WEc0Z0lDQWdkR2hwY3k1elpXZHRaVzUwU1c1a1pYZ2dQU0JwYm1SbGVEdGNiaUFnSUNCMGFHbHpMbDlmWTNsamJHbGpUMlptYzJWMElEMGdZM2xqYkdsalQyWm1jMlYwTzF4dVhHNGdJQ0FnY21WMGRYSnVJR041WTJ4cFkwOW1abk5sZENBcklIUm9hWE11Y0c5emFYUnBiMjVCY25KaGVWdHBibVJsZUYwN1hHNGdJSDFjYmx4dUlDQXZMeUJVYVcxbFJXNW5hVzVsSUcxbGRHaHZaQ0FvZEhKaGJuTndiM0owWldRZ2FXNTBaWEptWVdObEtWeHVJQ0JoWkhaaGJtTmxVRzl6YVhScGIyNG9kR2x0WlN3Z2NHOXphWFJwYjI0c0lITndaV1ZrS1NCN1hHNGdJQ0FnZG1GeUlHbHVaR1Y0SUQwZ2RHaHBjeTV6WldkdFpXNTBTVzVrWlhnN1hHNGdJQ0FnZG1GeUlHTjVZMnhwWTA5bVpuTmxkQ0E5SUhSb2FYTXVYMTlqZVdOc2FXTlBabVp6WlhRN1hHNWNiaUFnSUNCMGFHbHpMblJ5YVdkblpYSW9kR2x0WlNrN1hHNWNiaUFnSUNCcFppQW9jM0JsWldRZ1BpQXdLU0I3WEc0Z0lDQWdJQ0JwYm1SbGVDc3JPMXh1WEc0Z0lDQWdJQ0JwWmlBb2FXNWtaWGdnUGowZ2RHaHBjeTV3YjNOcGRHbHZia0Z5Y21GNUxteGxibWQwYUNrZ2UxeHVJQ0FnSUNBZ0lDQnBibVJsZUNBOUlEQTdYRzRnSUNBZ0lDQWdJR041WTJ4cFkwOW1abk5sZENBclBTQjBhR2x6TG1KMVptWmxja1IxY21GMGFXOXVPMXh1WEc0Z0lDQWdJQ0FnSUdsbUlDZ2hkR2hwY3k1amVXTnNhV01wWEc0Z0lDQWdJQ0FnSUNBZ2NtVjBkWEp1SUVsdVptbHVhWFI1TzF4dUlDQWdJQ0FnZlZ4dUlDQWdJSDBnWld4elpTQjdYRzRnSUNBZ0lDQnBibVJsZUMwdE8xeHVYRzRnSUNBZ0lDQnBaaUFvYVc1a1pYZ2dQQ0F3S1NCN1hHNGdJQ0FnSUNBZ0lHbHVaR1Y0SUQwZ2RHaHBjeTV3YjNOcGRHbHZia0Z5Y21GNUxteGxibWQwYUNBdElERTdYRzRnSUNBZ0lDQWdJR041WTJ4cFkwOW1abk5sZENBdFBTQjBhR2x6TG1KMVptWmxja1IxY21GMGFXOXVPMXh1WEc0Z0lDQWdJQ0FnSUdsbUlDZ2hkR2hwY3k1amVXTnNhV01wWEc0Z0lDQWdJQ0FnSUNBZ2NtVjBkWEp1SUMxSmJtWnBibWwwZVR0Y2JpQWdJQ0FnSUgxY2JpQWdJQ0I5WEc1Y2JpQWdJQ0IwYUdsekxuTmxaMjFsYm5SSmJtUmxlQ0E5SUdsdVpHVjRPMXh1SUNBZ0lIUm9hWE11WDE5amVXTnNhV05QWm1aelpYUWdQU0JqZVdOc2FXTlBabVp6WlhRN1hHNWNiaUFnSUNCeVpYUjFjbTRnWTNsamJHbGpUMlptYzJWMElDc2dkR2hwY3k1d2IzTnBkR2x2YmtGeWNtRjVXMmx1WkdWNFhUdGNiaUFnZlZ4dVhHNGdJQzhxS2x4dUlDQWdLaUJVY21sbloyVnlJR0VnYzJWbmJXVnVkQzVjYmlBZ0lDb2dWR2hwY3lCbWRXNWpkR2x2YmlCallXNGdZbVVnWTJGc2JHVmtJR0YwSUdGdWVTQjBhVzFsSUNoM2FHVjBhR1Z5SUhSb1pTQmxibWRwYm1VZ2FYTWdjMk5vWldSMWJHVmtMM1J5WVc1emNHOXlkR1ZrSUc5eUlHNXZkQ2xjYmlBZ0lDb2dkRzhnWjJWdVpYSmhkR1VnWVNCemFXNW5iR1VnYzJWbmJXVnVkQ0JoWTJOdmNtUnBibWNnZEc4Z2RHaGxJR04xY25KbGJuUWdjMlZuYldWdWRDQndZWEpoYldWMFpYSnpMbHh1SUNBZ0tseHVJQ0FnS2lCQWNHRnlZVzBnZTA1MWJXSmxjbjBnZEdsdFpTQnpaV2R0Wlc1MElITjViblJvWlhOcGN5QmhkV1JwYnlCMGFXMWxYRzRnSUNBcUlFQnlaWFIxY200Z2UwNTFiV0psY24wZ2NHVnlhVzlrSUhSdklHNWxlSFFnYzJWbmJXVnVkRnh1SUNBZ0tpOWNiaUFnZEhKcFoyZGxjaWgwYVcxbEtTQjdYRzRnSUNBZ2RtRnlJR0YxWkdsdlEyOXVkR1Y0ZENBOUlIUm9hWE11WVhWa2FXOURiMjUwWlhoME8xeHVJQ0FnSUhaaGNpQnpaV2R0Wlc1MFZHbHRaU0E5SUNoMGFXMWxJSHg4SUdGMVpHbHZRMjl1ZEdWNGRDNWpkWEp5Wlc1MFZHbHRaU2tnS3lCMGFHbHpMbVJsYkdGNU8xeHVJQ0FnSUhaaGNpQnpaV2R0Wlc1MFVHVnlhVzlrSUQwZ2RHaHBjeTV3WlhKcGIyUkJZbk03WEc0Z0lDQWdkbUZ5SUhObFoyMWxiblJKYm1SbGVDQTlJSFJvYVhNdWMyVm5iV1Z1ZEVsdVpHVjRPMXh1WEc0Z0lDQWdhV1lnS0hSb2FYTXVZblZtWm1WeUtTQjdYRzRnSUNBZ0lDQjJZWElnYzJWbmJXVnVkRkJ2YzJsMGFXOXVJRDBnTUM0d08xeHVJQ0FnSUNBZ2RtRnlJSE5sWjIxbGJuUkVkWEpoZEdsdmJpQTlJREF1TUR0Y2JpQWdJQ0FnSUhaaGNpQnpaV2R0Wlc1MFQyWm1jMlYwSUQwZ01DNHdPMXh1SUNBZ0lDQWdkbUZ5SUhKbGMyRnRjR3hwYm1kU1lYUmxJRDBnTVM0d08xeHVJQ0FnSUNBZ2RtRnlJR0oxWm1abGNrUjFjbUYwYVc5dUlEMGdkR2hwY3k1aWRXWm1aWEpFZFhKaGRHbHZianRjYmx4dUlDQWdJQ0FnYVdZZ0tIUm9hWE11WTNsamJHbGpLVnh1SUNBZ0lDQWdJQ0J6WldkdFpXNTBTVzVrWlhnZ1BTQnpaV2R0Wlc1MFNXNWtaWGdnSlNCMGFHbHpMbkJ2YzJsMGFXOXVRWEp5WVhrdWJHVnVaM1JvTzF4dUlDQWdJQ0FnWld4elpWeHVJQ0FnSUNBZ0lDQnpaV2R0Wlc1MFNXNWtaWGdnUFNCTllYUm9MbTFoZUNnd0xDQk5ZWFJvTG0xcGJpaHpaV2R0Wlc1MFNXNWtaWGdzSUhSb2FYTXVjRzl6YVhScGIyNUJjbkpoZVM1c1pXNW5kR2dnTFNBeEtTazdYRzVjYmlBZ0lDQWdJR2xtSUNoMGFHbHpMbkJ2YzJsMGFXOXVRWEp5WVhrcFhHNGdJQ0FnSUNBZ0lITmxaMjFsYm5SUWIzTnBkR2x2YmlBOUlIUm9hWE11Y0c5emFYUnBiMjVCY25KaGVWdHpaV2R0Wlc1MFNXNWtaWGhkSUh4OElEQTdYRzVjYmlBZ0lDQWdJR2xtSUNoMGFHbHpMbVIxY21GMGFXOXVRWEp5WVhrcFhHNGdJQ0FnSUNBZ0lITmxaMjFsYm5SRWRYSmhkR2x2YmlBOUlIUm9hWE11WkhWeVlYUnBiMjVCY25KaGVWdHpaV2R0Wlc1MFNXNWtaWGhkSUh4OElEQTdYRzVjYmlBZ0lDQWdJR2xtSUNoMGFHbHpMbTltWm5ObGRFRnljbUY1S1Z4dUlDQWdJQ0FnSUNCelpXZHRaVzUwVDJabWMyVjBJRDBnZEdocGN5NXZabVp6WlhSQmNuSmhlVnR6WldkdFpXNTBTVzVrWlhoZElIeDhJREE3WEc1Y2JpQWdJQ0FnSUM4dklHTmhiR04xYkdGMFpTQnlaWE5oYlhCc2FXNW5YRzRnSUNBZ0lDQnBaaUFvZEdocGN5NXlaWE5oYlhCc2FXNW5JQ0U5UFNBd0lIeDhJSFJvYVhNdWNtVnpZVzF3YkdsdVoxWmhjaUErSURBcElIdGNiaUFnSUNBZ0lDQWdkbUZ5SUhKaGJtUnZiVkpsYzJGdGNHeHBibWNnUFNBb1RXRjBhQzV5WVc1a2IyMG9LU0F0SURBdU5Ta2dLaUF5TGpBZ0tpQjBhR2x6TG5KbGMyRnRjR3hwYm1kV1lYSTdYRzRnSUNBZ0lDQWdJSEpsYzJGdGNHeHBibWRTWVhSbElEMGdUV0YwYUM1d2IzY29NaTR3TENBb2RHaHBjeTV5WlhOaGJYQnNhVzVuSUNzZ2NtRnVaRzl0VW1WellXMXdiR2x1WnlrZ0x5QXhNakF3TGpBcE8xeHVJQ0FnSUNBZ2ZWeHVYRzRnSUNBZ0lDQXZMeUJqWVd4amRXeGhkR1VnYVc1MFpYSXRjMlZuYldWdWRDQmthWE4wWVc1alpWeHVJQ0FnSUNBZ2FXWWdLSE5sWjIxbGJuUkVkWEpoZEdsdmJpQTlQVDBnTUNCOGZDQjBhR2x6TG5CbGNtbHZaRkpsYkNBK0lEQXBJSHRjYmlBZ0lDQWdJQ0FnZG1GeUlHNWxlSFJUWldkdFpXNTBTVzVrWlhnZ1BTQnpaV2R0Wlc1MFNXNWtaWGdnS3lBeE8xeHVJQ0FnSUNBZ0lDQjJZWElnYm1WNGRGQnZjMmwwYVc5dUxDQnVaWGgwVDJabWMyVjBPMXh1WEc0Z0lDQWdJQ0FnSUdsbUlDaHVaWGgwVTJWbmJXVnVkRWx1WkdWNElEMDlQU0IwYUdsekxuQnZjMmwwYVc5dVFYSnlZWGt1YkdWdVozUm9LU0I3WEc0Z0lDQWdJQ0FnSUNBZ2FXWWdLSFJvYVhNdVkzbGpiR2xqS1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0J1WlhoMFVHOXphWFJwYjI0Z1BTQjBhR2x6TG5CdmMybDBhVzl1UVhKeVlYbGJNRjBnS3lCaWRXWm1aWEpFZFhKaGRHbHZianRjYmlBZ0lDQWdJQ0FnSUNBZ0lHNWxlSFJQWm1aelpYUWdQU0IwYUdsekxtOW1abk5sZEVGeWNtRjVXekJkTzF4dUlDQWdJQ0FnSUNBZ0lIMGdaV3h6WlNCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0J1WlhoMFVHOXphWFJwYjI0Z1BTQmlkV1ptWlhKRWRYSmhkR2x2Ymp0Y2JpQWdJQ0FnSUNBZ0lDQWdJRzVsZUhSUFptWnpaWFFnUFNBd08xeHVJQ0FnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnZlNCbGJITmxJSHRjYmlBZ0lDQWdJQ0FnSUNCdVpYaDBVRzl6YVhScGIyNGdQU0IwYUdsekxuQnZjMmwwYVc5dVFYSnlZWGxiYm1WNGRGTmxaMjFsYm5SSmJtUmxlRjA3WEc0Z0lDQWdJQ0FnSUNBZ2JtVjRkRTltWm5ObGRDQTlJSFJvYVhNdWIyWm1jMlYwUVhKeVlYbGJibVY0ZEZObFoyMWxiblJKYm1SbGVGMDdYRzRnSUNBZ0lDQWdJSDFjYmx4dUlDQWdJQ0FnSUNCMllYSWdhVzUwWlhKVFpXZHRaVzUwUkdsemRHRnVZMlVnUFNCdVpYaDBVRzl6YVhScGIyNGdMU0J6WldkdFpXNTBVRzl6YVhScGIyNDdYRzVjYmlBZ0lDQWdJQ0FnTHk4Z1kyOXljbVZqZENCcGJuUmxjaTF6WldkdFpXNTBJR1JwYzNSaGJtTmxJR0o1SUc5bVpuTmxkSE5jYmlBZ0lDQWdJQ0FnTHk4Z0lDQnZabVp6WlhRZ1BpQXdPaUIwYUdVZ2MyVm5iV1Z1ZENkeklISmxabVZ5Wlc1alpTQndiM05wZEdsdmJpQnBjeUJoWm5SbGNpQjBhR1VnWjJsMlpXNGdjMlZuYldWdWRDQndiM05wZEdsdmJseHVJQ0FnSUNBZ0lDQnBaaUFvYzJWbmJXVnVkRTltWm5ObGRDQStJREFwWEc0Z0lDQWdJQ0FnSUNBZ2FXNTBaWEpUWldkdFpXNTBSR2x6ZEdGdVkyVWdMVDBnYzJWbmJXVnVkRTltWm5ObGREdGNibHh1SUNBZ0lDQWdJQ0JwWmlBb2JtVjRkRTltWm5ObGRDQStJREFwWEc0Z0lDQWdJQ0FnSUNBZ2FXNTBaWEpUWldkdFpXNTBSR2x6ZEdGdVkyVWdLejBnYm1WNGRFOW1abk5sZER0Y2JseHVJQ0FnSUNBZ0lDQnBaaUFvYVc1MFpYSlRaV2R0Wlc1MFJHbHpkR0Z1WTJVZ1BDQXdLVnh1SUNBZ0lDQWdJQ0FnSUdsdWRHVnlVMlZuYldWdWRFUnBjM1JoYm1ObElEMGdNRHRjYmx4dUlDQWdJQ0FnSUNBdkx5QjFjMlVnYVc1MFpYSXRjMlZuYldWdWRDQmthWE4wWVc1alpTQnBibk4wWldGa0lHOW1JSE5sWjIxbGJuUWdaSFZ5WVhScGIyNWNiaUFnSUNBZ0lDQWdhV1lnS0hObFoyMWxiblJFZFhKaGRHbHZiaUE5UFQwZ01DbGNiaUFnSUNBZ0lDQWdJQ0J6WldkdFpXNTBSSFZ5WVhScGIyNGdQU0JwYm5SbGNsTmxaMjFsYm5SRWFYTjBZVzVqWlR0Y2JseHVJQ0FnSUNBZ0lDQXZMeUJqWVd4amRXeGhkR1VnY0dWeWFXOWtJSEpsYkdGMGFYWmxJSFJ2SUdsdWRHVnlJRzFoY210bGNpQmthWE4wWVc1alpWeHVJQ0FnSUNBZ0lDQnpaV2R0Wlc1MFVHVnlhVzlrSUNzOUlIUm9hWE11Y0dWeWFXOWtVbVZzSUNvZ2FXNTBaWEpUWldkdFpXNTBSR2x6ZEdGdVkyVTdYRzRnSUNBZ0lDQjlYRzVjYmlBZ0lDQWdJQzh2SUdGa1pDQnlaV3hoZEdsMlpTQmhibVFnWVdKemIyeDFkR1VnYzJWbmJXVnVkQ0JrZFhKaGRHbHZibHh1SUNBZ0lDQWdjMlZuYldWdWRFUjFjbUYwYVc5dUlDbzlJSFJvYVhNdVpIVnlZWFJwYjI1U1pXdzdYRzRnSUNBZ0lDQnpaV2R0Wlc1MFJIVnlZWFJwYjI0Z0t6MGdkR2hwY3k1a2RYSmhkR2x2YmtGaWN6dGNibHh1SUNBZ0lDQWdMeThnWVdSa0lISmxiR0YwYVhabElHRnVaQ0JoWW5OdmJIVjBaU0J6WldkdFpXNTBJRzltWm5ObGRGeHVJQ0FnSUNBZ2MyVm5iV1Z1ZEU5bVpuTmxkQ0FxUFNCMGFHbHpMbTltWm5ObGRGSmxiRHRjYmlBZ0lDQWdJSE5sWjIxbGJuUlBabVp6WlhRZ0t6MGdkR2hwY3k1dlptWnpaWFJCWW5NN1hHNWNiaUFnSUNBZ0lDOHZJR0Z3Y0d4NUlITmxaMjFsYm5RZ2IyWm1jMlYwWEc0Z0lDQWdJQ0F2THlBZ0lHOW1abk5sZENBK0lEQTZJSFJvWlNCelpXZHRaVzUwSjNNZ2NtVm1aWEpsYm1ObElIQnZjMmwwYVc5dUlHbHpJR0ZtZEdWeUlIUm9aU0JuYVhabGJpQnpaV2R0Wlc1MElIQnZjMmwwYVc5dVhHNGdJQ0FnSUNBdkx5QWdJRzltWm5ObGRDQThJREE2SUhSb1pTQm5hWFpsYmlCelpXZHRaVzUwSUhCdmMybDBhVzl1SUdseklIUm9aU0J6WldkdFpXNTBKM01nY21WbVpYSmxibU5sSUhCdmMybDBhVzl1SUdGdVpDQjBhR1VnWkhWeVlYUnBiMjRnYUdGeklIUnZJR0psSUdOdmNuSmxZM1JsWkNCaWVTQjBhR1VnYjJabWMyVjBYRzRnSUNBZ0lDQnBaaUFvYzJWbmJXVnVkRTltWm5ObGRDQThJREFwSUh0Y2JpQWdJQ0FnSUNBZ2MyVm5iV1Z1ZEVSMWNtRjBhVzl1SUMwOUlITmxaMjFsYm5SUFptWnpaWFE3WEc0Z0lDQWdJQ0FnSUhObFoyMWxiblJRYjNOcGRHbHZiaUFyUFNCelpXZHRaVzUwVDJabWMyVjBPMXh1SUNBZ0lDQWdJQ0J6WldkdFpXNTBWR2x0WlNBclBTQW9jMlZuYldWdWRFOW1abk5sZENBdklISmxjMkZ0Y0d4cGJtZFNZWFJsS1R0Y2JpQWdJQ0FnSUgwZ1pXeHpaU0I3WEc0Z0lDQWdJQ0FnSUhObFoyMWxiblJVYVcxbElDMDlJQ2h6WldkdFpXNTBUMlptYzJWMElDOGdjbVZ6WVcxd2JHbHVaMUpoZEdVcE8xeHVJQ0FnSUNBZ2ZWeHVYRzRnSUNBZ0lDQXZMeUJ5WVc1a2IyMXBlbVVnYzJWbmJXVnVkQ0J3YjNOcGRHbHZibHh1SUNBZ0lDQWdhV1lnS0hSb2FYTXVjRzl6YVhScGIyNVdZWElnUGlBd0tWeHVJQ0FnSUNBZ0lDQnpaV2R0Wlc1MFVHOXphWFJwYjI0Z0t6MGdNaTR3SUNvZ0tFMWhkR2d1Y21GdVpHOXRLQ2tnTFNBd0xqVXBJQ29nZEdocGN5NXdiM05wZEdsdmJsWmhjanRjYmx4dUlDQWdJQ0FnTHk4Z2MyaHZjblJsYmlCa2RYSmhkR2x2YmlCdlppQnpaV2R0Wlc1MGN5QnZkbVZ5SUhSb1pTQmxaR2RsY3lCdlppQjBhR1VnWW5WbVptVnlYRzRnSUNBZ0lDQnBaaUFvYzJWbmJXVnVkRkJ2YzJsMGFXOXVJRHdnTUNrZ2UxeHVJQ0FnSUNBZ0lDQXZMM05sWjIxbGJuUlVhVzFsSUMwOUlHZHlZV2x1VUc5emFYUnBiMjQ3SUdodExDQnViM1FnYzNWeVpTQnBaaUIzWlNCM1lXNTBJSFJ2SUdSdklIUm9hWE5jYmlBZ0lDQWdJQ0FnYzJWbmJXVnVkRVIxY21GMGFXOXVJQ3M5SUhObFoyMWxiblJRYjNOcGRHbHZianRjYmlBZ0lDQWdJQ0FnYzJWbmJXVnVkRkJ2YzJsMGFXOXVJRDBnTUR0Y2JpQWdJQ0FnSUgxY2JseHVJQ0FnSUNBZ2FXWWdLSE5sWjIxbGJuUlFiM05wZEdsdmJpQXJJSE5sWjIxbGJuUkVkWEpoZEdsdmJpQStJSFJvYVhNdVluVm1abVZ5TG1SMWNtRjBhVzl1S1Z4dUlDQWdJQ0FnSUNCelpXZHRaVzUwUkhWeVlYUnBiMjRnUFNCMGFHbHpMbUoxWm1abGNpNWtkWEpoZEdsdmJpQXRJSE5sWjIxbGJuUlFiM05wZEdsdmJqdGNibHh1SUNBZ0lDQWdjMlZuYldWdWRFUjFjbUYwYVc5dUlDODlJSEpsYzJGdGNHeHBibWRTWVhSbE8xeHVYRzRnSUNBZ0lDQnBaaUFvZEdocGN5NXRiMjV2Y0dodmJtbGpLVnh1SUNBZ0lDQWdJQ0IwYUdsekxtRmliM0owS0hObFoyMWxiblJVYVcxbEtUdGNibHh1SUNBZ0lDQWdMeThnYldGclpTQnpaV2R0Wlc1MFhHNGdJQ0FnSUNCcFppQW9kR2hwY3k1bllXbHVJRDRnTUNBbUppQnpaV2R0Wlc1MFJIVnlZWFJwYjI0Z1BpQXdLU0I3WEc0Z0lDQWdJQ0FnSUM4dklHMWhhMlVnYzJWbmJXVnVkQ0JsYm5abGJHOXdaVnh1SUNBZ0lDQWdJQ0IyWVhJZ1pXNTJaV3h2Y0dVZ1BTQmhkV1JwYjBOdmJuUmxlSFF1WTNKbFlYUmxSMkZwYmlncE8xeHVJQ0FnSUNBZ0lDQjJZWElnWVhSMFlXTnJJRDBnZEdocGN5NWhkSFJoWTJ0QlluTWdLeUIwYUdsekxtRjBkR0ZqYTFKbGJDQXFJSE5sWjIxbGJuUkVkWEpoZEdsdmJqdGNiaUFnSUNBZ0lDQWdkbUZ5SUhKbGJHVmhjMlVnUFNCMGFHbHpMbkpsYkdWaGMyVkJZbk1nS3lCMGFHbHpMbkpsYkdWaGMyVlNaV3dnS2lCelpXZHRaVzUwUkhWeVlYUnBiMjQ3WEc1Y2JpQWdJQ0FnSUNBZ2FXWWdLR0YwZEdGamF5QXJJSEpsYkdWaGMyVWdQaUJ6WldkdFpXNTBSSFZ5WVhScGIyNHBJSHRjYmlBZ0lDQWdJQ0FnSUNCMllYSWdabUZqZEc5eUlEMGdjMlZuYldWdWRFUjFjbUYwYVc5dUlDOGdLR0YwZEdGamF5QXJJSEpsYkdWaGMyVXBPMXh1SUNBZ0lDQWdJQ0FnSUdGMGRHRmpheUFxUFNCbVlXTjBiM0k3WEc0Z0lDQWdJQ0FnSUNBZ2NtVnNaV0Z6WlNBcVBTQm1ZV04wYjNJN1hHNGdJQ0FnSUNBZ0lIMWNibHh1SUNBZ0lDQWdJQ0IyWVhJZ1lYUjBZV05yUlc1a1ZHbHRaU0E5SUhObFoyMWxiblJVYVcxbElDc2dZWFIwWVdOck8xeHVJQ0FnSUNBZ0lDQjJZWElnYzJWbmJXVnVkRVZ1WkZScGJXVWdQU0J6WldkdFpXNTBWR2x0WlNBcklITmxaMjFsYm5SRWRYSmhkR2x2Ymp0Y2JpQWdJQ0FnSUNBZ2RtRnlJSEpsYkdWaGMyVlRkR0Z5ZEZScGJXVWdQU0J6WldkdFpXNTBSVzVrVkdsdFpTQXRJSEpsYkdWaGMyVTdYRzVjYmlBZ0lDQWdJQ0FnWlc1MlpXeHZjR1V1WjJGcGJpNTJZV3gxWlNBOUlEQTdYRzRnSUNBZ0lDQWdJR1Z1ZG1Wc2IzQmxMbWRoYVc0dWMyVjBWbUZzZFdWQmRGUnBiV1VvTUM0d0xDQnpaV2R0Wlc1MFZHbHRaU2s3WEc0Z0lDQWdJQ0FnSUdWdWRtVnNiM0JsTG1kaGFXNHViR2x1WldGeVVtRnRjRlJ2Vm1Gc2RXVkJkRlJwYldVb2RHaHBjeTVuWVdsdUxDQmhkSFJoWTJ0RmJtUlVhVzFsS1R0Y2JseHVJQ0FnSUNBZ0lDQnBaaUFvY21Wc1pXRnpaVk4wWVhKMFZHbHRaU0ErSUdGMGRHRmphMFZ1WkZScGJXVXBYRzRnSUNBZ0lDQWdJQ0FnWlc1MlpXeHZjR1V1WjJGcGJpNXpaWFJXWVd4MVpVRjBWR2x0WlNoMGFHbHpMbWRoYVc0c0lISmxiR1ZoYzJWVGRHRnlkRlJwYldVcE8xeHVYRzRnSUNBZ0lDQWdJR1Z1ZG1Wc2IzQmxMbWRoYVc0dWJHbHVaV0Z5VW1GdGNGUnZWbUZzZFdWQmRGUnBiV1VvTUM0d0xDQnpaV2R0Wlc1MFJXNWtWR2x0WlNrN1hHNGdJQ0FnSUNBZ0lHVnVkbVZzYjNCbExtTnZibTVsWTNRb2RHaHBjeTV2ZFhSd2RYUk9iMlJsS1R0Y2JseHVJQ0FnSUNBZ0lDQjBhR2x6TGw5ZlkzVnljbVZ1ZEVWdWRpQTlJR1Z1ZG1Wc2IzQmxPMXh1WEc0Z0lDQWdJQ0FnSUM4dklHMWhhMlVnYzI5MWNtTmxYRzRnSUNBZ0lDQWdJSFpoY2lCemIzVnlZMlVnUFNCaGRXUnBiME52Ym5SbGVIUXVZM0psWVhSbFFuVm1abVZ5VTI5MWNtTmxLQ2s3WEc1Y2JpQWdJQ0FnSUNBZ2MyOTFjbU5sTG1KMVptWmxjaUE5SUhSb2FYTXVZblZtWm1WeU8xeHVJQ0FnSUNBZ0lDQnpiM1Z5WTJVdWNHeGhlV0poWTJ0U1lYUmxMblpoYkhWbElEMGdjbVZ6WVcxd2JHbHVaMUpoZEdVN1hHNGdJQ0FnSUNBZ0lITnZkWEpqWlM1amIyNXVaV04wS0dWdWRtVnNiM0JsS1R0Y2JseHVJQ0FnSUNBZ0lDQnpiM1Z5WTJVdWMzUmhjblFvYzJWbmJXVnVkRlJwYldVc0lITmxaMjFsYm5SUWIzTnBkR2x2YmlrN1hHNGdJQ0FnSUNBZ0lITnZkWEpqWlM1emRHOXdLSE5sWjIxbGJuUlVhVzFsSUNzZ2MyVm5iV1Z1ZEVSMWNtRjBhVzl1S1R0Y2JseHVJQ0FnSUNBZ0lDQjBhR2x6TGw5ZlkzVnljbVZ1ZEZOeVl5QTlJSE52ZFhKalpUdGNiaUFnSUNBZ0lDQWdkR2hwY3k1ZlgzSmxiR1ZoYzJWVGRHRnlkRlJwYldVZ1BTQnlaV3hsWVhObFUzUmhjblJVYVcxbE8xeHVJQ0FnSUNBZ0lDQjBhR2x6TGw5ZlkzVnljbVZ1ZEVkaGFXNGdQU0IwYUdsekxtZGhhVzQ3WEc0Z0lDQWdJQ0FnSUhSb2FYTXVYMTlqZFhKeVpXNTBSVzVrVkdsdFpTQTlJSE5sWjIxbGJuUkZibVJVYVcxbE8xeHVJQ0FnSUNBZ2ZWeHVJQ0FnSUgxY2JseHVJQ0FnSUM4dklITmxaMjFsYm5RZ2NHVnlhVzlrSUhKaGJtUnZiaUIyWVhKcFlYUnBiMjVjYmlBZ0lDQnBaaUFvZEdocGN5NXdaWEpwYjJSV1lYSWdQaUF3TGpBcFhHNGdJQ0FnSUNCelpXZHRaVzUwVUdWeWFXOWtJQ3M5SURJdU1DQXFJQ2hOWVhSb0xuSmhibVJ2YlNncElDMGdNQzQxS1NBcUlIUm9hWE11Y0dWeWFXOWtWbUZ5SUNvZ2MyVm5iV1Z1ZEZCbGNtbHZaRHRjYmx4dUlDQWdJSEpsZEhWeWJpQk5ZWFJvTG0xaGVDaDBhR2x6TG5CbGNtbHZaRTFwYml3Z2MyVm5iV1Z1ZEZCbGNtbHZaQ2s3WEc0Z0lIMWNibHh1SUNBdktpcGNiaUFnSUNvZ1FXSnZjblFnZEdobElHTjFjbkpsYm5RZ2MyVm5iV1Z1ZENCaGRDQm5hWFpsYmlCMGFXMWxMQ0JtWVdSbElHOTFkQ0JrZFhKaGRHbHZibHh1SUNBZ0tseHVJQ0FnS2lCQWNHRnlZVzBnZTA1MWJXSmxjbjBnZEdsdFpTQXRJR0ZpYjNKMElIUnBiV1ZjYmlBZ0lDb3ZYRzRnSUdGaWIzSjBLSFJwYldVcElIdGNiaUFnSUNCamIyNXpkQ0JoZFdScGIwTnZiblJsZUhRZ1BTQjBhR2x6TG1GMVpHbHZRMjl1ZEdWNGREdGNiaUFnSUNCamIyNXpkQ0JsYm1SVWFXMWxJRDBnZEdocGN5NWZYMk4xY25KbGJuUkZibVJVYVcxbE8xeHVJQ0FnSUdOdmJuTjBJR0ZpYjNKMFZHbHRaU0E5SUhScGJXVWdmSHdnWVhWa2FXOURiMjUwWlhoMExtTjFjbkpsYm5SVWFXMWxPMXh1WEc0Z0lDQWdhV1lnS0dGaWIzSjBWR2x0WlNBOElHVnVaRlJwYldVcElIdGNiaUFnSUNBZ0lHTnZibk4wSUhObFoyMWxiblJGYm1SVWFXMWxJRDBnVFdGMGFDNXRhVzRvWVdKdmNuUlVhVzFsSUNzZ2RHaHBjeTVoWW05eWRGUnBiV1VzSUdWdVpGUnBiV1VwTzF4dUlDQWdJQ0FnWTI5dWMzUWdaVzUyWld4dmNHVWdQU0IwYUdsekxsOWZZM1Z5Y21WdWRFVnVkanRjYmlBZ0lDQWdJR3hsZENCamRYSnlaVzUwUjJGcGJsWmhiSFZsSUQwZ2RHaHBjeTVmWDJOMWNuSmxiblJIWVdsdU8xeHVYRzRnSUNBZ0lDQnBaaUFvWVdKdmNuUlVhVzFsSUQ0Z2RHaHBjeTVmWDNKbGJHVmhjMlZUZEdGeWRGUnBiV1VwSUh0Y2JpQWdJQ0FnSUNBZ1kyOXVjM1FnY21Wc1pXRnpaVk4wWVhKMElEMGdkR2hwY3k1ZlgzSmxiR1ZoYzJWVGRHRnlkRlJwYldVN1hHNGdJQ0FnSUNBZ0lHTjFjbkpsYm5SSFlXbHVWbUZzZFdVZ0tqMGdLR0ZpYjNKMFZHbHRaU0F0SUhKbGJHVmhjMlZUZEdGeWRDa2dMeUFvWlc1a1ZHbHRaU0F0SUhKbGJHVmhjMlZUZEdGeWRDazdYRzRnSUNBZ0lDQjlYRzVjYmlBZ0lDQWdJR1Z1ZG1Wc2IzQmxMbWRoYVc0dVkyRnVZMlZzVTJOb1pXUjFiR1ZrVm1Gc2RXVnpLR0ZpYjNKMFZHbHRaU2s3WEc0Z0lDQWdJQ0JsYm5abGJHOXdaUzVuWVdsdUxuTmxkRlpoYkhWbFFYUlVhVzFsS0dOMWNuSmxiblJIWVdsdVZtRnNkV1VzSUdGaWIzSjBWR2x0WlNrN1hHNGdJQ0FnSUNCbGJuWmxiRzl3WlM1bllXbHVMbXhwYm1WaGNsSmhiWEJVYjFaaGJIVmxRWFJVYVcxbEtEQXNJSE5sWjIxbGJuUkZibVJVYVcxbEtUdGNibHh1SUNBZ0lDQWdkR2hwY3k1ZlgyTjFjbkpsYm5SVGNtTWdQU0J1ZFd4c08xeHVJQ0FnSUNBZ2RHaHBjeTVmWDJOMWNuSmxiblJGYm5ZZ1BTQnVkV3hzTzF4dUlDQWdJQ0FnZEdocGN5NWZYM0psYkdWaGMyVlRkR0Z5ZEZScGJXVWdQU0F3TzF4dUlDQWdJQ0FnZEdocGN5NWZYMk4xY25KbGJuUkhZV2x1SUQwZ01EdGNiaUFnSUNBZ0lIUm9hWE11WDE5amRYSnlaVzUwUlc1a1ZHbHRaU0E5SURBN1hHNGdJQ0FnZlZ4dUlDQjlYRzU5WEc1Y2JtVjRjRzl5ZENCa1pXWmhkV3gwSUZObFoyMWxiblJGYm1kcGJtVTdYRzRpWFgwPSIsIid1c2Ugc3RyaWN0JztcbnZhciBzdHJvbmcgPSByZXF1aXJlKCcuL19jb2xsZWN0aW9uLXN0cm9uZycpO1xudmFyIHZhbGlkYXRlID0gcmVxdWlyZSgnLi9fdmFsaWRhdGUtY29sbGVjdGlvbicpO1xudmFyIE1BUCA9ICdNYXAnO1xuXG4vLyAyMy4xIE1hcCBPYmplY3RzXG5tb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vX2NvbGxlY3Rpb24nKShNQVAsIGZ1bmN0aW9uIChnZXQpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIE1hcCgpIHsgcmV0dXJuIGdldCh0aGlzLCBhcmd1bWVudHMubGVuZ3RoID4gMCA/IGFyZ3VtZW50c1swXSA6IHVuZGVmaW5lZCk7IH07XG59LCB7XG4gIC8vIDIzLjEuMy42IE1hcC5wcm90b3R5cGUuZ2V0KGtleSlcbiAgZ2V0OiBmdW5jdGlvbiBnZXQoa2V5KSB7XG4gICAgdmFyIGVudHJ5ID0gc3Ryb25nLmdldEVudHJ5KHZhbGlkYXRlKHRoaXMsIE1BUCksIGtleSk7XG4gICAgcmV0dXJuIGVudHJ5ICYmIGVudHJ5LnY7XG4gIH0sXG4gIC8vIDIzLjEuMy45IE1hcC5wcm90b3R5cGUuc2V0KGtleSwgdmFsdWUpXG4gIHNldDogZnVuY3Rpb24gc2V0KGtleSwgdmFsdWUpIHtcbiAgICByZXR1cm4gc3Ryb25nLmRlZih2YWxpZGF0ZSh0aGlzLCBNQVApLCBrZXkgPT09IDAgPyAwIDoga2V5LCB2YWx1ZSk7XG4gIH1cbn0sIHN0cm9uZywgdHJ1ZSk7XG4iLCIvLyBodHRwczovL2dpdGh1Yi5jb20vRGF2aWRCcnVhbnQvTWFwLVNldC5wcm90b3R5cGUudG9KU09OXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xuXG4kZXhwb3J0KCRleHBvcnQuUCArICRleHBvcnQuUiwgJ01hcCcsIHsgdG9KU09OOiByZXF1aXJlKCcuL19jb2xsZWN0aW9uLXRvLWpzb24nKSgnTWFwJykgfSk7XG4iLCIvLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL3Byb3Bvc2FsLXNldG1hcC1vZmZyb20vI3NlYy1tYXAub2ZcbnJlcXVpcmUoJy4vX3NldC1jb2xsZWN0aW9uLW9mJykoJ01hcCcpO1xuIiwiLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9wcm9wb3NhbC1zZXRtYXAtb2Zmcm9tLyNzZWMtbWFwLmZyb21cbnJlcXVpcmUoJy4vX3NldC1jb2xsZWN0aW9uLWZyb20nKSgnTWFwJyk7XG4iLCJyZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi5vYmplY3QudG8tc3RyaW5nJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi5zdHJpbmcuaXRlcmF0b3InKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvd2ViLmRvbS5pdGVyYWJsZScpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYubWFwJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNy5tYXAudG8tanNvbicpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczcubWFwLm9mJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNy5tYXAuZnJvbScpO1xubW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuLi9tb2R1bGVzL19jb3JlJykuTWFwO1xuIiwibW9kdWxlLmV4cG9ydHMgPSB7IFwiZGVmYXVsdFwiOiByZXF1aXJlKFwiY29yZS1qcy9saWJyYXJ5L2ZuL21hcFwiKSwgX19lc01vZHVsZTogdHJ1ZSB9OyIsIid1c2Ugc3RyaWN0JztcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcblxudmFyIF9tYXAgPSByZXF1aXJlKCdiYWJlbC1ydW50aW1lL2NvcmUtanMvbWFwJyk7XG5cbnZhciBfbWFwMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX21hcCk7XG5cbmV4cG9ydHMuZ2V0U2NoZWR1bGVyID0gZ2V0U2NoZWR1bGVyO1xuZXhwb3J0cy5nZXRTaW1wbGVTY2hlZHVsZXIgPSBnZXRTaW1wbGVTY2hlZHVsZXI7XG5cbnZhciBfYXVkaW9Db250ZXh0ID0gcmVxdWlyZSgnLi4vY29yZS9hdWRpb0NvbnRleHQnKTtcblxudmFyIF9hdWRpb0NvbnRleHQyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfYXVkaW9Db250ZXh0KTtcblxudmFyIF93YXZlc01hc3RlcnMgPSByZXF1aXJlKCd3YXZlcy1tYXN0ZXJzJyk7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cbnZhciBzY2hlZHVsZXJNYXAgPSBuZXcgX21hcDIuZGVmYXVsdCgpO1xudmFyIHNpbXBsZVNjaGVkdWxlck1hcCA9IG5ldyBfbWFwMi5kZWZhdWx0KCk7XG5cbi8qKlxuICogUmV0dXJucyBhIHVuaXF1ZSBpbnN0YW5jZSBvZiBgU2NoZWR1bGVyYFxuICpcbiAqIFtleGFtcGxlXXtAbGluayBodHRwczovL3Jhd2dpdC5jb20vd2F2ZXNqcy93YXZlcy1hdWRpby9tYXN0ZXIvZXhhbXBsZXMvc2NoZWR1bGVyL2luZGV4Lmh0bWx9fVxuICpcbiAqIEBnbG9iYWxcbiAqIEBmdW5jdGlvblxuICogQHJldHVybnMge1NjaGVkdWxlcn1cbiAqIEBzZWUgU2NoZWR1bGVyXG4gKi9cbmZ1bmN0aW9uIGdldFNjaGVkdWxlcigpIHtcbiAgdmFyIGF1ZGlvQ29udGV4dCA9IGFyZ3VtZW50cy5sZW5ndGggPiAwICYmIGFyZ3VtZW50c1swXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzBdIDogX2F1ZGlvQ29udGV4dDIuZGVmYXVsdDtcblxuICB2YXIgc2NoZWR1bGVyID0gc2NoZWR1bGVyTWFwLmdldChhdWRpb0NvbnRleHQpO1xuXG4gIGlmICghc2NoZWR1bGVyKSB7XG4gICAgdmFyIGdldFRpbWVGdW5jdGlvbiA9IGZ1bmN0aW9uIGdldFRpbWVGdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiBhdWRpb0NvbnRleHQuY3VycmVudFRpbWU7XG4gICAgfTtcbiAgICBzY2hlZHVsZXIgPSBuZXcgX3dhdmVzTWFzdGVycy5TY2hlZHVsZXIoZ2V0VGltZUZ1bmN0aW9uKTtcblxuICAgIHNjaGVkdWxlck1hcC5zZXQoYXVkaW9Db250ZXh0LCBzY2hlZHVsZXIpO1xuICB9XG5cbiAgcmV0dXJuIHNjaGVkdWxlcjtcbn07XG5cbi8qKlxuICogUmV0dXJucyBhIHVuaXF1ZSBpbnN0YW5jZSBvZiBgU2ltcGxlU2NoZWR1bGVyYFxuICpcbiAqIFtleGFtcGxlXXtAbGluayBodHRwczovL3Jhd2dpdC5jb20vd2F2ZXNqcy93YXZlcy1hdWRpby9tYXN0ZXIvZXhhbXBsZXMvc2ltcGxlLXNjaGVkdWxlci9pbmRleC5odG1sfX1cbiAqXG4gKiBAZ2xvYmFsXG4gKiBAZnVuY3Rpb25cbiAqIEByZXR1cm5zIHtTaW1wbGVTY2hlZHVsZXJ9XG4gKiBAc2VlIFNpbXBsZVNjaGVkdWxlclxuICovXG5mdW5jdGlvbiBnZXRTaW1wbGVTY2hlZHVsZXIoKSB7XG4gIHZhciBhdWRpb0NvbnRleHQgPSBhcmd1bWVudHMubGVuZ3RoID4gMCAmJiBhcmd1bWVudHNbMF0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1swXSA6IF9hdWRpb0NvbnRleHQyLmRlZmF1bHQ7XG5cbiAgdmFyIHNpbXBsZVNjaGVkdWxlciA9IHNpbXBsZVNjaGVkdWxlck1hcC5nZXQoYXVkaW9Db250ZXh0KTtcblxuICBpZiAoIXNpbXBsZVNjaGVkdWxlcikge1xuICAgIHZhciBnZXRUaW1lRnVuY3Rpb24gPSBmdW5jdGlvbiBnZXRUaW1lRnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gYXVkaW9Db250ZXh0LmN1cnJlbnRUaW1lO1xuICAgIH07XG4gICAgc2ltcGxlU2NoZWR1bGVyID0gbmV3IF93YXZlc01hc3RlcnMuU2ltcGxlU2NoZWR1bGVyKGdldFRpbWVGdW5jdGlvbik7XG5cbiAgICBzaW1wbGVTY2hlZHVsZXJNYXAuc2V0KGF1ZGlvQ29udGV4dCwgc2ltcGxlU2NoZWR1bGVyKTtcbiAgfVxuXG4gIHJldHVybiBzaW1wbGVTY2hlZHVsZXI7XG59O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2NoYXJzZXQ9dXRmLTg7YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSW1aaFkzUnZjbWxsY3k1cWN5SmRMQ0p1WVcxbGN5STZXeUpuWlhSVFkyaGxaSFZzWlhJaUxDSm5aWFJUYVcxd2JHVlRZMmhsWkhWc1pYSWlMQ0p6WTJobFpIVnNaWEpOWVhBaUxDSnphVzF3YkdWVFkyaGxaSFZzWlhKTllYQWlMQ0poZFdScGIwTnZiblJsZUhRaUxDSmtaV1poZFd4MFFYVmthVzlEYjI1MFpYaDBJaXdpYzJOb1pXUjFiR1Z5SWl3aVoyVjBJaXdpWjJWMFZHbHRaVVoxYm1OMGFXOXVJaXdpWTNWeWNtVnVkRlJwYldVaUxDSlRZMmhsWkhWc1pYSWlMQ0p6WlhRaUxDSnphVzF3YkdWVFkyaGxaSFZzWlhJaUxDSlRhVzF3YkdWVFkyaGxaSFZzWlhJaVhTd2liV0Z3Y0dsdVozTWlPaUk3T3pzN096czdPenM3VVVGblFtZENRU3haTEVkQlFVRkJMRms3VVVGMVFrRkRMR3RDTEVkQlFVRkJMR3RDT3p0QlFYWkRhRUk3T3pzN1FVRkRRVHM3T3p0QlFVVkJMRWxCUVUxRExHVkJRV1VzYlVKQlFYSkNPMEZCUTBFc1NVRkJUVU1zY1VKQlFYRkNMRzFDUVVFelFqczdRVUZGUVRzN096czdPenM3T3p0QlFWVlBMRk5CUVZOSUxGbEJRVlFzUjBGQk1FUTdRVUZCUVN4TlFVRndRMGtzV1VGQmIwTXNkVVZCUVhKQ1F5eHpRa0ZCY1VJN08wRkJReTlFTEUxQlFVbERMRmxCUVZsS0xHRkJRV0ZMTEVkQlFXSXNRMEZCYVVKSUxGbEJRV3BDTEVOQlFXaENPenRCUVVWQkxFMUJRVWtzUTBGQlEwVXNVMEZCVEN4RlFVRm5RanRCUVVOa0xGRkJRVTFGTEd0Q1FVRnJRaXhUUVVGc1FrRXNaVUZCYTBJN1FVRkJRU3hoUVVGTlNpeGhRVUZoU3l4WFFVRnVRanRCUVVGQkxFdEJRWGhDTzBGQlEwRklMR2RDUVVGWkxFbEJRVWxKTEhWQ1FVRktMRU5CUVdOR0xHVkJRV1FzUTBGQldqczdRVUZGUVU0c2FVSkJRV0ZUTEVkQlFXSXNRMEZCYVVKUUxGbEJRV3BDTEVWQlFTdENSU3hUUVVFdlFqdEJRVU5FT3p0QlFVVkVMRk5CUVU5QkxGTkJRVkE3UVVGRFJEczdRVUZGUkRzN096czdPenM3T3p0QlFWVlBMRk5CUVZOTUxHdENRVUZVTEVkQlFXZEZPMEZCUVVFc1RVRkJjRU5ITEZsQlFXOURMSFZGUVVGeVFrTXNjMEpCUVhGQ096dEJRVU55UlN4TlFVRkpUeXhyUWtGQmEwSlVMRzFDUVVGdFFra3NSMEZCYmtJc1EwRkJkVUpJTEZsQlFYWkNMRU5CUVhSQ096dEJRVVZCTEUxQlFVa3NRMEZCUTFFc1pVRkJUQ3hGUVVGelFqdEJRVU53UWl4UlFVRk5TaXhyUWtGQmEwSXNVMEZCYkVKQkxHVkJRV3RDTzBGQlFVRXNZVUZCVFVvc1lVRkJZVXNzVjBGQmJrSTdRVUZCUVN4TFFVRjRRanRCUVVOQlJ5eHpRa0ZCYTBJc1NVRkJTVU1zTmtKQlFVb3NRMEZCYjBKTUxHVkJRWEJDTEVOQlFXeENPenRCUVVWQlRDeDFRa0ZCYlVKUkxFZEJRVzVDTEVOQlFYVkNVQ3haUVVGMlFpeEZRVUZ4UTFFc1pVRkJja003UVVGRFJEczdRVUZGUkN4VFFVRlBRU3hsUVVGUU8wRkJRMFFpTENKbWFXeGxJam9pWm1GamRHOXlhV1Z6TG1weklpd2ljMjkxY21ObGMwTnZiblJsYm5RaU9sc2lhVzF3YjNKMElHUmxabUYxYkhSQmRXUnBiME52Ym5SbGVIUWdabkp2YlNBbkxpNHZZMjl5WlM5aGRXUnBiME52Ym5SbGVIUW5PMXh1YVcxd2IzSjBJSHNnVTJOb1pXUjFiR1Z5TENCVGFXMXdiR1ZUWTJobFpIVnNaWElnZlNCbWNtOXRJQ2QzWVhabGN5MXRZWE4wWlhKekp6dGNibHh1WTI5dWMzUWdjMk5vWldSMWJHVnlUV0Z3SUQwZ2JtVjNJRTFoY0NncE8xeHVZMjl1YzNRZ2MybHRjR3hsVTJOb1pXUjFiR1Z5VFdGd0lEMGdibVYzSUUxaGNDZ3BPMXh1WEc0dktpcGNiaUFxSUZKbGRIVnlibk1nWVNCMWJtbHhkV1VnYVc1emRHRnVZMlVnYjJZZ1lGTmphR1ZrZFd4bGNtQmNiaUFxWEc0Z0tpQmJaWGhoYlhCc1pWMTdRR3hwYm1zZ2FIUjBjSE02THk5eVlYZG5hWFF1WTI5dEwzZGhkbVZ6YW5NdmQyRjJaWE10WVhWa2FXOHZiV0Z6ZEdWeUwyVjRZVzF3YkdWekwzTmphR1ZrZFd4bGNpOXBibVJsZUM1b2RHMXNmWDFjYmlBcVhHNGdLaUJBWjJ4dlltRnNYRzRnS2lCQVpuVnVZM1JwYjI1Y2JpQXFJRUJ5WlhSMWNtNXpJSHRUWTJobFpIVnNaWEo5WEc0Z0tpQkFjMlZsSUZOamFHVmtkV3hsY2x4dUlDb3ZYRzVsZUhCdmNuUWdablZ1WTNScGIyNGdaMlYwVTJOb1pXUjFiR1Z5S0dGMVpHbHZRMjl1ZEdWNGRDQTlJR1JsWm1GMWJIUkJkV1JwYjBOdmJuUmxlSFFwSUh0Y2JpQWdiR1YwSUhOamFHVmtkV3hsY2lBOUlITmphR1ZrZFd4bGNrMWhjQzVuWlhRb1lYVmthVzlEYjI1MFpYaDBLVHRjYmx4dUlDQnBaaUFvSVhOamFHVmtkV3hsY2lrZ2UxeHVJQ0FnSUdOdmJuTjBJR2RsZEZScGJXVkdkVzVqZEdsdmJpQTlJQ2dwSUQwK0lHRjFaR2x2UTI5dWRHVjRkQzVqZFhKeVpXNTBWR2x0WlR0Y2JpQWdJQ0J6WTJobFpIVnNaWElnUFNCdVpYY2dVMk5vWldSMWJHVnlLR2RsZEZScGJXVkdkVzVqZEdsdmJpazdYRzVjYmlBZ0lDQnpZMmhsWkhWc1pYSk5ZWEF1YzJWMEtHRjFaR2x2UTI5dWRHVjRkQ3dnYzJOb1pXUjFiR1Z5S1R0Y2JpQWdmVnh1WEc0Z0lISmxkSFZ5YmlCelkyaGxaSFZzWlhJN1hHNTlPMXh1WEc0dktpcGNiaUFxSUZKbGRIVnlibk1nWVNCMWJtbHhkV1VnYVc1emRHRnVZMlVnYjJZZ1lGTnBiWEJzWlZOamFHVmtkV3hsY21CY2JpQXFYRzRnS2lCYlpYaGhiWEJzWlYxN1FHeHBibXNnYUhSMGNITTZMeTl5WVhkbmFYUXVZMjl0TDNkaGRtVnphbk12ZDJGMlpYTXRZWFZrYVc4dmJXRnpkR1Z5TDJWNFlXMXdiR1Z6TDNOcGJYQnNaUzF6WTJobFpIVnNaWEl2YVc1a1pYZ3VhSFJ0YkgxOVhHNGdLbHh1SUNvZ1FHZHNiMkpoYkZ4dUlDb2dRR1oxYm1OMGFXOXVYRzRnS2lCQWNtVjBkWEp1Y3lCN1UybHRjR3hsVTJOb1pXUjFiR1Z5ZlZ4dUlDb2dRSE5sWlNCVGFXMXdiR1ZUWTJobFpIVnNaWEpjYmlBcUwxeHVaWGh3YjNKMElHWjFibU4wYVc5dUlHZGxkRk5wYlhCc1pWTmphR1ZrZFd4bGNpaGhkV1JwYjBOdmJuUmxlSFFnUFNCa1pXWmhkV3gwUVhWa2FXOURiMjUwWlhoMEtTQjdYRzRnSUd4bGRDQnphVzF3YkdWVFkyaGxaSFZzWlhJZ1BTQnphVzF3YkdWVFkyaGxaSFZzWlhKTllYQXVaMlYwS0dGMVpHbHZRMjl1ZEdWNGRDazdYRzVjYmlBZ2FXWWdLQ0Z6YVcxd2JHVlRZMmhsWkhWc1pYSXBJSHRjYmlBZ0lDQmpiMjV6ZENCblpYUlVhVzFsUm5WdVkzUnBiMjRnUFNBb0tTQTlQaUJoZFdScGIwTnZiblJsZUhRdVkzVnljbVZ1ZEZScGJXVTdYRzRnSUNBZ2MybHRjR3hsVTJOb1pXUjFiR1Z5SUQwZ2JtVjNJRk5wYlhCc1pWTmphR1ZrZFd4bGNpaG5aWFJVYVcxbFJuVnVZM1JwYjI0cE8xeHVYRzRnSUNBZ2MybHRjR3hsVTJOb1pXUjFiR1Z5VFdGd0xuTmxkQ2hoZFdScGIwTnZiblJsZUhRc0lITnBiWEJzWlZOamFHVmtkV3hsY2lrN1hHNGdJSDFjYmx4dUlDQnlaWFIxY200Z2MybHRjR3hsVTJOb1pXUjFiR1Z5TzF4dWZUdGNiaUpkZlE9PSIsIid1c2Ugc3RyaWN0JztcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcblxudmFyIF9nZXRQcm90b3R5cGVPZiA9IHJlcXVpcmUoJ2JhYmVsLXJ1bnRpbWUvY29yZS1qcy9vYmplY3QvZ2V0LXByb3RvdHlwZS1vZicpO1xuXG52YXIgX2dldFByb3RvdHlwZU9mMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2dldFByb3RvdHlwZU9mKTtcblxudmFyIF9jbGFzc0NhbGxDaGVjazIgPSByZXF1aXJlKCdiYWJlbC1ydW50aW1lL2hlbHBlcnMvY2xhc3NDYWxsQ2hlY2snKTtcblxudmFyIF9jbGFzc0NhbGxDaGVjazMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9jbGFzc0NhbGxDaGVjazIpO1xuXG52YXIgX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4yID0gcmVxdWlyZSgnYmFiZWwtcnVudGltZS9oZWxwZXJzL3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4nKTtcblxudmFyIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuMyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4yKTtcblxudmFyIF9pbmhlcml0czIgPSByZXF1aXJlKCdiYWJlbC1ydW50aW1lL2hlbHBlcnMvaW5oZXJpdHMnKTtcblxudmFyIF9pbmhlcml0czMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9pbmhlcml0czIpO1xuXG52YXIgX2F1ZGlvQ29udGV4dCA9IHJlcXVpcmUoJy4uL2NvcmUvYXVkaW9Db250ZXh0Jyk7XG5cbnZhciBfYXVkaW9Db250ZXh0MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2F1ZGlvQ29udGV4dCk7XG5cbnZhciBfZmFjdG9yaWVzID0gcmVxdWlyZSgnLi9mYWN0b3JpZXMnKTtcblxudmFyIF93YXZlc01hc3RlcnMgPSByZXF1aXJlKCd3YXZlcy1tYXN0ZXJzJyk7XG5cbnZhciBtYXN0ZXJzID0gX2ludGVyb3BSZXF1aXJlV2lsZGNhcmQoX3dhdmVzTWFzdGVycyk7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkKG9iaikgeyBpZiAob2JqICYmIG9iai5fX2VzTW9kdWxlKSB7IHJldHVybiBvYmo7IH0gZWxzZSB7IHZhciBuZXdPYmogPSB7fTsgaWYgKG9iaiAhPSBudWxsKSB7IGZvciAodmFyIGtleSBpbiBvYmopIHsgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmosIGtleSkpIG5ld09ialtrZXldID0gb2JqW2tleV07IH0gfSBuZXdPYmouZGVmYXVsdCA9IG9iajsgcmV0dXJuIG5ld09iajsgfSB9XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cbi8qKlxuICogRXh0ZW5kcyBUaW1lIEVuZ2luZSB0byBwcm92aWRlIHBsYXliYWNrIGNvbnRyb2wgb2YgYSBUaW1lIEVuZ2luZSBpbnN0YW5jZS5cbiAqXG4gKiBbZXhhbXBsZV17QGxpbmsgaHR0cHM6Ly9yYXdnaXQuY29tL3dhdmVzanMvd2F2ZXMtYXVkaW8vbWFzdGVyL2V4YW1wbGVzL3BsYXktY29udHJvbC9pbmRleC5odG1sfVxuICpcbiAqIEBleHRlbmRzIFRpbWVFbmdpbmVcbiAqIEBwYXJhbSB7VGltZUVuZ2luZX0gZW5naW5lIC0gZW5naW5lIHRvIGNvbnRyb2xcbiAqXG4gKiBAZXhhbXBsZVxuICogaW1wb3J0ICogYXMgYXVkaW8gZnJvbSAnd2F2ZXMtYXVkaW8nO1xuICogY29uc3QgcGxheWVyRW5naW5lID0gYXVkaW8uUGxheWVyRW5naW5lKCk7XG4gKiBjb25zdCBwbGF5Q29udHJvbCA9IG5ldyBhdWRpby5QbGF5Q29udHJvbChwbGF5ZXJFbmdpbmUpO1xuICpcbiAqIHBsYXlDb250cm9sLnN0YXJ0KCk7XG4gKi9cbnZhciBQbGF5Q29udHJvbCA9IGZ1bmN0aW9uIChfbWFzdGVycyRQbGF5Q29udHJvbCkge1xuICAoMCwgX2luaGVyaXRzMy5kZWZhdWx0KShQbGF5Q29udHJvbCwgX21hc3RlcnMkUGxheUNvbnRyb2wpO1xuXG4gIGZ1bmN0aW9uIFBsYXlDb250cm9sKGVuZ2luZSkge1xuICAgIHZhciBvcHRpb25zID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMV0gOiB7fTtcbiAgICAoMCwgX2NsYXNzQ2FsbENoZWNrMy5kZWZhdWx0KSh0aGlzLCBQbGF5Q29udHJvbCk7XG5cbiAgICB2YXIgYXVkaW9Db250ZXh0ID0gb3B0aW9ucy5hdWRpb0NvbnRleHQgfHwgX2F1ZGlvQ29udGV4dDIuZGVmYXVsdDtcbiAgICB2YXIgc2NoZWR1bGVyID0gKDAsIF9mYWN0b3JpZXMuZ2V0U2NoZWR1bGVyKShhdWRpb0NvbnRleHQpO1xuXG4gICAgdmFyIF90aGlzID0gKDAsIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuMy5kZWZhdWx0KSh0aGlzLCAoUGxheUNvbnRyb2wuX19wcm90b19fIHx8ICgwLCBfZ2V0UHJvdG90eXBlT2YyLmRlZmF1bHQpKFBsYXlDb250cm9sKSkuY2FsbCh0aGlzLCBzY2hlZHVsZXIsIGVuZ2luZSwgb3B0aW9ucykpO1xuXG4gICAgX3RoaXMuYXVkaW9Db250ZXh0ID0gYXVkaW9Db250ZXh0O1xuICAgIHJldHVybiBfdGhpcztcbiAgfVxuXG4gIHJldHVybiBQbGF5Q29udHJvbDtcbn0obWFzdGVycy5QbGF5Q29udHJvbCk7XG5cbmV4cG9ydHMuZGVmYXVsdCA9IFBsYXlDb250cm9sO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2NoYXJzZXQ9dXRmLTg7YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSWxCc1lYbERiMjUwY205c0xtcHpJbDBzSW01aGJXVnpJanBiSW0xaGMzUmxjbk1pTENKUWJHRjVRMjl1ZEhKdmJDSXNJbVZ1WjJsdVpTSXNJbTl3ZEdsdmJuTWlMQ0poZFdScGIwTnZiblJsZUhRaUxDSmtaV1poZFd4MFFYVmthVzlEYjI1MFpYaDBJaXdpYzJOb1pXUjFiR1Z5SWwwc0ltMWhjSEJwYm1keklqb2lPenM3T3pzN096czdPenM3T3pzN096czdPenM3TzBGQlFVRTdPenM3UVVGRFFUczdRVUZEUVRzN1NVRkJXVUVzVHpzN096czdPMEZCUlZvN096czdPenM3T3pzN096czdPenRKUVdWTlF5eFhPenM3UVVGRFNpeDFRa0ZCV1VNc1RVRkJXaXhGUVVGclF6dEJRVUZCTEZGQlFXUkRMRTlCUVdNc2RVVkJRVW9zUlVGQlNUdEJRVUZCT3p0QlFVTm9ReXhSUVVGTlF5eGxRVUZsUkN4UlFVRlJReXhaUVVGU0xFbEJRWGRDUXl4elFrRkJOME03UVVGRFFTeFJRVUZOUXl4WlFVRlpMRFpDUVVGaFJpeFpRVUZpTEVOQlFXeENPenRCUVVablF5eG5Ta0ZKTVVKRkxGTkJTakJDTEVWQlNXWktMRTFCU21Vc1JVRkpVRU1zVDBGS1R6czdRVUZOYUVNc1ZVRkJTME1zV1VGQlRDeEhRVUZ2UWtFc1dVRkJjRUk3UVVGT1owTTdRVUZQYWtNN096dEZRVkoxUWtvc1VVRkJVVU1zVnpzN2EwSkJWMjVDUVN4WElpd2labWxzWlNJNklsQnNZWGxEYjI1MGNtOXNMbXB6SWl3aWMyOTFjbU5sYzBOdmJuUmxiblFpT2xzaWFXMXdiM0owSUdSbFptRjFiSFJCZFdScGIwTnZiblJsZUhRZ1puSnZiU0FuTGk0dlkyOXlaUzloZFdScGIwTnZiblJsZUhRbk8xeHVhVzF3YjNKMElIc2daMlYwVTJOb1pXUjFiR1Z5SUgwZ1puSnZiU0FuTGk5bVlXTjBiM0pwWlhNbk8xeHVhVzF3YjNKMElDb2dZWE1nYldGemRHVnljeUJtY205dElDZDNZWFpsY3kxdFlYTjBaWEp6Snp0Y2JseHVMeW9xWEc0Z0tpQkZlSFJsYm1SeklGUnBiV1VnUlc1bmFXNWxJSFJ2SUhCeWIzWnBaR1VnY0d4aGVXSmhZMnNnWTI5dWRISnZiQ0J2WmlCaElGUnBiV1VnUlc1bmFXNWxJR2x1YzNSaGJtTmxMbHh1SUNwY2JpQXFJRnRsZUdGdGNHeGxYWHRBYkdsdWF5Qm9kSFJ3Y3pvdkwzSmhkMmRwZEM1amIyMHZkMkYyWlhOcWN5OTNZWFpsY3kxaGRXUnBieTl0WVhOMFpYSXZaWGhoYlhCc1pYTXZjR3hoZVMxamIyNTBjbTlzTDJsdVpHVjRMbWgwYld4OVhHNGdLbHh1SUNvZ1FHVjRkR1Z1WkhNZ1ZHbHRaVVZ1WjJsdVpWeHVJQ29nUUhCaGNtRnRJSHRVYVcxbFJXNW5hVzVsZlNCbGJtZHBibVVnTFNCbGJtZHBibVVnZEc4Z1kyOXVkSEp2YkZ4dUlDcGNiaUFxSUVCbGVHRnRjR3hsWEc0Z0tpQnBiWEJ2Y25RZ0tpQmhjeUJoZFdScGJ5Qm1jbTl0SUNkM1lYWmxjeTFoZFdScGJ5YzdYRzRnS2lCamIyNXpkQ0J3YkdGNVpYSkZibWRwYm1VZ1BTQmhkV1JwYnk1UWJHRjVaWEpGYm1kcGJtVW9LVHRjYmlBcUlHTnZibk4wSUhCc1lYbERiMjUwY205c0lEMGdibVYzSUdGMVpHbHZMbEJzWVhsRGIyNTBjbTlzS0hCc1lYbGxja1Z1WjJsdVpTazdYRzRnS2x4dUlDb2djR3hoZVVOdmJuUnliMnd1YzNSaGNuUW9LVHRjYmlBcUwxeHVZMnhoYzNNZ1VHeGhlVU52Ym5SeWIyd2daWGgwWlc1a2N5QnRZWE4wWlhKekxsQnNZWGxEYjI1MGNtOXNJSHRjYmlBZ1kyOXVjM1J5ZFdOMGIzSW9aVzVuYVc1bExDQnZjSFJwYjI1eklEMGdlMzBwSUh0Y2JpQWdJQ0JqYjI1emRDQmhkV1JwYjBOdmJuUmxlSFFnUFNCdmNIUnBiMjV6TG1GMVpHbHZRMjl1ZEdWNGRDQjhmTUtnWkdWbVlYVnNkRUYxWkdsdlEyOXVkR1Y0ZER0Y2JpQWdJQ0JqYjI1emRDQnpZMmhsWkhWc1pYSWdQU0JuWlhSVFkyaGxaSFZzWlhJb1lYVmthVzlEYjI1MFpYaDBLVHRjYmx4dUlDQWdJSE4xY0dWeUtITmphR1ZrZFd4bGNpd2daVzVuYVc1bExDQnZjSFJwYjI1ektUdGNibHh1SUNBZ0lIUm9hWE11WVhWa2FXOURiMjUwWlhoMElEMGdZWFZrYVc5RGIyNTBaWGgwTzF4dUlDQjlYRzU5WEc1Y2JtVjRjRzl5ZENCa1pXWmhkV3gwSUZCc1lYbERiMjUwY205c08xeHVJbDE5IiwiLy8gVEhJUyBGSUxFIElTIEdFTkVSQVRFRCAtIERPIE5PVCBFRElUIVxuLyohbW9iaWxlLWRldGVjdCB2MS40LjQgMjAxOS0wOS0yMSovXG4vKmdsb2JhbCBtb2R1bGU6ZmFsc2UsIGRlZmluZTpmYWxzZSovXG4vKmpzaGludCBsYXRlZGVmOmZhbHNlKi9cbi8qIUBsaWNlbnNlIENvcHlyaWdodCAyMDEzLCBIZWlucmljaCBHb2VibCwgTGljZW5zZTogTUlULCBzZWUgaHR0cHM6Ly9naXRodWIuY29tL2hnb2VibC9tb2JpbGUtZGV0ZWN0LmpzKi9cbihmdW5jdGlvbiAoZGVmaW5lLCB1bmRlZmluZWQpIHtcbmRlZmluZShmdW5jdGlvbiAoKSB7XG4gICAgJ3VzZSBzdHJpY3QnO1xuXG4gICAgdmFyIGltcGwgPSB7fTtcblxuICAgIGltcGwubW9iaWxlRGV0ZWN0UnVsZXMgPSB7XG4gICAgXCJwaG9uZXNcIjoge1xuICAgICAgICBcImlQaG9uZVwiOiBcIlxcXFxiaVBob25lXFxcXGJ8XFxcXGJpUG9kXFxcXGJcIixcbiAgICAgICAgXCJCbGFja0JlcnJ5XCI6IFwiQmxhY2tCZXJyeXxcXFxcYkJCMTBcXFxcYnxyaW1bMC05XSt8XFxcXGIoQkJBMTAwfEJCQjEwMHxCQkQxMDB8QkJFMTAwfEJCRjEwMHxTVEgxMDApXFxcXGItWzAtOV0rXCIsXG4gICAgICAgIFwiSFRDXCI6IFwiSFRDfEhUQy4qKFNlbnNhdGlvbnxFdm98VmlzaW9ufEV4cGxvcmVyfDY4MDB8ODEwMHw4OTAwfEE3MjcyfFM1MTBlfEMxMTBlfExlZ2VuZHxEZXNpcmV8VDgyODIpfEFQWDUxNUNLVHxRdGVrOTA5MHxBUEE5MjkyS1R8SERfbWluaXxTZW5zYXRpb24uKlo3MTBlfFBHODYxMDB8WjcxNWV8RGVzaXJlLiooQTgxODF8SEQpfEFEUjYyMDB8QURSNjQwMEx8QURSNjQyNXwwMDFIVHxJbnNwaXJlIDRHfEFuZHJvaWQuKlxcXFxiRVZPXFxcXGJ8VC1Nb2JpbGUgRzF8WjUyMG18QW5kcm9pZCBbMC05Ll0rOyBQaXhlbFwiLFxuICAgICAgICBcIk5leHVzXCI6IFwiTmV4dXMgT25lfE5leHVzIFN8R2FsYXh5LipOZXh1c3xBbmRyb2lkLipOZXh1cy4qTW9iaWxlfE5leHVzIDR8TmV4dXMgNXxOZXh1cyA2XCIsXG4gICAgICAgIFwiRGVsbFwiOiBcIkRlbGxbO10/IChTdHJlYWt8QWVyb3xWZW51ZXxWZW51ZSBQcm98Rmxhc2h8U21va2V8TWluaSAzaVgpfFhDRDI4fFhDRDM1fFxcXFxiMDAxRExcXFxcYnxcXFxcYjEwMURMXFxcXGJ8XFxcXGJHUzAxXFxcXGJcIixcbiAgICAgICAgXCJNb3Rvcm9sYVwiOiBcIk1vdG9yb2xhfERST0lEWHxEUk9JRCBCSU9OSUN8XFxcXGJEcm9pZFxcXFxiLipCdWlsZHxBbmRyb2lkLipYb29tfEhSSTM5fE1PVC18QTEyNjB8QTE2ODB8QTU1NXxBODUzfEE4NTV8QTk1M3xBOTU1fEE5NTZ8TW90b3JvbGEuKkVMRUNUUklGWXxNb3Rvcm9sYS4qaTF8aTg2N3xpOTQwfE1CMjAwfE1CMzAwfE1CNTAxfE1CNTAyfE1CNTA4fE1CNTExfE1CNTIwfE1CNTI1fE1CNTI2fE1CNjExfE1CNjEyfE1CNjMyfE1CODEwfE1CODU1fE1CODYwfE1CODYxfE1CODY1fE1CODcwfE1FNTAxfE1FNTAyfE1FNTExfE1FNTI1fE1FNjAwfE1FNjMyfE1FNzIyfE1FODExfE1FODYwfE1FODYzfE1FODY1fE1UNjIwfE1UNzEwfE1UNzE2fE1UNzIwfE1UODEwfE1UODcwfE1UOTE3fE1vdG9yb2xhLipUSVRBTklVTXxXWDQzNXxXWDQ0NXxYVDMwMHxYVDMwMXxYVDMxMXxYVDMxNnxYVDMxN3xYVDMxOXxYVDMyMHxYVDM5MHxYVDUwMnxYVDUzMHxYVDUzMXxYVDUzMnxYVDUzNXxYVDYwM3xYVDYxMHxYVDYxMXxYVDYxNXxYVDY4MXxYVDcwMXxYVDcwMnxYVDcxMXxYVDcyMHxYVDgwMHxYVDgwNnxYVDg2MHxYVDg2MnxYVDg3NXxYVDg4MnxYVDg4M3xYVDg5NHxYVDkwMXxYVDkwN3xYVDkwOXxYVDkxMHxYVDkxMnxYVDkyOHxYVDkyNnxYVDkxNXxYVDkxOXxYVDkyNXxYVDEwMjF8XFxcXGJNb3RvIEVcXFxcYnxYVDEwNjh8WFQxMDkyfFhUMTA1MlwiLFxuICAgICAgICBcIlNhbXN1bmdcIjogXCJcXFxcYlNhbXN1bmdcXFxcYnxTTS1HOTUwRnxTTS1HOTU1RnxTTS1HOTI1MHxHVC0xOTMwMHxTR0gtSTMzN3xCR1QtUzUyMzB8R1QtQjIxMDB8R1QtQjI3MDB8R1QtQjI3MTB8R1QtQjMyMTB8R1QtQjMzMTB8R1QtQjM0MTB8R1QtQjM3MzB8R1QtQjM3NDB8R1QtQjU1MTB8R1QtQjU1MTJ8R1QtQjU3MjJ8R1QtQjY1MjB8R1QtQjczMDB8R1QtQjczMjB8R1QtQjczMzB8R1QtQjczNTB8R1QtQjc1MTB8R1QtQjc3MjJ8R1QtQjc4MDB8R1QtQzMwMTB8R1QtQzMwMTF8R1QtQzMwNjB8R1QtQzMyMDB8R1QtQzMyMTJ8R1QtQzMyMTJJfEdULUMzMjYyfEdULUMzMjIyfEdULUMzMzAwfEdULUMzMzAwS3xHVC1DMzMwM3xHVC1DMzMwM0t8R1QtQzMzMTB8R1QtQzMzMjJ8R1QtQzMzMzB8R1QtQzMzNTB8R1QtQzM1MDB8R1QtQzM1MTB8R1QtQzM1MzB8R1QtQzM2MzB8R1QtQzM3ODB8R1QtQzUwMTB8R1QtQzUyMTJ8R1QtQzY2MjB8R1QtQzY2MjV8R1QtQzY3MTJ8R1QtRTEwNTB8R1QtRTEwNzB8R1QtRTEwNzV8R1QtRTEwODB8R1QtRTEwODF8R1QtRTEwODV8R1QtRTEwODd8R1QtRTExMDB8R1QtRTExMDd8R1QtRTExMTB8R1QtRTExMjB8R1QtRTExMjV8R1QtRTExMzB8R1QtRTExNjB8R1QtRTExNzB8R1QtRTExNzV8R1QtRTExODB8R1QtRTExODJ8R1QtRTEyMDB8R1QtRTEyMTB8R1QtRTEyMjV8R1QtRTEyMzB8R1QtRTEzOTB8R1QtRTIxMDB8R1QtRTIxMjB8R1QtRTIxMjF8R1QtRTIxNTJ8R1QtRTIyMjB8R1QtRTIyMjJ8R1QtRTIyMzB8R1QtRTIyMzJ8R1QtRTIyNTB8R1QtRTIzNzB8R1QtRTI1NTB8R1QtRTI2NTJ8R1QtRTMyMTB8R1QtRTMyMTN8R1QtSTU1MDB8R1QtSTU1MDN8R1QtSTU3MDB8R1QtSTU4MDB8R1QtSTU4MDF8R1QtSTY0MTB8R1QtSTY0MjB8R1QtSTcxMTB8R1QtSTc0MTB8R1QtSTc1MDB8R1QtSTgwMDB8R1QtSTgxNTB8R1QtSTgxNjB8R1QtSTgxOTB8R1QtSTgzMjB8R1QtSTgzMzB8R1QtSTgzNTB8R1QtSTg1MzB8R1QtSTg3MDB8R1QtSTg3MDN8R1QtSTg5MTB8R1QtSTkwMDB8R1QtSTkwMDF8R1QtSTkwMDN8R1QtSTkwMTB8R1QtSTkwMjB8R1QtSTkwMjN8R1QtSTkwNzB8R1QtSTkwODJ8R1QtSTkxMDB8R1QtSTkxMDN8R1QtSTkyMjB8R1QtSTkyNTB8R1QtSTkzMDB8R1QtSTkzMDV8R1QtSTk1MDB8R1QtSTk1MDV8R1QtTTM1MTB8R1QtTTU2NTB8R1QtTTc1MDB8R1QtTTc2MDB8R1QtTTc2MDN8R1QtTTg4MDB8R1QtTTg5MTB8R1QtTjcwMDB8R1QtUzMxMTB8R1QtUzMzMTB8R1QtUzMzNTB8R1QtUzMzNTN8R1QtUzMzNzB8R1QtUzM2NTB8R1QtUzM2NTN8R1QtUzM3NzB8R1QtUzM4NTB8R1QtUzUyMTB8R1QtUzUyMjB8R1QtUzUyMjl8R1QtUzUyMzB8R1QtUzUyMzN8R1QtUzUyNTB8R1QtUzUyNTN8R1QtUzUyNjB8R1QtUzUyNjN8R1QtUzUyNzB8R1QtUzUzMDB8R1QtUzUzMzB8R1QtUzUzNTB8R1QtUzUzNjB8R1QtUzUzNjN8R1QtUzUzNjl8R1QtUzUzODB8R1QtUzUzODBEfEdULVM1NTYwfEdULVM1NTcwfEdULVM1NjAwfEdULVM1NjAzfEdULVM1NjEwfEdULVM1NjIwfEdULVM1NjYwfEdULVM1NjcwfEdULVM1NjkwfEdULVM1NzUwfEdULVM1NzgwfEdULVM1ODMwfEdULVM1ODM5fEdULVM2MTAyfEdULVM2NTAwfEdULVM3MDcwfEdULVM3MjAwfEdULVM3MjIwfEdULVM3MjMwfEdULVM3MjMzfEdULVM3MjUwfEdULVM3NTAwfEdULVM3NTMwfEdULVM3NTUwfEdULVM3NTYyfEdULVM3NzEwfEdULVM4MDAwfEdULVM4MDAzfEdULVM4NTAwfEdULVM4NTMwfEdULVM4NjAwfFNDSC1BMzEwfFNDSC1BNTMwfFNDSC1BNTcwfFNDSC1BNjEwfFNDSC1BNjMwfFNDSC1BNjUwfFNDSC1BNzkwfFNDSC1BNzk1fFNDSC1BODUwfFNDSC1BODcwfFNDSC1BODkwfFNDSC1BOTMwfFNDSC1BOTUwfFNDSC1BOTcwfFNDSC1BOTkwfFNDSC1JMTAwfFNDSC1JMTEwfFNDSC1JNDAwfFNDSC1JNDA1fFNDSC1JNTAwfFNDSC1JNTEwfFNDSC1JNTE1fFNDSC1JNjAwfFNDSC1JNzMwfFNDSC1JNzYwfFNDSC1JNzcwfFNDSC1JODMwfFNDSC1JOTEwfFNDSC1JOTIwfFNDSC1JOTU5fFNDSC1MQzExfFNDSC1OMTUwfFNDSC1OMzAwfFNDSC1SMTAwfFNDSC1SMzAwfFNDSC1SMzUxfFNDSC1SNDAwfFNDSC1SNDEwfFNDSC1UMzAwfFNDSC1VMzEwfFNDSC1VMzIwfFNDSC1VMzUwfFNDSC1VMzYwfFNDSC1VMzY1fFNDSC1VMzcwfFNDSC1VMzgwfFNDSC1VNDEwfFNDSC1VNDMwfFNDSC1VNDUwfFNDSC1VNDYwfFNDSC1VNDcwfFNDSC1VNDkwfFNDSC1VNTQwfFNDSC1VNTUwfFNDSC1VNjIwfFNDSC1VNjQwfFNDSC1VNjUwfFNDSC1VNjYwfFNDSC1VNzAwfFNDSC1VNzQwfFNDSC1VNzUwfFNDSC1VODEwfFNDSC1VODIwfFNDSC1VOTAwfFNDSC1VOTQwfFNDSC1VOTYwfFNDUy0yNlVDfFNHSC1BMTA3fFNHSC1BMTE3fFNHSC1BMTI3fFNHSC1BMTM3fFNHSC1BMTU3fFNHSC1BMTY3fFNHSC1BMTc3fFNHSC1BMTg3fFNHSC1BMTk3fFNHSC1BMjI3fFNHSC1BMjM3fFNHSC1BMjU3fFNHSC1BNDM3fFNHSC1BNTE3fFNHSC1BNTk3fFNHSC1BNjM3fFNHSC1BNjU3fFNHSC1BNjY3fFNHSC1BNjg3fFNHSC1BNjk3fFNHSC1BNzA3fFNHSC1BNzE3fFNHSC1BNzI3fFNHSC1BNzM3fFNHSC1BNzQ3fFNHSC1BNzY3fFNHSC1BNzc3fFNHSC1BNzk3fFNHSC1BODE3fFNHSC1BODI3fFNHSC1BODM3fFNHSC1BODQ3fFNHSC1BODY3fFNHSC1BODc3fFNHSC1BODg3fFNHSC1BODk3fFNHSC1BOTI3fFNHSC1CMTAwfFNHSC1CMTMwfFNHSC1CMjAwfFNHSC1CMjIwfFNHSC1DMTAwfFNHSC1DMTEwfFNHSC1DMTIwfFNHSC1DMTMwfFNHSC1DMTQwfFNHSC1DMTYwfFNHSC1DMTcwfFNHSC1DMTgwfFNHSC1DMjAwfFNHSC1DMjA3fFNHSC1DMjEwfFNHSC1DMjI1fFNHSC1DMjMwfFNHSC1DNDE3fFNHSC1DNDUwfFNHSC1EMzA3fFNHSC1EMzQ3fFNHSC1EMzU3fFNHSC1ENDA3fFNHSC1ENDE1fFNHSC1ENzgwfFNHSC1EODA3fFNHSC1EOTgwfFNHSC1FMTA1fFNHSC1FMjAwfFNHSC1FMzE1fFNHSC1FMzE2fFNHSC1FMzE3fFNHSC1FMzM1fFNHSC1FNTkwfFNHSC1FNjM1fFNHSC1FNzE1fFNHSC1FODkwfFNHSC1GMzAwfFNHSC1GNDgwfFNHSC1JMjAwfFNHSC1JMzAwfFNHSC1JMzIwfFNHSC1JNTUwfFNHSC1JNTc3fFNHSC1JNjAwfFNHSC1JNjA3fFNHSC1JNjE3fFNHSC1JNjI3fFNHSC1JNjM3fFNHSC1JNjc3fFNHSC1JNzAwfFNHSC1JNzE3fFNHSC1JNzI3fFNHSC1pNzQ3TXxTR0gtSTc3N3xTR0gtSTc4MHxTR0gtSTgyN3xTR0gtSTg0N3xTR0gtSTg1N3xTR0gtSTg5NnxTR0gtSTg5N3xTR0gtSTkwMHxTR0gtSTkwN3xTR0gtSTkxN3xTR0gtSTkyN3xTR0gtSTkzN3xTR0gtSTk5N3xTR0gtSjE1MHxTR0gtSjIwMHxTR0gtTDE3MHxTR0gtTDcwMHxTR0gtTTExMHxTR0gtTTE1MHxTR0gtTTIwMHxTR0gtTjEwNXxTR0gtTjUwMHxTR0gtTjYwMHxTR0gtTjYyMHxTR0gtTjYyNXxTR0gtTjcwMHxTR0gtTjcxMHxTR0gtUDEwN3xTR0gtUDIwN3xTR0gtUDMwMHxTR0gtUDMxMHxTR0gtUDUyMHxTR0gtUDczNXxTR0gtUDc3N3xTR0gtUTEwNXxTR0gtUjIxMHxTR0gtUjIyMHxTR0gtUjIyNXxTR0gtUzEwNXxTR0gtUzMwN3xTR0gtVDEwOXxTR0gtVDExOXxTR0gtVDEzOXxTR0gtVDIwOXxTR0gtVDIxOXxTR0gtVDIyOXxTR0gtVDIzOXxTR0gtVDI0OXxTR0gtVDI1OXxTR0gtVDMwOXxTR0gtVDMxOXxTR0gtVDMyOXxTR0gtVDMzOXxTR0gtVDM0OXxTR0gtVDM1OXxTR0gtVDM2OXxTR0gtVDM3OXxTR0gtVDQwOXxTR0gtVDQyOXxTR0gtVDQzOXxTR0gtVDQ1OXxTR0gtVDQ2OXxTR0gtVDQ3OXxTR0gtVDQ5OXxTR0gtVDUwOXxTR0gtVDUxOXxTR0gtVDUzOXxTR0gtVDU1OXxTR0gtVDU4OXxTR0gtVDYwOXxTR0gtVDYxOXxTR0gtVDYyOXxTR0gtVDYzOXxTR0gtVDY1OXxTR0gtVDY2OXxTR0gtVDY3OXxTR0gtVDcwOXxTR0gtVDcxOXxTR0gtVDcyOXxTR0gtVDczOXxTR0gtVDc0NnxTR0gtVDc0OXxTR0gtVDc1OXxTR0gtVDc2OXxTR0gtVDgwOXxTR0gtVDgxOXxTR0gtVDgzOXxTR0gtVDkxOXxTR0gtVDkyOXxTR0gtVDkzOXxTR0gtVDk1OXxTR0gtVDk4OXxTR0gtVTEwMHxTR0gtVTIwMHxTR0gtVTgwMHxTR0gtVjIwNXxTR0gtVjIwNnxTR0gtWDEwMHxTR0gtWDEwNXxTR0gtWDEyMHxTR0gtWDE0MHxTR0gtWDQyNnxTR0gtWDQyN3xTR0gtWDQ3NXxTR0gtWDQ5NXxTR0gtWDQ5N3xTR0gtWDUwN3xTR0gtWDYwMHxTR0gtWDYxMHxTR0gtWDYyMHxTR0gtWDYzMHxTR0gtWDcwMHxTR0gtWDgyMHxTR0gtWDg5MHxTR0gtWjEzMHxTR0gtWjE1MHxTR0gtWjE3MHxTR0gtWlgxMHxTR0gtWlgyMHxTSFctTTExMHxTUEgtQTEyMHxTUEgtQTQwMHxTUEgtQTQyMHxTUEgtQTQ2MHxTUEgtQTUwMHxTUEgtQTU2MHxTUEgtQTYwMHxTUEgtQTYyMHxTUEgtQTY2MHxTUEgtQTcwMHxTUEgtQTc0MHxTUEgtQTc2MHxTUEgtQTc5MHxTUEgtQTgwMHxTUEgtQTgyMHxTUEgtQTg0MHxTUEgtQTg4MHxTUEgtQTkwMHxTUEgtQTk0MHxTUEgtQTk2MHxTUEgtRDYwMHxTUEgtRDcwMHxTUEgtRDcxMHxTUEgtRDcyMHxTUEgtSTMwMHxTUEgtSTMyNXxTUEgtSTMzMHxTUEgtSTM1MHxTUEgtSTUwMHxTUEgtSTYwMHxTUEgtSTcwMHxTUEgtTDcwMHxTUEgtTTEwMHxTUEgtTTIyMHxTUEgtTTI0MHxTUEgtTTMwMHxTUEgtTTMwNXxTUEgtTTMyMHxTUEgtTTMzMHxTUEgtTTM1MHxTUEgtTTM2MHxTUEgtTTM3MHxTUEgtTTM4MHxTUEgtTTUxMHxTUEgtTTU0MHxTUEgtTTU1MHxTUEgtTTU2MHxTUEgtTTU3MHxTUEgtTTU4MHxTUEgtTTYxMHxTUEgtTTYyMHxTUEgtTTYzMHxTUEgtTTgwMHxTUEgtTTgxMHxTUEgtTTg1MHxTUEgtTTkwMHxTUEgtTTkxMHxTUEgtTTkyMHxTUEgtTTkzMHxTUEgtTjEwMHxTUEgtTjIwMHxTUEgtTjI0MHxTUEgtTjMwMHxTUEgtTjQwMHxTUEgtWjQwMHxTV0MtRTEwMHxTQ0gtaTkwOXxHVC1ONzEwMHxHVC1ONzEwNXxTQ0gtSTUzNXxTTS1OOTAwQXxTR0gtSTMxN3xTR0gtVDk5OUx8R1QtUzUzNjBCfEdULUk4MjYyfEdULVM2ODAyfEdULVM2MzEyfEdULVM2MzEwfEdULVM1MzEyfEdULVM1MzEwfEdULUk5MTA1fEdULUk4NTEwfEdULVM2NzkwTnxTTS1HNzEwNXxTTS1OOTAwNXxHVC1TNTMwMXxHVC1JOTI5NXxHVC1JOTE5NXxTTS1DMTAxfEdULVM3MzkyfEdULVM3NTYwfEdULUI3NjEwfEdULUk1NTEwfEdULVM3NTgyfEdULVM3NTMwRXxHVC1JODc1MHxTTS1HOTAwNlZ8U00tRzkwMDhWfFNNLUc5MDA5RHxTTS1HOTAwQXxTTS1HOTAwRHxTTS1HOTAwRnxTTS1HOTAwSHxTTS1HOTAwSXxTTS1HOTAwSnxTTS1HOTAwS3xTTS1HOTAwTHxTTS1HOTAwTXxTTS1HOTAwUHxTTS1HOTAwUjR8U00tRzkwMFN8U00tRzkwMFR8U00tRzkwMFZ8U00tRzkwMFc4fFNIVi1FMTYwS3xTQ0gtUDcwOXxTQ0gtUDcyOXxTTS1UMjU1OHxHVC1JOTIwNXxTTS1HOTM1MHxTTS1KMTIwRnxTTS1HOTIwRnxTTS1HOTIwVnxTTS1HOTMwRnxTTS1OOTEwQ3xTTS1BMzEwRnxHVC1JOTE5MHxTTS1KNTAwRk58U00tRzkwM0Z8U00tSjMzMEZcIixcbiAgICAgICAgXCJMR1wiOiBcIlxcXFxiTEdcXFxcYjt8TEdbLSBdPyhDODAwfEM5MDB8RTQwMHxFNjEwfEU5MDB8RS05MDB8RjE2MHxGMTgwS3xGMTgwTHxGMTgwU3w3MzB8ODU1fEwxNjB8TFM3NDB8TFM4NDB8TFM5NzB8TFU2MjAwfE1TNjkwfE1TNjk1fE1TNzcwfE1TODQwfE1TODcwfE1TOTEwfFA1MDB8UDcwMHxQNzA1fFZNNjk2fEFTNjgwfEFTNjk1fEFYODQwfEM3Mjl8RTk3MHxHUzUwNXwyNzJ8QzM5NXxFNzM5Qkt8RTk2MHxMNTVDfEw3NUN8TFM2OTZ8TFM4NjB8UDc2OUJLfFAzNTB8UDUwMHxQNTA5fFA4NzB8VU4yNzJ8VVM3MzB8VlM4NDB8VlM5NTB8TE4yNzJ8TE41MTB8TFM2NzB8TFM4NTV8TFc2OTB8TU4yNzB8TU41MTB8UDUwOXxQNzY5fFA5MzB8VU4yMDB8VU4yNzB8VU41MTB8VU42MTB8VVM2NzB8VVM3NDB8VVM3NjB8VVgyNjV8VVg4NDB8Vk4yNzF8Vk41MzB8VlM2NjB8VlM3MDB8VlM3NDB8VlM3NTB8VlM5MTB8VlM5MjB8VlM5MzB8Vlg5MjAwfFZYMTEwMDB8QVg4NDBBfExXNzcwfFA1MDZ8UDkyNXxQOTk5fEU2MTJ8RDk1NXxEODAyfE1TMzIzfE0yNTcpfExNLUc3MTBcIixcbiAgICAgICAgXCJTb255XCI6IFwiU29ueVNUfFNvbnlMVHxTb255RXJpY3Nzb258U29ueUVyaWNzc29uTFQxNWl2fExUMThpfEUxMGl8TFQyOGh8TFQyNnd8U29ueUVyaWNzc29uTVQyN2l8QzUzMDN8QzY5MDJ8QzY5MDN8QzY5MDZ8QzY5NDN8RDI1MzNcIixcbiAgICAgICAgXCJBc3VzXCI6IFwiQXN1cy4qR2FsYXh5fFBhZEZvbmUuKk1vYmlsZVwiLFxuICAgICAgICBcIk5va2lhTHVtaWFcIjogXCJMdW1pYSBbMC05XXszLDR9XCIsXG4gICAgICAgIFwiTWljcm9tYXhcIjogXCJNaWNyb21heC4qXFxcXGIoQTIxMHxBOTJ8QTg4fEE3MnxBMTExfEExMTBRfEExMTV8QTExNnxBMTEwfEE5MFN8QTI2fEE1MXxBMzV8QTU0fEEyNXxBMjd8QTg5fEE2OHxBNjV8QTU3fEE5MClcXFxcYlwiLFxuICAgICAgICBcIlBhbG1cIjogXCJQYWxtU291cmNlfFBhbG1cIixcbiAgICAgICAgXCJWZXJ0dVwiOiBcIlZlcnR1fFZlcnR1LipMdGR8VmVydHUuKkFzY2VudHxWZXJ0dS4qQXl4dGF8VmVydHUuKkNvbnN0ZWxsYXRpb24oRnxRdWVzdCk/fFZlcnR1LipNb25pa2F8VmVydHUuKlNpZ25hdHVyZVwiLFxuICAgICAgICBcIlBhbnRlY2hcIjogXCJQQU5URUNIfElNLUE4NTBTfElNLUE4NDBTfElNLUE4MzBMfElNLUE4MzBLfElNLUE4MzBTfElNLUE4MjBMfElNLUE4MTBLfElNLUE4MTBTfElNLUE4MDBTfElNLVQxMDBLfElNLUE3MjVMfElNLUE3ODBMfElNLUE3NzVDfElNLUE3NzBLfElNLUE3NjBTfElNLUE3NTBLfElNLUE3NDBTfElNLUE3MzBTfElNLUE3MjBMfElNLUE3MTBLfElNLUE2OTBMfElNLUE2OTBTfElNLUE2NTBTfElNLUE2MzBLfElNLUE2MDBTfFZFR0EgUFRMMjF8UFQwMDN8UDgwMTB8QURSOTEwTHxQNjAzMHxQNjAyMHxQOTA3MHxQNDEwMHxQOTA2MHxQNTAwMHxDRE04OTkyfFRYVDgwNDV8QURSODk5NXxJUzExUFR8UDIwMzB8UDYwMTB8UDgwMDB8UFQwMDJ8SVMwNnxDRE04OTk5fFA5MDUwfFBUMDAxfFRYVDgwNDB8UDIwMjB8UDkwMjB8UDIwMDB8UDcwNDB8UDcwMDB8Qzc5MFwiLFxuICAgICAgICBcIkZseVwiOiBcIklRMjMwfElRNDQ0fElRNDUwfElRNDQwfElRNDQyfElRNDQxfElRMjQ1fElRMjU2fElRMjM2fElRMjU1fElRMjM1fElRMjQ1fElRMjc1fElRMjQwfElRMjg1fElRMjgwfElRMjcwfElRMjYwfElRMjUwXCIsXG4gICAgICAgIFwiV2lrb1wiOiBcIktJVEUgNEd8SElHSFdBWXxHRVRBV0FZfFNUQUlSV0FZfERBUktTSURFfERBUktGVUxMfERBUktOSUdIVHxEQVJLTU9PTnxTTElERXxXQVggNEd8UkFJTkJPV3xCTE9PTXxTVU5TRVR8R09BKD8hbm5hKXxMRU5OWXxCQVJSWXxJR0dZfE9aWll8Q0lOSyBGSVZFfENJTksgUEVBWHxDSU5LIFBFQVggMnxDSU5LIFNMSU18Q0lOSyBTTElNIDJ8Q0lOSyArfENJTksgS0lOR3xDSU5LIFBFQVh8Q0lOSyBTTElNfFNVQkxJTVwiLFxuICAgICAgICBcImlNb2JpbGVcIjogXCJpLW1vYmlsZSAoSVF8aS1TVFlMRXxpZGVhfFpBQXxIaXR6KVwiLFxuICAgICAgICBcIlNpbVZhbGxleVwiOiBcIlxcXFxiKFNQLTgwfFhULTkzMHxTWC0zNDB8WFQtOTMwfFNYLTMxMHxTUC0zNjB8U1A2MHxTUFQtODAwfFNQLTEyMHxTUFQtODAwfFNQLTE0MHxTUFgtNXxTUFgtOHxTUC0xMDB8U1BYLTh8U1BYLTEyKVxcXFxiXCIsXG4gICAgICAgIFwiV29sZmdhbmdcIjogXCJBVC1CMjREfEFULUFTNTBIRHxBVC1BUzQwV3xBVC1BUzU1SER8QVQtQVM0NXEyfEFULUIyNkR8QVQtQVM1MFFcIixcbiAgICAgICAgXCJBbGNhdGVsXCI6IFwiQWxjYXRlbFwiLFxuICAgICAgICBcIk5pbnRlbmRvXCI6IFwiTmludGVuZG8gKDNEU3xTd2l0Y2gpXCIsXG4gICAgICAgIFwiQW1vaVwiOiBcIkFtb2lcIixcbiAgICAgICAgXCJJTlFcIjogXCJJTlFcIixcbiAgICAgICAgXCJPbmVQbHVzXCI6IFwiT05FUExVU1wiLFxuICAgICAgICBcIkdlbmVyaWNQaG9uZVwiOiBcIlRhcGF0YWxrfFBEQTt8U0FHRU18XFxcXGJtbXBcXFxcYnxwb2NrZXR8XFxcXGJwc3BcXFxcYnxzeW1iaWFufFNtYXJ0cGhvbmV8c21hcnRmb258dHJlb3x1cC5icm93c2VyfHVwLmxpbmt8dm9kYWZvbmV8XFxcXGJ3YXBcXFxcYnxub2tpYXxTZXJpZXM0MHxTZXJpZXM2MHxTNjB8U29ueUVyaWNzc29ufE45MDB8TUFVSS4qV0FQLipCcm93c2VyXCJcbiAgICB9LFxuICAgIFwidGFibGV0c1wiOiB7XG4gICAgICAgIFwiaVBhZFwiOiBcImlQYWR8aVBhZC4qTW9iaWxlXCIsXG4gICAgICAgIFwiTmV4dXNUYWJsZXRcIjogXCJBbmRyb2lkLipOZXh1c1tcXFxcc10rKDd8OXwxMClcIixcbiAgICAgICAgXCJHb29nbGVUYWJsZXRcIjogXCJBbmRyb2lkLipQaXhlbCBDXCIsXG4gICAgICAgIFwiU2Ftc3VuZ1RhYmxldFwiOiBcIlNBTVNVTkcuKlRhYmxldHxHYWxheHkuKlRhYnxTQy0wMUN8R1QtUDEwMDB8R1QtUDEwMDN8R1QtUDEwMTB8R1QtUDMxMDV8R1QtUDYyMTB8R1QtUDY4MDB8R1QtUDY4MTB8R1QtUDcxMDB8R1QtUDczMDB8R1QtUDczMTB8R1QtUDc1MDB8R1QtUDc1MTB8U0NILUk4MDB8U0NILUk4MTV8U0NILUk5MDV8U0dILUk5NTd8U0dILUk5ODd8U0dILVQ4NDl8U0dILVQ4NTl8U0dILVQ4Njl8U1BILVAxMDB8R1QtUDMxMDB8R1QtUDMxMDh8R1QtUDMxMTB8R1QtUDUxMDB8R1QtUDUxMTB8R1QtUDYyMDB8R1QtUDczMjB8R1QtUDc1MTF8R1QtTjgwMDB8R1QtUDg1MTB8U0dILUk0OTd8U1BILVA1MDB8U0dILVQ3Nzl8U0NILUk3MDV8U0NILUk5MTV8R1QtTjgwMTN8R1QtUDMxMTN8R1QtUDUxMTN8R1QtUDgxMTB8R1QtTjgwMTB8R1QtTjgwMDV8R1QtTjgwMjB8R1QtUDEwMTN8R1QtUDYyMDF8R1QtUDc1MDF8R1QtTjUxMDB8R1QtTjUxMDV8R1QtTjUxMTB8U0hWLUUxNDBLfFNIVi1FMTQwTHxTSFYtRTE0MFN8U0hWLUUxNTBTfFNIVi1FMjMwS3xTSFYtRTIzMEx8U0hWLUUyMzBTfFNIVy1NMTgwS3xTSFctTTE4MEx8U0hXLU0xODBTfFNIVy1NMTgwV3xTSFctTTMwMFd8U0hXLU0zMDVXfFNIVy1NMzgwS3xTSFctTTM4MFN8U0hXLU0zODBXfFNIVy1NNDMwV3xTSFctTTQ4MEt8U0hXLU00ODBTfFNIVy1NNDgwV3xTSFctTTQ4NVd8U0hXLU00ODZXfFNIVy1NNTAwV3xHVC1JOTIyOHxTQ0gtUDczOXxTQ0gtSTkyNXxHVC1JOTIwMHxHVC1QNTIwMHxHVC1QNTIxMHxHVC1QNTIxMFh8U00tVDMxMXxTTS1UMzEwfFNNLVQzMTBYfFNNLVQyMTB8U00tVDIxMFJ8U00tVDIxMXxTTS1QNjAwfFNNLVA2MDF8U00tUDYwNXxTTS1QOTAwfFNNLVA5MDF8U00tVDIxN3xTTS1UMjE3QXxTTS1UMjE3U3xTTS1QNjAwMHxTTS1UMzEwMHxTR0gtSTQ2N3xYRTUwMHxTTS1UMTEwfEdULVA1MjIwfEdULUk5MjAwWHxHVC1ONTExMFh8R1QtTjUxMjB8U00tUDkwNXxTTS1UMTExfFNNLVQyMTA1fFNNLVQzMTV8U00tVDMyMHxTTS1UMzIwWHxTTS1UMzIxfFNNLVQ1MjB8U00tVDUyNXxTTS1UNTMwTlV8U00tVDIzME5VfFNNLVQzMzBOVXxTTS1UOTAwfFhFNTAwVDFDfFNNLVA2MDVWfFNNLVA5MDVWfFNNLVQzMzdWfFNNLVQ1MzdWfFNNLVQ3MDdWfFNNLVQ4MDdWfFNNLVA2MDBYfFNNLVA5MDBYfFNNLVQyMTBYfFNNLVQyMzB8U00tVDIzMFh8U00tVDMyNXxHVC1QNzUwM3xTTS1UNTMxfFNNLVQzMzB8U00tVDUzMHxTTS1UNzA1fFNNLVQ3MDVDfFNNLVQ1MzV8U00tVDMzMXxTTS1UODAwfFNNLVQ3MDB8U00tVDUzN3xTTS1UODA3fFNNLVA5MDdBfFNNLVQzMzdBfFNNLVQ1MzdBfFNNLVQ3MDdBfFNNLVQ4MDdBfFNNLVQyMzd8U00tVDgwN1B8U00tUDYwN1R8U00tVDIxN1R8U00tVDMzN1R8U00tVDgwN1R8U00tVDExNk5RfFNNLVQxMTZCVXxTTS1QNTUwfFNNLVQzNTB8U00tVDU1MHxTTS1UOTAwMHxTTS1QOTAwMHxTTS1UNzA1WXxTTS1UODA1fEdULVAzMTEzfFNNLVQ3MTB8U00tVDgxMHxTTS1UODE1fFNNLVQzNjB8U00tVDUzM3xTTS1UMTEzfFNNLVQzMzV8U00tVDcxNXxTTS1UNTYwfFNNLVQ2NzB8U00tVDY3N3xTTS1UMzc3fFNNLVQ1Njd8U00tVDM1N1R8U00tVDU1NXxTTS1UNTYxfFNNLVQ3MTN8U00tVDcxOXxTTS1UODEzfFNNLVQ4MTl8U00tVDU4MHxTTS1UMzU1WT98U00tVDI4MHxTTS1UODE3QXxTTS1UODIwfFNNLVc3MDB8U00tUDU4MHxTTS1UNTg3fFNNLVAzNTB8U00tUDU1NU18U00tUDM1NU18U00tVDExM05VfFNNLVQ4MTVZfFNNLVQ1ODV8U00tVDI4NXxTTS1UODI1fFNNLVc3MDh8U00tVDgzNXxTTS1UODMwfFNNLVQ4MzdWfFNNLVQ3MjB8U00tVDUxMHxTTS1UMzg3VlwiLFxuICAgICAgICBcIktpbmRsZVwiOiBcIktpbmRsZXxTaWxrLipBY2NlbGVyYXRlZHxBbmRyb2lkLipcXFxcYihLRk9UfEtGVFR8S0ZKV0l8S0ZKV0F8S0ZPVEV8S0ZTT1dJfEtGVEhXSXxLRlRIV0F8S0ZBUFdJfEtGQVBXQXxXRkpXQUV8S0ZTQVdBfEtGU0FXSXxLRkFTV0l8S0ZBUldJfEtGRk9XSXxLRkdJV0l8S0ZNRVdJKVxcXFxifEFuZHJvaWQuKlNpbGtcXC9bMC05Ll0rIGxpa2UgQ2hyb21lXFwvWzAtOS5dKyAoPyFNb2JpbGUpXCIsXG4gICAgICAgIFwiU3VyZmFjZVRhYmxldFwiOiBcIldpbmRvd3MgTlQgWzAtOS5dKzsgQVJNOy4qKFRhYmxldHxBUk1CSlMpXCIsXG4gICAgICAgIFwiSFBUYWJsZXRcIjogXCJIUCBTbGF0ZSAoN3w4fDEwKXxIUCBFbGl0ZVBhZCA5MDB8aHAtdGFibGV0fEVsaXRlQm9vay4qVG91Y2h8SFAgOHxTbGF0ZSAyMXxIUCBTbGF0ZUJvb2sgMTBcIixcbiAgICAgICAgXCJBc3VzVGFibGV0XCI6IFwiXi4qUGFkRm9uZSgoPyFNb2JpbGUpLikqJHxUcmFuc2Zvcm1lcnxURjEwMXxURjEwMUd8VEYzMDBUfFRGMzAwVEd8VEYzMDBUTHxURjcwMFR8VEY3MDBLTHxURjcwMVR8VEY4MTBDfE1FMTcxfE1FMzAxVHxNRTMwMkN8TUUzNzFNR3xNRTM3MFR8TUUzNzJNR3xNRTE3MlZ8TUUxNzNYfE1FNDAwQ3xTbGlkZXIgU0wxMDF8XFxcXGJLMDBGXFxcXGJ8XFxcXGJLMDBDXFxcXGJ8XFxcXGJLMDBFXFxcXGJ8XFxcXGJLMDBMXFxcXGJ8VFgyMDFMQXxNRTE3NkN8TUUxMDJBfFxcXFxiTTgwVEFcXFxcYnxNRTM3MkNMfE1FNTYwQ0d8TUUzNzJDR3xNRTMwMktMfCBLMDEwIHwgSzAxMSB8IEswMTcgfCBLMDFFIHxNRTU3MkN8TUUxMDNLfE1FMTcwQ3xNRTE3MUN8XFxcXGJNRTcwQ1xcXFxifE1FNTgxQ3xNRTU4MUNMfE1FODUxMEN8TUUxODFDfFAwMVl8UE8xTUF8UDAxWnxcXFxcYlAwMjdcXFxcYnxcXFxcYlAwMjRcXFxcYnxcXFxcYlAwMENcXFxcYlwiLFxuICAgICAgICBcIkJsYWNrQmVycnlUYWJsZXRcIjogXCJQbGF5Qm9va3xSSU0gVGFibGV0XCIsXG4gICAgICAgIFwiSFRDdGFibGV0XCI6IFwiSFRDX0ZseWVyX1A1MTJ8SFRDIEZseWVyfEhUQyBKZXRzdHJlYW18SFRDLVA3MTVhfEhUQyBFVk8gVmlldyA0R3xQRzQxMjAwfFBHMDk0MTBcIixcbiAgICAgICAgXCJNb3Rvcm9sYVRhYmxldFwiOiBcInhvb218c2hvbGVzdHxNWjYxNXxNWjYwNXxNWjUwNXxNWjYwMXxNWjYwMnxNWjYwM3xNWjYwNHxNWjYwNnxNWjYwN3xNWjYwOHxNWjYwOXxNWjYxNXxNWjYxNnxNWjYxN1wiLFxuICAgICAgICBcIk5vb2tUYWJsZXRcIjogXCJBbmRyb2lkLipOb29rfE5vb2tDb2xvcnxub29rIGJyb3dzZXJ8Qk5SVjIwMHxCTlJWMjAwQXxCTlRWMjUwfEJOVFYyNTBBfEJOVFY0MDB8Qk5UVjYwMHxMb2dpY1BEIFpvb20yXCIsXG4gICAgICAgIFwiQWNlclRhYmxldFwiOiBcIkFuZHJvaWQuKjsgXFxcXGIoQTEwMHxBMTAxfEExMTB8QTIwMHxBMjEwfEEyMTF8QTUwMHxBNTAxfEE1MTB8QTUxMXxBNzAwfEE3MDF8VzUwMHxXNTAwUHxXNTAxfFc1MDFQfFc1MTB8VzUxMXxXNzAwfEcxMDB8RzEwMFd8QjEtQTcxfEIxLTcxMHxCMS03MTF8QTEtODEwfEExLTgxMXxBMS04MzApXFxcXGJ8VzMtODEwfFxcXFxiQTMtQTEwXFxcXGJ8XFxcXGJBMy1BMTFcXFxcYnxcXFxcYkEzLUEyMFxcXFxifFxcXFxiQTMtQTMwXCIsXG4gICAgICAgIFwiVG9zaGliYVRhYmxldFwiOiBcIkFuZHJvaWQuKihBVDEwMHxBVDEwNXxBVDIwMHxBVDIwNXxBVDI3MHxBVDI3NXxBVDMwMHxBVDMwNXxBVDFTNXxBVDUwMHxBVDU3MHxBVDcwMHxBVDgzMCl8VE9TSElCQS4qRk9MSU9cIixcbiAgICAgICAgXCJMR1RhYmxldFwiOiBcIlxcXFxiTC0wNkN8TEctVjkwOXxMRy1WOTAwfExHLVY3MDB8TEctVjUxMHxMRy1WNTAwfExHLVY0MTB8TEctVjQwMHxMRy1WSzgxMFxcXFxiXCIsXG4gICAgICAgIFwiRnVqaXRzdVRhYmxldFwiOiBcIkFuZHJvaWQuKlxcXFxiKEYtMDFEfEYtMDJGfEYtMDVFfEYtMTBEfE01MzJ8UTU3MilcXFxcYlwiLFxuICAgICAgICBcIlByZXN0aWdpb1RhYmxldFwiOiBcIlBNUDMxNzBCfFBNUDMyNzBCfFBNUDM0NzBCfFBNUDcxNzBCfFBNUDMzNzBCfFBNUDM1NzBDfFBNUDU4NzBDfFBNUDM2NzBCfFBNUDU1NzBDfFBNUDU3NzBEfFBNUDM5NzBCfFBNUDM4NzBDfFBNUDU1ODBDfFBNUDU4ODBEfFBNUDU3ODBEfFBNUDU1ODhDfFBNUDcyODBDfFBNUDcyODBDM0d8UE1QNzI4MHxQTVA3ODgwRHxQTVA1NTk3RHxQTVA1NTk3fFBNUDcxMDBEfFBFUjM0NjR8UEVSMzI3NHxQRVIzNTc0fFBFUjM4ODR8UEVSNTI3NHxQRVI1NDc0fFBNUDUwOTdDUFJPfFBNUDUwOTd8UE1QNzM4MER8UE1QNTI5N0N8UE1QNTI5N0NfUVVBRHxQTVA4MTJFfFBNUDgxMkUzR3xQTVA4MTJGfFBNUDgxMEV8UE1QODgwVER8UE1UMzAxN3xQTVQzMDM3fFBNVDMwNDd8UE1UMzA1N3xQTVQ3MDA4fFBNVDU4ODd8UE1UNTAwMXxQTVQ1MDAyXCIsXG4gICAgICAgIFwiTGVub3ZvVGFibGV0XCI6IFwiTGVub3ZvIFRBQnxJZGVhKFRhYnxQYWQpKCBBMXxBMTB8IEsxfCl8VGhpbmtQYWQoWyBdKyk/VGFibGV0fFlUMy04NTBNfFlUMy1YOTBMfFlUMy1YOTBGfFlUMy1YOTBYfExlbm92by4qKFMyMTA5fFMyMTEwfFM1MDAwfFM2MDAwfEszMDExfEEzMDAwfEEzNTAwfEExMDAwfEEyMTA3fEEyMTA5fEExMTA3fEE1NTAwfEE3NjAwfEI2MDAwfEI4MDAwfEI4MDgwKSgtfCkoRkx8RnxIVnxIfCl8VEItWDEwM0Z8VEItWDMwNFh8VEItWDMwNEZ8VEItWDMwNEx8VEItWDUwNUZ8VEItWDUwNUx8VEItWDUwNVh8VEItWDYwNUZ8VEItWDYwNUx8VEItODcwM0Z8VEItODcwM1h8VEItODcwM058VEItODcwNE58VEItODcwNEZ8VEItODcwNFh8VEItODcwNFZ8VEItNzMwNEZ8VEItNzMwNEl8VEItNzMwNFh8VGFiMkE3LTEwRnxUYWIyQTctMjBGfFRCMi1YMzBMfFlUMy1YNTBMfFlUMy1YNTBGfFlUMy1YNTBNfFlULVg3MDVGfFlULVg3MDNGfFlULVg3MDNMfFlULVg3MDVMfFlULVg3MDVYfFRCMi1YMzBGfFRCMi1YMzBMfFRCMi1YMzBNfEEyMTA3QS1GfEEyMTA3QS1IfFRCMy03MzBGfFRCMy03MzBNfFRCMy03MzBYfFRCLTc1MDRGfFRCLTc1MDRYXCIsXG4gICAgICAgIFwiRGVsbFRhYmxldFwiOiBcIlZlbnVlIDExfFZlbnVlIDh8VmVudWUgN3xEZWxsIFN0cmVhayAxMHxEZWxsIFN0cmVhayA3XCIsXG4gICAgICAgIFwiWWFydmlrVGFibGV0XCI6IFwiQW5kcm9pZC4qXFxcXGIoVEFCMjEwfFRBQjIxMXxUQUIyMjR8VEFCMjUwfFRBQjI2MHxUQUIyNjR8VEFCMzEwfFRBQjM2MHxUQUIzNjR8VEFCNDEwfFRBQjQxMXxUQUI0MjB8VEFCNDI0fFRBQjQ1MHxUQUI0NjB8VEFCNDYxfFRBQjQ2NHxUQUI0NjV8VEFCNDY3fFRBQjQ2OHxUQUIwNy0xMDB8VEFCMDctMTAxfFRBQjA3LTE1MHxUQUIwNy0xNTF8VEFCMDctMTUyfFRBQjA3LTIwMHxUQUIwNy0yMDEtM0d8VEFCMDctMjEwfFRBQjA3LTIxMXxUQUIwNy0yMTJ8VEFCMDctMjE0fFRBQjA3LTIyMHxUQUIwNy00MDB8VEFCMDctNDg1fFRBQjA4LTE1MHxUQUIwOC0yMDB8VEFCMDgtMjAxLTNHfFRBQjA4LTIwMS0zMHxUQUIwOS0xMDB8VEFCMDktMjExfFRBQjA5LTQxMHxUQUIxMC0xNTB8VEFCMTAtMjAxfFRBQjEwLTIxMXxUQUIxMC00MDB8VEFCMTAtNDEwfFRBQjEzLTIwMXxUQUIyNzRFVUt8VEFCMjc1RVVLfFRBQjM3NEVVS3xUQUI0NjJFVUt8VEFCNDc0RVVLfFRBQjktMjAwKVxcXFxiXCIsXG4gICAgICAgIFwiTWVkaW9uVGFibGV0XCI6IFwiQW5kcm9pZC4qXFxcXGJPWU9cXFxcYnxMSUZFLiooUDkyMTJ8UDk1MTR8UDk1MTZ8Uzk1MTIpfExJRkVUQUJcIixcbiAgICAgICAgXCJBcm5vdmFUYWJsZXRcIjogXCI5N0c0fEFOMTBHMnxBTjdiRzN8QU43ZkczfEFOOEczfEFOOGNHM3xBTjdHM3xBTjlHM3xBTjdkRzN8QU43ZEczU1R8QU43ZEczQ2hpbGRQYWR8QU4xMGJHM3xBTjEwYkczRFR8QU45RzJcIixcbiAgICAgICAgXCJJbnRlbnNvVGFibGV0XCI6IFwiSU5NODAwMktQfElOTTEwMTBGUHxJTk04MDVORHxJbnRlbnNvIFRhYnxUQUIxMDA0XCIsXG4gICAgICAgIFwiSVJVVGFibGV0XCI6IFwiTTcwMnByb1wiLFxuICAgICAgICBcIk1lZ2Fmb25UYWJsZXRcIjogXCJNZWdhRm9uIFY5fFxcXFxiWlRFIFY5XFxcXGJ8QW5kcm9pZC4qXFxcXGJNVDdBXFxcXGJcIixcbiAgICAgICAgXCJFYm9kYVRhYmxldFwiOiBcIkUtQm9kYSAoU3VwcmVtZXxJbXByZXNzcGVlZHxJenp5Y29tbXxFc3NlbnRpYWwpXCIsXG4gICAgICAgIFwiQWxsVmlld1RhYmxldFwiOiBcIkFsbHZpZXcuKihWaXZhfEFsbGRyb3xDaXR5fFNwZWVkfEFsbCBUVnxGcmVuenl8UXVhc2FyfFNoaW5lfFRYMXxBWDF8QVgyKVwiLFxuICAgICAgICBcIkFyY2hvc1RhYmxldFwiOiBcIlxcXFxiKDEwMUc5fDgwRzl8QTEwMUlUKVxcXFxifFFpbGl2ZSA5N1J8QXJjaG9zNXxcXFxcYkFSQ0hPUyAoNzB8Nzl8ODB8OTB8OTd8MTAxfEZBTUlMWVBBRHwpKGJ8Y3wpKEcxMHwgQ29iYWx0fCBUSVRBTklVTShIRHwpfCBYZW5vbnwgTmVvbnxYU0t8IDJ8IFhTIDJ8IFBMQVRJTlVNfCBDQVJCT058R0FNRVBBRClcXFxcYlwiLFxuICAgICAgICBcIkFpbm9sVGFibGV0XCI6IFwiTk9WTzd8Tk9WTzh8Tk9WTzEwfE5vdm83QXVyb3JhfE5vdm83QmFzaWN8Tk9WTzdQQUxBRElOfG5vdm85LVNwYXJrXCIsXG4gICAgICAgIFwiTm9raWFMdW1pYVRhYmxldFwiOiBcIkx1bWlhIDI1MjBcIixcbiAgICAgICAgXCJTb255VGFibGV0XCI6IFwiU29ueS4qVGFibGV0fFhwZXJpYSBUYWJsZXR8U29ueSBUYWJsZXQgU3xTTy0wM0V8U0dQVDEyfFNHUFQxM3xTR1BUMTE0fFNHUFQxMjF8U0dQVDEyMnxTR1BUMTIzfFNHUFQxMTF8U0dQVDExMnxTR1BUMTEzfFNHUFQxMzF8U0dQVDEzMnxTR1BUMTMzfFNHUFQyMTF8U0dQVDIxMnxTR1BUMjEzfFNHUDMxMXxTR1AzMTJ8U0dQMzIxfEVCUkQxMTAxfEVCUkQxMTAyfEVCUkQxMjAxfFNHUDM1MXxTR1AzNDF8U0dQNTExfFNHUDUxMnxTR1A1MjF8U0dQNTQxfFNHUDU1MXxTR1A2MjF8U0dQNjQxfFNHUDYxMnxTT1QzMXxTR1A3NzF8U0dQNjExfFNHUDYxMnxTR1A3MTJcIixcbiAgICAgICAgXCJQaGlsaXBzVGFibGV0XCI6IFwiXFxcXGIoUEkyMDEwfFBJMzAwMHxQSTMxMDB8UEkzMTA1fFBJMzExMHxQSTMyMDV8UEkzMjEwfFBJMzkwMHxQSTQwMTB8UEk3MDAwfFBJNzEwMClcXFxcYlwiLFxuICAgICAgICBcIkN1YmVUYWJsZXRcIjogXCJBbmRyb2lkLiooSzhHVHxVOUdUfFUxMEdUfFUxNkdUfFUxN0dUfFUxOEdUfFUxOUdUfFUyMEdUfFUyM0dUfFUzMEdUKXxDVUJFIFU4R1RcIixcbiAgICAgICAgXCJDb2J5VGFibGV0XCI6IFwiTUlEMTA0MnxNSUQxMDQ1fE1JRDExMjV8TUlEMTEyNnxNSUQ3MDEyfE1JRDcwMTR8TUlENzAxNXxNSUQ3MDM0fE1JRDcwMzV8TUlENzAzNnxNSUQ3MDQyfE1JRDcwNDh8TUlENzEyN3xNSUQ4MDQyfE1JRDgwNDh8TUlEODEyN3xNSUQ5MDQyfE1JRDk3NDB8TUlEOTc0MnxNSUQ3MDIyfE1JRDcwMTBcIixcbiAgICAgICAgXCJNSURUYWJsZXRcIjogXCJNOTcwMXxNOTAwMHxNOTEwMHxNODA2fE0xMDUyfE04MDZ8VDcwM3xNSUQ3MDF8TUlENzEzfE1JRDcxMHxNSUQ3Mjd8TUlENzYwfE1JRDgzMHxNSUQ3Mjh8TUlEOTMzfE1JRDEyNXxNSUQ4MTB8TUlENzMyfE1JRDEyMHxNSUQ5MzB8TUlEODAwfE1JRDczMXxNSUQ5MDB8TUlEMTAwfE1JRDgyMHxNSUQ3MzV8TUlEOTgwfE1JRDEzMHxNSUQ4MzN8TUlENzM3fE1JRDk2MHxNSUQxMzV8TUlEODYwfE1JRDczNnxNSUQxNDB8TUlEOTMwfE1JRDgzNXxNSUQ3MzN8TUlENFgxMFwiLFxuICAgICAgICBcIk1TSVRhYmxldFwiOiBcIk1TSSBcXFxcYihQcmltbyA3M0t8UHJpbW8gNzNMfFByaW1vIDgxTHxQcmltbyA3N3xQcmltbyA5M3xQcmltbyA3NXxQcmltbyA3NnxQcmltbyA3M3xQcmltbyA4MXxQcmltbyA5MXxQcmltbyA5MHxFbmpveSA3MXxFbmpveSA3fEVuam95IDEwKVxcXFxiXCIsXG4gICAgICAgIFwiU01pVFRhYmxldFwiOiBcIkFuZHJvaWQuKihcXFxcYk1JRFxcXFxifE1JRC01NjB8TVRWLVQxMjAwfE1UVi1QTkQ1MzF8TVRWLVAxMTAxfE1UVi1QTkQ1MzApXCIsXG4gICAgICAgIFwiUm9ja0NoaXBUYWJsZXRcIjogXCJBbmRyb2lkLiooUksyODE4fFJLMjgwOEF8UksyOTE4fFJLMzA2Nil8UksyNzM4fFJLMjgwOEFcIixcbiAgICAgICAgXCJGbHlUYWJsZXRcIjogXCJJUTMxMHxGbHkgVmlzaW9uXCIsXG4gICAgICAgIFwiYnFUYWJsZXRcIjogXCJBbmRyb2lkLiooYnEpPy4qXFxcXGIoRWxjYW5vfEN1cmllfEVkaXNvbnxNYXh3ZWxsfEtlcGxlcnxQYXNjYWx8VGVzbGF8SHlwYXRpYXxQbGF0b258TmV3dG9ufExpdmluZ3N0b25lfENlcnZhbnRlc3xBdmFudHxBcXVhcmlzIChbRXxNXTEwfE04KSlcXFxcYnxNYXh3ZWxsLipMaXRlfE1heHdlbGwuKlBsdXNcIixcbiAgICAgICAgXCJIdWF3ZWlUYWJsZXRcIjogXCJNZWRpYVBhZHxNZWRpYVBhZCA3IFlvdXRofElERU9TIFM3fFM3LTIwMWN8UzctMjAydXxTNy0xMDF8UzctMTAzfFM3LTEwNHxTNy0xMDV8UzctMTA2fFM3LTIwMXxTNy1TbGltfE0yLUEwMUx8QkFILUwwOXxCQUgtVzA5fEFHUy1MMDl8Q01SLUFMMTlcIixcbiAgICAgICAgXCJOZWNUYWJsZXRcIjogXCJcXFxcYk4tMDZEfFxcXFxiTi0wOERcIixcbiAgICAgICAgXCJQYW50ZWNoVGFibGV0XCI6IFwiUGFudGVjaC4qUDQxMDBcIixcbiAgICAgICAgXCJCcm9uY2hvVGFibGV0XCI6IFwiQnJvbmNoby4qKE43MDF8TjcwOHxOODAyfGE3MTApXCIsXG4gICAgICAgIFwiVmVyc3VzVGFibGV0XCI6IFwiVE9VQ0hQQUQuKls3ODkxMF18XFxcXGJUT1VDSFRBQlxcXFxiXCIsXG4gICAgICAgIFwiWnluY1RhYmxldFwiOiBcInoxMDAwfFo5OSAyR3x6OTMwfHo5OTB8ejkwOXxaOTE5fHo5MDBcIixcbiAgICAgICAgXCJQb3NpdGl2b1RhYmxldFwiOiBcIlRCMDdTVEF8VEIxMFNUQXxUQjA3RlRBfFRCMTBGVEFcIixcbiAgICAgICAgXCJOYWJpVGFibGV0XCI6IFwiQW5kcm9pZC4qXFxcXGJOYWJpXCIsXG4gICAgICAgIFwiS29ib1RhYmxldFwiOiBcIktvYm8gVG91Y2h8XFxcXGJLMDgwXFxcXGJ8XFxcXGJWb3hcXFxcYiBCdWlsZHxcXFxcYkFyY1xcXFxiIEJ1aWxkXCIsXG4gICAgICAgIFwiRGFuZXdUYWJsZXRcIjogXCJEU2xpZGUuKlxcXFxiKDcwMHw3MDFSfDcwMnw3MDNSfDcwNHw4MDJ8OTcwfDk3MXw5NzJ8OTczfDk3NHwxMDEwfDEwMTIpXFxcXGJcIixcbiAgICAgICAgXCJUZXhldFRhYmxldFwiOiBcIk5hdmlQYWR8VEItNzcyQXxUTS03MDQ1fFRNLTcwNTV8VE0tOTc1MHxUTS03MDE2fFRNLTcwMjR8VE0tNzAyNnxUTS03MDQxfFRNLTcwNDN8VE0tNzA0N3xUTS04MDQxfFRNLTk3NDF8VE0tOTc0N3xUTS05NzQ4fFRNLTk3NTF8VE0tNzAyMnxUTS03MDIxfFRNLTcwMjB8VE0tNzAxMXxUTS03MDEwfFRNLTcwMjN8VE0tNzAyNXxUTS03MDM3V3xUTS03MDM4V3xUTS03MDI3V3xUTS05NzIwfFRNLTk3MjV8VE0tOTczN1d8VE0tMTAyMHxUTS05NzM4V3xUTS05NzQwfFRNLTk3NDNXfFRCLTgwN0F8VEItNzcxQXxUQi03MjdBfFRCLTcyNUF8VEItNzE5QXxUQi04MjNBfFRCLTgwNUF8VEItNzIzQXxUQi03MTVBfFRCLTcwN0F8VEItNzA1QXxUQi03MDlBfFRCLTcxMUF8VEItODkwSER8VEItODgwSER8VEItNzkwSER8VEItNzgwSER8VEItNzcwSER8VEItNzIxSER8VEItNzEwSER8VEItNDM0SER8VEItODYwSER8VEItODQwSER8VEItNzYwSER8VEItNzUwSER8VEItNzQwSER8VEItNzMwSER8VEItNzIySER8VEItNzIwSER8VEItNzAwSER8VEItNTAwSER8VEItNDcwSER8VEItNDMxSER8VEItNDMwSER8VEItNTA2fFRCLTUwNHxUQi00NDZ8VEItNDM2fFRCLTQxNnxUQi0xNDZTRXxUQi0xMjZTRVwiLFxuICAgICAgICBcIlBsYXlzdGF0aW9uVGFibGV0XCI6IFwiUGxheXN0YXRpb24uKihQb3J0YWJsZXxWaXRhKVwiLFxuICAgICAgICBcIlRyZWtzdG9yVGFibGV0XCI6IFwiU1QxMDQxNi0xfFZUMTA0MTYtMXxTVDcwNDA4LTF8U1Q3MDJ4eC0xfFNUNzAyeHgtMnxTVDgwMjA4fFNUOTcyMTZ8U1Q3MDEwNC0yfFZUMTA0MTYtMnxTVDEwMjE2LTJBfFN1cmZUYWJcIixcbiAgICAgICAgXCJQeWxlQXVkaW9UYWJsZXRcIjogXCJcXFxcYihQVEJMMTBDRVV8UFRCTDEwQ3xQVEJMNzJCQ3xQVEJMNzJCQ0VVfFBUQkw3Q0VVfFBUQkw3Q3xQVEJMOTJCQ3xQVEJMOTJCQ0VVfFBUQkw5Q0VVfFBUQkw5Q1VLfFBUQkw5QylcXFxcYlwiLFxuICAgICAgICBcIkFkdmFuVGFibGV0XCI6IFwiQW5kcm9pZC4qIFxcXFxiKEUzQXxUM1h8VDVDfFQ1QnxUM0V8VDNDfFQzQnxUMUp8VDFGfFQyQXxUMUh8VDFpfEUxQ3xUMS1FfFQ1LUF8VDR8RTEtQnxUMkNpfFQxLUJ8VDEtRHxPMS1BfEUxLUF8VDEtQXxUM0F8VDRpKVxcXFxiIFwiLFxuICAgICAgICBcIkRhbnlUZWNoVGFibGV0XCI6IFwiR2VuaXVzIFRhYiBHM3xHZW5pdXMgVGFiIFMyfEdlbml1cyBUYWIgUTN8R2VuaXVzIFRhYiBHNHxHZW5pdXMgVGFiIFE0fEdlbml1cyBUYWIgRy1JSXxHZW5pdXMgVEFCIEdJSXxHZW5pdXMgVEFCIEdJSUl8R2VuaXVzIFRhYiBTMVwiLFxuICAgICAgICBcIkdhbGFwYWRUYWJsZXRcIjogXCJBbmRyb2lkLipcXFxcYkcxXFxcXGIoPyFcXFxcKSlcIixcbiAgICAgICAgXCJNaWNyb21heFRhYmxldFwiOiBcIkZ1bmJvb2t8TWljcm9tYXguKlxcXFxiKFAyNTB8UDU2MHxQMzYwfFAzNjJ8UDYwMHxQMzAwfFAzNTB8UDUwMHxQMjc1KVxcXFxiXCIsXG4gICAgICAgIFwiS2FyYm9ublRhYmxldFwiOiBcIkFuZHJvaWQuKlxcXFxiKEEzOXxBMzd8QTM0fFNUOHxTVDEwfFNUN3xTbWFydCBUYWIzfFNtYXJ0IFRhYjIpXFxcXGJcIixcbiAgICAgICAgXCJBbGxGaW5lVGFibGV0XCI6IFwiRmluZTcgR2VuaXVzfEZpbmU3IFNoaW5lfEZpbmU3IEFpcnxGaW5lOCBTdHlsZXxGaW5lOSBNb3JlfEZpbmUxMCBKb3l8RmluZTExIFdpZGVcIixcbiAgICAgICAgXCJQUk9TQ0FOVGFibGV0XCI6IFwiXFxcXGIoUEVNNjN8UExUMTAyM0d8UExUMTA0MXxQTFQxMDQ0fFBMVDEwNDRHfFBMVDEwOTF8UExUNDMxMXxQTFQ0MzExUEx8UExUNDMxNXxQTFQ3MDMwfFBMVDcwMzN8UExUNzAzM0R8UExUNzAzNXxQTFQ3MDM1RHxQTFQ3MDQ0S3xQTFQ3MDQ1S3xQTFQ3MDQ1S0J8UExUNzA3MUtHfFBMVDcwNzJ8UExUNzIyM0d8UExUNzIyNUd8UExUNzc3N0d8UExUNzgxMEt8UExUNzg0OUd8UExUNzg1MUd8UExUNzg1Mkd8UExUODAxNXxQTFQ4MDMxfFBMVDgwMzR8UExUODAzNnxQTFQ4MDgwS3xQTFQ4MDgyfFBMVDgwODh8UExUODIyM0d8UExUODIzNEd8UExUODIzNUd8UExUODgxNkt8UExUOTAxMXxQTFQ5MDQ1S3xQTFQ5MjMzR3xQTFQ5NzM1fFBMVDk3NjBHfFBMVDk3NzBHKVxcXFxiXCIsXG4gICAgICAgIFwiWU9ORVNUYWJsZXRcIjogXCJCUTEwNzh8QkMxMDAzfEJDMTA3N3xSSzk3MDJ8QkM5NzMwfEJDOTAwMXxJVDkwMDF8QkM3MDA4fEJDNzAxMHxCQzcwOHxCQzcyOHxCQzcwMTJ8QkM3MDMwfEJDNzAyN3xCQzcwMjZcIixcbiAgICAgICAgXCJDaGFuZ0ppYVRhYmxldFwiOiBcIlRQQzcxMDJ8VFBDNzEwM3xUUEM3MTA1fFRQQzcxMDZ8VFBDNzEwN3xUUEM3MjAxfFRQQzcyMDN8VFBDNzIwNXxUUEM3MjEwfFRQQzc3MDh8VFBDNzcwOXxUUEM3NzEyfFRQQzcxMTB8VFBDODEwMXxUUEM4MTAzfFRQQzgxMDV8VFBDODEwNnxUUEM4MjAzfFRQQzgyMDV8VFBDODUwM3xUUEM5MTA2fFRQQzk3MDF8VFBDOTcxMDF8VFBDOTcxMDN8VFBDOTcxMDV8VFBDOTcxMDZ8VFBDOTcxMTF8VFBDOTcxMTN8VFBDOTcyMDN8VFBDOTc2MDN8VFBDOTc4MDl8VFBDOTcyMDV8VFBDMTAxMDF8VFBDMTAxMDN8VFBDMTAxMDZ8VFBDMTAxMTF8VFBDMTAyMDN8VFBDMTAyMDV8VFBDMTA1MDNcIixcbiAgICAgICAgXCJHVVRhYmxldFwiOiBcIlRYLUExMzAxfFRYLU05MDAyfFE3MDJ8a2YwMjZcIixcbiAgICAgICAgXCJQb2ludE9mVmlld1RhYmxldFwiOiBcIlRBQi1QNTA2fFRBQi1uYXZpLTctM0ctTXxUQUItUDUxN3xUQUItUC01Mjd8VEFCLVA3MDF8VEFCLVA3MDN8VEFCLVA3MjF8VEFCLVA3MzFOfFRBQi1QNzQxfFRBQi1QODI1fFRBQi1QOTA1fFRBQi1QOTI1fFRBQi1QUjk0NXxUQUItUEwxMDE1fFRBQi1QMTAyNXxUQUItUEkxMDQ1fFRBQi1QMTMyNXxUQUItUFJPVEFCWzAtOV0rfFRBQi1QUk9UQUIyNXxUQUItUFJPVEFCMjZ8VEFCLVBST1RBQjI3fFRBQi1QUk9UQUIyNlhMfFRBQi1QUk9UQUIyLUlQUzl8VEFCLVBST1RBQjMwLUlQUzl8VEFCLVBST1RBQjI1WFhMfFRBQi1QUk9UQUIyNi1JUFMxMHxUQUItUFJPVEFCMzAtSVBTMTBcIixcbiAgICAgICAgXCJPdmVybWF4VGFibGV0XCI6IFwiT1YtKFN0ZWVsQ29yZXxOZXdCYXNlfEJhc2Vjb3JlfEJhc2VvbmV8RXhlbGxlbnxRdWF0dG9yfEVkdVRhYnxTb2x1dGlvbnxBQ1RJT058QmFzaWNUYWJ8VGVkZHlUYWJ8TWFnaWNUYWJ8U3RyZWFtfFRCLTA4fFRCLTA5KXxRdWFsY29yZSAxMDI3XCIsXG4gICAgICAgIFwiSENMVGFibGV0XCI6IFwiSENMLipUYWJsZXR8Q29ubmVjdC0zRy0yLjB8Q29ubmVjdC0yRy0yLjB8TUUgVGFibGV0IFUxfE1FIFRhYmxldCBVMnxNRSBUYWJsZXQgRzF8TUUgVGFibGV0IFgxfE1FIFRhYmxldCBZMnxNRSBUYWJsZXQgU3luY1wiLFxuICAgICAgICBcIkRQU1RhYmxldFwiOiBcIkRQUyBEcmVhbSA5fERQUyBEdWFsIDdcIixcbiAgICAgICAgXCJWaXN0dXJlVGFibGV0XCI6IFwiVjk3IEhEfGk3NSAzR3xWaXN0dXJlIFY0KCBIRCk/fFZpc3R1cmUgVjUoIEhEKT98VmlzdHVyZSBWMTBcIixcbiAgICAgICAgXCJDcmVzdGFUYWJsZXRcIjogXCJDVFAoLSk/ODEwfENUUCgtKT84MTh8Q1RQKC0pPzgyOHxDVFAoLSk/ODM4fENUUCgtKT84ODh8Q1RQKC0pPzk3OHxDVFAoLSk/OTgwfENUUCgtKT85ODd8Q1RQKC0pPzk4OHxDVFAoLSk/OTg5XCIsXG4gICAgICAgIFwiTWVkaWF0ZWtUYWJsZXRcIjogXCJcXFxcYk1UODEyNXxNVDgzODl8TVQ4MTM1fE1UODM3N1xcXFxiXCIsXG4gICAgICAgIFwiQ29uY29yZGVUYWJsZXRcIjogXCJDb25jb3JkZShbIF0rKT9UYWJ8Q29uQ29yZGUgUmVhZE1hblwiLFxuICAgICAgICBcIkdvQ2xldmVyVGFibGV0XCI6IFwiR09DTEVWRVIgVEFCfEE3R09DTEVWRVJ8TTEwNDJ8TTc4NDF8TTc0MnxSMTA0MkJLfFIxMDQxfFRBQiBBOTc1fFRBQiBBNzg0MnxUQUIgQTc0MXxUQUIgQTc0MUx8VEFCIE03MjNHfFRBQiBNNzIxfFRBQiBBMTAyMXxUQUIgSTkyMXxUQUIgUjcyMXxUQUIgSTcyMHxUQUIgVDc2fFRBQiBSNzB8VEFCIFI3Ni4yfFRBQiBSMTA2fFRBQiBSODMuMnxUQUIgTTgxM0d8VEFCIEk3MjF8R0NUQTcyMnxUQUIgSTcwfFRBQiBJNzF8VEFCIFM3M3xUQUIgUjczfFRBQiBSNzR8VEFCIFI5M3xUQUIgUjc1fFRBQiBSNzYuMXxUQUIgQTczfFRBQiBBOTN8VEFCIEE5My4yfFRBQiBUNzJ8VEFCIFI4M3xUQUIgUjk3NHxUQUIgUjk3M3xUQUIgQTEwMXxUQUIgQTEwM3xUQUIgQTEwNHxUQUIgQTEwNC4yfFIxMDVCS3xNNzEzR3xBOTcyQkt8VEFCIEE5NzF8VEFCIFI5NzQuMnxUQUIgUjEwNHxUQUIgUjgzLjN8VEFCIEExMDQyXCIsXG4gICAgICAgIFwiTW9kZWNvbVRhYmxldFwiOiBcIkZyZWVUQUIgOTAwMHxGcmVlVEFCIDcuNHxGcmVlVEFCIDcwMDR8RnJlZVRBQiA3ODAwfEZyZWVUQUIgMjA5NnxGcmVlVEFCIDcuNXxGcmVlVEFCIDEwMTR8RnJlZVRBQiAxMDAxIHxGcmVlVEFCIDgwMDF8RnJlZVRBQiA5NzA2fEZyZWVUQUIgOTcwMnxGcmVlVEFCIDcwMDN8RnJlZVRBQiA3MDAyfEZyZWVUQUIgMTAwMnxGcmVlVEFCIDc4MDF8RnJlZVRBQiAxMzMxfEZyZWVUQUIgMTAwNHxGcmVlVEFCIDgwMDJ8RnJlZVRBQiA4MDE0fEZyZWVUQUIgOTcwNHxGcmVlVEFCIDEwMDNcIixcbiAgICAgICAgXCJWb25pbm9UYWJsZXRcIjogXCJcXFxcYihBcmd1c1sgX10/U3xEaWFtb25kWyBfXT83OUhEfEVtZXJhbGRbIF9dPzc4RXxMdW5hWyBfXT83MEN8T255eFsgX10/U3xPbnl4WyBfXT9afE9yaW5bIF9dP0hEfE9yaW5bIF9dP1N8T3Rpc1sgX10/U3xTcGVlZFN0YXJbIF9dP1N8TWFnbmV0WyBfXT9NOXxQcmltdXNbIF9dPzk0WyBfXT8zR3xQcmltdXNbIF9dPzk0SER8UHJpbXVzWyBfXT9RU3xBbmRyb2lkLipcXFxcYlE4XFxcXGJ8U2lyaXVzWyBfXT9FVk9bIF9dP1FTfFNpcml1c1sgX10/UVN8U3Bpcml0WyBfXT9TKVxcXFxiXCIsXG4gICAgICAgIFwiRUNTVGFibGV0XCI6IFwiVjA3T1QyfFRNMTA1QXxTMTBPVDF8VFIxMENTMVwiLFxuICAgICAgICBcIlN0b3JleFRhYmxldFwiOiBcImVaZWVbXyddPyhUYWJ8R28pWzAtOV0rfFRhYkxDN3xMb29uZXkgVHVuZXMgVGFiXCIsXG4gICAgICAgIFwiVm9kYWZvbmVUYWJsZXRcIjogXCJTbWFydFRhYihbIF0rKT9bMC05XSt8U21hcnRUYWJJSTEwfFNtYXJ0VGFiSUk3fFZGLTE0OTd8VkZEIDE0MDBcIixcbiAgICAgICAgXCJFc3NlbnRpZWxCVGFibGV0XCI6IFwiU21hcnRbICddP1RBQlsgXSs/WzAtOV0rfEZhbWlseVsgJ10/VEFCMlwiLFxuICAgICAgICBcIlJvc3NNb29yVGFibGV0XCI6IFwiUk0tNzkwfFJNLTk5N3xSTUQtODc4R3xSTUQtOTc0UnxSTVQtNzA1QXxSTVQtNzAxfFJNRS02MDF8Uk1ULTUwMXxSTVQtNzExXCIsXG4gICAgICAgIFwiaU1vYmlsZVRhYmxldFwiOiBcImktbW9iaWxlIGktbm90ZVwiLFxuICAgICAgICBcIlRvbGlub1RhYmxldFwiOiBcInRvbGlubyB0YWIgWzAtOS5dK3x0b2xpbm8gc2hpbmVcIixcbiAgICAgICAgXCJBdWRpb1NvbmljVGFibGV0XCI6IFwiXFxcXGJDLTIyUXxUNy1RQ3xULTE3QnxULTE3UFxcXFxiXCIsXG4gICAgICAgIFwiQU1QRVRhYmxldFwiOiBcIkFuZHJvaWQuKiBBNzggXCIsXG4gICAgICAgIFwiU2trVGFibGV0XCI6IFwiQW5kcm9pZC4qIChTS1lQQUR8UEhPRU5JWHxDWUNMT1BTKVwiLFxuICAgICAgICBcIlRlY25vVGFibGV0XCI6IFwiVEVDTk8gUDl8VEVDTk8gRFA4RFwiLFxuICAgICAgICBcIkpYRFRhYmxldFwiOiBcIkFuZHJvaWQuKiBcXFxcYihGMzAwMHxBMzMwMHxKWEQ1MDAwfEpYRDMwMDB8SlhEMjAwMHxKWEQzMDBCfEpYRDMwMHxTNTgwMHxTNzgwMHxTNjAyYnxTNTExMGJ8UzczMDB8UzUzMDB8UzYwMnxTNjAzfFM1MTAwfFM1MTEwfFM2MDF8UzcxMDBhfFAzMDAwRnxQMzAwMHN8UDEwMXxQMjAwc3xQMTAwMG18UDIwMG18UDkxMDB8UDEwMDBzfFM2NjAwYnxTOTA4fFAxMDAwfFAzMDB8UzE4fFM2NjAwfFM5MTAwKVxcXFxiXCIsXG4gICAgICAgIFwiaUpveVRhYmxldFwiOiBcIlRhYmxldCAoU3Bpcml0IDd8RXNzZW50aWF8R2FsYXRlYXxGdXNpb258T25peCA3fExhbmRhfFRpdGFufFNjb29ieXxEZW94fFN0ZWxsYXxUaGVtaXN8QXJnb258VW5pcXVlIDd8U3lnbnVzfEhleGVufEZpbml0eSA3fENyZWFtfENyZWFtIFgyfEphZGV8TmVvbiA3fE5lcm9uIDd8S2FuZHl8U2NhcGV8U2FwaHlyIDd8UmViZWx8QmlveHxSZWJlbHxSZWJlbCA4R0J8TXlzdHxEcmFjbyA3fE15c3R8VGFiNy0wMDR8TXlzdHxUYWRlbyBKb25lc3xUYWJsZXQgQm9pbmd8QXJyb3d8RHJhY28gRHVhbCBDYW18QXVyaXh8TWludHxBbWl0eXxSZXZvbHV0aW9ufEZpbml0eSA5fE5lb24gOXxUOXd8QW1pdHkgNEdCIER1YWwgQ2FtfFN0b25lIDRHQnxTdG9uZSA4R0J8QW5kcm9tZWRhfFNpbGtlbnxYMnxBbmRyb21lZGEgSUl8SGFsbGV5fEZsYW1lfFNhcGh5ciA5LDd8VG91Y2ggOHxQbGFuZXR8VHJpdG9ufFVuaXF1ZSAxMHxIZXhlbiAxMHxNZW1waGlzIDRHQnxNZW1waGlzIDhHQnxPbml4IDEwKVwiLFxuICAgICAgICBcIkZYMlRhYmxldFwiOiBcIkZYMiBQQUQ3fEZYMiBQQUQxMFwiLFxuICAgICAgICBcIlhvcm9UYWJsZXRcIjogXCJLaWRzUEFEIDcwMXxQQURbIF0/NzEyfFBBRFsgXT83MTR8UEFEWyBdPzcxNnxQQURbIF0/NzE3fFBBRFsgXT83MTh8UEFEWyBdPzcyMHxQQURbIF0/NzIxfFBBRFsgXT83MjJ8UEFEWyBdPzc5MHxQQURbIF0/NzkyfFBBRFsgXT85MDB8UEFEWyBdPzk3MTVEfFBBRFsgXT85NzE2RFJ8UEFEWyBdPzk3MThEUnxQQURbIF0/OTcxOVFSfFBBRFsgXT85NzIwUVJ8VGVsZVBBRDEwMzB8VGVsZXBhZDEwMzJ8VGVsZVBBRDczMHxUZWxlUEFENzMxfFRlbGVQQUQ3MzJ8VGVsZVBBRDczNVF8VGVsZVBBRDgzMHxUZWxlUEFEOTczMHxUZWxlUEFENzk1fE1lZ2FQQUQgMTMzMXxNZWdhUEFEIDE4NTF8TWVnYVBBRCAyMTUxXCIsXG4gICAgICAgIFwiVmlld3NvbmljVGFibGV0XCI6IFwiVmlld1BhZCAxMHBpfFZpZXdQYWQgMTBlfFZpZXdQYWQgMTBzfFZpZXdQYWQgRTcyfFZpZXdQYWQ3fFZpZXdQYWQgRTEwMHxWaWV3UGFkIDdlfFZpZXdTb25pYyBWQjczM3xWQjEwMGFcIixcbiAgICAgICAgXCJWZXJpem9uVGFibGV0XCI6IFwiUVRBUVozfFFUQUlSN3xRVEFRVFozfFFUQVNVTjF8UVRBU1VOMnxRVEFYSUExXCIsXG4gICAgICAgIFwiT2R5c1RhYmxldFwiOiBcIkxPT1h8WEVOTzEwfE9EWVNbIC1dKFNwYWNlfEVWT3xYcHJlc3N8Tk9PTil8XFxcXGJYRUxJT1xcXFxifFhlbGlvMTBQcm98WEVMSU83UEhPTkVUQUJ8WEVMSU8xMEVYVFJFTUV8WEVMSU9QVDJ8TkVPX1FVQUQxMFwiLFxuICAgICAgICBcIkNhcHRpdmFUYWJsZXRcIjogXCJDQVBUSVZBIFBBRFwiLFxuICAgICAgICBcIkljb25iaXRUYWJsZXRcIjogXCJOZXRUQUJ8TlQtMzcwMnxOVC0zNzAyU3xOVC0zNzAyU3xOVC0zNjAzUHxOVC0zNjAzUHxOVC0wNzA0U3xOVC0wNzA0U3xOVC0zODA1Q3xOVC0zODA1Q3xOVC0wODA2Q3xOVC0wODA2Q3xOVC0wOTA5VHxOVC0wOTA5VHxOVC0wOTA3U3xOVC0wOTA3U3xOVC0wOTAyU3xOVC0wOTAyU1wiLFxuICAgICAgICBcIlRlY2xhc3RUYWJsZXRcIjogXCJUOTggNEd8XFxcXGJQODBcXFxcYnxcXFxcYlg5MEhEXFxcXGJ8WDk4IEFpcnxYOTggQWlyIDNHfFxcXFxiWDg5XFxcXGJ8UDgwIDNHfFxcXFxiWDgwaFxcXFxifFA5OCBBaXJ8XFxcXGJYODlIRFxcXFxifFA5OCAzR3xcXFxcYlA5MEhEXFxcXGJ8UDg5IDNHfFg5OCAzR3xcXFxcYlA3MGhcXFxcYnxQNzlIRCAzR3xHMThkIDNHfFxcXFxiUDc5SERcXFxcYnxcXFxcYlA4OXNcXFxcYnxcXFxcYkE4OFxcXFxifFxcXFxiUDEwSERcXFxcYnxcXFxcYlAxOUhEXFxcXGJ8RzE4IDNHfFxcXFxiUDc4SERcXFxcYnxcXFxcYkE3OFxcXFxifFxcXFxiUDc1XFxcXGJ8RzE3cyAzR3xHMTdoIDNHfFxcXFxiUDg1dFxcXFxifFxcXFxiUDkwXFxcXGJ8XFxcXGJQMTFcXFxcYnxcXFxcYlA5OHRcXFxcYnxcXFxcYlA5OEhEXFxcXGJ8XFxcXGJHMThkXFxcXGJ8XFxcXGJQODVzXFxcXGJ8XFxcXGJQMTFIRFxcXFxifFxcXFxiUDg4c1xcXFxifFxcXFxiQTgwSERcXFxcYnxcXFxcYkE4MHNlXFxcXGJ8XFxcXGJBMTBoXFxcXGJ8XFxcXGJQODlcXFxcYnxcXFxcYlA3OHNcXFxcYnxcXFxcYkcxOFxcXFxifFxcXFxiUDg1XFxcXGJ8XFxcXGJBNzBoXFxcXGJ8XFxcXGJBNzBcXFxcYnxcXFxcYkcxN1xcXFxifFxcXFxiUDE4XFxcXGJ8XFxcXGJBODBzXFxcXGJ8XFxcXGJBMTFzXFxcXGJ8XFxcXGJQODhIRFxcXFxifFxcXFxiQTgwaFxcXFxifFxcXFxiUDc2c1xcXFxifFxcXFxiUDc2aFxcXFxifFxcXFxiUDk4XFxcXGJ8XFxcXGJBMTBIRFxcXFxifFxcXFxiUDc4XFxcXGJ8XFxcXGJQODhcXFxcYnxcXFxcYkExMVxcXFxifFxcXFxiQTEwdFxcXFxifFxcXFxiUDc2YVxcXFxifFxcXFxiUDc2dFxcXFxifFxcXFxiUDc2ZVxcXFxifFxcXFxiUDg1SERcXFxcYnxcXFxcYlA4NWFcXFxcYnxcXFxcYlA4NlxcXFxifFxcXFxiUDc1SERcXFxcYnxcXFxcYlA3NnZcXFxcYnxcXFxcYkExMlxcXFxifFxcXFxiUDc1YVxcXFxifFxcXFxiQTE1XFxcXGJ8XFxcXGJQNzZUaVxcXFxifFxcXFxiUDgxSERcXFxcYnxcXFxcYkExMFxcXFxifFxcXFxiVDc2MFZFXFxcXGJ8XFxcXGJUNzIwSERcXFxcYnxcXFxcYlA3NlxcXFxifFxcXFxiUDczXFxcXGJ8XFxcXGJQNzFcXFxcYnxcXFxcYlA3MlxcXFxifFxcXFxiVDcyMFNFXFxcXGJ8XFxcXGJDNTIwVGlcXFxcYnxcXFxcYlQ3NjBcXFxcYnxcXFxcYlQ3MjBWRVxcXFxifFQ3MjAtM0dFfFQ3MjAtV2lGaVwiLFxuICAgICAgICBcIk9uZGFUYWJsZXRcIjogXCJcXFxcYihWOTc1aXxWaTMwfFZYNTMwfFY3MDF8Vmk2MHxWNzAxc3xWaTUwfFY4MDFzfFY3MTl8Vng2MTB3fFZYNjEwV3xWODE5aXxWaTEwfFZYNTgwV3xWaTEwfFY3MTFzfFY4MTN8VjgxMXxWODIwd3xWODIwfFZpMjB8VjcxMXxWSTMwV3xWNzEyfFY4OTF3fFY5NzJ8VjgxOXd8VjgyMHd8Vmk2MHxWODIwd3xWNzExfFY4MTNzfFY4MDF8VjgxOXxWOTc1c3xWODAxfFY4MTl8VjgxOXxWODE4fFY4MTF8VjcxMnxWOTc1bXxWMTAxd3xWOTYxd3xWODEyfFY4MTh8Vjk3MXxWOTcxc3xWOTE5fFY5ODl8VjExNnd8VjEwMnd8Vjk3M3xWaTQwKVxcXFxiW1xcXFxzXSt8VjEwIFxcXFxiNEdcXFxcYlwiLFxuICAgICAgICBcIkpheXRlY2hUYWJsZXRcIjogXCJUUEMtUEE3NjJcIixcbiAgICAgICAgXCJCbGF1cHVua3RUYWJsZXRcIjogXCJFbmRlYXZvdXIgODAwTkd8RW5kZWF2b3VyIDEwMTBcIixcbiAgICAgICAgXCJEaWdtYVRhYmxldFwiOiBcIlxcXFxiKGlEeDEwfGlEeDl8aUR4OHxpRHg3fGlEeEQ3fGlEeEQ4fGlEc1E4fGlEc1E3fGlEc1E4fGlEc0QxMHxpRG5EN3wzVFM4MDRIfGlEc1ExMXxpRGo3fGlEczEwKVxcXFxiXCIsXG4gICAgICAgIFwiRXZvbGlvVGFibGV0XCI6IFwiQVJJQV9NaW5pX3dpZml8QXJpYVsgX11NaW5pfEV2b2xpbyBYMTB8RXZvbGlvIFg3fEV2b2xpbyBYOHxcXFxcYkV2b3RhYlxcXFxifFxcXFxiTmV1cmFcXFxcYlwiLFxuICAgICAgICBcIkxhdmFUYWJsZXRcIjogXCJRUEFEIEU3MDR8XFxcXGJJdm9yeVNcXFxcYnxFLVRBQiBJVk9SWXxcXFxcYkUtVEFCXFxcXGJcIixcbiAgICAgICAgXCJBb2NUYWJsZXRcIjogXCJNVzA4MTF8TVcwODEyfE1XMDkyMnxNVEs4MzgyfE1XMTAzMXxNVzA4MzF8TVcwODIxfE1XMDkzMXxNVzA3MTJcIixcbiAgICAgICAgXCJNcG1hblRhYmxldFwiOiBcIk1QMTEgT0NUQXxNUDEwIE9DVEF8TVBRQzExMTR8TVBRQzEwMDR8TVBRQzk5NHxNUFFDOTc0fE1QUUM5NzN8TVBRQzgwNHxNUFFDNzg0fE1QUUM3ODB8XFxcXGJNUEc3XFxcXGJ8TVBEQ0c3NXxNUERDRzcxfE1QREMxMDA2fE1QMTAxREN8TVBEQzkwMDB8TVBEQzkwNXxNUERDNzA2SER8TVBEQzcwNnxNUERDNzA1fE1QREMxMTB8TVBEQzEwMHxNUERDOTl8TVBEQzk3fE1QREM4OHxNUERDOHxNUERDNzd8TVA3MDl8TUlENzAxfE1JRDcxMXxNSUQxNzB8TVBEQzcwM3xNUFFDMTAxMFwiLFxuICAgICAgICBcIkNlbGtvblRhYmxldFwiOiBcIkNUNjk1fENUODg4fENUW1xcXFxzXT85MTB8Q1Q3IFRhYnxDVDkgVGFifENUMyBUYWJ8Q1QyIFRhYnxDVDEgVGFifEM4MjB8QzcyMHxcXFxcYkNULTFcXFxcYlwiLFxuICAgICAgICBcIldvbGRlclRhYmxldFwiOiBcIm1pVGFiIFxcXFxiKERJQU1PTkR8U1BBQ0V8QlJPT0tMWU58TkVPfEZMWXxNQU5IQVRUQU58RlVOS3xFVk9MVVRJT058U0tZfEdPQ0FSfElST058R0VOSVVTfFBPUHxNSU5UfEVQU0lMT058QlJPQURXQVl8SlVNUHxIT1B8TEVHRU5EfE5FVyBBR0V8TElORXxBRFZBTkNFfEZFRUx8Rk9MTE9XfExJS0V8TElOS3xMSVZFfFRISU5LfEZSRUVET018Q0hJQ0FHT3xDTEVWRUxBTkR8QkFMVElNT1JFLUdIfElPV0F8Qk9TVE9OfFNFQVRUTEV8UEhPRU5JWHxEQUxMQVN8SU4gMTAxfE1hc3RlckNoZWYpXFxcXGJcIixcbiAgICAgICAgXCJNZWRpYWNvbVRhYmxldFwiOiBcIk0tTVBJMTBDM0d8TS1TUDEwRUd8TS1TUDEwRUdQfE0tU1AxMEhYQUh8TS1TUDdIWEFIfE0tU1AxMEhYQkh8TS1TUDhIWEFIfE0tU1A4TVhBXCIsXG4gICAgICAgIFwiTWlUYWJsZXRcIjogXCJcXFxcYk1JIFBBRFxcXFxifFxcXFxiSE0gTk9URSAxV1xcXFxiXCIsXG4gICAgICAgIFwiTmliaXJ1VGFibGV0XCI6IFwiTmliaXJ1IE0xfE5pYmlydSBKdXBpdGVyIE9uZVwiLFxuICAgICAgICBcIk5leG9UYWJsZXRcIjogXCJORVhPIE5PVkF8TkVYTyAxMHxORVhPIEFWSU98TkVYTyBGUkVFfE5FWE8gR098TkVYTyBFVk98TkVYTyAzR3xORVhPIFNNQVJUfE5FWE8gS0lERE98TkVYTyBNT0JJXCIsXG4gICAgICAgIFwiTGVhZGVyVGFibGV0XCI6IFwiVEJMVDEwUXxUQkxUMTBJfFRCTC0xMFdES0J8VEJMLTEwV0RLQk8yMDEzfFRCTC1XMjMwVjJ8VEJMLVc0NTB8VEJMLVc1MDB8U1Y1NzJ8VEJMVDdJfFRCQS1BQzctOEd8VEJMVDc5fFRCTC04VzE2fFRCTC0xMFczMnxUQkwtMTBXS0J8VEJMLVcxMDBcIixcbiAgICAgICAgXCJVYmlzbGF0ZVRhYmxldFwiOiBcIlViaVNsYXRlW1xcXFxzXT83Q1wiLFxuICAgICAgICBcIlBvY2tldEJvb2tUYWJsZXRcIjogXCJQb2NrZXRib29rXCIsXG4gICAgICAgIFwiS29jYXNvVGFibGV0XCI6IFwiXFxcXGIoVEItMTIwNylcXFxcYlwiLFxuICAgICAgICBcIkhpc2Vuc2VUYWJsZXRcIjogXCJcXFxcYihGNTI4MXxFMjM3MSlcXFxcYlwiLFxuICAgICAgICBcIkh1ZGxcIjogXCJIdWRsIEhUN1MzfEh1ZGwgMlwiLFxuICAgICAgICBcIlRlbHN0cmFUYWJsZXRcIjogXCJULUh1YjJcIixcbiAgICAgICAgXCJHZW5lcmljVGFibGV0XCI6IFwiQW5kcm9pZC4qXFxcXGI5N0RcXFxcYnxUYWJsZXQoPyEuKlBDKXxCTlRWMjUwQXxNSUQtV0NETUF8TG9naWNQRCBab29tMnxcXFxcYkE3RUJcXFxcYnxDYXROb3ZhOHxBMV8wN3xDVDcwNHxDVDEwMDJ8XFxcXGJNNzIxXFxcXGJ8cmszMHNka3xcXFxcYkVWT1RBQlxcXFxifE03NThBfEVUOTA0fEFMVU1JVU0xMHxTbWFydGZyZW4gVGFifEVuZGVhdm91ciAxMDEwfFRhYmxldC1QQy00fFRhZ2kgVGFifFxcXFxiTTZwcm9cXFxcYnxDVDEwMjBXfGFyYyAxMEhEfFxcXFxiVFA3NTBcXFxcYnxcXFxcYlFUQVFaM1xcXFxifFdWVDEwMXxUTTEwODh8S1QxMDdcIlxuICAgIH0sXG4gICAgXCJvc3NcIjoge1xuICAgICAgICBcIkFuZHJvaWRPU1wiOiBcIkFuZHJvaWRcIixcbiAgICAgICAgXCJCbGFja0JlcnJ5T1NcIjogXCJibGFja2JlcnJ5fFxcXFxiQkIxMFxcXFxifHJpbSB0YWJsZXQgb3NcIixcbiAgICAgICAgXCJQYWxtT1NcIjogXCJQYWxtT1N8YXZhbnRnb3xibGF6ZXJ8ZWxhaW5lfGhpcHRvcHxwYWxtfHBsdWNrZXJ8eGlpbm9cIixcbiAgICAgICAgXCJTeW1iaWFuT1NcIjogXCJTeW1iaWFufFN5bWJPU3xTZXJpZXM2MHxTZXJpZXM0MHxTWUItWzAtOV0rfFxcXFxiUzYwXFxcXGJcIixcbiAgICAgICAgXCJXaW5kb3dzTW9iaWxlT1NcIjogXCJXaW5kb3dzIENFLiooUFBDfFNtYXJ0cGhvbmV8TW9iaWxlfFswLTldezN9eFswLTldezN9KXxXaW5kb3dzIE1vYmlsZXxXaW5kb3dzIFBob25lIFswLTkuXSt8V0NFO1wiLFxuICAgICAgICBcIldpbmRvd3NQaG9uZU9TXCI6IFwiV2luZG93cyBQaG9uZSAxMC4wfFdpbmRvd3MgUGhvbmUgOC4xfFdpbmRvd3MgUGhvbmUgOC4wfFdpbmRvd3MgUGhvbmUgT1N8WEJMV1A3fFp1bmVXUDd8V2luZG93cyBOVCA2LlsyM107IEFSTTtcIixcbiAgICAgICAgXCJpT1NcIjogXCJcXFxcYmlQaG9uZS4qTW9iaWxlfFxcXFxiaVBvZHxcXFxcYmlQYWR8QXBwbGVDb3JlTWVkaWFcIixcbiAgICAgICAgXCJpUGFkT1NcIjogXCJDUFUgT1MgMTNcIixcbiAgICAgICAgXCJNZWVHb09TXCI6IFwiTWVlR29cIixcbiAgICAgICAgXCJNYWVtb09TXCI6IFwiTWFlbW9cIixcbiAgICAgICAgXCJKYXZhT1NcIjogXCJKMk1FXFwvfFxcXFxiTUlEUFxcXFxifFxcXFxiQ0xEQ1xcXFxiXCIsXG4gICAgICAgIFwid2ViT1NcIjogXCJ3ZWJPU3xocHdPU1wiLFxuICAgICAgICBcImJhZGFPU1wiOiBcIlxcXFxiQmFkYVxcXFxiXCIsXG4gICAgICAgIFwiQlJFV09TXCI6IFwiQlJFV1wiXG4gICAgfSxcbiAgICBcInVhc1wiOiB7XG4gICAgICAgIFwiQ2hyb21lXCI6IFwiXFxcXGJDck1vXFxcXGJ8Q3JpT1N8QW5kcm9pZC4qQ2hyb21lXFwvWy4wLTldKiAoTW9iaWxlKT9cIixcbiAgICAgICAgXCJEb2xmaW5cIjogXCJcXFxcYkRvbGZpblxcXFxiXCIsXG4gICAgICAgIFwiT3BlcmFcIjogXCJPcGVyYS4qTWluaXxPcGVyYS4qTW9iaXxBbmRyb2lkLipPcGVyYXxNb2JpbGUuKk9QUlxcL1swLTkuXSskfENvYXN0XFwvWzAtOS5dK1wiLFxuICAgICAgICBcIlNreWZpcmVcIjogXCJTa3lmaXJlXCIsXG4gICAgICAgIFwiRWRnZVwiOiBcIk1vYmlsZSBTYWZhcmlcXC9bLjAtOV0qIEVkZ2VcIixcbiAgICAgICAgXCJJRVwiOiBcIklFTW9iaWxlfE1TSUVNb2JpbGVcIixcbiAgICAgICAgXCJGaXJlZm94XCI6IFwiZmVubmVjfGZpcmVmb3guKm1hZW1vfChNb2JpbGV8VGFibGV0KS4qRmlyZWZveHxGaXJlZm94LipNb2JpbGV8RnhpT1NcIixcbiAgICAgICAgXCJCb2x0XCI6IFwiYm9sdFwiLFxuICAgICAgICBcIlRlYVNoYXJrXCI6IFwidGVhc2hhcmtcIixcbiAgICAgICAgXCJCbGF6ZXJcIjogXCJCbGF6ZXJcIixcbiAgICAgICAgXCJTYWZhcmlcIjogXCJWZXJzaW9uLipNb2JpbGUuKlNhZmFyaXxTYWZhcmkuKk1vYmlsZXxNb2JpbGVTYWZhcmlcIixcbiAgICAgICAgXCJXZUNoYXRcIjogXCJcXFxcYk1pY3JvTWVzc2VuZ2VyXFxcXGJcIixcbiAgICAgICAgXCJVQ0Jyb3dzZXJcIjogXCJVQy4qQnJvd3NlcnxVQ1dFQlwiLFxuICAgICAgICBcImJhaWR1Ym94YXBwXCI6IFwiYmFpZHVib3hhcHBcIixcbiAgICAgICAgXCJiYWlkdWJyb3dzZXJcIjogXCJiYWlkdWJyb3dzZXJcIixcbiAgICAgICAgXCJEaWlnb0Jyb3dzZXJcIjogXCJEaWlnb0Jyb3dzZXJcIixcbiAgICAgICAgXCJNZXJjdXJ5XCI6IFwiXFxcXGJNZXJjdXJ5XFxcXGJcIixcbiAgICAgICAgXCJPYmlnb0Jyb3dzZXJcIjogXCJPYmlnb1wiLFxuICAgICAgICBcIk5ldEZyb250XCI6IFwiTkYtQnJvd3NlclwiLFxuICAgICAgICBcIkdlbmVyaWNCcm93c2VyXCI6IFwiTm9raWFCcm93c2VyfE92aUJyb3dzZXJ8T25lQnJvd3NlcnxUd29ua3lCZWFtQnJvd3NlcnxTRU1DLipCcm93c2VyfEZseUZsb3d8TWluaW1vfE5ldEZyb250fE5vdmFycmEtVmlzaW9ufE1RUUJyb3dzZXJ8TWljcm9NZXNzZW5nZXJcIixcbiAgICAgICAgXCJQYWxlTW9vblwiOiBcIkFuZHJvaWQuKlBhbGVNb29ufE1vYmlsZS4qUGFsZU1vb25cIlxuICAgIH0sXG4gICAgXCJwcm9wc1wiOiB7XG4gICAgICAgIFwiTW9iaWxlXCI6IFwiTW9iaWxlXFwvW1ZFUl1cIixcbiAgICAgICAgXCJCdWlsZFwiOiBcIkJ1aWxkXFwvW1ZFUl1cIixcbiAgICAgICAgXCJWZXJzaW9uXCI6IFwiVmVyc2lvblxcL1tWRVJdXCIsXG4gICAgICAgIFwiVmVuZG9ySURcIjogXCJWZW5kb3JJRFxcL1tWRVJdXCIsXG4gICAgICAgIFwiaVBhZFwiOiBcImlQYWQuKkNQVVthLXogXStbVkVSXVwiLFxuICAgICAgICBcImlQaG9uZVwiOiBcImlQaG9uZS4qQ1BVW2EteiBdK1tWRVJdXCIsXG4gICAgICAgIFwiaVBvZFwiOiBcImlQb2QuKkNQVVthLXogXStbVkVSXVwiLFxuICAgICAgICBcIktpbmRsZVwiOiBcIktpbmRsZVxcL1tWRVJdXCIsXG4gICAgICAgIFwiQ2hyb21lXCI6IFtcbiAgICAgICAgICAgIFwiQ2hyb21lXFwvW1ZFUl1cIixcbiAgICAgICAgICAgIFwiQ3JpT1NcXC9bVkVSXVwiLFxuICAgICAgICAgICAgXCJDck1vXFwvW1ZFUl1cIlxuICAgICAgICBdLFxuICAgICAgICBcIkNvYXN0XCI6IFtcbiAgICAgICAgICAgIFwiQ29hc3RcXC9bVkVSXVwiXG4gICAgICAgIF0sXG4gICAgICAgIFwiRG9sZmluXCI6IFwiRG9sZmluXFwvW1ZFUl1cIixcbiAgICAgICAgXCJGaXJlZm94XCI6IFtcbiAgICAgICAgICAgIFwiRmlyZWZveFxcL1tWRVJdXCIsXG4gICAgICAgICAgICBcIkZ4aU9TXFwvW1ZFUl1cIlxuICAgICAgICBdLFxuICAgICAgICBcIkZlbm5lY1wiOiBcIkZlbm5lY1xcL1tWRVJdXCIsXG4gICAgICAgIFwiRWRnZVwiOiBcIkVkZ2VcXC9bVkVSXVwiLFxuICAgICAgICBcIklFXCI6IFtcbiAgICAgICAgICAgIFwiSUVNb2JpbGVcXC9bVkVSXTtcIixcbiAgICAgICAgICAgIFwiSUVNb2JpbGUgW1ZFUl1cIixcbiAgICAgICAgICAgIFwiTVNJRSBbVkVSXTtcIixcbiAgICAgICAgICAgIFwiVHJpZGVudFxcL1swLTkuXSs7LipydjpbVkVSXVwiXG4gICAgICAgIF0sXG4gICAgICAgIFwiTmV0RnJvbnRcIjogXCJOZXRGcm9udFxcL1tWRVJdXCIsXG4gICAgICAgIFwiTm9raWFCcm93c2VyXCI6IFwiTm9raWFCcm93c2VyXFwvW1ZFUl1cIixcbiAgICAgICAgXCJPcGVyYVwiOiBbXG4gICAgICAgICAgICBcIiBPUFJcXC9bVkVSXVwiLFxuICAgICAgICAgICAgXCJPcGVyYSBNaW5pXFwvW1ZFUl1cIixcbiAgICAgICAgICAgIFwiVmVyc2lvblxcL1tWRVJdXCJcbiAgICAgICAgXSxcbiAgICAgICAgXCJPcGVyYSBNaW5pXCI6IFwiT3BlcmEgTWluaVxcL1tWRVJdXCIsXG4gICAgICAgIFwiT3BlcmEgTW9iaVwiOiBcIlZlcnNpb25cXC9bVkVSXVwiLFxuICAgICAgICBcIlVDQnJvd3NlclwiOiBbXG4gICAgICAgICAgICBcIlVDV0VCW1ZFUl1cIixcbiAgICAgICAgICAgIFwiVUMuKkJyb3dzZXJcXC9bVkVSXVwiXG4gICAgICAgIF0sXG4gICAgICAgIFwiTVFRQnJvd3NlclwiOiBcIk1RUUJyb3dzZXJcXC9bVkVSXVwiLFxuICAgICAgICBcIk1pY3JvTWVzc2VuZ2VyXCI6IFwiTWljcm9NZXNzZW5nZXJcXC9bVkVSXVwiLFxuICAgICAgICBcImJhaWR1Ym94YXBwXCI6IFwiYmFpZHVib3hhcHBcXC9bVkVSXVwiLFxuICAgICAgICBcImJhaWR1YnJvd3NlclwiOiBcImJhaWR1YnJvd3NlclxcL1tWRVJdXCIsXG4gICAgICAgIFwiU2Ftc3VuZ0Jyb3dzZXJcIjogXCJTYW1zdW5nQnJvd3NlclxcL1tWRVJdXCIsXG4gICAgICAgIFwiSXJvblwiOiBcIklyb25cXC9bVkVSXVwiLFxuICAgICAgICBcIlNhZmFyaVwiOiBbXG4gICAgICAgICAgICBcIlZlcnNpb25cXC9bVkVSXVwiLFxuICAgICAgICAgICAgXCJTYWZhcmlcXC9bVkVSXVwiXG4gICAgICAgIF0sXG4gICAgICAgIFwiU2t5ZmlyZVwiOiBcIlNreWZpcmVcXC9bVkVSXVwiLFxuICAgICAgICBcIlRpemVuXCI6IFwiVGl6ZW5cXC9bVkVSXVwiLFxuICAgICAgICBcIldlYmtpdFwiOiBcIndlYmtpdFsgXFwvXVtWRVJdXCIsXG4gICAgICAgIFwiUGFsZU1vb25cIjogXCJQYWxlTW9vblxcL1tWRVJdXCIsXG4gICAgICAgIFwiR2Vja29cIjogXCJHZWNrb1xcL1tWRVJdXCIsXG4gICAgICAgIFwiVHJpZGVudFwiOiBcIlRyaWRlbnRcXC9bVkVSXVwiLFxuICAgICAgICBcIlByZXN0b1wiOiBcIlByZXN0b1xcL1tWRVJdXCIsXG4gICAgICAgIFwiR29hbm5hXCI6IFwiR29hbm5hXFwvW1ZFUl1cIixcbiAgICAgICAgXCJpT1NcIjogXCIgXFxcXGJpP09TXFxcXGIgW1ZFUl1bIDtdezF9XCIsXG4gICAgICAgIFwiQW5kcm9pZFwiOiBcIkFuZHJvaWQgW1ZFUl1cIixcbiAgICAgICAgXCJCbGFja0JlcnJ5XCI6IFtcbiAgICAgICAgICAgIFwiQmxhY2tCZXJyeVtcXFxcd10rXFwvW1ZFUl1cIixcbiAgICAgICAgICAgIFwiQmxhY2tCZXJyeS4qVmVyc2lvblxcL1tWRVJdXCIsXG4gICAgICAgICAgICBcIlZlcnNpb25cXC9bVkVSXVwiXG4gICAgICAgIF0sXG4gICAgICAgIFwiQlJFV1wiOiBcIkJSRVcgW1ZFUl1cIixcbiAgICAgICAgXCJKYXZhXCI6IFwiSmF2YVxcL1tWRVJdXCIsXG4gICAgICAgIFwiV2luZG93cyBQaG9uZSBPU1wiOiBbXG4gICAgICAgICAgICBcIldpbmRvd3MgUGhvbmUgT1MgW1ZFUl1cIixcbiAgICAgICAgICAgIFwiV2luZG93cyBQaG9uZSBbVkVSXVwiXG4gICAgICAgIF0sXG4gICAgICAgIFwiV2luZG93cyBQaG9uZVwiOiBcIldpbmRvd3MgUGhvbmUgW1ZFUl1cIixcbiAgICAgICAgXCJXaW5kb3dzIENFXCI6IFwiV2luZG93cyBDRVxcL1tWRVJdXCIsXG4gICAgICAgIFwiV2luZG93cyBOVFwiOiBcIldpbmRvd3MgTlQgW1ZFUl1cIixcbiAgICAgICAgXCJTeW1iaWFuXCI6IFtcbiAgICAgICAgICAgIFwiU3ltYmlhbk9TXFwvW1ZFUl1cIixcbiAgICAgICAgICAgIFwiU3ltYmlhblxcL1tWRVJdXCJcbiAgICAgICAgXSxcbiAgICAgICAgXCJ3ZWJPU1wiOiBbXG4gICAgICAgICAgICBcIndlYk9TXFwvW1ZFUl1cIixcbiAgICAgICAgICAgIFwiaHB3T1NcXC9bVkVSXTtcIlxuICAgICAgICBdXG4gICAgfSxcbiAgICBcInV0aWxzXCI6IHtcbiAgICAgICAgXCJCb3RcIjogXCJHb29nbGVib3R8ZmFjZWJvb2tleHRlcm5hbGhpdHxHb29nbGUtQU1QSFRNTHxzfmFtcC12YWxpZGF0b3J8QWRzQm90LUdvb2dsZXxHb29nbGUgS2V5d29yZCBTdWdnZXN0aW9ufEZhY2Vib3R8WWFuZGV4Qm90fFlhbmRleE1vYmlsZUJvdHxiaW5nYm90fGlhX2FyY2hpdmVyfEFocmVmc0JvdHxFem9vbXN8R1NMRmJvdHxXQlNlYXJjaEJvdHxUd2l0dGVyYm90fFR3ZWV0bWVtZUJvdHxUd2lrbGV8UGFwZXJMaUJvdHxXb3Rib3h8VW53aW5kRmV0Y2hvcnxFeGFib3R8TUoxMmJvdHxZYW5kZXhJbWFnZXN8VHVybml0aW5Cb3R8UGluZ2RvbXxjb250ZW50a2luZ2FwcFwiLFxuICAgICAgICBcIk1vYmlsZUJvdFwiOiBcIkdvb2dsZWJvdC1Nb2JpbGV8QWRzQm90LUdvb2dsZS1Nb2JpbGV8WWFob29TZWVrZXJcXC9NMUExLVIyRDJcIixcbiAgICAgICAgXCJEZXNrdG9wTW9kZVwiOiBcIldQRGVza3RvcFwiLFxuICAgICAgICBcIlRWXCI6IFwiU29ueURUVnxIYmJUVlwiLFxuICAgICAgICBcIldlYktpdFwiOiBcIih3ZWJraXQpWyBcXC9dKFtcXFxcdy5dKylcIixcbiAgICAgICAgXCJDb25zb2xlXCI6IFwiXFxcXGIoTmludGVuZG98TmludGVuZG8gV2lpVXxOaW50ZW5kbyAzRFN8TmludGVuZG8gU3dpdGNofFBMQVlTVEFUSU9OfFhib3gpXFxcXGJcIixcbiAgICAgICAgXCJXYXRjaFwiOiBcIlNNLVY3MDBcIlxuICAgIH1cbn07XG5cbiAgICAvLyBmb2xsb3dpbmcgcGF0dGVybnMgY29tZSBmcm9tIGh0dHA6Ly9kZXRlY3Rtb2JpbGVicm93c2Vycy5jb20vXG4gICAgaW1wbC5kZXRlY3RNb2JpbGVCcm93c2VycyA9IHtcbiAgICAgICAgZnVsbFBhdHRlcm46IC8oYW5kcm9pZHxiYlxcZCt8bWVlZ28pLittb2JpbGV8YXZhbnRnb3xiYWRhXFwvfGJsYWNrYmVycnl8YmxhemVyfGNvbXBhbHxlbGFpbmV8ZmVubmVjfGhpcHRvcHxpZW1vYmlsZXxpcChob25lfG9kKXxpcmlzfGtpbmRsZXxsZ2UgfG1hZW1vfG1pZHB8bW1wfG1vYmlsZS4rZmlyZWZveHxuZXRmcm9udHxvcGVyYSBtKG9ifGluKWl8cGFsbSggb3MpP3xwaG9uZXxwKGl4aXxyZSlcXC98cGx1Y2tlcnxwb2NrZXR8cHNwfHNlcmllcyg0fDYpMHxzeW1iaWFufHRyZW98dXBcXC4oYnJvd3NlcnxsaW5rKXx2b2RhZm9uZXx3YXB8d2luZG93cyBjZXx4ZGF8eGlpbm8vaSxcbiAgICAgICAgc2hvcnRQYXR0ZXJuOiAvMTIwN3w2MzEwfDY1OTB8M2dzb3w0dGhwfDUwWzEtNl1pfDc3MHN8ODAyc3xhIHdhfGFiYWN8YWMoZXJ8b298c1xcLSl8YWkoa298cm4pfGFsKGF2fGNhfGNvKXxhbW9pfGFuKGV4fG55fHl3KXxhcHR1fGFyKGNofGdvKXxhcyh0ZXx1cyl8YXR0d3xhdShkaXxcXC1tfHIgfHMgKXxhdmFufGJlKGNrfGxsfG5xKXxiaShsYnxyZCl8YmwoYWN8YXopfGJyKGV8dil3fGJ1bWJ8YndcXC0obnx1KXxjNTVcXC98Y2FwaXxjY3dhfGNkbVxcLXxjZWxsfGNodG18Y2xkY3xjbWRcXC18Y28obXB8bmQpfGNyYXd8ZGEoaXR8bGx8bmcpfGRidGV8ZGNcXC1zfGRldml8ZGljYXxkbW9ifGRvKGN8cClvfGRzKDEyfFxcLWQpfGVsKDQ5fGFpKXxlbShsMnx1bCl8ZXIoaWN8azApfGVzbDh8ZXooWzQtN10wfG9zfHdhfHplKXxmZXRjfGZseShcXC18Xyl8ZzEgdXxnNTYwfGdlbmV8Z2ZcXC01fGdcXC1tb3xnbyhcXC53fG9kKXxncihhZHx1bil8aGFpZXxoY2l0fGhkXFwtKG18cHx0KXxoZWlcXC18aGkocHR8dGEpfGhwKCBpfGlwKXxoc1xcLWN8aHQoYyhcXC18IHxffGF8Z3xwfHN8dCl8dHApfGh1KGF3fHRjKXxpXFwtKDIwfGdvfG1hKXxpMjMwfGlhYyggfFxcLXxcXC8pfGlicm98aWRlYXxpZzAxfGlrb218aW0xa3xpbm5vfGlwYXF8aXJpc3xqYSh0fHYpYXxqYnJvfGplbXV8amlnc3xrZGRpfGtlaml8a2d0KCB8XFwvKXxrbG9ufGtwdCB8a3djXFwtfGt5byhjfGspfGxlKG5vfHhpKXxsZyggZ3xcXC8oa3xsfHUpfDUwfDU0fFxcLVthLXddKXxsaWJ3fGx5bnh8bTFcXC13fG0zZ2F8bTUwXFwvfG1hKHRlfHVpfHhvKXxtYygwMXwyMXxjYSl8bVxcLWNyfG1lKHJjfHJpKXxtaShvOHxvYXx0cyl8bW1lZnxtbygwMXwwMnxiaXxkZXxkb3x0KFxcLXwgfG98dil8enopfG10KDUwfHAxfHYgKXxtd2JwfG15d2F8bjEwWzAtMl18bjIwWzItM118bjMwKDB8Mil8bjUwKDB8Mnw1KXxuNygwKDB8MSl8MTApfG5lKChjfG0pXFwtfG9ufHRmfHdmfHdnfHd0KXxub2soNnxpKXxuenBofG8yaW18b3AodGl8d3YpfG9yYW58b3dnMXxwODAwfHBhbihhfGR8dCl8cGR4Z3xwZygxM3xcXC0oWzEtOF18YykpfHBoaWx8cGlyZXxwbChheXx1Yyl8cG5cXC0yfHBvKGNrfHJ0fHNlKXxwcm94fHBzaW98cHRcXC1nfHFhXFwtYXxxYygwN3wxMnwyMXwzMnw2MHxcXC1bMi03XXxpXFwtKXxxdGVrfHIzODB8cjYwMHxyYWtzfHJpbTl8cm8odmV8em8pfHM1NVxcL3xzYShnZXxtYXxtbXxtc3xueXx2YSl8c2MoMDF8aFxcLXxvb3xwXFwtKXxzZGtcXC98c2UoYyhcXC18MHwxKXw0N3xtY3xuZHxyaSl8c2doXFwtfHNoYXJ8c2llKFxcLXxtKXxza1xcLTB8c2woNDV8aWQpfHNtKGFsfGFyfGIzfGl0fHQ1KXxzbyhmdHxueSl8c3AoMDF8aFxcLXx2XFwtfHYgKXxzeSgwMXxtYil8dDIoMTh8NTApfHQ2KDAwfDEwfDE4KXx0YShndHxsayl8dGNsXFwtfHRkZ1xcLXx0ZWwoaXxtKXx0aW1cXC18dFxcLW1vfHRvKHBsfHNoKXx0cyg3MHxtXFwtfG0zfG01KXx0eFxcLTl8dXAoXFwuYnxnMXxzaSl8dXRzdHx2NDAwfHY3NTB8dmVyaXx2aShyZ3x0ZSl8dmsoNDB8NVswLTNdfFxcLXYpfHZtNDB8dm9kYXx2dWxjfHZ4KDUyfDUzfDYwfDYxfDcwfDgwfDgxfDgzfDg1fDk4KXx3M2MoXFwtfCApfHdlYmN8d2hpdHx3aShnIHxuY3xudyl8d21sYnx3b251fHg3MDB8eWFzXFwtfHlvdXJ8emV0b3x6dGVcXC0vaSxcbiAgICAgICAgdGFibGV0UGF0dGVybjogL2FuZHJvaWR8aXBhZHxwbGF5Ym9va3xzaWxrL2lcbiAgICB9O1xuXG4gICAgdmFyIGhhc093blByb3AgPSBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LFxuICAgICAgICBpc0FycmF5O1xuXG4gICAgaW1wbC5GQUxMQkFDS19QSE9ORSA9ICdVbmtub3duUGhvbmUnO1xuICAgIGltcGwuRkFMTEJBQ0tfVEFCTEVUID0gJ1Vua25vd25UYWJsZXQnO1xuICAgIGltcGwuRkFMTEJBQ0tfTU9CSUxFID0gJ1Vua25vd25Nb2JpbGUnO1xuXG4gICAgaXNBcnJheSA9ICgnaXNBcnJheScgaW4gQXJyYXkpID9cbiAgICAgICAgQXJyYXkuaXNBcnJheSA6IGZ1bmN0aW9uICh2YWx1ZSkgeyByZXR1cm4gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKHZhbHVlKSA9PT0gJ1tvYmplY3QgQXJyYXldJzsgfTtcblxuICAgIGZ1bmN0aW9uIGVxdWFsSUMoYSwgYikge1xuICAgICAgICByZXR1cm4gYSAhPSBudWxsICYmIGIgIT0gbnVsbCAmJiBhLnRvTG93ZXJDYXNlKCkgPT09IGIudG9Mb3dlckNhc2UoKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBjb250YWluc0lDKGFycmF5LCB2YWx1ZSkge1xuICAgICAgICB2YXIgdmFsdWVMQywgaSwgbGVuID0gYXJyYXkubGVuZ3RoO1xuICAgICAgICBpZiAoIWxlbiB8fCAhdmFsdWUpIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgICB2YWx1ZUxDID0gdmFsdWUudG9Mb3dlckNhc2UoKTtcbiAgICAgICAgZm9yIChpID0gMDsgaSA8IGxlbjsgKytpKSB7XG4gICAgICAgICAgICBpZiAodmFsdWVMQyA9PT0gYXJyYXlbaV0udG9Mb3dlckNhc2UoKSkge1xuICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBjb252ZXJ0UHJvcHNUb1JlZ0V4cChvYmplY3QpIHtcbiAgICAgICAgZm9yICh2YXIga2V5IGluIG9iamVjdCkge1xuICAgICAgICAgICAgaWYgKGhhc093blByb3AuY2FsbChvYmplY3QsIGtleSkpIHtcbiAgICAgICAgICAgICAgICBvYmplY3Rba2V5XSA9IG5ldyBSZWdFeHAob2JqZWN0W2tleV0sICdpJyk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiBwcmVwYXJlVXNlckFnZW50KHVzZXJBZ2VudCkge1xuICAgICAgICByZXR1cm4gKHVzZXJBZ2VudCB8fCAnJykuc3Vic3RyKDAsIDUwMCk7IC8vIG1pdGlnYXRlIHZ1bG5lcmFibGUgdG8gUmVEb1NcbiAgICB9XG5cbiAgICAoZnVuY3Rpb24gaW5pdCgpIHtcbiAgICAgICAgdmFyIGtleSwgdmFsdWVzLCB2YWx1ZSwgaSwgbGVuLCB2ZXJQb3MsIG1vYmlsZURldGVjdFJ1bGVzID0gaW1wbC5tb2JpbGVEZXRlY3RSdWxlcztcbiAgICAgICAgZm9yIChrZXkgaW4gbW9iaWxlRGV0ZWN0UnVsZXMucHJvcHMpIHtcbiAgICAgICAgICAgIGlmIChoYXNPd25Qcm9wLmNhbGwobW9iaWxlRGV0ZWN0UnVsZXMucHJvcHMsIGtleSkpIHtcbiAgICAgICAgICAgICAgICB2YWx1ZXMgPSBtb2JpbGVEZXRlY3RSdWxlcy5wcm9wc1trZXldO1xuICAgICAgICAgICAgICAgIGlmICghaXNBcnJheSh2YWx1ZXMpKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhbHVlcyA9IFt2YWx1ZXNdO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBsZW4gPSB2YWx1ZXMubGVuZ3RoO1xuICAgICAgICAgICAgICAgIGZvciAoaSA9IDA7IGkgPCBsZW47ICsraSkge1xuICAgICAgICAgICAgICAgICAgICB2YWx1ZSA9IHZhbHVlc1tpXTtcbiAgICAgICAgICAgICAgICAgICAgdmVyUG9zID0gdmFsdWUuaW5kZXhPZignW1ZFUl0nKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHZlclBvcyA+PSAwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZSA9IHZhbHVlLnN1YnN0cmluZygwLCB2ZXJQb3MpICsgJyhbXFxcXHcuX1xcXFwrXSspJyArIHZhbHVlLnN1YnN0cmluZyh2ZXJQb3MgKyA1KTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB2YWx1ZXNbaV0gPSBuZXcgUmVnRXhwKHZhbHVlLCAnaScpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBtb2JpbGVEZXRlY3RSdWxlcy5wcm9wc1trZXldID0gdmFsdWVzO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGNvbnZlcnRQcm9wc1RvUmVnRXhwKG1vYmlsZURldGVjdFJ1bGVzLm9zcyk7XG4gICAgICAgIGNvbnZlcnRQcm9wc1RvUmVnRXhwKG1vYmlsZURldGVjdFJ1bGVzLnBob25lcyk7XG4gICAgICAgIGNvbnZlcnRQcm9wc1RvUmVnRXhwKG1vYmlsZURldGVjdFJ1bGVzLnRhYmxldHMpO1xuICAgICAgICBjb252ZXJ0UHJvcHNUb1JlZ0V4cChtb2JpbGVEZXRlY3RSdWxlcy51YXMpO1xuICAgICAgICBjb252ZXJ0UHJvcHNUb1JlZ0V4cChtb2JpbGVEZXRlY3RSdWxlcy51dGlscyk7XG5cbiAgICAgICAgLy8gY29weSBzb21lIHBhdHRlcm5zIHRvIG9zczAgd2hpY2ggYXJlIHRlc3RlZCBmaXJzdCAoc2VlIGlzc3VlIzE1KVxuICAgICAgICBtb2JpbGVEZXRlY3RSdWxlcy5vc3MwID0ge1xuICAgICAgICAgICAgV2luZG93c1Bob25lT1M6IG1vYmlsZURldGVjdFJ1bGVzLm9zcy5XaW5kb3dzUGhvbmVPUyxcbiAgICAgICAgICAgIFdpbmRvd3NNb2JpbGVPUzogbW9iaWxlRGV0ZWN0UnVsZXMub3NzLldpbmRvd3NNb2JpbGVPU1xuICAgICAgICB9O1xuICAgIH0oKSk7XG5cbiAgICAvKipcbiAgICAgKiBUZXN0IHVzZXJBZ2VudCBzdHJpbmcgYWdhaW5zdCBhIHNldCBvZiBydWxlcyBhbmQgZmluZCB0aGUgZmlyc3QgbWF0Y2hlZCBrZXkuXG4gICAgICogQHBhcmFtIHtPYmplY3R9IHJ1bGVzIChrZXkgaXMgU3RyaW5nLCB2YWx1ZSBpcyBSZWdFeHApXG4gICAgICogQHBhcmFtIHtTdHJpbmd9IHVzZXJBZ2VudCB0aGUgbmF2aWdhdG9yLnVzZXJBZ2VudCAob3IgSFRUUC1IZWFkZXIgJ1VzZXItQWdlbnQnKS5cbiAgICAgKiBAcmV0dXJucyB7U3RyaW5nfG51bGx9IHRoZSBtYXRjaGVkIGtleSBpZiBmb3VuZCwgb3RoZXJ3aXNlIDx0dD5udWxsPC90dD5cbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqL1xuICAgIGltcGwuZmluZE1hdGNoID0gZnVuY3Rpb24ocnVsZXMsIHVzZXJBZ2VudCkge1xuICAgICAgICBmb3IgKHZhciBrZXkgaW4gcnVsZXMpIHtcbiAgICAgICAgICAgIGlmIChoYXNPd25Qcm9wLmNhbGwocnVsZXMsIGtleSkpIHtcbiAgICAgICAgICAgICAgICBpZiAocnVsZXNba2V5XS50ZXN0KHVzZXJBZ2VudCkpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGtleTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIFRlc3QgdXNlckFnZW50IHN0cmluZyBhZ2FpbnN0IGEgc2V0IG9mIHJ1bGVzIGFuZCByZXR1cm4gYW4gYXJyYXkgb2YgbWF0Y2hlZCBrZXlzLlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBydWxlcyAoa2V5IGlzIFN0cmluZywgdmFsdWUgaXMgUmVnRXhwKVxuICAgICAqIEBwYXJhbSB7U3RyaW5nfSB1c2VyQWdlbnQgdGhlIG5hdmlnYXRvci51c2VyQWdlbnQgKG9yIEhUVFAtSGVhZGVyICdVc2VyLUFnZW50JykuXG4gICAgICogQHJldHVybnMge0FycmF5fSBhbiBhcnJheSBvZiBtYXRjaGVkIGtleXMsIG1heSBiZSBlbXB0eSB3aGVuIHRoZXJlIGlzIG5vIG1hdGNoLCBidXQgbm90IDx0dD5udWxsPC90dD5cbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqL1xuICAgIGltcGwuZmluZE1hdGNoZXMgPSBmdW5jdGlvbihydWxlcywgdXNlckFnZW50KSB7XG4gICAgICAgIHZhciByZXN1bHQgPSBbXTtcbiAgICAgICAgZm9yICh2YXIga2V5IGluIHJ1bGVzKSB7XG4gICAgICAgICAgICBpZiAoaGFzT3duUHJvcC5jYWxsKHJ1bGVzLCBrZXkpKSB7XG4gICAgICAgICAgICAgICAgaWYgKHJ1bGVzW2tleV0udGVzdCh1c2VyQWdlbnQpKSB7XG4gICAgICAgICAgICAgICAgICAgIHJlc3VsdC5wdXNoKGtleSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIENoZWNrIHRoZSB2ZXJzaW9uIG9mIHRoZSBnaXZlbiBwcm9wZXJ0eSBpbiB0aGUgVXNlci1BZ2VudC5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7U3RyaW5nfSBwcm9wZXJ0eU5hbWVcbiAgICAgKiBAcGFyYW0ge1N0cmluZ30gdXNlckFnZW50XG4gICAgICogQHJldHVybiB7U3RyaW5nfSB2ZXJzaW9uIG9yIDx0dD5udWxsPC90dD4gaWYgdmVyc2lvbiBub3QgZm91bmRcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqL1xuICAgIGltcGwuZ2V0VmVyc2lvblN0ciA9IGZ1bmN0aW9uIChwcm9wZXJ0eU5hbWUsIHVzZXJBZ2VudCkge1xuICAgICAgICB2YXIgcHJvcHMgPSBpbXBsLm1vYmlsZURldGVjdFJ1bGVzLnByb3BzLCBwYXR0ZXJucywgaSwgbGVuLCBtYXRjaDtcbiAgICAgICAgaWYgKGhhc093blByb3AuY2FsbChwcm9wcywgcHJvcGVydHlOYW1lKSkge1xuICAgICAgICAgICAgcGF0dGVybnMgPSBwcm9wc1twcm9wZXJ0eU5hbWVdO1xuICAgICAgICAgICAgbGVuID0gcGF0dGVybnMubGVuZ3RoO1xuICAgICAgICAgICAgZm9yIChpID0gMDsgaSA8IGxlbjsgKytpKSB7XG4gICAgICAgICAgICAgICAgbWF0Y2ggPSBwYXR0ZXJuc1tpXS5leGVjKHVzZXJBZ2VudCk7XG4gICAgICAgICAgICAgICAgaWYgKG1hdGNoICE9PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBtYXRjaFsxXTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIENoZWNrIHRoZSB2ZXJzaW9uIG9mIHRoZSBnaXZlbiBwcm9wZXJ0eSBpbiB0aGUgVXNlci1BZ2VudC5cbiAgICAgKiBXaWxsIHJldHVybiBhIGZsb2F0IG51bWJlci4gKGVnLiAyXzAgd2lsbCByZXR1cm4gMi4wLCA0LjMuMSB3aWxsIHJldHVybiA0LjMxKVxuICAgICAqXG4gICAgICogQHBhcmFtIHtTdHJpbmd9IHByb3BlcnR5TmFtZVxuICAgICAqIEBwYXJhbSB7U3RyaW5nfSB1c2VyQWdlbnRcbiAgICAgKiBAcmV0dXJuIHtOdW1iZXJ9IHZlcnNpb24gb3IgPHR0Pk5hTjwvdHQ+IGlmIHZlcnNpb24gbm90IGZvdW5kXG4gICAgICogQHByaXZhdGVcbiAgICAgKi9cbiAgICBpbXBsLmdldFZlcnNpb24gPSBmdW5jdGlvbiAocHJvcGVydHlOYW1lLCB1c2VyQWdlbnQpIHtcbiAgICAgICAgdmFyIHZlcnNpb24gPSBpbXBsLmdldFZlcnNpb25TdHIocHJvcGVydHlOYW1lLCB1c2VyQWdlbnQpO1xuICAgICAgICByZXR1cm4gdmVyc2lvbiA/IGltcGwucHJlcGFyZVZlcnNpb25Obyh2ZXJzaW9uKSA6IE5hTjtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogUHJlcGFyZSB0aGUgdmVyc2lvbiBudW1iZXIuXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge1N0cmluZ30gdmVyc2lvblxuICAgICAqIEByZXR1cm4ge051bWJlcn0gdGhlIHZlcnNpb24gbnVtYmVyIGFzIGEgZmxvYXRpbmcgbnVtYmVyXG4gICAgICogQHByaXZhdGVcbiAgICAgKi9cbiAgICBpbXBsLnByZXBhcmVWZXJzaW9uTm8gPSBmdW5jdGlvbiAodmVyc2lvbikge1xuICAgICAgICB2YXIgbnVtYmVycztcblxuICAgICAgICBudW1iZXJzID0gdmVyc2lvbi5zcGxpdCgvW2Etei5fIFxcL1xcLV0vaSk7XG4gICAgICAgIGlmIChudW1iZXJzLmxlbmd0aCA9PT0gMSkge1xuICAgICAgICAgICAgdmVyc2lvbiA9IG51bWJlcnNbMF07XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG51bWJlcnMubGVuZ3RoID4gMSkge1xuICAgICAgICAgICAgdmVyc2lvbiA9IG51bWJlcnNbMF0gKyAnLic7XG4gICAgICAgICAgICBudW1iZXJzLnNoaWZ0KCk7XG4gICAgICAgICAgICB2ZXJzaW9uICs9IG51bWJlcnMuam9pbignJyk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIE51bWJlcih2ZXJzaW9uKTtcbiAgICB9O1xuXG4gICAgaW1wbC5pc01vYmlsZUZhbGxiYWNrID0gZnVuY3Rpb24gKHVzZXJBZ2VudCkge1xuICAgICAgICByZXR1cm4gaW1wbC5kZXRlY3RNb2JpbGVCcm93c2Vycy5mdWxsUGF0dGVybi50ZXN0KHVzZXJBZ2VudCkgfHxcbiAgICAgICAgICAgIGltcGwuZGV0ZWN0TW9iaWxlQnJvd3NlcnMuc2hvcnRQYXR0ZXJuLnRlc3QodXNlckFnZW50LnN1YnN0cigwLDQpKTtcbiAgICB9O1xuXG4gICAgaW1wbC5pc1RhYmxldEZhbGxiYWNrID0gZnVuY3Rpb24gKHVzZXJBZ2VudCkge1xuICAgICAgICByZXR1cm4gaW1wbC5kZXRlY3RNb2JpbGVCcm93c2Vycy50YWJsZXRQYXR0ZXJuLnRlc3QodXNlckFnZW50KTtcbiAgICB9O1xuXG4gICAgaW1wbC5wcmVwYXJlRGV0ZWN0aW9uQ2FjaGUgPSBmdW5jdGlvbiAoY2FjaGUsIHVzZXJBZ2VudCwgbWF4UGhvbmVXaWR0aCkge1xuICAgICAgICBpZiAoY2FjaGUubW9iaWxlICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICB2YXIgcGhvbmUsIHRhYmxldCwgcGhvbmVTaXplZDtcblxuICAgICAgICAvLyBmaXJzdCBjaGVjayBmb3Igc3Ryb25nZXIgdGFibGV0IHJ1bGVzLCB0aGVuIHBob25lIChzZWUgaXNzdWUjNSlcbiAgICAgICAgdGFibGV0ID0gaW1wbC5maW5kTWF0Y2goaW1wbC5tb2JpbGVEZXRlY3RSdWxlcy50YWJsZXRzLCB1c2VyQWdlbnQpO1xuICAgICAgICBpZiAodGFibGV0KSB7XG4gICAgICAgICAgICBjYWNoZS5tb2JpbGUgPSBjYWNoZS50YWJsZXQgPSB0YWJsZXQ7XG4gICAgICAgICAgICBjYWNoZS5waG9uZSA9IG51bGw7XG4gICAgICAgICAgICByZXR1cm47IC8vIHVuYW1iaWd1b3VzbHkgaWRlbnRpZmllZCBhcyB0YWJsZXRcbiAgICAgICAgfVxuXG4gICAgICAgIHBob25lID0gaW1wbC5maW5kTWF0Y2goaW1wbC5tb2JpbGVEZXRlY3RSdWxlcy5waG9uZXMsIHVzZXJBZ2VudCk7XG4gICAgICAgIGlmIChwaG9uZSkge1xuICAgICAgICAgICAgY2FjaGUubW9iaWxlID0gY2FjaGUucGhvbmUgPSBwaG9uZTtcbiAgICAgICAgICAgIGNhY2hlLnRhYmxldCA9IG51bGw7XG4gICAgICAgICAgICByZXR1cm47IC8vIHVuYW1iaWd1b3VzbHkgaWRlbnRpZmllZCBhcyBwaG9uZVxuICAgICAgICB9XG5cbiAgICAgICAgLy8gb3VyIHJ1bGVzIGhhdmVuJ3QgZm91bmQgYSBtYXRjaCAtPiB0cnkgbW9yZSBnZW5lcmFsIGZhbGxiYWNrIHJ1bGVzXG4gICAgICAgIGlmIChpbXBsLmlzTW9iaWxlRmFsbGJhY2sodXNlckFnZW50KSkge1xuICAgICAgICAgICAgcGhvbmVTaXplZCA9IE1vYmlsZURldGVjdC5pc1Bob25lU2l6ZWQobWF4UGhvbmVXaWR0aCk7XG4gICAgICAgICAgICBpZiAocGhvbmVTaXplZCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgY2FjaGUubW9iaWxlID0gaW1wbC5GQUxMQkFDS19NT0JJTEU7XG4gICAgICAgICAgICAgICAgY2FjaGUudGFibGV0ID0gY2FjaGUucGhvbmUgPSBudWxsO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChwaG9uZVNpemVkKSB7XG4gICAgICAgICAgICAgICAgY2FjaGUubW9iaWxlID0gY2FjaGUucGhvbmUgPSBpbXBsLkZBTExCQUNLX1BIT05FO1xuICAgICAgICAgICAgICAgIGNhY2hlLnRhYmxldCA9IG51bGw7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGNhY2hlLm1vYmlsZSA9IGNhY2hlLnRhYmxldCA9IGltcGwuRkFMTEJBQ0tfVEFCTEVUO1xuICAgICAgICAgICAgICAgIGNhY2hlLnBob25lID0gbnVsbDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIGlmIChpbXBsLmlzVGFibGV0RmFsbGJhY2sodXNlckFnZW50KSkge1xuICAgICAgICAgICAgY2FjaGUubW9iaWxlID0gY2FjaGUudGFibGV0ID0gaW1wbC5GQUxMQkFDS19UQUJMRVQ7XG4gICAgICAgICAgICBjYWNoZS5waG9uZSA9IG51bGw7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAvLyBub3QgbW9iaWxlIGF0IGFsbCFcbiAgICAgICAgICAgIGNhY2hlLm1vYmlsZSA9IGNhY2hlLnRhYmxldCA9IGNhY2hlLnBob25lID0gbnVsbDtcbiAgICAgICAgfVxuICAgIH07XG5cbiAgICAvLyB0IGlzIGEgcmVmZXJlbmNlIHRvIGEgTW9iaWxlRGV0ZWN0IGluc3RhbmNlXG4gICAgaW1wbC5tb2JpbGVHcmFkZSA9IGZ1bmN0aW9uICh0KSB7XG4gICAgICAgIC8vIGltcGwgbm90ZTpcbiAgICAgICAgLy8gVG8ga2VlcCBpbiBzeW5jIHcvIE1vYmlsZV9EZXRlY3QucGhwIGVhc2lseSwgdGhlIGZvbGxvd2luZyBjb2RlIGlzIHRpZ2h0bHkgYWxpZ25lZCB0byB0aGUgUEhQIHZlcnNpb24uXG4gICAgICAgIC8vIFdoZW4gY2hhbmdlcyBhcmUgbWFkZSBpbiBNb2JpbGVfRGV0ZWN0LnBocCwgY29weSB0aGlzIG1ldGhvZCBhbmQgcmVwbGFjZTpcbiAgICAgICAgLy8gICAgICR0aGlzLT4gLyB0LlxuICAgICAgICAvLyAgICAgc2VsZjo6TU9CSUxFX0dSQURFXyguKSAvICckMSdcbiAgICAgICAgLy8gICAgICwgc2VsZjo6VkVSU0lPTl9UWVBFX0ZMT0FUIC8gKG5vdGhpbmcpXG4gICAgICAgIC8vICAgICBpc0lPUygpIC8gb3MoJ2lPUycpXG4gICAgICAgIC8vICAgICBbcmVnXSAvIChub3RoaW5nKSAgIDwtLSBqc2RlbGl2ciBjb21wbGFpbmluZyBhYm91dCB1bmVzY2FwZWQgdW5pY29kZSBjaGFyYWN0ZXIgVSswMEFFXG4gICAgICAgIHZhciAkaXNNb2JpbGUgPSB0Lm1vYmlsZSgpICE9PSBudWxsO1xuXG4gICAgICAgIGlmIChcbiAgICAgICAgICAgIC8vIEFwcGxlIGlPUyAzLjItNS4xIC0gVGVzdGVkIG9uIHRoZSBvcmlnaW5hbCBpUGFkICg0LjMgLyA1LjApLCBpUGFkIDIgKDQuMyksIGlQYWQgMyAoNS4xKSwgb3JpZ2luYWwgaVBob25lICgzLjEpLCBpUGhvbmUgMyAoMy4yKSwgM0dTICg0LjMpLCA0ICg0LjMgLyA1LjApLCBhbmQgNFMgKDUuMSlcbiAgICAgICAgICAgIHQub3MoJ2lPUycpICYmIHQudmVyc2lvbignaVBhZCcpPj00LjMgfHxcbiAgICAgICAgICAgIHQub3MoJ2lPUycpICYmIHQudmVyc2lvbignaVBob25lJyk+PTMuMSB8fFxuICAgICAgICAgICAgdC5vcygnaU9TJykgJiYgdC52ZXJzaW9uKCdpUG9kJyk+PTMuMSB8fFxuXG4gICAgICAgICAgICAvLyBBbmRyb2lkIDIuMS0yLjMgLSBUZXN0ZWQgb24gdGhlIEhUQyBJbmNyZWRpYmxlICgyLjIpLCBvcmlnaW5hbCBEcm9pZCAoMi4yKSwgSFRDIEFyaWEgKDIuMSksIEdvb2dsZSBOZXh1cyBTICgyLjMpLiBGdW5jdGlvbmFsIG9uIDEuNSAmIDEuNiBidXQgcGVyZm9ybWFuY2UgbWF5IGJlIHNsdWdnaXNoLCB0ZXN0ZWQgb24gR29vZ2xlIEcxICgxLjUpXG4gICAgICAgICAgICAvLyBBbmRyb2lkIDMuMSAoSG9uZXljb21iKSAgLSBUZXN0ZWQgb24gdGhlIFNhbXN1bmcgR2FsYXh5IFRhYiAxMC4xIGFuZCBNb3Rvcm9sYSBYT09NXG4gICAgICAgICAgICAvLyBBbmRyb2lkIDQuMCAoSUNTKSAgLSBUZXN0ZWQgb24gYSBHYWxheHkgTmV4dXMuIE5vdGU6IHRyYW5zaXRpb24gcGVyZm9ybWFuY2UgY2FuIGJlIHBvb3Igb24gdXBncmFkZWQgZGV2aWNlc1xuICAgICAgICAgICAgLy8gQW5kcm9pZCA0LjEgKEplbGx5IEJlYW4pICAtIFRlc3RlZCBvbiBhIEdhbGF4eSBOZXh1cyBhbmQgR2FsYXh5IDdcbiAgICAgICAgICAgICggdC52ZXJzaW9uKCdBbmRyb2lkJyk+Mi4xICYmIHQuaXMoJ1dlYmtpdCcpICkgfHxcblxuICAgICAgICAgICAgLy8gV2luZG93cyBQaG9uZSA3LTcuNSAtIFRlc3RlZCBvbiB0aGUgSFRDIFN1cnJvdW5kICg3LjApIEhUQyBUcm9waHkgKDcuNSksIExHLUU5MDAgKDcuNSksIE5va2lhIEx1bWlhIDgwMFxuICAgICAgICAgICAgdC52ZXJzaW9uKCdXaW5kb3dzIFBob25lIE9TJyk+PTcuMCB8fFxuXG4gICAgICAgICAgICAvLyBCbGFja2JlcnJ5IDcgLSBUZXN0ZWQgb24gQmxhY2tCZXJyeSBUb3JjaCA5ODEwXG4gICAgICAgICAgICAvLyBCbGFja2JlcnJ5IDYuMCAtIFRlc3RlZCBvbiB0aGUgVG9yY2ggOTgwMCBhbmQgU3R5bGUgOTY3MFxuICAgICAgICAgICAgdC5pcygnQmxhY2tCZXJyeScpICYmIHQudmVyc2lvbignQmxhY2tCZXJyeScpPj02LjAgfHxcbiAgICAgICAgICAgIC8vIEJsYWNrYmVycnkgUGxheWJvb2sgKDEuMC0yLjApIC0gVGVzdGVkIG9uIFBsYXlCb29rXG4gICAgICAgICAgICB0Lm1hdGNoKCdQbGF5Ym9vay4qVGFibGV0JykgfHxcblxuICAgICAgICAgICAgLy8gUGFsbSBXZWJPUyAoMS40LTIuMCkgLSBUZXN0ZWQgb24gdGhlIFBhbG0gUGl4aSAoMS40KSwgUHJlICgxLjQpLCBQcmUgMiAoMi4wKVxuICAgICAgICAgICAgKCB0LnZlcnNpb24oJ3dlYk9TJyk+PTEuNCAmJiB0Lm1hdGNoKCdQYWxtfFByZXxQaXhpJykgKSB8fFxuICAgICAgICAgICAgLy8gUGFsbSBXZWJPUyAzLjAgIC0gVGVzdGVkIG9uIEhQIFRvdWNoUGFkXG4gICAgICAgICAgICB0Lm1hdGNoKCdocC4qVG91Y2hQYWQnKSB8fFxuXG4gICAgICAgICAgICAvLyBGaXJlZm94IE1vYmlsZSAoMTIgQmV0YSkgLSBUZXN0ZWQgb24gQW5kcm9pZCAyLjMgZGV2aWNlXG4gICAgICAgICAgICAoIHQuaXMoJ0ZpcmVmb3gnKSAmJiB0LnZlcnNpb24oJ0ZpcmVmb3gnKT49MTIgKSB8fFxuXG4gICAgICAgICAgICAvLyBDaHJvbWUgZm9yIEFuZHJvaWQgLSBUZXN0ZWQgb24gQW5kcm9pZCA0LjAsIDQuMSBkZXZpY2VcbiAgICAgICAgICAgICggdC5pcygnQ2hyb21lJykgJiYgdC5pcygnQW5kcm9pZE9TJykgJiYgdC52ZXJzaW9uKCdBbmRyb2lkJyk+PTQuMCApIHx8XG5cbiAgICAgICAgICAgIC8vIFNreWZpcmUgNC4xIC0gVGVzdGVkIG9uIEFuZHJvaWQgMi4zIGRldmljZVxuICAgICAgICAgICAgKCB0LmlzKCdTa3lmaXJlJykgJiYgdC52ZXJzaW9uKCdTa3lmaXJlJyk+PTQuMSAmJiB0LmlzKCdBbmRyb2lkT1MnKSAmJiB0LnZlcnNpb24oJ0FuZHJvaWQnKT49Mi4zICkgfHxcblxuICAgICAgICAgICAgLy8gT3BlcmEgTW9iaWxlIDExLjUtMTI6IFRlc3RlZCBvbiBBbmRyb2lkIDIuM1xuICAgICAgICAgICAgKCB0LmlzKCdPcGVyYScpICYmIHQudmVyc2lvbignT3BlcmEgTW9iaScpPjExICYmIHQuaXMoJ0FuZHJvaWRPUycpICkgfHxcblxuICAgICAgICAgICAgLy8gTWVlZ28gMS4yIC0gVGVzdGVkIG9uIE5va2lhIDk1MCBhbmQgTjlcbiAgICAgICAgICAgIHQuaXMoJ01lZUdvT1MnKSB8fFxuXG4gICAgICAgICAgICAvLyBUaXplbiAocHJlLXJlbGVhc2UpIC0gVGVzdGVkIG9uIGVhcmx5IGhhcmR3YXJlXG4gICAgICAgICAgICB0LmlzKCdUaXplbicpIHx8XG5cbiAgICAgICAgICAgIC8vIFNhbXN1bmcgQmFkYSAyLjAgLSBUZXN0ZWQgb24gYSBTYW1zdW5nIFdhdmUgMywgRG9scGhpbiBicm93c2VyXG4gICAgICAgICAgICAvLyBAdG9kbzogbW9yZSB0ZXN0cyBoZXJlIVxuICAgICAgICAgICAgdC5pcygnRG9sZmluJykgJiYgdC52ZXJzaW9uKCdCYWRhJyk+PTIuMCB8fFxuXG4gICAgICAgICAgICAvLyBVQyBCcm93c2VyIC0gVGVzdGVkIG9uIEFuZHJvaWQgMi4zIGRldmljZVxuICAgICAgICAgICAgKCAodC5pcygnVUMgQnJvd3NlcicpIHx8IHQuaXMoJ0RvbGZpbicpKSAmJiB0LnZlcnNpb24oJ0FuZHJvaWQnKT49Mi4zICkgfHxcblxuICAgICAgICAgICAgLy8gS2luZGxlIDMgYW5kIEZpcmUgIC0gVGVzdGVkIG9uIHRoZSBidWlsdC1pbiBXZWJLaXQgYnJvd3NlciBmb3IgZWFjaFxuICAgICAgICAgICAgKCB0Lm1hdGNoKCdLaW5kbGUgRmlyZScpIHx8XG4gICAgICAgICAgICAgICAgdC5pcygnS2luZGxlJykgJiYgdC52ZXJzaW9uKCdLaW5kbGUnKT49My4wICkgfHxcblxuICAgICAgICAgICAgLy8gTm9vayBDb2xvciAxLjQuMSAtIFRlc3RlZCBvbiBvcmlnaW5hbCBOb29rIENvbG9yLCBub3QgTm9vayBUYWJsZXRcbiAgICAgICAgICAgIHQuaXMoJ0FuZHJvaWRPUycpICYmIHQuaXMoJ05vb2tUYWJsZXQnKSB8fFxuXG4gICAgICAgICAgICAvLyBDaHJvbWUgRGVza3RvcCAxMS0yMSAtIFRlc3RlZCBvbiBPUyBYIDEwLjcgYW5kIFdpbmRvd3MgN1xuICAgICAgICAgICAgdC52ZXJzaW9uKCdDaHJvbWUnKT49MTEgJiYgISRpc01vYmlsZSB8fFxuXG4gICAgICAgICAgICAvLyBTYWZhcmkgRGVza3RvcCA0LTUgLSBUZXN0ZWQgb24gT1MgWCAxMC43IGFuZCBXaW5kb3dzIDdcbiAgICAgICAgICAgIHQudmVyc2lvbignU2FmYXJpJyk+PTUuMCAmJiAhJGlzTW9iaWxlIHx8XG5cbiAgICAgICAgICAgIC8vIEZpcmVmb3ggRGVza3RvcCA0LTEzIC0gVGVzdGVkIG9uIE9TIFggMTAuNyBhbmQgV2luZG93cyA3XG4gICAgICAgICAgICB0LnZlcnNpb24oJ0ZpcmVmb3gnKT49NC4wICYmICEkaXNNb2JpbGUgfHxcblxuICAgICAgICAgICAgLy8gSW50ZXJuZXQgRXhwbG9yZXIgNy05IC0gVGVzdGVkIG9uIFdpbmRvd3MgWFAsIFZpc3RhIGFuZCA3XG4gICAgICAgICAgICB0LnZlcnNpb24oJ01TSUUnKT49Ny4wICYmICEkaXNNb2JpbGUgfHxcblxuICAgICAgICAgICAgLy8gT3BlcmEgRGVza3RvcCAxMC0xMiAtIFRlc3RlZCBvbiBPUyBYIDEwLjcgYW5kIFdpbmRvd3MgN1xuICAgICAgICAgICAgLy8gQHJlZmVyZW5jZTogaHR0cDovL215Lm9wZXJhLmNvbS9jb21tdW5pdHkvb3BlbndlYi9pZG9wZXJhL1xuICAgICAgICAgICAgdC52ZXJzaW9uKCdPcGVyYScpPj0xMCAmJiAhJGlzTW9iaWxlXG5cbiAgICAgICAgICAgICl7XG4gICAgICAgICAgICByZXR1cm4gJ0EnO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKFxuICAgICAgICAgICAgdC5vcygnaU9TJykgJiYgdC52ZXJzaW9uKCdpUGFkJyk8NC4zIHx8XG4gICAgICAgICAgICB0Lm9zKCdpT1MnKSAmJiB0LnZlcnNpb24oJ2lQaG9uZScpPDMuMSB8fFxuICAgICAgICAgICAgdC5vcygnaU9TJykgJiYgdC52ZXJzaW9uKCdpUG9kJyk8My4xIHx8XG5cbiAgICAgICAgICAgIC8vIEJsYWNrYmVycnkgNS4wOiBUZXN0ZWQgb24gdGhlIFN0b3JtIDIgOTU1MCwgQm9sZCA5NzcwXG4gICAgICAgICAgICB0LmlzKCdCbGFja2JlcnJ5JykgJiYgdC52ZXJzaW9uKCdCbGFja0JlcnJ5Jyk+PTUgJiYgdC52ZXJzaW9uKCdCbGFja0JlcnJ5Jyk8NiB8fFxuXG4gICAgICAgICAgICAvL09wZXJhIE1pbmkgKDUuMC02LjUpIC0gVGVzdGVkIG9uIGlPUyAzLjIvNC4zIGFuZCBBbmRyb2lkIDIuM1xuICAgICAgICAgICAgKCB0LnZlcnNpb24oJ09wZXJhIE1pbmknKT49NS4wICYmIHQudmVyc2lvbignT3BlcmEgTWluaScpPD02LjUgJiZcbiAgICAgICAgICAgICAgICAodC52ZXJzaW9uKCdBbmRyb2lkJyk+PTIuMyB8fCB0LmlzKCdpT1MnKSkgKSB8fFxuXG4gICAgICAgICAgICAvLyBOb2tpYSBTeW1iaWFuXjMgLSBUZXN0ZWQgb24gTm9raWEgTjggKFN5bWJpYW5eMyksIEM3IChTeW1iaWFuXjMpLCBhbHNvIHdvcmtzIG9uIE45NyAoU3ltYmlhbl4xKVxuICAgICAgICAgICAgdC5tYXRjaCgnTm9raWFOOHxOb2tpYUM3fE45Ny4qU2VyaWVzNjB8U3ltYmlhbi8zJykgfHxcblxuICAgICAgICAgICAgLy8gQHRvZG86IHJlcG9ydCB0aGlzICh0ZXN0ZWQgb24gTm9raWEgTjcxKVxuICAgICAgICAgICAgdC52ZXJzaW9uKCdPcGVyYSBNb2JpJyk+PTExICYmIHQuaXMoJ1N5bWJpYW5PUycpXG4gICAgICAgICAgICApe1xuICAgICAgICAgICAgcmV0dXJuICdCJztcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChcbiAgICAgICAgLy8gQmxhY2tiZXJyeSA0LnggLSBUZXN0ZWQgb24gdGhlIEN1cnZlIDgzMzBcbiAgICAgICAgICAgIHQudmVyc2lvbignQmxhY2tCZXJyeScpPDUuMCB8fFxuICAgICAgICAgICAgLy8gV2luZG93cyBNb2JpbGUgLSBUZXN0ZWQgb24gdGhlIEhUQyBMZW8gKFdpbk1vIDUuMilcbiAgICAgICAgICAgIHQubWF0Y2goJ01TSUVNb2JpbGV8V2luZG93cyBDRS4qTW9iaWxlJykgfHwgdC52ZXJzaW9uKCdXaW5kb3dzIE1vYmlsZScpPD01LjJcblxuICAgICAgICAgICAgKXtcbiAgICAgICAgICAgIHJldHVybiAnQyc7XG4gICAgICAgIH1cblxuICAgICAgICAvL0FsbCBvbGRlciBzbWFydHBob25lIHBsYXRmb3JtcyBhbmQgZmVhdHVyZXBob25lcyAtIEFueSBkZXZpY2UgdGhhdCBkb2Vzbid0IHN1cHBvcnQgbWVkaWEgcXVlcmllc1xuICAgICAgICAvL3dpbGwgcmVjZWl2ZSB0aGUgYmFzaWMsIEMgZ3JhZGUgZXhwZXJpZW5jZS5cbiAgICAgICAgcmV0dXJuICdDJztcbiAgICB9O1xuXG4gICAgaW1wbC5kZXRlY3RPUyA9IGZ1bmN0aW9uICh1YSkge1xuICAgICAgICByZXR1cm4gaW1wbC5maW5kTWF0Y2goaW1wbC5tb2JpbGVEZXRlY3RSdWxlcy5vc3MwLCB1YSkgfHxcbiAgICAgICAgICAgIGltcGwuZmluZE1hdGNoKGltcGwubW9iaWxlRGV0ZWN0UnVsZXMub3NzLCB1YSk7XG4gICAgfTtcblxuICAgIGltcGwuZ2V0RGV2aWNlU21hbGxlclNpZGUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiB3aW5kb3cuc2NyZWVuLndpZHRoIDwgd2luZG93LnNjcmVlbi5oZWlnaHQgP1xuICAgICAgICAgICAgd2luZG93LnNjcmVlbi53aWR0aCA6XG4gICAgICAgICAgICB3aW5kb3cuc2NyZWVuLmhlaWdodDtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogQ29uc3RydWN0b3IgZm9yIE1vYmlsZURldGVjdCBvYmplY3QuXG4gICAgICogPGJyPlxuICAgICAqIFN1Y2ggYW4gb2JqZWN0IHdpbGwga2VlcCBhIHJlZmVyZW5jZSB0byB0aGUgZ2l2ZW4gdXNlci1hZ2VudCBzdHJpbmcgYW5kIGNhY2hlIG1vc3Qgb2YgdGhlIGRldGVjdCBxdWVyaWVzLjxicj5cbiAgICAgKiA8ZGl2IHN0eWxlPVwiYmFja2dyb3VuZC1jb2xvcjogI2Q5ZWRmNzsgYm9yZGVyOiAxcHggc29saWQgI2JjZThmMTsgY29sb3I6ICMzYTg3YWQ7IHBhZGRpbmc6IDE0cHg7IGJvcmRlci1yYWRpdXM6IDJweDsgbWFyZ2luLXRvcDogMjBweFwiPlxuICAgICAqICAgICA8c3Ryb25nPkZpbmQgaW5mb3JtYXRpb24gaG93IHRvIGRvd25sb2FkIGFuZCBpbnN0YWxsOjwvc3Ryb25nPlxuICAgICAqICAgICA8YSBocmVmPVwiaHR0cHM6Ly9naXRodWIuY29tL2hnb2VibC9tb2JpbGUtZGV0ZWN0LmpzL1wiPmdpdGh1Yi5jb20vaGdvZWJsL21vYmlsZS1kZXRlY3QuanMvPC9hPlxuICAgICAqIDwvZGl2PlxuICAgICAqXG4gICAgICogQGV4YW1wbGUgPHByZT5cbiAgICAgKiAgICAgdmFyIG1kID0gbmV3IE1vYmlsZURldGVjdCh3aW5kb3cubmF2aWdhdG9yLnVzZXJBZ2VudCk7XG4gICAgICogICAgIGlmIChtZC5tb2JpbGUoKSkge1xuICAgICAqICAgICAgICAgbG9jYXRpb24uaHJlZiA9IChtZC5tb2JpbGVHcmFkZSgpID09PSAnQScpID8gJy9tb2JpbGUvJyA6ICcvbHlueC8nO1xuICAgICAqICAgICB9XG4gICAgICogPC9wcmU+XG4gICAgICpcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gdXNlckFnZW50IHR5cGljYWxseSB0YWtlbiBmcm9tIHdpbmRvdy5uYXZpZ2F0b3IudXNlckFnZW50IG9yIGh0dHBfaGVhZGVyWydVc2VyLUFnZW50J11cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW21heFBob25lV2lkdGg9NjAwXSA8c3Ryb25nPm9ubHkgZm9yIGJyb3dzZXJzPC9zdHJvbmc+IHNwZWNpZnkgYSB2YWx1ZSBmb3IgdGhlIG1heGltdW1cbiAgICAgKiAgICAgICAgd2lkdGggb2Ygc21hbGxlc3QgZGV2aWNlIHNpZGUgKGluIGxvZ2ljYWwgXCJDU1NcIiBwaXhlbHMpIHVudGlsIGEgZGV2aWNlIGRldGVjdGVkIGFzIG1vYmlsZSB3aWxsIGJlIGhhbmRsZWRcbiAgICAgKiAgICAgICAgYXMgcGhvbmUuXG4gICAgICogICAgICAgIFRoaXMgaXMgb25seSB1c2VkIGluIGNhc2VzIHdoZXJlIHRoZSBkZXZpY2UgY2Fubm90IGJlIGNsYXNzaWZpZWQgYXMgcGhvbmUgb3IgdGFibGV0Ljxicj5cbiAgICAgKiAgICAgICAgU2VlIDxhIGhyZWY9XCJodHRwOi8vZGV2ZWxvcGVyLmFuZHJvaWQuY29tL2d1aWRlL3ByYWN0aWNlcy9zY3JlZW5zX3N1cHBvcnQuaHRtbFwiPkRlY2xhcmluZyBUYWJsZXQgTGF5b3V0c1xuICAgICAqICAgICAgICBmb3IgQW5kcm9pZDwvYT4uPGJyPlxuICAgICAqICAgICAgICBJZiB5b3UgcHJvdmlkZSBhIHZhbHVlIDwgMCwgdGhlbiB0aGlzIFwiZnV6enlcIiBjaGVjayBpcyBkaXNhYmxlZC5cbiAgICAgKiBAY29uc3RydWN0b3JcbiAgICAgKiBAZ2xvYmFsXG4gICAgICovXG4gICAgZnVuY3Rpb24gTW9iaWxlRGV0ZWN0KHVzZXJBZ2VudCwgbWF4UGhvbmVXaWR0aCkge1xuICAgICAgICB0aGlzLnVhID0gcHJlcGFyZVVzZXJBZ2VudCh1c2VyQWdlbnQpO1xuICAgICAgICB0aGlzLl9jYWNoZSA9IHt9O1xuICAgICAgICAvLzYwMGRwIGlzIHR5cGljYWwgN1wiIHRhYmxldCBtaW5pbXVtIHdpZHRoXG4gICAgICAgIHRoaXMubWF4UGhvbmVXaWR0aCA9IG1heFBob25lV2lkdGggfHwgNjAwO1xuICAgIH1cblxuICAgIE1vYmlsZURldGVjdC5wcm90b3R5cGUgPSB7XG4gICAgICAgIGNvbnN0cnVjdG9yOiBNb2JpbGVEZXRlY3QsXG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIFJldHVybnMgdGhlIGRldGVjdGVkIHBob25lIG9yIHRhYmxldCB0eXBlIG9yIDx0dD5udWxsPC90dD4gaWYgaXQgaXMgbm90IGEgbW9iaWxlIGRldmljZS5cbiAgICAgICAgICogPGJyPlxuICAgICAgICAgKiBGb3IgYSBsaXN0IG9mIHBvc3NpYmxlIHJldHVybiB2YWx1ZXMgc2VlIHtAbGluayBNb2JpbGVEZXRlY3QjcGhvbmV9IGFuZCB7QGxpbmsgTW9iaWxlRGV0ZWN0I3RhYmxldH0uPGJyPlxuICAgICAgICAgKiA8YnI+XG4gICAgICAgICAqIElmIHRoZSBkZXZpY2UgaXMgbm90IGRldGVjdGVkIGJ5IHRoZSByZWd1bGFyIGV4cHJlc3Npb25zIGZyb20gTW9iaWxlLURldGVjdCwgYSB0ZXN0IGlzIG1hZGUgYWdhaW5zdFxuICAgICAgICAgKiB0aGUgcGF0dGVybnMgb2YgPGEgaHJlZj1cImh0dHA6Ly9kZXRlY3Rtb2JpbGVicm93c2Vycy5jb20vXCI+ZGV0ZWN0bW9iaWxlYnJvd3NlcnMuY29tPC9hPi4gSWYgdGhpcyB0ZXN0XG4gICAgICAgICAqIGlzIHBvc2l0aXZlLCBhIHZhbHVlIG9mIDxjb2RlPlVua25vd25QaG9uZTwvY29kZT4sIDxjb2RlPlVua25vd25UYWJsZXQ8L2NvZGU+IG9yXG4gICAgICAgICAqIDxjb2RlPlVua25vd25Nb2JpbGU8L2NvZGU+IGlzIHJldHVybmVkLjxicj5cbiAgICAgICAgICogV2hlbiB1c2VkIGluIGJyb3dzZXIsIHRoZSBkZWNpc2lvbiB3aGV0aGVyIHBob25lIG9yIHRhYmxldCBpcyBtYWRlIGJhc2VkIG9uIDxjb2RlPnNjcmVlbi53aWR0aC9oZWlnaHQ8L2NvZGU+Ljxicj5cbiAgICAgICAgICogPGJyPlxuICAgICAgICAgKiBXaGVuIHVzZWQgc2VydmVyLXNpZGUgKG5vZGUuanMpLCB0aGVyZSBpcyBubyB3YXkgdG8gdGVsbCB0aGUgZGlmZmVyZW5jZSBiZXR3ZWVuIDxjb2RlPlVua25vd25UYWJsZXQ8L2NvZGU+XG4gICAgICAgICAqIGFuZCA8Y29kZT5Vbmtub3duTW9iaWxlPC9jb2RlPiwgc28geW91IHdpbGwgZ2V0IDxjb2RlPlVua25vd25Nb2JpbGU8L2NvZGU+IGhlcmUuPGJyPlxuICAgICAgICAgKiBCZSBhd2FyZSB0aGF0IHNpbmNlIHYxLjAuMCBpbiB0aGlzIHNwZWNpYWwgY2FzZSB5b3Ugd2lsbCBnZXQgPGNvZGU+VW5rbm93bk1vYmlsZTwvY29kZT4gb25seSBmb3I6XG4gICAgICAgICAqIHtAbGluayBNb2JpbGVEZXRlY3QjbW9iaWxlfSwgbm90IGZvciB7QGxpbmsgTW9iaWxlRGV0ZWN0I3Bob25lfSBhbmQge0BsaW5rIE1vYmlsZURldGVjdCN0YWJsZXR9LlxuICAgICAgICAgKiBJbiB2ZXJzaW9ucyBiZWZvcmUgdjEuMC4wIGFsbCAzIG1ldGhvZHMgcmV0dXJuZWQgPGNvZGU+VW5rbm93bk1vYmlsZTwvY29kZT4gd2hpY2ggd2FzIHRlZGlvdXMgdG8gdXNlLlxuICAgICAgICAgKiA8YnI+XG4gICAgICAgICAqIEluIG1vc3QgY2FzZXMgeW91IHdpbGwgdXNlIHRoZSByZXR1cm4gdmFsdWUganVzdCBhcyBhIGJvb2xlYW4uXG4gICAgICAgICAqXG4gICAgICAgICAqIEByZXR1cm5zIHtTdHJpbmd9IHRoZSBrZXkgZm9yIHRoZSBwaG9uZSBmYW1pbHkgb3IgdGFibGV0IGZhbWlseSwgZS5nLiBcIk5leHVzXCIuXG4gICAgICAgICAqIEBmdW5jdGlvbiBNb2JpbGVEZXRlY3QjbW9iaWxlXG4gICAgICAgICAqL1xuICAgICAgICBtb2JpbGU6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIGltcGwucHJlcGFyZURldGVjdGlvbkNhY2hlKHRoaXMuX2NhY2hlLCB0aGlzLnVhLCB0aGlzLm1heFBob25lV2lkdGgpO1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2NhY2hlLm1vYmlsZTtcbiAgICAgICAgfSxcblxuICAgICAgICAvKipcbiAgICAgICAgICogUmV0dXJucyB0aGUgZGV0ZWN0ZWQgcGhvbmUgdHlwZS9mYW1pbHkgc3RyaW5nIG9yIDx0dD5udWxsPC90dD4uXG4gICAgICAgICAqIDxicj5cbiAgICAgICAgICogVGhlIHJldHVybmVkIHRhYmxldCAoZmFtaWx5IG9yIHByb2R1Y2VyKSBpcyBvbmUgb2YgZm9sbG93aW5nIGtleXM6PGJyPlxuICAgICAgICAgKiA8YnI+PHR0PmlQaG9uZSwgQmxhY2tCZXJyeSwgSFRDLCBOZXh1cywgRGVsbCwgTW90b3JvbGEsIFNhbXN1bmcsIExHLCBTb255LCBBc3VzLFxuICAgICAgICAgKiBOb2tpYUx1bWlhLCBNaWNyb21heCwgUGFsbSwgVmVydHUsIFBhbnRlY2gsIEZseSwgV2lrbywgaU1vYmlsZSwgU2ltVmFsbGV5LFxuICAgICAgICAgKiBXb2xmZ2FuZywgQWxjYXRlbCwgTmludGVuZG8sIEFtb2ksIElOUSwgT25lUGx1cywgR2VuZXJpY1Bob25lPC90dD48YnI+XG4gICAgICAgICAqIDxicj5cbiAgICAgICAgICogSWYgdGhlIGRldmljZSBpcyBub3QgZGV0ZWN0ZWQgYnkgdGhlIHJlZ3VsYXIgZXhwcmVzc2lvbnMgZnJvbSBNb2JpbGUtRGV0ZWN0LCBhIHRlc3QgaXMgbWFkZSBhZ2FpbnN0XG4gICAgICAgICAqIHRoZSBwYXR0ZXJucyBvZiA8YSBocmVmPVwiaHR0cDovL2RldGVjdG1vYmlsZWJyb3dzZXJzLmNvbS9cIj5kZXRlY3Rtb2JpbGVicm93c2Vycy5jb208L2E+LiBJZiB0aGlzIHRlc3RcbiAgICAgICAgICogaXMgcG9zaXRpdmUsIGEgdmFsdWUgb2YgPGNvZGU+VW5rbm93blBob25lPC9jb2RlPiBvciA8Y29kZT5Vbmtub3duTW9iaWxlPC9jb2RlPiBpcyByZXR1cm5lZC48YnI+XG4gICAgICAgICAqIFdoZW4gdXNlZCBpbiBicm93c2VyLCB0aGUgZGVjaXNpb24gd2hldGhlciBwaG9uZSBvciB0YWJsZXQgaXMgbWFkZSBiYXNlZCBvbiA8Y29kZT5zY3JlZW4ud2lkdGgvaGVpZ2h0PC9jb2RlPi48YnI+XG4gICAgICAgICAqIDxicj5cbiAgICAgICAgICogV2hlbiB1c2VkIHNlcnZlci1zaWRlIChub2RlLmpzKSwgdGhlcmUgaXMgbm8gd2F5IHRvIHRlbGwgdGhlIGRpZmZlcmVuY2UgYmV0d2VlbiA8Y29kZT5Vbmtub3duVGFibGV0PC9jb2RlPlxuICAgICAgICAgKiBhbmQgPGNvZGU+VW5rbm93bk1vYmlsZTwvY29kZT4sIHNvIHlvdSB3aWxsIGdldCA8Y29kZT5udWxsPC9jb2RlPiBoZXJlLCB3aGlsZSB7QGxpbmsgTW9iaWxlRGV0ZWN0I21vYmlsZX1cbiAgICAgICAgICogd2lsbCByZXR1cm4gPGNvZGU+VW5rbm93bk1vYmlsZTwvY29kZT4uPGJyPlxuICAgICAgICAgKiBCZSBhd2FyZSB0aGF0IHNpbmNlIHYxLjAuMCBpbiB0aGlzIHNwZWNpYWwgY2FzZSB5b3Ugd2lsbCBnZXQgPGNvZGU+VW5rbm93bk1vYmlsZTwvY29kZT4gb25seSBmb3I6XG4gICAgICAgICAqIHtAbGluayBNb2JpbGVEZXRlY3QjbW9iaWxlfSwgbm90IGZvciB7QGxpbmsgTW9iaWxlRGV0ZWN0I3Bob25lfSBhbmQge0BsaW5rIE1vYmlsZURldGVjdCN0YWJsZXR9LlxuICAgICAgICAgKiBJbiB2ZXJzaW9ucyBiZWZvcmUgdjEuMC4wIGFsbCAzIG1ldGhvZHMgcmV0dXJuZWQgPGNvZGU+VW5rbm93bk1vYmlsZTwvY29kZT4gd2hpY2ggd2FzIHRlZGlvdXMgdG8gdXNlLlxuICAgICAgICAgKiA8YnI+XG4gICAgICAgICAqIEluIG1vc3QgY2FzZXMgeW91IHdpbGwgdXNlIHRoZSByZXR1cm4gdmFsdWUganVzdCBhcyBhIGJvb2xlYW4uXG4gICAgICAgICAqXG4gICAgICAgICAqIEByZXR1cm5zIHtTdHJpbmd9IHRoZSBrZXkgb2YgdGhlIHBob25lIGZhbWlseSBvciBwcm9kdWNlciwgZS5nLiBcImlQaG9uZVwiXG4gICAgICAgICAqIEBmdW5jdGlvbiBNb2JpbGVEZXRlY3QjcGhvbmVcbiAgICAgICAgICovXG4gICAgICAgIHBob25lOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBpbXBsLnByZXBhcmVEZXRlY3Rpb25DYWNoZSh0aGlzLl9jYWNoZSwgdGhpcy51YSwgdGhpcy5tYXhQaG9uZVdpZHRoKTtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl9jYWNoZS5waG9uZTtcbiAgICAgICAgfSxcblxuICAgICAgICAvKipcbiAgICAgICAgICogUmV0dXJucyB0aGUgZGV0ZWN0ZWQgdGFibGV0IHR5cGUvZmFtaWx5IHN0cmluZyBvciA8dHQ+bnVsbDwvdHQ+LlxuICAgICAgICAgKiA8YnI+XG4gICAgICAgICAqIFRoZSByZXR1cm5lZCB0YWJsZXQgKGZhbWlseSBvciBwcm9kdWNlcikgaXMgb25lIG9mIGZvbGxvd2luZyBrZXlzOjxicj5cbiAgICAgICAgICogPGJyPjx0dD5pUGFkLCBOZXh1c1RhYmxldCwgR29vZ2xlVGFibGV0LCBTYW1zdW5nVGFibGV0LCBLaW5kbGUsIFN1cmZhY2VUYWJsZXQsXG4gICAgICAgICAqIEhQVGFibGV0LCBBc3VzVGFibGV0LCBCbGFja0JlcnJ5VGFibGV0LCBIVEN0YWJsZXQsIE1vdG9yb2xhVGFibGV0LCBOb29rVGFibGV0LFxuICAgICAgICAgKiBBY2VyVGFibGV0LCBUb3NoaWJhVGFibGV0LCBMR1RhYmxldCwgRnVqaXRzdVRhYmxldCwgUHJlc3RpZ2lvVGFibGV0LFxuICAgICAgICAgKiBMZW5vdm9UYWJsZXQsIERlbGxUYWJsZXQsIFlhcnZpa1RhYmxldCwgTWVkaW9uVGFibGV0LCBBcm5vdmFUYWJsZXQsXG4gICAgICAgICAqIEludGVuc29UYWJsZXQsIElSVVRhYmxldCwgTWVnYWZvblRhYmxldCwgRWJvZGFUYWJsZXQsIEFsbFZpZXdUYWJsZXQsXG4gICAgICAgICAqIEFyY2hvc1RhYmxldCwgQWlub2xUYWJsZXQsIE5va2lhTHVtaWFUYWJsZXQsIFNvbnlUYWJsZXQsIFBoaWxpcHNUYWJsZXQsXG4gICAgICAgICAqIEN1YmVUYWJsZXQsIENvYnlUYWJsZXQsIE1JRFRhYmxldCwgTVNJVGFibGV0LCBTTWlUVGFibGV0LCBSb2NrQ2hpcFRhYmxldCxcbiAgICAgICAgICogRmx5VGFibGV0LCBicVRhYmxldCwgSHVhd2VpVGFibGV0LCBOZWNUYWJsZXQsIFBhbnRlY2hUYWJsZXQsIEJyb25jaG9UYWJsZXQsXG4gICAgICAgICAqIFZlcnN1c1RhYmxldCwgWnluY1RhYmxldCwgUG9zaXRpdm9UYWJsZXQsIE5hYmlUYWJsZXQsIEtvYm9UYWJsZXQsIERhbmV3VGFibGV0LFxuICAgICAgICAgKiBUZXhldFRhYmxldCwgUGxheXN0YXRpb25UYWJsZXQsIFRyZWtzdG9yVGFibGV0LCBQeWxlQXVkaW9UYWJsZXQsIEFkdmFuVGFibGV0LFxuICAgICAgICAgKiBEYW55VGVjaFRhYmxldCwgR2FsYXBhZFRhYmxldCwgTWljcm9tYXhUYWJsZXQsIEthcmJvbm5UYWJsZXQsIEFsbEZpbmVUYWJsZXQsXG4gICAgICAgICAqIFBST1NDQU5UYWJsZXQsIFlPTkVTVGFibGV0LCBDaGFuZ0ppYVRhYmxldCwgR1VUYWJsZXQsIFBvaW50T2ZWaWV3VGFibGV0LFxuICAgICAgICAgKiBPdmVybWF4VGFibGV0LCBIQ0xUYWJsZXQsIERQU1RhYmxldCwgVmlzdHVyZVRhYmxldCwgQ3Jlc3RhVGFibGV0LFxuICAgICAgICAgKiBNZWRpYXRla1RhYmxldCwgQ29uY29yZGVUYWJsZXQsIEdvQ2xldmVyVGFibGV0LCBNb2RlY29tVGFibGV0LCBWb25pbm9UYWJsZXQsXG4gICAgICAgICAqIEVDU1RhYmxldCwgU3RvcmV4VGFibGV0LCBWb2RhZm9uZVRhYmxldCwgRXNzZW50aWVsQlRhYmxldCwgUm9zc01vb3JUYWJsZXQsXG4gICAgICAgICAqIGlNb2JpbGVUYWJsZXQsIFRvbGlub1RhYmxldCwgQXVkaW9Tb25pY1RhYmxldCwgQU1QRVRhYmxldCwgU2trVGFibGV0LFxuICAgICAgICAgKiBUZWNub1RhYmxldCwgSlhEVGFibGV0LCBpSm95VGFibGV0LCBGWDJUYWJsZXQsIFhvcm9UYWJsZXQsIFZpZXdzb25pY1RhYmxldCxcbiAgICAgICAgICogVmVyaXpvblRhYmxldCwgT2R5c1RhYmxldCwgQ2FwdGl2YVRhYmxldCwgSWNvbmJpdFRhYmxldCwgVGVjbGFzdFRhYmxldCxcbiAgICAgICAgICogT25kYVRhYmxldCwgSmF5dGVjaFRhYmxldCwgQmxhdXB1bmt0VGFibGV0LCBEaWdtYVRhYmxldCwgRXZvbGlvVGFibGV0LFxuICAgICAgICAgKiBMYXZhVGFibGV0LCBBb2NUYWJsZXQsIE1wbWFuVGFibGV0LCBDZWxrb25UYWJsZXQsIFdvbGRlclRhYmxldCwgTWVkaWFjb21UYWJsZXQsXG4gICAgICAgICAqIE1pVGFibGV0LCBOaWJpcnVUYWJsZXQsIE5leG9UYWJsZXQsIExlYWRlclRhYmxldCwgVWJpc2xhdGVUYWJsZXQsXG4gICAgICAgICAqIFBvY2tldEJvb2tUYWJsZXQsIEtvY2Fzb1RhYmxldCwgSGlzZW5zZVRhYmxldCwgSHVkbCwgVGVsc3RyYVRhYmxldCxcbiAgICAgICAgICogR2VuZXJpY1RhYmxldDwvdHQ+PGJyPlxuICAgICAgICAgKiA8YnI+XG4gICAgICAgICAqIElmIHRoZSBkZXZpY2UgaXMgbm90IGRldGVjdGVkIGJ5IHRoZSByZWd1bGFyIGV4cHJlc3Npb25zIGZyb20gTW9iaWxlLURldGVjdCwgYSB0ZXN0IGlzIG1hZGUgYWdhaW5zdFxuICAgICAgICAgKiB0aGUgcGF0dGVybnMgb2YgPGEgaHJlZj1cImh0dHA6Ly9kZXRlY3Rtb2JpbGVicm93c2Vycy5jb20vXCI+ZGV0ZWN0bW9iaWxlYnJvd3NlcnMuY29tPC9hPi4gSWYgdGhpcyB0ZXN0XG4gICAgICAgICAqIGlzIHBvc2l0aXZlLCBhIHZhbHVlIG9mIDxjb2RlPlVua25vd25UYWJsZXQ8L2NvZGU+IG9yIDxjb2RlPlVua25vd25Nb2JpbGU8L2NvZGU+IGlzIHJldHVybmVkLjxicj5cbiAgICAgICAgICogV2hlbiB1c2VkIGluIGJyb3dzZXIsIHRoZSBkZWNpc2lvbiB3aGV0aGVyIHBob25lIG9yIHRhYmxldCBpcyBtYWRlIGJhc2VkIG9uIDxjb2RlPnNjcmVlbi53aWR0aC9oZWlnaHQ8L2NvZGU+Ljxicj5cbiAgICAgICAgICogPGJyPlxuICAgICAgICAgKiBXaGVuIHVzZWQgc2VydmVyLXNpZGUgKG5vZGUuanMpLCB0aGVyZSBpcyBubyB3YXkgdG8gdGVsbCB0aGUgZGlmZmVyZW5jZSBiZXR3ZWVuIDxjb2RlPlVua25vd25UYWJsZXQ8L2NvZGU+XG4gICAgICAgICAqIGFuZCA8Y29kZT5Vbmtub3duTW9iaWxlPC9jb2RlPiwgc28geW91IHdpbGwgZ2V0IDxjb2RlPm51bGw8L2NvZGU+IGhlcmUsIHdoaWxlIHtAbGluayBNb2JpbGVEZXRlY3QjbW9iaWxlfVxuICAgICAgICAgKiB3aWxsIHJldHVybiA8Y29kZT5Vbmtub3duTW9iaWxlPC9jb2RlPi48YnI+XG4gICAgICAgICAqIEJlIGF3YXJlIHRoYXQgc2luY2UgdjEuMC4wIGluIHRoaXMgc3BlY2lhbCBjYXNlIHlvdSB3aWxsIGdldCA8Y29kZT5Vbmtub3duTW9iaWxlPC9jb2RlPiBvbmx5IGZvcjpcbiAgICAgICAgICoge0BsaW5rIE1vYmlsZURldGVjdCNtb2JpbGV9LCBub3QgZm9yIHtAbGluayBNb2JpbGVEZXRlY3QjcGhvbmV9IGFuZCB7QGxpbmsgTW9iaWxlRGV0ZWN0I3RhYmxldH0uXG4gICAgICAgICAqIEluIHZlcnNpb25zIGJlZm9yZSB2MS4wLjAgYWxsIDMgbWV0aG9kcyByZXR1cm5lZCA8Y29kZT5Vbmtub3duTW9iaWxlPC9jb2RlPiB3aGljaCB3YXMgdGVkaW91cyB0byB1c2UuXG4gICAgICAgICAqIDxicj5cbiAgICAgICAgICogSW4gbW9zdCBjYXNlcyB5b3Ugd2lsbCB1c2UgdGhlIHJldHVybiB2YWx1ZSBqdXN0IGFzIGEgYm9vbGVhbi5cbiAgICAgICAgICpcbiAgICAgICAgICogQHJldHVybnMge1N0cmluZ30gdGhlIGtleSBvZiB0aGUgdGFibGV0IGZhbWlseSBvciBwcm9kdWNlciwgZS5nLiBcIlNhbXN1bmdUYWJsZXRcIlxuICAgICAgICAgKiBAZnVuY3Rpb24gTW9iaWxlRGV0ZWN0I3RhYmxldFxuICAgICAgICAgKi9cbiAgICAgICAgdGFibGV0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBpbXBsLnByZXBhcmVEZXRlY3Rpb25DYWNoZSh0aGlzLl9jYWNoZSwgdGhpcy51YSwgdGhpcy5tYXhQaG9uZVdpZHRoKTtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl9jYWNoZS50YWJsZXQ7XG4gICAgICAgIH0sXG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIFJldHVybnMgdGhlIChmaXJzdCkgZGV0ZWN0ZWQgdXNlci1hZ2VudCBzdHJpbmcgb3IgPHR0Pm51bGw8L3R0Pi5cbiAgICAgICAgICogPGJyPlxuICAgICAgICAgKiBUaGUgcmV0dXJuZWQgdXNlci1hZ2VudCBpcyBvbmUgb2YgZm9sbG93aW5nIGtleXM6PGJyPlxuICAgICAgICAgKiA8YnI+PHR0PkNocm9tZSwgRG9sZmluLCBPcGVyYSwgU2t5ZmlyZSwgRWRnZSwgSUUsIEZpcmVmb3gsIEJvbHQsIFRlYVNoYXJrLCBCbGF6ZXIsXG4gICAgICAgICAqIFNhZmFyaSwgV2VDaGF0LCBVQ0Jyb3dzZXIsIGJhaWR1Ym94YXBwLCBiYWlkdWJyb3dzZXIsIERpaWdvQnJvd3NlciwgTWVyY3VyeSxcbiAgICAgICAgICogT2JpZ29Ccm93c2VyLCBOZXRGcm9udCwgR2VuZXJpY0Jyb3dzZXIsIFBhbGVNb29uPC90dD48YnI+XG4gICAgICAgICAqIDxicj5cbiAgICAgICAgICogSW4gbW9zdCBjYXNlcyBjYWxsaW5nIHtAbGluayBNb2JpbGVEZXRlY3QjdXNlckFnZW50fSB3aWxsIGJlIHN1ZmZpY2llbnQuIEJ1dCB0aGVyZSBhcmUgcmFyZVxuICAgICAgICAgKiBjYXNlcyB3aGVyZSBhIG1vYmlsZSBkZXZpY2UgcHJldGVuZHMgdG8gYmUgbW9yZSB0aGFuIG9uZSBwYXJ0aWN1bGFyIGJyb3dzZXIuIFlvdSBjYW4gZ2V0IHRoZVxuICAgICAgICAgKiBsaXN0IG9mIGFsbCBtYXRjaGVzIHdpdGgge0BsaW5rIE1vYmlsZURldGVjdCN1c2VyQWdlbnRzfSBvciBjaGVjayBmb3IgYSBwYXJ0aWN1bGFyIHZhbHVlIGJ5XG4gICAgICAgICAqIHByb3ZpZGluZyBvbmUgb2YgdGhlIGRlZmluZWQga2V5cyBhcyBmaXJzdCBhcmd1bWVudCB0byB7QGxpbmsgTW9iaWxlRGV0ZWN0I2lzfS5cbiAgICAgICAgICpcbiAgICAgICAgICogQHJldHVybnMge1N0cmluZ30gdGhlIGtleSBmb3IgdGhlIGRldGVjdGVkIHVzZXItYWdlbnQgb3IgPHR0Pm51bGw8L3R0PlxuICAgICAgICAgKiBAZnVuY3Rpb24gTW9iaWxlRGV0ZWN0I3VzZXJBZ2VudFxuICAgICAgICAgKi9cbiAgICAgICAgdXNlckFnZW50OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBpZiAodGhpcy5fY2FjaGUudXNlckFnZW50ID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICB0aGlzLl9jYWNoZS51c2VyQWdlbnQgPSBpbXBsLmZpbmRNYXRjaChpbXBsLm1vYmlsZURldGVjdFJ1bGVzLnVhcywgdGhpcy51YSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fY2FjaGUudXNlckFnZW50O1xuICAgICAgICB9LFxuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBSZXR1cm5zIGFsbCBkZXRlY3RlZCB1c2VyLWFnZW50IHN0cmluZ3MuXG4gICAgICAgICAqIDxicj5cbiAgICAgICAgICogVGhlIGFycmF5IGlzIGVtcHR5IG9yIGNvbnRhaW5zIG9uZSBvciBtb3JlIG9mIGZvbGxvd2luZyBrZXlzOjxicj5cbiAgICAgICAgICogPGJyPjx0dD5DaHJvbWUsIERvbGZpbiwgT3BlcmEsIFNreWZpcmUsIEVkZ2UsIElFLCBGaXJlZm94LCBCb2x0LCBUZWFTaGFyaywgQmxhemVyLFxuICAgICAgICAgKiBTYWZhcmksIFdlQ2hhdCwgVUNCcm93c2VyLCBiYWlkdWJveGFwcCwgYmFpZHVicm93c2VyLCBEaWlnb0Jyb3dzZXIsIE1lcmN1cnksXG4gICAgICAgICAqIE9iaWdvQnJvd3NlciwgTmV0RnJvbnQsIEdlbmVyaWNCcm93c2VyLCBQYWxlTW9vbjwvdHQ+PGJyPlxuICAgICAgICAgKiA8YnI+XG4gICAgICAgICAqIEluIG1vc3QgY2FzZXMgY2FsbGluZyB7QGxpbmsgTW9iaWxlRGV0ZWN0I3VzZXJBZ2VudH0gd2lsbCBiZSBzdWZmaWNpZW50LiBCdXQgdGhlcmUgYXJlIHJhcmVcbiAgICAgICAgICogY2FzZXMgd2hlcmUgYSBtb2JpbGUgZGV2aWNlIHByZXRlbmRzIHRvIGJlIG1vcmUgdGhhbiBvbmUgcGFydGljdWxhciBicm93c2VyLiBZb3UgY2FuIGdldCB0aGVcbiAgICAgICAgICogbGlzdCBvZiBhbGwgbWF0Y2hlcyB3aXRoIHtAbGluayBNb2JpbGVEZXRlY3QjdXNlckFnZW50c30gb3IgY2hlY2sgZm9yIGEgcGFydGljdWxhciB2YWx1ZSBieVxuICAgICAgICAgKiBwcm92aWRpbmcgb25lIG9mIHRoZSBkZWZpbmVkIGtleXMgYXMgZmlyc3QgYXJndW1lbnQgdG8ge0BsaW5rIE1vYmlsZURldGVjdCNpc30uXG4gICAgICAgICAqXG4gICAgICAgICAqIEByZXR1cm5zIHtBcnJheX0gdGhlIGFycmF5IG9mIGRldGVjdGVkIHVzZXItYWdlbnQga2V5cyBvciA8dHQ+W108L3R0PlxuICAgICAgICAgKiBAZnVuY3Rpb24gTW9iaWxlRGV0ZWN0I3VzZXJBZ2VudHNcbiAgICAgICAgICovXG4gICAgICAgIHVzZXJBZ2VudHM6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIGlmICh0aGlzLl9jYWNoZS51c2VyQWdlbnRzID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICB0aGlzLl9jYWNoZS51c2VyQWdlbnRzID0gaW1wbC5maW5kTWF0Y2hlcyhpbXBsLm1vYmlsZURldGVjdFJ1bGVzLnVhcywgdGhpcy51YSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fY2FjaGUudXNlckFnZW50cztcbiAgICAgICAgfSxcblxuICAgICAgICAvKipcbiAgICAgICAgICogUmV0dXJucyB0aGUgZGV0ZWN0ZWQgb3BlcmF0aW5nIHN5c3RlbSBzdHJpbmcgb3IgPHR0Pm51bGw8L3R0Pi5cbiAgICAgICAgICogPGJyPlxuICAgICAgICAgKiBUaGUgb3BlcmF0aW5nIHN5c3RlbSBpcyBvbmUgb2YgZm9sbG93aW5nIGtleXM6PGJyPlxuICAgICAgICAgKiA8YnI+PHR0PkFuZHJvaWRPUywgQmxhY2tCZXJyeU9TLCBQYWxtT1MsIFN5bWJpYW5PUywgV2luZG93c01vYmlsZU9TLCBXaW5kb3dzUGhvbmVPUyxcbiAgICAgICAgICogaU9TLCBpUGFkT1MsIE1lZUdvT1MsIE1hZW1vT1MsIEphdmFPUywgd2ViT1MsIGJhZGFPUywgQlJFV09TPC90dD48YnI+XG4gICAgICAgICAqXG4gICAgICAgICAqIEByZXR1cm5zIHtTdHJpbmd9IHRoZSBrZXkgZm9yIHRoZSBkZXRlY3RlZCBvcGVyYXRpbmcgc3lzdGVtLlxuICAgICAgICAgKiBAZnVuY3Rpb24gTW9iaWxlRGV0ZWN0I29zXG4gICAgICAgICAqL1xuICAgICAgICBvczogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgaWYgKHRoaXMuX2NhY2hlLm9zID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICB0aGlzLl9jYWNoZS5vcyA9IGltcGwuZGV0ZWN0T1ModGhpcy51YSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fY2FjaGUub3M7XG4gICAgICAgIH0sXG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIEdldCB0aGUgdmVyc2lvbiAoYXMgTnVtYmVyKSBvZiB0aGUgZ2l2ZW4gcHJvcGVydHkgaW4gdGhlIFVzZXItQWdlbnQuXG4gICAgICAgICAqIDxicj5cbiAgICAgICAgICogV2lsbCByZXR1cm4gYSBmbG9hdCBudW1iZXIuIChlZy4gMl8wIHdpbGwgcmV0dXJuIDIuMCwgNC4zLjEgd2lsbCByZXR1cm4gNC4zMSlcbiAgICAgICAgICpcbiAgICAgICAgICogQHBhcmFtIHtTdHJpbmd9IGtleSBhIGtleSBkZWZpbmluZyBhIHRoaW5nIHdoaWNoIGhhcyBhIHZlcnNpb24uPGJyPlxuICAgICAgICAgKiAgICAgICAgWW91IGNhbiB1c2Ugb25lIG9mIGZvbGxvd2luZyBrZXlzOjxicj5cbiAgICAgICAgICogPGJyPjx0dD5Nb2JpbGUsIEJ1aWxkLCBWZXJzaW9uLCBWZW5kb3JJRCwgaVBhZCwgaVBob25lLCBpUG9kLCBLaW5kbGUsIENocm9tZSwgQ29hc3QsXG4gICAgICAgICAqIERvbGZpbiwgRmlyZWZveCwgRmVubmVjLCBFZGdlLCBJRSwgTmV0RnJvbnQsIE5va2lhQnJvd3NlciwgT3BlcmEsIE9wZXJhIE1pbmksXG4gICAgICAgICAqIE9wZXJhIE1vYmksIFVDQnJvd3NlciwgTVFRQnJvd3NlciwgTWljcm9NZXNzZW5nZXIsIGJhaWR1Ym94YXBwLCBiYWlkdWJyb3dzZXIsXG4gICAgICAgICAqIFNhbXN1bmdCcm93c2VyLCBJcm9uLCBTYWZhcmksIFNreWZpcmUsIFRpemVuLCBXZWJraXQsIFBhbGVNb29uLCBHZWNrbywgVHJpZGVudCxcbiAgICAgICAgICogUHJlc3RvLCBHb2FubmEsIGlPUywgQW5kcm9pZCwgQmxhY2tCZXJyeSwgQlJFVywgSmF2YSwgV2luZG93cyBQaG9uZSBPUywgV2luZG93c1xuICAgICAgICAgKiBQaG9uZSwgV2luZG93cyBDRSwgV2luZG93cyBOVCwgU3ltYmlhbiwgd2ViT1M8L3R0Pjxicj5cbiAgICAgICAgICpcbiAgICAgICAgICogQHJldHVybnMge051bWJlcn0gdGhlIHZlcnNpb24gYXMgZmxvYXQgb3IgPHR0Pk5hTjwvdHQ+IGlmIFVzZXItQWdlbnQgZG9lc24ndCBjb250YWluIHRoaXMgdmVyc2lvbi5cbiAgICAgICAgICogICAgICAgICAgQmUgY2FyZWZ1bCB3aGVuIGNvbXBhcmluZyB0aGlzIHZhbHVlIHdpdGggJz09JyBvcGVyYXRvciFcbiAgICAgICAgICogQGZ1bmN0aW9uIE1vYmlsZURldGVjdCN2ZXJzaW9uXG4gICAgICAgICAqL1xuICAgICAgICB2ZXJzaW9uOiBmdW5jdGlvbiAoa2V5KSB7XG4gICAgICAgICAgICByZXR1cm4gaW1wbC5nZXRWZXJzaW9uKGtleSwgdGhpcy51YSk7XG4gICAgICAgIH0sXG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIEdldCB0aGUgdmVyc2lvbiAoYXMgU3RyaW5nKSBvZiB0aGUgZ2l2ZW4gcHJvcGVydHkgaW4gdGhlIFVzZXItQWdlbnQuXG4gICAgICAgICAqIDxicj5cbiAgICAgICAgICpcbiAgICAgICAgICogQHBhcmFtIHtTdHJpbmd9IGtleSBhIGtleSBkZWZpbmluZyBhIHRoaW5nIHdoaWNoIGhhcyBhIHZlcnNpb24uPGJyPlxuICAgICAgICAgKiAgICAgICAgWW91IGNhbiB1c2Ugb25lIG9mIGZvbGxvd2luZyBrZXlzOjxicj5cbiAgICAgICAgICogPGJyPjx0dD5Nb2JpbGUsIEJ1aWxkLCBWZXJzaW9uLCBWZW5kb3JJRCwgaVBhZCwgaVBob25lLCBpUG9kLCBLaW5kbGUsIENocm9tZSwgQ29hc3QsXG4gICAgICAgICAqIERvbGZpbiwgRmlyZWZveCwgRmVubmVjLCBFZGdlLCBJRSwgTmV0RnJvbnQsIE5va2lhQnJvd3NlciwgT3BlcmEsIE9wZXJhIE1pbmksXG4gICAgICAgICAqIE9wZXJhIE1vYmksIFVDQnJvd3NlciwgTVFRQnJvd3NlciwgTWljcm9NZXNzZW5nZXIsIGJhaWR1Ym94YXBwLCBiYWlkdWJyb3dzZXIsXG4gICAgICAgICAqIFNhbXN1bmdCcm93c2VyLCBJcm9uLCBTYWZhcmksIFNreWZpcmUsIFRpemVuLCBXZWJraXQsIFBhbGVNb29uLCBHZWNrbywgVHJpZGVudCxcbiAgICAgICAgICogUHJlc3RvLCBHb2FubmEsIGlPUywgQW5kcm9pZCwgQmxhY2tCZXJyeSwgQlJFVywgSmF2YSwgV2luZG93cyBQaG9uZSBPUywgV2luZG93c1xuICAgICAgICAgKiBQaG9uZSwgV2luZG93cyBDRSwgV2luZG93cyBOVCwgU3ltYmlhbiwgd2ViT1M8L3R0Pjxicj5cbiAgICAgICAgICpcbiAgICAgICAgICogQHJldHVybnMge1N0cmluZ30gdGhlIFwicmF3XCIgdmVyc2lvbiBhcyBTdHJpbmcgb3IgPHR0Pm51bGw8L3R0PiBpZiBVc2VyLUFnZW50IGRvZXNuJ3QgY29udGFpbiB0aGlzIHZlcnNpb24uXG4gICAgICAgICAqXG4gICAgICAgICAqIEBmdW5jdGlvbiBNb2JpbGVEZXRlY3QjdmVyc2lvblN0clxuICAgICAgICAgKi9cbiAgICAgICAgdmVyc2lvblN0cjogZnVuY3Rpb24gKGtleSkge1xuICAgICAgICAgICAgcmV0dXJuIGltcGwuZ2V0VmVyc2lvblN0cihrZXksIHRoaXMudWEpO1xuICAgICAgICB9LFxuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBHbG9iYWwgdGVzdCBrZXkgYWdhaW5zdCB1c2VyQWdlbnQsIG9zLCBwaG9uZSwgdGFibGV0IGFuZCBzb21lIG90aGVyIHByb3BlcnRpZXMgb2YgdXNlckFnZW50IHN0cmluZy5cbiAgICAgICAgICpcbiAgICAgICAgICogQHBhcmFtIHtTdHJpbmd9IGtleSB0aGUga2V5IChjYXNlLWluc2Vuc2l0aXZlKSBvZiBhIHVzZXJBZ2VudCwgYW4gb3BlcmF0aW5nIHN5c3RlbSwgcGhvbmUgb3JcbiAgICAgICAgICogICAgICAgIHRhYmxldCBmYW1pbHkuPGJyPlxuICAgICAgICAgKiAgICAgICAgRm9yIGEgY29tcGxldGUgbGlzdCBvZiBwb3NzaWJsZSB2YWx1ZXMsIHNlZSB7QGxpbmsgTW9iaWxlRGV0ZWN0I3VzZXJBZ2VudH0sXG4gICAgICAgICAqICAgICAgICB7QGxpbmsgTW9iaWxlRGV0ZWN0I29zfSwge0BsaW5rIE1vYmlsZURldGVjdCNwaG9uZX0sIHtAbGluayBNb2JpbGVEZXRlY3QjdGFibGV0fS48YnI+XG4gICAgICAgICAqICAgICAgICBBZGRpdGlvbmFsbHkgeW91IGhhdmUgZm9sbG93aW5nIGtleXM6PGJyPlxuICAgICAgICAgKiA8YnI+PHR0PkJvdCwgTW9iaWxlQm90LCBEZXNrdG9wTW9kZSwgVFYsIFdlYktpdCwgQ29uc29sZSwgV2F0Y2g8L3R0Pjxicj5cbiAgICAgICAgICpcbiAgICAgICAgICogQHJldHVybnMge2Jvb2xlYW59IDx0dD50cnVlPC90dD4gd2hlbiB0aGUgZ2l2ZW4ga2V5IGlzIG9uZSBvZiB0aGUgZGVmaW5lZCBrZXlzIG9mIHVzZXJBZ2VudCwgb3MsIHBob25lLFxuICAgICAgICAgKiAgICAgICAgICAgICAgICAgICAgdGFibGV0IG9yIG9uZSBvZiB0aGUgbGlzdGVkIGFkZGl0aW9uYWwga2V5cywgb3RoZXJ3aXNlIDx0dD5mYWxzZTwvdHQ+XG4gICAgICAgICAqIEBmdW5jdGlvbiBNb2JpbGVEZXRlY3QjaXNcbiAgICAgICAgICovXG4gICAgICAgIGlzOiBmdW5jdGlvbiAoa2V5KSB7XG4gICAgICAgICAgICByZXR1cm4gY29udGFpbnNJQyh0aGlzLnVzZXJBZ2VudHMoKSwga2V5KSB8fFxuICAgICAgICAgICAgICAgICAgIGVxdWFsSUMoa2V5LCB0aGlzLm9zKCkpIHx8XG4gICAgICAgICAgICAgICAgICAgZXF1YWxJQyhrZXksIHRoaXMucGhvbmUoKSkgfHxcbiAgICAgICAgICAgICAgICAgICBlcXVhbElDKGtleSwgdGhpcy50YWJsZXQoKSkgfHxcbiAgICAgICAgICAgICAgICAgICBjb250YWluc0lDKGltcGwuZmluZE1hdGNoZXMoaW1wbC5tb2JpbGVEZXRlY3RSdWxlcy51dGlscywgdGhpcy51YSksIGtleSk7XG4gICAgICAgIH0sXG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIERvIGEgcXVpY2sgdGVzdCBhZ2FpbnN0IG5hdmlnYXRvcjo6dXNlckFnZW50LlxuICAgICAgICAgKlxuICAgICAgICAgKiBAcGFyYW0ge1N0cmluZ3xSZWdFeHB9IHBhdHRlcm4gdGhlIHBhdHRlcm4sIGVpdGhlciBhcyBTdHJpbmcgb3IgUmVnRXhwXG4gICAgICAgICAqICAgICAgICAgICAgICAgICAgICAgICAgKGEgc3RyaW5nIHdpbGwgYmUgY29udmVydGVkIHRvIGEgY2FzZS1pbnNlbnNpdGl2ZSBSZWdFeHApLlxuICAgICAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gPHR0PnRydWU8L3R0PiB3aGVuIHRoZSBwYXR0ZXJuIG1hdGNoZXMsIG90aGVyd2lzZSA8dHQ+ZmFsc2U8L3R0PlxuICAgICAgICAgKiBAZnVuY3Rpb24gTW9iaWxlRGV0ZWN0I21hdGNoXG4gICAgICAgICAqL1xuICAgICAgICBtYXRjaDogZnVuY3Rpb24gKHBhdHRlcm4pIHtcbiAgICAgICAgICAgIGlmICghKHBhdHRlcm4gaW5zdGFuY2VvZiBSZWdFeHApKSB7XG4gICAgICAgICAgICAgICAgcGF0dGVybiA9IG5ldyBSZWdFeHAocGF0dGVybiwgJ2knKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBwYXR0ZXJuLnRlc3QodGhpcy51YSk7XG4gICAgICAgIH0sXG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIENoZWNrcyB3aGV0aGVyIHRoZSBtb2JpbGUgZGV2aWNlIGNhbiBiZSBjb25zaWRlcmVkIGFzIHBob25lIHJlZ2FyZGluZyA8Y29kZT5zY3JlZW4ud2lkdGg8L2NvZGU+LlxuICAgICAgICAgKiA8YnI+XG4gICAgICAgICAqIE9idmlvdXNseSB0aGlzIG1ldGhvZCBtYWtlcyBzZW5zZSBpbiBicm93c2VyIGVudmlyb25tZW50cyBvbmx5IChub3QgZm9yIE5vZGUuanMpIVxuICAgICAgICAgKiBAcGFyYW0ge251bWJlcn0gW21heFBob25lV2lkdGhdIHRoZSBtYXhpbXVtIGxvZ2ljYWwgcGl4ZWxzIChha2EuIENTUy1waXhlbHMpIHRvIGJlIGNvbnNpZGVyZWQgYXMgcGhvbmUuPGJyPlxuICAgICAgICAgKiAgICAgICAgVGhlIGFyZ3VtZW50IGlzIG9wdGlvbmFsIGFuZCBpZiBub3QgcHJlc2VudCBvciBmYWxzeSwgdGhlIHZhbHVlIG9mIHRoZSBjb25zdHJ1Y3RvciBpcyB0YWtlbi5cbiAgICAgICAgICogQHJldHVybnMge2Jvb2xlYW58dW5kZWZpbmVkfSA8Y29kZT51bmRlZmluZWQ8L2NvZGU+IGlmIHNjcmVlbiBzaXplIHdhc24ndCBkZXRlY3RhYmxlLCBlbHNlIDxjb2RlPnRydWU8L2NvZGU+XG4gICAgICAgICAqICAgICAgICAgIHdoZW4gc2NyZWVuLndpZHRoIGlzIGxlc3Mgb3IgZXF1YWwgdG8gbWF4UGhvbmVXaWR0aCwgb3RoZXJ3aXNlIDxjb2RlPmZhbHNlPC9jb2RlPi48YnI+XG4gICAgICAgICAqICAgICAgICAgIFdpbGwgYWx3YXlzIHJldHVybiA8Y29kZT51bmRlZmluZWQ8L2NvZGU+IHNlcnZlci1zaWRlLlxuICAgICAgICAgKi9cbiAgICAgICAgaXNQaG9uZVNpemVkOiBmdW5jdGlvbiAobWF4UGhvbmVXaWR0aCkge1xuICAgICAgICAgICAgcmV0dXJuIE1vYmlsZURldGVjdC5pc1Bob25lU2l6ZWQobWF4UGhvbmVXaWR0aCB8fCB0aGlzLm1heFBob25lV2lkdGgpO1xuICAgICAgICB9LFxuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBSZXR1cm5zIHRoZSBtb2JpbGUgZ3JhZGUgKCdBJywgJ0InLCAnQycpLlxuICAgICAgICAgKlxuICAgICAgICAgKiBAcmV0dXJucyB7U3RyaW5nfSBvbmUgb2YgdGhlIG1vYmlsZSBncmFkZXMgKCdBJywgJ0InLCAnQycpLlxuICAgICAgICAgKiBAZnVuY3Rpb24gTW9iaWxlRGV0ZWN0I21vYmlsZUdyYWRlXG4gICAgICAgICAqL1xuICAgICAgICBtb2JpbGVHcmFkZTogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgaWYgKHRoaXMuX2NhY2hlLmdyYWRlID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICB0aGlzLl9jYWNoZS5ncmFkZSA9IGltcGwubW9iaWxlR3JhZGUodGhpcyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fY2FjaGUuZ3JhZGU7XG4gICAgICAgIH1cbiAgICB9O1xuXG4gICAgLy8gZW52aXJvbm1lbnQtZGVwZW5kZW50XG4gICAgaWYgKHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnICYmIHdpbmRvdy5zY3JlZW4pIHtcbiAgICAgICAgTW9iaWxlRGV0ZWN0LmlzUGhvbmVTaXplZCA9IGZ1bmN0aW9uIChtYXhQaG9uZVdpZHRoKSB7XG4gICAgICAgICAgICByZXR1cm4gbWF4UGhvbmVXaWR0aCA8IDAgPyB1bmRlZmluZWQgOiBpbXBsLmdldERldmljZVNtYWxsZXJTaWRlKCkgPD0gbWF4UGhvbmVXaWR0aDtcbiAgICAgICAgfTtcbiAgICB9IGVsc2Uge1xuICAgICAgICBNb2JpbGVEZXRlY3QuaXNQaG9uZVNpemVkID0gZnVuY3Rpb24gKCkge307XG4gICAgfVxuXG4gICAgLy8gc2hvdWxkIG5vdCBiZSByZXBsYWNlZCBieSBhIGNvbXBsZXRlbHkgbmV3IG9iamVjdCAtIGp1c3Qgb3ZlcndyaXRlIGV4aXN0aW5nIG1ldGhvZHNcbiAgICBNb2JpbGVEZXRlY3QuX2ltcGwgPSBpbXBsO1xuICAgIFxuICAgIE1vYmlsZURldGVjdC52ZXJzaW9uID0gJzEuNC40IDIwMTktMDktMjEnO1xuXG4gICAgcmV0dXJuIE1vYmlsZURldGVjdDtcbn0pOyAvLyBlbmQgb2YgY2FsbCBvZiBkZWZpbmUoKVxufSkoKGZ1bmN0aW9uICh1bmRlZmluZWQpIHtcbiAgICBpZiAodHlwZW9mIG1vZHVsZSAhPT0gJ3VuZGVmaW5lZCcgJiYgbW9kdWxlLmV4cG9ydHMpIHtcbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uIChmYWN0b3J5KSB7IG1vZHVsZS5leHBvcnRzID0gZmFjdG9yeSgpOyB9O1xuICAgIH0gZWxzZSBpZiAodHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kKSB7XG4gICAgICAgIHJldHVybiBkZWZpbmU7XG4gICAgfSBlbHNlIGlmICh0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgICByZXR1cm4gZnVuY3Rpb24gKGZhY3RvcnkpIHsgd2luZG93Lk1vYmlsZURldGVjdCA9IGZhY3RvcnkoKTsgfTtcbiAgICB9IGVsc2Uge1xuICAgICAgICAvLyBwbGVhc2UgZmlsZSBhIGJ1ZyBpZiB5b3UgZ2V0IHRoaXMgZXJyb3IhXG4gICAgICAgIHRocm93IG5ldyBFcnJvcigndW5rbm93biBlbnZpcm9ubWVudCcpO1xuICAgIH1cbn0pKCkpOyIsImZ1bmN0aW9uIGVtcHR5KCkge31cblxuY2xhc3MgU2VsZWN0b3JCdXR0b25zIHtcbiAgY29uc3RydWN0b3IobmFtZSwgb25PbiA9IGVtcHR5LCBvbk9mZiA9IGVtcHR5KSB7XG4gICAgdGhpcy5jb250YWluZXIgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChuYW1lKTtcbiAgICB0aGlzLm9uT24gPSBvbk9uO1xuICAgIHRoaXMub25PZmYgPSBvbk9mZjtcblxuICAgIHRoaXMuYXJyYXkgPSBbXTtcbiAgICB0aGlzLnNlbGVjdGVkSW5kZXggPSAtMTtcblxuICAgIHRoaXMuX29uQ2xpY2sgPSB0aGlzLl9vbkNsaWNrLmJpbmQodGhpcyk7XG4gIH1cblxuICBhZGQobmFtZSkge1xuICAgIGNvbnN0IGluZGV4ID0gdGhpcy5hcnJheS5sZW5ndGg7XG4gICAgY29uc3QgYnV0dG9uID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG5cbiAgICBidXR0b24uY2xhc3NMaXN0LmFkZCgnc2VsZWN0b3ItYnV0dG9uJyk7XG4gICAgYnV0dG9uLmlubmVySFRNTCA9IG5hbWUucmVwbGFjZSgnXycsICcgJyk7XG4gICAgYnV0dG9uLnNldEF0dHJpYnV0ZSgnZGF0YS1pbmRleCcsIGluZGV4KTtcbiAgICBidXR0b24uc2V0QXR0cmlidXRlKCdkYXRhLXNvdW5kJywgbmFtZSk7XG4gICAgdGhpcy5jb250YWluZXIuYXBwZW5kQ2hpbGQoYnV0dG9uKTtcblxuICAgIHRoaXMuYXJyYXkucHVzaChidXR0b24pO1xuICB9XG5cbiAgZW5hYmxlKGluZGV4KSB7XG4gICAgaWYgKGluZGV4ID09PSB1bmRlZmluZWQpIHtcbiAgICAgIGZvciAoY29uc3QgYnV0dG9uIG9mIHRoaXMuYXJyYXkpIHtcbiAgICAgICAgYnV0dG9uLmNsYXNzTGlzdC5hZGQoJ2VuYWJsZWQnKTtcbiAgICAgICAgYnV0dG9uLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgdGhpcy5fb25DbGljayk7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIGNvbnN0IGJ1dHRvbiA9IHRoaXMuYXJyYXlbaW5kZXhdO1xuICAgICAgYnV0dG9uLmNsYXNzTGlzdC5hZGQoJ2VuYWJsZWQnKTtcbiAgICAgIGJ1dHRvbi5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIHRoaXMuX29uQ2xpY2spO1xuICAgIH1cbiAgfVxuXG4gIGRpc2FibGUoaW5kZXgpIHtcbiAgICBpZiAoaW5kZXggPT09IHVuZGVmaW5lZCkge1xuICAgICAgZm9yIChjb25zdCBidXR0b24gb2YgdGhpcy5hcnJheSkge1xuICAgICAgICBidXR0b24uY2xhc3NMaXN0LnJlbW92ZSgnZW5hYmxlZCcpO1xuICAgICAgICBidXR0b24ucmVtb3ZlRXZlbnRMaXN0ZW5lcignY2xpY2snLCB0aGlzLl9vbkNsaWNrKTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgY29uc3QgYnV0dG9uID0gdGhpcy5hcnJheVtpbmRleF07XG4gICAgICBidXR0b24uY2xhc3NMaXN0LnJlbW92ZSgnZW5hYmxlZCcpO1xuICAgICAgYnV0dG9uLnJlbW92ZUV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgdGhpcy5fb25DbGljayk7XG4gICAgfVxuICB9XG5cbiAgc2VsZWN0KGluZGV4KSB7XG4gICAgaWYgKGluZGV4ID09PSB1bmRlZmluZWQpIHtcbiAgICAgIGZvciAoY29uc3QgYnV0dG9uIG9mIHRoaXMuYXJyYXkpXG4gICAgICAgIGJ1dHRvbi5jbGFzc0xpc3QuYWRkKCdzZWxlY3RlZCcpO1xuICAgIH0gZWxzZSB7XG4gICAgICBjb25zdCBidXR0b24gPSB0aGlzLmFycmF5W2luZGV4XTtcbiAgICAgIGJ1dHRvbi5jbGFzc0xpc3QuYWRkKCdzZWxlY3RlZCcpO1xuICAgIH1cbiAgfVxuXG4gIGRlc2VsZWN0KGluZGV4KSB7XG4gICAgaWYgKGluZGV4ID09PSB1bmRlZmluZWQpIHtcbiAgICAgIGZvciAoY29uc3QgYnV0dG9uIG9mIHRoaXMuYXJyYXkpXG4gICAgICAgIGJ1dHRvbi5jbGFzc0xpc3QucmVtb3ZlKCdzZWxlY3RlZCcpO1xuICAgIH0gZWxzZSB7XG4gICAgICBjb25zdCBidXR0b24gPSB0aGlzLmFycmF5W2luZGV4XTtcbiAgICAgIGJ1dHRvbi5jbGFzc0xpc3QucmVtb3ZlKCdzZWxlY3RlZCcpO1xuICAgIH1cbiAgfVxuXG4gIF9vbkNsaWNrKGUpIHtcbiAgICBjb25zdCBidXR0b24gPSBlLnRhcmdldDtcbiAgICBjb25zdCBpbmRleCA9IHBhcnNlSW50KGJ1dHRvbi5kYXRhc2V0LmluZGV4KTtcblxuICAgIHRoaXMuZGVzZWxlY3QoKTtcblxuICAgIGlmIChpbmRleCA9PT0gdGhpcy5zZWxlY3RlZEluZGV4KSB7XG4gICAgICB0aGlzLnNlbGVjdGVkSW5kZXggPSAtMTtcbiAgICAgIHRoaXMub25PZmYoaW5kZXgpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLnNlbGVjdGVkSW5kZXggPSBpbmRleDtcbiAgICAgIHRoaXMuc2VsZWN0KGluZGV4KTtcbiAgICAgIHRoaXMub25PbihpbmRleCk7XG4gICAgfVxuICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IFNlbGVjdG9yQnV0dG9ucztcbiIsImltcG9ydCB7IGRlZmF1bHQgYXMgYXVkaW8gfSBmcm9tICd3YXZlcy1hdWRpbyc7XG5cbmNvbnN0IGF1ZGlvQ29udGV4dCA9IGF1ZGlvLmF1ZGlvQ29udGV4dDtcblxuY2xhc3MgUXVhZFN5bnRoIHtcbiAgY29uc3RydWN0b3IoKSB7XG4gICAgdGhpcy5fb3NjcyA9IG51bGw7XG4gICAgdGhpcy5fZ2FpbiA9IG51bGw7XG4gICAgdGhpcy5fYW1wID0gMTtcbiAgICB0aGlzLmZhZGVUaW1lID0gMC4xO1xuICB9XG5cbiAgc2V0IGdhaW4odmFsdWUpIHtcbiAgICBjb25zdCBnYWluID0gdGhpcy5fZ2FpbjtcblxuICAgIGlmIChnYWluKSB7XG4gICAgICBjb25zdCB0aW1lID0gYXVkaW9Db250ZXh0LmN1cnJlbnRUaW1lO1xuICAgICAgZ2Fpbi5nYWluLnNldFZhbHVlQXRUaW1lKHRoaXMuX2FtcCwgdGltZSk7XG4gICAgICBnYWluLmdhaW4ubGluZWFyUmFtcFRvVmFsdWVBdFRpbWUodmFsdWUsIHRpbWUgKyB0aGlzLmZhZGVUaW1lKTtcbiAgICB9XG5cbiAgICB0aGlzLl9hbXAgPSB2YWx1ZTtcbiAgfVxuXG4gIHN0YXJ0KGZyZXFzLCBhbXAgPSB0aGlzLl9hbXApIHtcbiAgICBpZiAodGhpcy5fb3NjcyA9PT0gbnVsbCkge1xuICAgICAgdGhpcy5zdG9wKCk7XG5cbiAgICAgIGNvbnN0IHRpbWUgPSBhdWRpb0NvbnRleHQuY3VycmVudFRpbWU7XG5cbiAgICAgIGNvbnN0IGdhaW4gPSBhdWRpb0NvbnRleHQuY3JlYXRlR2FpbigpO1xuICAgICAgZ2Fpbi5jb25uZWN0KGF1ZGlvQ29udGV4dC5kZXN0aW5hdGlvbik7XG4gICAgICBnYWluLmdhaW4udmFsdWUgPSAwO1xuICAgICAgZ2Fpbi5nYWluLnNldFZhbHVlQXRUaW1lKDAsIHRpbWUpO1xuICAgICAgZ2Fpbi5nYWluLmxpbmVhclJhbXBUb1ZhbHVlQXRUaW1lKGFtcCwgdGltZSArIHRoaXMuZmFkZVRpbWUpO1xuXG4gICAgICB0aGlzLl9vc2NzID0gW107XG5cbiAgICAgIGZvciAobGV0IGZyZXEgb2YgZnJlcXMpIHtcbiAgICAgICAgY29uc3Qgb3NjID0gYXVkaW9Db250ZXh0LmNyZWF0ZU9zY2lsbGF0b3IoKTtcbiAgICAgICAgb3NjLmNvbm5lY3QoZ2Fpbik7XG4gICAgICAgIG9zYy50eXBlID0gJ3NpbmUnO1xuICAgICAgICBvc2MuZnJlcXVlbmN5LnZhbHVlID0gZnJlcTtcbiAgICAgICAgb3NjLnN0YXJ0KHRpbWUpO1xuXG4gICAgICAgIHRoaXMuX29zY3MucHVzaChvc2MpO1xuICAgICAgfVxuXG4gICAgICB0aGlzLl9nYWluID0gZ2FpbjtcbiAgICAgIHRoaXMuX2FtcCA9IGFtcDtcbiAgICB9XG4gIH07XG5cbiAgc3RvcCgpIHtcbiAgICBpZiAodGhpcy5fb3NjcyAhPT0gbnVsbCkge1xuICAgICAgY29uc3QgdGltZSA9IGF1ZGlvQ29udGV4dC5jdXJyZW50VGltZTtcblxuICAgICAgdGhpcy5fZ2Fpbi5nYWluLnNldFZhbHVlQXRUaW1lKHRoaXMuX2FtcCwgdGltZSk7XG4gICAgICB0aGlzLl9nYWluLmdhaW4ubGluZWFyUmFtcFRvVmFsdWVBdFRpbWUoMCwgdGltZSArIHRoaXMuZmFkZVRpbWUpO1xuXG4gICAgICBmb3IgKGxldCBvc2Mgb2YgdGhpcy5fb3NjcylcbiAgICAgICAgb3NjLnN0b3AodGltZSArIHRoaXMuZmFkZVRpbWUpO1xuXG4gICAgICB0aGlzLl9vc2NzID0gbnVsbDtcbiAgICAgIHRoaXMuX2dhaW4gPSBudWxsO1xuICAgIH1cbiAgfTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgUXVhZFN5bnRoO1xuIiwiaW1wb3J0IHsgZGVmYXVsdCBhcyBhdWRpbyB9IGZyb20gJ3dhdmVzLWF1ZGlvJztcblxuY29uc3QgYXVkaW9Db250ZXh0ID0gYXVkaW8uYXVkaW9Db250ZXh0O1xuXG5jbGFzcyBRdWFkU3ludGgge1xuICBjb25zdHJ1Y3RvcigpIHtcbiAgICB0aGlzLl9vc2NzID0gbnVsbDtcbiAgICB0aGlzLl9tb2RzID0gbnVsbDtcbiAgICB0aGlzLl9sZm9zID0gbnVsbDtcbiAgICB0aGlzLl9nYWluID0gbnVsbDtcbiAgICB0aGlzLl9hbXAgPSAxO1xuICAgIHRoaXMuZmFkZVRpbWUgPSAwLjE7XG4gIH1cblxuICBzZXQgZ2Fpbih2YWx1ZSkge1xuICAgIGNvbnN0IGdhaW4gPSB0aGlzLl9nYWluO1xuXG4gICAgaWYgKGdhaW4pIHtcbiAgICAgIGNvbnN0IHRpbWUgPSBhdWRpb0NvbnRleHQuY3VycmVudFRpbWU7XG4gICAgICBnYWluLmdhaW4uc2V0VmFsdWVBdFRpbWUodGhpcy5fYW1wLCB0aW1lKTtcbiAgICAgIGdhaW4uZ2Fpbi5saW5lYXJSYW1wVG9WYWx1ZUF0VGltZSh2YWx1ZSwgdGltZSArIHRoaXMuZmFkZVRpbWUpO1xuICAgIH1cblxuICAgIHRoaXMuX2FtcCA9IHZhbHVlO1xuICB9XG5cbiAgc3RhcnQoZnJlcXMsIGFtcCA9IHRoaXMuX2FtcCkge1xuICAgIGlmICh0aGlzLl9vc2NzID09PSBudWxsKSB7XG4gICAgICB0aGlzLnN0b3AoKTtcblxuICAgICAgY29uc3QgdGltZSA9IGF1ZGlvQ29udGV4dC5jdXJyZW50VGltZTtcblxuICAgICAgY29uc3QgZ2FpbiA9IGF1ZGlvQ29udGV4dC5jcmVhdGVHYWluKCk7XG4gICAgICBnYWluLmNvbm5lY3QoYXVkaW9Db250ZXh0LmRlc3RpbmF0aW9uKTtcbiAgICAgIGdhaW4uZ2Fpbi52YWx1ZSA9IDA7XG4gICAgICBnYWluLmdhaW4uc2V0VmFsdWVBdFRpbWUoMCwgdGltZSk7XG4gICAgICBnYWluLmdhaW4ubGluZWFyUmFtcFRvVmFsdWVBdFRpbWUoYW1wLCB0aW1lICsgdGhpcy5mYWRlVGltZSk7XG5cbiAgICAgIHRoaXMuX29zY3MgPSBbXTtcbiAgICAgIHRoaXMuX21vZHMgPSBbXTtcbiAgICAgIHRoaXMuX2xmb3MgPSBbXTtcblxuICAgICAgZm9yIChsZXQgZnJlcSBvZiBmcmVxcykge1xuICAgICAgICBjb25zdCBtb2QgPSBhdWRpb0NvbnRleHQuY3JlYXRlR2FpbigpO1xuICAgICAgICBtb2QuY29ubmVjdChnYWluKTtcbiAgICAgICAgbW9kLmdhaW4udmFsdWUgPSAwO1xuXG4gICAgICAgIGNvbnN0IGxmbyA9IGF1ZGlvQ29udGV4dC5jcmVhdGVPc2NpbGxhdG9yKCk7XG4gICAgICAgIGxmby5jb25uZWN0KG1vZC5nYWluKTtcbiAgICAgICAgbGZvLnR5cGUgPSAnc2luZSc7XG4gICAgICAgIGxmby5mcmVxdWVuY3kudmFsdWUgPSAwLjI1ICsgMC4yNSAqIE1hdGgucmFuZG9tKCk7XG4gICAgICAgIGxmby5zdGFydCh0aW1lKTtcblxuICAgICAgICBjb25zdCBvc2MgPSBhdWRpb0NvbnRleHQuY3JlYXRlT3NjaWxsYXRvcigpO1xuICAgICAgICBvc2MuY29ubmVjdChtb2QpO1xuICAgICAgICBvc2MudHlwZSA9ICdzaW5lJztcbiAgICAgICAgb3NjLmZyZXF1ZW5jeS52YWx1ZSA9IGZyZXE7XG4gICAgICAgIG9zYy5zdGFydCh0aW1lKTtcblxuICAgICAgICB0aGlzLl9tb2RzLnB1c2gobW9kKTtcbiAgICAgICAgdGhpcy5fbGZvcy5wdXNoKGxmbyk7XG4gICAgICAgIHRoaXMuX29zY3MucHVzaChvc2MpO1xuICAgICAgfVxuXG4gICAgICB0aGlzLl9nYWluID0gZ2FpbjtcbiAgICAgIHRoaXMuX2FtcCA9IGFtcDtcbiAgICB9XG4gIH07XG5cbiAgc3RvcCgpIHtcbiAgICBpZiAodGhpcy5fb3NjcyAhPT0gbnVsbCkge1xuICAgICAgY29uc3QgdGltZSA9IGF1ZGlvQ29udGV4dC5jdXJyZW50VGltZTtcblxuICAgICAgdGhpcy5fZ2Fpbi5nYWluLnNldFZhbHVlQXRUaW1lKHRoaXMuX2FtcCwgdGltZSk7XG4gICAgICB0aGlzLl9nYWluLmdhaW4ubGluZWFyUmFtcFRvVmFsdWVBdFRpbWUoMCwgdGltZSArIHRoaXMuZmFkZVRpbWUpO1xuXG4gICAgICBmb3IgKGxldCBsZm8gb2YgdGhpcy5fbGZvcylcbiAgICAgICAgbGZvLnN0b3AodGltZSArIHRoaXMuZmFkZVRpbWUpO1xuXG4gICAgICBmb3IgKGxldCBvc2Mgb2YgdGhpcy5fb3NjcylcbiAgICAgICAgb3NjLnN0b3AodGltZSArIHRoaXMuZmFkZVRpbWUpO1xuXG4gICAgICB0aGlzLl9tb2RzID0gbnVsbDtcbiAgICAgIHRoaXMuX2xmb3MgPSBudWxsO1xuICAgICAgdGhpcy5fb3NjcyA9IG51bGw7XG4gICAgICB0aGlzLl9nYWluID0gbnVsbDtcbiAgICB9XG4gIH07XG59XG5cbmV4cG9ydCBkZWZhdWx0IFF1YWRTeW50aDtcbiIsImltcG9ydCB7IGRlZmF1bHQgYXMgYXVkaW8gfSBmcm9tICd3YXZlcy1hdWRpbyc7XG5cbmNvbnN0IGF1ZGlvQ29udGV4dCA9IGF1ZGlvLmF1ZGlvQ29udGV4dDtcblxuZnVuY3Rpb24gcG93ZXJUb0RlY2liZWwodmFsKSB7XG4gIHJldHVybiA0LjM0Mjk0NDgxOTAzMjUxNzUgKiBNYXRoLmxvZyh2YWwpOyAvLyAxMCAqIGxvZzEwKHZhbClcbn07XG5cbmZ1bmN0aW9uIGRlY2liZWxUb1Bvd2VyKHZhbCkge1xuICByZXR1cm4gTWF0aC5leHAoMC4yMzAyNTg1MDkyOTk0MDQ1OCAqIHZhbCk7IC8vIHBvdygxMCwgdmFsIC8gMTApXG59O1xuXG5jb25zdCBmcmVxVG9sZXJhbmNlID0gNDtcbmNvbnN0IGxldmVsVGhyZXNob2xkID0gLTM7XG5jb25zdCBscEIxID0gMC42NjY7XG5jb25zdCBscEEgPSAwLjMzMztcblxuY2xhc3MgU3BlY3RydW1BbmFseXNlciB7XG4gIGNvbnN0cnVjdG9yKGZmdFNpemUsIGZyZXFzLCBwZXJpb2QgPSAxLCBjYWxsYmFjayA9IG51bGwpIHtcbiAgICB0aGlzLmFuYWx5c2VyID0gYXVkaW9Db250ZXh0LmNyZWF0ZUFuYWx5c2VyKGZmdFNpemUpO1xuICAgIHRoaXMuYW5hbHlzZXIuc21vb3RoaW5nVGltZUNvbnN0YW50ID0gMDtcblxuICAgIGNvbnN0IGRlbHRhRnJlcSA9IGF1ZGlvQ29udGV4dC5zYW1wbGVSYXRlIC8gZmZ0U2l6ZTtcbiAgICB0aGlzLmRlbHRhRnJlcSA9IGRlbHRhRnJlcTtcblxuICAgIGNvbnN0IG51bUJpbnMgPSB0aGlzLmFuYWx5c2VyLmZyZXF1ZW5jeUJpbkNvdW50O1xuICAgIHRoaXMuYXJyYXkgPSBuZXcgRmxvYXQzMkFycmF5KG51bUJpbnMpO1xuXG4gICAgdGhpcy5zdGFydEJpbiA9IE1hdGgubWF4KDIsIE1hdGguZmxvb3IoZnJlcXNbMF0gLyBkZWx0YUZyZXEpKTtcbiAgICB0aGlzLmVuZEJpbiA9IE1hdGgubWluKG51bUJpbnMgLSAyLCBNYXRoLmNlaWwoZnJlcXNbZnJlcXMubGVuZ3RoIC0gMV0gLyBkZWx0YUZyZXEpKTtcblxuICAgIHRoaXMuZnJlcXMgPSBmcmVxcztcbiAgICB0aGlzLnBlYWtzID0gW107XG5cbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGZyZXFzLmxlbmd0aDsgaSsrKSB7XG4gICAgICB0aGlzLnBlYWtzW2ldID0ge1xuICAgICAgICBiaW46IGZyZXFzW2ldIC8gZGVsdGFGcmVxLFxuICAgICAgICBmcmVxOiBmcmVxc1tpXSxcbiAgICAgICAgbGV2ZWw6IC0xMjAsXG4gICAgICB9O1xuICAgIH1cblxuICAgIHRoaXMucGVyaW9kID0gcGVyaW9kO1xuICAgIHRoaXMuY2FsbGJhY2sgPSBjYWxsYmFjaztcbiAgICB0aGlzLnRpbWVvdXQgPSBudWxsO1xuXG4gICAgdGhpcy5pbnB1dCA9IHRoaXMuYW5hbHlzZXI7XG4gICAgdGhpcy5hbmFseXNlID0gdGhpcy5hbmFseXNlLmJpbmQodGhpcyk7XG4gIH1cblxuICBhbmFseXNlKCkge1xuICAgIGNvbnN0IGJpbnMgPSB0aGlzLmFycmF5O1xuICAgIGNvbnN0IHN0YXJ0QmluID0gdGhpcy5zdGFydEJpbjtcbiAgICBjb25zdCBlbmRCaW4gPSB0aGlzLmVuZEJpbjtcbiAgICBjb25zdCBudW1CaW5zID0gZW5kQmluIC0gc3RhcnRCaW47XG4gICAgY29uc3QgZnJlcXMgPSB0aGlzLmZyZXFzO1xuICAgIGNvbnN0IG51bUZyZXFzID0gZnJlcXMubGVuZ3RoO1xuICAgIGNvbnN0IGRlbHRhRnJlcSA9IHRoaXMuZGVsdGFGcmVxO1xuICAgIGNvbnN0IHBlYWtzID0gdGhpcy5wZWFrcztcblxuICAgIHRoaXMuYW5hbHlzZXIuZ2V0RmxvYXRGcmVxdWVuY3lEYXRhKGJpbnMpO1xuXG4gICAgbGV0IHRvdGFsUG93ZXIgPSAwO1xuXG4gICAgZm9yIChsZXQgaSA9IHN0YXJ0QmluOyBpIDwgZW5kQmluOyBpKyspIHtcbiAgICAgIGNvbnN0IGxldmVsID0gYmluc1tpXTtcbiAgICAgIGNvbnN0IHBvd2VyID0gZGVjaWJlbFRvUG93ZXIobGV2ZWwpO1xuXG4gICAgICB0b3RhbFBvd2VyICs9IHBvd2VyO1xuICAgIH1cblxuICAgIHRvdGFsUG93ZXIgLz0gbnVtQmlucztcbiAgICBjb25zdCBncm91bmRMZXZlbCA9IHBvd2VyVG9EZWNpYmVsKHRvdGFsUG93ZXIpO1xuXG4gICAgbGV0IGogPSAwO1xuXG4gICAgZm9yIChsZXQgaSA9IHN0YXJ0QmluOyBpIDwgZW5kQmluOyBpKyspIHtcbiAgICAgIGNvbnN0IGNlbnRlciA9IGJpbnNbaV07XG4gICAgICBjb25zdCBsZWZ0ID0gYmluc1tpIC0gMV07XG4gICAgICBjb25zdCByaWdodCA9IGJpbnNbaSArIDFdO1xuXG4gICAgICBjb25zdCBtaW5MZXZlbCA9IGdyb3VuZExldmVsICsgbGV2ZWxUaHJlc2hvbGQ7XG5cbiAgICAgIGlmIChjZW50ZXIgPiBsZWZ0ICYmIGNlbnRlciA+IHJpZ2h0ICYmIGNlbnRlciA+IG1pbkxldmVsKSB7XG4gICAgICAgIGNvbnN0IGEgPSAwLjUgKiAocmlnaHQgKyBsZWZ0KSAtIGNlbnRlcjtcbiAgICAgICAgY29uc3QgYiA9IDAuNSAqIChyaWdodCAtIGxlZnQpO1xuICAgICAgICBjb25zdCBmcmFjID0gLWIgLyAoMi4wICogYSk7XG4gICAgICAgIGNvbnN0IHBlYWtMZXZlbCA9IChhICogZnJhYyArIGIpICogZnJhYyArIGNlbnRlcjtcbiAgICAgICAgY29uc3QgcGVha0luZGV4ID0gaSArIGZyYWM7XG4gICAgICAgIGNvbnN0IGZyZXEgPSBwZWFrSW5kZXggKiBkZWx0YUZyZXE7XG5cbiAgICAgICAgd2hpbGUgKGogPCBudW1GcmVxcyAmJiBmcmVxID4gZnJlcXNbal0gJiYgZnJlcSAtIGZyZXFzW2pdID4gZnJlcVRvbGVyYW5jZSkge1xuICAgICAgICAgIHBlYWtzW2pdLmxldmVsICo9IGxwQjE7XG4gICAgICAgICAgcGVha3Nbal0ubGV2ZWwgKz0gbHBBICogLTEyMDtcbiAgICAgICAgICBqKys7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoaiA8IG51bUZyZXFzICYmIE1hdGguYWJzKGZyZXEgLSBmcmVxc1tqXSkgPD0gZnJlcVRvbGVyYW5jZSkge1xuICAgICAgICAgIHBlYWtzW2pdLmxldmVsICo9IGxwQjE7XG4gICAgICAgICAgcGVha3Nbal0ubGV2ZWwgKz0gbHBBICogcGVha0xldmVsO1xuICAgICAgICAgIGorKztcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIHdoaWxlIChqIDwgbnVtRnJlcXMpIHtcbiAgICAgIHBlYWtzW2pdLmxldmVsICo9IGxwQjE7XG4gICAgICBwZWFrc1tqXS5sZXZlbCArPSBscEEgKiAtMTIwO1xuICAgICAgaisrO1xuICAgIH0gICAgXG5cbiAgICBpZiAodGhpcy5jYWxsYmFjaylcbiAgICAgIHRoaXMuY2FsbGJhY2sodGhpcy5hcnJheSwgdGhpcy5wZWFrcyk7XG5cbiAgICB0aGlzLnRpbWVvdXQgPSBzZXRUaW1lb3V0KHRoaXMuYW5hbHlzZSwgdGhpcy5wZXJpb2QgKiAxMDAwKTtcbiAgfVxuXG4gIHN0YXJ0KCkge1xuICAgIHRoaXMuYW5hbHlzZSgpO1xuICB9XG5cbiAgc3RvcCgpIHtcbiAgICBpZiAodGhpcy50aW1lb3V0ICE9PSBudWxsKSB7XG4gICAgICBjbGVhclRpbWVvdXQodGhpcy50aW1lb3V0KTtcbiAgICAgIHRoaXMudGltZW91dCA9IG51bGw7XG4gICAgfVxuICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IFNwZWN0cnVtQW5hbHlzZXI7XG4iLCJcInVzZSBzdHJpY3RcIjtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcblxudmFyIF9jcmVhdGVDbGFzcyA9IGZ1bmN0aW9uICgpIHsgZnVuY3Rpb24gZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7IGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHsgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTsgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlOyBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSA9IHRydWU7IGlmIChcInZhbHVlXCIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTsgfSB9IHJldHVybiBmdW5jdGlvbiAoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7IGlmIChwcm90b1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7IGlmIChzdGF0aWNQcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpOyByZXR1cm4gQ29uc3RydWN0b3I7IH07IH0oKTtcblxuZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpOyB9IH1cblxuLyoqXG4gKiBgTW90aW9uSW5wdXRgIHNpbmdsZXRvbi5cbiAqIFRoZSBgTW90aW9uSW5wdXRgIHNpbmdsZXRvbiBhbGxvd3MgdG8gaW5pdGlhbGl6ZSBtb3Rpb24gZXZlbnRzXG4gKiBhbmQgdG8gbGlzdGVuIHRvIHRoZW0uXG4gKlxuICogQGNsYXNzIE1vdGlvbklucHV0XG4gKi9cbnZhciBNb3Rpb25JbnB1dCA9IGZ1bmN0aW9uICgpIHtcblxuICAvKipcbiAgICogQ3JlYXRlcyB0aGUgYE1vdGlvbklucHV0YCBtb2R1bGUgaW5zdGFuY2UuXG4gICAqXG4gICAqIEBjb25zdHJ1Y3RvclxuICAgKi9cbiAgZnVuY3Rpb24gTW90aW9uSW5wdXQoKSB7XG4gICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIE1vdGlvbklucHV0KTtcblxuICAgIC8qKlxuICAgICAqIFBvb2wgb2YgYWxsIGF2YWlsYWJsZSBtb2R1bGVzLlxuICAgICAqXG4gICAgICogQHRoaXMgTW90aW9uSW5wdXRcbiAgICAgKiBAdHlwZSB7b2JqZWN0fVxuICAgICAqIEBkZWZhdWx0IHt9XG4gICAgICovXG4gICAgdGhpcy5tb2R1bGVzID0ge307XG4gIH1cblxuICAvKipcbiAgICogQWRkcyBhIG1vZHVsZSB0byB0aGUgYE1vdGlvbklucHV0YCBtb2R1bGUuXG4gICAqXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBldmVudFR5cGUgLSBOYW1lIG9mIHRoZSBldmVudCB0eXBlLlxuICAgKiBAcGFyYW0ge0lucHV0TW9kdWxlfSBtb2R1bGUgLSBNb2R1bGUgdG8gYWRkIHRvIHRoZSBgTW90aW9uSW5wdXRgIG1vZHVsZS5cbiAgICovXG5cblxuICBfY3JlYXRlQ2xhc3MoTW90aW9uSW5wdXQsIFt7XG4gICAga2V5OiBcImFkZE1vZHVsZVwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBhZGRNb2R1bGUoZXZlbnRUeXBlLCBtb2R1bGUpIHtcbiAgICAgIHRoaXMubW9kdWxlc1tldmVudFR5cGVdID0gbW9kdWxlO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEdldHMgYSBtb2R1bGUuXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gZXZlbnRUeXBlIC0gTmFtZSBvZiB0aGUgZXZlbnQgdHlwZSAobW9kdWxlKSB0byByZXRyaWV2ZS5cbiAgICAgKiBAcmV0dXJuIHtJbnB1dE1vZHVsZX1cbiAgICAgKi9cblxuICB9LCB7XG4gICAga2V5OiBcImdldE1vZHVsZVwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBnZXRNb2R1bGUoZXZlbnRUeXBlKSB7XG4gICAgICByZXR1cm4gdGhpcy5tb2R1bGVzW2V2ZW50VHlwZV07XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUmVxdWlyZXMgYSBtb2R1bGUuXG4gICAgICogSWYgdGhlIG1vZHVsZSBoYXMgYmVlbiBpbml0aWFsaXplZCBhbHJlYWR5LCByZXR1cm5zIGl0cyBwcm9taXNlLiBPdGhlcndpc2UsXG4gICAgICogaW5pdGlhbGl6ZXMgdGhlIG1vZHVsZS5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBldmVudFR5cGUgLSBOYW1lIG9mIHRoZSBldmVudCB0eXBlIChtb2R1bGUpIHRvIHJlcXVpcmUuXG4gICAgICogQHJldHVybiB7UHJvbWlzZX1cbiAgICAgKi9cblxuICB9LCB7XG4gICAga2V5OiBcInJlcXVpcmVNb2R1bGVcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gcmVxdWlyZU1vZHVsZShldmVudFR5cGUpIHtcbiAgICAgIHZhciBtb2R1bGUgPSB0aGlzLmdldE1vZHVsZShldmVudFR5cGUpO1xuXG4gICAgICBpZiAobW9kdWxlLnByb21pc2UpIHJldHVybiBtb2R1bGUucHJvbWlzZTtcblxuICAgICAgcmV0dXJuIG1vZHVsZS5pbml0KCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogSW5pdGlhbGl6ZXMgdGhlIGBNb3Rpb25JbnB1dGAgbW9kdWxlLlxuICAgICAqXG4gICAgICogQHBhcmFtIHtBcnJheTxTdHJpbmc+fSBldmVudFR5cGVzIC0gQXJyYXkgb2YgdGhlIGV2ZW50IHR5cGVzIHRvIGluaXRpYWxpemUuXG4gICAgICogQHJldHVybiB7UHJvbWlzZX1cbiAgICAgKi9cblxuICB9LCB7XG4gICAga2V5OiBcImluaXRcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gaW5pdCgpIHtcbiAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG5cbiAgICAgIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBldmVudFR5cGVzID0gQXJyYXkoX2xlbiksIF9rZXkgPSAwOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgICAgIGV2ZW50VHlwZXNbX2tleV0gPSBhcmd1bWVudHNbX2tleV07XG4gICAgICB9XG5cbiAgICAgIGlmIChBcnJheS5pc0FycmF5KGV2ZW50VHlwZXNbMF0pKSBldmVudFR5cGVzID0gZXZlbnRUeXBlc1swXTtcblxuICAgICAgdmFyIG1vZHVsZVByb21pc2VzID0gZXZlbnRUeXBlcy5tYXAoZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgIHZhciBtb2R1bGUgPSBfdGhpcy5nZXRNb2R1bGUodmFsdWUpO1xuICAgICAgICByZXR1cm4gbW9kdWxlLmluaXQoKTtcbiAgICAgIH0pO1xuXG4gICAgICByZXR1cm4gUHJvbWlzZS5hbGwobW9kdWxlUHJvbWlzZXMpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEFkZHMgYSBsaXN0ZW5lci5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBldmVudFR5cGUgLSBOYW1lIG9mIHRoZSBldmVudCB0eXBlIChtb2R1bGUpIHRvIGFkZCBhIGxpc3RlbmVyIHRvLlxuICAgICAqIEBwYXJhbSB7ZnVuY3Rpb259IGxpc3RlbmVyIC0gTGlzdGVuZXIgdG8gYWRkLlxuICAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6IFwiYWRkTGlzdGVuZXJcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gYWRkTGlzdGVuZXIoZXZlbnRUeXBlLCBsaXN0ZW5lcikge1xuICAgICAgdmFyIG1vZHVsZSA9IHRoaXMuZ2V0TW9kdWxlKGV2ZW50VHlwZSk7XG4gICAgICBtb2R1bGUuYWRkTGlzdGVuZXIobGlzdGVuZXIpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFJlbW92ZXMgYSBsaXN0ZW5lci5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBldmVudFR5cGUgLSBOYW1lIG9mIHRoZSBldmVudCB0eXBlIChtb2R1bGUpIHRvIGFkZCBhIGxpc3RlbmVyIHRvLlxuICAgICAqIEBwYXJhbSB7ZnVuY3Rpb259IGxpc3RlbmVyIC0gTGlzdGVuZXIgdG8gcmVtb3ZlLlxuICAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6IFwicmVtb3ZlTGlzdGVuZXJcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gcmVtb3ZlTGlzdGVuZXIoZXZlbnRUeXBlLCBsaXN0ZW5lcikge1xuICAgICAgdmFyIG1vZHVsZSA9IHRoaXMuZ2V0TW9kdWxlKGV2ZW50VHlwZSk7XG4gICAgICBtb2R1bGUucmVtb3ZlTGlzdGVuZXIobGlzdGVuZXIpO1xuICAgIH1cbiAgfV0pO1xuXG4gIHJldHVybiBNb3Rpb25JbnB1dDtcbn0oKTtcblxuZXhwb3J0cy5kZWZhdWx0ID0gbmV3IE1vdGlvbklucHV0KCk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247Y2hhcnNldD11dGYtODtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJazF2ZEdsdmJrbHVjSFYwTG1weklsMHNJbTVoYldWeklqcGJJazF2ZEdsdmJrbHVjSFYwSWl3aWJXOWtkV3hsY3lJc0ltVjJaVzUwVkhsd1pTSXNJbTF2WkhWc1pTSXNJbWRsZEUxdlpIVnNaU0lzSW5CeWIyMXBjMlVpTENKcGJtbDBJaXdpWlhabGJuUlVlWEJsY3lJc0lrRnljbUY1SWl3aWFYTkJjbkpoZVNJc0ltMXZaSFZzWlZCeWIyMXBjMlZ6SWl3aWJXRndJaXdpZG1Gc2RXVWlMQ0pRY205dGFYTmxJaXdpWVd4c0lpd2liR2x6ZEdWdVpYSWlMQ0poWkdSTWFYTjBaVzVsY2lJc0luSmxiVzkyWlV4cGMzUmxibVZ5SWwwc0ltMWhjSEJwYm1keklqb2lPenM3T3pzN096czdPMEZCUVVFN096czdPenM3U1VGUFRVRXNWenM3UVVGRlNqczdPenM3UVVGTFFTeDVRa0ZCWXp0QlFVRkJPenRCUVVWYU96czdPenM3TzBGQlQwRXNVMEZCUzBNc1QwRkJUQ3hIUVVGbExFVkJRV1k3UVVGRFJEczdRVUZGUkRzN096czdPenM3T3pzNFFrRk5WVU1zVXl4RlFVRlhReXhOTEVWQlFWRTdRVUZETTBJc1YwRkJTMFlzVDBGQlRDeERRVUZoUXl4VFFVRmlMRWxCUVRCQ1F5eE5RVUV4UWp0QlFVTkVPenRCUVVWRU96czdPenM3T3pzN09FSkJUVlZFTEZNc1JVRkJWenRCUVVOdVFpeGhRVUZQTEV0QlFVdEVMRTlCUVV3c1EwRkJZVU1zVTBGQllpeERRVUZRTzBGQlEwUTdPMEZCUlVRN096czdPenM3T3pzN08ydERRVkZqUVN4VExFVkJRVmM3UVVGRGRrSXNWVUZCVFVNc1UwRkJVeXhMUVVGTFF5eFRRVUZNTEVOQlFXVkdMRk5CUVdZc1EwRkJaanM3UVVGRlFTeFZRVUZKUXl4UFFVRlBSU3hQUVVGWUxFVkJRMFVzVDBGQlQwWXNUMEZCVDBVc1QwRkJaRHM3UVVGRlJpeGhRVUZQUml4UFFVRlBSeXhKUVVGUUxFVkJRVkE3UVVGRFJEczdRVUZGUkRzN096czdPenM3T3pKQ1FVMXZRanRCUVVGQk96dEJRVUZCTEhkRFFVRmFReXhWUVVGWk8wRkJRVnBCTEd0Q1FVRlpPMEZCUVVFN08wRkJRMnhDTEZWQlFVbERMRTFCUVUxRExFOUJRVTRzUTBGQlkwWXNWMEZCVnl4RFFVRllMRU5CUVdRc1EwRkJTaXhGUVVORlFTeGhRVUZoUVN4WFFVRlhMRU5CUVZnc1EwRkJZanM3UVVGRlJpeFZRVUZOUnl4cFFrRkJhVUpJTEZkQlFWZEpMRWRCUVZnc1EwRkJaU3hWUVVGRFF5eExRVUZFTEVWQlFWYzdRVUZETDBNc1dVRkJUVlFzVTBGQlV5eE5RVUZMUXl4VFFVRk1MRU5CUVdWUkxFdEJRV1lzUTBGQlpqdEJRVU5CTEdWQlFVOVVMRTlCUVU5SExFbEJRVkFzUlVGQlVEdEJRVU5FTEU5QlNITkNMRU5CUVhaQ096dEJRVXRCTEdGQlFVOVBMRkZCUVZGRExFZEJRVklzUTBGQldVb3NZMEZCV2l4RFFVRlFPMEZCUTBRN08wRkJSVVE3T3pzN096czdPenRuUTBGTldWSXNVeXhGUVVGWFlTeFJMRVZCUVZVN1FVRkRMMElzVlVGQlRWb3NVMEZCVXl4TFFVRkxReXhUUVVGTUxFTkJRV1ZHTEZOQlFXWXNRMEZCWmp0QlFVTkJReXhoUVVGUFlTeFhRVUZRTEVOQlFXMUNSQ3hSUVVGdVFqdEJRVU5FT3p0QlFVVkVPenM3T3pzN096czdiVU5CVFdWaUxGTXNSVUZCVjJFc1VTeEZRVUZWTzBGQlEyeERMRlZCUVUxYUxGTkJRVk1zUzBGQlMwTXNVMEZCVEN4RFFVRmxSaXhUUVVGbUxFTkJRV1k3UVVGRFFVTXNZVUZCVDJNc1kwRkJVQ3hEUVVGelFrWXNVVUZCZEVJN1FVRkRSRHM3T3pzN08ydENRVWRaTEVsQlFVbG1MRmRCUVVvc1JTSXNJbVpwYkdVaU9pSk5iM1JwYjI1SmJuQjFkQzVxY3lJc0luTnZkWEpqWlhORGIyNTBaVzUwSWpwYklpOHFLbHh1SUNvZ1lFMXZkR2x2YmtsdWNIVjBZQ0J6YVc1bmJHVjBiMjR1WEc0Z0tpQlVhR1VnWUUxdmRHbHZia2x1Y0hWMFlDQnphVzVuYkdWMGIyNGdZV3hzYjNkeklIUnZJR2x1YVhScFlXeHBlbVVnYlc5MGFXOXVJR1YyWlc1MGMxeHVJQ29nWVc1a0lIUnZJR3hwYzNSbGJpQjBieUIwYUdWdExseHVJQ3BjYmlBcUlFQmpiR0Z6Y3lCTmIzUnBiMjVKYm5CMWRGeHVJQ292WEc1amJHRnpjeUJOYjNScGIyNUpibkIxZENCN1hHNWNiaUFnTHlvcVhHNGdJQ0FxSUVOeVpXRjBaWE1nZEdobElHQk5iM1JwYjI1SmJuQjFkR0FnYlc5a2RXeGxJR2x1YzNSaGJtTmxMbHh1SUNBZ0tseHVJQ0FnS2lCQVkyOXVjM1J5ZFdOMGIzSmNiaUFnSUNvdlhHNGdJR052Ym5OMGNuVmpkRzl5S0NrZ2UxeHVYRzRnSUNBZ0x5b3FYRzRnSUNBZ0lDb2dVRzl2YkNCdlppQmhiR3dnWVhaaGFXeGhZbXhsSUcxdlpIVnNaWE11WEc0Z0lDQWdJQ3BjYmlBZ0lDQWdLaUJBZEdocGN5Qk5iM1JwYjI1SmJuQjFkRnh1SUNBZ0lDQXFJRUIwZVhCbElIdHZZbXBsWTNSOVhHNGdJQ0FnSUNvZ1FHUmxabUYxYkhRZ2UzMWNiaUFnSUNBZ0tpOWNiaUFnSUNCMGFHbHpMbTF2WkhWc1pYTWdQU0I3ZlR0Y2JpQWdmVnh1WEc0Z0lDOHFLbHh1SUNBZ0tpQkJaR1J6SUdFZ2JXOWtkV3hsSUhSdklIUm9aU0JnVFc5MGFXOXVTVzV3ZFhSZ0lHMXZaSFZzWlM1Y2JpQWdJQ3BjYmlBZ0lDb2dRSEJoY21GdElIdHpkSEpwYm1kOUlHVjJaVzUwVkhsd1pTQXRJRTVoYldVZ2IyWWdkR2hsSUdWMlpXNTBJSFI1Y0dVdVhHNGdJQ0FxSUVCd1lYSmhiU0I3U1c1d2RYUk5iMlIxYkdWOUlHMXZaSFZzWlNBdElFMXZaSFZzWlNCMGJ5QmhaR1FnZEc4Z2RHaGxJR0JOYjNScGIyNUpibkIxZEdBZ2JXOWtkV3hsTGx4dUlDQWdLaTljYmlBZ1lXUmtUVzlrZFd4bEtHVjJaVzUwVkhsd1pTd2diVzlrZFd4bEtTQjdYRzRnSUNBZ2RHaHBjeTV0YjJSMWJHVnpXMlYyWlc1MFZIbHdaVjBnUFNCdGIyUjFiR1U3WEc0Z0lIMWNibHh1SUNBdktpcGNiaUFnSUNvZ1IyVjBjeUJoSUcxdlpIVnNaUzVjYmlBZ0lDcGNiaUFnSUNvZ1FIQmhjbUZ0SUh0emRISnBibWQ5SUdWMlpXNTBWSGx3WlNBdElFNWhiV1VnYjJZZ2RHaGxJR1YyWlc1MElIUjVjR1VnS0cxdlpIVnNaU2tnZEc4Z2NtVjBjbWxsZG1VdVhHNGdJQ0FxSUVCeVpYUjFjbTRnZTBsdWNIVjBUVzlrZFd4bGZWeHVJQ0FnS2k5Y2JpQWdaMlYwVFc5a2RXeGxLR1YyWlc1MFZIbHdaU2tnZTF4dUlDQWdJSEpsZEhWeWJpQjBhR2x6TG0xdlpIVnNaWE5iWlhabGJuUlVlWEJsWFR0Y2JpQWdmVnh1WEc0Z0lDOHFLbHh1SUNBZ0tpQlNaWEYxYVhKbGN5QmhJRzF2WkhWc1pTNWNiaUFnSUNvZ1NXWWdkR2hsSUcxdlpIVnNaU0JvWVhNZ1ltVmxiaUJwYm1sMGFXRnNhWHBsWkNCaGJISmxZV1I1TENCeVpYUjFjbTV6SUdsMGN5QndjbTl0YVhObExpQlBkR2hsY25kcGMyVXNYRzRnSUNBcUlHbHVhWFJwWVd4cGVtVnpJSFJvWlNCdGIyUjFiR1V1WEc0Z0lDQXFYRzRnSUNBcUlFQndZWEpoYlNCN2MzUnlhVzVuZlNCbGRtVnVkRlI1Y0dVZ0xTQk9ZVzFsSUc5bUlIUm9aU0JsZG1WdWRDQjBlWEJsSUNodGIyUjFiR1VwSUhSdklISmxjWFZwY21VdVhHNGdJQ0FxSUVCeVpYUjFjbTRnZTFCeWIyMXBjMlY5WEc0Z0lDQXFMMXh1SUNCeVpYRjFhWEpsVFc5a2RXeGxLR1YyWlc1MFZIbHdaU2tnZTF4dUlDQWdJR052Ym5OMElHMXZaSFZzWlNBOUlIUm9hWE11WjJWMFRXOWtkV3hsS0dWMlpXNTBWSGx3WlNrN1hHNWNiaUFnSUNCcFppQW9iVzlrZFd4bExuQnliMjFwYzJVcFhHNGdJQ0FnSUNCeVpYUjFjbTRnYlc5a2RXeGxMbkJ5YjIxcGMyVTdYRzVjYmlBZ0lDQnlaWFIxY200Z2JXOWtkV3hsTG1sdWFYUW9LVHRjYmlBZ2ZWeHVYRzRnSUM4cUtseHVJQ0FnS2lCSmJtbDBhV0ZzYVhwbGN5QjBhR1VnWUUxdmRHbHZia2x1Y0hWMFlDQnRiMlIxYkdVdVhHNGdJQ0FxWEc0Z0lDQXFJRUJ3WVhKaGJTQjdRWEp5WVhrOFUzUnlhVzVuUG4wZ1pYWmxiblJVZVhCbGN5QXRJRUZ5Y21GNUlHOW1JSFJvWlNCbGRtVnVkQ0IwZVhCbGN5QjBieUJwYm1sMGFXRnNhWHBsTGx4dUlDQWdLaUJBY21WMGRYSnVJSHRRY205dGFYTmxmVnh1SUNBZ0tpOWNiaUFnYVc1cGRDZ3VMaTVsZG1WdWRGUjVjR1Z6S1NCN1hHNGdJQ0FnYVdZZ0tFRnljbUY1TG1selFYSnlZWGtvWlhabGJuUlVlWEJsYzFzd1hTa3BYRzRnSUNBZ0lDQmxkbVZ1ZEZSNWNHVnpJRDBnWlhabGJuUlVlWEJsYzFzd1hWeHVYRzRnSUNBZ1kyOXVjM1FnYlc5a2RXeGxVSEp2YldselpYTWdQU0JsZG1WdWRGUjVjR1Z6TG0xaGNDZ29kbUZzZFdVcElEMCtJSHRjYmlBZ0lDQWdJR052Ym5OMElHMXZaSFZzWlNBOUlIUm9hWE11WjJWMFRXOWtkV3hsS0haaGJIVmxLVHRjYmlBZ0lDQWdJSEpsZEhWeWJpQnRiMlIxYkdVdWFXNXBkQ2dwTzF4dUlDQWdJSDBwTzF4dVhHNGdJQ0FnY21WMGRYSnVJRkJ5YjIxcGMyVXVZV3hzS0cxdlpIVnNaVkJ5YjIxcGMyVnpLVHRjYmlBZ2ZWeHVYRzRnSUM4cUtseHVJQ0FnS2lCQlpHUnpJR0VnYkdsemRHVnVaWEl1WEc0Z0lDQXFYRzRnSUNBcUlFQndZWEpoYlNCN2MzUnlhVzVuZlNCbGRtVnVkRlI1Y0dVZ0xTQk9ZVzFsSUc5bUlIUm9aU0JsZG1WdWRDQjBlWEJsSUNodGIyUjFiR1VwSUhSdklHRmtaQ0JoSUd4cGMzUmxibVZ5SUhSdkxseHVJQ0FnS2lCQWNHRnlZVzBnZTJaMWJtTjBhVzl1ZlNCc2FYTjBaVzVsY2lBdElFeHBjM1JsYm1WeUlIUnZJR0ZrWkM1Y2JpQWdJQ292WEc0Z0lHRmtaRXhwYzNSbGJtVnlLR1YyWlc1MFZIbHdaU3dnYkdsemRHVnVaWElwSUh0Y2JpQWdJQ0JqYjI1emRDQnRiMlIxYkdVZ1BTQjBhR2x6TG1kbGRFMXZaSFZzWlNobGRtVnVkRlI1Y0dVcE8xeHVJQ0FnSUcxdlpIVnNaUzVoWkdSTWFYTjBaVzVsY2loc2FYTjBaVzVsY2lrN1hHNGdJSDFjYmx4dUlDQXZLaXBjYmlBZ0lDb2dVbVZ0YjNabGN5QmhJR3hwYzNSbGJtVnlMbHh1SUNBZ0tseHVJQ0FnS2lCQWNHRnlZVzBnZTNOMGNtbHVaMzBnWlhabGJuUlVlWEJsSUMwZ1RtRnRaU0J2WmlCMGFHVWdaWFpsYm5RZ2RIbHdaU0FvYlc5a2RXeGxLU0IwYnlCaFpHUWdZU0JzYVhOMFpXNWxjaUIwYnk1Y2JpQWdJQ29nUUhCaGNtRnRJSHRtZFc1amRHbHZibjBnYkdsemRHVnVaWElnTFNCTWFYTjBaVzVsY2lCMGJ5QnlaVzF2ZG1VdVhHNGdJQ0FxTDF4dUlDQnlaVzF2ZG1WTWFYTjBaVzVsY2lobGRtVnVkRlI1Y0dVc0lHeHBjM1JsYm1WeUtTQjdYRzRnSUNBZ1kyOXVjM1FnYlc5a2RXeGxJRDBnZEdocGN5NW5aWFJOYjJSMWJHVW9aWFpsYm5SVWVYQmxLVHRjYmlBZ0lDQnRiMlIxYkdVdWNtVnRiM1psVEdsemRHVnVaWElvYkdsemRHVnVaWElwTzF4dUlDQjlYRzU5WEc1Y2JtVjRjRzl5ZENCa1pXWmhkV3gwSUc1bGR5Qk5iM1JwYjI1SmJuQjFkQ2dwTzF4dUlsMTkiLCJcInVzZSBzdHJpY3RcIjtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcblxudmFyIF9jcmVhdGVDbGFzcyA9IGZ1bmN0aW9uICgpIHsgZnVuY3Rpb24gZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7IGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHsgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTsgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlOyBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSA9IHRydWU7IGlmIChcInZhbHVlXCIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTsgfSB9IHJldHVybiBmdW5jdGlvbiAoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7IGlmIChwcm90b1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7IGlmIChzdGF0aWNQcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpOyByZXR1cm4gQ29uc3RydWN0b3I7IH07IH0oKTtcblxuZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpOyB9IH1cblxuLyoqXG4gKiBgSW5wdXRNb2R1bGVgIGNsYXNzLlxuICogVGhlIGBJbnB1dE1vZHVsZWAgY2xhc3MgYWxsb3dzIHRvIGluc3RhbnRpYXRlIG1vZHVsZXMgdGhhdCBhcmUgcGFydCBvZiB0aGVcbiAqIG1vdGlvbiBpbnB1dCBtb2R1bGUsIGFuZCB0aGF0IHByb3ZpZGUgdmFsdWVzIChmb3IgaW5zdGFuY2UsIGBkZXZpY2VvcmllbnRhdGlvbmAsXG4gKiBgYWNjZWxlcmF0aW9uYCwgYGVuZXJneWApLlxuICpcbiAqIEBjbGFzcyBJbnB1dE1vZHVsZVxuICovXG52YXIgSW5wdXRNb2R1bGUgPSBmdW5jdGlvbiAoKSB7XG5cbiAgLyoqXG4gICAqIENyZWF0ZXMgYW4gYElucHV0TW9kdWxlYCBtb2R1bGUgaW5zdGFuY2UuXG4gICAqXG4gICAqIEBjb25zdHJ1Y3RvclxuICAgKiBAcGFyYW0ge3N0cmluZ30gZXZlbnRUeXBlIC0gTmFtZSBvZiB0aGUgbW9kdWxlIC8gZXZlbnQgKCplLmcuKiBgZGV2aWNlb3JpZW50YXRpb24sICdhY2NlbGVyYXRpb24nLCAnZW5lcmd5JykuXG4gICAqL1xuICBmdW5jdGlvbiBJbnB1dE1vZHVsZShldmVudFR5cGUpIHtcbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgSW5wdXRNb2R1bGUpO1xuXG4gICAgLyoqXG4gICAgICogRXZlbnQgdHlwZSBvZiB0aGUgbW9kdWxlLlxuICAgICAqXG4gICAgICogQHRoaXMgSW5wdXRNb2R1bGVcbiAgICAgKiBAdHlwZSB7c3RyaW5nfVxuICAgICAqIEBjb25zdGFudFxuICAgICAqL1xuICAgIHRoaXMuZXZlbnRUeXBlID0gZXZlbnRUeXBlO1xuXG4gICAgLyoqXG4gICAgICogQXJyYXkgb2YgbGlzdGVuZXJzIGF0dGFjaGVkIHRvIHRoaXMgbW9kdWxlIC8gZXZlbnQuXG4gICAgICpcbiAgICAgKiBAdGhpcyBJbnB1dE1vZHVsZVxuICAgICAqIEB0eXBlIHtTZXQ8RnVuY3Rpb24+fVxuICAgICAqL1xuICAgIHRoaXMubGlzdGVuZXJzID0gbmV3IFNldCgpO1xuXG4gICAgLyoqXG4gICAgICogRXZlbnQgc2VudCBieSB0aGlzIG1vZHVsZS5cbiAgICAgKlxuICAgICAqIEB0aGlzIElucHV0TW9kdWxlXG4gICAgICogQHR5cGUge251bWJlcnxudW1iZXJbXX1cbiAgICAgKiBAZGVmYXVsdCBudWxsXG4gICAgICovXG4gICAgdGhpcy5ldmVudCA9IG51bGw7XG5cbiAgICAvKipcbiAgICAgKiBNb2R1bGUgcHJvbWlzZSAocmVzb2x2ZWQgd2hlbiB0aGUgbW9kdWxlIGlzIGluaXRpYWxpemVkKS5cbiAgICAgKlxuICAgICAqIEB0aGlzIElucHV0TW9kdWxlXG4gICAgICogQHR5cGUge1Byb21pc2V9XG4gICAgICogQGRlZmF1bHQgbnVsbFxuICAgICAqL1xuICAgIHRoaXMucHJvbWlzZSA9IG51bGw7XG5cbiAgICAvKipcbiAgICAgKiBJbmRpY2F0ZXMgaWYgdGhlIG1vZHVsZSdzIGV2ZW50IHZhbHVlcyBhcmUgY2FsY3VsYXRlZCBmcm9tIHBhcmVudCBtb2R1bGVzIC8gZXZlbnRzLlxuICAgICAqXG4gICAgICogQHRoaXMgSW5wdXRNb2R1bGVcbiAgICAgKiBAdHlwZSB7Ym9vbH1cbiAgICAgKiBAZGVmYXVsdCBmYWxzZVxuICAgICAqL1xuICAgIHRoaXMuaXNDYWxjdWxhdGVkID0gZmFsc2U7XG5cbiAgICAvKipcbiAgICAgKiBJbmRpY2F0ZXMgaWYgdGhlIG1vZHVsZSdzIGV2ZW50IHZhbHVlcyBhcmUgcHJvdmlkZWQgYnkgdGhlIGRldmljZSdzIHNlbnNvcnMuXG4gICAgICogKCpJLmUuKiBpbmRpY2F0ZXMgaWYgdGhlIGAnZGV2aWNlbW90aW9uJ2Agb3IgYCdkZXZpY2VvcmllbnRhdGlvbidgIGV2ZW50cyBwcm92aWRlIHRoZSByZXF1aXJlZCByYXcgdmFsdWVzLilcbiAgICAgKlxuICAgICAqIEB0aGlzIElucHV0TW9kdWxlXG4gICAgICogQHR5cGUge2Jvb2x9XG4gICAgICogQGRlZmF1bHQgZmFsc2VcbiAgICAgKi9cbiAgICB0aGlzLmlzUHJvdmlkZWQgPSBmYWxzZTtcblxuICAgIC8qKlxuICAgICAqIFBlcmlvZCBhdCB3aGljaCB0aGUgbW9kdWxlJ3MgZXZlbnRzIGFyZSBzZW50IChgdW5kZWZpbmVkYCBpZiB0aGUgZXZlbnRzIGFyZSBub3Qgc2VudCBhdCByZWd1bGFyIGludGVydmFscykuXG4gICAgICpcbiAgICAgKiBAdGhpcyBJbnB1dE1vZHVsZVxuICAgICAqIEB0eXBlIHtudW1iZXJ9XG4gICAgICogQGRlZmF1bHQgdW5kZWZpbmVkXG4gICAgICovXG4gICAgdGhpcy5wZXJpb2QgPSB1bmRlZmluZWQ7XG5cbiAgICB0aGlzLmVtaXQgPSB0aGlzLmVtaXQuYmluZCh0aGlzKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBJbmRpY2F0ZXMgd2hldGhlciB0aGUgbW9kdWxlIGNhbiBwcm92aWRlIHZhbHVlcyBvciBub3QuXG4gICAqXG4gICAqIEB0eXBlIHtib29sfVxuICAgKiBAcmVhZG9ubHlcbiAgICovXG5cblxuICBfY3JlYXRlQ2xhc3MoSW5wdXRNb2R1bGUsIFt7XG4gICAga2V5OiBcImluaXRcIixcblxuXG4gICAgLyoqXG4gICAgICogSW5pdGlhbGl6ZXMgdGhlIG1vZHVsZS5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7ZnVuY3Rpb259IHByb21pc2VGdW4gLSBQcm9taXNlIGZ1bmN0aW9uIHRoYXQgdGFrZXMgdGhlIGByZXNvbHZlYCBhbmQgYHJlamVjdGAgZnVuY3Rpb25zIGFzIGFyZ3VtZW50cy5cbiAgICAgKiBAcmV0dXJuIHtQcm9taXNlfVxuICAgICAqL1xuICAgIHZhbHVlOiBmdW5jdGlvbiBpbml0KHByb21pc2VGdW4pIHtcbiAgICAgIHRoaXMucHJvbWlzZSA9IG5ldyBQcm9taXNlKHByb21pc2VGdW4pO1xuICAgICAgcmV0dXJuIHRoaXMucHJvbWlzZTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBBZGRzIGEgbGlzdGVuZXIgdG8gdGhlIG1vZHVsZS5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7ZnVuY3Rpb259IGxpc3RlbmVyIC0gTGlzdGVuZXIgdG8gYWRkLlxuICAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6IFwiYWRkTGlzdGVuZXJcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gYWRkTGlzdGVuZXIobGlzdGVuZXIpIHtcbiAgICAgIHRoaXMubGlzdGVuZXJzLmFkZChsaXN0ZW5lcik7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUmVtb3ZlcyBhIGxpc3RlbmVyIGZyb20gdGhlIG1vZHVsZS5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7ZnVuY3Rpb259IGxpc3RlbmVyIC0gTGlzdGVuZXIgdG8gcmVtb3ZlLlxuICAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6IFwicmVtb3ZlTGlzdGVuZXJcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gcmVtb3ZlTGlzdGVuZXIobGlzdGVuZXIpIHtcbiAgICAgIHRoaXMubGlzdGVuZXJzLmRlbGV0ZShsaXN0ZW5lcik7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUHJvcGFnYXRlcyBhbiBldmVudCB0byBhbGwgdGhlIG1vZHVsZSdzIGxpc3RlbmVycy5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfG51bWJlcltdfSBbZXZlbnQ9dGhpcy5ldmVudF0gLSBFdmVudCB2YWx1ZXMgdG8gcHJvcGFnYXRlIHRvIHRoZSBtb2R1bGUncyBsaXN0ZW5lcnMuXG4gICAgICovXG5cbiAgfSwge1xuICAgIGtleTogXCJlbWl0XCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGVtaXQoKSB7XG4gICAgICB2YXIgZXZlbnQgPSBhcmd1bWVudHMubGVuZ3RoID4gMCAmJiBhcmd1bWVudHNbMF0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1swXSA6IHRoaXMuZXZlbnQ7XG5cbiAgICAgIHRoaXMubGlzdGVuZXJzLmZvckVhY2goZnVuY3Rpb24gKGxpc3RlbmVyKSB7XG4gICAgICAgIHJldHVybiBsaXN0ZW5lcihldmVudCk7XG4gICAgICB9KTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwiaXNWYWxpZFwiLFxuICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgcmV0dXJuIHRoaXMuaXNQcm92aWRlZCB8fCB0aGlzLmlzQ2FsY3VsYXRlZDtcbiAgICB9XG4gIH1dKTtcblxuICByZXR1cm4gSW5wdXRNb2R1bGU7XG59KCk7XG5cbmV4cG9ydHMuZGVmYXVsdCA9IElucHV0TW9kdWxlO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2NoYXJzZXQ9dXRmLTg7YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSWtsdWNIVjBUVzlrZFd4bExtcHpJbDBzSW01aGJXVnpJanBiSWtsdWNIVjBUVzlrZFd4bElpd2laWFpsYm5SVWVYQmxJaXdpYkdsemRHVnVaWEp6SWl3aVUyVjBJaXdpWlhabGJuUWlMQ0p3Y205dGFYTmxJaXdpYVhORFlXeGpkV3hoZEdWa0lpd2lhWE5RY205MmFXUmxaQ0lzSW5CbGNtbHZaQ0lzSW5WdVpHVm1hVzVsWkNJc0ltVnRhWFFpTENKaWFXNWtJaXdpY0hKdmJXbHpaVVoxYmlJc0lsQnliMjFwYzJVaUxDSnNhWE4wWlc1bGNpSXNJbUZrWkNJc0ltUmxiR1YwWlNJc0ltWnZja1ZoWTJnaVhTd2liV0Z3Y0dsdVozTWlPaUk3T3pzN096czdPenM3UVVGQlFUczdPenM3T3pzN1NVRlJUVUVzVnpzN1FVRkZTanM3T3pzN08wRkJUVUVzZFVKQlFWbERMRk5CUVZvc1JVRkJkVUk3UVVGQlFUczdRVUZGY2tJN096czdPenM3UVVGUFFTeFRRVUZMUVN4VFFVRk1MRWRCUVdsQ1FTeFRRVUZxUWpzN1FVRkZRVHM3T3pzN08wRkJUVUVzVTBGQlMwTXNVMEZCVEN4SFFVRnBRaXhKUVVGSlF5eEhRVUZLTEVWQlFXcENPenRCUVVWQk96czdPenM3TzBGQlQwRXNVMEZCUzBNc1MwRkJUQ3hIUVVGaExFbEJRV0k3TzBGQlJVRTdPenM3T3pzN1FVRlBRU3hUUVVGTFF5eFBRVUZNTEVkQlFXVXNTVUZCWmpzN1FVRkZRVHM3T3pzN096dEJRVTlCTEZOQlFVdERMRmxCUVV3c1IwRkJiMElzUzBGQmNFSTdPMEZCUlVFN096czdPenM3TzBGQlVVRXNVMEZCUzBNc1ZVRkJUQ3hIUVVGclFpeExRVUZzUWpzN1FVRkZRVHM3T3pzN096dEJRVTlCTEZOQlFVdERMRTFCUVV3c1IwRkJZME1zVTBGQlpEczdRVUZGUVN4VFFVRkxReXhKUVVGTUxFZEJRVmtzUzBGQlMwRXNTVUZCVEN4RFFVRlZReXhKUVVGV0xFTkJRV1VzU1VGQlppeERRVUZhTzBGQlEwUTdPMEZCUlVRN096czdPenM3T3pzN096dEJRVlZCT3pzN096czdlVUpCVFV0RExGVXNSVUZCV1R0QlFVTm1MRmRCUVV0UUxFOUJRVXdzUjBGQlpTeEpRVUZKVVN4UFFVRktMRU5CUVZsRUxGVkJRVm9zUTBGQlpqdEJRVU5CTEdGQlFVOHNTMEZCUzFBc1QwRkJXanRCUVVORU96dEJRVVZFT3pzN096czdPenRuUTBGTFdWTXNVU3hGUVVGVk8wRkJRM0JDTEZkQlFVdGFMRk5CUVV3c1EwRkJaV0VzUjBGQlppeERRVUZ0UWtRc1VVRkJia0k3UVVGRFJEczdRVUZGUkRzN096czdPenM3YlVOQlMyVkJMRkVzUlVGQlZUdEJRVU4yUWl4WFFVRkxXaXhUUVVGTUxFTkJRV1ZqTEUxQlFXWXNRMEZCYzBKR0xGRkJRWFJDTzBGQlEwUTdPMEZCUlVRN096czdPenM3T3pKQ1FVdDVRanRCUVVGQkxGVkJRWEJDVml4TFFVRnZRaXgxUlVGQldpeExRVUZMUVN4TFFVRlBPenRCUVVOMlFpeFhRVUZMUml4VFFVRk1MRU5CUVdWbExFOUJRV1lzUTBGQmRVSTdRVUZCUVN4bFFVRlpTQ3hUUVVGVFZpeExRVUZVTEVOQlFWbzdRVUZCUVN4UFFVRjJRanRCUVVORU96czdkMEpCZUVOaE8wRkJRMW9zWVVGQlVTeExRVUZMUnl4VlFVRk1MRWxCUVcxQ0xFdEJRVXRFTEZsQlFXaERPMEZCUTBRN096czdPenRyUWtGNVExbE9MRmNpTENKbWFXeGxJam9pU1c1d2RYUk5iMlIxYkdVdWFuTWlMQ0p6YjNWeVkyVnpRMjl1ZEdWdWRDSTZXeUl2S2lwY2JpQXFJR0JKYm5CMWRFMXZaSFZzWldBZ1kyeGhjM011WEc0Z0tpQlVhR1VnWUVsdWNIVjBUVzlrZFd4bFlDQmpiR0Z6Y3lCaGJHeHZkM01nZEc4Z2FXNXpkR0Z1ZEdsaGRHVWdiVzlrZFd4bGN5QjBhR0YwSUdGeVpTQndZWEowSUc5bUlIUm9aVnh1SUNvZ2JXOTBhVzl1SUdsdWNIVjBJRzF2WkhWc1pTd2dZVzVrSUhSb1lYUWdjSEp2ZG1sa1pTQjJZV3gxWlhNZ0tHWnZjaUJwYm5OMFlXNWpaU3dnWUdSbGRtbGpaVzl5YVdWdWRHRjBhVzl1WUN4Y2JpQXFJR0JoWTJObGJHVnlZWFJwYjI1Z0xDQmdaVzVsY21kNVlDa3VYRzRnS2x4dUlDb2dRR05zWVhOeklFbHVjSFYwVFc5a2RXeGxYRzRnS2k5Y2JtTnNZWE56SUVsdWNIVjBUVzlrZFd4bElIdGNibHh1SUNBdktpcGNiaUFnSUNvZ1EzSmxZWFJsY3lCaGJpQmdTVzV3ZFhSTmIyUjFiR1ZnSUcxdlpIVnNaU0JwYm5OMFlXNWpaUzVjYmlBZ0lDcGNiaUFnSUNvZ1FHTnZibk4wY25WamRHOXlYRzRnSUNBcUlFQndZWEpoYlNCN2MzUnlhVzVuZlNCbGRtVnVkRlI1Y0dVZ0xTQk9ZVzFsSUc5bUlIUm9aU0J0YjJSMWJHVWdMeUJsZG1WdWRDQW9LbVV1Wnk0cUlHQmtaWFpwWTJWdmNtbGxiblJoZEdsdmJpd2dKMkZqWTJWc1pYSmhkR2x2Ymljc0lDZGxibVZ5WjNrbktTNWNiaUFnSUNvdlhHNGdJR052Ym5OMGNuVmpkRzl5S0dWMlpXNTBWSGx3WlNrZ2UxeHVYRzRnSUNBZ0x5b3FYRzRnSUNBZ0lDb2dSWFpsYm5RZ2RIbHdaU0J2WmlCMGFHVWdiVzlrZFd4bExseHVJQ0FnSUNBcVhHNGdJQ0FnSUNvZ1FIUm9hWE1nU1c1d2RYUk5iMlIxYkdWY2JpQWdJQ0FnS2lCQWRIbHdaU0I3YzNSeWFXNW5mVnh1SUNBZ0lDQXFJRUJqYjI1emRHRnVkRnh1SUNBZ0lDQXFMMXh1SUNBZ0lIUm9hWE11WlhabGJuUlVlWEJsSUQwZ1pYWmxiblJVZVhCbE8xeHVYRzRnSUNBZ0x5b3FYRzRnSUNBZ0lDb2dRWEp5WVhrZ2IyWWdiR2x6ZEdWdVpYSnpJR0YwZEdGamFHVmtJSFJ2SUhSb2FYTWdiVzlrZFd4bElDOGdaWFpsYm5RdVhHNGdJQ0FnSUNwY2JpQWdJQ0FnS2lCQWRHaHBjeUJKYm5CMWRFMXZaSFZzWlZ4dUlDQWdJQ0FxSUVCMGVYQmxJSHRUWlhROFJuVnVZM1JwYjI0K2ZWeHVJQ0FnSUNBcUwxeHVJQ0FnSUhSb2FYTXViR2x6ZEdWdVpYSnpJRDBnYm1WM0lGTmxkQ2dwTzF4dVhHNGdJQ0FnTHlvcVhHNGdJQ0FnSUNvZ1JYWmxiblFnYzJWdWRDQmllU0IwYUdseklHMXZaSFZzWlM1Y2JpQWdJQ0FnS2x4dUlDQWdJQ0FxSUVCMGFHbHpJRWx1Y0hWMFRXOWtkV3hsWEc0Z0lDQWdJQ29nUUhSNWNHVWdlMjUxYldKbGNueHVkVzFpWlhKYlhYMWNiaUFnSUNBZ0tpQkFaR1ZtWVhWc2RDQnVkV3hzWEc0Z0lDQWdJQ292WEc0Z0lDQWdkR2hwY3k1bGRtVnVkQ0E5SUc1MWJHdzdYRzVjYmlBZ0lDQXZLaXBjYmlBZ0lDQWdLaUJOYjJSMWJHVWdjSEp2YldselpTQW9jbVZ6YjJ4MlpXUWdkMmhsYmlCMGFHVWdiVzlrZFd4bElHbHpJR2x1YVhScFlXeHBlbVZrS1M1Y2JpQWdJQ0FnS2x4dUlDQWdJQ0FxSUVCMGFHbHpJRWx1Y0hWMFRXOWtkV3hsWEc0Z0lDQWdJQ29nUUhSNWNHVWdlMUJ5YjIxcGMyVjlYRzRnSUNBZ0lDb2dRR1JsWm1GMWJIUWdiblZzYkZ4dUlDQWdJQ0FxTDF4dUlDQWdJSFJvYVhNdWNISnZiV2x6WlNBOUlHNTFiR3c3WEc1Y2JpQWdJQ0F2S2lwY2JpQWdJQ0FnS2lCSmJtUnBZMkYwWlhNZ2FXWWdkR2hsSUcxdlpIVnNaU2R6SUdWMlpXNTBJSFpoYkhWbGN5QmhjbVVnWTJGc1kzVnNZWFJsWkNCbWNtOXRJSEJoY21WdWRDQnRiMlIxYkdWeklDOGdaWFpsYm5SekxseHVJQ0FnSUNBcVhHNGdJQ0FnSUNvZ1FIUm9hWE1nU1c1d2RYUk5iMlIxYkdWY2JpQWdJQ0FnS2lCQWRIbHdaU0I3WW05dmJIMWNiaUFnSUNBZ0tpQkFaR1ZtWVhWc2RDQm1ZV3h6WlZ4dUlDQWdJQ0FxTDF4dUlDQWdJSFJvYVhNdWFYTkRZV3hqZFd4aGRHVmtJRDBnWm1Gc2MyVTdYRzVjYmlBZ0lDQXZLaXBjYmlBZ0lDQWdLaUJKYm1ScFkyRjBaWE1nYVdZZ2RHaGxJRzF2WkhWc1pTZHpJR1YyWlc1MElIWmhiSFZsY3lCaGNtVWdjSEp2ZG1sa1pXUWdZbmtnZEdobElHUmxkbWxqWlNkeklITmxibk52Y25NdVhHNGdJQ0FnSUNvZ0tDcEpMbVV1S2lCcGJtUnBZMkYwWlhNZ2FXWWdkR2hsSUdBblpHVjJhV05sYlc5MGFXOXVKMkFnYjNJZ1lDZGtaWFpwWTJWdmNtbGxiblJoZEdsdmJpZGdJR1YyWlc1MGN5QndjbTkyYVdSbElIUm9aU0J5WlhGMWFYSmxaQ0J5WVhjZ2RtRnNkV1Z6TGlsY2JpQWdJQ0FnS2x4dUlDQWdJQ0FxSUVCMGFHbHpJRWx1Y0hWMFRXOWtkV3hsWEc0Z0lDQWdJQ29nUUhSNWNHVWdlMkp2YjJ4OVhHNGdJQ0FnSUNvZ1FHUmxabUYxYkhRZ1ptRnNjMlZjYmlBZ0lDQWdLaTljYmlBZ0lDQjBhR2x6TG1selVISnZkbWxrWldRZ1BTQm1ZV3h6WlR0Y2JseHVJQ0FnSUM4cUtseHVJQ0FnSUNBcUlGQmxjbWx2WkNCaGRDQjNhR2xqYUNCMGFHVWdiVzlrZFd4bEozTWdaWFpsYm5SeklHRnlaU0J6Wlc1MElDaGdkVzVrWldacGJtVmtZQ0JwWmlCMGFHVWdaWFpsYm5SeklHRnlaU0J1YjNRZ2MyVnVkQ0JoZENCeVpXZDFiR0Z5SUdsdWRHVnlkbUZzY3lrdVhHNGdJQ0FnSUNwY2JpQWdJQ0FnS2lCQWRHaHBjeUJKYm5CMWRFMXZaSFZzWlZ4dUlDQWdJQ0FxSUVCMGVYQmxJSHR1ZFcxaVpYSjlYRzRnSUNBZ0lDb2dRR1JsWm1GMWJIUWdkVzVrWldacGJtVmtYRzRnSUNBZ0lDb3ZYRzRnSUNBZ2RHaHBjeTV3WlhKcGIyUWdQU0IxYm1SbFptbHVaV1E3WEc1Y2JpQWdJQ0IwYUdsekxtVnRhWFFnUFNCMGFHbHpMbVZ0YVhRdVltbHVaQ2gwYUdsektUdGNiaUFnZlZ4dVhHNGdJQzhxS2x4dUlDQWdLaUJKYm1ScFkyRjBaWE1nZDJobGRHaGxjaUIwYUdVZ2JXOWtkV3hsSUdOaGJpQndjbTkyYVdSbElIWmhiSFZsY3lCdmNpQnViM1F1WEc0Z0lDQXFYRzRnSUNBcUlFQjBlWEJsSUh0aWIyOXNmVnh1SUNBZ0tpQkFjbVZoWkc5dWJIbGNiaUFnSUNvdlhHNGdJR2RsZENCcGMxWmhiR2xrS0NrZ2UxeHVJQ0FnSUhKbGRIVnliaUFvZEdocGN5NXBjMUJ5YjNacFpHVmtJSHg4SUhSb2FYTXVhWE5EWVd4amRXeGhkR1ZrS1R0Y2JpQWdmVnh1WEc0Z0lDOHFLbHh1SUNBZ0tpQkpibWwwYVdGc2FYcGxjeUIwYUdVZ2JXOWtkV3hsTGx4dUlDQWdLbHh1SUNBZ0tpQkFjR0Z5WVcwZ2UyWjFibU4wYVc5dWZTQndjbTl0YVhObFJuVnVJQzBnVUhKdmJXbHpaU0JtZFc1amRHbHZiaUIwYUdGMElIUmhhMlZ6SUhSb1pTQmdjbVZ6YjJ4MlpXQWdZVzVrSUdCeVpXcGxZM1JnSUdaMWJtTjBhVzl1Y3lCaGN5QmhjbWQxYldWdWRITXVYRzRnSUNBcUlFQnlaWFIxY200Z2UxQnliMjFwYzJWOVhHNGdJQ0FxTDF4dUlDQnBibWwwS0hCeWIyMXBjMlZHZFc0cElIdGNiaUFnSUNCMGFHbHpMbkJ5YjIxcGMyVWdQU0J1WlhjZ1VISnZiV2x6WlNod2NtOXRhWE5sUm5WdUtUdGNiaUFnSUNCeVpYUjFjbTRnZEdocGN5NXdjbTl0YVhObE8xeHVJQ0I5WEc1Y2JpQWdMeW9xWEc0Z0lDQXFJRUZrWkhNZ1lTQnNhWE4wWlc1bGNpQjBieUIwYUdVZ2JXOWtkV3hsTGx4dUlDQWdLbHh1SUNBZ0tpQkFjR0Z5WVcwZ2UyWjFibU4wYVc5dWZTQnNhWE4wWlc1bGNpQXRJRXhwYzNSbGJtVnlJSFJ2SUdGa1pDNWNiaUFnSUNvdlhHNGdJR0ZrWkV4cGMzUmxibVZ5S0d4cGMzUmxibVZ5S1NCN1hHNGdJQ0FnZEdocGN5NXNhWE4wWlc1bGNuTXVZV1JrS0d4cGMzUmxibVZ5S1R0Y2JpQWdmVnh1WEc0Z0lDOHFLbHh1SUNBZ0tpQlNaVzF2ZG1WeklHRWdiR2x6ZEdWdVpYSWdabkp2YlNCMGFHVWdiVzlrZFd4bExseHVJQ0FnS2x4dUlDQWdLaUJBY0dGeVlXMGdlMloxYm1OMGFXOXVmU0JzYVhOMFpXNWxjaUF0SUV4cGMzUmxibVZ5SUhSdklISmxiVzkyWlM1Y2JpQWdJQ292WEc0Z0lISmxiVzkyWlV4cGMzUmxibVZ5S0d4cGMzUmxibVZ5S1NCN1hHNGdJQ0FnZEdocGN5NXNhWE4wWlc1bGNuTXVaR1ZzWlhSbEtHeHBjM1JsYm1WeUtUdGNiaUFnZlZ4dVhHNGdJQzhxS2x4dUlDQWdLaUJRY205d1lXZGhkR1Z6SUdGdUlHVjJaVzUwSUhSdklHRnNiQ0IwYUdVZ2JXOWtkV3hsSjNNZ2JHbHpkR1Z1WlhKekxseHVJQ0FnS2x4dUlDQWdLaUJBY0dGeVlXMGdlMjUxYldKbGNueHVkVzFpWlhKYlhYMGdXMlYyWlc1MFBYUm9hWE11WlhabGJuUmRJQzBnUlhabGJuUWdkbUZzZFdWeklIUnZJSEJ5YjNCaFoyRjBaU0IwYnlCMGFHVWdiVzlrZFd4bEozTWdiR2x6ZEdWdVpYSnpMbHh1SUNBZ0tpOWNiaUFnWlcxcGRDaGxkbVZ1ZENBOUlIUm9hWE11WlhabGJuUXBJSHRjYmlBZ0lDQjBhR2x6TG14cGMzUmxibVZ5Y3k1bWIzSkZZV05vS0d4cGMzUmxibVZ5SUQwK0lHeHBjM1JsYm1WeUtHVjJaVzUwS1NrN1hHNGdJSDFjYm4xY2JseHVaWGh3YjNKMElHUmxabUYxYkhRZ1NXNXdkWFJOYjJSMWJHVTdYRzRpWFgwPSIsIid1c2Ugc3RyaWN0JztcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcblxudmFyIF9jcmVhdGVDbGFzcyA9IGZ1bmN0aW9uICgpIHsgZnVuY3Rpb24gZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7IGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHsgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTsgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlOyBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSA9IHRydWU7IGlmIChcInZhbHVlXCIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTsgfSB9IHJldHVybiBmdW5jdGlvbiAoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7IGlmIChwcm90b1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7IGlmIChzdGF0aWNQcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpOyByZXR1cm4gQ29uc3RydWN0b3I7IH07IH0oKTtcblxudmFyIF9JbnB1dE1vZHVsZTIgPSByZXF1aXJlKCcuL0lucHV0TW9kdWxlJyk7XG5cbnZhciBfSW5wdXRNb2R1bGUzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfSW5wdXRNb2R1bGUyKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxuZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpOyB9IH1cblxuZnVuY3Rpb24gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4oc2VsZiwgY2FsbCkgeyBpZiAoIXNlbGYpIHsgdGhyb3cgbmV3IFJlZmVyZW5jZUVycm9yKFwidGhpcyBoYXNuJ3QgYmVlbiBpbml0aWFsaXNlZCAtIHN1cGVyKCkgaGFzbid0IGJlZW4gY2FsbGVkXCIpOyB9IHJldHVybiBjYWxsICYmICh0eXBlb2YgY2FsbCA9PT0gXCJvYmplY3RcIiB8fCB0eXBlb2YgY2FsbCA9PT0gXCJmdW5jdGlvblwiKSA/IGNhbGwgOiBzZWxmOyB9XG5cbmZ1bmN0aW9uIF9pbmhlcml0cyhzdWJDbGFzcywgc3VwZXJDbGFzcykgeyBpZiAodHlwZW9mIHN1cGVyQ2xhc3MgIT09IFwiZnVuY3Rpb25cIiAmJiBzdXBlckNsYXNzICE9PSBudWxsKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJTdXBlciBleHByZXNzaW9uIG11c3QgZWl0aGVyIGJlIG51bGwgb3IgYSBmdW5jdGlvbiwgbm90IFwiICsgdHlwZW9mIHN1cGVyQ2xhc3MpOyB9IHN1YkNsYXNzLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoc3VwZXJDbGFzcyAmJiBzdXBlckNsYXNzLnByb3RvdHlwZSwgeyBjb25zdHJ1Y3RvcjogeyB2YWx1ZTogc3ViQ2xhc3MsIGVudW1lcmFibGU6IGZhbHNlLCB3cml0YWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlIH0gfSk7IGlmIChzdXBlckNsYXNzKSBPYmplY3Quc2V0UHJvdG90eXBlT2YgPyBPYmplY3Quc2V0UHJvdG90eXBlT2Yoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIDogc3ViQ2xhc3MuX19wcm90b19fID0gc3VwZXJDbGFzczsgfVxuXG4vKipcbiAqIGBET01FdmVudFN1Ym1vZHVsZWAgY2xhc3MuXG4gKiBUaGUgYERPTUV2ZW50U3VibW9kdWxlYCBjbGFzcyBhbGxvd3MgdG8gaW5zdGFudGlhdGUgbW9kdWxlcyB0aGF0IHByb3ZpZGVcbiAqIHVuaWZpZWQgdmFsdWVzIChzdWNoIGFzIGBBY2NlbGVyYXRpb25JbmNsdWRpbmdHcmF2aXR5YCwgYEFjY2VsZXJhdGlvbmAsXG4gKiBgUm90YXRpb25SYXRlYCwgYE9yaWVudGF0aW9uYCwgYE9yaWVudGF0aW9uQWx0KSBmcm9tIHRoZSBgZGV2aWNlbW90aW9uYFxuICogb3IgYGRldmljZW9yaWVudGF0aW9uYCBET00gZXZlbnRzLlxuICpcbiAqIEBjbGFzcyBET01FdmVudFN1Ym1vZHVsZVxuICogQGV4dGVuZHMgSW5wdXRNb2R1bGVcbiAqL1xudmFyIERPTUV2ZW50U3VibW9kdWxlID0gZnVuY3Rpb24gKF9JbnB1dE1vZHVsZSkge1xuICBfaW5oZXJpdHMoRE9NRXZlbnRTdWJtb2R1bGUsIF9JbnB1dE1vZHVsZSk7XG5cbiAgLyoqXG4gICAqIENyZWF0ZXMgYSBgRE9NRXZlbnRTdWJtb2R1bGVgIG1vZHVsZSBpbnN0YW5jZS5cbiAgICpcbiAgICogQGNvbnN0cnVjdG9yXG4gICAqIEBwYXJhbSB7RGV2aWNlTW90aW9uTW9kdWxlfERldmljZU9yaWVudGF0aW9uTW9kdWxlfSBET01FdmVudE1vZHVsZSAtIFRoZSBwYXJlbnQgRE9NIGV2ZW50IG1vZHVsZS5cbiAgICogQHBhcmFtIHtzdHJpbmd9IGV2ZW50VHlwZSAtIFRoZSBuYW1lIG9mIHRoZSBzdWJtb2R1bGUgLyBldmVudCAoKmUuZy4qICdhY2NlbGVyYXRpb24nIG9yICdvcmllbnRhdGlvbkFsdCcpLlxuICAgKiBAc2VlIERldmljZU1vdGlvbk1vZHVsZVxuICAgKiBAc2VlIERldmljZU9yaWVudGF0aW9uTW9kdWxlXG4gICAqL1xuICBmdW5jdGlvbiBET01FdmVudFN1Ym1vZHVsZShET01FdmVudE1vZHVsZSwgZXZlbnRUeXBlKSB7XG4gICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIERPTUV2ZW50U3VibW9kdWxlKTtcblxuICAgIC8qKlxuICAgICAqIFRoZSBET00gZXZlbnQgcGFyZW50IG1vZHVsZSBmcm9tIHdoaWNoIHRoaXMgbW9kdWxlIGdldHMgdGhlIHJhdyB2YWx1ZXMuXG4gICAgICpcbiAgICAgKiBAdGhpcyBET01FdmVudFN1Ym1vZHVsZVxuICAgICAqIEB0eXBlIHtEZXZpY2VNb3Rpb25Nb2R1bGV8RGV2aWNlT3JpZW50YXRpb25Nb2R1bGV9XG4gICAgICogQGNvbnN0YW50XG4gICAgICovXG4gICAgdmFyIF90aGlzID0gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgKERPTUV2ZW50U3VibW9kdWxlLl9fcHJvdG9fXyB8fCBPYmplY3QuZ2V0UHJvdG90eXBlT2YoRE9NRXZlbnRTdWJtb2R1bGUpKS5jYWxsKHRoaXMsIGV2ZW50VHlwZSkpO1xuXG4gICAgX3RoaXMuRE9NRXZlbnRNb2R1bGUgPSBET01FdmVudE1vZHVsZTtcblxuICAgIC8qKlxuICAgICAqIFJhdyB2YWx1ZXMgY29taW5nIGZyb20gdGhlIGBkZXZpY2Vtb3Rpb25gIGV2ZW50IHNlbnQgYnkgdGhpcyBtb2R1bGUuXG4gICAgICpcbiAgICAgKiBAdGhpcyBET01FdmVudFN1Ym1vZHVsZVxuICAgICAqIEB0eXBlIHtudW1iZXJbXX1cbiAgICAgKiBAZGVmYXVsdCBbMCwgMCwgMF1cbiAgICAgKi9cbiAgICBfdGhpcy5ldmVudCA9IFswLCAwLCAwXTtcblxuICAgIC8qKlxuICAgICAqIENvbXBhc3MgaGVhZGluZyByZWZlcmVuY2UgKGlPUyBkZXZpY2VzIG9ubHksIGBPcmllbnRhdGlvbmAgYW5kIGBPcmllbnRhdGlvbkFsdGAgc3VibW9kdWxlcyBvbmx5KS5cbiAgICAgKlxuICAgICAqIEB0aGlzIERPTUV2ZW50U3VibW9kdWxlXG4gICAgICogQHR5cGUge251bWJlcn1cbiAgICAgKiBAZGVmYXVsdCBudWxsXG4gICAgICovXG4gICAgX3RoaXMuX3dlYmtpdENvbXBhc3NIZWFkaW5nUmVmZXJlbmNlID0gbnVsbDtcbiAgICByZXR1cm4gX3RoaXM7XG4gIH1cblxuICAvKipcbiAgICogSW5pdGlhbGl6ZXMgb2YgdGhlIG1vZHVsZS5cbiAgICpcbiAgICogQHJldHVybiB7UHJvbWlzZX1cbiAgICovXG5cblxuICBfY3JlYXRlQ2xhc3MoRE9NRXZlbnRTdWJtb2R1bGUsIFt7XG4gICAga2V5OiAnaW5pdCcsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGluaXQoKSB7XG4gICAgICB2YXIgX3RoaXMyID0gdGhpcztcblxuICAgICAgLy8gSW5kaWNhdGUgdG8gdGhlIHBhcmVudCBtb2R1bGUgdGhhdCB0aGlzIGV2ZW50IGlzIHJlcXVpcmVkXG4gICAgICB0aGlzLkRPTUV2ZW50TW9kdWxlLnJlcXVpcmVkW3RoaXMuZXZlbnRUeXBlXSA9IHRydWU7XG5cbiAgICAgIC8vIElmIHRoZSBwYXJlbnQgZXZlbnQgaGFzIG5vdCBiZWVuIGluaXRpYWxpemVkIHlldCwgaW5pdGlhbGl6ZSBpdFxuICAgICAgdmFyIERPTUV2ZW50UHJvbWlzZSA9IHRoaXMuRE9NRXZlbnRNb2R1bGUucHJvbWlzZTtcbiAgICAgIGlmICghRE9NRXZlbnRQcm9taXNlKSBET01FdmVudFByb21pc2UgPSB0aGlzLkRPTUV2ZW50TW9kdWxlLmluaXQoKTtcblxuICAgICAgcmV0dXJuIERPTUV2ZW50UHJvbWlzZS50aGVuKGZ1bmN0aW9uIChtb2R1bGUpIHtcbiAgICAgICAgcmV0dXJuIF90aGlzMjtcbiAgICAgIH0pO1xuICAgIH1cbiAgfV0pO1xuXG4gIHJldHVybiBET01FdmVudFN1Ym1vZHVsZTtcbn0oX0lucHV0TW9kdWxlMy5kZWZhdWx0KTtcblxuZXhwb3J0cy5kZWZhdWx0ID0gRE9NRXZlbnRTdWJtb2R1bGU7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247Y2hhcnNldD11dGYtODtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJa1JQVFVWMlpXNTBVM1ZpYlc5a2RXeGxMbXB6SWwwc0ltNWhiV1Z6SWpwYklrUlBUVVYyWlc1MFUzVmliVzlrZFd4bElpd2lSRTlOUlhabGJuUk5iMlIxYkdVaUxDSmxkbVZ1ZEZSNWNHVWlMQ0psZG1WdWRDSXNJbDkzWldKcmFYUkRiMjF3WVhOelNHVmhaR2x1WjFKbFptVnlaVzVqWlNJc0luSmxjWFZwY21Wa0lpd2lSRTlOUlhabGJuUlFjbTl0YVhObElpd2ljSEp2YldselpTSXNJbWx1YVhRaUxDSjBhR1Z1SWl3aWJXOWtkV3hsSWwwc0ltMWhjSEJwYm1keklqb2lPenM3T3pzN096dEJRVUZCT3pzN096czdPenM3T3pzN1FVRkZRVHM3T3pzN096czdPenRKUVZWTlFTeHBRanM3TzBGQlJVbzdPenM3T3pzN096dEJRVk5CTERaQ1FVRlpReXhqUVVGYUxFVkJRVFJDUXl4VFFVRTFRaXhGUVVGMVF6dEJRVUZCT3p0QlFVZHlRenM3T3pzN096dEJRVWh4UXl4elNVRkRMMEpCTEZOQlJDdENPenRCUVZWeVF5eFZRVUZMUkN4alFVRk1MRWRCUVhOQ1FTeGpRVUYwUWpzN1FVRkZRVHM3T3pzN096dEJRVTlCTEZWQlFVdEZMRXRCUVV3c1IwRkJZU3hEUVVGRExFTkJRVVFzUlVGQlNTeERRVUZLTEVWQlFVOHNRMEZCVUN4RFFVRmlPenRCUVVWQk96czdPenM3TzBGQlQwRXNWVUZCUzBNc09FSkJRVXdzUjBGQmMwTXNTVUZCZEVNN1FVRTFRbkZETzBGQk5rSjBRenM3UVVGRlJEczdPenM3T3pzN096SkNRVXRQTzBGQlFVRTdPMEZCUTB3N1FVRkRRU3hYUVVGTFNDeGpRVUZNTEVOQlFXOUNTU3hSUVVGd1FpeERRVUUyUWl4TFFVRkxTQ3hUUVVGc1F5eEpRVUVyUXl4SlFVRXZRenM3UVVGRlFUdEJRVU5CTEZWQlFVbEpMR3RDUVVGclFpeExRVUZMVEN4alFVRk1MRU5CUVc5Q1RTeFBRVUV4UXp0QlFVTkJMRlZCUVVrc1EwRkJRMFFzWlVGQlRDeEZRVU5GUVN4clFrRkJhMElzUzBGQlMwd3NZMEZCVEN4RFFVRnZRazhzU1VGQmNFSXNSVUZCYkVJN08wRkJSVVlzWVVGQlQwWXNaMEpCUVdkQ1J5eEpRVUZvUWl4RFFVRnhRaXhWUVVGRFF5eE5RVUZFTzBGQlFVRTdRVUZCUVN4UFFVRnlRaXhEUVVGUU8wRkJRMFE3T3pzN096dHJRa0ZIV1ZZc2FVSWlMQ0ptYVd4bElqb2lSRTlOUlhabGJuUlRkV0p0YjJSMWJHVXVhbk1pTENKemIzVnlZMlZ6UTI5dWRHVnVkQ0k2V3lKcGJYQnZjblFnU1c1d2RYUk5iMlIxYkdVZ1puSnZiU0FuTGk5SmJuQjFkRTF2WkhWc1pTYzdYRzVjYmk4cUtseHVJQ29nWUVSUFRVVjJaVzUwVTNWaWJXOWtkV3hsWUNCamJHRnpjeTVjYmlBcUlGUm9aU0JnUkU5TlJYWmxiblJUZFdKdGIyUjFiR1ZnSUdOc1lYTnpJR0ZzYkc5M2N5QjBieUJwYm5OMFlXNTBhV0YwWlNCdGIyUjFiR1Z6SUhSb1lYUWdjSEp2ZG1sa1pWeHVJQ29nZFc1cFptbGxaQ0IyWVd4MVpYTWdLSE4xWTJnZ1lYTWdZRUZqWTJWc1pYSmhkR2x2YmtsdVkyeDFaR2x1WjBkeVlYWnBkSGxnTENCZ1FXTmpaV3hsY21GMGFXOXVZQ3hjYmlBcUlHQlNiM1JoZEdsdmJsSmhkR1ZnTENCZ1QzSnBaVzUwWVhScGIyNWdMQ0JnVDNKcFpXNTBZWFJwYjI1QmJIUXBJR1p5YjIwZ2RHaGxJR0JrWlhacFkyVnRiM1JwYjI1Z1hHNGdLaUJ2Y2lCZ1pHVjJhV05sYjNKcFpXNTBZWFJwYjI1Z0lFUlBUU0JsZG1WdWRITXVYRzRnS2x4dUlDb2dRR05zWVhOeklFUlBUVVYyWlc1MFUzVmliVzlrZFd4bFhHNGdLaUJBWlhoMFpXNWtjeUJKYm5CMWRFMXZaSFZzWlZ4dUlDb3ZYRzVqYkdGemN5QkVUMDFGZG1WdWRGTjFZbTF2WkhWc1pTQmxlSFJsYm1SeklFbHVjSFYwVFc5a2RXeGxJSHRjYmx4dUlDQXZLaXBjYmlBZ0lDb2dRM0psWVhSbGN5QmhJR0JFVDAxRmRtVnVkRk4xWW0xdlpIVnNaV0FnYlc5a2RXeGxJR2x1YzNSaGJtTmxMbHh1SUNBZ0tseHVJQ0FnS2lCQVkyOXVjM1J5ZFdOMGIzSmNiaUFnSUNvZ1FIQmhjbUZ0SUh0RVpYWnBZMlZOYjNScGIyNU5iMlIxYkdWOFJHVjJhV05sVDNKcFpXNTBZWFJwYjI1TmIyUjFiR1Y5SUVSUFRVVjJaVzUwVFc5a2RXeGxJQzBnVkdobElIQmhjbVZ1ZENCRVQwMGdaWFpsYm5RZ2JXOWtkV3hsTGx4dUlDQWdLaUJBY0dGeVlXMGdlM04wY21sdVozMGdaWFpsYm5SVWVYQmxJQzBnVkdobElHNWhiV1VnYjJZZ2RHaGxJSE4xWW0xdlpIVnNaU0F2SUdWMlpXNTBJQ2dxWlM1bkxpb2dKMkZqWTJWc1pYSmhkR2x2YmljZ2IzSWdKMjl5YVdWdWRHRjBhVzl1UVd4MEp5a3VYRzRnSUNBcUlFQnpaV1VnUkdWMmFXTmxUVzkwYVc5dVRXOWtkV3hsWEc0Z0lDQXFJRUJ6WldVZ1JHVjJhV05sVDNKcFpXNTBZWFJwYjI1TmIyUjFiR1ZjYmlBZ0lDb3ZYRzRnSUdOdmJuTjBjblZqZEc5eUtFUlBUVVYyWlc1MFRXOWtkV3hsTENCbGRtVnVkRlI1Y0dVcElIdGNiaUFnSUNCemRYQmxjaWhsZG1WdWRGUjVjR1VwTzF4dVhHNGdJQ0FnTHlvcVhHNGdJQ0FnSUNvZ1ZHaGxJRVJQVFNCbGRtVnVkQ0J3WVhKbGJuUWdiVzlrZFd4bElHWnliMjBnZDJocFkyZ2dkR2hwY3lCdGIyUjFiR1VnWjJWMGN5QjBhR1VnY21GM0lIWmhiSFZsY3k1Y2JpQWdJQ0FnS2x4dUlDQWdJQ0FxSUVCMGFHbHpJRVJQVFVWMlpXNTBVM1ZpYlc5a2RXeGxYRzRnSUNBZ0lDb2dRSFI1Y0dVZ2UwUmxkbWxqWlUxdmRHbHZiazF2WkhWc1pYeEVaWFpwWTJWUGNtbGxiblJoZEdsdmJrMXZaSFZzWlgxY2JpQWdJQ0FnS2lCQVkyOXVjM1JoYm5SY2JpQWdJQ0FnS2k5Y2JpQWdJQ0IwYUdsekxrUlBUVVYyWlc1MFRXOWtkV3hsSUQwZ1JFOU5SWFpsYm5STmIyUjFiR1U3WEc1Y2JpQWdJQ0F2S2lwY2JpQWdJQ0FnS2lCU1lYY2dkbUZzZFdWeklHTnZiV2x1WnlCbWNtOXRJSFJvWlNCZ1pHVjJhV05sYlc5MGFXOXVZQ0JsZG1WdWRDQnpaVzUwSUdKNUlIUm9hWE1nYlc5a2RXeGxMbHh1SUNBZ0lDQXFYRzRnSUNBZ0lDb2dRSFJvYVhNZ1JFOU5SWFpsYm5SVGRXSnRiMlIxYkdWY2JpQWdJQ0FnS2lCQWRIbHdaU0I3Ym5WdFltVnlXMTE5WEc0Z0lDQWdJQ29nUUdSbFptRjFiSFFnV3pBc0lEQXNJREJkWEc0Z0lDQWdJQ292WEc0Z0lDQWdkR2hwY3k1bGRtVnVkQ0E5SUZzd0xDQXdMQ0F3WFR0Y2JseHVJQ0FnSUM4cUtseHVJQ0FnSUNBcUlFTnZiWEJoYzNNZ2FHVmhaR2x1WnlCeVpXWmxjbVZ1WTJVZ0tHbFBVeUJrWlhacFkyVnpJRzl1Ykhrc0lHQlBjbWxsYm5SaGRHbHZibUFnWVc1a0lHQlBjbWxsYm5SaGRHbHZia0ZzZEdBZ2MzVmliVzlrZFd4bGN5QnZibXg1S1M1Y2JpQWdJQ0FnS2x4dUlDQWdJQ0FxSUVCMGFHbHpJRVJQVFVWMlpXNTBVM1ZpYlc5a2RXeGxYRzRnSUNBZ0lDb2dRSFI1Y0dVZ2UyNTFiV0psY24xY2JpQWdJQ0FnS2lCQVpHVm1ZWFZzZENCdWRXeHNYRzRnSUNBZ0lDb3ZYRzRnSUNBZ2RHaHBjeTVmZDJWaWEybDBRMjl0Y0dGemMwaGxZV1JwYm1kU1pXWmxjbVZ1WTJVZ1BTQnVkV3hzTzF4dUlDQjlYRzVjYmlBZ0x5b3FYRzRnSUNBcUlFbHVhWFJwWVd4cGVtVnpJRzltSUhSb1pTQnRiMlIxYkdVdVhHNGdJQ0FxWEc0Z0lDQXFJRUJ5WlhSMWNtNGdlMUJ5YjIxcGMyVjlYRzRnSUNBcUwxeHVJQ0JwYm1sMEtDa2dlMXh1SUNBZ0lDOHZJRWx1WkdsallYUmxJSFJ2SUhSb1pTQndZWEpsYm5RZ2JXOWtkV3hsSUhSb1lYUWdkR2hwY3lCbGRtVnVkQ0JwY3lCeVpYRjFhWEpsWkZ4dUlDQWdJSFJvYVhNdVJFOU5SWFpsYm5STmIyUjFiR1V1Y21WeGRXbHlaV1JiZEdocGN5NWxkbVZ1ZEZSNWNHVmRJRDBnZEhKMVpUdGNibHh1SUNBZ0lDOHZJRWxtSUhSb1pTQndZWEpsYm5RZ1pYWmxiblFnYUdGeklHNXZkQ0JpWldWdUlHbHVhWFJwWVd4cGVtVmtJSGxsZEN3Z2FXNXBkR2xoYkdsNlpTQnBkRnh1SUNBZ0lHeGxkQ0JFVDAxRmRtVnVkRkJ5YjIxcGMyVWdQU0IwYUdsekxrUlBUVVYyWlc1MFRXOWtkV3hsTG5CeWIyMXBjMlU3WEc0Z0lDQWdhV1lnS0NGRVQwMUZkbVZ1ZEZCeWIyMXBjMlVwWEc0Z0lDQWdJQ0JFVDAxRmRtVnVkRkJ5YjIxcGMyVWdQU0IwYUdsekxrUlBUVVYyWlc1MFRXOWtkV3hsTG1sdWFYUW9LVHRjYmx4dUlDQWdJSEpsZEhWeWJpQkVUMDFGZG1WdWRGQnliMjFwYzJVdWRHaGxiaWdvYlc5a2RXeGxLU0E5UGlCMGFHbHpLVHRjYmlBZ2ZWeHVmVnh1WEc1bGVIQnZjblFnWkdWbVlYVnNkQ0JFVDAxRmRtVnVkRk4xWW0xdlpIVnNaVHRjYmlKZGZRPT0iLCIvKiFcbiAqIFBsYXRmb3JtLmpzIDxodHRwczovL210aHMuYmUvcGxhdGZvcm0+XG4gKiBDb3B5cmlnaHQgMjAxNC0yMDE2IEJlbmphbWluIFRhbiA8aHR0cHM6Ly9kZW1vbmVhdXguZ2l0aHViLmlvLz5cbiAqIENvcHlyaWdodCAyMDExLTIwMTMgSm9obi1EYXZpZCBEYWx0b24gPGh0dHA6Ly9hbGx5b3VjYW5sZWV0LmNvbS8+XG4gKiBBdmFpbGFibGUgdW5kZXIgTUlUIGxpY2Vuc2UgPGh0dHBzOi8vbXRocy5iZS9taXQ+XG4gKi9cbjsoZnVuY3Rpb24oKSB7XG4gICd1c2Ugc3RyaWN0JztcblxuICAvKiogVXNlZCB0byBkZXRlcm1pbmUgaWYgdmFsdWVzIGFyZSBvZiB0aGUgbGFuZ3VhZ2UgdHlwZSBgT2JqZWN0YC4gKi9cbiAgdmFyIG9iamVjdFR5cGVzID0ge1xuICAgICdmdW5jdGlvbic6IHRydWUsXG4gICAgJ29iamVjdCc6IHRydWVcbiAgfTtcblxuICAvKiogVXNlZCBhcyBhIHJlZmVyZW5jZSB0byB0aGUgZ2xvYmFsIG9iamVjdC4gKi9cbiAgdmFyIHJvb3QgPSAob2JqZWN0VHlwZXNbdHlwZW9mIHdpbmRvd10gJiYgd2luZG93KSB8fCB0aGlzO1xuXG4gIC8qKiBCYWNrdXAgcG9zc2libGUgZ2xvYmFsIG9iamVjdC4gKi9cbiAgdmFyIG9sZFJvb3QgPSByb290O1xuXG4gIC8qKiBEZXRlY3QgZnJlZSB2YXJpYWJsZSBgZXhwb3J0c2AuICovXG4gIHZhciBmcmVlRXhwb3J0cyA9IG9iamVjdFR5cGVzW3R5cGVvZiBleHBvcnRzXSAmJiBleHBvcnRzO1xuXG4gIC8qKiBEZXRlY3QgZnJlZSB2YXJpYWJsZSBgbW9kdWxlYC4gKi9cbiAgdmFyIGZyZWVNb2R1bGUgPSBvYmplY3RUeXBlc1t0eXBlb2YgbW9kdWxlXSAmJiBtb2R1bGUgJiYgIW1vZHVsZS5ub2RlVHlwZSAmJiBtb2R1bGU7XG5cbiAgLyoqIERldGVjdCBmcmVlIHZhcmlhYmxlIGBnbG9iYWxgIGZyb20gTm9kZS5qcyBvciBCcm93c2VyaWZpZWQgY29kZSBhbmQgdXNlIGl0IGFzIGByb290YC4gKi9cbiAgdmFyIGZyZWVHbG9iYWwgPSBmcmVlRXhwb3J0cyAmJiBmcmVlTW9kdWxlICYmIHR5cGVvZiBnbG9iYWwgPT0gJ29iamVjdCcgJiYgZ2xvYmFsO1xuICBpZiAoZnJlZUdsb2JhbCAmJiAoZnJlZUdsb2JhbC5nbG9iYWwgPT09IGZyZWVHbG9iYWwgfHwgZnJlZUdsb2JhbC53aW5kb3cgPT09IGZyZWVHbG9iYWwgfHwgZnJlZUdsb2JhbC5zZWxmID09PSBmcmVlR2xvYmFsKSkge1xuICAgIHJvb3QgPSBmcmVlR2xvYmFsO1xuICB9XG5cbiAgLyoqXG4gICAqIFVzZWQgYXMgdGhlIG1heGltdW0gbGVuZ3RoIG9mIGFuIGFycmF5LWxpa2Ugb2JqZWN0LlxuICAgKiBTZWUgdGhlIFtFUzYgc3BlY10oaHR0cDovL3Blb3BsZS5tb3ppbGxhLm9yZy9+am9yZW5kb3JmZi9lczYtZHJhZnQuaHRtbCNzZWMtdG9sZW5ndGgpXG4gICAqIGZvciBtb3JlIGRldGFpbHMuXG4gICAqL1xuICB2YXIgbWF4U2FmZUludGVnZXIgPSBNYXRoLnBvdygyLCA1MykgLSAxO1xuXG4gIC8qKiBSZWd1bGFyIGV4cHJlc3Npb24gdG8gZGV0ZWN0IE9wZXJhLiAqL1xuICB2YXIgcmVPcGVyYSA9IC9cXGJPcGVyYS87XG5cbiAgLyoqIFBvc3NpYmxlIGdsb2JhbCBvYmplY3QuICovXG4gIHZhciB0aGlzQmluZGluZyA9IHRoaXM7XG5cbiAgLyoqIFVzZWQgZm9yIG5hdGl2ZSBtZXRob2QgcmVmZXJlbmNlcy4gKi9cbiAgdmFyIG9iamVjdFByb3RvID0gT2JqZWN0LnByb3RvdHlwZTtcblxuICAvKiogVXNlZCB0byBjaGVjayBmb3Igb3duIHByb3BlcnRpZXMgb2YgYW4gb2JqZWN0LiAqL1xuICB2YXIgaGFzT3duUHJvcGVydHkgPSBvYmplY3RQcm90by5oYXNPd25Qcm9wZXJ0eTtcblxuICAvKiogVXNlZCB0byByZXNvbHZlIHRoZSBpbnRlcm5hbCBgW1tDbGFzc11dYCBvZiB2YWx1ZXMuICovXG4gIHZhciB0b1N0cmluZyA9IG9iamVjdFByb3RvLnRvU3RyaW5nO1xuXG4gIC8qLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qL1xuXG4gIC8qKlxuICAgKiBDYXBpdGFsaXplcyBhIHN0cmluZyB2YWx1ZS5cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHtzdHJpbmd9IHN0cmluZyBUaGUgc3RyaW5nIHRvIGNhcGl0YWxpemUuXG4gICAqIEByZXR1cm5zIHtzdHJpbmd9IFRoZSBjYXBpdGFsaXplZCBzdHJpbmcuXG4gICAqL1xuICBmdW5jdGlvbiBjYXBpdGFsaXplKHN0cmluZykge1xuICAgIHN0cmluZyA9IFN0cmluZyhzdHJpbmcpO1xuICAgIHJldHVybiBzdHJpbmcuY2hhckF0KDApLnRvVXBwZXJDYXNlKCkgKyBzdHJpbmcuc2xpY2UoMSk7XG4gIH1cblxuICAvKipcbiAgICogQSB1dGlsaXR5IGZ1bmN0aW9uIHRvIGNsZWFuIHVwIHRoZSBPUyBuYW1lLlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0ge3N0cmluZ30gb3MgVGhlIE9TIG5hbWUgdG8gY2xlYW4gdXAuXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBbcGF0dGVybl0gQSBgUmVnRXhwYCBwYXR0ZXJuIG1hdGNoaW5nIHRoZSBPUyBuYW1lLlxuICAgKiBAcGFyYW0ge3N0cmluZ30gW2xhYmVsXSBBIGxhYmVsIGZvciB0aGUgT1MuXG4gICAqL1xuICBmdW5jdGlvbiBjbGVhbnVwT1Mob3MsIHBhdHRlcm4sIGxhYmVsKSB7XG4gICAgLy8gUGxhdGZvcm0gdG9rZW5zIGFyZSBkZWZpbmVkIGF0OlxuICAgIC8vIGh0dHA6Ly9tc2RuLm1pY3Jvc29mdC5jb20vZW4tdXMvbGlicmFyeS9tczUzNzUwMyhWUy44NSkuYXNweFxuICAgIC8vIGh0dHA6Ly93ZWIuYXJjaGl2ZS5vcmcvd2ViLzIwMDgxMTIyMDUzOTUwL2h0dHA6Ly9tc2RuLm1pY3Jvc29mdC5jb20vZW4tdXMvbGlicmFyeS9tczUzNzUwMyhWUy44NSkuYXNweFxuICAgIHZhciBkYXRhID0ge1xuICAgICAgJzEwLjAnOiAnMTAnLFxuICAgICAgJzYuNCc6ICAnMTAgVGVjaG5pY2FsIFByZXZpZXcnLFxuICAgICAgJzYuMyc6ICAnOC4xJyxcbiAgICAgICc2LjInOiAgJzgnLFxuICAgICAgJzYuMSc6ICAnU2VydmVyIDIwMDggUjIgLyA3JyxcbiAgICAgICc2LjAnOiAgJ1NlcnZlciAyMDA4IC8gVmlzdGEnLFxuICAgICAgJzUuMic6ICAnU2VydmVyIDIwMDMgLyBYUCA2NC1iaXQnLFxuICAgICAgJzUuMSc6ICAnWFAnLFxuICAgICAgJzUuMDEnOiAnMjAwMCBTUDEnLFxuICAgICAgJzUuMCc6ICAnMjAwMCcsXG4gICAgICAnNC4wJzogICdOVCcsXG4gICAgICAnNC45MCc6ICdNRSdcbiAgICB9O1xuICAgIC8vIERldGVjdCBXaW5kb3dzIHZlcnNpb24gZnJvbSBwbGF0Zm9ybSB0b2tlbnMuXG4gICAgaWYgKHBhdHRlcm4gJiYgbGFiZWwgJiYgL15XaW4vaS50ZXN0KG9zKSAmJiAhL15XaW5kb3dzIFBob25lIC9pLnRlc3Qob3MpICYmXG4gICAgICAgIChkYXRhID0gZGF0YVsvW1xcZC5dKyQvLmV4ZWMob3MpXSkpIHtcbiAgICAgIG9zID0gJ1dpbmRvd3MgJyArIGRhdGE7XG4gICAgfVxuICAgIC8vIENvcnJlY3QgY2hhcmFjdGVyIGNhc2UgYW5kIGNsZWFudXAgc3RyaW5nLlxuICAgIG9zID0gU3RyaW5nKG9zKTtcblxuICAgIGlmIChwYXR0ZXJuICYmIGxhYmVsKSB7XG4gICAgICBvcyA9IG9zLnJlcGxhY2UoUmVnRXhwKHBhdHRlcm4sICdpJyksIGxhYmVsKTtcbiAgICB9XG5cbiAgICBvcyA9IGZvcm1hdChcbiAgICAgIG9zLnJlcGxhY2UoLyBjZSQvaSwgJyBDRScpXG4gICAgICAgIC5yZXBsYWNlKC9cXGJocHcvaSwgJ3dlYicpXG4gICAgICAgIC5yZXBsYWNlKC9cXGJNYWNpbnRvc2hcXGIvLCAnTWFjIE9TJylcbiAgICAgICAgLnJlcGxhY2UoL19Qb3dlclBDXFxiL2ksICcgT1MnKVxuICAgICAgICAucmVwbGFjZSgvXFxiKE9TIFgpIFteIFxcZF0rL2ksICckMScpXG4gICAgICAgIC5yZXBsYWNlKC9cXGJNYWMgKE9TIFgpXFxiLywgJyQxJylcbiAgICAgICAgLnJlcGxhY2UoL1xcLyhcXGQpLywgJyAkMScpXG4gICAgICAgIC5yZXBsYWNlKC9fL2csICcuJylcbiAgICAgICAgLnJlcGxhY2UoLyg/OiBCZVBDfFsgLl0qZmNbIFxcZC5dKykkL2ksICcnKVxuICAgICAgICAucmVwbGFjZSgvXFxieDg2XFwuNjRcXGIvZ2ksICd4ODZfNjQnKVxuICAgICAgICAucmVwbGFjZSgvXFxiKFdpbmRvd3MgUGhvbmUpIE9TXFxiLywgJyQxJylcbiAgICAgICAgLnJlcGxhY2UoL1xcYihDaHJvbWUgT1MgXFx3KykgW1xcZC5dK1xcYi8sICckMScpXG4gICAgICAgIC5zcGxpdCgnIG9uICcpWzBdXG4gICAgKTtcblxuICAgIHJldHVybiBvcztcbiAgfVxuXG4gIC8qKlxuICAgKiBBbiBpdGVyYXRpb24gdXRpbGl0eSBmb3IgYXJyYXlzIGFuZCBvYmplY3RzLlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0ge0FycmF5fE9iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gaXRlcmF0ZSBvdmVyLlxuICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBjYWxsYmFjayBUaGUgZnVuY3Rpb24gY2FsbGVkIHBlciBpdGVyYXRpb24uXG4gICAqL1xuICBmdW5jdGlvbiBlYWNoKG9iamVjdCwgY2FsbGJhY2spIHtcbiAgICB2YXIgaW5kZXggPSAtMSxcbiAgICAgICAgbGVuZ3RoID0gb2JqZWN0ID8gb2JqZWN0Lmxlbmd0aCA6IDA7XG5cbiAgICBpZiAodHlwZW9mIGxlbmd0aCA9PSAnbnVtYmVyJyAmJiBsZW5ndGggPiAtMSAmJiBsZW5ndGggPD0gbWF4U2FmZUludGVnZXIpIHtcbiAgICAgIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgICAgIGNhbGxiYWNrKG9iamVjdFtpbmRleF0sIGluZGV4LCBvYmplY3QpO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBmb3JPd24ob2JqZWN0LCBjYWxsYmFjayk7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIFRyaW0gYW5kIGNvbmRpdGlvbmFsbHkgY2FwaXRhbGl6ZSBzdHJpbmcgdmFsdWVzLlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0ge3N0cmluZ30gc3RyaW5nIFRoZSBzdHJpbmcgdG8gZm9ybWF0LlxuICAgKiBAcmV0dXJucyB7c3RyaW5nfSBUaGUgZm9ybWF0dGVkIHN0cmluZy5cbiAgICovXG4gIGZ1bmN0aW9uIGZvcm1hdChzdHJpbmcpIHtcbiAgICBzdHJpbmcgPSB0cmltKHN0cmluZyk7XG4gICAgcmV0dXJuIC9eKD86d2ViT1N8aSg/Ok9TfFApKS8udGVzdChzdHJpbmcpXG4gICAgICA/IHN0cmluZ1xuICAgICAgOiBjYXBpdGFsaXplKHN0cmluZyk7XG4gIH1cblxuICAvKipcbiAgICogSXRlcmF0ZXMgb3ZlciBhbiBvYmplY3QncyBvd24gcHJvcGVydGllcywgZXhlY3V0aW5nIHRoZSBgY2FsbGJhY2tgIGZvciBlYWNoLlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gaXRlcmF0ZSBvdmVyLlxuICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBjYWxsYmFjayBUaGUgZnVuY3Rpb24gZXhlY3V0ZWQgcGVyIG93biBwcm9wZXJ0eS5cbiAgICovXG4gIGZ1bmN0aW9uIGZvck93bihvYmplY3QsIGNhbGxiYWNrKSB7XG4gICAgZm9yICh2YXIga2V5IGluIG9iamVjdCkge1xuICAgICAgaWYgKGhhc093blByb3BlcnR5LmNhbGwob2JqZWN0LCBrZXkpKSB7XG4gICAgICAgIGNhbGxiYWNrKG9iamVjdFtrZXldLCBrZXksIG9iamVjdCk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIEdldHMgdGhlIGludGVybmFsIGBbW0NsYXNzXV1gIG9mIGEgdmFsdWUuXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlLlxuICAgKiBAcmV0dXJucyB7c3RyaW5nfSBUaGUgYFtbQ2xhc3NdXWAuXG4gICAqL1xuICBmdW5jdGlvbiBnZXRDbGFzc09mKHZhbHVlKSB7XG4gICAgcmV0dXJuIHZhbHVlID09IG51bGxcbiAgICAgID8gY2FwaXRhbGl6ZSh2YWx1ZSlcbiAgICAgIDogdG9TdHJpbmcuY2FsbCh2YWx1ZSkuc2xpY2UoOCwgLTEpO1xuICB9XG5cbiAgLyoqXG4gICAqIEhvc3Qgb2JqZWN0cyBjYW4gcmV0dXJuIHR5cGUgdmFsdWVzIHRoYXQgYXJlIGRpZmZlcmVudCBmcm9tIHRoZWlyIGFjdHVhbFxuICAgKiBkYXRhIHR5cGUuIFRoZSBvYmplY3RzIHdlIGFyZSBjb25jZXJuZWQgd2l0aCB1c3VhbGx5IHJldHVybiBub24tcHJpbWl0aXZlXG4gICAqIHR5cGVzIG9mIFwib2JqZWN0XCIsIFwiZnVuY3Rpb25cIiwgb3IgXCJ1bmtub3duXCIuXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSB7Kn0gb2JqZWN0IFRoZSBvd25lciBvZiB0aGUgcHJvcGVydHkuXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBwcm9wZXJ0eSBUaGUgcHJvcGVydHkgdG8gY2hlY2suXG4gICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiB0aGUgcHJvcGVydHkgdmFsdWUgaXMgYSBub24tcHJpbWl0aXZlLCBlbHNlIGBmYWxzZWAuXG4gICAqL1xuICBmdW5jdGlvbiBpc0hvc3RUeXBlKG9iamVjdCwgcHJvcGVydHkpIHtcbiAgICB2YXIgdHlwZSA9IG9iamVjdCAhPSBudWxsID8gdHlwZW9mIG9iamVjdFtwcm9wZXJ0eV0gOiAnbnVtYmVyJztcbiAgICByZXR1cm4gIS9eKD86Ym9vbGVhbnxudW1iZXJ8c3RyaW5nfHVuZGVmaW5lZCkkLy50ZXN0KHR5cGUpICYmXG4gICAgICAodHlwZSA9PSAnb2JqZWN0JyA/ICEhb2JqZWN0W3Byb3BlcnR5XSA6IHRydWUpO1xuICB9XG5cbiAgLyoqXG4gICAqIFByZXBhcmVzIGEgc3RyaW5nIGZvciB1c2UgaW4gYSBgUmVnRXhwYCBieSBtYWtpbmcgaHlwaGVucyBhbmQgc3BhY2VzIG9wdGlvbmFsLlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0ge3N0cmluZ30gc3RyaW5nIFRoZSBzdHJpbmcgdG8gcXVhbGlmeS5cbiAgICogQHJldHVybnMge3N0cmluZ30gVGhlIHF1YWxpZmllZCBzdHJpbmcuXG4gICAqL1xuICBmdW5jdGlvbiBxdWFsaWZ5KHN0cmluZykge1xuICAgIHJldHVybiBTdHJpbmcoc3RyaW5nKS5yZXBsYWNlKC8oWyAtXSkoPyEkKS9nLCAnJDE/Jyk7XG4gIH1cblxuICAvKipcbiAgICogQSBiYXJlLWJvbmVzIGBBcnJheSNyZWR1Y2VgIGxpa2UgdXRpbGl0eSBmdW5jdGlvbi5cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIGl0ZXJhdGUgb3Zlci5cbiAgICogQHBhcmFtIHtGdW5jdGlvbn0gY2FsbGJhY2sgVGhlIGZ1bmN0aW9uIGNhbGxlZCBwZXIgaXRlcmF0aW9uLlxuICAgKiBAcmV0dXJucyB7Kn0gVGhlIGFjY3VtdWxhdGVkIHJlc3VsdC5cbiAgICovXG4gIGZ1bmN0aW9uIHJlZHVjZShhcnJheSwgY2FsbGJhY2spIHtcbiAgICB2YXIgYWNjdW11bGF0b3IgPSBudWxsO1xuICAgIGVhY2goYXJyYXksIGZ1bmN0aW9uKHZhbHVlLCBpbmRleCkge1xuICAgICAgYWNjdW11bGF0b3IgPSBjYWxsYmFjayhhY2N1bXVsYXRvciwgdmFsdWUsIGluZGV4LCBhcnJheSk7XG4gICAgfSk7XG4gICAgcmV0dXJuIGFjY3VtdWxhdG9yO1xuICB9XG5cbiAgLyoqXG4gICAqIFJlbW92ZXMgbGVhZGluZyBhbmQgdHJhaWxpbmcgd2hpdGVzcGFjZSBmcm9tIGEgc3RyaW5nLlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0ge3N0cmluZ30gc3RyaW5nIFRoZSBzdHJpbmcgdG8gdHJpbS5cbiAgICogQHJldHVybnMge3N0cmluZ30gVGhlIHRyaW1tZWQgc3RyaW5nLlxuICAgKi9cbiAgZnVuY3Rpb24gdHJpbShzdHJpbmcpIHtcbiAgICByZXR1cm4gU3RyaW5nKHN0cmluZykucmVwbGFjZSgvXiArfCArJC9nLCAnJyk7XG4gIH1cblxuICAvKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi9cblxuICAvKipcbiAgICogQ3JlYXRlcyBhIG5ldyBwbGF0Zm9ybSBvYmplY3QuXG4gICAqXG4gICAqIEBtZW1iZXJPZiBwbGF0Zm9ybVxuICAgKiBAcGFyYW0ge09iamVjdHxzdHJpbmd9IFt1YT1uYXZpZ2F0b3IudXNlckFnZW50XSBUaGUgdXNlciBhZ2VudCBzdHJpbmcgb3JcbiAgICogIGNvbnRleHQgb2JqZWN0LlxuICAgKiBAcmV0dXJucyB7T2JqZWN0fSBBIHBsYXRmb3JtIG9iamVjdC5cbiAgICovXG4gIGZ1bmN0aW9uIHBhcnNlKHVhKSB7XG5cbiAgICAvKiogVGhlIGVudmlyb25tZW50IGNvbnRleHQgb2JqZWN0LiAqL1xuICAgIHZhciBjb250ZXh0ID0gcm9vdDtcblxuICAgIC8qKiBVc2VkIHRvIGZsYWcgd2hlbiBhIGN1c3RvbSBjb250ZXh0IGlzIHByb3ZpZGVkLiAqL1xuICAgIHZhciBpc0N1c3RvbUNvbnRleHQgPSB1YSAmJiB0eXBlb2YgdWEgPT0gJ29iamVjdCcgJiYgZ2V0Q2xhc3NPZih1YSkgIT0gJ1N0cmluZyc7XG5cbiAgICAvLyBKdWdnbGUgYXJndW1lbnRzLlxuICAgIGlmIChpc0N1c3RvbUNvbnRleHQpIHtcbiAgICAgIGNvbnRleHQgPSB1YTtcbiAgICAgIHVhID0gbnVsbDtcbiAgICB9XG5cbiAgICAvKiogQnJvd3NlciBuYXZpZ2F0b3Igb2JqZWN0LiAqL1xuICAgIHZhciBuYXYgPSBjb250ZXh0Lm5hdmlnYXRvciB8fCB7fTtcblxuICAgIC8qKiBCcm93c2VyIHVzZXIgYWdlbnQgc3RyaW5nLiAqL1xuICAgIHZhciB1c2VyQWdlbnQgPSBuYXYudXNlckFnZW50IHx8ICcnO1xuXG4gICAgdWEgfHwgKHVhID0gdXNlckFnZW50KTtcblxuICAgIC8qKiBVc2VkIHRvIGZsYWcgd2hlbiBgdGhpc0JpbmRpbmdgIGlzIHRoZSBbTW9kdWxlU2NvcGVdLiAqL1xuICAgIHZhciBpc01vZHVsZVNjb3BlID0gaXNDdXN0b21Db250ZXh0IHx8IHRoaXNCaW5kaW5nID09IG9sZFJvb3Q7XG5cbiAgICAvKiogVXNlZCB0byBkZXRlY3QgaWYgYnJvd3NlciBpcyBsaWtlIENocm9tZS4gKi9cbiAgICB2YXIgbGlrZUNocm9tZSA9IGlzQ3VzdG9tQ29udGV4dFxuICAgICAgPyAhIW5hdi5saWtlQ2hyb21lXG4gICAgICA6IC9cXGJDaHJvbWVcXGIvLnRlc3QodWEpICYmICEvaW50ZXJuYWx8XFxuL2kudGVzdCh0b1N0cmluZy50b1N0cmluZygpKTtcblxuICAgIC8qKiBJbnRlcm5hbCBgW1tDbGFzc11dYCB2YWx1ZSBzaG9ydGN1dHMuICovXG4gICAgdmFyIG9iamVjdENsYXNzID0gJ09iamVjdCcsXG4gICAgICAgIGFpclJ1bnRpbWVDbGFzcyA9IGlzQ3VzdG9tQ29udGV4dCA/IG9iamVjdENsYXNzIDogJ1NjcmlwdEJyaWRnaW5nUHJveHlPYmplY3QnLFxuICAgICAgICBlbnZpcm9DbGFzcyA9IGlzQ3VzdG9tQ29udGV4dCA/IG9iamVjdENsYXNzIDogJ0Vudmlyb25tZW50JyxcbiAgICAgICAgamF2YUNsYXNzID0gKGlzQ3VzdG9tQ29udGV4dCAmJiBjb250ZXh0LmphdmEpID8gJ0phdmFQYWNrYWdlJyA6IGdldENsYXNzT2YoY29udGV4dC5qYXZhKSxcbiAgICAgICAgcGhhbnRvbUNsYXNzID0gaXNDdXN0b21Db250ZXh0ID8gb2JqZWN0Q2xhc3MgOiAnUnVudGltZU9iamVjdCc7XG5cbiAgICAvKiogRGV0ZWN0IEphdmEgZW52aXJvbm1lbnRzLiAqL1xuICAgIHZhciBqYXZhID0gL1xcYkphdmEvLnRlc3QoamF2YUNsYXNzKSAmJiBjb250ZXh0LmphdmE7XG5cbiAgICAvKiogRGV0ZWN0IFJoaW5vLiAqL1xuICAgIHZhciByaGlubyA9IGphdmEgJiYgZ2V0Q2xhc3NPZihjb250ZXh0LmVudmlyb25tZW50KSA9PSBlbnZpcm9DbGFzcztcblxuICAgIC8qKiBBIGNoYXJhY3RlciB0byByZXByZXNlbnQgYWxwaGEuICovXG4gICAgdmFyIGFscGhhID0gamF2YSA/ICdhJyA6ICdcXHUwM2IxJztcblxuICAgIC8qKiBBIGNoYXJhY3RlciB0byByZXByZXNlbnQgYmV0YS4gKi9cbiAgICB2YXIgYmV0YSA9IGphdmEgPyAnYicgOiAnXFx1MDNiMic7XG5cbiAgICAvKiogQnJvd3NlciBkb2N1bWVudCBvYmplY3QuICovXG4gICAgdmFyIGRvYyA9IGNvbnRleHQuZG9jdW1lbnQgfHwge307XG5cbiAgICAvKipcbiAgICAgKiBEZXRlY3QgT3BlcmEgYnJvd3NlciAoUHJlc3RvLWJhc2VkKS5cbiAgICAgKiBodHRwOi8vd3d3Lmhvd3RvY3JlYXRlLmNvLnVrL29wZXJhU3R1ZmYvb3BlcmFPYmplY3QuaHRtbFxuICAgICAqIGh0dHA6Ly9kZXYub3BlcmEuY29tL2FydGljbGVzL3ZpZXcvb3BlcmEtbWluaS13ZWItY29udGVudC1hdXRob3JpbmctZ3VpZGVsaW5lcy8jb3BlcmFtaW5pXG4gICAgICovXG4gICAgdmFyIG9wZXJhID0gY29udGV4dC5vcGVyYW1pbmkgfHwgY29udGV4dC5vcGVyYTtcblxuICAgIC8qKiBPcGVyYSBgW1tDbGFzc11dYC4gKi9cbiAgICB2YXIgb3BlcmFDbGFzcyA9IHJlT3BlcmEudGVzdChvcGVyYUNsYXNzID0gKGlzQ3VzdG9tQ29udGV4dCAmJiBvcGVyYSkgPyBvcGVyYVsnW1tDbGFzc11dJ10gOiBnZXRDbGFzc09mKG9wZXJhKSlcbiAgICAgID8gb3BlcmFDbGFzc1xuICAgICAgOiAob3BlcmEgPSBudWxsKTtcblxuICAgIC8qLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi9cblxuICAgIC8qKiBUZW1wb3JhcnkgdmFyaWFibGUgdXNlZCBvdmVyIHRoZSBzY3JpcHQncyBsaWZldGltZS4gKi9cbiAgICB2YXIgZGF0YTtcblxuICAgIC8qKiBUaGUgQ1BVIGFyY2hpdGVjdHVyZS4gKi9cbiAgICB2YXIgYXJjaCA9IHVhO1xuXG4gICAgLyoqIFBsYXRmb3JtIGRlc2NyaXB0aW9uIGFycmF5LiAqL1xuICAgIHZhciBkZXNjcmlwdGlvbiA9IFtdO1xuXG4gICAgLyoqIFBsYXRmb3JtIGFscGhhL2JldGEgaW5kaWNhdG9yLiAqL1xuICAgIHZhciBwcmVyZWxlYXNlID0gbnVsbDtcblxuICAgIC8qKiBBIGZsYWcgdG8gaW5kaWNhdGUgdGhhdCBlbnZpcm9ubWVudCBmZWF0dXJlcyBzaG91bGQgYmUgdXNlZCB0byByZXNvbHZlIHRoZSBwbGF0Zm9ybS4gKi9cbiAgICB2YXIgdXNlRmVhdHVyZXMgPSB1YSA9PSB1c2VyQWdlbnQ7XG5cbiAgICAvKiogVGhlIGJyb3dzZXIvZW52aXJvbm1lbnQgdmVyc2lvbi4gKi9cbiAgICB2YXIgdmVyc2lvbiA9IHVzZUZlYXR1cmVzICYmIG9wZXJhICYmIHR5cGVvZiBvcGVyYS52ZXJzaW9uID09ICdmdW5jdGlvbicgJiYgb3BlcmEudmVyc2lvbigpO1xuXG4gICAgLyoqIEEgZmxhZyB0byBpbmRpY2F0ZSBpZiB0aGUgT1MgZW5kcyB3aXRoIFwiLyBWZXJzaW9uXCIgKi9cbiAgICB2YXIgaXNTcGVjaWFsQ2FzZWRPUztcblxuICAgIC8qIERldGVjdGFibGUgbGF5b3V0IGVuZ2luZXMgKG9yZGVyIGlzIGltcG9ydGFudCkuICovXG4gICAgdmFyIGxheW91dCA9IGdldExheW91dChbXG4gICAgICB7ICdsYWJlbCc6ICdFZGdlSFRNTCcsICdwYXR0ZXJuJzogJ0VkZ2UnIH0sXG4gICAgICAnVHJpZGVudCcsXG4gICAgICB7ICdsYWJlbCc6ICdXZWJLaXQnLCAncGF0dGVybic6ICdBcHBsZVdlYktpdCcgfSxcbiAgICAgICdpQ2FiJyxcbiAgICAgICdQcmVzdG8nLFxuICAgICAgJ05ldEZyb250JyxcbiAgICAgICdUYXNtYW4nLFxuICAgICAgJ0tIVE1MJyxcbiAgICAgICdHZWNrbydcbiAgICBdKTtcblxuICAgIC8qIERldGVjdGFibGUgYnJvd3NlciBuYW1lcyAob3JkZXIgaXMgaW1wb3J0YW50KS4gKi9cbiAgICB2YXIgbmFtZSA9IGdldE5hbWUoW1xuICAgICAgJ0Fkb2JlIEFJUicsXG4gICAgICAnQXJvcmEnLFxuICAgICAgJ0F2YW50IEJyb3dzZXInLFxuICAgICAgJ0JyZWFjaCcsXG4gICAgICAnQ2FtaW5vJyxcbiAgICAgICdFbGVjdHJvbicsXG4gICAgICAnRXBpcGhhbnknLFxuICAgICAgJ0Zlbm5lYycsXG4gICAgICAnRmxvY2snLFxuICAgICAgJ0dhbGVvbicsXG4gICAgICAnR3JlZW5Ccm93c2VyJyxcbiAgICAgICdpQ2FiJyxcbiAgICAgICdJY2V3ZWFzZWwnLFxuICAgICAgJ0stTWVsZW9uJyxcbiAgICAgICdLb25xdWVyb3InLFxuICAgICAgJ0x1bmFzY2FwZScsXG4gICAgICAnTWF4dGhvbicsXG4gICAgICB7ICdsYWJlbCc6ICdNaWNyb3NvZnQgRWRnZScsICdwYXR0ZXJuJzogJ0VkZ2UnIH0sXG4gICAgICAnTWlkb3JpJyxcbiAgICAgICdOb29rIEJyb3dzZXInLFxuICAgICAgJ1BhbGVNb29uJyxcbiAgICAgICdQaGFudG9tSlMnLFxuICAgICAgJ1JhdmVuJyxcbiAgICAgICdSZWtvbnEnLFxuICAgICAgJ1JvY2tNZWx0JyxcbiAgICAgIHsgJ2xhYmVsJzogJ1NhbXN1bmcgSW50ZXJuZXQnLCAncGF0dGVybic6ICdTYW1zdW5nQnJvd3NlcicgfSxcbiAgICAgICdTZWFNb25rZXknLFxuICAgICAgeyAnbGFiZWwnOiAnU2lsaycsICdwYXR0ZXJuJzogJyg/OkNsb3VkOXxTaWxrLUFjY2VsZXJhdGVkKScgfSxcbiAgICAgICdTbGVpcG5pcicsXG4gICAgICAnU2xpbUJyb3dzZXInLFxuICAgICAgeyAnbGFiZWwnOiAnU1JXYXJlIElyb24nLCAncGF0dGVybic6ICdJcm9uJyB9LFxuICAgICAgJ1N1bnJpc2UnLFxuICAgICAgJ1N3aWZ0Zm94JyxcbiAgICAgICdXYXRlcmZveCcsXG4gICAgICAnV2ViUG9zaXRpdmUnLFxuICAgICAgJ09wZXJhIE1pbmknLFxuICAgICAgeyAnbGFiZWwnOiAnT3BlcmEgTWluaScsICdwYXR0ZXJuJzogJ09QaU9TJyB9LFxuICAgICAgJ09wZXJhJyxcbiAgICAgIHsgJ2xhYmVsJzogJ09wZXJhJywgJ3BhdHRlcm4nOiAnT1BSJyB9LFxuICAgICAgJ0Nocm9tZScsXG4gICAgICB7ICdsYWJlbCc6ICdDaHJvbWUgTW9iaWxlJywgJ3BhdHRlcm4nOiAnKD86Q3JpT1N8Q3JNbyknIH0sXG4gICAgICB7ICdsYWJlbCc6ICdGaXJlZm94JywgJ3BhdHRlcm4nOiAnKD86RmlyZWZveHxNaW5lZmllbGQpJyB9LFxuICAgICAgeyAnbGFiZWwnOiAnRmlyZWZveCBmb3IgaU9TJywgJ3BhdHRlcm4nOiAnRnhpT1MnIH0sXG4gICAgICB7ICdsYWJlbCc6ICdJRScsICdwYXR0ZXJuJzogJ0lFTW9iaWxlJyB9LFxuICAgICAgeyAnbGFiZWwnOiAnSUUnLCAncGF0dGVybic6ICdNU0lFJyB9LFxuICAgICAgJ1NhZmFyaSdcbiAgICBdKTtcblxuICAgIC8qIERldGVjdGFibGUgcHJvZHVjdHMgKG9yZGVyIGlzIGltcG9ydGFudCkuICovXG4gICAgdmFyIHByb2R1Y3QgPSBnZXRQcm9kdWN0KFtcbiAgICAgIHsgJ2xhYmVsJzogJ0JsYWNrQmVycnknLCAncGF0dGVybic6ICdCQjEwJyB9LFxuICAgICAgJ0JsYWNrQmVycnknLFxuICAgICAgeyAnbGFiZWwnOiAnR2FsYXh5IFMnLCAncGF0dGVybic6ICdHVC1JOTAwMCcgfSxcbiAgICAgIHsgJ2xhYmVsJzogJ0dhbGF4eSBTMicsICdwYXR0ZXJuJzogJ0dULUk5MTAwJyB9LFxuICAgICAgeyAnbGFiZWwnOiAnR2FsYXh5IFMzJywgJ3BhdHRlcm4nOiAnR1QtSTkzMDAnIH0sXG4gICAgICB7ICdsYWJlbCc6ICdHYWxheHkgUzQnLCAncGF0dGVybic6ICdHVC1JOTUwMCcgfSxcbiAgICAgIHsgJ2xhYmVsJzogJ0dhbGF4eSBTNScsICdwYXR0ZXJuJzogJ1NNLUc5MDAnIH0sXG4gICAgICB7ICdsYWJlbCc6ICdHYWxheHkgUzYnLCAncGF0dGVybic6ICdTTS1HOTIwJyB9LFxuICAgICAgeyAnbGFiZWwnOiAnR2FsYXh5IFM2IEVkZ2UnLCAncGF0dGVybic6ICdTTS1HOTI1JyB9LFxuICAgICAgeyAnbGFiZWwnOiAnR2FsYXh5IFM3JywgJ3BhdHRlcm4nOiAnU00tRzkzMCcgfSxcbiAgICAgIHsgJ2xhYmVsJzogJ0dhbGF4eSBTNyBFZGdlJywgJ3BhdHRlcm4nOiAnU00tRzkzNScgfSxcbiAgICAgICdHb29nbGUgVFYnLFxuICAgICAgJ0x1bWlhJyxcbiAgICAgICdpUGFkJyxcbiAgICAgICdpUG9kJyxcbiAgICAgICdpUGhvbmUnLFxuICAgICAgJ0tpbmRsZScsXG4gICAgICB7ICdsYWJlbCc6ICdLaW5kbGUgRmlyZScsICdwYXR0ZXJuJzogJyg/OkNsb3VkOXxTaWxrLUFjY2VsZXJhdGVkKScgfSxcbiAgICAgICdOZXh1cycsXG4gICAgICAnTm9vaycsXG4gICAgICAnUGxheUJvb2snLFxuICAgICAgJ1BsYXlTdGF0aW9uIFZpdGEnLFxuICAgICAgJ1BsYXlTdGF0aW9uJyxcbiAgICAgICdUb3VjaFBhZCcsXG4gICAgICAnVHJhbnNmb3JtZXInLFxuICAgICAgeyAnbGFiZWwnOiAnV2lpIFUnLCAncGF0dGVybic6ICdXaWlVJyB9LFxuICAgICAgJ1dpaScsXG4gICAgICAnWGJveCBPbmUnLFxuICAgICAgeyAnbGFiZWwnOiAnWGJveCAzNjAnLCAncGF0dGVybic6ICdYYm94JyB9LFxuICAgICAgJ1hvb20nXG4gICAgXSk7XG5cbiAgICAvKiBEZXRlY3RhYmxlIG1hbnVmYWN0dXJlcnMuICovXG4gICAgdmFyIG1hbnVmYWN0dXJlciA9IGdldE1hbnVmYWN0dXJlcih7XG4gICAgICAnQXBwbGUnOiB7ICdpUGFkJzogMSwgJ2lQaG9uZSc6IDEsICdpUG9kJzogMSB9LFxuICAgICAgJ0FyY2hvcyc6IHt9LFxuICAgICAgJ0FtYXpvbic6IHsgJ0tpbmRsZSc6IDEsICdLaW5kbGUgRmlyZSc6IDEgfSxcbiAgICAgICdBc3VzJzogeyAnVHJhbnNmb3JtZXInOiAxIH0sXG4gICAgICAnQmFybmVzICYgTm9ibGUnOiB7ICdOb29rJzogMSB9LFxuICAgICAgJ0JsYWNrQmVycnknOiB7ICdQbGF5Qm9vayc6IDEgfSxcbiAgICAgICdHb29nbGUnOiB7ICdHb29nbGUgVFYnOiAxLCAnTmV4dXMnOiAxIH0sXG4gICAgICAnSFAnOiB7ICdUb3VjaFBhZCc6IDEgfSxcbiAgICAgICdIVEMnOiB7fSxcbiAgICAgICdMRyc6IHt9LFxuICAgICAgJ01pY3Jvc29mdCc6IHsgJ1hib3gnOiAxLCAnWGJveCBPbmUnOiAxIH0sXG4gICAgICAnTW90b3JvbGEnOiB7ICdYb29tJzogMSB9LFxuICAgICAgJ05pbnRlbmRvJzogeyAnV2lpIFUnOiAxLCAgJ1dpaSc6IDEgfSxcbiAgICAgICdOb2tpYSc6IHsgJ0x1bWlhJzogMSB9LFxuICAgICAgJ1NhbXN1bmcnOiB7ICdHYWxheHkgUyc6IDEsICdHYWxheHkgUzInOiAxLCAnR2FsYXh5IFMzJzogMSwgJ0dhbGF4eSBTNCc6IDEgfSxcbiAgICAgICdTb255JzogeyAnUGxheVN0YXRpb24nOiAxLCAnUGxheVN0YXRpb24gVml0YSc6IDEgfVxuICAgIH0pO1xuXG4gICAgLyogRGV0ZWN0YWJsZSBvcGVyYXRpbmcgc3lzdGVtcyAob3JkZXIgaXMgaW1wb3J0YW50KS4gKi9cbiAgICB2YXIgb3MgPSBnZXRPUyhbXG4gICAgICAnV2luZG93cyBQaG9uZScsXG4gICAgICAnQW5kcm9pZCcsXG4gICAgICAnQ2VudE9TJyxcbiAgICAgIHsgJ2xhYmVsJzogJ0Nocm9tZSBPUycsICdwYXR0ZXJuJzogJ0NyT1MnIH0sXG4gICAgICAnRGViaWFuJyxcbiAgICAgICdGZWRvcmEnLFxuICAgICAgJ0ZyZWVCU0QnLFxuICAgICAgJ0dlbnRvbycsXG4gICAgICAnSGFpa3UnLFxuICAgICAgJ0t1YnVudHUnLFxuICAgICAgJ0xpbnV4IE1pbnQnLFxuICAgICAgJ09wZW5CU0QnLFxuICAgICAgJ1JlZCBIYXQnLFxuICAgICAgJ1N1U0UnLFxuICAgICAgJ1VidW50dScsXG4gICAgICAnWHVidW50dScsXG4gICAgICAnQ3lnd2luJyxcbiAgICAgICdTeW1iaWFuIE9TJyxcbiAgICAgICdocHdPUycsXG4gICAgICAnd2ViT1MgJyxcbiAgICAgICd3ZWJPUycsXG4gICAgICAnVGFibGV0IE9TJyxcbiAgICAgICdUaXplbicsXG4gICAgICAnTGludXgnLFxuICAgICAgJ01hYyBPUyBYJyxcbiAgICAgICdNYWNpbnRvc2gnLFxuICAgICAgJ01hYycsXG4gICAgICAnV2luZG93cyA5ODsnLFxuICAgICAgJ1dpbmRvd3MgJ1xuICAgIF0pO1xuXG4gICAgLyotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qL1xuXG4gICAgLyoqXG4gICAgICogUGlja3MgdGhlIGxheW91dCBlbmdpbmUgZnJvbSBhbiBhcnJheSBvZiBndWVzc2VzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBndWVzc2VzIEFuIGFycmF5IG9mIGd1ZXNzZXMuXG4gICAgICogQHJldHVybnMge251bGx8c3RyaW5nfSBUaGUgZGV0ZWN0ZWQgbGF5b3V0IGVuZ2luZS5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBnZXRMYXlvdXQoZ3Vlc3Nlcykge1xuICAgICAgcmV0dXJuIHJlZHVjZShndWVzc2VzLCBmdW5jdGlvbihyZXN1bHQsIGd1ZXNzKSB7XG4gICAgICAgIHJldHVybiByZXN1bHQgfHwgUmVnRXhwKCdcXFxcYicgKyAoXG4gICAgICAgICAgZ3Vlc3MucGF0dGVybiB8fCBxdWFsaWZ5KGd1ZXNzKVxuICAgICAgICApICsgJ1xcXFxiJywgJ2knKS5leGVjKHVhKSAmJiAoZ3Vlc3MubGFiZWwgfHwgZ3Vlc3MpO1xuICAgICAgfSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUGlja3MgdGhlIG1hbnVmYWN0dXJlciBmcm9tIGFuIGFycmF5IG9mIGd1ZXNzZXMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGd1ZXNzZXMgQW4gb2JqZWN0IG9mIGd1ZXNzZXMuXG4gICAgICogQHJldHVybnMge251bGx8c3RyaW5nfSBUaGUgZGV0ZWN0ZWQgbWFudWZhY3R1cmVyLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGdldE1hbnVmYWN0dXJlcihndWVzc2VzKSB7XG4gICAgICByZXR1cm4gcmVkdWNlKGd1ZXNzZXMsIGZ1bmN0aW9uKHJlc3VsdCwgdmFsdWUsIGtleSkge1xuICAgICAgICAvLyBMb29rdXAgdGhlIG1hbnVmYWN0dXJlciBieSBwcm9kdWN0IG9yIHNjYW4gdGhlIFVBIGZvciB0aGUgbWFudWZhY3R1cmVyLlxuICAgICAgICByZXR1cm4gcmVzdWx0IHx8IChcbiAgICAgICAgICB2YWx1ZVtwcm9kdWN0XSB8fFxuICAgICAgICAgIHZhbHVlWy9eW2Etel0rKD86ICtbYS16XStcXGIpKi9pLmV4ZWMocHJvZHVjdCldIHx8XG4gICAgICAgICAgUmVnRXhwKCdcXFxcYicgKyBxdWFsaWZ5KGtleSkgKyAnKD86XFxcXGJ8XFxcXHcqXFxcXGQpJywgJ2knKS5leGVjKHVhKVxuICAgICAgICApICYmIGtleTtcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFBpY2tzIHRoZSBicm93c2VyIG5hbWUgZnJvbSBhbiBhcnJheSBvZiBndWVzc2VzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBndWVzc2VzIEFuIGFycmF5IG9mIGd1ZXNzZXMuXG4gICAgICogQHJldHVybnMge251bGx8c3RyaW5nfSBUaGUgZGV0ZWN0ZWQgYnJvd3NlciBuYW1lLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGdldE5hbWUoZ3Vlc3Nlcykge1xuICAgICAgcmV0dXJuIHJlZHVjZShndWVzc2VzLCBmdW5jdGlvbihyZXN1bHQsIGd1ZXNzKSB7XG4gICAgICAgIHJldHVybiByZXN1bHQgfHwgUmVnRXhwKCdcXFxcYicgKyAoXG4gICAgICAgICAgZ3Vlc3MucGF0dGVybiB8fCBxdWFsaWZ5KGd1ZXNzKVxuICAgICAgICApICsgJ1xcXFxiJywgJ2knKS5leGVjKHVhKSAmJiAoZ3Vlc3MubGFiZWwgfHwgZ3Vlc3MpO1xuICAgICAgfSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUGlja3MgdGhlIE9TIG5hbWUgZnJvbSBhbiBhcnJheSBvZiBndWVzc2VzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBndWVzc2VzIEFuIGFycmF5IG9mIGd1ZXNzZXMuXG4gICAgICogQHJldHVybnMge251bGx8c3RyaW5nfSBUaGUgZGV0ZWN0ZWQgT1MgbmFtZS5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBnZXRPUyhndWVzc2VzKSB7XG4gICAgICByZXR1cm4gcmVkdWNlKGd1ZXNzZXMsIGZ1bmN0aW9uKHJlc3VsdCwgZ3Vlc3MpIHtcbiAgICAgICAgdmFyIHBhdHRlcm4gPSBndWVzcy5wYXR0ZXJuIHx8IHF1YWxpZnkoZ3Vlc3MpO1xuICAgICAgICBpZiAoIXJlc3VsdCAmJiAocmVzdWx0ID1cbiAgICAgICAgICAgICAgUmVnRXhwKCdcXFxcYicgKyBwYXR0ZXJuICsgJyg/Oi9bXFxcXGQuXSt8WyBcXFxcdy5dKiknLCAnaScpLmV4ZWModWEpXG4gICAgICAgICAgICApKSB7XG4gICAgICAgICAgcmVzdWx0ID0gY2xlYW51cE9TKHJlc3VsdCwgcGF0dGVybiwgZ3Vlc3MubGFiZWwgfHwgZ3Vlc3MpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBQaWNrcyB0aGUgcHJvZHVjdCBuYW1lIGZyb20gYW4gYXJyYXkgb2YgZ3Vlc3Nlcy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtBcnJheX0gZ3Vlc3NlcyBBbiBhcnJheSBvZiBndWVzc2VzLlxuICAgICAqIEByZXR1cm5zIHtudWxsfHN0cmluZ30gVGhlIGRldGVjdGVkIHByb2R1Y3QgbmFtZS5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBnZXRQcm9kdWN0KGd1ZXNzZXMpIHtcbiAgICAgIHJldHVybiByZWR1Y2UoZ3Vlc3NlcywgZnVuY3Rpb24ocmVzdWx0LCBndWVzcykge1xuICAgICAgICB2YXIgcGF0dGVybiA9IGd1ZXNzLnBhdHRlcm4gfHwgcXVhbGlmeShndWVzcyk7XG4gICAgICAgIGlmICghcmVzdWx0ICYmIChyZXN1bHQgPVxuICAgICAgICAgICAgICBSZWdFeHAoJ1xcXFxiJyArIHBhdHRlcm4gKyAnICpcXFxcZCtbLlxcXFx3X10qJywgJ2knKS5leGVjKHVhKSB8fFxuICAgICAgICAgICAgICBSZWdFeHAoJ1xcXFxiJyArIHBhdHRlcm4gKyAnICpcXFxcdystW1xcXFx3XSonLCAnaScpLmV4ZWModWEpIHx8XG4gICAgICAgICAgICAgIFJlZ0V4cCgnXFxcXGInICsgcGF0dGVybiArICcoPzo7ICooPzpbYS16XStbXy1dKT9bYS16XStcXFxcZCt8W14gKCk7LV0qKScsICdpJykuZXhlYyh1YSlcbiAgICAgICAgICAgICkpIHtcbiAgICAgICAgICAvLyBTcGxpdCBieSBmb3J3YXJkIHNsYXNoIGFuZCBhcHBlbmQgcHJvZHVjdCB2ZXJzaW9uIGlmIG5lZWRlZC5cbiAgICAgICAgICBpZiAoKHJlc3VsdCA9IFN0cmluZygoZ3Vlc3MubGFiZWwgJiYgIVJlZ0V4cChwYXR0ZXJuLCAnaScpLnRlc3QoZ3Vlc3MubGFiZWwpKSA/IGd1ZXNzLmxhYmVsIDogcmVzdWx0KS5zcGxpdCgnLycpKVsxXSAmJiAhL1tcXGQuXSsvLnRlc3QocmVzdWx0WzBdKSkge1xuICAgICAgICAgICAgcmVzdWx0WzBdICs9ICcgJyArIHJlc3VsdFsxXTtcbiAgICAgICAgICB9XG4gICAgICAgICAgLy8gQ29ycmVjdCBjaGFyYWN0ZXIgY2FzZSBhbmQgY2xlYW51cCBzdHJpbmcuXG4gICAgICAgICAgZ3Vlc3MgPSBndWVzcy5sYWJlbCB8fCBndWVzcztcbiAgICAgICAgICByZXN1bHQgPSBmb3JtYXQocmVzdWx0WzBdXG4gICAgICAgICAgICAucmVwbGFjZShSZWdFeHAocGF0dGVybiwgJ2knKSwgZ3Vlc3MpXG4gICAgICAgICAgICAucmVwbGFjZShSZWdFeHAoJzsgKig/OicgKyBndWVzcyArICdbXy1dKT8nLCAnaScpLCAnICcpXG4gICAgICAgICAgICAucmVwbGFjZShSZWdFeHAoJygnICsgZ3Vlc3MgKyAnKVstXy5dPyhcXFxcdyknLCAnaScpLCAnJDEgJDInKSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFJlc29sdmVzIHRoZSB2ZXJzaW9uIHVzaW5nIGFuIGFycmF5IG9mIFVBIHBhdHRlcm5zLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBwYXR0ZXJucyBBbiBhcnJheSBvZiBVQSBwYXR0ZXJucy5cbiAgICAgKiBAcmV0dXJucyB7bnVsbHxzdHJpbmd9IFRoZSBkZXRlY3RlZCB2ZXJzaW9uLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGdldFZlcnNpb24ocGF0dGVybnMpIHtcbiAgICAgIHJldHVybiByZWR1Y2UocGF0dGVybnMsIGZ1bmN0aW9uKHJlc3VsdCwgcGF0dGVybikge1xuICAgICAgICByZXR1cm4gcmVzdWx0IHx8IChSZWdFeHAocGF0dGVybiArXG4gICAgICAgICAgJyg/Oi1bXFxcXGQuXSsvfCg/OiBmb3IgW1xcXFx3LV0rKT9bIC8tXSkoW1xcXFxkLl0rW14gKCk7L18tXSopJywgJ2knKS5leGVjKHVhKSB8fCAwKVsxXSB8fCBudWxsO1xuICAgICAgfSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUmV0dXJucyBgcGxhdGZvcm0uZGVzY3JpcHRpb25gIHdoZW4gdGhlIHBsYXRmb3JtIG9iamVjdCBpcyBjb2VyY2VkIHRvIGEgc3RyaW5nLlxuICAgICAqXG4gICAgICogQG5hbWUgdG9TdHJpbmdcbiAgICAgKiBAbWVtYmVyT2YgcGxhdGZvcm1cbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfSBSZXR1cm5zIGBwbGF0Zm9ybS5kZXNjcmlwdGlvbmAgaWYgYXZhaWxhYmxlLCBlbHNlIGFuIGVtcHR5IHN0cmluZy5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiB0b1N0cmluZ1BsYXRmb3JtKCkge1xuICAgICAgcmV0dXJuIHRoaXMuZGVzY3JpcHRpb24gfHwgJyc7XG4gICAgfVxuXG4gICAgLyotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qL1xuXG4gICAgLy8gQ29udmVydCBsYXlvdXQgdG8gYW4gYXJyYXkgc28gd2UgY2FuIGFkZCBleHRyYSBkZXRhaWxzLlxuICAgIGxheW91dCAmJiAobGF5b3V0ID0gW2xheW91dF0pO1xuXG4gICAgLy8gRGV0ZWN0IHByb2R1Y3QgbmFtZXMgdGhhdCBjb250YWluIHRoZWlyIG1hbnVmYWN0dXJlcidzIG5hbWUuXG4gICAgaWYgKG1hbnVmYWN0dXJlciAmJiAhcHJvZHVjdCkge1xuICAgICAgcHJvZHVjdCA9IGdldFByb2R1Y3QoW21hbnVmYWN0dXJlcl0pO1xuICAgIH1cbiAgICAvLyBDbGVhbiB1cCBHb29nbGUgVFYuXG4gICAgaWYgKChkYXRhID0gL1xcYkdvb2dsZSBUVlxcYi8uZXhlYyhwcm9kdWN0KSkpIHtcbiAgICAgIHByb2R1Y3QgPSBkYXRhWzBdO1xuICAgIH1cbiAgICAvLyBEZXRlY3Qgc2ltdWxhdG9ycy5cbiAgICBpZiAoL1xcYlNpbXVsYXRvclxcYi9pLnRlc3QodWEpKSB7XG4gICAgICBwcm9kdWN0ID0gKHByb2R1Y3QgPyBwcm9kdWN0ICsgJyAnIDogJycpICsgJ1NpbXVsYXRvcic7XG4gICAgfVxuICAgIC8vIERldGVjdCBPcGVyYSBNaW5pIDgrIHJ1bm5pbmcgaW4gVHVyYm8vVW5jb21wcmVzc2VkIG1vZGUgb24gaU9TLlxuICAgIGlmIChuYW1lID09ICdPcGVyYSBNaW5pJyAmJiAvXFxiT1BpT1NcXGIvLnRlc3QodWEpKSB7XG4gICAgICBkZXNjcmlwdGlvbi5wdXNoKCdydW5uaW5nIGluIFR1cmJvL1VuY29tcHJlc3NlZCBtb2RlJyk7XG4gICAgfVxuICAgIC8vIERldGVjdCBJRSBNb2JpbGUgMTEuXG4gICAgaWYgKG5hbWUgPT0gJ0lFJyAmJiAvXFxibGlrZSBpUGhvbmUgT1NcXGIvLnRlc3QodWEpKSB7XG4gICAgICBkYXRhID0gcGFyc2UodWEucmVwbGFjZSgvbGlrZSBpUGhvbmUgT1MvLCAnJykpO1xuICAgICAgbWFudWZhY3R1cmVyID0gZGF0YS5tYW51ZmFjdHVyZXI7XG4gICAgICBwcm9kdWN0ID0gZGF0YS5wcm9kdWN0O1xuICAgIH1cbiAgICAvLyBEZXRlY3QgaU9TLlxuICAgIGVsc2UgaWYgKC9eaVAvLnRlc3QocHJvZHVjdCkpIHtcbiAgICAgIG5hbWUgfHwgKG5hbWUgPSAnU2FmYXJpJyk7XG4gICAgICBvcyA9ICdpT1MnICsgKChkYXRhID0gLyBPUyAoW1xcZF9dKykvaS5leGVjKHVhKSlcbiAgICAgICAgPyAnICcgKyBkYXRhWzFdLnJlcGxhY2UoL18vZywgJy4nKVxuICAgICAgICA6ICcnKTtcbiAgICB9XG4gICAgLy8gRGV0ZWN0IEt1YnVudHUuXG4gICAgZWxzZSBpZiAobmFtZSA9PSAnS29ucXVlcm9yJyAmJiAhL2J1bnR1L2kudGVzdChvcykpIHtcbiAgICAgIG9zID0gJ0t1YnVudHUnO1xuICAgIH1cbiAgICAvLyBEZXRlY3QgQW5kcm9pZCBicm93c2Vycy5cbiAgICBlbHNlIGlmICgobWFudWZhY3R1cmVyICYmIG1hbnVmYWN0dXJlciAhPSAnR29vZ2xlJyAmJlxuICAgICAgICAoKC9DaHJvbWUvLnRlc3QobmFtZSkgJiYgIS9cXGJNb2JpbGUgU2FmYXJpXFxiL2kudGVzdCh1YSkpIHx8IC9cXGJWaXRhXFxiLy50ZXN0KHByb2R1Y3QpKSkgfHxcbiAgICAgICAgKC9cXGJBbmRyb2lkXFxiLy50ZXN0KG9zKSAmJiAvXkNocm9tZS8udGVzdChuYW1lKSAmJiAvXFxiVmVyc2lvblxcLy9pLnRlc3QodWEpKSkge1xuICAgICAgbmFtZSA9ICdBbmRyb2lkIEJyb3dzZXInO1xuICAgICAgb3MgPSAvXFxiQW5kcm9pZFxcYi8udGVzdChvcykgPyBvcyA6ICdBbmRyb2lkJztcbiAgICB9XG4gICAgLy8gRGV0ZWN0IFNpbGsgZGVza3RvcC9hY2NlbGVyYXRlZCBtb2Rlcy5cbiAgICBlbHNlIGlmIChuYW1lID09ICdTaWxrJykge1xuICAgICAgaWYgKCEvXFxiTW9iaS9pLnRlc3QodWEpKSB7XG4gICAgICAgIG9zID0gJ0FuZHJvaWQnO1xuICAgICAgICBkZXNjcmlwdGlvbi51bnNoaWZ0KCdkZXNrdG9wIG1vZGUnKTtcbiAgICAgIH1cbiAgICAgIGlmICgvQWNjZWxlcmF0ZWQgKj0gKnRydWUvaS50ZXN0KHVhKSkge1xuICAgICAgICBkZXNjcmlwdGlvbi51bnNoaWZ0KCdhY2NlbGVyYXRlZCcpO1xuICAgICAgfVxuICAgIH1cbiAgICAvLyBEZXRlY3QgUGFsZU1vb24gaWRlbnRpZnlpbmcgYXMgRmlyZWZveC5cbiAgICBlbHNlIGlmIChuYW1lID09ICdQYWxlTW9vbicgJiYgKGRhdGEgPSAvXFxiRmlyZWZveFxcLyhbXFxkLl0rKVxcYi8uZXhlYyh1YSkpKSB7XG4gICAgICBkZXNjcmlwdGlvbi5wdXNoKCdpZGVudGlmeWluZyBhcyBGaXJlZm94ICcgKyBkYXRhWzFdKTtcbiAgICB9XG4gICAgLy8gRGV0ZWN0IEZpcmVmb3ggT1MgYW5kIHByb2R1Y3RzIHJ1bm5pbmcgRmlyZWZveC5cbiAgICBlbHNlIGlmIChuYW1lID09ICdGaXJlZm94JyAmJiAoZGF0YSA9IC9cXGIoTW9iaWxlfFRhYmxldHxUVilcXGIvaS5leGVjKHVhKSkpIHtcbiAgICAgIG9zIHx8IChvcyA9ICdGaXJlZm94IE9TJyk7XG4gICAgICBwcm9kdWN0IHx8IChwcm9kdWN0ID0gZGF0YVsxXSk7XG4gICAgfVxuICAgIC8vIERldGVjdCBmYWxzZSBwb3NpdGl2ZXMgZm9yIEZpcmVmb3gvU2FmYXJpLlxuICAgIGVsc2UgaWYgKCFuYW1lIHx8IChkYXRhID0gIS9cXGJNaW5lZmllbGRcXGIvaS50ZXN0KHVhKSAmJiAvXFxiKD86RmlyZWZveHxTYWZhcmkpXFxiLy5leGVjKG5hbWUpKSkge1xuICAgICAgLy8gRXNjYXBlIHRoZSBgL2AgZm9yIEZpcmVmb3ggMS5cbiAgICAgIGlmIChuYW1lICYmICFwcm9kdWN0ICYmIC9bXFwvLF18XlteKF0rP1xcKS8udGVzdCh1YS5zbGljZSh1YS5pbmRleE9mKGRhdGEgKyAnLycpICsgOCkpKSB7XG4gICAgICAgIC8vIENsZWFyIG5hbWUgb2YgZmFsc2UgcG9zaXRpdmVzLlxuICAgICAgICBuYW1lID0gbnVsbDtcbiAgICAgIH1cbiAgICAgIC8vIFJlYXNzaWduIGEgZ2VuZXJpYyBuYW1lLlxuICAgICAgaWYgKChkYXRhID0gcHJvZHVjdCB8fCBtYW51ZmFjdHVyZXIgfHwgb3MpICYmXG4gICAgICAgICAgKHByb2R1Y3QgfHwgbWFudWZhY3R1cmVyIHx8IC9cXGIoPzpBbmRyb2lkfFN5bWJpYW4gT1N8VGFibGV0IE9TfHdlYk9TKVxcYi8udGVzdChvcykpKSB7XG4gICAgICAgIG5hbWUgPSAvW2Etel0rKD86IEhhdCk/L2kuZXhlYygvXFxiQW5kcm9pZFxcYi8udGVzdChvcykgPyBvcyA6IGRhdGEpICsgJyBCcm93c2VyJztcbiAgICAgIH1cbiAgICB9XG4gICAgLy8gQWRkIENocm9tZSB2ZXJzaW9uIHRvIGRlc2NyaXB0aW9uIGZvciBFbGVjdHJvbi5cbiAgICBlbHNlIGlmIChuYW1lID09ICdFbGVjdHJvbicgJiYgKGRhdGEgPSAoL1xcYkNocm9tZVxcLyhbXFxkLl0rKVxcYi8uZXhlYyh1YSkgfHwgMClbMV0pKSB7XG4gICAgICBkZXNjcmlwdGlvbi5wdXNoKCdDaHJvbWl1bSAnICsgZGF0YSk7XG4gICAgfVxuICAgIC8vIERldGVjdCBub24tT3BlcmEgKFByZXN0by1iYXNlZCkgdmVyc2lvbnMgKG9yZGVyIGlzIGltcG9ydGFudCkuXG4gICAgaWYgKCF2ZXJzaW9uKSB7XG4gICAgICB2ZXJzaW9uID0gZ2V0VmVyc2lvbihbXG4gICAgICAgICcoPzpDbG91ZDl8Q3JpT1N8Q3JNb3xFZGdlfEZ4aU9TfElFTW9iaWxlfElyb258T3BlcmEgP01pbml8T1BpT1N8T1BSfFJhdmVufFNhbXN1bmdCcm93c2VyfFNpbGsoPyEvW1xcXFxkLl0rJCkpJyxcbiAgICAgICAgJ1ZlcnNpb24nLFxuICAgICAgICBxdWFsaWZ5KG5hbWUpLFxuICAgICAgICAnKD86RmlyZWZveHxNaW5lZmllbGR8TmV0RnJvbnQpJ1xuICAgICAgXSk7XG4gICAgfVxuICAgIC8vIERldGVjdCBzdHViYm9ybiBsYXlvdXQgZW5naW5lcy5cbiAgICBpZiAoKGRhdGEgPVxuICAgICAgICAgIGxheW91dCA9PSAnaUNhYicgJiYgcGFyc2VGbG9hdCh2ZXJzaW9uKSA+IDMgJiYgJ1dlYktpdCcgfHxcbiAgICAgICAgICAvXFxiT3BlcmFcXGIvLnRlc3QobmFtZSkgJiYgKC9cXGJPUFJcXGIvLnRlc3QodWEpID8gJ0JsaW5rJyA6ICdQcmVzdG8nKSB8fFxuICAgICAgICAgIC9cXGIoPzpNaWRvcml8Tm9va3xTYWZhcmkpXFxiL2kudGVzdCh1YSkgJiYgIS9eKD86VHJpZGVudHxFZGdlSFRNTCkkLy50ZXN0KGxheW91dCkgJiYgJ1dlYktpdCcgfHxcbiAgICAgICAgICAhbGF5b3V0ICYmIC9cXGJNU0lFXFxiL2kudGVzdCh1YSkgJiYgKG9zID09ICdNYWMgT1MnID8gJ1Rhc21hbicgOiAnVHJpZGVudCcpIHx8XG4gICAgICAgICAgbGF5b3V0ID09ICdXZWJLaXQnICYmIC9cXGJQbGF5U3RhdGlvblxcYig/ISBWaXRhXFxiKS9pLnRlc3QobmFtZSkgJiYgJ05ldEZyb250J1xuICAgICAgICApKSB7XG4gICAgICBsYXlvdXQgPSBbZGF0YV07XG4gICAgfVxuICAgIC8vIERldGVjdCBXaW5kb3dzIFBob25lIDcgZGVza3RvcCBtb2RlLlxuICAgIGlmIChuYW1lID09ICdJRScgJiYgKGRhdGEgPSAoLzsgKig/OlhCTFdQfFp1bmVXUCkoXFxkKykvaS5leGVjKHVhKSB8fCAwKVsxXSkpIHtcbiAgICAgIG5hbWUgKz0gJyBNb2JpbGUnO1xuICAgICAgb3MgPSAnV2luZG93cyBQaG9uZSAnICsgKC9cXCskLy50ZXN0KGRhdGEpID8gZGF0YSA6IGRhdGEgKyAnLngnKTtcbiAgICAgIGRlc2NyaXB0aW9uLnVuc2hpZnQoJ2Rlc2t0b3AgbW9kZScpO1xuICAgIH1cbiAgICAvLyBEZXRlY3QgV2luZG93cyBQaG9uZSA4LnggZGVza3RvcCBtb2RlLlxuICAgIGVsc2UgaWYgKC9cXGJXUERlc2t0b3BcXGIvaS50ZXN0KHVhKSkge1xuICAgICAgbmFtZSA9ICdJRSBNb2JpbGUnO1xuICAgICAgb3MgPSAnV2luZG93cyBQaG9uZSA4LngnO1xuICAgICAgZGVzY3JpcHRpb24udW5zaGlmdCgnZGVza3RvcCBtb2RlJyk7XG4gICAgICB2ZXJzaW9uIHx8ICh2ZXJzaW9uID0gKC9cXGJydjooW1xcZC5dKykvLmV4ZWModWEpIHx8IDApWzFdKTtcbiAgICB9XG4gICAgLy8gRGV0ZWN0IElFIDExIGlkZW50aWZ5aW5nIGFzIG90aGVyIGJyb3dzZXJzLlxuICAgIGVsc2UgaWYgKG5hbWUgIT0gJ0lFJyAmJiBsYXlvdXQgPT0gJ1RyaWRlbnQnICYmIChkYXRhID0gL1xcYnJ2OihbXFxkLl0rKS8uZXhlYyh1YSkpKSB7XG4gICAgICBpZiAobmFtZSkge1xuICAgICAgICBkZXNjcmlwdGlvbi5wdXNoKCdpZGVudGlmeWluZyBhcyAnICsgbmFtZSArICh2ZXJzaW9uID8gJyAnICsgdmVyc2lvbiA6ICcnKSk7XG4gICAgICB9XG4gICAgICBuYW1lID0gJ0lFJztcbiAgICAgIHZlcnNpb24gPSBkYXRhWzFdO1xuICAgIH1cbiAgICAvLyBMZXZlcmFnZSBlbnZpcm9ubWVudCBmZWF0dXJlcy5cbiAgICBpZiAodXNlRmVhdHVyZXMpIHtcbiAgICAgIC8vIERldGVjdCBzZXJ2ZXItc2lkZSBlbnZpcm9ubWVudHMuXG4gICAgICAvLyBSaGlubyBoYXMgYSBnbG9iYWwgZnVuY3Rpb24gd2hpbGUgb3RoZXJzIGhhdmUgYSBnbG9iYWwgb2JqZWN0LlxuICAgICAgaWYgKGlzSG9zdFR5cGUoY29udGV4dCwgJ2dsb2JhbCcpKSB7XG4gICAgICAgIGlmIChqYXZhKSB7XG4gICAgICAgICAgZGF0YSA9IGphdmEubGFuZy5TeXN0ZW07XG4gICAgICAgICAgYXJjaCA9IGRhdGEuZ2V0UHJvcGVydHkoJ29zLmFyY2gnKTtcbiAgICAgICAgICBvcyA9IG9zIHx8IGRhdGEuZ2V0UHJvcGVydHkoJ29zLm5hbWUnKSArICcgJyArIGRhdGEuZ2V0UHJvcGVydHkoJ29zLnZlcnNpb24nKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoaXNNb2R1bGVTY29wZSAmJiBpc0hvc3RUeXBlKGNvbnRleHQsICdzeXN0ZW0nKSAmJiAoZGF0YSA9IFtjb250ZXh0LnN5c3RlbV0pWzBdKSB7XG4gICAgICAgICAgb3MgfHwgKG9zID0gZGF0YVswXS5vcyB8fCBudWxsKTtcbiAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgZGF0YVsxXSA9IGNvbnRleHQucmVxdWlyZSgncmluZ28vZW5naW5lJykudmVyc2lvbjtcbiAgICAgICAgICAgIHZlcnNpb24gPSBkYXRhWzFdLmpvaW4oJy4nKTtcbiAgICAgICAgICAgIG5hbWUgPSAnUmluZ29KUyc7XG4gICAgICAgICAgfSBjYXRjaChlKSB7XG4gICAgICAgICAgICBpZiAoZGF0YVswXS5nbG9iYWwuc3lzdGVtID09IGNvbnRleHQuc3lzdGVtKSB7XG4gICAgICAgICAgICAgIG5hbWUgPSAnTmFyd2hhbCc7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKFxuICAgICAgICAgIHR5cGVvZiBjb250ZXh0LnByb2Nlc3MgPT0gJ29iamVjdCcgJiYgIWNvbnRleHQucHJvY2Vzcy5icm93c2VyICYmXG4gICAgICAgICAgKGRhdGEgPSBjb250ZXh0LnByb2Nlc3MpXG4gICAgICAgICkge1xuICAgICAgICAgIGlmICh0eXBlb2YgZGF0YS52ZXJzaW9ucyA9PSAnb2JqZWN0Jykge1xuICAgICAgICAgICAgaWYgKHR5cGVvZiBkYXRhLnZlcnNpb25zLmVsZWN0cm9uID09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgICAgIGRlc2NyaXB0aW9uLnB1c2goJ05vZGUgJyArIGRhdGEudmVyc2lvbnMubm9kZSk7XG4gICAgICAgICAgICAgIG5hbWUgPSAnRWxlY3Ryb24nO1xuICAgICAgICAgICAgICB2ZXJzaW9uID0gZGF0YS52ZXJzaW9ucy5lbGVjdHJvbjtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAodHlwZW9mIGRhdGEudmVyc2lvbnMubncgPT0gJ3N0cmluZycpIHtcbiAgICAgICAgICAgICAgZGVzY3JpcHRpb24ucHVzaCgnQ2hyb21pdW0gJyArIHZlcnNpb24sICdOb2RlICcgKyBkYXRhLnZlcnNpb25zLm5vZGUpO1xuICAgICAgICAgICAgICBuYW1lID0gJ05XLmpzJztcbiAgICAgICAgICAgICAgdmVyc2lvbiA9IGRhdGEudmVyc2lvbnMubnc7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIG5hbWUgPSAnTm9kZS5qcyc7XG4gICAgICAgICAgICBhcmNoID0gZGF0YS5hcmNoO1xuICAgICAgICAgICAgb3MgPSBkYXRhLnBsYXRmb3JtO1xuICAgICAgICAgICAgdmVyc2lvbiA9IC9bXFxkLl0rLy5leGVjKGRhdGEudmVyc2lvbilcbiAgICAgICAgICAgIHZlcnNpb24gPSB2ZXJzaW9uID8gdmVyc2lvblswXSA6ICd1bmtub3duJztcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAocmhpbm8pIHtcbiAgICAgICAgICBuYW1lID0gJ1JoaW5vJztcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgLy8gRGV0ZWN0IEFkb2JlIEFJUi5cbiAgICAgIGVsc2UgaWYgKGdldENsYXNzT2YoKGRhdGEgPSBjb250ZXh0LnJ1bnRpbWUpKSA9PSBhaXJSdW50aW1lQ2xhc3MpIHtcbiAgICAgICAgbmFtZSA9ICdBZG9iZSBBSVInO1xuICAgICAgICBvcyA9IGRhdGEuZmxhc2guc3lzdGVtLkNhcGFiaWxpdGllcy5vcztcbiAgICAgIH1cbiAgICAgIC8vIERldGVjdCBQaGFudG9tSlMuXG4gICAgICBlbHNlIGlmIChnZXRDbGFzc09mKChkYXRhID0gY29udGV4dC5waGFudG9tKSkgPT0gcGhhbnRvbUNsYXNzKSB7XG4gICAgICAgIG5hbWUgPSAnUGhhbnRvbUpTJztcbiAgICAgICAgdmVyc2lvbiA9IChkYXRhID0gZGF0YS52ZXJzaW9uIHx8IG51bGwpICYmIChkYXRhLm1ham9yICsgJy4nICsgZGF0YS5taW5vciArICcuJyArIGRhdGEucGF0Y2gpO1xuICAgICAgfVxuICAgICAgLy8gRGV0ZWN0IElFIGNvbXBhdGliaWxpdHkgbW9kZXMuXG4gICAgICBlbHNlIGlmICh0eXBlb2YgZG9jLmRvY3VtZW50TW9kZSA9PSAnbnVtYmVyJyAmJiAoZGF0YSA9IC9cXGJUcmlkZW50XFwvKFxcZCspL2kuZXhlYyh1YSkpKSB7XG4gICAgICAgIC8vIFdlJ3JlIGluIGNvbXBhdGliaWxpdHkgbW9kZSB3aGVuIHRoZSBUcmlkZW50IHZlcnNpb24gKyA0IGRvZXNuJ3RcbiAgICAgICAgLy8gZXF1YWwgdGhlIGRvY3VtZW50IG1vZGUuXG4gICAgICAgIHZlcnNpb24gPSBbdmVyc2lvbiwgZG9jLmRvY3VtZW50TW9kZV07XG4gICAgICAgIGlmICgoZGF0YSA9ICtkYXRhWzFdICsgNCkgIT0gdmVyc2lvblsxXSkge1xuICAgICAgICAgIGRlc2NyaXB0aW9uLnB1c2goJ0lFICcgKyB2ZXJzaW9uWzFdICsgJyBtb2RlJyk7XG4gICAgICAgICAgbGF5b3V0ICYmIChsYXlvdXRbMV0gPSAnJyk7XG4gICAgICAgICAgdmVyc2lvblsxXSA9IGRhdGE7XG4gICAgICAgIH1cbiAgICAgICAgdmVyc2lvbiA9IG5hbWUgPT0gJ0lFJyA/IFN0cmluZyh2ZXJzaW9uWzFdLnRvRml4ZWQoMSkpIDogdmVyc2lvblswXTtcbiAgICAgIH1cbiAgICAgIC8vIERldGVjdCBJRSAxMSBtYXNraW5nIGFzIG90aGVyIGJyb3dzZXJzLlxuICAgICAgZWxzZSBpZiAodHlwZW9mIGRvYy5kb2N1bWVudE1vZGUgPT0gJ251bWJlcicgJiYgL14oPzpDaHJvbWV8RmlyZWZveClcXGIvLnRlc3QobmFtZSkpIHtcbiAgICAgICAgZGVzY3JpcHRpb24ucHVzaCgnbWFza2luZyBhcyAnICsgbmFtZSArICcgJyArIHZlcnNpb24pO1xuICAgICAgICBuYW1lID0gJ0lFJztcbiAgICAgICAgdmVyc2lvbiA9ICcxMS4wJztcbiAgICAgICAgbGF5b3V0ID0gWydUcmlkZW50J107XG4gICAgICAgIG9zID0gJ1dpbmRvd3MnO1xuICAgICAgfVxuICAgICAgb3MgPSBvcyAmJiBmb3JtYXQob3MpO1xuICAgIH1cbiAgICAvLyBEZXRlY3QgcHJlcmVsZWFzZSBwaGFzZXMuXG4gICAgaWYgKHZlcnNpb24gJiYgKGRhdGEgPVxuICAgICAgICAgIC8oPzpbYWJdfGRwfHByZXxbYWJdXFxkK3ByZSkoPzpcXGQrXFwrPyk/JC9pLmV4ZWModmVyc2lvbikgfHxcbiAgICAgICAgICAvKD86YWxwaGF8YmV0YSkoPzogP1xcZCk/L2kuZXhlYyh1YSArICc7JyArICh1c2VGZWF0dXJlcyAmJiBuYXYuYXBwTWlub3JWZXJzaW9uKSkgfHxcbiAgICAgICAgICAvXFxiTWluZWZpZWxkXFxiL2kudGVzdCh1YSkgJiYgJ2EnXG4gICAgICAgICkpIHtcbiAgICAgIHByZXJlbGVhc2UgPSAvYi9pLnRlc3QoZGF0YSkgPyAnYmV0YScgOiAnYWxwaGEnO1xuICAgICAgdmVyc2lvbiA9IHZlcnNpb24ucmVwbGFjZShSZWdFeHAoZGF0YSArICdcXFxcKz8kJyksICcnKSArXG4gICAgICAgIChwcmVyZWxlYXNlID09ICdiZXRhJyA/IGJldGEgOiBhbHBoYSkgKyAoL1xcZCtcXCs/Ly5leGVjKGRhdGEpIHx8ICcnKTtcbiAgICB9XG4gICAgLy8gRGV0ZWN0IEZpcmVmb3ggTW9iaWxlLlxuICAgIGlmIChuYW1lID09ICdGZW5uZWMnIHx8IG5hbWUgPT0gJ0ZpcmVmb3gnICYmIC9cXGIoPzpBbmRyb2lkfEZpcmVmb3ggT1MpXFxiLy50ZXN0KG9zKSkge1xuICAgICAgbmFtZSA9ICdGaXJlZm94IE1vYmlsZSc7XG4gICAgfVxuICAgIC8vIE9ic2N1cmUgTWF4dGhvbidzIHVucmVsaWFibGUgdmVyc2lvbi5cbiAgICBlbHNlIGlmIChuYW1lID09ICdNYXh0aG9uJyAmJiB2ZXJzaW9uKSB7XG4gICAgICB2ZXJzaW9uID0gdmVyc2lvbi5yZXBsYWNlKC9cXC5bXFxkLl0rLywgJy54Jyk7XG4gICAgfVxuICAgIC8vIERldGVjdCBYYm94IDM2MCBhbmQgWGJveCBPbmUuXG4gICAgZWxzZSBpZiAoL1xcYlhib3hcXGIvaS50ZXN0KHByb2R1Y3QpKSB7XG4gICAgICBpZiAocHJvZHVjdCA9PSAnWGJveCAzNjAnKSB7XG4gICAgICAgIG9zID0gbnVsbDtcbiAgICAgIH1cbiAgICAgIGlmIChwcm9kdWN0ID09ICdYYm94IDM2MCcgJiYgL1xcYklFTW9iaWxlXFxiLy50ZXN0KHVhKSkge1xuICAgICAgICBkZXNjcmlwdGlvbi51bnNoaWZ0KCdtb2JpbGUgbW9kZScpO1xuICAgICAgfVxuICAgIH1cbiAgICAvLyBBZGQgbW9iaWxlIHBvc3RmaXguXG4gICAgZWxzZSBpZiAoKC9eKD86Q2hyb21lfElFfE9wZXJhKSQvLnRlc3QobmFtZSkgfHwgbmFtZSAmJiAhcHJvZHVjdCAmJiAhL0Jyb3dzZXJ8TW9iaS8udGVzdChuYW1lKSkgJiZcbiAgICAgICAgKG9zID09ICdXaW5kb3dzIENFJyB8fCAvTW9iaS9pLnRlc3QodWEpKSkge1xuICAgICAgbmFtZSArPSAnIE1vYmlsZSc7XG4gICAgfVxuICAgIC8vIERldGVjdCBJRSBwbGF0Zm9ybSBwcmV2aWV3LlxuICAgIGVsc2UgaWYgKG5hbWUgPT0gJ0lFJyAmJiB1c2VGZWF0dXJlcykge1xuICAgICAgdHJ5IHtcbiAgICAgICAgaWYgKGNvbnRleHQuZXh0ZXJuYWwgPT09IG51bGwpIHtcbiAgICAgICAgICBkZXNjcmlwdGlvbi51bnNoaWZ0KCdwbGF0Zm9ybSBwcmV2aWV3Jyk7XG4gICAgICAgIH1cbiAgICAgIH0gY2F0Y2goZSkge1xuICAgICAgICBkZXNjcmlwdGlvbi51bnNoaWZ0KCdlbWJlZGRlZCcpO1xuICAgICAgfVxuICAgIH1cbiAgICAvLyBEZXRlY3QgQmxhY2tCZXJyeSBPUyB2ZXJzaW9uLlxuICAgIC8vIGh0dHA6Ly9kb2NzLmJsYWNrYmVycnkuY29tL2VuL2RldmVsb3BlcnMvZGVsaXZlcmFibGVzLzE4MTY5L0hUVFBfaGVhZGVyc19zZW50X2J5X0JCX0Jyb3dzZXJfMTIzNDkxMV8xMS5qc3BcbiAgICBlbHNlIGlmICgoL1xcYkJsYWNrQmVycnlcXGIvLnRlc3QocHJvZHVjdCkgfHwgL1xcYkJCMTBcXGIvLnRlc3QodWEpKSAmJiAoZGF0YSA9XG4gICAgICAgICAgKFJlZ0V4cChwcm9kdWN0LnJlcGxhY2UoLyArL2csICcgKicpICsgJy8oWy5cXFxcZF0rKScsICdpJykuZXhlYyh1YSkgfHwgMClbMV0gfHxcbiAgICAgICAgICB2ZXJzaW9uXG4gICAgICAgICkpIHtcbiAgICAgIGRhdGEgPSBbZGF0YSwgL0JCMTAvLnRlc3QodWEpXTtcbiAgICAgIG9zID0gKGRhdGFbMV0gPyAocHJvZHVjdCA9IG51bGwsIG1hbnVmYWN0dXJlciA9ICdCbGFja0JlcnJ5JykgOiAnRGV2aWNlIFNvZnR3YXJlJykgKyAnICcgKyBkYXRhWzBdO1xuICAgICAgdmVyc2lvbiA9IG51bGw7XG4gICAgfVxuICAgIC8vIERldGVjdCBPcGVyYSBpZGVudGlmeWluZy9tYXNraW5nIGl0c2VsZiBhcyBhbm90aGVyIGJyb3dzZXIuXG4gICAgLy8gaHR0cDovL3d3dy5vcGVyYS5jb20vc3VwcG9ydC9rYi92aWV3Lzg0My9cbiAgICBlbHNlIGlmICh0aGlzICE9IGZvck93biAmJiBwcm9kdWN0ICE9ICdXaWknICYmIChcbiAgICAgICAgICAodXNlRmVhdHVyZXMgJiYgb3BlcmEpIHx8XG4gICAgICAgICAgKC9PcGVyYS8udGVzdChuYW1lKSAmJiAvXFxiKD86TVNJRXxGaXJlZm94KVxcYi9pLnRlc3QodWEpKSB8fFxuICAgICAgICAgIChuYW1lID09ICdGaXJlZm94JyAmJiAvXFxiT1MgWCAoPzpcXGQrXFwuKXsyLH0vLnRlc3Qob3MpKSB8fFxuICAgICAgICAgIChuYW1lID09ICdJRScgJiYgKFxuICAgICAgICAgICAgKG9zICYmICEvXldpbi8udGVzdChvcykgJiYgdmVyc2lvbiA+IDUuNSkgfHxcbiAgICAgICAgICAgIC9cXGJXaW5kb3dzIFhQXFxiLy50ZXN0KG9zKSAmJiB2ZXJzaW9uID4gOCB8fFxuICAgICAgICAgICAgdmVyc2lvbiA9PSA4ICYmICEvXFxiVHJpZGVudFxcYi8udGVzdCh1YSlcbiAgICAgICAgICApKVxuICAgICAgICApICYmICFyZU9wZXJhLnRlc3QoKGRhdGEgPSBwYXJzZS5jYWxsKGZvck93biwgdWEucmVwbGFjZShyZU9wZXJhLCAnJykgKyAnOycpKSkgJiYgZGF0YS5uYW1lKSB7XG4gICAgICAvLyBXaGVuIFwiaWRlbnRpZnlpbmdcIiwgdGhlIFVBIGNvbnRhaW5zIGJvdGggT3BlcmEgYW5kIHRoZSBvdGhlciBicm93c2VyJ3MgbmFtZS5cbiAgICAgIGRhdGEgPSAnaW5nIGFzICcgKyBkYXRhLm5hbWUgKyAoKGRhdGEgPSBkYXRhLnZlcnNpb24pID8gJyAnICsgZGF0YSA6ICcnKTtcbiAgICAgIGlmIChyZU9wZXJhLnRlc3QobmFtZSkpIHtcbiAgICAgICAgaWYgKC9cXGJJRVxcYi8udGVzdChkYXRhKSAmJiBvcyA9PSAnTWFjIE9TJykge1xuICAgICAgICAgIG9zID0gbnVsbDtcbiAgICAgICAgfVxuICAgICAgICBkYXRhID0gJ2lkZW50aWZ5JyArIGRhdGE7XG4gICAgICB9XG4gICAgICAvLyBXaGVuIFwibWFza2luZ1wiLCB0aGUgVUEgY29udGFpbnMgb25seSB0aGUgb3RoZXIgYnJvd3NlcidzIG5hbWUuXG4gICAgICBlbHNlIHtcbiAgICAgICAgZGF0YSA9ICdtYXNrJyArIGRhdGE7XG4gICAgICAgIGlmIChvcGVyYUNsYXNzKSB7XG4gICAgICAgICAgbmFtZSA9IGZvcm1hdChvcGVyYUNsYXNzLnJlcGxhY2UoLyhbYS16XSkoW0EtWl0pL2csICckMSAkMicpKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBuYW1lID0gJ09wZXJhJztcbiAgICAgICAgfVxuICAgICAgICBpZiAoL1xcYklFXFxiLy50ZXN0KGRhdGEpKSB7XG4gICAgICAgICAgb3MgPSBudWxsO1xuICAgICAgICB9XG4gICAgICAgIGlmICghdXNlRmVhdHVyZXMpIHtcbiAgICAgICAgICB2ZXJzaW9uID0gbnVsbDtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgbGF5b3V0ID0gWydQcmVzdG8nXTtcbiAgICAgIGRlc2NyaXB0aW9uLnB1c2goZGF0YSk7XG4gICAgfVxuICAgIC8vIERldGVjdCBXZWJLaXQgTmlnaHRseSBhbmQgYXBwcm94aW1hdGUgQ2hyb21lL1NhZmFyaSB2ZXJzaW9ucy5cbiAgICBpZiAoKGRhdGEgPSAoL1xcYkFwcGxlV2ViS2l0XFwvKFtcXGQuXStcXCs/KS9pLmV4ZWModWEpIHx8IDApWzFdKSkge1xuICAgICAgLy8gQ29ycmVjdCBidWlsZCBudW1iZXIgZm9yIG51bWVyaWMgY29tcGFyaXNvbi5cbiAgICAgIC8vIChlLmcuIFwiNTMyLjVcIiBiZWNvbWVzIFwiNTMyLjA1XCIpXG4gICAgICBkYXRhID0gW3BhcnNlRmxvYXQoZGF0YS5yZXBsYWNlKC9cXC4oXFxkKSQvLCAnLjAkMScpKSwgZGF0YV07XG4gICAgICAvLyBOaWdodGx5IGJ1aWxkcyBhcmUgcG9zdGZpeGVkIHdpdGggYSBcIitcIi5cbiAgICAgIGlmIChuYW1lID09ICdTYWZhcmknICYmIGRhdGFbMV0uc2xpY2UoLTEpID09ICcrJykge1xuICAgICAgICBuYW1lID0gJ1dlYktpdCBOaWdodGx5JztcbiAgICAgICAgcHJlcmVsZWFzZSA9ICdhbHBoYSc7XG4gICAgICAgIHZlcnNpb24gPSBkYXRhWzFdLnNsaWNlKDAsIC0xKTtcbiAgICAgIH1cbiAgICAgIC8vIENsZWFyIGluY29ycmVjdCBicm93c2VyIHZlcnNpb25zLlxuICAgICAgZWxzZSBpZiAodmVyc2lvbiA9PSBkYXRhWzFdIHx8XG4gICAgICAgICAgdmVyc2lvbiA9PSAoZGF0YVsyXSA9ICgvXFxiU2FmYXJpXFwvKFtcXGQuXStcXCs/KS9pLmV4ZWModWEpIHx8IDApWzFdKSkge1xuICAgICAgICB2ZXJzaW9uID0gbnVsbDtcbiAgICAgIH1cbiAgICAgIC8vIFVzZSB0aGUgZnVsbCBDaHJvbWUgdmVyc2lvbiB3aGVuIGF2YWlsYWJsZS5cbiAgICAgIGRhdGFbMV0gPSAoL1xcYkNocm9tZVxcLyhbXFxkLl0rKS9pLmV4ZWModWEpIHx8IDApWzFdO1xuICAgICAgLy8gRGV0ZWN0IEJsaW5rIGxheW91dCBlbmdpbmUuXG4gICAgICBpZiAoZGF0YVswXSA9PSA1MzcuMzYgJiYgZGF0YVsyXSA9PSA1MzcuMzYgJiYgcGFyc2VGbG9hdChkYXRhWzFdKSA+PSAyOCAmJiBsYXlvdXQgPT0gJ1dlYktpdCcpIHtcbiAgICAgICAgbGF5b3V0ID0gWydCbGluayddO1xuICAgICAgfVxuICAgICAgLy8gRGV0ZWN0IEphdmFTY3JpcHRDb3JlLlxuICAgICAgLy8gaHR0cDovL3N0YWNrb3ZlcmZsb3cuY29tL3F1ZXN0aW9ucy82NzY4NDc0L2hvdy1jYW4taS1kZXRlY3Qtd2hpY2gtamF2YXNjcmlwdC1lbmdpbmUtdjgtb3ItanNjLWlzLXVzZWQtYXQtcnVudGltZS1pbi1hbmRyb2lcbiAgICAgIGlmICghdXNlRmVhdHVyZXMgfHwgKCFsaWtlQ2hyb21lICYmICFkYXRhWzFdKSkge1xuICAgICAgICBsYXlvdXQgJiYgKGxheW91dFsxXSA9ICdsaWtlIFNhZmFyaScpO1xuICAgICAgICBkYXRhID0gKGRhdGEgPSBkYXRhWzBdLCBkYXRhIDwgNDAwID8gMSA6IGRhdGEgPCA1MDAgPyAyIDogZGF0YSA8IDUyNiA/IDMgOiBkYXRhIDwgNTMzID8gNCA6IGRhdGEgPCA1MzQgPyAnNCsnIDogZGF0YSA8IDUzNSA/IDUgOiBkYXRhIDwgNTM3ID8gNiA6IGRhdGEgPCA1MzggPyA3IDogZGF0YSA8IDYwMSA/IDggOiAnOCcpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgbGF5b3V0ICYmIChsYXlvdXRbMV0gPSAnbGlrZSBDaHJvbWUnKTtcbiAgICAgICAgZGF0YSA9IGRhdGFbMV0gfHwgKGRhdGEgPSBkYXRhWzBdLCBkYXRhIDwgNTMwID8gMSA6IGRhdGEgPCA1MzIgPyAyIDogZGF0YSA8IDUzMi4wNSA/IDMgOiBkYXRhIDwgNTMzID8gNCA6IGRhdGEgPCA1MzQuMDMgPyA1IDogZGF0YSA8IDUzNC4wNyA/IDYgOiBkYXRhIDwgNTM0LjEwID8gNyA6IGRhdGEgPCA1MzQuMTMgPyA4IDogZGF0YSA8IDUzNC4xNiA/IDkgOiBkYXRhIDwgNTM0LjI0ID8gMTAgOiBkYXRhIDwgNTM0LjMwID8gMTEgOiBkYXRhIDwgNTM1LjAxID8gMTIgOiBkYXRhIDwgNTM1LjAyID8gJzEzKycgOiBkYXRhIDwgNTM1LjA3ID8gMTUgOiBkYXRhIDwgNTM1LjExID8gMTYgOiBkYXRhIDwgNTM1LjE5ID8gMTcgOiBkYXRhIDwgNTM2LjA1ID8gMTggOiBkYXRhIDwgNTM2LjEwID8gMTkgOiBkYXRhIDwgNTM3LjAxID8gMjAgOiBkYXRhIDwgNTM3LjExID8gJzIxKycgOiBkYXRhIDwgNTM3LjEzID8gMjMgOiBkYXRhIDwgNTM3LjE4ID8gMjQgOiBkYXRhIDwgNTM3LjI0ID8gMjUgOiBkYXRhIDwgNTM3LjM2ID8gMjYgOiBsYXlvdXQgIT0gJ0JsaW5rJyA/ICcyNycgOiAnMjgnKTtcbiAgICAgIH1cbiAgICAgIC8vIEFkZCB0aGUgcG9zdGZpeCBvZiBcIi54XCIgb3IgXCIrXCIgZm9yIGFwcHJveGltYXRlIHZlcnNpb25zLlxuICAgICAgbGF5b3V0ICYmIChsYXlvdXRbMV0gKz0gJyAnICsgKGRhdGEgKz0gdHlwZW9mIGRhdGEgPT0gJ251bWJlcicgPyAnLngnIDogL1suK10vLnRlc3QoZGF0YSkgPyAnJyA6ICcrJykpO1xuICAgICAgLy8gT2JzY3VyZSB2ZXJzaW9uIGZvciBzb21lIFNhZmFyaSAxLTIgcmVsZWFzZXMuXG4gICAgICBpZiAobmFtZSA9PSAnU2FmYXJpJyAmJiAoIXZlcnNpb24gfHwgcGFyc2VJbnQodmVyc2lvbikgPiA0NSkpIHtcbiAgICAgICAgdmVyc2lvbiA9IGRhdGE7XG4gICAgICB9XG4gICAgfVxuICAgIC8vIERldGVjdCBPcGVyYSBkZXNrdG9wIG1vZGVzLlxuICAgIGlmIChuYW1lID09ICdPcGVyYScgJiYgIChkYXRhID0gL1xcYnpib3Z8enZhdiQvLmV4ZWMob3MpKSkge1xuICAgICAgbmFtZSArPSAnICc7XG4gICAgICBkZXNjcmlwdGlvbi51bnNoaWZ0KCdkZXNrdG9wIG1vZGUnKTtcbiAgICAgIGlmIChkYXRhID09ICd6dmF2Jykge1xuICAgICAgICBuYW1lICs9ICdNaW5pJztcbiAgICAgICAgdmVyc2lvbiA9IG51bGw7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBuYW1lICs9ICdNb2JpbGUnO1xuICAgICAgfVxuICAgICAgb3MgPSBvcy5yZXBsYWNlKFJlZ0V4cCgnIConICsgZGF0YSArICckJyksICcnKTtcbiAgICB9XG4gICAgLy8gRGV0ZWN0IENocm9tZSBkZXNrdG9wIG1vZGUuXG4gICAgZWxzZSBpZiAobmFtZSA9PSAnU2FmYXJpJyAmJiAvXFxiQ2hyb21lXFxiLy5leGVjKGxheW91dCAmJiBsYXlvdXRbMV0pKSB7XG4gICAgICBkZXNjcmlwdGlvbi51bnNoaWZ0KCdkZXNrdG9wIG1vZGUnKTtcbiAgICAgIG5hbWUgPSAnQ2hyb21lIE1vYmlsZSc7XG4gICAgICB2ZXJzaW9uID0gbnVsbDtcblxuICAgICAgaWYgKC9cXGJPUyBYXFxiLy50ZXN0KG9zKSkge1xuICAgICAgICBtYW51ZmFjdHVyZXIgPSAnQXBwbGUnO1xuICAgICAgICBvcyA9ICdpT1MgNC4zKyc7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBvcyA9IG51bGw7XG4gICAgICB9XG4gICAgfVxuICAgIC8vIFN0cmlwIGluY29ycmVjdCBPUyB2ZXJzaW9ucy5cbiAgICBpZiAodmVyc2lvbiAmJiB2ZXJzaW9uLmluZGV4T2YoKGRhdGEgPSAvW1xcZC5dKyQvLmV4ZWMob3MpKSkgPT0gMCAmJlxuICAgICAgICB1YS5pbmRleE9mKCcvJyArIGRhdGEgKyAnLScpID4gLTEpIHtcbiAgICAgIG9zID0gdHJpbShvcy5yZXBsYWNlKGRhdGEsICcnKSk7XG4gICAgfVxuICAgIC8vIEFkZCBsYXlvdXQgZW5naW5lLlxuICAgIGlmIChsYXlvdXQgJiYgIS9cXGIoPzpBdmFudHxOb29rKVxcYi8udGVzdChuYW1lKSAmJiAoXG4gICAgICAgIC9Ccm93c2VyfEx1bmFzY2FwZXxNYXh0aG9uLy50ZXN0KG5hbWUpIHx8XG4gICAgICAgIG5hbWUgIT0gJ1NhZmFyaScgJiYgL15pT1MvLnRlc3Qob3MpICYmIC9cXGJTYWZhcmlcXGIvLnRlc3QobGF5b3V0WzFdKSB8fFxuICAgICAgICAvXig/OkFkb2JlfEFyb3JhfEJyZWFjaHxNaWRvcml8T3BlcmF8UGhhbnRvbXxSZWtvbnF8Um9ja3xTYW1zdW5nIEludGVybmV0fFNsZWlwbmlyfFdlYikvLnRlc3QobmFtZSkgJiYgbGF5b3V0WzFdKSkge1xuICAgICAgLy8gRG9uJ3QgYWRkIGxheW91dCBkZXRhaWxzIHRvIGRlc2NyaXB0aW9uIGlmIHRoZXkgYXJlIGZhbHNleS5cbiAgICAgIChkYXRhID0gbGF5b3V0W2xheW91dC5sZW5ndGggLSAxXSkgJiYgZGVzY3JpcHRpb24ucHVzaChkYXRhKTtcbiAgICB9XG4gICAgLy8gQ29tYmluZSBjb250ZXh0dWFsIGluZm9ybWF0aW9uLlxuICAgIGlmIChkZXNjcmlwdGlvbi5sZW5ndGgpIHtcbiAgICAgIGRlc2NyaXB0aW9uID0gWycoJyArIGRlc2NyaXB0aW9uLmpvaW4oJzsgJykgKyAnKSddO1xuICAgIH1cbiAgICAvLyBBcHBlbmQgbWFudWZhY3R1cmVyIHRvIGRlc2NyaXB0aW9uLlxuICAgIGlmIChtYW51ZmFjdHVyZXIgJiYgcHJvZHVjdCAmJiBwcm9kdWN0LmluZGV4T2YobWFudWZhY3R1cmVyKSA8IDApIHtcbiAgICAgIGRlc2NyaXB0aW9uLnB1c2goJ29uICcgKyBtYW51ZmFjdHVyZXIpO1xuICAgIH1cbiAgICAvLyBBcHBlbmQgcHJvZHVjdCB0byBkZXNjcmlwdGlvbi5cbiAgICBpZiAocHJvZHVjdCkge1xuICAgICAgZGVzY3JpcHRpb24ucHVzaCgoL15vbiAvLnRlc3QoZGVzY3JpcHRpb25bZGVzY3JpcHRpb24ubGVuZ3RoIC0gMV0pID8gJycgOiAnb24gJykgKyBwcm9kdWN0KTtcbiAgICB9XG4gICAgLy8gUGFyc2UgdGhlIE9TIGludG8gYW4gb2JqZWN0LlxuICAgIGlmIChvcykge1xuICAgICAgZGF0YSA9IC8gKFtcXGQuK10rKSQvLmV4ZWMob3MpO1xuICAgICAgaXNTcGVjaWFsQ2FzZWRPUyA9IGRhdGEgJiYgb3MuY2hhckF0KG9zLmxlbmd0aCAtIGRhdGFbMF0ubGVuZ3RoIC0gMSkgPT0gJy8nO1xuICAgICAgb3MgPSB7XG4gICAgICAgICdhcmNoaXRlY3R1cmUnOiAzMixcbiAgICAgICAgJ2ZhbWlseSc6IChkYXRhICYmICFpc1NwZWNpYWxDYXNlZE9TKSA/IG9zLnJlcGxhY2UoZGF0YVswXSwgJycpIDogb3MsXG4gICAgICAgICd2ZXJzaW9uJzogZGF0YSA/IGRhdGFbMV0gOiBudWxsLFxuICAgICAgICAndG9TdHJpbmcnOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICB2YXIgdmVyc2lvbiA9IHRoaXMudmVyc2lvbjtcbiAgICAgICAgICByZXR1cm4gdGhpcy5mYW1pbHkgKyAoKHZlcnNpb24gJiYgIWlzU3BlY2lhbENhc2VkT1MpID8gJyAnICsgdmVyc2lvbiA6ICcnKSArICh0aGlzLmFyY2hpdGVjdHVyZSA9PSA2NCA/ICcgNjQtYml0JyA6ICcnKTtcbiAgICAgICAgfVxuICAgICAgfTtcbiAgICB9XG4gICAgLy8gQWRkIGJyb3dzZXIvT1MgYXJjaGl0ZWN0dXJlLlxuICAgIGlmICgoZGF0YSA9IC9cXGIoPzpBTUR8SUF8V2lufFdPV3x4ODZffHgpNjRcXGIvaS5leGVjKGFyY2gpKSAmJiAhL1xcYmk2ODZcXGIvaS50ZXN0KGFyY2gpKSB7XG4gICAgICBpZiAob3MpIHtcbiAgICAgICAgb3MuYXJjaGl0ZWN0dXJlID0gNjQ7XG4gICAgICAgIG9zLmZhbWlseSA9IG9zLmZhbWlseS5yZXBsYWNlKFJlZ0V4cCgnIConICsgZGF0YSksICcnKTtcbiAgICAgIH1cbiAgICAgIGlmIChcbiAgICAgICAgICBuYW1lICYmICgvXFxiV09XNjRcXGIvaS50ZXN0KHVhKSB8fFxuICAgICAgICAgICh1c2VGZWF0dXJlcyAmJiAvXFx3KD86ODZ8MzIpJC8udGVzdChuYXYuY3B1Q2xhc3MgfHwgbmF2LnBsYXRmb3JtKSAmJiAhL1xcYldpbjY0OyB4NjRcXGIvaS50ZXN0KHVhKSkpXG4gICAgICApIHtcbiAgICAgICAgZGVzY3JpcHRpb24udW5zaGlmdCgnMzItYml0Jyk7XG4gICAgICB9XG4gICAgfVxuICAgIC8vIENocm9tZSAzOSBhbmQgYWJvdmUgb24gT1MgWCBpcyBhbHdheXMgNjQtYml0LlxuICAgIGVsc2UgaWYgKFxuICAgICAgICBvcyAmJiAvXk9TIFgvLnRlc3Qob3MuZmFtaWx5KSAmJlxuICAgICAgICBuYW1lID09ICdDaHJvbWUnICYmIHBhcnNlRmxvYXQodmVyc2lvbikgPj0gMzlcbiAgICApIHtcbiAgICAgIG9zLmFyY2hpdGVjdHVyZSA9IDY0O1xuICAgIH1cblxuICAgIHVhIHx8ICh1YSA9IG51bGwpO1xuXG4gICAgLyotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qL1xuXG4gICAgLyoqXG4gICAgICogVGhlIHBsYXRmb3JtIG9iamVjdC5cbiAgICAgKlxuICAgICAqIEBuYW1lIHBsYXRmb3JtXG4gICAgICogQHR5cGUgT2JqZWN0XG4gICAgICovXG4gICAgdmFyIHBsYXRmb3JtID0ge307XG5cbiAgICAvKipcbiAgICAgKiBUaGUgcGxhdGZvcm0gZGVzY3JpcHRpb24uXG4gICAgICpcbiAgICAgKiBAbWVtYmVyT2YgcGxhdGZvcm1cbiAgICAgKiBAdHlwZSBzdHJpbmd8bnVsbFxuICAgICAqL1xuICAgIHBsYXRmb3JtLmRlc2NyaXB0aW9uID0gdWE7XG5cbiAgICAvKipcbiAgICAgKiBUaGUgbmFtZSBvZiB0aGUgYnJvd3NlcidzIGxheW91dCBlbmdpbmUuXG4gICAgICpcbiAgICAgKiBUaGUgbGlzdCBvZiBjb21tb24gbGF5b3V0IGVuZ2luZXMgaW5jbHVkZTpcbiAgICAgKiBcIkJsaW5rXCIsIFwiRWRnZUhUTUxcIiwgXCJHZWNrb1wiLCBcIlRyaWRlbnRcIiBhbmQgXCJXZWJLaXRcIlxuICAgICAqXG4gICAgICogQG1lbWJlck9mIHBsYXRmb3JtXG4gICAgICogQHR5cGUgc3RyaW5nfG51bGxcbiAgICAgKi9cbiAgICBwbGF0Zm9ybS5sYXlvdXQgPSBsYXlvdXQgJiYgbGF5b3V0WzBdO1xuXG4gICAgLyoqXG4gICAgICogVGhlIG5hbWUgb2YgdGhlIHByb2R1Y3QncyBtYW51ZmFjdHVyZXIuXG4gICAgICpcbiAgICAgKiBUaGUgbGlzdCBvZiBtYW51ZmFjdHVyZXJzIGluY2x1ZGU6XG4gICAgICogXCJBcHBsZVwiLCBcIkFyY2hvc1wiLCBcIkFtYXpvblwiLCBcIkFzdXNcIiwgXCJCYXJuZXMgJiBOb2JsZVwiLCBcIkJsYWNrQmVycnlcIixcbiAgICAgKiBcIkdvb2dsZVwiLCBcIkhQXCIsIFwiSFRDXCIsIFwiTEdcIiwgXCJNaWNyb3NvZnRcIiwgXCJNb3Rvcm9sYVwiLCBcIk5pbnRlbmRvXCIsXG4gICAgICogXCJOb2tpYVwiLCBcIlNhbXN1bmdcIiBhbmQgXCJTb255XCJcbiAgICAgKlxuICAgICAqIEBtZW1iZXJPZiBwbGF0Zm9ybVxuICAgICAqIEB0eXBlIHN0cmluZ3xudWxsXG4gICAgICovXG4gICAgcGxhdGZvcm0ubWFudWZhY3R1cmVyID0gbWFudWZhY3R1cmVyO1xuXG4gICAgLyoqXG4gICAgICogVGhlIG5hbWUgb2YgdGhlIGJyb3dzZXIvZW52aXJvbm1lbnQuXG4gICAgICpcbiAgICAgKiBUaGUgbGlzdCBvZiBjb21tb24gYnJvd3NlciBuYW1lcyBpbmNsdWRlOlxuICAgICAqIFwiQ2hyb21lXCIsIFwiRWxlY3Ryb25cIiwgXCJGaXJlZm94XCIsIFwiRmlyZWZveCBmb3IgaU9TXCIsIFwiSUVcIixcbiAgICAgKiBcIk1pY3Jvc29mdCBFZGdlXCIsIFwiUGhhbnRvbUpTXCIsIFwiU2FmYXJpXCIsIFwiU2VhTW9ua2V5XCIsIFwiU2lsa1wiLFxuICAgICAqIFwiT3BlcmEgTWluaVwiIGFuZCBcIk9wZXJhXCJcbiAgICAgKlxuICAgICAqIE1vYmlsZSB2ZXJzaW9ucyBvZiBzb21lIGJyb3dzZXJzIGhhdmUgXCJNb2JpbGVcIiBhcHBlbmRlZCB0byB0aGVpciBuYW1lOlxuICAgICAqIGVnLiBcIkNocm9tZSBNb2JpbGVcIiwgXCJGaXJlZm94IE1vYmlsZVwiLCBcIklFIE1vYmlsZVwiIGFuZCBcIk9wZXJhIE1vYmlsZVwiXG4gICAgICpcbiAgICAgKiBAbWVtYmVyT2YgcGxhdGZvcm1cbiAgICAgKiBAdHlwZSBzdHJpbmd8bnVsbFxuICAgICAqL1xuICAgIHBsYXRmb3JtLm5hbWUgPSBuYW1lO1xuXG4gICAgLyoqXG4gICAgICogVGhlIGFscGhhL2JldGEgcmVsZWFzZSBpbmRpY2F0b3IuXG4gICAgICpcbiAgICAgKiBAbWVtYmVyT2YgcGxhdGZvcm1cbiAgICAgKiBAdHlwZSBzdHJpbmd8bnVsbFxuICAgICAqL1xuICAgIHBsYXRmb3JtLnByZXJlbGVhc2UgPSBwcmVyZWxlYXNlO1xuXG4gICAgLyoqXG4gICAgICogVGhlIG5hbWUgb2YgdGhlIHByb2R1Y3QgaG9zdGluZyB0aGUgYnJvd3Nlci5cbiAgICAgKlxuICAgICAqIFRoZSBsaXN0IG9mIGNvbW1vbiBwcm9kdWN0cyBpbmNsdWRlOlxuICAgICAqXG4gICAgICogXCJCbGFja0JlcnJ5XCIsIFwiR2FsYXh5IFM0XCIsIFwiTHVtaWFcIiwgXCJpUGFkXCIsIFwiaVBvZFwiLCBcImlQaG9uZVwiLCBcIktpbmRsZVwiLFxuICAgICAqIFwiS2luZGxlIEZpcmVcIiwgXCJOZXh1c1wiLCBcIk5vb2tcIiwgXCJQbGF5Qm9va1wiLCBcIlRvdWNoUGFkXCIgYW5kIFwiVHJhbnNmb3JtZXJcIlxuICAgICAqXG4gICAgICogQG1lbWJlck9mIHBsYXRmb3JtXG4gICAgICogQHR5cGUgc3RyaW5nfG51bGxcbiAgICAgKi9cbiAgICBwbGF0Zm9ybS5wcm9kdWN0ID0gcHJvZHVjdDtcblxuICAgIC8qKlxuICAgICAqIFRoZSBicm93c2VyJ3MgdXNlciBhZ2VudCBzdHJpbmcuXG4gICAgICpcbiAgICAgKiBAbWVtYmVyT2YgcGxhdGZvcm1cbiAgICAgKiBAdHlwZSBzdHJpbmd8bnVsbFxuICAgICAqL1xuICAgIHBsYXRmb3JtLnVhID0gdWE7XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYnJvd3Nlci9lbnZpcm9ubWVudCB2ZXJzaW9uLlxuICAgICAqXG4gICAgICogQG1lbWJlck9mIHBsYXRmb3JtXG4gICAgICogQHR5cGUgc3RyaW5nfG51bGxcbiAgICAgKi9cbiAgICBwbGF0Zm9ybS52ZXJzaW9uID0gbmFtZSAmJiB2ZXJzaW9uO1xuXG4gICAgLyoqXG4gICAgICogVGhlIG5hbWUgb2YgdGhlIG9wZXJhdGluZyBzeXN0ZW0uXG4gICAgICpcbiAgICAgKiBAbWVtYmVyT2YgcGxhdGZvcm1cbiAgICAgKiBAdHlwZSBPYmplY3RcbiAgICAgKi9cbiAgICBwbGF0Zm9ybS5vcyA9IG9zIHx8IHtcblxuICAgICAgLyoqXG4gICAgICAgKiBUaGUgQ1BVIGFyY2hpdGVjdHVyZSB0aGUgT1MgaXMgYnVpbHQgZm9yLlxuICAgICAgICpcbiAgICAgICAqIEBtZW1iZXJPZiBwbGF0Zm9ybS5vc1xuICAgICAgICogQHR5cGUgbnVtYmVyfG51bGxcbiAgICAgICAqL1xuICAgICAgJ2FyY2hpdGVjdHVyZSc6IG51bGwsXG5cbiAgICAgIC8qKlxuICAgICAgICogVGhlIGZhbWlseSBvZiB0aGUgT1MuXG4gICAgICAgKlxuICAgICAgICogQ29tbW9uIHZhbHVlcyBpbmNsdWRlOlxuICAgICAgICogXCJXaW5kb3dzXCIsIFwiV2luZG93cyBTZXJ2ZXIgMjAwOCBSMiAvIDdcIiwgXCJXaW5kb3dzIFNlcnZlciAyMDA4IC8gVmlzdGFcIixcbiAgICAgICAqIFwiV2luZG93cyBYUFwiLCBcIk9TIFhcIiwgXCJVYnVudHVcIiwgXCJEZWJpYW5cIiwgXCJGZWRvcmFcIiwgXCJSZWQgSGF0XCIsIFwiU3VTRVwiLFxuICAgICAgICogXCJBbmRyb2lkXCIsIFwiaU9TXCIgYW5kIFwiV2luZG93cyBQaG9uZVwiXG4gICAgICAgKlxuICAgICAgICogQG1lbWJlck9mIHBsYXRmb3JtLm9zXG4gICAgICAgKiBAdHlwZSBzdHJpbmd8bnVsbFxuICAgICAgICovXG4gICAgICAnZmFtaWx5JzogbnVsbCxcblxuICAgICAgLyoqXG4gICAgICAgKiBUaGUgdmVyc2lvbiBvZiB0aGUgT1MuXG4gICAgICAgKlxuICAgICAgICogQG1lbWJlck9mIHBsYXRmb3JtLm9zXG4gICAgICAgKiBAdHlwZSBzdHJpbmd8bnVsbFxuICAgICAgICovXG4gICAgICAndmVyc2lvbic6IG51bGwsXG5cbiAgICAgIC8qKlxuICAgICAgICogUmV0dXJucyB0aGUgT1Mgc3RyaW5nLlxuICAgICAgICpcbiAgICAgICAqIEBtZW1iZXJPZiBwbGF0Zm9ybS5vc1xuICAgICAgICogQHJldHVybnMge3N0cmluZ30gVGhlIE9TIHN0cmluZy5cbiAgICAgICAqL1xuICAgICAgJ3RvU3RyaW5nJzogZnVuY3Rpb24oKSB7IHJldHVybiAnbnVsbCc7IH1cbiAgICB9O1xuXG4gICAgcGxhdGZvcm0ucGFyc2UgPSBwYXJzZTtcbiAgICBwbGF0Zm9ybS50b1N0cmluZyA9IHRvU3RyaW5nUGxhdGZvcm07XG5cbiAgICBpZiAocGxhdGZvcm0udmVyc2lvbikge1xuICAgICAgZGVzY3JpcHRpb24udW5zaGlmdCh2ZXJzaW9uKTtcbiAgICB9XG4gICAgaWYgKHBsYXRmb3JtLm5hbWUpIHtcbiAgICAgIGRlc2NyaXB0aW9uLnVuc2hpZnQobmFtZSk7XG4gICAgfVxuICAgIGlmIChvcyAmJiBuYW1lICYmICEob3MgPT0gU3RyaW5nKG9zKS5zcGxpdCgnICcpWzBdICYmIChvcyA9PSBuYW1lLnNwbGl0KCcgJylbMF0gfHwgcHJvZHVjdCkpKSB7XG4gICAgICBkZXNjcmlwdGlvbi5wdXNoKHByb2R1Y3QgPyAnKCcgKyBvcyArICcpJyA6ICdvbiAnICsgb3MpO1xuICAgIH1cbiAgICBpZiAoZGVzY3JpcHRpb24ubGVuZ3RoKSB7XG4gICAgICBwbGF0Zm9ybS5kZXNjcmlwdGlvbiA9IGRlc2NyaXB0aW9uLmpvaW4oJyAnKTtcbiAgICB9XG4gICAgcmV0dXJuIHBsYXRmb3JtO1xuICB9XG5cbiAgLyotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovXG5cbiAgLy8gRXhwb3J0IHBsYXRmb3JtLlxuICB2YXIgcGxhdGZvcm0gPSBwYXJzZSgpO1xuXG4gIC8vIFNvbWUgQU1EIGJ1aWxkIG9wdGltaXplcnMsIGxpa2Ugci5qcywgY2hlY2sgZm9yIGNvbmRpdGlvbiBwYXR0ZXJucyBsaWtlIHRoZSBmb2xsb3dpbmc6XG4gIGlmICh0eXBlb2YgZGVmaW5lID09ICdmdW5jdGlvbicgJiYgdHlwZW9mIGRlZmluZS5hbWQgPT0gJ29iamVjdCcgJiYgZGVmaW5lLmFtZCkge1xuICAgIC8vIEV4cG9zZSBwbGF0Zm9ybSBvbiB0aGUgZ2xvYmFsIG9iamVjdCB0byBwcmV2ZW50IGVycm9ycyB3aGVuIHBsYXRmb3JtIGlzXG4gICAgLy8gbG9hZGVkIGJ5IGEgc2NyaXB0IHRhZyBpbiB0aGUgcHJlc2VuY2Ugb2YgYW4gQU1EIGxvYWRlci5cbiAgICAvLyBTZWUgaHR0cDovL3JlcXVpcmVqcy5vcmcvZG9jcy9lcnJvcnMuaHRtbCNtaXNtYXRjaCBmb3IgbW9yZSBkZXRhaWxzLlxuICAgIHJvb3QucGxhdGZvcm0gPSBwbGF0Zm9ybTtcblxuICAgIC8vIERlZmluZSBhcyBhbiBhbm9ueW1vdXMgbW9kdWxlIHNvIHBsYXRmb3JtIGNhbiBiZSBhbGlhc2VkIHRocm91Z2ggcGF0aCBtYXBwaW5nLlxuICAgIGRlZmluZShmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiBwbGF0Zm9ybTtcbiAgICB9KTtcbiAgfVxuICAvLyBDaGVjayBmb3IgYGV4cG9ydHNgIGFmdGVyIGBkZWZpbmVgIGluIGNhc2UgYSBidWlsZCBvcHRpbWl6ZXIgYWRkcyBhbiBgZXhwb3J0c2Agb2JqZWN0LlxuICBlbHNlIGlmIChmcmVlRXhwb3J0cyAmJiBmcmVlTW9kdWxlKSB7XG4gICAgLy8gRXhwb3J0IGZvciBDb21tb25KUyBzdXBwb3J0LlxuICAgIGZvck93bihwbGF0Zm9ybSwgZnVuY3Rpb24odmFsdWUsIGtleSkge1xuICAgICAgZnJlZUV4cG9ydHNba2V5XSA9IHZhbHVlO1xuICAgIH0pO1xuICB9XG4gIGVsc2Uge1xuICAgIC8vIEV4cG9ydCB0byB0aGUgZ2xvYmFsIG9iamVjdC5cbiAgICByb290LnBsYXRmb3JtID0gcGxhdGZvcm07XG4gIH1cbn0uY2FsbCh0aGlzKSk7XG4iLCIndXNlIHN0cmljdCc7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5cbnZhciBfY3JlYXRlQ2xhc3MgPSBmdW5jdGlvbiAoKSB7IGZ1bmN0aW9uIGRlZmluZVByb3BlcnRpZXModGFyZ2V0LCBwcm9wcykgeyBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7IHZhciBkZXNjcmlwdG9yID0gcHJvcHNbaV07IGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IGRlc2NyaXB0b3IuZW51bWVyYWJsZSB8fCBmYWxzZTsgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlOyBpZiAoXCJ2YWx1ZVwiIGluIGRlc2NyaXB0b3IpIGRlc2NyaXB0b3Iud3JpdGFibGUgPSB0cnVlOyBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBkZXNjcmlwdG9yLmtleSwgZGVzY3JpcHRvcik7IH0gfSByZXR1cm4gZnVuY3Rpb24gKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykgeyBpZiAocHJvdG9Qcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpOyBpZiAoc3RhdGljUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTsgcmV0dXJuIENvbnN0cnVjdG9yOyB9OyB9KCk7XG5cbnZhciBfZ2V0ID0gZnVuY3Rpb24gZ2V0KG9iamVjdCwgcHJvcGVydHksIHJlY2VpdmVyKSB7IGlmIChvYmplY3QgPT09IG51bGwpIG9iamVjdCA9IEZ1bmN0aW9uLnByb3RvdHlwZTsgdmFyIGRlc2MgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKG9iamVjdCwgcHJvcGVydHkpOyBpZiAoZGVzYyA9PT0gdW5kZWZpbmVkKSB7IHZhciBwYXJlbnQgPSBPYmplY3QuZ2V0UHJvdG90eXBlT2Yob2JqZWN0KTsgaWYgKHBhcmVudCA9PT0gbnVsbCkgeyByZXR1cm4gdW5kZWZpbmVkOyB9IGVsc2UgeyByZXR1cm4gZ2V0KHBhcmVudCwgcHJvcGVydHksIHJlY2VpdmVyKTsgfSB9IGVsc2UgaWYgKFwidmFsdWVcIiBpbiBkZXNjKSB7IHJldHVybiBkZXNjLnZhbHVlOyB9IGVsc2UgeyB2YXIgZ2V0dGVyID0gZGVzYy5nZXQ7IGlmIChnZXR0ZXIgPT09IHVuZGVmaW5lZCkgeyByZXR1cm4gdW5kZWZpbmVkOyB9IHJldHVybiBnZXR0ZXIuY2FsbChyZWNlaXZlcik7IH0gfTtcblxudmFyIF9ET01FdmVudFN1Ym1vZHVsZSA9IHJlcXVpcmUoJy4vRE9NRXZlbnRTdWJtb2R1bGUnKTtcblxudmFyIF9ET01FdmVudFN1Ym1vZHVsZTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9ET01FdmVudFN1Ym1vZHVsZSk7XG5cbnZhciBfSW5wdXRNb2R1bGUyID0gcmVxdWlyZSgnLi9JbnB1dE1vZHVsZScpO1xuXG52YXIgX0lucHV0TW9kdWxlMyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX0lucHV0TW9kdWxlMik7XG5cbnZhciBfTW90aW9uSW5wdXQgPSByZXF1aXJlKCcuL01vdGlvbklucHV0Jyk7XG5cbnZhciBfTW90aW9uSW5wdXQyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfTW90aW9uSW5wdXQpO1xuXG52YXIgX3BsYXRmb3JtID0gcmVxdWlyZSgncGxhdGZvcm0nKTtcblxudmFyIF9wbGF0Zm9ybTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9wbGF0Zm9ybSk7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cbmZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTsgfSB9XG5cbmZ1bmN0aW9uIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHNlbGYsIGNhbGwpIHsgaWYgKCFzZWxmKSB7IHRocm93IG5ldyBSZWZlcmVuY2VFcnJvcihcInRoaXMgaGFzbid0IGJlZW4gaW5pdGlhbGlzZWQgLSBzdXBlcigpIGhhc24ndCBiZWVuIGNhbGxlZFwiKTsgfSByZXR1cm4gY2FsbCAmJiAodHlwZW9mIGNhbGwgPT09IFwib2JqZWN0XCIgfHwgdHlwZW9mIGNhbGwgPT09IFwiZnVuY3Rpb25cIikgPyBjYWxsIDogc2VsZjsgfVxuXG5mdW5jdGlvbiBfaW5oZXJpdHMoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIHsgaWYgKHR5cGVvZiBzdXBlckNsYXNzICE9PSBcImZ1bmN0aW9uXCIgJiYgc3VwZXJDbGFzcyAhPT0gbnVsbCkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb24sIG5vdCBcIiArIHR5cGVvZiBzdXBlckNsYXNzKTsgfSBzdWJDbGFzcy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ2xhc3MgJiYgc3VwZXJDbGFzcy5wcm90b3R5cGUsIHsgY29uc3RydWN0b3I6IHsgdmFsdWU6IHN1YkNsYXNzLCBlbnVtZXJhYmxlOiBmYWxzZSwgd3JpdGFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSB9IH0pOyBpZiAoc3VwZXJDbGFzcykgT2JqZWN0LnNldFByb3RvdHlwZU9mID8gT2JqZWN0LnNldFByb3RvdHlwZU9mKHN1YkNsYXNzLCBzdXBlckNsYXNzKSA6IHN1YkNsYXNzLl9fcHJvdG9fXyA9IHN1cGVyQ2xhc3M7IH1cblxuLyoqXG4gKiBDb252ZXJ0cyBkZWdyZWVzIHRvIHJhZGlhbnMuXG4gKlxuICogQHBhcmFtIHtudW1iZXJ9IGRlZyAtIEFuZ2xlIGluIGRlZ3JlZXMuXG4gKiBAcmV0dXJuIHtudW1iZXJ9XG4gKi9cbmZ1bmN0aW9uIGRlZ1RvUmFkKGRlZykge1xuICByZXR1cm4gZGVnICogTWF0aC5QSSAvIDE4MDtcbn1cblxuLyoqXG4gKiBDb252ZXJ0cyByYWRpYW5zIHRvIGRlZ3JlZXMuXG4gKlxuICogQHBhcmFtIHtudW1iZXJ9IHJhZCAtIEFuZ2xlIGluIHJhZGlhbnMuXG4gKiBAcmV0dXJuIHtudW1iZXJ9XG4gKi9cbmZ1bmN0aW9uIHJhZFRvRGVnKHJhZCkge1xuICByZXR1cm4gcmFkICogMTgwIC8gTWF0aC5QSTtcbn1cblxuLyoqXG4gKiBOb3JtYWxpemVzIGEgMyB4IDMgbWF0cml4LlxuICpcbiAqIEBwYXJhbSB7bnVtYmVyW119IG0gLSBNYXRyaXggdG8gbm9ybWFsaXplLCByZXByZXNlbnRlZCBieSBhbiBhcnJheSBvZiBsZW5ndGggOS5cbiAqIEByZXR1cm4ge251bWJlcltdfVxuICovXG5mdW5jdGlvbiBub3JtYWxpemUobSkge1xuICB2YXIgZGV0ID0gbVswXSAqIG1bNF0gKiBtWzhdICsgbVsxXSAqIG1bNV0gKiBtWzZdICsgbVsyXSAqIG1bM10gKiBtWzddIC0gbVswXSAqIG1bNV0gKiBtWzddIC0gbVsxXSAqIG1bM10gKiBtWzhdIC0gbVsyXSAqIG1bNF0gKiBtWzZdO1xuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgbS5sZW5ndGg7IGkrKykge1xuICAgIG1baV0gLz0gZGV0O1xuICB9cmV0dXJuIG07XG59XG5cbi8qKlxuICogQ29udmVydHMgYSBFdWxlciBhbmdsZSBgW2FscGhhLCBiZXRhLCBnYW1tYV1gIHRvIHRoZSBXM0Mgc3BlY2lmaWNhdGlvbiwgd2hlcmU6XG4gKiAtIGBhbHBoYWAgaXMgaW4gWzA7ICszNjBbO1xuICogLSBgYmV0YWAgaXMgaW4gWy0xODA7ICsxODBbO1xuICogLSBgZ2FtbWFgIGlzIGluIFstOTA7ICs5MFsuXG4gKlxuICogQHBhcmFtIHtudW1iZXJbXX0gZXVsZXJBbmdsZSAtIEV1bGVyIGFuZ2xlIHRvIHVuaWZ5LCByZXByZXNlbnRlZCBieSBhbiBhcnJheSBvZiBsZW5ndGggMyAoYFthbHBoYSwgYmV0YSwgZ2FtbWFdYCkuXG4gKiBAc2VlIHtAbGluayBodHRwOi8vd3d3LnczLm9yZy9UUi9vcmllbnRhdGlvbi1ldmVudC99XG4gKi9cbmZ1bmN0aW9uIHVuaWZ5KGV1bGVyQW5nbGUpIHtcbiAgLy8gQ2YuIFczQyBzcGVjaWZpY2F0aW9uIChodHRwOi8vdzNjLmdpdGh1Yi5pby9kZXZpY2VvcmllbnRhdGlvbi9zcGVjLXNvdXJjZS1vcmllbnRhdGlvbi5odG1sKVxuICAvLyBhbmQgRXVsZXIgYW5nbGVzIFdpa2lwZWRpYSBwYWdlIChodHRwOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL0V1bGVyX2FuZ2xlcykuXG4gIC8vXG4gIC8vIFczQyBjb252ZW50aW9uOiBUYWl04oCTQnJ5YW4gYW5nbGVzIFotWCctWScnLCB3aGVyZTpcbiAgLy8gICBhbHBoYSBpcyBpbiBbMDsgKzM2MFssXG4gIC8vICAgYmV0YSBpcyBpbiBbLTE4MDsgKzE4MFssXG4gIC8vICAgZ2FtbWEgaXMgaW4gWy05MDsgKzkwWy5cblxuICB2YXIgYWxwaGFJc1ZhbGlkID0gdHlwZW9mIGV1bGVyQW5nbGVbMF0gPT09ICdudW1iZXInO1xuXG4gIHZhciBfYWxwaGEgPSBhbHBoYUlzVmFsaWQgPyBkZWdUb1JhZChldWxlckFuZ2xlWzBdKSA6IDA7XG4gIHZhciBfYmV0YSA9IGRlZ1RvUmFkKGV1bGVyQW5nbGVbMV0pO1xuICB2YXIgX2dhbW1hID0gZGVnVG9SYWQoZXVsZXJBbmdsZVsyXSk7XG5cbiAgdmFyIGNBID0gTWF0aC5jb3MoX2FscGhhKTtcbiAgdmFyIGNCID0gTWF0aC5jb3MoX2JldGEpO1xuICB2YXIgY0cgPSBNYXRoLmNvcyhfZ2FtbWEpO1xuICB2YXIgc0EgPSBNYXRoLnNpbihfYWxwaGEpO1xuICB2YXIgc0IgPSBNYXRoLnNpbihfYmV0YSk7XG4gIHZhciBzRyA9IE1hdGguc2luKF9nYW1tYSk7XG5cbiAgdmFyIGFscGhhID0gdm9pZCAwLFxuICAgICAgYmV0YSA9IHZvaWQgMCxcbiAgICAgIGdhbW1hID0gdm9pZCAwO1xuXG4gIHZhciBtID0gW2NBICogY0cgLSBzQSAqIHNCICogc0csIC1jQiAqIHNBLCBjQSAqIHNHICsgY0cgKiBzQSAqIHNCLCBjRyAqIHNBICsgY0EgKiBzQiAqIHNHLCBjQSAqIGNCLCBzQSAqIHNHIC0gY0EgKiBjRyAqIHNCLCAtY0IgKiBzRywgc0IsIGNCICogY0ddO1xuICBub3JtYWxpemUobSk7XG5cbiAgLy8gU2luY2Ugd2Ugd2FudCBnYW1tYSBpbiBbLTkwOyArOTBbLCBjRyA+PSAwLlxuICBpZiAobVs4XSA+IDApIHtcbiAgICAvLyBDYXNlIDE6IG1bOF0gPiAwIDw9PiBjQiA+IDAgICAgICAgICAgICAgICAgIChhbmQgY0cgIT0gMClcbiAgICAvLyAgICAgICAgICAgICAgICAgIDw9PiBiZXRhIGluIF0tcGkvMjsgK3BpLzJbIChhbmQgY0cgIT0gMClcbiAgICBhbHBoYSA9IE1hdGguYXRhbjIoLW1bMV0sIG1bNF0pO1xuICAgIGJldGEgPSBNYXRoLmFzaW4obVs3XSk7IC8vIGFzaW4gcmV0dXJucyBhIG51bWJlciBiZXR3ZWVuIC1waS8yIGFuZCArcGkvMiA9PiBPS1xuICAgIGdhbW1hID0gTWF0aC5hdGFuMigtbVs2XSwgbVs4XSk7XG4gIH0gZWxzZSBpZiAobVs4XSA8IDApIHtcbiAgICAvLyBDYXNlIDI6IG1bOF0gPCAwIDw9PiBjQiA8IDAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKGFuZCBjRyAhPSAwKVxuICAgIC8vICAgICAgICAgICAgICAgICAgPD0+IGJldGEgaW4gWy1waTsgLXBpLzJbIFUgXStwaS8yOyArcGldIChhbmQgY0cgIT0gMClcblxuICAgIC8vIFNpbmNlIGNCIDwgMCBhbmQgY0IgaXMgaW4gbVsxXSBhbmQgbVs0XSwgdGhlIHBvaW50IGlzIGZsaXBwZWQgYnkgMTgwIGRlZ3JlZXMuXG4gICAgLy8gSGVuY2UsIHdlIGhhdmUgdG8gbXVsdGlwbHkgYm90aCBhcmd1bWVudHMgb2YgYXRhbjIgYnkgLTEgaW4gb3JkZXIgdG8gcmV2ZXJ0XG4gICAgLy8gdGhlIHBvaW50IGluIGl0cyBvcmlnaW5hbCBwb3NpdGlvbiAoPT4gYW5vdGhlciBmbGlwIGJ5IDE4MCBkZWdyZWVzKS5cbiAgICBhbHBoYSA9IE1hdGguYXRhbjIobVsxXSwgLW1bNF0pO1xuICAgIGJldGEgPSAtTWF0aC5hc2luKG1bN10pO1xuICAgIGJldGEgKz0gYmV0YSA+PSAwID8gLU1hdGguUEkgOiBNYXRoLlBJOyAvLyBhc2luIHJldHVybnMgYSBudW1iZXIgYmV0d2VlbiAtcGkvMiBhbmQgcGkvMiA9PiBtYWtlIHN1cmUgYmV0YSBpbiBbLXBpOyAtcGkvMlsgVSBdK3BpLzI7ICtwaV1cbiAgICBnYW1tYSA9IE1hdGguYXRhbjIobVs2XSwgLW1bOF0pOyAvLyBzYW1lIHJlbWFyayBhcyBmb3IgYWxwaGEsIG11bHRpcGxpY2F0aW9uIGJ5IC0xXG4gIH0gZWxzZSB7XG4gICAgLy8gQ2FzZSAzOiBtWzhdID0gMCA8PT4gY0IgPSAwIG9yIGNHID0gMFxuICAgIGlmIChtWzZdID4gMCkge1xuICAgICAgLy8gU3ViY2FzZSAxOiBjRyA9IDAgYW5kIGNCID4gMFxuICAgICAgLy8gICAgICAgICAgICBjRyA9IDAgPD0+IHNHID0gLTEgPD0+IGdhbW1hID0gLXBpLzIgPT4gbVs2XSA9IGNCXG4gICAgICAvLyAgICAgICAgICAgIEhlbmNlLCBtWzZdID4gMCA8PT4gY0IgPiAwIDw9PiBiZXRhIGluIF0tcGkvMjsgK3BpLzJbXG4gICAgICBhbHBoYSA9IE1hdGguYXRhbjIoLW1bMV0sIG1bNF0pO1xuICAgICAgYmV0YSA9IE1hdGguYXNpbihtWzddKTsgLy8gYXNpbiByZXR1cm5zIGEgbnVtYmVyIGJldHdlZW4gLXBpLzIgYW5kICtwaS8yID0+IE9LXG4gICAgICBnYW1tYSA9IC1NYXRoLlBJIC8gMjtcbiAgICB9IGVsc2UgaWYgKG1bNl0gPCAwKSB7XG4gICAgICAvLyBTdWJjYXNlIDI6IGNHID0gMCBhbmQgY0IgPCAwXG4gICAgICAvLyAgICAgICAgICAgIGNHID0gMCA8PT4gc0cgPSAtMSA8PT4gZ2FtbWEgPSAtcGkvMiA9PiBtWzZdID0gY0JcbiAgICAgIC8vICAgICAgICAgICAgSGVuY2UsIG1bNl0gPCAwIDw9PiBjQiA8IDAgPD0+IGJldGEgaW4gWy1waTsgLXBpLzJbIFUgXStwaS8yOyArcGldXG4gICAgICBhbHBoYSA9IE1hdGguYXRhbjIobVsxXSwgLW1bNF0pOyAvLyBzYW1lIHJlbWFyayBhcyBmb3IgYWxwaGEgaW4gYSBjYXNlIGFib3ZlXG4gICAgICBiZXRhID0gLU1hdGguYXNpbihtWzddKTtcbiAgICAgIGJldGEgKz0gYmV0YSA+PSAwID8gLU1hdGguUEkgOiBNYXRoLlBJOyAvLyBhc2luIHJldHVybnMgYSBudW1iZXIgYmV0d2VlbiAtcGkvMiBhbmQgK3BpLzIgPT4gbWFrZSBzdXJlIGJldGEgaW4gWy1waTsgLXBpLzJbIFUgXStwaS8yOyArcGldXG4gICAgICBnYW1tYSA9IC1NYXRoLlBJIC8gMjtcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gU3ViY2FzZSAzOiBjQiA9IDBcbiAgICAgIC8vIEluIHRoZSBjYXNlIHdoZXJlIGNvcyhiZXRhKSA9IDAgKGkuZS4gYmV0YSA9IC1waS8yIG9yIGJldGEgPSBwaS8yKSxcbiAgICAgIC8vIHdlIGhhdmUgdGhlIGdpbWJhbCBsb2NrIHByb2JsZW06IGluIHRoYXQgY29uZmlndXJhdGlvbiwgb25seSB0aGUgYW5nbGVcbiAgICAgIC8vIGFscGhhICsgZ2FtbWEgKGlmIGJldGEgPSArcGkvMikgb3IgYWxwaGEgLSBnYW1tYSAoaWYgYmV0YSA9IC1waS8yKVxuICAgICAgLy8gYXJlIHVuaXF1ZWx5IGRlZmluZWQ6IGFscGhhIGFuZCBnYW1tYSBjYW4gdGFrZSBhbiBpbmZpbml0eSBvZiB2YWx1ZXMuXG4gICAgICAvLyBGb3IgY29udmVuaWVuY2UsIGxldCdzIHNldCBnYW1tYSA9IDAgKGFuZCB0aHVzIHNpbihnYW1tYSkgPSAwKS5cbiAgICAgIC8vIChBcyBhIGNvbnNlcXVlbmNlIG9mIHRoZSBnaW1iYWwgbG9jayBwcm9ibGVtLCB0aGVyZSBpcyBhIGRpc2NvbnRpbnVpdHlcbiAgICAgIC8vIGluIGFscGhhIGFuZCBnYW1tYS4pXG4gICAgICBhbHBoYSA9IE1hdGguYXRhbjIobVszXSwgbVswXSk7XG4gICAgICBiZXRhID0gbVs3XSA+IDAgPyBNYXRoLlBJIC8gMiA6IC1NYXRoLlBJIC8gMjtcbiAgICAgIGdhbW1hID0gMDtcbiAgICB9XG4gIH1cblxuICAvLyBhdGFuMiByZXR1cm5zIGEgbnVtYmVyIGJldHdlZW4gLXBpIGFuZCBwaSA9PiBtYWtlIHN1cmUgdGhhdCBhbHBoYSBpcyBpbiBbMCwgMipwaVsuXG4gIGFscGhhICs9IGFscGhhIDwgMCA/IDIgKiBNYXRoLlBJIDogMDtcblxuICBldWxlckFuZ2xlWzBdID0gYWxwaGFJc1ZhbGlkID8gcmFkVG9EZWcoYWxwaGEpIDogbnVsbDtcbiAgZXVsZXJBbmdsZVsxXSA9IHJhZFRvRGVnKGJldGEpO1xuICBldWxlckFuZ2xlWzJdID0gcmFkVG9EZWcoZ2FtbWEpO1xufVxuXG4vKipcbiAqIENvbnZlcnRzIGEgRXVsZXIgYW5nbGUgYFthbHBoYSwgYmV0YSwgZ2FtbWFdYCB0byBhIEV1bGVyIGFuZ2xlIHdoZXJlOlxuICogLSBgYWxwaGFgIGlzIGluIFswOyArMzYwWztcbiAqIC0gYGJldGFgIGlzIGluIFstOTA7ICs5MFs7XG4gKiAtIGBnYW1tYWAgaXMgaW4gWy0xODA7ICsxODBbLlxuICpcbiAqIEBwYXJhbSB7bnVtYmVyW119IGV1bGVyQW5nbGUgLSBFdWxlciBhbmdsZSB0byBjb252ZXJ0LCByZXByZXNlbnRlZCBieSBhbiBhcnJheSBvZiBsZW5ndGggMyAoYFthbHBoYSwgYmV0YSwgZ2FtbWFdYCkuXG4gKi9cbmZ1bmN0aW9uIHVuaWZ5QWx0KGV1bGVyQW5nbGUpIHtcbiAgLy8gQ29udmVudGlvbiBoZXJlOiBUYWl04oCTQnJ5YW4gYW5nbGVzIFotWCctWScnLCB3aGVyZTpcbiAgLy8gICBhbHBoYSBpcyBpbiBbMDsgKzM2MFssXG4gIC8vICAgYmV0YSBpcyBpbiBbLTkwOyArOTBbLFxuICAvLyAgIGdhbW1hIGlzIGluIFstMTgwOyArMTgwWy5cblxuICB2YXIgYWxwaGFJc1ZhbGlkID0gdHlwZW9mIGV1bGVyQW5nbGVbMF0gPT09ICdudW1iZXInO1xuXG4gIHZhciBfYWxwaGEgPSBhbHBoYUlzVmFsaWQgPyBkZWdUb1JhZChldWxlckFuZ2xlWzBdKSA6IDA7XG4gIHZhciBfYmV0YSA9IGRlZ1RvUmFkKGV1bGVyQW5nbGVbMV0pO1xuICB2YXIgX2dhbW1hID0gZGVnVG9SYWQoZXVsZXJBbmdsZVsyXSk7XG5cbiAgdmFyIGNBID0gTWF0aC5jb3MoX2FscGhhKTtcbiAgdmFyIGNCID0gTWF0aC5jb3MoX2JldGEpO1xuICB2YXIgY0cgPSBNYXRoLmNvcyhfZ2FtbWEpO1xuICB2YXIgc0EgPSBNYXRoLnNpbihfYWxwaGEpO1xuICB2YXIgc0IgPSBNYXRoLnNpbihfYmV0YSk7XG4gIHZhciBzRyA9IE1hdGguc2luKF9nYW1tYSk7XG5cbiAgdmFyIGFscGhhID0gdm9pZCAwLFxuICAgICAgYmV0YSA9IHZvaWQgMCxcbiAgICAgIGdhbW1hID0gdm9pZCAwO1xuXG4gIHZhciBtID0gW2NBICogY0cgLSBzQSAqIHNCICogc0csIC1jQiAqIHNBLCBjQSAqIHNHICsgY0cgKiBzQSAqIHNCLCBjRyAqIHNBICsgY0EgKiBzQiAqIHNHLCBjQSAqIGNCLCBzQSAqIHNHIC0gY0EgKiBjRyAqIHNCLCAtY0IgKiBzRywgc0IsIGNCICogY0ddO1xuICBub3JtYWxpemUobSk7XG5cbiAgYWxwaGEgPSBNYXRoLmF0YW4yKC1tWzFdLCBtWzRdKTtcbiAgYWxwaGEgKz0gYWxwaGEgPCAwID8gMiAqIE1hdGguUEkgOiAwOyAvLyBhdGFuMiByZXR1cm5zIGEgbnVtYmVyIGJldHdlZW4gLXBpIGFuZCArcGkgPT4gbWFrZSBzdXJlIGFscGhhIGlzIGluIFswLCAyKnBpWy5cbiAgYmV0YSA9IE1hdGguYXNpbihtWzddKTsgLy8gYXNpbiByZXR1cm5zIGEgbnVtYmVyIGJldHdlZW4gLXBpLzIgYW5kIHBpLzIgPT4gT0tcbiAgZ2FtbWEgPSBNYXRoLmF0YW4yKC1tWzZdLCBtWzhdKTsgLy8gYXRhbjIgcmV0dXJucyBhIG51bWJlciBiZXR3ZWVuIC1waSBhbmQgK3BpID0+IE9LXG5cbiAgZXVsZXJBbmdsZVswXSA9IGFscGhhSXNWYWxpZCA/IHJhZFRvRGVnKGFscGhhKSA6IG51bGw7XG4gIGV1bGVyQW5nbGVbMV0gPSByYWRUb0RlZyhiZXRhKTtcbiAgZXVsZXJBbmdsZVsyXSA9IHJhZFRvRGVnKGdhbW1hKTtcbn1cblxuLyoqXG4gKiBgRGV2aWNlT3JpZW50YXRpb25Nb2R1bGVgIHNpbmdsZXRvbi5cbiAqIFRoZSBgRGV2aWNlT3JpZW50YXRpb25Nb2R1bGVgIHNpbmdsZXRvbiBwcm92aWRlcyB0aGUgcmF3IHZhbHVlc1xuICogb2YgdGhlIG9yaWVudGF0aW9uIHByb3ZpZGVkIGJ5IHRoZSBgRGV2aWNlTW90aW9uYCBldmVudC5cbiAqIEl0IGFsc28gaW5zdGFudGlhdGUgdGhlIGBPcmllbnRhdGlvbmAgc3VibW9kdWxlIHRoYXQgdW5pZmllcyB0aG9zZVxuICogdmFsdWVzIGFjcm9zcyBwbGF0Zm9ybXMgYnkgbWFraW5nIHRoZW0gY29tcGxpYW50IHdpdGgge0BsaW5rXG4gKiBodHRwOi8vd3d3LnczLm9yZy9UUi9vcmllbnRhdGlvbi1ldmVudC98dGhlIFczQyBzdGFuZGFyZH0gKCppLmUuKlxuICogdGhlIGBhbHBoYWAgYW5nbGUgYmV0d2VlbiBgMGAgYW5kIGAzNjBgIGRlZ3JlZXMsIHRoZSBgYmV0YWAgYW5nbGVcbiAqIGJldHdlZW4gYC0xODBgIGFuZCBgMTgwYCBkZWdyZWVzLCBhbmQgYGdhbW1hYCBiZXR3ZWVuIGAtOTBgIGFuZFxuICogYDkwYCBkZWdyZWVzKSwgYXMgd2VsbCBhcyB0aGUgYE9yaWVudGF0aW9uQWx0YCBzdWJtb2R1bGVzICh3aXRoXG4gKiB0aGUgYGFscGhhYCBhbmdsZSBiZXR3ZWVuIGAwYCBhbmQgYDM2MGAgZGVncmVlcywgdGhlIGBiZXRhYCBhbmdsZVxuICogYmV0d2VlbiBgLTkwYCBhbmQgYDkwYCBkZWdyZWVzLCBhbmQgYGdhbW1hYCBiZXR3ZWVuIGAtMTgwYCBhbmRcbiAqIGAxODBgIGRlZ3JlZXMpLlxuICogV2hlbiB0aGUgYG9yaWVudGF0aW9uYCByYXcgdmFsdWVzIGFyZSBub3QgcHJvdmlkZWQgYnkgdGhlIHNlbnNvcnMsXG4gKiB0aGlzIG1vZHVsZXMgdHJpZXMgdG8gcmVjYWxjdWxhdGUgYGJldGFgIGFuZCBgZ2FtbWFgIGZyb20gdGhlXG4gKiBgQWNjZWxlcmF0aW9uSW5jbHVkaW5nR3Jhdml0eWAgbW9kdWxlLCBpZiBhdmFpbGFibGUgKGluIHRoYXQgY2FzZSxcbiAqIHRoZSBgYWxwaGFgIGFuZ2xlIGlzIGltcG9zc2libGUgdG8gcmV0cmlldmUgc2luY2UgdGhlIGNvbXBhc3MgaXNcbiAqIG5vdCBhdmFpbGFibGUpLlxuICpcbiAqIEBjbGFzcyBEZXZpY2VNb3Rpb25Nb2R1bGVcbiAqIEBleHRlbmRzIElucHV0TW9kdWxlXG4gKi9cblxudmFyIERldmljZU9yaWVudGF0aW9uTW9kdWxlID0gZnVuY3Rpb24gKF9JbnB1dE1vZHVsZSkge1xuICBfaW5oZXJpdHMoRGV2aWNlT3JpZW50YXRpb25Nb2R1bGUsIF9JbnB1dE1vZHVsZSk7XG5cbiAgLyoqXG4gICAqIENyZWF0ZXMgdGhlIGBEZXZpY2VPcmllbnRhdGlvbmAgbW9kdWxlIGluc3RhbmNlLlxuICAgKlxuICAgKiBAY29uc3RydWN0b3JcbiAgICovXG4gIGZ1bmN0aW9uIERldmljZU9yaWVudGF0aW9uTW9kdWxlKCkge1xuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBEZXZpY2VPcmllbnRhdGlvbk1vZHVsZSk7XG5cbiAgICAvKipcbiAgICAgKiBSYXcgdmFsdWVzIGNvbWluZyBmcm9tIHRoZSBgZGV2aWNlb3JpZW50YXRpb25gIGV2ZW50IHNlbnQgYnkgdGhpcyBtb2R1bGUuXG4gICAgICpcbiAgICAgKiBAdGhpcyBEZXZpY2VPcmllbnRhdGlvbk1vZHVsZVxuICAgICAqIEB0eXBlIHtudW1iZXJbXX1cbiAgICAgKiBAZGVmYXVsdCBbbnVsbCwgbnVsbCwgbnVsbF1cbiAgICAgKi9cbiAgICB2YXIgX3RoaXMgPSBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCAoRGV2aWNlT3JpZW50YXRpb25Nb2R1bGUuX19wcm90b19fIHx8IE9iamVjdC5nZXRQcm90b3R5cGVPZihEZXZpY2VPcmllbnRhdGlvbk1vZHVsZSkpLmNhbGwodGhpcywgJ2RldmljZW9yaWVudGF0aW9uJykpO1xuXG4gICAgX3RoaXMuZXZlbnQgPSBbbnVsbCwgbnVsbCwgbnVsbF07XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYE9yaWVudGF0aW9uYCBtb2R1bGUuXG4gICAgICogUHJvdmlkZXMgdW5pZmllZCB2YWx1ZXMgb2YgdGhlIG9yaWVudGF0aW9uIGNvbXBsaWFudCB3aXRoIHtAbGlua1xuICAgICAqIGh0dHA6Ly93d3cudzMub3JnL1RSL29yaWVudGF0aW9uLWV2ZW50L3x0aGUgVzNDIHN0YW5kYXJkfVxuICAgICAqIChgYWxwaGFgIGluIGBbMCwgMzYwXWAsIGJldGEgaW4gYFstMTgwLCArMTgwXWAsIGBnYW1tYWAgaW4gYFstOTAsICs5MF1gKS5cbiAgICAgKlxuICAgICAqIEB0aGlzIERldmljZU9yaWVudGF0aW9uTW9kdWxlXG4gICAgICogQHR5cGUge0RPTUV2ZW50U3VibW9kdWxlfVxuICAgICAqL1xuICAgIF90aGlzLm9yaWVudGF0aW9uID0gbmV3IF9ET01FdmVudFN1Ym1vZHVsZTIuZGVmYXVsdChfdGhpcywgJ29yaWVudGF0aW9uJyk7XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYE9yaWVudGF0aW9uQWx0YCBtb2R1bGUuXG4gICAgICogUHJvdmlkZXMgYWx0ZXJuYXRpdmUgdmFsdWVzIG9mIHRoZSBvcmllbnRhdGlvblxuICAgICAqIChgYWxwaGFgIGluIGBbMCwgMzYwXWAsIGJldGEgaW4gYFstOTAsICs5MF1gLCBgZ2FtbWFgIGluIGBbLTE4MCwgKzE4MF1gKS5cbiAgICAgKlxuICAgICAqIEB0aGlzIERldmljZU9yaWVudGF0aW9uTW9kdWxlXG4gICAgICogQHR5cGUge0RPTUV2ZW50U3VibW9kdWxlfVxuICAgICAqL1xuICAgIF90aGlzLm9yaWVudGF0aW9uQWx0ID0gbmV3IF9ET01FdmVudFN1Ym1vZHVsZTIuZGVmYXVsdChfdGhpcywgJ29yaWVudGF0aW9uQWx0Jyk7XG5cbiAgICAvKipcbiAgICAgKiBSZXF1aXJlZCBzdWJtb2R1bGVzIC8gZXZlbnRzLlxuICAgICAqXG4gICAgICogQHRoaXMgRGV2aWNlT3JpZW50YXRpb25Nb2R1bGVcbiAgICAgKiBAdHlwZSB7b2JqZWN0fVxuICAgICAqIEBwcm9wZXJ0eSB7Ym9vbH0gb3JpZW50YXRpb24gLSBJbmRpY2F0ZXMgd2hldGhlciB0aGUgYG9yaWVudGF0aW9uYCB1bmlmaWVkIHZhbHVlcyBhcmUgcmVxdWlyZWQgb3Igbm90IChkZWZhdWx0cyB0byBgZmFsc2VgKS5cbiAgICAgKiBAcHJvcGVydHkge2Jvb2x9IG9yaWVudGF0aW9uQWx0IC0gSW5kaWNhdGVzIHdoZXRoZXIgdGhlIGBvcmllbnRhdGlvbkFsdGAgdmFsdWVzIGFyZSByZXF1aXJlZCBvciBub3QgKGRlZmF1bHRzIHRvIGBmYWxzZWApLlxuICAgICAqL1xuICAgIF90aGlzLnJlcXVpcmVkID0ge1xuICAgICAgb3JpZW50YXRpb246IGZhbHNlLFxuICAgICAgb3JpZW50YXRpb25BbHQ6IGZhbHNlXG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIFJlc29sdmUgZnVuY3Rpb24gb2YgdGhlIG1vZHVsZSdzIHByb21pc2UuXG4gICAgICpcbiAgICAgKiBAdGhpcyBEZXZpY2VPcmllbnRhdGlvbk1vZHVsZVxuICAgICAqIEB0eXBlIHtmdW5jdGlvbn1cbiAgICAgKiBAZGVmYXVsdCBudWxsXG4gICAgICogQHNlZSBEZXZpY2VPcmllbnRhdGlvbk1vZHVsZSNpbml0XG4gICAgICovXG4gICAgX3RoaXMuX3Byb21pc2VSZXNvbHZlID0gbnVsbDtcblxuICAgIC8qKlxuICAgICAqIEdyYXZpdHkgdmVjdG9yIGNhbGN1bGF0ZWQgZnJvbSB0aGUgYGFjY2VsZXJhdGlvbkluY2x1ZGluZ0dyYXZpdHlgIHVuaWZpZWQgdmFsdWVzLlxuICAgICAqXG4gICAgICogQHRoaXMgRGV2aWNlT3JpZW50YXRpb25Nb2R1bGVcbiAgICAgKiBAdHlwZSB7bnVtYmVyW119XG4gICAgICogQGRlZmF1bHQgWzAsIDAsIDBdXG4gICAgICovXG4gICAgX3RoaXMuX2VzdGltYXRlZEdyYXZpdHkgPSBbMCwgMCwgMF07XG5cbiAgICBfdGhpcy5fcHJvY2Vzc0Z1bmN0aW9uID0gbnVsbDtcbiAgICBfdGhpcy5fcHJvY2VzcyA9IF90aGlzLl9wcm9jZXNzLmJpbmQoX3RoaXMpO1xuICAgIF90aGlzLl9kZXZpY2VvcmllbnRhdGlvbkNoZWNrID0gX3RoaXMuX2RldmljZW9yaWVudGF0aW9uQ2hlY2suYmluZChfdGhpcyk7XG4gICAgX3RoaXMuX2RldmljZW9yaWVudGF0aW9uTGlzdGVuZXIgPSBfdGhpcy5fZGV2aWNlb3JpZW50YXRpb25MaXN0ZW5lci5iaW5kKF90aGlzKTtcbiAgICByZXR1cm4gX3RoaXM7XG4gIH1cblxuICAvKipcbiAgICogU2Vuc29yIGNoZWNrIG9uIGluaXRpYWxpemF0aW9uIG9mIHRoZSBtb2R1bGUuXG4gICAqIFRoaXMgbWV0aG9kOlxuICAgKiAtIGNoZWNrcyB3aGV0aGVyIHRoZSBgb3JpZW50YXRpb25gIHZhbHVlcyBhcmUgdmFsaWQgb3Igbm90O1xuICAgKiAtIChpbiB0aGUgY2FzZSB3aGVyZSBvcmllbnRhdGlvbiByYXcgdmFsdWVzIGFyZSBub3QgcHJvdmlkZWQpXG4gICAqICAgdHJpZXMgdG8gY2FsY3VsYXRlIHRoZSBvcmllbnRhdGlvbiBmcm9tIHRoZVxuICAgKiAgIGBhY2NlbGVyYXRpb25JbmNsdWRpbmdHcmF2aXR5YCB1bmlmaWVkIHZhbHVlcy5cbiAgICpcbiAgICogQHBhcmFtIHtEZXZpY2VNb3Rpb25FdmVudH0gZSAtIEZpcnN0IGAnZGV2aWNlbW90aW9uJ2AgZXZlbnQgY2F1Z2h0LCBvbiB3aGljaCB0aGUgY2hlY2sgaXMgZG9uZS5cbiAgICovXG5cblxuICBfY3JlYXRlQ2xhc3MoRGV2aWNlT3JpZW50YXRpb25Nb2R1bGUsIFt7XG4gICAga2V5OiAnX2RldmljZW9yaWVudGF0aW9uQ2hlY2snLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBfZGV2aWNlb3JpZW50YXRpb25DaGVjayhlKSB7XG4gICAgICAvLyBjbGVhciB0aW1lb3V0IChhbnRpLUZpcmVmb3ggYnVnIHNvbHV0aW9uLCB3aW5kb3cgZXZlbnQgZGV2aWNlb3JpZW50YXRpb24gYmVpbmcgbnZlciBjYWxsZWQpXG4gICAgICAvLyBzZXQgdGhlIHNldCB0aW1lb3V0IGluIGluaXQoKSBmdW5jdGlvblxuICAgICAgY2xlYXJUaW1lb3V0KHRoaXMuX2NoZWNrVGltZW91dElkKTtcblxuICAgICAgdGhpcy5pc1Byb3ZpZGVkID0gdHJ1ZTtcblxuICAgICAgLy8gU2Vuc29yIGF2YWlsYWJpbGl0eSBmb3IgdGhlIG9yaWVudGF0aW9uIGFuZCBhbHRlcm5hdGl2ZSBvcmllbnRhdGlvblxuICAgICAgdmFyIHJhd1ZhbHVlc1Byb3ZpZGVkID0gdHlwZW9mIGUuYWxwaGEgPT09ICdudW1iZXInICYmIHR5cGVvZiBlLmJldGEgPT09ICdudW1iZXInICYmIHR5cGVvZiBlLmdhbW1hID09PSAnbnVtYmVyJztcbiAgICAgIHRoaXMub3JpZW50YXRpb24uaXNQcm92aWRlZCA9IHJhd1ZhbHVlc1Byb3ZpZGVkO1xuICAgICAgdGhpcy5vcmllbnRhdGlvbkFsdC5pc1Byb3ZpZGVkID0gcmF3VmFsdWVzUHJvdmlkZWQ7XG5cbiAgICAgIC8vIFRPRE8oPyk6IGdldCBwc2V1ZG8tcGVyaW9kXG5cbiAgICAgIC8vIHN3YXAgdGhlIHByb2Nlc3MgZnVuY3Rpb24gdG8gdGhlXG4gICAgICB0aGlzLl9wcm9jZXNzRnVuY3Rpb24gPSB0aGlzLl9kZXZpY2VvcmllbnRhdGlvbkxpc3RlbmVyO1xuXG4gICAgICAvLyBJZiBvcmllbnRhdGlvbiBvciBhbHRlcm5hdGl2ZSBvcmllbnRhdGlvbiBhcmUgbm90IHByb3ZpZGVkIGJ5IHJhdyBzZW5zb3JzIGJ1dCByZXF1aXJlZCxcbiAgICAgIC8vIHRyeSB0byBjYWxjdWxhdGUgdGhlbSB3aXRoIGBhY2NlbGVyYXRpb25JbmNsdWRpbmdHcmF2aXR5YCB1bmlmaWVkIHZhbHVlc1xuICAgICAgaWYgKHRoaXMucmVxdWlyZWQub3JpZW50YXRpb24gJiYgIXRoaXMub3JpZW50YXRpb24uaXNQcm92aWRlZCB8fCB0aGlzLnJlcXVpcmVkLm9yaWVudGF0aW9uQWx0ICYmICF0aGlzLm9yaWVudGF0aW9uQWx0LmlzUHJvdmlkZWQpIHRoaXMuX3RyeUFjY2VsZXJhdGlvbkluY2x1ZGluZ0dyYXZpdHlGYWxsYmFjaygpO2Vsc2UgdGhpcy5fcHJvbWlzZVJlc29sdmUodGhpcyk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogYCdkZXZpY2VvcmllbnRhdGlvbidgIGV2ZW50IGNhbGxiYWNrLlxuICAgICAqIFRoaXMgbWV0aG9kIGVtaXRzIGFuIGV2ZW50IHdpdGggdGhlIHJhdyBgJ2RldmljZW9yaWVudGF0aW9uJ2AgdmFsdWVzLFxuICAgICAqIGFuZCBlbWl0cyBldmVudHMgd2l0aCB0aGUgdW5pZmllZCBgb3JpZW50YXRpb25gIGFuZCAvIG9yIHRoZVxuICAgICAqIGBvcmllbnRhdGlvbkFsdGAgdmFsdWVzIGlmIHRoZXkgYXJlIHJlcXVpcmVkLlxuICAgICAqXG4gICAgICogQHBhcmFtIHtEZXZpY2VPcmllbnRhdGlvbkV2ZW50fSBlIC0gYCdkZXZpY2VvcmllbnRhdGlvbidgIGV2ZW50IHRoZSB2YWx1ZXMgYXJlIGNhbGN1bGF0ZWQgZnJvbS5cbiAgICAgKi9cblxuICB9LCB7XG4gICAga2V5OiAnX2RldmljZW9yaWVudGF0aW9uTGlzdGVuZXInLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBfZGV2aWNlb3JpZW50YXRpb25MaXN0ZW5lcihlKSB7XG4gICAgICAvLyAnZGV2aWNlb3JpZW50YXRpb24nIGV2ZW50IChyYXcgdmFsdWVzKVxuICAgICAgdmFyIG91dEV2ZW50ID0gdGhpcy5ldmVudDtcblxuICAgICAgb3V0RXZlbnRbMF0gPSBlLmFscGhhO1xuICAgICAgb3V0RXZlbnRbMV0gPSBlLmJldGE7XG4gICAgICBvdXRFdmVudFsyXSA9IGUuZ2FtbWE7XG5cbiAgICAgIGlmICh0aGlzLmxpc3RlbmVycy5zaXplID4gMCkgdGhpcy5lbWl0KG91dEV2ZW50KTtcblxuICAgICAgLy8gJ29yaWVudGF0aW9uJyBldmVudCAodW5pZmllZCB2YWx1ZXMpXG4gICAgICBpZiAodGhpcy5vcmllbnRhdGlvbi5saXN0ZW5lcnMuc2l6ZSA+IDAgJiYgdGhpcy5yZXF1aXJlZC5vcmllbnRhdGlvbiAmJiB0aGlzLm9yaWVudGF0aW9uLmlzUHJvdmlkZWQpIHtcbiAgICAgICAgLy8gT24gaU9TLCB0aGUgYGFscGhhYCB2YWx1ZSBpcyBpbml0aWFsaXplZCBhdCBgMGAgb24gdGhlIGZpcnN0IGBkZXZpY2VvcmllbnRhdGlvbmAgZXZlbnRcbiAgICAgICAgLy8gc28gd2Uga2VlcCB0aGF0IHJlZmVyZW5jZSBpbiBtZW1vcnkgdG8gY2FsY3VsYXRlIHRoZSBOb3J0aCBsYXRlciBvblxuICAgICAgICBpZiAoIXRoaXMub3JpZW50YXRpb24uX3dlYmtpdENvbXBhc3NIZWFkaW5nUmVmZXJlbmNlICYmIGUud2Via2l0Q29tcGFzc0hlYWRpbmcgJiYgX3BsYXRmb3JtMi5kZWZhdWx0Lm9zLmZhbWlseSA9PT0gJ2lPUycpIHRoaXMub3JpZW50YXRpb24uX3dlYmtpdENvbXBhc3NIZWFkaW5nUmVmZXJlbmNlID0gZS53ZWJraXRDb21wYXNzSGVhZGluZztcblxuICAgICAgICB2YXIgX291dEV2ZW50ID0gdGhpcy5vcmllbnRhdGlvbi5ldmVudDtcblxuICAgICAgICBfb3V0RXZlbnRbMF0gPSBlLmFscGhhO1xuICAgICAgICBfb3V0RXZlbnRbMV0gPSBlLmJldGE7XG4gICAgICAgIF9vdXRFdmVudFsyXSA9IGUuZ2FtbWE7XG5cbiAgICAgICAgLy8gT24gaU9TLCByZXBsYWNlIHRoZSBgYWxwaGFgIHZhbHVlIGJ5IHRoZSBOb3J0aCB2YWx1ZSBhbmQgdW5pZnkgdGhlIGFuZ2xlc1xuICAgICAgICAvLyAodGhlIGRlZmF1bHQgcmVwcmVzZW50YXRpb24gb2YgdGhlIGFuZ2xlcyBvbiBpT1MgaXMgbm90IGNvbXBsaWFudCB3aXRoIHRoZSBXM0Mgc3BlY2lmaWNhdGlvbilcbiAgICAgICAgaWYgKHRoaXMub3JpZW50YXRpb24uX3dlYmtpdENvbXBhc3NIZWFkaW5nUmVmZXJlbmNlICYmIF9wbGF0Zm9ybTIuZGVmYXVsdC5vcy5mYW1pbHkgPT09ICdpT1MnKSB7XG4gICAgICAgICAgX291dEV2ZW50WzBdICs9IDM2MCAtIHRoaXMub3JpZW50YXRpb24uX3dlYmtpdENvbXBhc3NIZWFkaW5nUmVmZXJlbmNlO1xuICAgICAgICAgIHVuaWZ5KF9vdXRFdmVudCk7XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLm9yaWVudGF0aW9uLmVtaXQoX291dEV2ZW50KTtcbiAgICAgIH1cblxuICAgICAgLy8gJ29yaWVudGF0aW9uQWx0JyBldmVudFxuICAgICAgaWYgKHRoaXMub3JpZW50YXRpb25BbHQubGlzdGVuZXJzLnNpemUgPiAwICYmIHRoaXMucmVxdWlyZWQub3JpZW50YXRpb25BbHQgJiYgdGhpcy5vcmllbnRhdGlvbkFsdC5pc1Byb3ZpZGVkKSB7XG4gICAgICAgIC8vIE9uIGlPUywgdGhlIGBhbHBoYWAgdmFsdWUgaXMgaW5pdGlhbGl6ZWQgYXQgYDBgIG9uIHRoZSBmaXJzdCBgZGV2aWNlb3JpZW50YXRpb25gIGV2ZW50XG4gICAgICAgIC8vIHNvIHdlIGtlZXAgdGhhdCByZWZlcmVuY2UgaW4gbWVtb3J5IHRvIGNhbGN1bGF0ZSB0aGUgTm9ydGggbGF0ZXIgb25cbiAgICAgICAgaWYgKCF0aGlzLm9yaWVudGF0aW9uQWx0Ll93ZWJraXRDb21wYXNzSGVhZGluZ1JlZmVyZW5jZSAmJiBlLndlYmtpdENvbXBhc3NIZWFkaW5nICYmIF9wbGF0Zm9ybTIuZGVmYXVsdC5vcy5mYW1pbHkgPT09ICdpT1MnKSB0aGlzLm9yaWVudGF0aW9uQWx0Ll93ZWJraXRDb21wYXNzSGVhZGluZ1JlZmVyZW5jZSA9IGUud2Via2l0Q29tcGFzc0hlYWRpbmc7XG5cbiAgICAgICAgdmFyIF9vdXRFdmVudDIgPSB0aGlzLm9yaWVudGF0aW9uQWx0LmV2ZW50O1xuXG4gICAgICAgIF9vdXRFdmVudDJbMF0gPSBlLmFscGhhO1xuICAgICAgICBfb3V0RXZlbnQyWzFdID0gZS5iZXRhO1xuICAgICAgICBfb3V0RXZlbnQyWzJdID0gZS5nYW1tYTtcblxuICAgICAgICAvLyBPbiBpT1MsIHJlcGxhY2UgdGhlIGBhbHBoYWAgdmFsdWUgYnkgdGhlIE5vcnRoIHZhbHVlIGJ1dCBkbyBub3QgY29udmVydCB0aGUgYW5nbGVzXG4gICAgICAgIC8vICh0aGUgZGVmYXVsdCByZXByZXNlbnRhdGlvbiBvZiB0aGUgYW5nbGVzIG9uIGlPUyBpcyBjb21wbGlhbnQgd2l0aCB0aGUgYWx0ZXJuYXRpdmUgcmVwcmVzZW50YXRpb24pXG4gICAgICAgIGlmICh0aGlzLm9yaWVudGF0aW9uQWx0Ll93ZWJraXRDb21wYXNzSGVhZGluZ1JlZmVyZW5jZSAmJiBfcGxhdGZvcm0yLmRlZmF1bHQub3MuZmFtaWx5ID09PSAnaU9TJykge1xuICAgICAgICAgIF9vdXRFdmVudDJbMF0gLT0gdGhpcy5vcmllbnRhdGlvbkFsdC5fd2Via2l0Q29tcGFzc0hlYWRpbmdSZWZlcmVuY2U7XG4gICAgICAgICAgX291dEV2ZW50MlswXSArPSBfb3V0RXZlbnQyWzBdIDwgMCA/IDM2MCA6IDA7IC8vIG1ha2Ugc3VyZSBgYWxwaGFgIGlzIGluIFswLCArMzYwW1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gT24gQW5kcm9pZCwgdHJhbnNmb3JtIHRoZSBhbmdsZXMgdG8gdGhlIGFsdGVybmF0aXZlIHJlcHJlc2VudGF0aW9uXG4gICAgICAgIC8vICh0aGUgZGVmYXVsdCByZXByZXNlbnRhdGlvbiBvZiB0aGUgYW5nbGVzIG9uIEFuZHJvaWQgaXMgY29tcGxpYW50IHdpdGggdGhlIFczQyBzcGVjaWZpY2F0aW9uKVxuICAgICAgICBpZiAoX3BsYXRmb3JtMi5kZWZhdWx0Lm9zLmZhbWlseSA9PT0gJ0FuZHJvaWQnKSB1bmlmeUFsdChfb3V0RXZlbnQyKTtcblxuICAgICAgICB0aGlzLm9yaWVudGF0aW9uQWx0LmVtaXQoX291dEV2ZW50Mik7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIHdoZXRoZXIgYGJldGFgIGFuZCBgZ2FtbWFgIGNhbiBiZSBjYWxjdWxhdGVkIGZyb20gdGhlIGBhY2NlbGVyYXRpb25JbmNsdWRpbmdHcmF2aXR5YCB2YWx1ZXMgb3Igbm90LlxuICAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6ICdfdHJ5QWNjZWxlcmF0aW9uSW5jbHVkaW5nR3Jhdml0eUZhbGxiYWNrJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gX3RyeUFjY2VsZXJhdGlvbkluY2x1ZGluZ0dyYXZpdHlGYWxsYmFjaygpIHtcbiAgICAgIHZhciBfdGhpczIgPSB0aGlzO1xuXG4gICAgICBfTW90aW9uSW5wdXQyLmRlZmF1bHQucmVxdWlyZU1vZHVsZSgnYWNjZWxlcmF0aW9uSW5jbHVkaW5nR3Jhdml0eScpLnRoZW4oZnVuY3Rpb24gKGFjY2VsZXJhdGlvbkluY2x1ZGluZ0dyYXZpdHkpIHtcbiAgICAgICAgaWYgKGFjY2VsZXJhdGlvbkluY2x1ZGluZ0dyYXZpdHkuaXNWYWxpZCkge1xuICAgICAgICAgIGNvbnNvbGUubG9nKFwiV0FSTklORyAobW90aW9uLWlucHV0KTogVGhlICdkZXZpY2VvcmllbnRhdGlvbicgZXZlbnQgZG9lcyBub3QgZXhpc3Qgb3IgZG9lcyBub3QgcHJvdmlkZSB2YWx1ZXMgaW4geW91ciBicm93c2VyLCBzbyB0aGUgb3JpZW50YXRpb24gb2YgdGhlIGRldmljZSBpcyBlc3RpbWF0ZWQgZnJvbSBEZXZpY2VNb3Rpb24ncyAnYWNjZWxlcmF0aW9uSW5jbHVkaW5nR3Jhdml0eScgZXZlbnQuIFNpbmNlIHRoZSBjb21wYXNzIGlzIG5vdCBhdmFpbGFibGUsIG9ubHkgdGhlIGBiZXRhYCBhbmQgYGdhbW1hYCBhbmdsZXMgYXJlIHByb3ZpZGVkIChgYWxwaGFgIGlzIG51bGwpLlwiKTtcblxuICAgICAgICAgIGlmIChfdGhpczIucmVxdWlyZWQub3JpZW50YXRpb24pIHtcbiAgICAgICAgICAgIF90aGlzMi5vcmllbnRhdGlvbi5pc0NhbGN1bGF0ZWQgPSB0cnVlO1xuICAgICAgICAgICAgX3RoaXMyLm9yaWVudGF0aW9uLnBlcmlvZCA9IGFjY2VsZXJhdGlvbkluY2x1ZGluZ0dyYXZpdHkucGVyaW9kO1xuXG4gICAgICAgICAgICBfTW90aW9uSW5wdXQyLmRlZmF1bHQuYWRkTGlzdGVuZXIoJ2FjY2VsZXJhdGlvbkluY2x1ZGluZ0dyYXZpdHknLCBmdW5jdGlvbiAoYWNjZWxlcmF0aW9uSW5jbHVkaW5nR3Jhdml0eSkge1xuICAgICAgICAgICAgICBfdGhpczIuX2NhbGN1bGF0ZUJldGFBbmRHYW1tYUZyb21BY2NlbGVyYXRpb25JbmNsdWRpbmdHcmF2aXR5KGFjY2VsZXJhdGlvbkluY2x1ZGluZ0dyYXZpdHkpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgaWYgKF90aGlzMi5yZXF1aXJlZC5vcmllbnRhdGlvbkFsdCkge1xuICAgICAgICAgICAgX3RoaXMyLm9yaWVudGF0aW9uQWx0LmlzQ2FsY3VsYXRlZCA9IHRydWU7XG4gICAgICAgICAgICBfdGhpczIub3JpZW50YXRpb25BbHQucGVyaW9kID0gYWNjZWxlcmF0aW9uSW5jbHVkaW5nR3Jhdml0eS5wZXJpb2Q7XG5cbiAgICAgICAgICAgIF9Nb3Rpb25JbnB1dDIuZGVmYXVsdC5hZGRMaXN0ZW5lcignYWNjZWxlcmF0aW9uSW5jbHVkaW5nR3Jhdml0eScsIGZ1bmN0aW9uIChhY2NlbGVyYXRpb25JbmNsdWRpbmdHcmF2aXR5KSB7XG4gICAgICAgICAgICAgIF90aGlzMi5fY2FsY3VsYXRlQmV0YUFuZEdhbW1hRnJvbUFjY2VsZXJhdGlvbkluY2x1ZGluZ0dyYXZpdHkoYWNjZWxlcmF0aW9uSW5jbHVkaW5nR3Jhdml0eSwgdHJ1ZSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBfdGhpczIuX3Byb21pc2VSZXNvbHZlKF90aGlzMik7XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDYWxjdWxhdGVzIGFuZCBlbWl0cyBgYmV0YWAgYW5kIGBnYW1tYWAgdmFsdWVzIGFzIGEgZmFsbGJhY2sgb2YgdGhlIGBvcmllbnRhdGlvbmAgYW5kIC8gb3IgYG9yaWVudGF0aW9uQWx0YCBldmVudHMsIGZyb20gdGhlIGBhY2NlbGVyYXRpb25JbmNsdWRpbmdHcmF2aXR5YCB1bmlmaWVkIHZhbHVlcy5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7bnVtYmVyW119IGFjY2VsZXJhdGlvbkluY2x1ZGluZ0dyYXZpdHkgLSBMYXRlc3QgYGFjY2VsZXJhdGlvbkluY2x1ZGluZ0dyYXZpdHkgcmF3IHZhbHVlcy5cbiAgICAgKiBAcGFyYW0ge2Jvb2x9IFthbHQ9ZmFsc2VdIC0gSW5kaWNhdGVzIHdoZXRoZXIgd2UgbmVlZCB0aGUgYWx0ZXJuYXRlIHJlcHJlc2VudGF0aW9uIG9mIHRoZSBhbmdsZXMgb3Igbm90LlxuICAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6ICdfY2FsY3VsYXRlQmV0YUFuZEdhbW1hRnJvbUFjY2VsZXJhdGlvbkluY2x1ZGluZ0dyYXZpdHknLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBfY2FsY3VsYXRlQmV0YUFuZEdhbW1hRnJvbUFjY2VsZXJhdGlvbkluY2x1ZGluZ0dyYXZpdHkoYWNjZWxlcmF0aW9uSW5jbHVkaW5nR3Jhdml0eSkge1xuICAgICAgdmFyIGFsdCA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDogZmFsc2U7XG5cbiAgICAgIHZhciBrID0gMC44O1xuXG4gICAgICAvLyBMb3cgcGFzcyBmaWx0ZXIgdG8gZXN0aW1hdGUgdGhlIGdyYXZpdHlcbiAgICAgIHRoaXMuX2VzdGltYXRlZEdyYXZpdHlbMF0gPSBrICogdGhpcy5fZXN0aW1hdGVkR3Jhdml0eVswXSArICgxIC0gaykgKiBhY2NlbGVyYXRpb25JbmNsdWRpbmdHcmF2aXR5WzBdO1xuICAgICAgdGhpcy5fZXN0aW1hdGVkR3Jhdml0eVsxXSA9IGsgKiB0aGlzLl9lc3RpbWF0ZWRHcmF2aXR5WzFdICsgKDEgLSBrKSAqIGFjY2VsZXJhdGlvbkluY2x1ZGluZ0dyYXZpdHlbMV07XG4gICAgICB0aGlzLl9lc3RpbWF0ZWRHcmF2aXR5WzJdID0gayAqIHRoaXMuX2VzdGltYXRlZEdyYXZpdHlbMl0gKyAoMSAtIGspICogYWNjZWxlcmF0aW9uSW5jbHVkaW5nR3Jhdml0eVsyXTtcblxuICAgICAgdmFyIF9nWCA9IHRoaXMuX2VzdGltYXRlZEdyYXZpdHlbMF07XG4gICAgICB2YXIgX2dZID0gdGhpcy5fZXN0aW1hdGVkR3Jhdml0eVsxXTtcbiAgICAgIHZhciBfZ1ogPSB0aGlzLl9lc3RpbWF0ZWRHcmF2aXR5WzJdO1xuXG4gICAgICB2YXIgbm9ybSA9IE1hdGguc3FydChfZ1ggKiBfZ1ggKyBfZ1kgKiBfZ1kgKyBfZ1ogKiBfZ1opO1xuXG4gICAgICBfZ1ggLz0gbm9ybTtcbiAgICAgIF9nWSAvPSBub3JtO1xuICAgICAgX2daIC89IG5vcm07XG5cbiAgICAgIC8vIEFkb3B0aW5nIHRoZSBmb2xsb3dpbmcgY29udmVudGlvbnM6XG4gICAgICAvLyAtIGVhY2ggbWF0cml4IG9wZXJhdGVzIGJ5IHByZS1tdWx0aXBseWluZyBjb2x1bW4gdmVjdG9ycyxcbiAgICAgIC8vIC0gZWFjaCBtYXRyaXggcmVwcmVzZW50cyBhbiBhY3RpdmUgcm90YXRpb24sXG4gICAgICAvLyAtIGVhY2ggbWF0cml4IHJlcHJlc2VudHMgdGhlIGNvbXBvc2l0aW9uIG9mIGludHJpbnNpYyByb3RhdGlvbnMsXG4gICAgICAvLyB0aGUgcm90YXRpb24gbWF0cml4IHJlcHJlc2VudGluZyB0aGUgY29tcG9zaXRpb24gb2YgYSByb3RhdGlvblxuICAgICAgLy8gYWJvdXQgdGhlIHgtYXhpcyBieSBhbiBhbmdsZSBiZXRhIGFuZCBhIHJvdGF0aW9uIGFib3V0IHRoZSB5LWF4aXNcbiAgICAgIC8vIGJ5IGFuIGFuZ2xlIGdhbW1hIGlzOlxuICAgICAgLy9cbiAgICAgIC8vIFsgY29zKGdhbW1hKSAgICAgICAgICAgICAgICwgIDAgICAgICAgICAgLCAgc2luKGdhbW1hKSAgICAgICAgICAgICAgLFxuICAgICAgLy8gICBzaW4oYmV0YSkgKiBzaW4oZ2FtbWEpICAgLCAgY29zKGJldGEpICAsICAtY29zKGdhbW1hKSAqIHNpbihiZXRhKSAsXG4gICAgICAvLyAgIC1jb3MoYmV0YSkgKiBzaW4oZ2FtbWEpICAsICBzaW4oYmV0YSkgICwgIGNvcyhiZXRhKSAqIGNvcyhnYW1tYSkgIF0uXG4gICAgICAvL1xuICAgICAgLy8gSGVuY2UsIHRoZSBwcm9qZWN0aW9uIG9mIHRoZSBub3JtYWxpemVkIGdyYXZpdHkgZyA9IFswLCAwLCAxXVxuICAgICAgLy8gaW4gdGhlIGRldmljZSdzIHJlZmVyZW5jZSBmcmFtZSBjb3JyZXNwb25kcyB0bzpcbiAgICAgIC8vXG4gICAgICAvLyBnWCA9IC1jb3MoYmV0YSkgKiBzaW4oZ2FtbWEpLFxuICAgICAgLy8gZ1kgPSBzaW4oYmV0YSksXG4gICAgICAvLyBnWiA9IGNvcyhiZXRhKSAqIGNvcyhnYW1tYSksXG4gICAgICAvL1xuICAgICAgLy8gc28gYmV0YSA9IGFzaW4oZ1kpIGFuZCBnYW1tYSA9IGF0YW4yKC1nWCwgZ1opLlxuXG4gICAgICAvLyBCZXRhICYgZ2FtbWEgZXF1YXRpb25zICh3ZSBhcHByb3hpbWF0ZSBbZ1gsIGdZLCBnWl0gYnkgW19nWCwgX2dZLCBfZ1pdKVxuICAgICAgdmFyIGJldGEgPSByYWRUb0RlZyhNYXRoLmFzaW4oX2dZKSk7IC8vIGJldGEgaXMgaW4gWy1waS8yOyBwaS8yW1xuICAgICAgdmFyIGdhbW1hID0gcmFkVG9EZWcoTWF0aC5hdGFuMigtX2dYLCBfZ1opKTsgLy8gZ2FtbWEgaXMgaW4gWy1waTsgcGlbXG5cbiAgICAgIGlmIChhbHQpIHtcbiAgICAgICAgLy8gSW4gdGhhdCBjYXNlLCB0aGVyZSBpcyBub3RoaW5nIHRvIGRvIHNpbmNlIHRoZSBjYWxjdWxhdGlvbnMgYWJvdmUgZ2F2ZSB0aGUgYW5nbGUgaW4gdGhlIHJpZ2h0IHJhbmdlc1xuICAgICAgICB2YXIgb3V0RXZlbnQgPSB0aGlzLm9yaWVudGF0aW9uQWx0LmV2ZW50O1xuICAgICAgICBvdXRFdmVudFswXSA9IG51bGw7XG4gICAgICAgIG91dEV2ZW50WzFdID0gYmV0YTtcbiAgICAgICAgb3V0RXZlbnRbMl0gPSBnYW1tYTtcblxuICAgICAgICB0aGlzLm9yaWVudGF0aW9uQWx0LmVtaXQob3V0RXZlbnQpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgLy8gSGVyZSB3ZSBoYXZlIHRvIHVuaWZ5IHRoZSBhbmdsZXMgdG8gZ2V0IHRoZSByYW5nZXMgY29tcGxpYW50IHdpdGggdGhlIFczQyBzcGVjaWZpY2F0aW9uXG4gICAgICAgIHZhciBfb3V0RXZlbnQzID0gdGhpcy5vcmllbnRhdGlvbi5ldmVudDtcbiAgICAgICAgX291dEV2ZW50M1swXSA9IG51bGw7XG4gICAgICAgIF9vdXRFdmVudDNbMV0gPSBiZXRhO1xuICAgICAgICBfb3V0RXZlbnQzWzJdID0gZ2FtbWE7XG4gICAgICAgIHVuaWZ5KF9vdXRFdmVudDMpO1xuXG4gICAgICAgIHRoaXMub3JpZW50YXRpb24uZW1pdChfb3V0RXZlbnQzKTtcbiAgICAgIH1cbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6ICdfcHJvY2VzcycsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIF9wcm9jZXNzKGRhdGEpIHtcbiAgICAgIHRoaXMuX3Byb2Nlc3NGdW5jdGlvbihkYXRhKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBJbml0aWFsaXplcyBvZiB0aGUgbW9kdWxlLlxuICAgICAqXG4gICAgICogQHJldHVybiB7UHJvbWlzZX1cbiAgICAgKi9cblxuICB9LCB7XG4gICAga2V5OiAnaW5pdCcsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGluaXQoKSB7XG4gICAgICB2YXIgX3RoaXMzID0gdGhpcztcblxuICAgICAgcmV0dXJuIF9nZXQoRGV2aWNlT3JpZW50YXRpb25Nb2R1bGUucHJvdG90eXBlLl9fcHJvdG9fXyB8fCBPYmplY3QuZ2V0UHJvdG90eXBlT2YoRGV2aWNlT3JpZW50YXRpb25Nb2R1bGUucHJvdG90eXBlKSwgJ2luaXQnLCB0aGlzKS5jYWxsKHRoaXMsIGZ1bmN0aW9uIChyZXNvbHZlKSB7XG4gICAgICAgIF90aGlzMy5fcHJvbWlzZVJlc29sdmUgPSByZXNvbHZlO1xuXG4gICAgICAgIGlmICh3aW5kb3cuRGV2aWNlT3JpZW50YXRpb25FdmVudCkge1xuICAgICAgICAgIF90aGlzMy5fcHJvY2Vzc0Z1bmN0aW9uID0gX3RoaXMzLl9kZXZpY2VvcmllbnRhdGlvbkNoZWNrO1xuICAgICAgICAgIC8vIGZlYXR1cmUgZGV0ZWN0XG4gICAgICAgICAgaWYgKHR5cGVvZiBEZXZpY2VPcmllbnRhdGlvbkV2ZW50LnJlcXVlc3RQZXJtaXNzaW9uID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICBEZXZpY2VPcmllbnRhdGlvbkV2ZW50LnJlcXVlc3RQZXJtaXNzaW9uKCkudGhlbihmdW5jdGlvbiAocGVybWlzc2lvblN0YXRlKSB7XG4gICAgICAgICAgICAgIGlmIChwZXJtaXNzaW9uU3RhdGUgPT09ICdncmFudGVkJykge1xuICAgICAgICAgICAgICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdkZXZpY2VvcmllbnRhdGlvbicsIF90aGlzMy5fcHJvY2VzcywgZmFsc2UpO1xuICAgICAgICAgICAgICAgIC8vIHNldCBmYWxsYmFjayB0aW1lb3V0IGZvciBGaXJlZm94IChpdHMgd2luZG93IG5ldmVyIGNhbGxpbmcgdGhlIERldmljZU9yaWVudGF0aW9uIGV2ZW50LCBhIFxuICAgICAgICAgICAgICAgIC8vIHJlcXVpcmUgb2YgdGhlIERldmljZU9yaWVudGF0aW9uIHNlcnZpY2Ugd2lsbCByZXN1bHQgaW4gdGhlIHJlcXVpcmUgcHJvbWlzZSBuZXZlciBiZWluZyByZXNvbHZlZFxuICAgICAgICAgICAgICAgIC8vIGhlbmNlIHRoZSBFeHBlcmltZW50IHN0YXJ0KCkgbWV0aG9kIG5ldmVyIGNhbGxlZClcbiAgICAgICAgICAgICAgICBfdGhpczMuX2NoZWNrVGltZW91dElkID0gc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICByZXR1cm4gcmVzb2x2ZShfdGhpczMpO1xuICAgICAgICAgICAgICAgIH0sIDUwMCk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pLmNhdGNoKGNvbnNvbGUuZXJyb3IpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAvLyBoYW5kbGUgcmVndWxhciBub24gaU9TIDEzKyBkZXZpY2VzXG4gICAgICAgICAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcignZGV2aWNlb3JpZW50YXRpb24nLCBfdGhpczMuX3Byb2Nlc3MsIGZhbHNlKTtcbiAgICAgICAgICAgIC8vIHNldCBmYWxsYmFjayB0aW1lb3V0IGZvciBGaXJlZm94IChpdHMgd2luZG93IG5ldmVyIGNhbGxpbmcgdGhlIERldmljZU9yaWVudGF0aW9uIGV2ZW50LCBhIFxuICAgICAgICAgICAgLy8gcmVxdWlyZSBvZiB0aGUgRGV2aWNlT3JpZW50YXRpb24gc2VydmljZSB3aWxsIHJlc3VsdCBpbiB0aGUgcmVxdWlyZSBwcm9taXNlIG5ldmVyIGJlaW5nIHJlc29sdmVkXG4gICAgICAgICAgICAvLyBoZW5jZSB0aGUgRXhwZXJpbWVudCBzdGFydCgpIG1ldGhvZCBuZXZlciBjYWxsZWQpXG4gICAgICAgICAgICBfdGhpczMuX2NoZWNrVGltZW91dElkID0gc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgIHJldHVybiByZXNvbHZlKF90aGlzMyk7XG4gICAgICAgICAgICB9LCA1MDApO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIGlmIChfdGhpczMucmVxdWlyZWQub3JpZW50YXRpb24pIHtcbiAgICAgICAgICBfdGhpczMuX3RyeUFjY2VsZXJhdGlvbkluY2x1ZGluZ0dyYXZpdHlGYWxsYmFjaygpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHJlc29sdmUoX3RoaXMzKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfVxuICB9XSk7XG5cbiAgcmV0dXJuIERldmljZU9yaWVudGF0aW9uTW9kdWxlO1xufShfSW5wdXRNb2R1bGUzLmRlZmF1bHQpO1xuXG5leHBvcnRzLmRlZmF1bHQgPSBuZXcgRGV2aWNlT3JpZW50YXRpb25Nb2R1bGUoKTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtjaGFyc2V0PXV0Zi04O2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZ6SWpwYklrUmxkbWxqWlU5eWFXVnVkR0YwYVc5dVRXOWtkV3hsTG1weklsMHNJbTVoYldWeklqcGJJbVJsWjFSdlVtRmtJaXdpWkdWbklpd2lUV0YwYUNJc0lsQkpJaXdpY21Ga1ZHOUVaV2NpTENKeVlXUWlMQ0p1YjNKdFlXeHBlbVVpTENKdElpd2laR1YwSWl3aWFTSXNJbXhsYm1kMGFDSXNJblZ1YVdaNUlpd2laWFZzWlhKQmJtZHNaU0lzSW1Gc2NHaGhTWE5XWVd4cFpDSXNJbDloYkhCb1lTSXNJbDlpWlhSaElpd2lYMmRoYlcxaElpd2lZMEVpTENKamIzTWlMQ0pqUWlJc0ltTkhJaXdpYzBFaUxDSnphVzRpTENKelFpSXNJbk5ISWl3aVlXeHdhR0VpTENKaVpYUmhJaXdpWjJGdGJXRWlMQ0poZEdGdU1pSXNJbUZ6YVc0aUxDSjFibWxtZVVGc2RDSXNJa1JsZG1salpVOXlhV1Z1ZEdGMGFXOXVUVzlrZFd4bElpd2laWFpsYm5RaUxDSnZjbWxsYm5SaGRHbHZiaUlzSW05eWFXVnVkR0YwYVc5dVFXeDBJaXdpY21WeGRXbHlaV1FpTENKZmNISnZiV2x6WlZKbGMyOXNkbVVpTENKZlpYTjBhVzFoZEdWa1IzSmhkbWwwZVNJc0lsOXdjbTlqWlhOelJuVnVZM1JwYjI0aUxDSmZjSEp2WTJWemN5SXNJbUpwYm1RaUxDSmZaR1YyYVdObGIzSnBaVzUwWVhScGIyNURhR1ZqYXlJc0lsOWtaWFpwWTJWdmNtbGxiblJoZEdsdmJreHBjM1JsYm1WeUlpd2laU0lzSW1Oc1pXRnlWR2x0Wlc5MWRDSXNJbDlqYUdWamExUnBiV1Z2ZFhSSlpDSXNJbWx6VUhKdmRtbGtaV1FpTENKeVlYZFdZV3gxWlhOUWNtOTJhV1JsWkNJc0lsOTBjbmxCWTJObGJHVnlZWFJwYjI1SmJtTnNkV1JwYm1kSGNtRjJhWFI1Um1Gc2JHSmhZMnNpTENKdmRYUkZkbVZ1ZENJc0lteHBjM1JsYm1WeWN5SXNJbk5wZW1VaUxDSmxiV2wwSWl3aVgzZGxZbXRwZEVOdmJYQmhjM05JWldGa2FXNW5VbVZtWlhKbGJtTmxJaXdpZDJWaWEybDBRMjl0Y0dGemMwaGxZV1JwYm1jaUxDSnZjeUlzSW1aaGJXbHNlU0lzSW5KbGNYVnBjbVZOYjJSMWJHVWlMQ0owYUdWdUlpd2lZV05qWld4bGNtRjBhVzl1U1c1amJIVmthVzVuUjNKaGRtbDBlU0lzSW1selZtRnNhV1FpTENKamIyNXpiMnhsSWl3aWJHOW5JaXdpYVhORFlXeGpkV3hoZEdWa0lpd2ljR1Z5YVc5a0lpd2lZV1JrVEdsemRHVnVaWElpTENKZlkyRnNZM1ZzWVhSbFFtVjBZVUZ1WkVkaGJXMWhSbkp2YlVGalkyVnNaWEpoZEdsdmJrbHVZMngxWkdsdVowZHlZWFpwZEhraUxDSmhiSFFpTENKcklpd2lYMmRZSWl3aVgyZFpJaXdpWDJkYUlpd2libTl5YlNJc0luTnhjblFpTENKa1lYUmhJaXdpY21WemIyeDJaU0lzSW5kcGJtUnZkeUlzSWtSbGRtbGpaVTl5YVdWdWRHRjBhVzl1UlhabGJuUWlMQ0p5WlhGMVpYTjBVR1Z5YldsemMybHZiaUlzSW5CbGNtMXBjM05wYjI1VGRHRjBaU0lzSW1Ga1pFVjJaVzUwVEdsemRHVnVaWElpTENKelpYUlVhVzFsYjNWMElpd2lZMkYwWTJnaUxDSmxjbkp2Y2lKZExDSnRZWEJ3YVc1bmN5STZJanM3T3pzN096czdPenRCUVVGQk96czdPMEZCUTBFN096czdRVUZEUVRzN096dEJRVU5CT3pzN096czdPenM3T3pzN1FVRkZRVHM3T3pzN08wRkJUVUVzVTBGQlUwRXNVVUZCVkN4RFFVRnJRa01zUjBGQmJFSXNSVUZCZFVJN1FVRkRja0lzVTBGQlQwRXNUVUZCVFVNc1MwRkJTME1zUlVGQldDeEhRVUZuUWl4SFFVRjJRanRCUVVORU96dEJRVVZFT3pzN096czdRVUZOUVN4VFFVRlRReXhSUVVGVUxFTkJRV3RDUXl4SFFVRnNRaXhGUVVGMVFqdEJRVU55UWl4VFFVRlBRU3hOUVVGTkxFZEJRVTRzUjBGQldVZ3NTMEZCUzBNc1JVRkJlRUk3UVVGRFJEczdRVUZGUkRzN096czdPMEZCVFVFc1UwRkJVMGNzVTBGQlZDeERRVUZ0UWtNc1EwRkJia0lzUlVGQmMwSTdRVUZEY0VJc1RVRkJUVU1zVFVGQlRVUXNSVUZCUlN4RFFVRkdMRWxCUVU5QkxFVkJRVVVzUTBGQlJpeERRVUZRTEVkQlFXTkJMRVZCUVVVc1EwRkJSaXhEUVVGa0xFZEJRWEZDUVN4RlFVRkZMRU5CUVVZc1NVRkJUMEVzUlVGQlJTeERRVUZHTEVOQlFWQXNSMEZCWTBFc1JVRkJSU3hEUVVGR0xFTkJRVzVETEVkQlFUQkRRU3hGUVVGRkxFTkJRVVlzU1VGQlQwRXNSVUZCUlN4RFFVRkdMRU5CUVZBc1IwRkJZMEVzUlVGQlJTeERRVUZHTEVOQlFYaEVMRWRCUVN0RVFTeEZRVUZGTEVOQlFVWXNTVUZCVDBFc1JVRkJSU3hEUVVGR0xFTkJRVkFzUjBGQlkwRXNSVUZCUlN4RFFVRkdMRU5CUVRkRkxFZEJRVzlHUVN4RlFVRkZMRU5CUVVZc1NVRkJUMEVzUlVGQlJTeERRVUZHTEVOQlFWQXNSMEZCWTBFc1JVRkJSU3hEUVVGR0xFTkJRV3hITEVkQlFYbEhRU3hGUVVGRkxFTkJRVVlzU1VGQlQwRXNSVUZCUlN4RFFVRkdMRU5CUVZBc1IwRkJZMEVzUlVGQlJTeERRVUZHTEVOQlFXNUpPenRCUVVWQkxFOUJRVXNzU1VGQlNVVXNTVUZCU1N4RFFVRmlMRVZCUVdkQ1FTeEpRVUZKUml4RlFVRkZSeXhOUVVGMFFpeEZRVUU0UWtRc1IwRkJPVUk3UVVGRFJVWXNUVUZCUlVVc1EwRkJSaXhMUVVGUlJDeEhRVUZTTzBGQlJFWXNSMEZIUVN4UFFVRlBSQ3hEUVVGUU8wRkJRMFE3TzBGQlJVUTdPenM3T3pzN096dEJRVk5CTEZOQlFWTkpMRXRCUVZRc1EwRkJaVU1zVlVGQlppeEZRVUV5UWp0QlFVTjZRanRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVRzN1FVRkZRU3hOUVVGTlF5eGxRVUZuUWl4UFFVRlBSQ3hYUVVGWExFTkJRVmdzUTBGQlVDeExRVUY1UWl4UlFVRXZRenM3UVVGRlFTeE5RVUZOUlN4VFFVRlZSQ3hsUVVGbFlpeFRRVUZUV1N4WFFVRlhMRU5CUVZnc1EwRkJWQ3hEUVVGbUxFZEJRWGxETEVOQlFYcEVPMEZCUTBFc1RVRkJUVWNzVVVGQlVXWXNVMEZCVTFrc1YwRkJWeXhEUVVGWUxFTkJRVlFzUTBGQlpEdEJRVU5CTEUxQlFVMUpMRk5CUVZOb1FpeFRRVUZUV1N4WFFVRlhMRU5CUVZnc1EwRkJWQ3hEUVVGbU96dEJRVVZCTEUxQlFVMUxMRXRCUVV0bUxFdEJRVXRuUWl4SFFVRk1MRU5CUVZOS0xFMUJRVlFzUTBGQldEdEJRVU5CTEUxQlFVMUxMRXRCUVV0cVFpeExRVUZMWjBJc1IwRkJUQ3hEUVVGVFNDeExRVUZVTEVOQlFWZzdRVUZEUVN4TlFVRk5TeXhMUVVGTGJFSXNTMEZCUzJkQ0xFZEJRVXdzUTBGQlUwWXNUVUZCVkN4RFFVRllPMEZCUTBFc1RVRkJUVXNzUzBGQlMyNUNMRXRCUVV0dlFpeEhRVUZNTEVOQlFWTlNMRTFCUVZRc1EwRkJXRHRCUVVOQkxFMUJRVTFUTEV0QlFVdHlRaXhMUVVGTGIwSXNSMEZCVEN4RFFVRlRVQ3hMUVVGVUxFTkJRVmc3UVVGRFFTeE5RVUZOVXl4TFFVRkxkRUlzUzBGQlMyOUNMRWRCUVV3c1EwRkJVMDRzVFVGQlZDeERRVUZZT3p0QlFVVkJMRTFCUVVsVExHTkJRVW83UVVGQlFTeE5RVUZYUXl4aFFVRllPMEZCUVVFc1RVRkJhVUpETEdOQlFXcENPenRCUVVWQkxFMUJRVWx3UWl4SlFVRkpMRU5CUTA1VkxFdEJRVXRITEVWQlFVd3NSMEZCVlVNc1MwRkJTMFVzUlVGQlRDeEhRVUZWUXl4RlFVUmtMRVZCUlU0c1EwRkJRMHdzUlVGQlJDeEhRVUZOUlN4RlFVWkJMRVZCUjA1S0xFdEJRVXRQTEVWQlFVd3NSMEZCVlVvc1MwRkJTME1zUlVGQlRDeEhRVUZWUlN4RlFVaGtMRVZCU1U1SUxFdEJRVXRETEVWQlFVd3NSMEZCVlVvc1MwRkJTMDBzUlVGQlRDeEhRVUZWUXl4RlFVcGtMRVZCUzA1UUxFdEJRVXRGTEVWQlRFTXNSVUZOVGtVc1MwRkJTMGNzUlVGQlRDeEhRVUZWVUN4TFFVRkxSeXhGUVVGTUxFZEJRVlZITEVWQlRtUXNSVUZQVGl4RFFVRkRTaXhGUVVGRUxFZEJRVTFMTEVWQlVFRXNSVUZSVGtRc1JVRlNUU3hGUVZOT1NpeExRVUZMUXl4RlFWUkRMRU5CUVZJN1FVRlhRV1FzV1VGQlZVTXNRMEZCVmpzN1FVRkZRVHRCUVVOQkxFMUJRVWxCTEVWQlFVVXNRMEZCUml4SlFVRlBMRU5CUVZnc1JVRkJZenRCUVVOYU8wRkJRMEU3UVVGRFFXdENMRmxCUVZGMlFpeExRVUZMTUVJc1MwRkJUQ3hEUVVGWExFTkJRVU55UWl4RlFVRkZMRU5CUVVZc1EwRkJXaXhGUVVGclFrRXNSVUZCUlN4RFFVRkdMRU5CUVd4Q0xFTkJRVkk3UVVGRFFXMUNMRmRCUVU5NFFpeExRVUZMTWtJc1NVRkJUQ3hEUVVGVmRFSXNSVUZCUlN4RFFVRkdMRU5CUVZZc1EwRkJVQ3hEUVVwWkxFTkJTVms3UVVGRGVFSnZRaXhaUVVGUmVrSXNTMEZCU3pCQ0xFdEJRVXdzUTBGQlZ5eERRVUZEY2tJc1JVRkJSU3hEUVVGR0xFTkJRVm9zUlVGQmEwSkJMRVZCUVVVc1EwRkJSaXhEUVVGc1FpeERRVUZTTzBGQlEwUXNSMEZPUkN4TlFVMVBMRWxCUVVsQkxFVkJRVVVzUTBGQlJpeEpRVUZQTEVOQlFWZ3NSVUZCWXp0QlFVTnVRanRCUVVOQk96dEJRVVZCTzBGQlEwRTdRVUZEUVR0QlFVTkJhMElzV1VGQlVYWkNMRXRCUVVzd1FpeExRVUZNTEVOQlFWZHlRaXhGUVVGRkxFTkJRVVlzUTBGQldDeEZRVUZwUWl4RFFVRkRRU3hGUVVGRkxFTkJRVVlzUTBGQmJFSXNRMEZCVWp0QlFVTkJiVUlzVjBGQlR5eERRVUZEZUVJc1MwRkJTekpDTEVsQlFVd3NRMEZCVlhSQ0xFVkJRVVVzUTBGQlJpeERRVUZXTEVOQlFWSTdRVUZEUVcxQ0xGbEJRVk5CTEZGQlFWRXNRMEZCVkN4SFFVRmpMRU5CUVVONFFpeExRVUZMUXl4RlFVRndRaXhIUVVGNVFrUXNTMEZCUzBNc1JVRkJkRU1zUTBGVWJVSXNRMEZUZFVJN1FVRkRNVU4zUWl4WlFVRlJla0lzUzBGQlN6QkNMRXRCUVV3c1EwRkJWM0pDTEVWQlFVVXNRMEZCUml4RFFVRllMRVZCUVdsQ0xFTkJRVU5CTEVWQlFVVXNRMEZCUml4RFFVRnNRaXhEUVVGU0xFTkJWbTFDTEVOQlZXTTdRVUZEYkVNc1IwRllUU3hOUVZkQk8wRkJRMHc3UVVGRFFTeFJRVUZKUVN4RlFVRkZMRU5CUVVZc1NVRkJUeXhEUVVGWUxFVkJRV003UVVGRFdqdEJRVU5CTzBGQlEwRTdRVUZEUVd0Q0xHTkJRVkYyUWl4TFFVRkxNRUlzUzBGQlRDeERRVUZYTEVOQlFVTnlRaXhGUVVGRkxFTkJRVVlzUTBGQldpeEZRVUZyUWtFc1JVRkJSU3hEUVVGR0xFTkJRV3hDTEVOQlFWSTdRVUZEUVcxQ0xHRkJRVTk0UWl4TFFVRkxNa0lzU1VGQlRDeERRVUZWZEVJc1JVRkJSU3hEUVVGR0xFTkJRVllzUTBGQlVDeERRVXhaTEVOQlMxazdRVUZEZUVKdlFpeGpRVUZSTEVOQlFVTjZRaXhMUVVGTFF5eEZRVUZPTEVkQlFWY3NRMEZCYmtJN1FVRkRSQ3hMUVZCRUxFMUJUMDhzU1VGQlNVa3NSVUZCUlN4RFFVRkdMRWxCUVU4c1EwRkJXQ3hGUVVGak8wRkJRMjVDTzBGQlEwRTdRVUZEUVR0QlFVTkJhMElzWTBGQlVYWkNMRXRCUVVzd1FpeExRVUZNTEVOQlFWZHlRaXhGUVVGRkxFTkJRVVlzUTBGQldDeEZRVUZwUWl4RFFVRkRRU3hGUVVGRkxFTkJRVVlzUTBGQmJFSXNRMEZCVWl4RFFVcHRRaXhEUVVsak8wRkJRMnBEYlVJc1lVRkJUeXhEUVVGRGVFSXNTMEZCU3pKQ0xFbEJRVXdzUTBGQlZYUkNMRVZCUVVVc1EwRkJSaXhEUVVGV0xFTkJRVkk3UVVGRFFXMUNMR05CUVZOQkxGRkJRVkVzUTBGQlZDeEhRVUZqTEVOQlFVTjRRaXhMUVVGTFF5eEZRVUZ3UWl4SFFVRjVRa1FzUzBGQlMwTXNSVUZCZEVNc1EwRk9iVUlzUTBGTmRVSTdRVUZETVVOM1FpeGpRVUZSTEVOQlFVTjZRaXhMUVVGTFF5eEZRVUZPTEVkQlFWY3NRMEZCYmtJN1FVRkRSQ3hMUVZKTkxFMUJVVUU3UVVGRFREdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEZ6UWl4alFVRlJka0lzUzBGQlN6QkNMRXRCUVV3c1EwRkJWM0pDTEVWQlFVVXNRMEZCUml4RFFVRllMRVZCUVdsQ1FTeEZRVUZGTEVOQlFVWXNRMEZCYWtJc1EwRkJVanRCUVVOQmJVSXNZVUZCVVc1Q0xFVkJRVVVzUTBGQlJpeEpRVUZQTEVOQlFWSXNSMEZCWVV3c1MwRkJTME1zUlVGQlRDeEhRVUZWTEVOQlFYWkNMRWRCUVRKQ0xFTkJRVU5FTEV0QlFVdERMRVZCUVU0c1IwRkJWeXhEUVVFM1F6dEJRVU5CZDBJc1kwRkJVU3hEUVVGU08wRkJRMFE3UVVGRFJqczdRVUZGUkR0QlFVTkJSaXhYUVVGVlFTeFJRVUZSTEVOQlFWUXNSMEZCWXl4SlFVRkpka0lzUzBGQlMwTXNSVUZCZGtJc1IwRkJORUlzUTBGQmNrTTdPMEZCUlVGVExHRkJRVmNzUTBGQldDeEpRVUZwUWtNc1pVRkJaVlFzVTBGQlUzRkNMRXRCUVZRc1EwRkJaaXhIUVVGcFF5eEpRVUZzUkR0QlFVTkJZaXhoUVVGWExFTkJRVmdzU1VGQlowSlNMRk5CUVZOelFpeEpRVUZVTEVOQlFXaENPMEZCUTBGa0xHRkJRVmNzUTBGQldDeEpRVUZuUWxJc1UwRkJVM1ZDTEV0QlFWUXNRMEZCYUVJN1FVRkRSRHM3UVVGRlJEczdPenM3T3pzN1FVRlJRU3hUUVVGVFJ5eFJRVUZVTEVOQlFXdENiRUlzVlVGQmJFSXNSVUZCT0VJN1FVRkROVUk3UVVGRFFUdEJRVU5CTzBGQlEwRTdPMEZCUlVFc1RVRkJUVU1zWlVGQlowSXNUMEZCVDBRc1YwRkJWeXhEUVVGWUxFTkJRVkFzUzBGQmVVSXNVVUZCTDBNN08wRkJSVUVzVFVGQlRVVXNVMEZCVlVRc1pVRkJaV0lzVTBGQlUxa3NWMEZCVnl4RFFVRllMRU5CUVZRc1EwRkJaaXhIUVVGNVF5eERRVUY2UkR0QlFVTkJMRTFCUVUxSExGRkJRVkZtTEZOQlFWTlpMRmRCUVZjc1EwRkJXQ3hEUVVGVUxFTkJRV1E3UVVGRFFTeE5RVUZOU1N4VFFVRlRhRUlzVTBGQlUxa3NWMEZCVnl4RFFVRllMRU5CUVZRc1EwRkJaanM3UVVGRlFTeE5RVUZOU3l4TFFVRkxaaXhMUVVGTFowSXNSMEZCVEN4RFFVRlRTaXhOUVVGVUxFTkJRVmc3UVVGRFFTeE5RVUZOU3l4TFFVRkxha0lzUzBGQlMyZENMRWRCUVV3c1EwRkJVMGdzUzBGQlZDeERRVUZZTzBGQlEwRXNUVUZCVFVzc1MwRkJTMnhDTEV0QlFVdG5RaXhIUVVGTUxFTkJRVk5HTEUxQlFWUXNRMEZCV0R0QlFVTkJMRTFCUVUxTExFdEJRVXR1UWl4TFFVRkxiMElzUjBGQlRDeERRVUZUVWl4TlFVRlVMRU5CUVZnN1FVRkRRU3hOUVVGTlV5eExRVUZMY2tJc1MwRkJTMjlDTEVkQlFVd3NRMEZCVTFBc1MwRkJWQ3hEUVVGWU8wRkJRMEVzVFVGQlRWTXNTMEZCUzNSQ0xFdEJRVXR2UWl4SFFVRk1MRU5CUVZOT0xFMUJRVlFzUTBGQldEczdRVUZGUVN4TlFVRkpVeXhqUVVGS08wRkJRVUVzVFVGQlYwTXNZVUZCV0R0QlFVRkJMRTFCUVdsQ1F5eGpRVUZxUWpzN1FVRkZRU3hOUVVGSmNFSXNTVUZCU1N4RFFVTk9WU3hMUVVGTFJ5eEZRVUZNTEVkQlFWVkRMRXRCUVV0RkxFVkJRVXdzUjBGQlZVTXNSVUZFWkN4RlFVVk9MRU5CUVVOTUxFVkJRVVFzUjBGQlRVVXNSVUZHUVN4RlFVZE9TaXhMUVVGTFR5eEZRVUZNTEVkQlFWVktMRXRCUVV0RExFVkJRVXdzUjBGQlZVVXNSVUZJWkN4RlFVbE9TQ3hMUVVGTFF5eEZRVUZNTEVkQlFWVktMRXRCUVV0TkxFVkJRVXdzUjBGQlZVTXNSVUZLWkN4RlFVdE9VQ3hMUVVGTFJTeEZRVXhETEVWQlRVNUZMRXRCUVV0SExFVkJRVXdzUjBGQlZWQXNTMEZCUzBjc1JVRkJUQ3hIUVVGVlJ5eEZRVTVrTEVWQlQwNHNRMEZCUTBvc1JVRkJSQ3hIUVVGTlN5eEZRVkJCTEVWQlVVNUVMRVZCVWswc1JVRlRUa29zUzBGQlMwTXNSVUZVUXl4RFFVRlNPMEZCVjBGa0xGbEJRVlZETEVOQlFWWTdPMEZCUlVGclFpeFZRVUZSZGtJc1MwRkJTekJDTEV0QlFVd3NRMEZCVnl4RFFVRkRja0lzUlVGQlJTeERRVUZHTEVOQlFWb3NSVUZCYTBKQkxFVkJRVVVzUTBGQlJpeERRVUZzUWl4RFFVRlNPMEZCUTBGclFpeFhRVUZWUVN4UlFVRlJMRU5CUVZRc1IwRkJZeXhKUVVGSmRrSXNTMEZCUzBNc1JVRkJka0lzUjBGQk5FSXNRMEZCY2tNc1EwRnVRelJDTEVOQmJVTlpPMEZCUTNoRGRVSXNVMEZCVDNoQ0xFdEJRVXN5UWl4SlFVRk1MRU5CUVZWMFFpeEZRVUZGTEVOQlFVWXNRMEZCVml4RFFVRlFMRU5CY0VNMFFpeERRVzlEU2p0QlFVTjRRbTlDTEZWQlFWRjZRaXhMUVVGTE1FSXNTMEZCVEN4RFFVRlhMRU5CUVVOeVFpeEZRVUZGTEVOQlFVWXNRMEZCV2l4RlFVRnJRa0VzUlVGQlJTeERRVUZHTEVOQlFXeENMRU5CUVZJc1EwRnlRelJDTEVOQmNVTkxPenRCUVVWcVEwc3NZVUZCVnl4RFFVRllMRWxCUVdsQ1F5eGxRVUZsVkN4VFFVRlRjVUlzUzBGQlZDeERRVUZtTEVkQlFXbERMRWxCUVd4RU8wRkJRMEZpTEdGQlFWY3NRMEZCV0N4SlFVRm5RbElzVTBGQlUzTkNMRWxCUVZRc1EwRkJhRUk3UVVGRFFXUXNZVUZCVnl4RFFVRllMRWxCUVdkQ1VpeFRRVUZUZFVJc1MwRkJWQ3hEUVVGb1FqdEJRVU5FT3p0QlFVVkVPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3p0SlFYTkNUVWtzZFVJN096dEJRVVZLT3pzN096dEJRVXRCTEhGRFFVRmpPMEZCUVVFN08wRkJSMW83T3pzN096czdRVUZJV1N4clNrRkRUaXh0UWtGRVRUczdRVUZWV2l4VlFVRkxReXhMUVVGTUxFZEJRV0VzUTBGQlF5eEpRVUZFTEVWQlFVOHNTVUZCVUN4RlFVRmhMRWxCUVdJc1EwRkJZanM3UVVGRlFUczdPenM3T3pzN08wRkJVMEVzVlVGQlMwTXNWMEZCVEN4SFFVRnRRaXgxUTBGQk5FSXNZVUZCTlVJc1EwRkJia0k3TzBGQlJVRTdPenM3T3pzN08wRkJVVUVzVlVGQlMwTXNZMEZCVEN4SFFVRnpRaXgxUTBGQk5FSXNaMEpCUVRWQ0xFTkJRWFJDT3p0QlFVVkJPenM3T3pzN096dEJRVkZCTEZWQlFVdERMRkZCUVV3c1IwRkJaMEk3UVVGRFpFWXNiVUpCUVdFc1MwRkVRenRCUVVWa1F5eHpRa0ZCWjBJN1FVRkdSaXhMUVVGb1FqczdRVUZMUVRzN096czdPenM3UVVGUlFTeFZRVUZMUlN4bFFVRk1MRWRCUVhWQ0xFbEJRWFpDT3p0QlFVVkJPenM3T3pzN08wRkJUMEVzVlVGQlMwTXNhVUpCUVV3c1IwRkJlVUlzUTBGQlF5eERRVUZFTEVWQlFVa3NRMEZCU2l4RlFVRlBMRU5CUVZBc1EwRkJla0k3TzBGQlJVRXNWVUZCUzBNc1owSkJRVXdzUjBGQmQwSXNTVUZCZUVJN1FVRkRRU3hWUVVGTFF5eFJRVUZNTEVkQlFXZENMRTFCUVV0QkxGRkJRVXdzUTBGQlkwTXNTVUZCWkN4UFFVRm9RanRCUVVOQkxGVkJRVXRETEhWQ1FVRk1MRWRCUVN0Q0xFMUJRVXRCTEhWQ1FVRk1MRU5CUVRaQ1JDeEpRVUUzUWl4UFFVRXZRanRCUVVOQkxGVkJRVXRGTERCQ1FVRk1MRWRCUVd0RExFMUJRVXRCTERCQ1FVRk1MRU5CUVdkRFJpeEpRVUZvUXl4UFFVRnNRenRCUVhCRldUdEJRWEZGWWpzN1FVRkZSRHM3T3pzN096czdPenM3T3pzN05FTkJWWGRDUnl4RExFVkJRVWM3UVVGRGVrSTdRVUZEUVR0QlFVTkJReXh0UWtGQllTeExRVUZMUXl4bFFVRnNRanM3UVVGRlFTeFhRVUZMUXl4VlFVRk1MRWRCUVd0Q0xFbEJRV3hDT3p0QlFVVkJPMEZCUTBFc1ZVRkJUVU1zYjBKQlFYTkNMRTlCUVU5S0xFVkJRVVZzUWl4TFFVRlVMRXRCUVcxQ0xGRkJRWEJDTEVsQlFXdERMRTlCUVU5clFpeEZRVUZGYWtJc1NVRkJWQ3hMUVVGclFpeFJRVUZ3UkN4SlFVRnJSU3hQUVVGUGFVSXNSVUZCUldoQ0xFdEJRVlFzUzBGQmJVSXNVVUZCYUVnN1FVRkRRU3hYUVVGTFRTeFhRVUZNTEVOQlFXbENZU3hWUVVGcVFpeEhRVUU0UWtNc2FVSkJRVGxDTzBGQlEwRXNWMEZCUzJJc1kwRkJUQ3hEUVVGdlFsa3NWVUZCY0VJc1IwRkJhVU5ETEdsQ1FVRnFRenM3UVVGRlFUczdRVUZGUVR0QlFVTkJMRmRCUVV0VUxHZENRVUZNTEVkQlFYZENMRXRCUVV0SkxEQkNRVUUzUWpzN1FVRkZRVHRCUVVOQk8wRkJRMEVzVlVGQlN5eExRVUZMVUN4UlFVRk1MRU5CUVdOR0xGZEJRV1FzU1VGQk5rSXNRMEZCUXl4TFFVRkxRU3hYUVVGTUxFTkJRV2xDWVN4VlFVRm9SQ3hKUVVGblJTeExRVUZMV0N4UlFVRk1MRU5CUVdORUxHTkJRV1FzU1VGQlowTXNRMEZCUXl4TFFVRkxRU3hqUVVGTUxFTkJRVzlDV1N4VlFVRjZTQ3hGUVVORkxFdEJRVXRGTEhkRFFVRk1MRWRCUkVZc1MwRkhSU3hMUVVGTFdpeGxRVUZNTEVOQlFYRkNMRWxCUVhKQ08wRkJRMGc3TzBGQlJVUTdPenM3T3pzN096czdPeXREUVZFeVFrOHNReXhGUVVGSE8wRkJRelZDTzBGQlEwRXNWVUZCU1Uwc1YwRkJWeXhMUVVGTGFrSXNTMEZCY0VJN08wRkJSVUZwUWl4bFFVRlRMRU5CUVZRc1NVRkJZMDRzUlVGQlJXeENMRXRCUVdoQ08wRkJRMEYzUWl4bFFVRlRMRU5CUVZRc1NVRkJZMDRzUlVGQlJXcENMRWxCUVdoQ08wRkJRMEYxUWl4bFFVRlRMRU5CUVZRc1NVRkJZMDRzUlVGQlJXaENMRXRCUVdoQ096dEJRVVZCTEZWQlFVa3NTMEZCUzNWQ0xGTkJRVXdzUTBGQlpVTXNTVUZCWml4SFFVRnpRaXhEUVVFeFFpeEZRVU5GTEV0QlFVdERMRWxCUVV3c1EwRkJWVWdzVVVGQlZqczdRVUZGUmp0QlFVTkJMRlZCUVVrc1MwRkJTMmhDTEZkQlFVd3NRMEZCYVVKcFFpeFRRVUZxUWl4RFFVRXlRa01zU1VGQk0wSXNSMEZCYTBNc1EwRkJiRU1zU1VGRFFTeExRVUZMYUVJc1VVRkJUQ3hEUVVGalJpeFhRVVJrTEVsQlJVRXNTMEZCUzBFc1YwRkJUQ3hEUVVGcFFtRXNWVUZHY2tJc1JVRkhSVHRCUVVOQk8wRkJRMEU3UVVGRFFTeFpRVUZKTEVOQlFVTXNTMEZCUzJJc1YwRkJUQ3hEUVVGcFFtOUNMRGhDUVVGc1FpeEpRVUZ2UkZZc1JVRkJSVmNzYjBKQlFYUkVMRWxCUVRoRkxHMUNRVUZUUXl4RlFVRlVMRU5CUVZsRExFMUJRVm9zUzBGQmRVSXNTMEZCZWtjc1JVRkRSU3hMUVVGTGRrSXNWMEZCVEN4RFFVRnBRbTlDTERoQ1FVRnFRaXhIUVVGclJGWXNSVUZCUlZjc2IwSkJRWEJFT3p0QlFVVkdMRmxCUVVsTUxGbEJRVmNzUzBGQlMyaENMRmRCUVV3c1EwRkJhVUpFTEV0QlFXaERPenRCUVVWQmFVSXNhMEpCUVZNc1EwRkJWQ3hKUVVGalRpeEZRVUZGYkVJc1MwRkJhRUk3UVVGRFFYZENMR3RDUVVGVExFTkJRVlFzU1VGQlkwNHNSVUZCUldwQ0xFbEJRV2hDTzBGQlEwRjFRaXhyUWtGQlV5eERRVUZVTEVsQlFXTk9MRVZCUVVWb1FpeExRVUZvUWpzN1FVRkZRVHRCUVVOQk8wRkJRMEVzV1VGQlNTeExRVUZMVFN4WFFVRk1MRU5CUVdsQ2IwSXNPRUpCUVdwQ0xFbEJRVzFFTEcxQ1FVRlRSU3hGUVVGVUxFTkJRVmxETEUxQlFWb3NTMEZCZFVJc1MwRkJPVVVzUlVGQmNVWTdRVUZEYmtaUUxHOUNRVUZUTEVOQlFWUXNTMEZCWlN4TlFVRk5MRXRCUVV0b1FpeFhRVUZNTEVOQlFXbENiMElzT0VKQlFYUkRPMEZCUTBFeFF5eG5Ra0ZCVFhORExGTkJRVTQ3UVVGRFJEczdRVUZGUkN4aFFVRkxhRUlzVjBGQlRDeERRVUZwUW0xQ0xFbEJRV3BDTEVOQlFYTkNTQ3hUUVVGMFFqdEJRVU5FT3p0QlFVVkVPMEZCUTBFc1ZVRkJTU3hMUVVGTFppeGpRVUZNTEVOQlFXOUNaMElzVTBGQmNFSXNRMEZCT0VKRExFbEJRVGxDTEVkQlFYRkRMRU5CUVhKRExFbEJRMEVzUzBGQlMyaENMRkZCUVV3c1EwRkJZMFFzWTBGRVpDeEpRVVZCTEV0QlFVdEJMR05CUVV3c1EwRkJiMEpaTEZWQlJuaENMRVZCUjBVN1FVRkRRVHRCUVVOQk8wRkJRMEVzV1VGQlNTeERRVUZETEV0QlFVdGFMR05CUVV3c1EwRkJiMEp0UWl3NFFrRkJja0lzU1VGQmRVUldMRVZCUVVWWExHOUNRVUY2UkN4SlFVRnBSaXh0UWtGQlUwTXNSVUZCVkN4RFFVRlpReXhOUVVGYUxFdEJRWFZDTEV0QlFUVkhMRVZCUTBVc1MwRkJTM1JDTEdOQlFVd3NRMEZCYjBKdFFpdzRRa0ZCY0VJc1IwRkJjVVJXTEVWQlFVVlhMRzlDUVVGMlJEczdRVUZGUml4WlFVRkpUQ3hoUVVGWExFdEJRVXRtTEdOQlFVd3NRMEZCYjBKR0xFdEJRVzVET3p0QlFVVkJhVUlzYlVKQlFWTXNRMEZCVkN4SlFVRmpUaXhGUVVGRmJFSXNTMEZCYUVJN1FVRkRRWGRDTEcxQ1FVRlRMRU5CUVZRc1NVRkJZMDRzUlVGQlJXcENMRWxCUVdoQ08wRkJRMEYxUWl4dFFrRkJVeXhEUVVGVUxFbEJRV05PTEVWQlFVVm9RaXhMUVVGb1FqczdRVUZGUVR0QlFVTkJPMEZCUTBFc1dVRkJTU3hMUVVGTFR5eGpRVUZNTEVOQlFXOUNiVUlzT0VKQlFYQkNMRWxCUVhORUxHMUNRVUZUUlN4RlFVRlVMRU5CUVZsRExFMUJRVm9zUzBGQmRVSXNTMEZCYWtZc1JVRkJkVVk3UVVGRGNrWlFMSEZDUVVGVExFTkJRVlFzUzBGQlpTeExRVUZMWml4alFVRk1MRU5CUVc5Q2JVSXNPRUpCUVc1RE8wRkJRMEZLTEhGQ1FVRlRMRU5CUVZRc1MwRkJaMEpCTEZkQlFWTXNRMEZCVkN4SlFVRmpMRU5CUVdZc1IwRkJiMElzUjBGQmNFSXNSMEZCTUVJc1EwRkJla01zUTBGR2NVWXNRMEZGZWtNN1FVRkROME03TzBGQlJVUTdRVUZEUVR0QlFVTkJMRmxCUVVrc2JVSkJRVk5OTEVWQlFWUXNRMEZCV1VNc1RVRkJXaXhMUVVGMVFpeFRRVUV6UWl4RlFVTkZNVUlzVTBGQlUyMUNMRlZCUVZRN08wRkJSVVlzWVVGQlMyWXNZMEZCVEN4RFFVRnZRbXRDTEVsQlFYQkNMRU5CUVhsQ1NDeFZRVUY2UWp0QlFVTkVPMEZCUTBZN08wRkJSVVE3T3pzN096c3JSRUZITWtNN1FVRkJRVHM3UVVGRGVrTXNORUpCUVZsUkxHRkJRVm9zUTBGQk1FSXNPRUpCUVRGQ0xFVkJRMGRETEVsQlJFZ3NRMEZEVVN4VlFVRkRReXcwUWtGQlJDeEZRVUZyUXp0QlFVTjBReXhaUVVGSlFTdzJRa0ZCTmtKRExFOUJRV3BETEVWQlFUQkRPMEZCUTNoRFF5eHJRa0ZCVVVNc1IwRkJVaXhEUVVGWkxHbFZRVUZhT3p0QlFVVkJMR05CUVVrc1QwRkJTek5DTEZGQlFVd3NRMEZCWTBZc1YwRkJiRUlzUlVGQkswSTdRVUZETjBJc2JVSkJRVXRCTEZkQlFVd3NRMEZCYVVJNFFpeFpRVUZxUWl4SFFVRm5ReXhKUVVGb1F6dEJRVU5CTEcxQ1FVRkxPVUlzVjBGQlRDeERRVUZwUWl0Q0xFMUJRV3BDTEVkQlFUQkNUQ3cyUWtGQk5rSkxMRTFCUVhaRU96dEJRVVZCTEd0RFFVRlpReXhYUVVGYUxFTkJRWGRDTERoQ1FVRjRRaXhGUVVGM1JDeFZRVUZEVGl3MFFrRkJSQ3hGUVVGclF6dEJRVU40Uml4eFFrRkJTMDhzYzBSQlFVd3NRMEZCTkVSUUxEUkNRVUUxUkR0QlFVTkVMR0ZCUmtRN1FVRkhSRHM3UVVGRlJDeGpRVUZKTEU5QlFVdDRRaXhSUVVGTUxFTkJRV05FTEdOQlFXeENMRVZCUVd0RE8wRkJRMmhETEcxQ1FVRkxRU3hqUVVGTUxFTkJRVzlDTmtJc1dVRkJjRUlzUjBGQmJVTXNTVUZCYmtNN1FVRkRRU3h0UWtGQlN6ZENMR05CUVV3c1EwRkJiMEk0UWl4TlFVRndRaXhIUVVFMlFrd3NOa0pCUVRaQ1N5eE5RVUV4UkRzN1FVRkZRU3hyUTBGQldVTXNWMEZCV2l4RFFVRjNRaXc0UWtGQmVFSXNSVUZCZDBRc1ZVRkJRMDRzTkVKQlFVUXNSVUZCYTBNN1FVRkRlRVlzY1VKQlFVdFBMSE5FUVVGTUxFTkJRVFJFVUN3MFFrRkJOVVFzUlVGQk1FWXNTVUZCTVVZN1FVRkRSQ3hoUVVaRU8wRkJSMFE3UVVGRFJqczdRVUZGUkN4bFFVRkxka0lzWlVGQlREdEJRVU5FTEU5QmVrSklPMEZCTUVKRU96dEJRVVZFT3pzN096czdPenM3TWtWQlRYVkVkVUlzTkVJc1JVRkJNa003UVVGQlFTeFZRVUZpVVN4SFFVRmhMSFZGUVVGUUxFdEJRVTg3TzBGQlEyaEhMRlZCUVUxRExFbEJRVWtzUjBGQlZqczdRVUZGUVR0QlFVTkJMRmRCUVVzdlFpeHBRa0ZCVEN4RFFVRjFRaXhEUVVGMlFpeEpRVUUwUWl0Q0xFbEJRVWtzUzBGQlN5OUNMR2xDUVVGTUxFTkJRWFZDTEVOQlFYWkNMRU5CUVVvc1IwRkJaME1zUTBGQlF5eEpRVUZKSzBJc1EwRkJUQ3hKUVVGVlZDdzJRa0ZCTmtJc1EwRkJOMElzUTBGQmRFVTdRVUZEUVN4WFFVRkxkRUlzYVVKQlFVd3NRMEZCZFVJc1EwRkJka0lzU1VGQk5FSXJRaXhKUVVGSkxFdEJRVXN2UWl4cFFrRkJUQ3hEUVVGMVFpeERRVUYyUWl4RFFVRktMRWRCUVdkRExFTkJRVU1zU1VGQlNTdENMRU5CUVV3c1NVRkJWVlFzTmtKQlFUWkNMRU5CUVRkQ0xFTkJRWFJGTzBGQlEwRXNWMEZCUzNSQ0xHbENRVUZNTEVOQlFYVkNMRU5CUVhaQ0xFbEJRVFJDSzBJc1NVRkJTU3hMUVVGTEwwSXNhVUpCUVV3c1EwRkJkVUlzUTBGQmRrSXNRMEZCU2l4SFFVRm5ReXhEUVVGRExFbEJRVWtyUWl4RFFVRk1MRWxCUVZWVUxEWkNRVUUyUWl4RFFVRTNRaXhEUVVGMFJUczdRVUZGUVN4VlFVRkpWU3hOUVVGTkxFdEJRVXRvUXl4cFFrRkJUQ3hEUVVGMVFpeERRVUYyUWl4RFFVRldPMEZCUTBFc1ZVRkJTV2xETEUxQlFVMHNTMEZCUzJwRExHbENRVUZNTEVOQlFYVkNMRU5CUVhaQ0xFTkJRVlk3UVVGRFFTeFZRVUZKYTBNc1RVRkJUU3hMUVVGTGJFTXNhVUpCUVV3c1EwRkJkVUlzUTBGQmRrSXNRMEZCVmpzN1FVRkZRU3hWUVVGTmJVTXNUMEZCVDNSRkxFdEJRVXQxUlN4SlFVRk1MRU5CUVZWS0xFMUJRVTFCTEVkQlFVNHNSMEZCV1VNc1RVRkJUVUVzUjBGQmJFSXNSMEZCZDBKRExFMUJRVTFCTEVkQlFYaERMRU5CUVdJN08wRkJSVUZHTEdGQlFVOUhMRWxCUVZBN1FVRkRRVVlzWVVGQlQwVXNTVUZCVUR0QlFVTkJSQ3hoUVVGUFF5eEpRVUZRT3p0QlFVVkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN08wRkJSVUU3UVVGRFFTeFZRVUZKT1VNc1QwRkJUM1JDTEZOQlFWTkdMRXRCUVVzeVFpeEpRVUZNTEVOQlFWVjVReXhIUVVGV0xFTkJRVlFzUTBGQldDeERRWGhEWjBjc1EwRjNRek5FTzBGQlEzSkRMRlZCUVVrelF5eFJRVUZSZGtJc1UwRkJVMFlzUzBGQlN6QkNMRXRCUVV3c1EwRkJWeXhEUVVGRGVVTXNSMEZCV2l4RlFVRnBRa1VzUjBGQmFrSXNRMEZCVkN4RFFVRmFMRU5CZWtOblJ5eERRWGxEYmtRN08wRkJSVGRETEZWQlFVbEtMRWRCUVVvc1JVRkJVenRCUVVOUU8wRkJRMEVzV1VGQlNXeENMRmRCUVZjc1MwRkJTMllzWTBGQlRDeERRVUZ2UWtZc1MwRkJia003UVVGRFFXbENMR2xDUVVGVExFTkJRVlFzU1VGQll5eEpRVUZrTzBGQlEwRkJMR2xDUVVGVExFTkJRVlFzU1VGQlkzWkNMRWxCUVdRN1FVRkRRWFZDTEdsQ1FVRlRMRU5CUVZRc1NVRkJZM1JDTEV0QlFXUTdPMEZCUlVFc1lVRkJTMDhzWTBGQlRDeERRVUZ2UW10Q0xFbEJRWEJDTEVOQlFYbENTQ3hSUVVGNlFqdEJRVU5FTEU5QlVrUXNUVUZSVHp0QlFVTk1PMEZCUTBFc1dVRkJTVUVzWVVGQlZ5eExRVUZMYUVJc1YwRkJUQ3hEUVVGcFFrUXNTMEZCYUVNN1FVRkRRV2xDTEcxQ1FVRlRMRU5CUVZRc1NVRkJZeXhKUVVGa08wRkJRMEZCTEcxQ1FVRlRMRU5CUVZRc1NVRkJZM1pDTEVsQlFXUTdRVUZEUVhWQ0xHMUNRVUZUTEVOQlFWUXNTVUZCWTNSQ0xFdEJRV1E3UVVGRFFXaENMR05CUVUxelF5eFZRVUZPT3p0QlFVVkJMR0ZCUVV0b1FpeFhRVUZNTEVOQlFXbENiVUlzU1VGQmFrSXNRMEZCYzBKSUxGVkJRWFJDTzBGQlEwUTdRVUZEUmpzN096WkNRVVZSZVVJc1NTeEZRVUZOTzBGQlEySXNWMEZCUzNCRExHZENRVUZNTEVOQlFYTkNiME1zU1VGQmRFSTdRVUZEUkRzN1FVRkZSRHM3T3pzN096czdNa0pCUzA4N1FVRkJRVHM3UVVGRFRDeHZTa0ZCYTBJc1ZVRkJRME1zVDBGQlJDeEZRVUZoTzBGQlF6ZENMR1ZCUVV0MlF5eGxRVUZNTEVkQlFYVkNkVU1zVDBGQmRrSTdPMEZCUlVFc1dVRkJTVU1zVDBGQlQwTXNjMEpCUVZnc1JVRkJiVU03UVVGRGFrTXNhVUpCUVV0MlF5eG5Ra0ZCVEN4SFFVRjNRaXhQUVVGTFJ5eDFRa0ZCTjBJN1FVRkRRVHRCUVVOQkxHTkJRVWtzVDBGQlQyOURMSFZDUVVGMVFrTXNhVUpCUVRsQ0xFdEJRVzlFTEZWQlFYaEVMRVZCUVc5Rk8wRkJRMnhGUkN4dFEwRkJkVUpETEdsQ1FVRjJRaXhIUVVOSGNFSXNTVUZFU0N4RFFVTlJMREpDUVVGdFFqdEJRVU4yUWl4clFrRkJTWEZDTEc5Q1FVRnZRaXhUUVVGNFFpeEZRVUZ0UXp0QlFVTnFRMGdzZFVKQlFVOUpMR2RDUVVGUUxFTkJRWGRDTEcxQ1FVRjRRaXhGUVVFMlF5eFBRVUZMZWtNc1VVRkJiRVFzUlVGQk5FUXNTMEZCTlVRN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFTeDFRa0ZCUzAwc1pVRkJUQ3hIUVVGMVFtOURMRmRCUVZjN1FVRkJRU3g1UWtGQlRVNHNaVUZCVGp0QlFVRkJMR2xDUVVGWUxFVkJRV2RETEVkQlFXaERMRU5CUVhaQ08wRkJRMFE3UVVGRFJpeGhRVlJJTEVWQlZVZFBMRXRCVmtnc1EwRlZVM0pDTEZGQlFWRnpRaXhMUVZacVFqdEJRVmRFTEZkQldrUXNUVUZaVHp0QlFVTk1PMEZCUTBGUUxHMUNRVUZQU1N4blFrRkJVQ3hEUVVGM1FpeHRRa0ZCZUVJc1JVRkJOa01zVDBGQlMzcERMRkZCUVd4RUxFVkJRVFJFTEV0QlFUVkVPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEVzYlVKQlFVdE5MR1ZCUVV3c1IwRkJkVUp2UXl4WFFVRlhPMEZCUVVFc2NVSkJRVTFPTEdWQlFVNDdRVUZCUVN4aFFVRllMRVZCUVdkRExFZEJRV2hETEVOQlFYWkNPMEZCUTBRN1FVRkRSaXhUUVhaQ1JDeE5RWFZDVHl4SlFVRkpMRTlCUVV0NFF5eFJRVUZNTEVOQlFXTkdMRmRCUVd4Q0xFVkJRU3RDTzBGQlEzQkRMR2xDUVVGTFpTeDNRMEZCVER0QlFVTkVMRk5CUmswc1RVRkZRVHRCUVVOTU1rSTdRVUZEUkR0QlFVTkdMRTlCTDBKRU8wRkJaME5FT3pzN096czdhMEpCUjFrc1NVRkJTVFZETEhWQ1FVRktMRVVpTENKbWFXeGxJam9pUkdWMmFXTmxUM0pwWlc1MFlYUnBiMjVOYjJSMWJHVXVhbk1pTENKemIzVnlZMlZ6UTI5dWRHVnVkQ0k2V3lKcGJYQnZjblFnUkU5TlJYWmxiblJUZFdKdGIyUjFiR1VnWm5KdmJTQW5MaTlFVDAxRmRtVnVkRk4xWW0xdlpIVnNaU2M3WEc1cGJYQnZjblFnU1c1d2RYUk5iMlIxYkdVZ1puSnZiU0FuTGk5SmJuQjFkRTF2WkhWc1pTYzdYRzVwYlhCdmNuUWdUVzkwYVc5dVNXNXdkWFFnWm5KdmJTQW5MaTlOYjNScGIyNUpibkIxZENjN1hHNXBiWEJ2Y25RZ2NHeGhkR1p2Y20wZ1puSnZiU0FuY0d4aGRHWnZjbTBuTzF4dVhHNHZLaXBjYmlBcUlFTnZiblpsY25SeklHUmxaM0psWlhNZ2RHOGdjbUZrYVdGdWN5NWNiaUFxWEc0Z0tpQkFjR0Z5WVcwZ2UyNTFiV0psY24wZ1pHVm5JQzBnUVc1bmJHVWdhVzRnWkdWbmNtVmxjeTVjYmlBcUlFQnlaWFIxY200Z2UyNTFiV0psY24xY2JpQXFMMXh1Wm5WdVkzUnBiMjRnWkdWblZHOVNZV1FvWkdWbktTQjdYRzRnSUhKbGRIVnliaUJrWldjZ0tpQk5ZWFJvTGxCSklDOGdNVGd3TzF4dWZWeHVYRzR2S2lwY2JpQXFJRU52Ym5abGNuUnpJSEpoWkdsaGJuTWdkRzhnWkdWbmNtVmxjeTVjYmlBcVhHNGdLaUJBY0dGeVlXMGdlMjUxYldKbGNuMGdjbUZrSUMwZ1FXNW5iR1VnYVc0Z2NtRmthV0Z1Y3k1Y2JpQXFJRUJ5WlhSMWNtNGdlMjUxYldKbGNuMWNiaUFxTDF4dVpuVnVZM1JwYjI0Z2NtRmtWRzlFWldjb2NtRmtLU0I3WEc0Z0lISmxkSFZ5YmlCeVlXUWdLaUF4T0RBZ0x5Qk5ZWFJvTGxCSk8xeHVmVnh1WEc0dktpcGNiaUFxSUU1dmNtMWhiR2w2WlhNZ1lTQXpJSGdnTXlCdFlYUnlhWGd1WEc0Z0tseHVJQ29nUUhCaGNtRnRJSHR1ZFcxaVpYSmJYWDBnYlNBdElFMWhkSEpwZUNCMGJ5QnViM0p0WVd4cGVtVXNJSEpsY0hKbGMyVnVkR1ZrSUdKNUlHRnVJR0Z5Y21GNUlHOW1JR3hsYm1kMGFDQTVMbHh1SUNvZ1FISmxkSFZ5YmlCN2JuVnRZbVZ5VzExOVhHNGdLaTljYm1aMWJtTjBhVzl1SUc1dmNtMWhiR2w2WlNodEtTQjdYRzRnSUdOdmJuTjBJR1JsZENBOUlHMWJNRjBnS2lCdFd6UmRJQ29nYlZzNFhTQXJJRzFiTVYwZ0tpQnRXelZkSUNvZ2JWczJYU0FySUcxYk1sMGdLaUJ0V3pOZElDb2diVnMzWFNBdElHMWJNRjBnS2lCdFd6VmRJQ29nYlZzM1hTQXRJRzFiTVYwZ0tpQnRXek5kSUNvZ2JWczRYU0F0SUcxYk1sMGdLaUJ0V3pSZElDb2diVnMyWFR0Y2JseHVJQ0JtYjNJZ0tHeGxkQ0JwSUQwZ01Ec2dhU0E4SUcwdWJHVnVaM1JvT3lCcEt5c3BYRzRnSUNBZ2JWdHBYU0F2UFNCa1pYUTdYRzVjYmlBZ2NtVjBkWEp1SUcwN1hHNTlYRzVjYmk4cUtseHVJQ29nUTI5dWRtVnlkSE1nWVNCRmRXeGxjaUJoYm1kc1pTQmdXMkZzY0doaExDQmlaWFJoTENCbllXMXRZVjFnSUhSdklIUm9aU0JYTTBNZ2MzQmxZMmxtYVdOaGRHbHZiaXdnZDJobGNtVTZYRzRnS2lBdElHQmhiSEJvWVdBZ2FYTWdhVzRnV3pBN0lDc3pOakJiTzF4dUlDb2dMU0JnWW1WMFlXQWdhWE1nYVc0Z1d5MHhPREE3SUNzeE9EQmJPMXh1SUNvZ0xTQmdaMkZ0YldGZ0lHbHpJR2x1SUZzdE9UQTdJQ3M1TUZzdVhHNGdLbHh1SUNvZ1FIQmhjbUZ0SUh0dWRXMWlaWEpiWFgwZ1pYVnNaWEpCYm1kc1pTQXRJRVYxYkdWeUlHRnVaMnhsSUhSdklIVnVhV1o1TENCeVpYQnlaWE5sYm5SbFpDQmllU0JoYmlCaGNuSmhlU0J2WmlCc1pXNW5kR2dnTXlBb1lGdGhiSEJvWVN3Z1ltVjBZU3dnWjJGdGJXRmRZQ2t1WEc0Z0tpQkFjMlZsSUh0QWJHbHVheUJvZEhSd09pOHZkM2QzTG5jekxtOXlaeTlVVWk5dmNtbGxiblJoZEdsdmJpMWxkbVZ1ZEM5OVhHNGdLaTljYm1aMWJtTjBhVzl1SUhWdWFXWjVLR1YxYkdWeVFXNW5iR1VwSUh0Y2JpQWdMeThnUTJZdUlGY3pReUJ6Y0dWamFXWnBZMkYwYVc5dUlDaG9kSFJ3T2k4dmR6TmpMbWRwZEdoMVlpNXBieTlrWlhacFkyVnZjbWxsYm5SaGRHbHZiaTl6Y0dWakxYTnZkWEpqWlMxdmNtbGxiblJoZEdsdmJpNW9kRzFzS1Z4dUlDQXZMeUJoYm1RZ1JYVnNaWElnWVc1bmJHVnpJRmRwYTJsd1pXUnBZU0J3WVdkbElDaG9kSFJ3T2k4dlpXNHVkMmxyYVhCbFpHbGhMbTl5Wnk5M2FXdHBMMFYxYkdWeVgyRnVaMnhsY3lrdVhHNGdJQzh2WEc0Z0lDOHZJRmN6UXlCamIyNTJaVzUwYVc5dU9pQlVZV2wwNG9DVFFuSjVZVzRnWVc1bmJHVnpJRm90V0NjdFdTY25MQ0IzYUdWeVpUcGNiaUFnTHk4Z0lDQmhiSEJvWVNCcGN5QnBiaUJiTURzZ0t6TTJNRnNzWEc0Z0lDOHZJQ0FnWW1WMFlTQnBjeUJwYmlCYkxURTRNRHNnS3pFNE1Gc3NYRzRnSUM4dklDQWdaMkZ0YldFZ2FYTWdhVzRnV3kwNU1Ec2dLemt3V3k1Y2JseHVJQ0JqYjI1emRDQmhiSEJvWVVselZtRnNhV1FnUFNBb2RIbHdaVzltSUdWMWJHVnlRVzVuYkdWYk1GMGdQVDA5SUNkdWRXMWlaWEluS1R0Y2JseHVJQ0JqYjI1emRDQmZZV3h3YUdFZ1BTQW9ZV3h3YUdGSmMxWmhiR2xrSUQ4Z1pHVm5WRzlTWVdRb1pYVnNaWEpCYm1kc1pWc3dYU2tnT2lBd0tUdGNiaUFnWTI5dWMzUWdYMkpsZEdFZ1BTQmtaV2RVYjFKaFpDaGxkV3hsY2tGdVoyeGxXekZkS1R0Y2JpQWdZMjl1YzNRZ1gyZGhiVzFoSUQwZ1pHVm5WRzlTWVdRb1pYVnNaWEpCYm1kc1pWc3lYU2s3WEc1Y2JpQWdZMjl1YzNRZ1kwRWdQU0JOWVhSb0xtTnZjeWhmWVd4d2FHRXBPMXh1SUNCamIyNXpkQ0JqUWlBOUlFMWhkR2d1WTI5ektGOWlaWFJoS1R0Y2JpQWdZMjl1YzNRZ1kwY2dQU0JOWVhSb0xtTnZjeWhmWjJGdGJXRXBPMXh1SUNCamIyNXpkQ0J6UVNBOUlFMWhkR2d1YzJsdUtGOWhiSEJvWVNrN1hHNGdJR052Ym5OMElITkNJRDBnVFdGMGFDNXphVzRvWDJKbGRHRXBPMXh1SUNCamIyNXpkQ0J6UnlBOUlFMWhkR2d1YzJsdUtGOW5ZVzF0WVNrN1hHNWNiaUFnYkdWMElHRnNjR2hoTENCaVpYUmhMQ0JuWVcxdFlUdGNibHh1SUNCc1pYUWdiU0E5SUZ0Y2JpQWdJQ0JqUVNBcUlHTkhJQzBnYzBFZ0tpQnpRaUFxSUhOSExGeHVJQ0FnSUMxalFpQXFJSE5CTEZ4dUlDQWdJR05CSUNvZ2MwY2dLeUJqUnlBcUlITkJJQ29nYzBJc1hHNGdJQ0FnWTBjZ0tpQnpRU0FySUdOQklDb2djMElnS2lCelJ5eGNiaUFnSUNCalFTQXFJR05DTEZ4dUlDQWdJSE5CSUNvZ2MwY2dMU0JqUVNBcUlHTkhJQ29nYzBJc1hHNGdJQ0FnTFdOQ0lDb2djMGNzWEc0Z0lDQWdjMElzWEc0Z0lDQWdZMElnS2lCalIxeHVJQ0JkTzF4dUlDQnViM0p0WVd4cGVtVW9iU2s3WEc1Y2JpQWdMeThnVTJsdVkyVWdkMlVnZDJGdWRDQm5ZVzF0WVNCcGJpQmJMVGt3T3lBck9UQmJMQ0JqUnlBK1BTQXdMbHh1SUNCcFppQW9iVnM0WFNBK0lEQXBJSHRjYmlBZ0lDQXZMeUJEWVhObElERTZJRzFiT0YwZ1BpQXdJRHc5UGlCalFpQStJREFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ2hoYm1RZ1kwY2dJVDBnTUNsY2JpQWdJQ0F2THlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUR3OVBpQmlaWFJoSUdsdUlGMHRjR2t2TWpzZ0szQnBMekpiSUNoaGJtUWdZMGNnSVQwZ01DbGNiaUFnSUNCaGJIQm9ZU0E5SUUxaGRHZ3VZWFJoYmpJb0xXMWJNVjBzSUcxYk5GMHBPMXh1SUNBZ0lHSmxkR0VnUFNCTllYUm9MbUZ6YVc0b2JWczNYU2s3SUM4dklHRnphVzRnY21WMGRYSnVjeUJoSUc1MWJXSmxjaUJpWlhSM1pXVnVJQzF3YVM4eUlHRnVaQ0FyY0drdk1pQTlQaUJQUzF4dUlDQWdJR2RoYlcxaElEMGdUV0YwYUM1aGRHRnVNaWd0YlZzMlhTd2diVnM0WFNrN1hHNGdJSDBnWld4elpTQnBaaUFvYlZzNFhTQThJREFwSUh0Y2JpQWdJQ0F2THlCRFlYTmxJREk2SUcxYk9GMGdQQ0F3SUR3OVBpQmpRaUE4SURBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0tHRnVaQ0JqUnlBaFBTQXdLVnh1SUNBZ0lDOHZJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdQRDArSUdKbGRHRWdhVzRnV3kxd2FUc2dMWEJwTHpKYklGVWdYU3R3YVM4eU95QXJjR2xkSUNoaGJtUWdZMGNnSVQwZ01DbGNibHh1SUNBZ0lDOHZJRk5wYm1ObElHTkNJRHdnTUNCaGJtUWdZMElnYVhNZ2FXNGdiVnN4WFNCaGJtUWdiVnMwWFN3Z2RHaGxJSEJ2YVc1MElHbHpJR1pzYVhCd1pXUWdZbmtnTVRnd0lHUmxaM0psWlhNdVhHNGdJQ0FnTHk4Z1NHVnVZMlVzSUhkbElHaGhkbVVnZEc4Z2JYVnNkR2x3YkhrZ1ltOTBhQ0JoY21kMWJXVnVkSE1nYjJZZ1lYUmhiaklnWW5rZ0xURWdhVzRnYjNKa1pYSWdkRzhnY21WMlpYSjBYRzRnSUNBZ0x5OGdkR2hsSUhCdmFXNTBJR2x1SUdsMGN5QnZjbWxuYVc1aGJDQndiM05wZEdsdmJpQW9QVDRnWVc1dmRHaGxjaUJtYkdsd0lHSjVJREU0TUNCa1pXZHlaV1Z6S1M1Y2JpQWdJQ0JoYkhCb1lTQTlJRTFoZEdndVlYUmhiaklvYlZzeFhTd2dMVzFiTkYwcE8xeHVJQ0FnSUdKbGRHRWdQU0F0VFdGMGFDNWhjMmx1S0cxYk4xMHBPMXh1SUNBZ0lHSmxkR0VnS3owZ0tHSmxkR0VnUGowZ01Da2dQeUF0VFdGMGFDNVFTU0E2SUUxaGRHZ3VVRWs3SUM4dklHRnphVzRnY21WMGRYSnVjeUJoSUc1MWJXSmxjaUJpWlhSM1pXVnVJQzF3YVM4eUlHRnVaQ0J3YVM4eUlEMCtJRzFoYTJVZ2MzVnlaU0JpWlhSaElHbHVJRnN0Y0drN0lDMXdhUzh5V3lCVklGMHJjR2t2TWpzZ0szQnBYVnh1SUNBZ0lHZGhiVzFoSUQwZ1RXRjBhQzVoZEdGdU1paHRXelpkTENBdGJWczRYU2s3SUM4dklITmhiV1VnY21WdFlYSnJJR0Z6SUdadmNpQmhiSEJvWVN3Z2JYVnNkR2x3YkdsallYUnBiMjRnWW5rZ0xURmNiaUFnZlNCbGJITmxJSHRjYmlBZ0lDQXZMeUJEWVhObElETTZJRzFiT0YwZ1BTQXdJRHc5UGlCalFpQTlJREFnYjNJZ1kwY2dQU0F3WEc0Z0lDQWdhV1lnS0cxYk5sMGdQaUF3S1NCN1hHNGdJQ0FnSUNBdkx5QlRkV0pqWVhObElERTZJR05ISUQwZ01DQmhibVFnWTBJZ1BpQXdYRzRnSUNBZ0lDQXZMeUFnSUNBZ0lDQWdJQ0FnSUdOSElEMGdNQ0E4UFQ0Z2MwY2dQU0F0TVNBOFBUNGdaMkZ0YldFZ1BTQXRjR2t2TWlBOVBpQnRXelpkSUQwZ1kwSmNiaUFnSUNBZ0lDOHZJQ0FnSUNBZ0lDQWdJQ0FnU0dWdVkyVXNJRzFiTmwwZ1BpQXdJRHc5UGlCalFpQStJREFnUEQwK0lHSmxkR0VnYVc0Z1hTMXdhUzh5T3lBcmNHa3ZNbHRjYmlBZ0lDQWdJR0ZzY0doaElEMGdUV0YwYUM1aGRHRnVNaWd0YlZzeFhTd2diVnMwWFNrN1hHNGdJQ0FnSUNCaVpYUmhJRDBnVFdGMGFDNWhjMmx1S0cxYk4xMHBPeUF2THlCaGMybHVJSEpsZEhWeWJuTWdZU0J1ZFcxaVpYSWdZbVYwZDJWbGJpQXRjR2t2TWlCaGJtUWdLM0JwTHpJZ1BUNGdUMHRjYmlBZ0lDQWdJR2RoYlcxaElEMGdMVTFoZEdndVVFa2dMeUF5TzF4dUlDQWdJSDBnWld4elpTQnBaaUFvYlZzMlhTQThJREFwSUh0Y2JpQWdJQ0FnSUM4dklGTjFZbU5oYzJVZ01qb2dZMGNnUFNBd0lHRnVaQ0JqUWlBOElEQmNiaUFnSUNBZ0lDOHZJQ0FnSUNBZ0lDQWdJQ0FnWTBjZ1BTQXdJRHc5UGlCelJ5QTlJQzB4SUR3OVBpQm5ZVzF0WVNBOUlDMXdhUzh5SUQwK0lHMWJObDBnUFNCalFseHVJQ0FnSUNBZ0x5OGdJQ0FnSUNBZ0lDQWdJQ0JJWlc1alpTd2diVnMyWFNBOElEQWdQRDArSUdOQ0lEd2dNQ0E4UFQ0Z1ltVjBZU0JwYmlCYkxYQnBPeUF0Y0drdk1sc2dWU0JkSzNCcEx6STdJQ3R3YVYxY2JpQWdJQ0FnSUdGc2NHaGhJRDBnVFdGMGFDNWhkR0Z1TWlodFd6RmRMQ0F0YlZzMFhTazdJQzh2SUhOaGJXVWdjbVZ0WVhKcklHRnpJR1p2Y2lCaGJIQm9ZU0JwYmlCaElHTmhjMlVnWVdKdmRtVmNiaUFnSUNBZ0lHSmxkR0VnUFNBdFRXRjBhQzVoYzJsdUtHMWJOMTBwTzF4dUlDQWdJQ0FnWW1WMFlTQXJQU0FvWW1WMFlTQStQU0F3S1NBL0lDMU5ZWFJvTGxCSklEb2dUV0YwYUM1UVNUc2dMeThnWVhOcGJpQnlaWFIxY201eklHRWdiblZ0WW1WeUlHSmxkSGRsWlc0Z0xYQnBMeklnWVc1a0lDdHdhUzh5SUQwK0lHMWhhMlVnYzNWeVpTQmlaWFJoSUdsdUlGc3RjR2s3SUMxd2FTOHlXeUJWSUYwcmNHa3ZNanNnSzNCcFhWeHVJQ0FnSUNBZ1oyRnRiV0VnUFNBdFRXRjBhQzVRU1NBdklESTdYRzRnSUNBZ2ZTQmxiSE5sSUh0Y2JpQWdJQ0FnSUM4dklGTjFZbU5oYzJVZ016b2dZMElnUFNBd1hHNGdJQ0FnSUNBdkx5QkpiaUIwYUdVZ1kyRnpaU0IzYUdWeVpTQmpiM01vWW1WMFlTa2dQU0F3SUNocExtVXVJR0psZEdFZ1BTQXRjR2t2TWlCdmNpQmlaWFJoSUQwZ2NHa3ZNaWtzWEc0Z0lDQWdJQ0F2THlCM1pTQm9ZWFpsSUhSb1pTQm5hVzFpWVd3Z2JHOWpheUJ3Y205aWJHVnRPaUJwYmlCMGFHRjBJR052Ym1acFozVnlZWFJwYjI0c0lHOXViSGtnZEdobElHRnVaMnhsWEc0Z0lDQWdJQ0F2THlCaGJIQm9ZU0FySUdkaGJXMWhJQ2hwWmlCaVpYUmhJRDBnSzNCcEx6SXBJRzl5SUdGc2NHaGhJQzBnWjJGdGJXRWdLR2xtSUdKbGRHRWdQU0F0Y0drdk1pbGNiaUFnSUNBZ0lDOHZJR0Z5WlNCMWJtbHhkV1ZzZVNCa1pXWnBibVZrT2lCaGJIQm9ZU0JoYm1RZ1oyRnRiV0VnWTJGdUlIUmhhMlVnWVc0Z2FXNW1hVzVwZEhrZ2IyWWdkbUZzZFdWekxseHVJQ0FnSUNBZ0x5OGdSbTl5SUdOdmJuWmxibWxsYm1ObExDQnNaWFFuY3lCelpYUWdaMkZ0YldFZ1BTQXdJQ2hoYm1RZ2RHaDFjeUJ6YVc0b1oyRnRiV0VwSUQwZ01Da3VYRzRnSUNBZ0lDQXZMeUFvUVhNZ1lTQmpiMjV6WlhGMVpXNWpaU0J2WmlCMGFHVWdaMmx0WW1Gc0lHeHZZMnNnY0hKdllteGxiU3dnZEdobGNtVWdhWE1nWVNCa2FYTmpiMjUwYVc1MWFYUjVYRzRnSUNBZ0lDQXZMeUJwYmlCaGJIQm9ZU0JoYm1RZ1oyRnRiV0V1S1Z4dUlDQWdJQ0FnWVd4d2FHRWdQU0JOWVhSb0xtRjBZVzR5S0cxYk0xMHNJRzFiTUYwcE8xeHVJQ0FnSUNBZ1ltVjBZU0E5SUNodFd6ZGRJRDRnTUNrZ1B5Qk5ZWFJvTGxCSklDOGdNaUE2SUMxTllYUm9MbEJKSUM4Z01qdGNiaUFnSUNBZ0lHZGhiVzFoSUQwZ01EdGNiaUFnSUNCOVhHNGdJSDFjYmx4dUlDQXZMeUJoZEdGdU1pQnlaWFIxY201eklHRWdiblZ0WW1WeUlHSmxkSGRsWlc0Z0xYQnBJR0Z1WkNCd2FTQTlQaUJ0WVd0bElITjFjbVVnZEdoaGRDQmhiSEJvWVNCcGN5QnBiaUJiTUN3Z01pcHdhVnN1WEc0Z0lHRnNjR2hoSUNzOUlDaGhiSEJvWVNBOElEQXBJRDhnTWlBcUlFMWhkR2d1VUVrZ09pQXdPMXh1WEc0Z0lHVjFiR1Z5UVc1bmJHVmJNRjBnUFNBb1lXeHdhR0ZKYzFaaGJHbGtJRDhnY21Ga1ZHOUVaV2NvWVd4d2FHRXBJRG9nYm5Wc2JDazdYRzRnSUdWMWJHVnlRVzVuYkdWYk1WMGdQU0J5WVdSVWIwUmxaeWhpWlhSaEtUdGNiaUFnWlhWc1pYSkJibWRzWlZzeVhTQTlJSEpoWkZSdlJHVm5LR2RoYlcxaEtUdGNibjFjYmx4dUx5b3FYRzRnS2lCRGIyNTJaWEowY3lCaElFVjFiR1Z5SUdGdVoyeGxJR0JiWVd4d2FHRXNJR0psZEdFc0lHZGhiVzFoWFdBZ2RHOGdZU0JGZFd4bGNpQmhibWRzWlNCM2FHVnlaVHBjYmlBcUlDMGdZR0ZzY0doaFlDQnBjeUJwYmlCYk1Ec2dLek0yTUZzN1hHNGdLaUF0SUdCaVpYUmhZQ0JwY3lCcGJpQmJMVGt3T3lBck9UQmJPMXh1SUNvZ0xTQmdaMkZ0YldGZ0lHbHpJR2x1SUZzdE1UZ3dPeUFyTVRnd1d5NWNiaUFxWEc0Z0tpQkFjR0Z5WVcwZ2UyNTFiV0psY2x0ZGZTQmxkV3hsY2tGdVoyeGxJQzBnUlhWc1pYSWdZVzVuYkdVZ2RHOGdZMjl1ZG1WeWRDd2djbVZ3Y21WelpXNTBaV1FnWW5rZ1lXNGdZWEp5WVhrZ2IyWWdiR1Z1WjNSb0lETWdLR0JiWVd4d2FHRXNJR0psZEdFc0lHZGhiVzFoWFdBcExseHVJQ292WEc1bWRXNWpkR2x2YmlCMWJtbG1lVUZzZENobGRXeGxja0Z1WjJ4bEtTQjdYRzRnSUM4dklFTnZiblpsYm5ScGIyNGdhR1Z5WlRvZ1ZHRnBkT0tBazBKeWVXRnVJR0Z1WjJ4bGN5QmFMVmduTFZrbkp5d2dkMmhsY21VNlhHNGdJQzh2SUNBZ1lXeHdhR0VnYVhNZ2FXNGdXekE3SUNzek5qQmJMRnh1SUNBdkx5QWdJR0psZEdFZ2FYTWdhVzRnV3kwNU1Ec2dLemt3V3l4Y2JpQWdMeThnSUNCbllXMXRZU0JwY3lCcGJpQmJMVEU0TURzZ0t6RTRNRnN1WEc1Y2JpQWdZMjl1YzNRZ1lXeHdhR0ZKYzFaaGJHbGtJRDBnS0hSNWNHVnZaaUJsZFd4bGNrRnVaMnhsV3pCZElEMDlQU0FuYm5WdFltVnlKeWs3WEc1Y2JpQWdZMjl1YzNRZ1gyRnNjR2hoSUQwZ0tHRnNjR2hoU1hOV1lXeHBaQ0EvSUdSbFoxUnZVbUZrS0dWMWJHVnlRVzVuYkdWYk1GMHBJRG9nTUNrN1hHNGdJR052Ym5OMElGOWlaWFJoSUQwZ1pHVm5WRzlTWVdRb1pYVnNaWEpCYm1kc1pWc3hYU2s3WEc0Z0lHTnZibk4wSUY5bllXMXRZU0E5SUdSbFoxUnZVbUZrS0dWMWJHVnlRVzVuYkdWYk1sMHBPMXh1WEc0Z0lHTnZibk4wSUdOQklEMGdUV0YwYUM1amIzTW9YMkZzY0doaEtUdGNiaUFnWTI5dWMzUWdZMElnUFNCTllYUm9MbU52Y3loZlltVjBZU2s3WEc0Z0lHTnZibk4wSUdOSElEMGdUV0YwYUM1amIzTW9YMmRoYlcxaEtUdGNiaUFnWTI5dWMzUWdjMEVnUFNCTllYUm9Mbk5wYmloZllXeHdhR0VwTzF4dUlDQmpiMjV6ZENCelFpQTlJRTFoZEdndWMybHVLRjlpWlhSaEtUdGNiaUFnWTI5dWMzUWdjMGNnUFNCTllYUm9Mbk5wYmloZloyRnRiV0VwTzF4dVhHNGdJR3hsZENCaGJIQm9ZU3dnWW1WMFlTd2daMkZ0YldFN1hHNWNiaUFnYkdWMElHMGdQU0JiWEc0Z0lDQWdZMEVnS2lCalJ5QXRJSE5CSUNvZ2MwSWdLaUJ6Unl4Y2JpQWdJQ0F0WTBJZ0tpQnpRU3hjYmlBZ0lDQmpRU0FxSUhOSElDc2dZMGNnS2lCelFTQXFJSE5DTEZ4dUlDQWdJR05ISUNvZ2MwRWdLeUJqUVNBcUlITkNJQ29nYzBjc1hHNGdJQ0FnWTBFZ0tpQmpRaXhjYmlBZ0lDQnpRU0FxSUhOSElDMGdZMEVnS2lCalJ5QXFJSE5DTEZ4dUlDQWdJQzFqUWlBcUlITkhMRnh1SUNBZ0lITkNMRnh1SUNBZ0lHTkNJQ29nWTBkY2JpQWdYVHRjYmlBZ2JtOXliV0ZzYVhwbEtHMHBPMXh1WEc0Z0lHRnNjR2hoSUQwZ1RXRjBhQzVoZEdGdU1pZ3RiVnN4WFN3Z2JWczBYU2s3WEc0Z0lHRnNjR2hoSUNzOUlDaGhiSEJvWVNBOElEQXBJRDhnTWlBcUlFMWhkR2d1VUVrZ09pQXdPeUF2THlCaGRHRnVNaUJ5WlhSMWNtNXpJR0VnYm5WdFltVnlJR0psZEhkbFpXNGdMWEJwSUdGdVpDQXJjR2tnUFQ0Z2JXRnJaU0J6ZFhKbElHRnNjR2hoSUdseklHbHVJRnN3TENBeUtuQnBXeTVjYmlBZ1ltVjBZU0E5SUUxaGRHZ3VZWE5wYmlodFd6ZGRLVHNnTHk4Z1lYTnBiaUJ5WlhSMWNtNXpJR0VnYm5WdFltVnlJR0psZEhkbFpXNGdMWEJwTHpJZ1lXNWtJSEJwTHpJZ1BUNGdUMHRjYmlBZ1oyRnRiV0VnUFNCTllYUm9MbUYwWVc0eUtDMXRXelpkTENCdFd6aGRLVHNnTHk4Z1lYUmhiaklnY21WMGRYSnVjeUJoSUc1MWJXSmxjaUJpWlhSM1pXVnVJQzF3YVNCaGJtUWdLM0JwSUQwK0lFOUxYRzVjYmlBZ1pYVnNaWEpCYm1kc1pWc3dYU0E5SUNoaGJIQm9ZVWx6Vm1Gc2FXUWdQeUJ5WVdSVWIwUmxaeWhoYkhCb1lTa2dPaUJ1ZFd4c0tUdGNiaUFnWlhWc1pYSkJibWRzWlZzeFhTQTlJSEpoWkZSdlJHVm5LR0psZEdFcE8xeHVJQ0JsZFd4bGNrRnVaMnhsV3pKZElEMGdjbUZrVkc5RVpXY29aMkZ0YldFcE8xeHVmVnh1WEc0dktpcGNiaUFxSUdCRVpYWnBZMlZQY21sbGJuUmhkR2x2YmsxdlpIVnNaV0FnYzJsdVoyeGxkRzl1TGx4dUlDb2dWR2hsSUdCRVpYWnBZMlZQY21sbGJuUmhkR2x2YmsxdlpIVnNaV0FnYzJsdVoyeGxkRzl1SUhCeWIzWnBaR1Z6SUhSb1pTQnlZWGNnZG1Gc2RXVnpYRzRnS2lCdlppQjBhR1VnYjNKcFpXNTBZWFJwYjI0Z2NISnZkbWxrWldRZ1lua2dkR2hsSUdCRVpYWnBZMlZOYjNScGIyNWdJR1YyWlc1MExseHVJQ29nU1hRZ1lXeHpieUJwYm5OMFlXNTBhV0YwWlNCMGFHVWdZRTl5YVdWdWRHRjBhVzl1WUNCemRXSnRiMlIxYkdVZ2RHaGhkQ0IxYm1sbWFXVnpJSFJvYjNObFhHNGdLaUIyWVd4MVpYTWdZV055YjNOeklIQnNZWFJtYjNKdGN5QmllU0J0WVd0cGJtY2dkR2hsYlNCamIyMXdiR2xoYm5RZ2QybDBhQ0I3UUd4cGJtdGNiaUFxSUdoMGRIQTZMeTkzZDNjdWR6TXViM0puTDFSU0wyOXlhV1Z1ZEdGMGFXOXVMV1YyWlc1MEwzeDBhR1VnVnpORElITjBZVzVrWVhKa2ZTQW9LbWt1WlM0cVhHNGdLaUIwYUdVZ1lHRnNjR2hoWUNCaGJtZHNaU0JpWlhSM1pXVnVJR0F3WUNCaGJtUWdZRE0yTUdBZ1pHVm5jbVZsY3l3Z2RHaGxJR0JpWlhSaFlDQmhibWRzWlZ4dUlDb2dZbVYwZDJWbGJpQmdMVEU0TUdBZ1lXNWtJR0F4T0RCZ0lHUmxaM0psWlhNc0lHRnVaQ0JnWjJGdGJXRmdJR0psZEhkbFpXNGdZQzA1TUdBZ1lXNWtYRzRnS2lCZ09UQmdJR1JsWjNKbFpYTXBMQ0JoY3lCM1pXeHNJR0Z6SUhSb1pTQmdUM0pwWlc1MFlYUnBiMjVCYkhSZ0lITjFZbTF2WkhWc1pYTWdLSGRwZEdoY2JpQXFJSFJvWlNCZ1lXeHdhR0ZnSUdGdVoyeGxJR0psZEhkbFpXNGdZREJnSUdGdVpDQmdNell3WUNCa1pXZHlaV1Z6TENCMGFHVWdZR0psZEdGZ0lHRnVaMnhsWEc0Z0tpQmlaWFIzWldWdUlHQXRPVEJnSUdGdVpDQmdPVEJnSUdSbFozSmxaWE1zSUdGdVpDQmdaMkZ0YldGZ0lHSmxkSGRsWlc0Z1lDMHhPREJnSUdGdVpGeHVJQ29nWURFNE1HQWdaR1ZuY21WbGN5a3VYRzRnS2lCWGFHVnVJSFJvWlNCZ2IzSnBaVzUwWVhScGIyNWdJSEpoZHlCMllXeDFaWE1nWVhKbElHNXZkQ0J3Y205MmFXUmxaQ0JpZVNCMGFHVWdjMlZ1YzI5eWN5eGNiaUFxSUhSb2FYTWdiVzlrZFd4bGN5QjBjbWxsY3lCMGJ5QnlaV05oYkdOMWJHRjBaU0JnWW1WMFlXQWdZVzVrSUdCbllXMXRZV0FnWm5KdmJTQjBhR1ZjYmlBcUlHQkJZMk5sYkdWeVlYUnBiMjVKYm1Oc2RXUnBibWRIY21GMmFYUjVZQ0J0YjJSMWJHVXNJR2xtSUdGMllXbHNZV0pzWlNBb2FXNGdkR2hoZENCallYTmxMRnh1SUNvZ2RHaGxJR0JoYkhCb1lXQWdZVzVuYkdVZ2FYTWdhVzF3YjNOemFXSnNaU0IwYnlCeVpYUnlhV1YyWlNCemFXNWpaU0IwYUdVZ1kyOXRjR0Z6Y3lCcGMxeHVJQ29nYm05MElHRjJZV2xzWVdKc1pTa3VYRzRnS2x4dUlDb2dRR05zWVhOeklFUmxkbWxqWlUxdmRHbHZiazF2WkhWc1pWeHVJQ29nUUdWNGRHVnVaSE1nU1c1d2RYUk5iMlIxYkdWY2JpQXFMMXh1WTJ4aGMzTWdSR1YyYVdObFQzSnBaVzUwWVhScGIyNU5iMlIxYkdVZ1pYaDBaVzVrY3lCSmJuQjFkRTF2WkhWc1pTQjdYRzVjYmlBZ0x5b3FYRzRnSUNBcUlFTnlaV0YwWlhNZ2RHaGxJR0JFWlhacFkyVlBjbWxsYm5SaGRHbHZibUFnYlc5a2RXeGxJR2x1YzNSaGJtTmxMbHh1SUNBZ0tseHVJQ0FnS2lCQVkyOXVjM1J5ZFdOMGIzSmNiaUFnSUNvdlhHNGdJR052Ym5OMGNuVmpkRzl5S0NrZ2UxeHVJQ0FnSUhOMWNHVnlLQ2RrWlhacFkyVnZjbWxsYm5SaGRHbHZiaWNwTzF4dVhHNGdJQ0FnTHlvcVhHNGdJQ0FnSUNvZ1VtRjNJSFpoYkhWbGN5QmpiMjFwYm1jZ1puSnZiU0IwYUdVZ1lHUmxkbWxqWlc5eWFXVnVkR0YwYVc5dVlDQmxkbVZ1ZENCelpXNTBJR0o1SUhSb2FYTWdiVzlrZFd4bExseHVJQ0FnSUNBcVhHNGdJQ0FnSUNvZ1FIUm9hWE1nUkdWMmFXTmxUM0pwWlc1MFlYUnBiMjVOYjJSMWJHVmNiaUFnSUNBZ0tpQkFkSGx3WlNCN2JuVnRZbVZ5VzExOVhHNGdJQ0FnSUNvZ1FHUmxabUYxYkhRZ1cyNTFiR3dzSUc1MWJHd3NJRzUxYkd4ZFhHNGdJQ0FnSUNvdlhHNGdJQ0FnZEdocGN5NWxkbVZ1ZENBOUlGdHVkV3hzTENCdWRXeHNMQ0J1ZFd4c1hUdGNibHh1SUNBZ0lDOHFLbHh1SUNBZ0lDQXFJRlJvWlNCZ1QzSnBaVzUwWVhScGIyNWdJRzF2WkhWc1pTNWNiaUFnSUNBZ0tpQlFjbTkyYVdSbGN5QjFibWxtYVdWa0lIWmhiSFZsY3lCdlppQjBhR1VnYjNKcFpXNTBZWFJwYjI0Z1kyOXRjR3hwWVc1MElIZHBkR2dnZTBCc2FXNXJYRzRnSUNBZ0lDb2dhSFIwY0RvdkwzZDNkeTUzTXk1dmNtY3ZWRkl2YjNKcFpXNTBZWFJwYjI0dFpYWmxiblF2ZkhSb1pTQlhNME1nYzNSaGJtUmhjbVI5WEc0Z0lDQWdJQ29nS0dCaGJIQm9ZV0FnYVc0Z1lGc3dMQ0F6TmpCZFlDd2dZbVYwWVNCcGJpQmdXeTB4T0RBc0lDc3hPREJkWUN3Z1lHZGhiVzFoWUNCcGJpQmdXeTA1TUN3Z0t6a3dYV0FwTGx4dUlDQWdJQ0FxWEc0Z0lDQWdJQ29nUUhSb2FYTWdSR1YyYVdObFQzSnBaVzUwWVhScGIyNU5iMlIxYkdWY2JpQWdJQ0FnS2lCQWRIbHdaU0I3UkU5TlJYWmxiblJUZFdKdGIyUjFiR1Y5WEc0Z0lDQWdJQ292WEc0Z0lDQWdkR2hwY3k1dmNtbGxiblJoZEdsdmJpQTlJRzVsZHlCRVQwMUZkbVZ1ZEZOMVltMXZaSFZzWlNoMGFHbHpMQ0FuYjNKcFpXNTBZWFJwYjI0bktUdGNibHh1SUNBZ0lDOHFLbHh1SUNBZ0lDQXFJRlJvWlNCZ1QzSnBaVzUwWVhScGIyNUJiSFJnSUcxdlpIVnNaUzVjYmlBZ0lDQWdLaUJRY205MmFXUmxjeUJoYkhSbGNtNWhkR2wyWlNCMllXeDFaWE1nYjJZZ2RHaGxJRzl5YVdWdWRHRjBhVzl1WEc0Z0lDQWdJQ29nS0dCaGJIQm9ZV0FnYVc0Z1lGc3dMQ0F6TmpCZFlDd2dZbVYwWVNCcGJpQmdXeTA1TUN3Z0t6a3dYV0FzSUdCbllXMXRZV0FnYVc0Z1lGc3RNVGd3TENBck1UZ3dYV0FwTGx4dUlDQWdJQ0FxWEc0Z0lDQWdJQ29nUUhSb2FYTWdSR1YyYVdObFQzSnBaVzUwWVhScGIyNU5iMlIxYkdWY2JpQWdJQ0FnS2lCQWRIbHdaU0I3UkU5TlJYWmxiblJUZFdKdGIyUjFiR1Y5WEc0Z0lDQWdJQ292WEc0Z0lDQWdkR2hwY3k1dmNtbGxiblJoZEdsdmJrRnNkQ0E5SUc1bGR5QkVUMDFGZG1WdWRGTjFZbTF2WkhWc1pTaDBhR2x6TENBbmIzSnBaVzUwWVhScGIyNUJiSFFuS1R0Y2JseHVJQ0FnSUM4cUtseHVJQ0FnSUNBcUlGSmxjWFZwY21Wa0lITjFZbTF2WkhWc1pYTWdMeUJsZG1WdWRITXVYRzRnSUNBZ0lDcGNiaUFnSUNBZ0tpQkFkR2hwY3lCRVpYWnBZMlZQY21sbGJuUmhkR2x2YmsxdlpIVnNaVnh1SUNBZ0lDQXFJRUIwZVhCbElIdHZZbXBsWTNSOVhHNGdJQ0FnSUNvZ1FIQnliM0JsY25SNUlIdGliMjlzZlNCdmNtbGxiblJoZEdsdmJpQXRJRWx1WkdsallYUmxjeUIzYUdWMGFHVnlJSFJvWlNCZ2IzSnBaVzUwWVhScGIyNWdJSFZ1YVdacFpXUWdkbUZzZFdWeklHRnlaU0J5WlhGMWFYSmxaQ0J2Y2lCdWIzUWdLR1JsWm1GMWJIUnpJSFJ2SUdCbVlXeHpaV0FwTGx4dUlDQWdJQ0FxSUVCd2NtOXdaWEowZVNCN1ltOXZiSDBnYjNKcFpXNTBZWFJwYjI1QmJIUWdMU0JKYm1ScFkyRjBaWE1nZDJobGRHaGxjaUIwYUdVZ1lHOXlhV1Z1ZEdGMGFXOXVRV3gwWUNCMllXeDFaWE1nWVhKbElISmxjWFZwY21Wa0lHOXlJRzV2ZENBb1pHVm1ZWFZzZEhNZ2RHOGdZR1poYkhObFlDa3VYRzRnSUNBZ0lDb3ZYRzRnSUNBZ2RHaHBjeTV5WlhGMWFYSmxaQ0E5SUh0Y2JpQWdJQ0FnSUc5eWFXVnVkR0YwYVc5dU9pQm1ZV3h6WlN4Y2JpQWdJQ0FnSUc5eWFXVnVkR0YwYVc5dVFXeDBPaUJtWVd4elpWeHVJQ0FnSUgwN1hHNWNiaUFnSUNBdktpcGNiaUFnSUNBZ0tpQlNaWE52YkhabElHWjFibU4wYVc5dUlHOW1JSFJvWlNCdGIyUjFiR1VuY3lCd2NtOXRhWE5sTGx4dUlDQWdJQ0FxWEc0Z0lDQWdJQ29nUUhSb2FYTWdSR1YyYVdObFQzSnBaVzUwWVhScGIyNU5iMlIxYkdWY2JpQWdJQ0FnS2lCQWRIbHdaU0I3Wm5WdVkzUnBiMjU5WEc0Z0lDQWdJQ29nUUdSbFptRjFiSFFnYm5Wc2JGeHVJQ0FnSUNBcUlFQnpaV1VnUkdWMmFXTmxUM0pwWlc1MFlYUnBiMjVOYjJSMWJHVWphVzVwZEZ4dUlDQWdJQ0FxTDF4dUlDQWdJSFJvYVhNdVgzQnliMjFwYzJWU1pYTnZiSFpsSUQwZ2JuVnNiRHRjYmx4dUlDQWdJQzhxS2x4dUlDQWdJQ0FxSUVkeVlYWnBkSGtnZG1WamRHOXlJR05oYkdOMWJHRjBaV1FnWm5KdmJTQjBhR1VnWUdGalkyVnNaWEpoZEdsdmJrbHVZMngxWkdsdVowZHlZWFpwZEhsZ0lIVnVhV1pwWldRZ2RtRnNkV1Z6TGx4dUlDQWdJQ0FxWEc0Z0lDQWdJQ29nUUhSb2FYTWdSR1YyYVdObFQzSnBaVzUwWVhScGIyNU5iMlIxYkdWY2JpQWdJQ0FnS2lCQWRIbHdaU0I3Ym5WdFltVnlXMTE5WEc0Z0lDQWdJQ29nUUdSbFptRjFiSFFnV3pBc0lEQXNJREJkWEc0Z0lDQWdJQ292WEc0Z0lDQWdkR2hwY3k1ZlpYTjBhVzFoZEdWa1IzSmhkbWwwZVNBOUlGc3dMQ0F3TENBd1hUdGNibHh1SUNBZ0lIUm9hWE11WDNCeWIyTmxjM05HZFc1amRHbHZiaUE5SUc1MWJHdzdYRzRnSUNBZ2RHaHBjeTVmY0hKdlkyVnpjeUE5SUhSb2FYTXVYM0J5YjJObGMzTXVZbWx1WkNoMGFHbHpLVHRjYmlBZ0lDQjBhR2x6TGw5a1pYWnBZMlZ2Y21sbGJuUmhkR2x2YmtOb1pXTnJJRDBnZEdocGN5NWZaR1YyYVdObGIzSnBaVzUwWVhScGIyNURhR1ZqYXk1aWFXNWtLSFJvYVhNcE8xeHVJQ0FnSUhSb2FYTXVYMlJsZG1salpXOXlhV1Z1ZEdGMGFXOXVUR2x6ZEdWdVpYSWdQU0IwYUdsekxsOWtaWFpwWTJWdmNtbGxiblJoZEdsdmJreHBjM1JsYm1WeUxtSnBibVFvZEdocGN5azdYRzRnSUgxY2JseHVJQ0F2S2lwY2JpQWdJQ29nVTJWdWMyOXlJR05vWldOcklHOXVJR2x1YVhScFlXeHBlbUYwYVc5dUlHOW1JSFJvWlNCdGIyUjFiR1V1WEc0Z0lDQXFJRlJvYVhNZ2JXVjBhRzlrT2x4dUlDQWdLaUF0SUdOb1pXTnJjeUIzYUdWMGFHVnlJSFJvWlNCZ2IzSnBaVzUwWVhScGIyNWdJSFpoYkhWbGN5QmhjbVVnZG1Gc2FXUWdiM0lnYm05ME8xeHVJQ0FnS2lBdElDaHBiaUIwYUdVZ1kyRnpaU0IzYUdWeVpTQnZjbWxsYm5SaGRHbHZiaUJ5WVhjZ2RtRnNkV1Z6SUdGeVpTQnViM1FnY0hKdmRtbGtaV1FwWEc0Z0lDQXFJQ0FnZEhKcFpYTWdkRzhnWTJGc1kzVnNZWFJsSUhSb1pTQnZjbWxsYm5SaGRHbHZiaUJtY205dElIUm9aVnh1SUNBZ0tpQWdJR0JoWTJObGJHVnlZWFJwYjI1SmJtTnNkV1JwYm1kSGNtRjJhWFI1WUNCMWJtbG1hV1ZrSUhaaGJIVmxjeTVjYmlBZ0lDcGNiaUFnSUNvZ1FIQmhjbUZ0SUh0RVpYWnBZMlZOYjNScGIyNUZkbVZ1ZEgwZ1pTQXRJRVpwY25OMElHQW5aR1YyYVdObGJXOTBhVzl1SjJBZ1pYWmxiblFnWTJGMVoyaDBMQ0J2YmlCM2FHbGphQ0IwYUdVZ1kyaGxZMnNnYVhNZ1pHOXVaUzVjYmlBZ0lDb3ZYRzRnSUY5a1pYWnBZMlZ2Y21sbGJuUmhkR2x2YmtOb1pXTnJLR1VwSUh0Y2JpQWdJQ0F2THlCamJHVmhjaUIwYVcxbGIzVjBJQ2hoYm5ScExVWnBjbVZtYjNnZ1luVm5JSE52YkhWMGFXOXVMQ0IzYVc1a2IzY2daWFpsYm5RZ1pHVjJhV05sYjNKcFpXNTBZWFJwYjI0Z1ltVnBibWNnYm5abGNpQmpZV3hzWldRcFhHNGdJQ0FnTHk4Z2MyVjBJSFJvWlNCelpYUWdkR2x0Wlc5MWRDQnBiaUJwYm1sMEtDa2dablZ1WTNScGIyNWNiaUFnSUNCamJHVmhjbFJwYldWdmRYUW9kR2hwY3k1ZlkyaGxZMnRVYVcxbGIzVjBTV1FwTzF4dVhHNGdJQ0FnZEdocGN5NXBjMUJ5YjNacFpHVmtJRDBnZEhKMVpUdGNibHh1SUNBZ0lDOHZJRk5sYm5OdmNpQmhkbUZwYkdGaWFXeHBkSGtnWm05eUlIUm9aU0J2Y21sbGJuUmhkR2x2YmlCaGJtUWdZV3gwWlhKdVlYUnBkbVVnYjNKcFpXNTBZWFJwYjI1Y2JpQWdJQ0JqYjI1emRDQnlZWGRXWVd4MVpYTlFjbTkyYVdSbFpDQTlJQ2dvZEhsd1pXOW1JR1V1WVd4d2FHRWdQVDA5SUNkdWRXMWlaWEluS1NBbUppQW9kSGx3Wlc5bUlHVXVZbVYwWVNBOVBUMGdKMjUxYldKbGNpY3BJQ1ltSUNoMGVYQmxiMllnWlM1bllXMXRZU0E5UFQwZ0oyNTFiV0psY2ljcEtUdGNiaUFnSUNCMGFHbHpMbTl5YVdWdWRHRjBhVzl1TG1selVISnZkbWxrWldRZ1BTQnlZWGRXWVd4MVpYTlFjbTkyYVdSbFpEdGNiaUFnSUNCMGFHbHpMbTl5YVdWdWRHRjBhVzl1UVd4MExtbHpVSEp2ZG1sa1pXUWdQU0J5WVhkV1lXeDFaWE5RY205MmFXUmxaRHRjYmx4dUlDQWdJQzh2SUZSUFJFOG9QeWs2SUdkbGRDQndjMlYxWkc4dGNHVnlhVzlrWEc1Y2JpQWdJQ0F2THlCemQyRndJSFJvWlNCd2NtOWpaWE56SUdaMWJtTjBhVzl1SUhSdklIUm9aVnh1SUNBZ0lIUm9hWE11WDNCeWIyTmxjM05HZFc1amRHbHZiaUE5SUhSb2FYTXVYMlJsZG1salpXOXlhV1Z1ZEdGMGFXOXVUR2x6ZEdWdVpYSTdYRzVjYmlBZ0lDQXZMeUJKWmlCdmNtbGxiblJoZEdsdmJpQnZjaUJoYkhSbGNtNWhkR2wyWlNCdmNtbGxiblJoZEdsdmJpQmhjbVVnYm05MElIQnliM1pwWkdWa0lHSjVJSEpoZHlCelpXNXpiM0p6SUdKMWRDQnlaWEYxYVhKbFpDeGNiaUFnSUNBdkx5QjBjbmtnZEc4Z1kyRnNZM1ZzWVhSbElIUm9aVzBnZDJsMGFDQmdZV05qWld4bGNtRjBhVzl1U1c1amJIVmthVzVuUjNKaGRtbDBlV0FnZFc1cFptbGxaQ0IyWVd4MVpYTmNiaUFnSUNCcFppQW9LSFJvYVhNdWNtVnhkV2x5WldRdWIzSnBaVzUwWVhScGIyNGdKaVlnSVhSb2FYTXViM0pwWlc1MFlYUnBiMjR1YVhOUWNtOTJhV1JsWkNrZ2ZId2dLSFJvYVhNdWNtVnhkV2x5WldRdWIzSnBaVzUwWVhScGIyNUJiSFFnSmlZZ0lYUm9hWE11YjNKcFpXNTBZWFJwYjI1QmJIUXVhWE5RY205MmFXUmxaQ2twWEc0Z0lDQWdJQ0IwYUdsekxsOTBjbmxCWTJObGJHVnlZWFJwYjI1SmJtTnNkV1JwYm1kSGNtRjJhWFI1Um1Gc2JHSmhZMnNvS1R0Y2JpQWdJQ0JsYkhObFhHNGdJQ0FnSUNCMGFHbHpMbDl3Y205dGFYTmxVbVZ6YjJ4MlpTaDBhR2x6S1R0Y2JpQWdmVnh1WEc0Z0lDOHFLbHh1SUNBZ0tpQmdKMlJsZG1salpXOXlhV1Z1ZEdGMGFXOXVKMkFnWlhabGJuUWdZMkZzYkdKaFkyc3VYRzRnSUNBcUlGUm9hWE1nYldWMGFHOWtJR1Z0YVhSeklHRnVJR1YyWlc1MElIZHBkR2dnZEdobElISmhkeUJnSjJSbGRtbGpaVzl5YVdWdWRHRjBhVzl1SjJBZ2RtRnNkV1Z6TEZ4dUlDQWdLaUJoYm1RZ1pXMXBkSE1nWlhabGJuUnpJSGRwZEdnZ2RHaGxJSFZ1YVdacFpXUWdZRzl5YVdWdWRHRjBhVzl1WUNCaGJtUWdMeUJ2Y2lCMGFHVmNiaUFnSUNvZ1lHOXlhV1Z1ZEdGMGFXOXVRV3gwWUNCMllXeDFaWE1nYVdZZ2RHaGxlU0JoY21VZ2NtVnhkV2x5WldRdVhHNGdJQ0FxWEc0Z0lDQXFJRUJ3WVhKaGJTQjdSR1YyYVdObFQzSnBaVzUwWVhScGIyNUZkbVZ1ZEgwZ1pTQXRJR0FuWkdWMmFXTmxiM0pwWlc1MFlYUnBiMjRuWUNCbGRtVnVkQ0IwYUdVZ2RtRnNkV1Z6SUdGeVpTQmpZV3hqZFd4aGRHVmtJR1p5YjIwdVhHNGdJQ0FxTDF4dUlDQmZaR1YyYVdObGIzSnBaVzUwWVhScGIyNU1hWE4wWlc1bGNpaGxLU0I3WEc0Z0lDQWdMeThnSjJSbGRtbGpaVzl5YVdWdWRHRjBhVzl1SnlCbGRtVnVkQ0FvY21GM0lIWmhiSFZsY3lsY2JpQWdJQ0JzWlhRZ2IzVjBSWFpsYm5RZ1BTQjBhR2x6TG1WMlpXNTBPMXh1WEc0Z0lDQWdiM1YwUlhabGJuUmJNRjBnUFNCbExtRnNjR2hoTzF4dUlDQWdJRzkxZEVWMlpXNTBXekZkSUQwZ1pTNWlaWFJoTzF4dUlDQWdJRzkxZEVWMlpXNTBXekpkSUQwZ1pTNW5ZVzF0WVR0Y2JseHVJQ0FnSUdsbUlDaDBhR2x6TG14cGMzUmxibVZ5Y3k1emFYcGxJRDRnTUNsY2JpQWdJQ0FnSUhSb2FYTXVaVzFwZENodmRYUkZkbVZ1ZENrN1hHNWNiaUFnSUNBdkx5QW5iM0pwWlc1MFlYUnBiMjRuSUdWMlpXNTBJQ2gxYm1sbWFXVmtJSFpoYkhWbGN5bGNiaUFnSUNCcFppQW9kR2hwY3k1dmNtbGxiblJoZEdsdmJpNXNhWE4wWlc1bGNuTXVjMmw2WlNBK0lEQWdKaVpjYmlBZ0lDQWdJQ0FnZEdocGN5NXlaWEYxYVhKbFpDNXZjbWxsYm5SaGRHbHZiaUFtSmx4dUlDQWdJQ0FnSUNCMGFHbHpMbTl5YVdWdWRHRjBhVzl1TG1selVISnZkbWxrWldSY2JpQWdJQ0FwSUh0Y2JpQWdJQ0FnSUM4dklFOXVJR2xQVXl3Z2RHaGxJR0JoYkhCb1lXQWdkbUZzZFdVZ2FYTWdhVzVwZEdsaGJHbDZaV1FnWVhRZ1lEQmdJRzl1SUhSb1pTQm1hWEp6ZENCZ1pHVjJhV05sYjNKcFpXNTBZWFJwYjI1Z0lHVjJaVzUwWEc0Z0lDQWdJQ0F2THlCemJ5QjNaU0JyWldWd0lIUm9ZWFFnY21WbVpYSmxibU5sSUdsdUlHMWxiVzl5ZVNCMGJ5QmpZV3hqZFd4aGRHVWdkR2hsSUU1dmNuUm9JR3hoZEdWeUlHOXVYRzRnSUNBZ0lDQnBaaUFvSVhSb2FYTXViM0pwWlc1MFlYUnBiMjR1WDNkbFltdHBkRU52YlhCaGMzTklaV0ZrYVc1blVtVm1aWEpsYm1ObElDWW1JR1V1ZDJWaWEybDBRMjl0Y0dGemMwaGxZV1JwYm1jZ0ppWWdjR3hoZEdadmNtMHViM011Wm1GdGFXeDVJRDA5UFNBbmFVOVRKeWxjYmlBZ0lDQWdJQ0FnZEdocGN5NXZjbWxsYm5SaGRHbHZiaTVmZDJWaWEybDBRMjl0Y0dGemMwaGxZV1JwYm1kU1pXWmxjbVZ1WTJVZ1BTQmxMbmRsWW10cGRFTnZiWEJoYzNOSVpXRmthVzVuTzF4dVhHNGdJQ0FnSUNCc1pYUWdiM1YwUlhabGJuUWdQU0IwYUdsekxtOXlhV1Z1ZEdGMGFXOXVMbVYyWlc1ME8xeHVYRzRnSUNBZ0lDQnZkWFJGZG1WdWRGc3dYU0E5SUdVdVlXeHdhR0U3WEc0Z0lDQWdJQ0J2ZFhSRmRtVnVkRnN4WFNBOUlHVXVZbVYwWVR0Y2JpQWdJQ0FnSUc5MWRFVjJaVzUwV3pKZElEMGdaUzVuWVcxdFlUdGNibHh1SUNBZ0lDQWdMeThnVDI0Z2FVOVRMQ0J5WlhCc1lXTmxJSFJvWlNCZ1lXeHdhR0ZnSUhaaGJIVmxJR0o1SUhSb1pTQk9iM0owYUNCMllXeDFaU0JoYm1RZ2RXNXBabmtnZEdobElHRnVaMnhsYzF4dUlDQWdJQ0FnTHk4Z0tIUm9aU0JrWldaaGRXeDBJSEpsY0hKbGMyVnVkR0YwYVc5dUlHOW1JSFJvWlNCaGJtZHNaWE1nYjI0Z2FVOVRJR2x6SUc1dmRDQmpiMjF3YkdsaGJuUWdkMmwwYUNCMGFHVWdWek5ESUhOd1pXTnBabWxqWVhScGIyNHBYRzRnSUNBZ0lDQnBaaUFvZEdocGN5NXZjbWxsYm5SaGRHbHZiaTVmZDJWaWEybDBRMjl0Y0dGemMwaGxZV1JwYm1kU1pXWmxjbVZ1WTJVZ0ppWWdjR3hoZEdadmNtMHViM011Wm1GdGFXeDVJRDA5UFNBbmFVOVRKeWtnZTF4dUlDQWdJQ0FnSUNCdmRYUkZkbVZ1ZEZzd1hTQXJQU0F6TmpBZ0xTQjBhR2x6TG05eWFXVnVkR0YwYVc5dUxsOTNaV0pyYVhSRGIyMXdZWE56U0dWaFpHbHVaMUpsWm1WeVpXNWpaVHRjYmlBZ0lDQWdJQ0FnZFc1cFpua29iM1YwUlhabGJuUXBPMXh1SUNBZ0lDQWdmVnh1WEc0Z0lDQWdJQ0IwYUdsekxtOXlhV1Z1ZEdGMGFXOXVMbVZ0YVhRb2IzVjBSWFpsYm5RcE8xeHVJQ0FnSUgxY2JseHVJQ0FnSUM4dklDZHZjbWxsYm5SaGRHbHZia0ZzZENjZ1pYWmxiblJjYmlBZ0lDQnBaaUFvZEdocGN5NXZjbWxsYm5SaGRHbHZia0ZzZEM1c2FYTjBaVzVsY25NdWMybDZaU0ErSURBZ0ppWmNiaUFnSUNBZ0lDQWdkR2hwY3k1eVpYRjFhWEpsWkM1dmNtbGxiblJoZEdsdmJrRnNkQ0FtSmx4dUlDQWdJQ0FnSUNCMGFHbHpMbTl5YVdWdWRHRjBhVzl1UVd4MExtbHpVSEp2ZG1sa1pXUmNiaUFnSUNBcElIdGNiaUFnSUNBZ0lDOHZJRTl1SUdsUFV5d2dkR2hsSUdCaGJIQm9ZV0FnZG1Gc2RXVWdhWE1nYVc1cGRHbGhiR2w2WldRZ1lYUWdZREJnSUc5dUlIUm9aU0JtYVhKemRDQmdaR1YyYVdObGIzSnBaVzUwWVhScGIyNWdJR1YyWlc1MFhHNGdJQ0FnSUNBdkx5QnpieUIzWlNCclpXVndJSFJvWVhRZ2NtVm1aWEpsYm1ObElHbHVJRzFsYlc5eWVTQjBieUJqWVd4amRXeGhkR1VnZEdobElFNXZjblJvSUd4aGRHVnlJRzl1WEc0Z0lDQWdJQ0JwWmlBb0lYUm9hWE11YjNKcFpXNTBZWFJwYjI1QmJIUXVYM2RsWW10cGRFTnZiWEJoYzNOSVpXRmthVzVuVW1WbVpYSmxibU5sSUNZbUlHVXVkMlZpYTJsMFEyOXRjR0Z6YzBobFlXUnBibWNnSmlZZ2NHeGhkR1p2Y20wdWIzTXVabUZ0YVd4NUlEMDlQU0FuYVU5VEp5bGNiaUFnSUNBZ0lDQWdkR2hwY3k1dmNtbGxiblJoZEdsdmJrRnNkQzVmZDJWaWEybDBRMjl0Y0dGemMwaGxZV1JwYm1kU1pXWmxjbVZ1WTJVZ1BTQmxMbmRsWW10cGRFTnZiWEJoYzNOSVpXRmthVzVuTzF4dVhHNGdJQ0FnSUNCc1pYUWdiM1YwUlhabGJuUWdQU0IwYUdsekxtOXlhV1Z1ZEdGMGFXOXVRV3gwTG1WMlpXNTBPMXh1WEc0Z0lDQWdJQ0J2ZFhSRmRtVnVkRnN3WFNBOUlHVXVZV3h3YUdFN1hHNGdJQ0FnSUNCdmRYUkZkbVZ1ZEZzeFhTQTlJR1V1WW1WMFlUdGNiaUFnSUNBZ0lHOTFkRVYyWlc1MFd6SmRJRDBnWlM1bllXMXRZVHRjYmx4dUlDQWdJQ0FnTHk4Z1QyNGdhVTlUTENCeVpYQnNZV05sSUhSb1pTQmdZV3h3YUdGZ0lIWmhiSFZsSUdKNUlIUm9aU0JPYjNKMGFDQjJZV3gxWlNCaWRYUWdaRzhnYm05MElHTnZiblpsY25RZ2RHaGxJR0Z1WjJ4bGMxeHVJQ0FnSUNBZ0x5OGdLSFJvWlNCa1pXWmhkV3gwSUhKbGNISmxjMlZ1ZEdGMGFXOXVJRzltSUhSb1pTQmhibWRzWlhNZ2IyNGdhVTlUSUdseklHTnZiWEJzYVdGdWRDQjNhWFJvSUhSb1pTQmhiSFJsY201aGRHbDJaU0J5WlhCeVpYTmxiblJoZEdsdmJpbGNiaUFnSUNBZ0lHbG1JQ2gwYUdsekxtOXlhV1Z1ZEdGMGFXOXVRV3gwTGw5M1pXSnJhWFJEYjIxd1lYTnpTR1ZoWkdsdVoxSmxabVZ5Wlc1alpTQW1KaUJ3YkdGMFptOXliUzV2Y3k1bVlXMXBiSGtnUFQwOUlDZHBUMU1uS1h0Y2JpQWdJQ0FnSUNBZ2IzVjBSWFpsYm5SYk1GMGdMVDBnZEdocGN5NXZjbWxsYm5SaGRHbHZia0ZzZEM1ZmQyVmlhMmwwUTI5dGNHRnpjMGhsWVdScGJtZFNaV1psY21WdVkyVTdYRzRnSUNBZ0lDQWdJRzkxZEVWMlpXNTBXekJkSUNzOUlDaHZkWFJGZG1WdWRGc3dYU0E4SURBcElEOGdNell3SURvZ01Ec2dMeThnYldGclpTQnpkWEpsSUdCaGJIQm9ZV0FnYVhNZ2FXNGdXekFzSUNzek5qQmJYRzRnSUNBZ0lDQjlYRzVjYmlBZ0lDQWdJQzh2SUU5dUlFRnVaSEp2YVdRc0lIUnlZVzV6Wm05eWJTQjBhR1VnWVc1bmJHVnpJSFJ2SUhSb1pTQmhiSFJsY201aGRHbDJaU0J5WlhCeVpYTmxiblJoZEdsdmJseHVJQ0FnSUNBZ0x5OGdLSFJvWlNCa1pXWmhkV3gwSUhKbGNISmxjMlZ1ZEdGMGFXOXVJRzltSUhSb1pTQmhibWRzWlhNZ2IyNGdRVzVrY205cFpDQnBjeUJqYjIxd2JHbGhiblFnZDJsMGFDQjBhR1VnVnpORElITndaV05wWm1sallYUnBiMjRwWEc0Z0lDQWdJQ0JwWmlBb2NHeGhkR1p2Y20wdWIzTXVabUZ0YVd4NUlEMDlQU0FuUVc1a2NtOXBaQ2NwWEc0Z0lDQWdJQ0FnSUhWdWFXWjVRV3gwS0c5MWRFVjJaVzUwS1R0Y2JseHVJQ0FnSUNBZ2RHaHBjeTV2Y21sbGJuUmhkR2x2YmtGc2RDNWxiV2wwS0c5MWRFVjJaVzUwS1R0Y2JpQWdJQ0I5WEc0Z0lIMWNibHh1SUNBdktpcGNiaUFnSUNvZ1EyaGxZMnR6SUhkb1pYUm9aWElnWUdKbGRHRmdJR0Z1WkNCZ1oyRnRiV0ZnSUdOaGJpQmlaU0JqWVd4amRXeGhkR1ZrSUdaeWIyMGdkR2hsSUdCaFkyTmxiR1Z5WVhScGIyNUpibU5zZFdScGJtZEhjbUYyYVhSNVlDQjJZV3gxWlhNZ2IzSWdibTkwTGx4dUlDQWdLaTljYmlBZ1gzUnllVUZqWTJWc1pYSmhkR2x2YmtsdVkyeDFaR2x1WjBkeVlYWnBkSGxHWVd4c1ltRmpheWdwSUh0Y2JpQWdJQ0JOYjNScGIyNUpibkIxZEM1eVpYRjFhWEpsVFc5a2RXeGxLQ2RoWTJObGJHVnlZWFJwYjI1SmJtTnNkV1JwYm1kSGNtRjJhWFI1SnlsY2JpQWdJQ0FnSUM1MGFHVnVLQ2hoWTJObGJHVnlZWFJwYjI1SmJtTnNkV1JwYm1kSGNtRjJhWFI1S1NBOVBpQjdYRzRnSUNBZ0lDQWdJR2xtSUNoaFkyTmxiR1Z5WVhScGIyNUpibU5zZFdScGJtZEhjbUYyYVhSNUxtbHpWbUZzYVdRcElIdGNiaUFnSUNBZ0lDQWdJQ0JqYjI1emIyeGxMbXh2WnloY0lsZEJVazVKVGtjZ0tHMXZkR2x2YmkxcGJuQjFkQ2s2SUZSb1pTQW5aR1YyYVdObGIzSnBaVzUwWVhScGIyNG5JR1YyWlc1MElHUnZaWE1nYm05MElHVjRhWE4wSUc5eUlHUnZaWE1nYm05MElIQnliM1pwWkdVZ2RtRnNkV1Z6SUdsdUlIbHZkWElnWW5KdmQzTmxjaXdnYzI4Z2RHaGxJRzl5YVdWdWRHRjBhVzl1SUc5bUlIUm9aU0JrWlhacFkyVWdhWE1nWlhOMGFXMWhkR1ZrSUdaeWIyMGdSR1YyYVdObFRXOTBhVzl1SjNNZ0oyRmpZMlZzWlhKaGRHbHZia2x1WTJ4MVpHbHVaMGR5WVhacGRIa25JR1YyWlc1MExpQlRhVzVqWlNCMGFHVWdZMjl0Y0dGemN5QnBjeUJ1YjNRZ1lYWmhhV3hoWW14bExDQnZibXg1SUhSb1pTQmdZbVYwWVdBZ1lXNWtJR0JuWVcxdFlXQWdZVzVuYkdWeklHRnlaU0J3Y205MmFXUmxaQ0FvWUdGc2NHaGhZQ0JwY3lCdWRXeHNLUzVjSWlrN1hHNWNiaUFnSUNBZ0lDQWdJQ0JwWmlBb2RHaHBjeTV5WlhGMWFYSmxaQzV2Y21sbGJuUmhkR2x2YmlrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnZEdocGN5NXZjbWxsYm5SaGRHbHZiaTVwYzBOaGJHTjFiR0YwWldRZ1BTQjBjblZsTzF4dUlDQWdJQ0FnSUNBZ0lDQWdkR2hwY3k1dmNtbGxiblJoZEdsdmJpNXdaWEpwYjJRZ1BTQmhZMk5sYkdWeVlYUnBiMjVKYm1Oc2RXUnBibWRIY21GMmFYUjVMbkJsY21sdlpEdGNibHh1SUNBZ0lDQWdJQ0FnSUNBZ1RXOTBhVzl1U1c1d2RYUXVZV1JrVEdsemRHVnVaWElvSjJGalkyVnNaWEpoZEdsdmJrbHVZMngxWkdsdVowZHlZWFpwZEhrbkxDQW9ZV05qWld4bGNtRjBhVzl1U1c1amJIVmthVzVuUjNKaGRtbDBlU2tnUFQ0Z2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNCMGFHbHpMbDlqWVd4amRXeGhkR1ZDWlhSaFFXNWtSMkZ0YldGR2NtOXRRV05qWld4bGNtRjBhVzl1U1c1amJIVmthVzVuUjNKaGRtbDBlU2hoWTJObGJHVnlZWFJwYjI1SmJtTnNkV1JwYm1kSGNtRjJhWFI1S1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJSDBwTzF4dUlDQWdJQ0FnSUNBZ0lIMWNibHh1SUNBZ0lDQWdJQ0FnSUdsbUlDaDBhR2x6TG5KbGNYVnBjbVZrTG05eWFXVnVkR0YwYVc5dVFXeDBLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQjBhR2x6TG05eWFXVnVkR0YwYVc5dVFXeDBMbWx6UTJGc1kzVnNZWFJsWkNBOUlIUnlkV1U3WEc0Z0lDQWdJQ0FnSUNBZ0lDQjBhR2x6TG05eWFXVnVkR0YwYVc5dVFXeDBMbkJsY21sdlpDQTlJR0ZqWTJWc1pYSmhkR2x2YmtsdVkyeDFaR2x1WjBkeVlYWnBkSGt1Y0dWeWFXOWtPMXh1WEc0Z0lDQWdJQ0FnSUNBZ0lDQk5iM1JwYjI1SmJuQjFkQzVoWkdSTWFYTjBaVzVsY2lnbllXTmpaV3hsY21GMGFXOXVTVzVqYkhWa2FXNW5SM0poZG1sMGVTY3NJQ2hoWTJObGJHVnlZWFJwYjI1SmJtTnNkV1JwYm1kSGNtRjJhWFI1S1NBOVBpQjdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lIUm9hWE11WDJOaGJHTjFiR0YwWlVKbGRHRkJibVJIWVcxdFlVWnliMjFCWTJObGJHVnlZWFJwYjI1SmJtTnNkV1JwYm1kSGNtRjJhWFI1S0dGalkyVnNaWEpoZEdsdmJrbHVZMngxWkdsdVowZHlZWFpwZEhrc0lIUnlkV1VwTzF4dUlDQWdJQ0FnSUNBZ0lDQWdmU2s3WEc0Z0lDQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQjlYRzVjYmlBZ0lDQWdJQ0FnZEdocGN5NWZjSEp2YldselpWSmxjMjlzZG1Vb2RHaHBjeWs3WEc0Z0lDQWdJQ0I5S1R0Y2JpQWdmVnh1WEc0Z0lDOHFLbHh1SUNBZ0tpQkRZV3hqZFd4aGRHVnpJR0Z1WkNCbGJXbDBjeUJnWW1WMFlXQWdZVzVrSUdCbllXMXRZV0FnZG1Gc2RXVnpJR0Z6SUdFZ1ptRnNiR0poWTJzZ2IyWWdkR2hsSUdCdmNtbGxiblJoZEdsdmJtQWdZVzVrSUM4Z2IzSWdZRzl5YVdWdWRHRjBhVzl1UVd4MFlDQmxkbVZ1ZEhNc0lHWnliMjBnZEdobElHQmhZMk5sYkdWeVlYUnBiMjVKYm1Oc2RXUnBibWRIY21GMmFYUjVZQ0IxYm1sbWFXVmtJSFpoYkhWbGN5NWNiaUFnSUNwY2JpQWdJQ29nUUhCaGNtRnRJSHR1ZFcxaVpYSmJYWDBnWVdOalpXeGxjbUYwYVc5dVNXNWpiSFZrYVc1blIzSmhkbWwwZVNBdElFeGhkR1Z6ZENCZ1lXTmpaV3hsY21GMGFXOXVTVzVqYkhWa2FXNW5SM0poZG1sMGVTQnlZWGNnZG1Gc2RXVnpMbHh1SUNBZ0tpQkFjR0Z5WVcwZ2UySnZiMng5SUZ0aGJIUTlabUZzYzJWZElDMGdTVzVrYVdOaGRHVnpJSGRvWlhSb1pYSWdkMlVnYm1WbFpDQjBhR1VnWVd4MFpYSnVZWFJsSUhKbGNISmxjMlZ1ZEdGMGFXOXVJRzltSUhSb1pTQmhibWRzWlhNZ2IzSWdibTkwTGx4dUlDQWdLaTljYmlBZ1gyTmhiR04xYkdGMFpVSmxkR0ZCYm1SSFlXMXRZVVp5YjIxQlkyTmxiR1Z5WVhScGIyNUpibU5zZFdScGJtZEhjbUYyYVhSNUtHRmpZMlZzWlhKaGRHbHZia2x1WTJ4MVpHbHVaMGR5WVhacGRIa3NJR0ZzZENBOUlHWmhiSE5sS1NCN1hHNGdJQ0FnWTI5dWMzUWdheUE5SURBdU9EdGNibHh1SUNBZ0lDOHZJRXh2ZHlCd1lYTnpJR1pwYkhSbGNpQjBieUJsYzNScGJXRjBaU0IwYUdVZ1ozSmhkbWwwZVZ4dUlDQWdJSFJvYVhNdVgyVnpkR2x0WVhSbFpFZHlZWFpwZEhsYk1GMGdQU0JySUNvZ2RHaHBjeTVmWlhOMGFXMWhkR1ZrUjNKaGRtbDBlVnN3WFNBcklDZ3hJQzBnYXlrZ0tpQmhZMk5sYkdWeVlYUnBiMjVKYm1Oc2RXUnBibWRIY21GMmFYUjVXekJkTzF4dUlDQWdJSFJvYVhNdVgyVnpkR2x0WVhSbFpFZHlZWFpwZEhsYk1WMGdQU0JySUNvZ2RHaHBjeTVmWlhOMGFXMWhkR1ZrUjNKaGRtbDBlVnN4WFNBcklDZ3hJQzBnYXlrZ0tpQmhZMk5sYkdWeVlYUnBiMjVKYm1Oc2RXUnBibWRIY21GMmFYUjVXekZkTzF4dUlDQWdJSFJvYVhNdVgyVnpkR2x0WVhSbFpFZHlZWFpwZEhsYk1sMGdQU0JySUNvZ2RHaHBjeTVmWlhOMGFXMWhkR1ZrUjNKaGRtbDBlVnN5WFNBcklDZ3hJQzBnYXlrZ0tpQmhZMk5sYkdWeVlYUnBiMjVKYm1Oc2RXUnBibWRIY21GMmFYUjVXekpkTzF4dVhHNGdJQ0FnYkdWMElGOW5XQ0E5SUhSb2FYTXVYMlZ6ZEdsdFlYUmxaRWR5WVhacGRIbGJNRjA3WEc0Z0lDQWdiR1YwSUY5bldTQTlJSFJvYVhNdVgyVnpkR2x0WVhSbFpFZHlZWFpwZEhsYk1WMDdYRzRnSUNBZ2JHVjBJRjluV2lBOUlIUm9hWE11WDJWemRHbHRZWFJsWkVkeVlYWnBkSGxiTWwwN1hHNWNiaUFnSUNCamIyNXpkQ0J1YjNKdElEMGdUV0YwYUM1emNYSjBLRjluV0NBcUlGOW5XQ0FySUY5bldTQXFJRjluV1NBcklGOW5XaUFxSUY5bldpazdYRzVjYmlBZ0lDQmZaMWdnTHowZ2JtOXliVHRjYmlBZ0lDQmZaMWtnTHowZ2JtOXliVHRjYmlBZ0lDQmZaMW9nTHowZ2JtOXliVHRjYmx4dUlDQWdJQzh2SUVGa2IzQjBhVzVuSUhSb1pTQm1iMnhzYjNkcGJtY2dZMjl1ZG1WdWRHbHZibk02WEc0Z0lDQWdMeThnTFNCbFlXTm9JRzFoZEhKcGVDQnZjR1Z5WVhSbGN5QmllU0J3Y21VdGJYVnNkR2x3YkhscGJtY2dZMjlzZFcxdUlIWmxZM1J2Y25Nc1hHNGdJQ0FnTHk4Z0xTQmxZV05vSUcxaGRISnBlQ0J5WlhCeVpYTmxiblJ6SUdGdUlHRmpkR2wyWlNCeWIzUmhkR2x2Yml4Y2JpQWdJQ0F2THlBdElHVmhZMmdnYldGMGNtbDRJSEpsY0hKbGMyVnVkSE1nZEdobElHTnZiWEJ2YzJsMGFXOXVJRzltSUdsdWRISnBibk5wWXlCeWIzUmhkR2x2Ym5Nc1hHNGdJQ0FnTHk4Z2RHaGxJSEp2ZEdGMGFXOXVJRzFoZEhKcGVDQnlaWEJ5WlhObGJuUnBibWNnZEdobElHTnZiWEJ2YzJsMGFXOXVJRzltSUdFZ2NtOTBZWFJwYjI1Y2JpQWdJQ0F2THlCaFltOTFkQ0IwYUdVZ2VDMWhlR2x6SUdKNUlHRnVJR0Z1WjJ4bElHSmxkR0VnWVc1a0lHRWdjbTkwWVhScGIyNGdZV0p2ZFhRZ2RHaGxJSGt0WVhocGMxeHVJQ0FnSUM4dklHSjVJR0Z1SUdGdVoyeGxJR2RoYlcxaElHbHpPbHh1SUNBZ0lDOHZYRzRnSUNBZ0x5OGdXeUJqYjNNb1oyRnRiV0VwSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdMQ0FnTUNBZ0lDQWdJQ0FnSUNBc0lDQnphVzRvWjJGdGJXRXBJQ0FnSUNBZ0lDQWdJQ0FnSUNBc1hHNGdJQ0FnTHk4Z0lDQnphVzRvWW1WMFlTa2dLaUJ6YVc0b1oyRnRiV0VwSUNBZ0xDQWdZMjl6S0dKbGRHRXBJQ0FzSUNBdFkyOXpLR2RoYlcxaEtTQXFJSE5wYmloaVpYUmhLU0FzWEc0Z0lDQWdMeThnSUNBdFkyOXpLR0psZEdFcElDb2djMmx1S0dkaGJXMWhLU0FnTENBZ2MybHVLR0psZEdFcElDQXNJQ0JqYjNNb1ltVjBZU2tnS2lCamIzTW9aMkZ0YldFcElDQmRMbHh1SUNBZ0lDOHZYRzRnSUNBZ0x5OGdTR1Z1WTJVc0lIUm9aU0J3Y205cVpXTjBhVzl1SUc5bUlIUm9aU0J1YjNKdFlXeHBlbVZrSUdkeVlYWnBkSGtnWnlBOUlGc3dMQ0F3TENBeFhWeHVJQ0FnSUM4dklHbHVJSFJvWlNCa1pYWnBZMlVuY3lCeVpXWmxjbVZ1WTJVZ1puSmhiV1VnWTI5eWNtVnpjRzl1WkhNZ2RHODZYRzRnSUNBZ0x5OWNiaUFnSUNBdkx5Qm5XQ0E5SUMxamIzTW9ZbVYwWVNrZ0tpQnphVzRvWjJGdGJXRXBMRnh1SUNBZ0lDOHZJR2RaSUQwZ2MybHVLR0psZEdFcExGeHVJQ0FnSUM4dklHZGFJRDBnWTI5ektHSmxkR0VwSUNvZ1kyOXpLR2RoYlcxaEtTeGNiaUFnSUNBdkwxeHVJQ0FnSUM4dklITnZJR0psZEdFZ1BTQmhjMmx1S0dkWktTQmhibVFnWjJGdGJXRWdQU0JoZEdGdU1pZ3RaMWdzSUdkYUtTNWNibHh1SUNBZ0lDOHZJRUpsZEdFZ0ppQm5ZVzF0WVNCbGNYVmhkR2x2Ym5NZ0tIZGxJR0Z3Y0hKdmVHbHRZWFJsSUZ0bldDd2daMWtzSUdkYVhTQmllU0JiWDJkWUxDQmZaMWtzSUY5bldsMHBYRzRnSUNBZ2JHVjBJR0psZEdFZ1BTQnlZV1JVYjBSbFp5aE5ZWFJvTG1GemFXNG9YMmRaS1NrN0lDOHZJR0psZEdFZ2FYTWdhVzRnV3kxd2FTOHlPeUJ3YVM4eVcxeHVJQ0FnSUd4bGRDQm5ZVzF0WVNBOUlISmhaRlJ2UkdWbktFMWhkR2d1WVhSaGJqSW9MVjluV0N3Z1gyZGFLU2s3SUM4dklHZGhiVzFoSUdseklHbHVJRnN0Y0drN0lIQnBXMXh1WEc0Z0lDQWdhV1lnS0dGc2RDa2dlMXh1SUNBZ0lDQWdMeThnU1c0Z2RHaGhkQ0JqWVhObExDQjBhR1Z5WlNCcGN5QnViM1JvYVc1bklIUnZJR1J2SUhOcGJtTmxJSFJvWlNCallXeGpkV3hoZEdsdmJuTWdZV0p2ZG1VZ1oyRjJaU0IwYUdVZ1lXNW5iR1VnYVc0Z2RHaGxJSEpwWjJoMElISmhibWRsYzF4dUlDQWdJQ0FnYkdWMElHOTFkRVYyWlc1MElEMGdkR2hwY3k1dmNtbGxiblJoZEdsdmJrRnNkQzVsZG1WdWREdGNiaUFnSUNBZ0lHOTFkRVYyWlc1MFd6QmRJRDBnYm5Wc2JEdGNiaUFnSUNBZ0lHOTFkRVYyWlc1MFd6RmRJRDBnWW1WMFlUdGNiaUFnSUNBZ0lHOTFkRVYyWlc1MFd6SmRJRDBnWjJGdGJXRTdYRzVjYmlBZ0lDQWdJSFJvYVhNdWIzSnBaVzUwWVhScGIyNUJiSFF1WlcxcGRDaHZkWFJGZG1WdWRDazdYRzRnSUNBZ2ZTQmxiSE5sSUh0Y2JpQWdJQ0FnSUM4dklFaGxjbVVnZDJVZ2FHRjJaU0IwYnlCMWJtbG1lU0IwYUdVZ1lXNW5iR1Z6SUhSdklHZGxkQ0IwYUdVZ2NtRnVaMlZ6SUdOdmJYQnNhV0Z1ZENCM2FYUm9JSFJvWlNCWE0wTWdjM0JsWTJsbWFXTmhkR2x2Ymx4dUlDQWdJQ0FnYkdWMElHOTFkRVYyWlc1MElEMGdkR2hwY3k1dmNtbGxiblJoZEdsdmJpNWxkbVZ1ZER0Y2JpQWdJQ0FnSUc5MWRFVjJaVzUwV3pCZElEMGdiblZzYkR0Y2JpQWdJQ0FnSUc5MWRFVjJaVzUwV3pGZElEMGdZbVYwWVR0Y2JpQWdJQ0FnSUc5MWRFVjJaVzUwV3pKZElEMGdaMkZ0YldFN1hHNGdJQ0FnSUNCMWJtbG1lU2h2ZFhSRmRtVnVkQ2s3WEc1Y2JpQWdJQ0FnSUhSb2FYTXViM0pwWlc1MFlYUnBiMjR1WlcxcGRDaHZkWFJGZG1WdWRDazdYRzRnSUNBZ2ZWeHVJQ0I5WEc1Y2JpQWdYM0J5YjJObGMzTW9aR0YwWVNrZ2UxeHVJQ0FnSUhSb2FYTXVYM0J5YjJObGMzTkdkVzVqZEdsdmJpaGtZWFJoS1R0Y2JpQWdmVnh1WEc0Z0lDOHFLbHh1SUNBZ0tpQkpibWwwYVdGc2FYcGxjeUJ2WmlCMGFHVWdiVzlrZFd4bExseHVJQ0FnS2x4dUlDQWdLaUJBY21WMGRYSnVJSHRRY205dGFYTmxmVnh1SUNBZ0tpOWNiaUFnYVc1cGRDZ3BJSHRjYmlBZ0lDQnlaWFIxY200Z2MzVndaWEl1YVc1cGRDZ29jbVZ6YjJ4MlpTa2dQVDRnZTF4dUlDQWdJQ0FnZEdocGN5NWZjSEp2YldselpWSmxjMjlzZG1VZ1BTQnlaWE52YkhabE8xeHVYRzRnSUNBZ0lDQnBaaUFvZDJsdVpHOTNMa1JsZG1salpVOXlhV1Z1ZEdGMGFXOXVSWFpsYm5RcElIdGNiaUFnSUNBZ0lDQWdkR2hwY3k1ZmNISnZZMlZ6YzBaMWJtTjBhVzl1SUQwZ2RHaHBjeTVmWkdWMmFXTmxiM0pwWlc1MFlYUnBiMjVEYUdWamF6dGNiaUFnSUNBZ0lDQWdMeThnWm1WaGRIVnlaU0JrWlhSbFkzUmNiaUFnSUNBZ0lDQWdhV1lnS0hSNWNHVnZaaUJFWlhacFkyVlBjbWxsYm5SaGRHbHZia1YyWlc1MExuSmxjWFZsYzNSUVpYSnRhWE56YVc5dUlEMDlQU0FuWm5WdVkzUnBiMjRuS1NCN1hHNGdJQ0FnSUNBZ0lDQWdSR1YyYVdObFQzSnBaVzUwWVhScGIyNUZkbVZ1ZEM1eVpYRjFaWE4wVUdWeWJXbHpjMmx2YmlncFhHNGdJQ0FnSUNBZ0lDQWdJQ0F1ZEdobGJpaHdaWEp0YVhOemFXOXVVM1JoZEdVZ1BUNGdlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQnBaaUFvY0dWeWJXbHpjMmx2YmxOMFlYUmxJRDA5UFNBblozSmhiblJsWkNjcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjNhVzVrYjNjdVlXUmtSWFpsYm5STWFYTjBaVzVsY2lnblpHVjJhV05sYjNKcFpXNTBZWFJwYjI0bkxDQjBhR2x6TGw5d2NtOWpaWE56TENCbVlXeHpaU2s3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnTHk4Z2MyVjBJR1poYkd4aVlXTnJJSFJwYldWdmRYUWdabTl5SUVacGNtVm1iM2dnS0dsMGN5QjNhVzVrYjNjZ2JtVjJaWElnWTJGc2JHbHVaeUIwYUdVZ1JHVjJhV05sVDNKcFpXNTBZWFJwYjI0Z1pYWmxiblFzSUdFZ1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0x5OGdjbVZ4ZFdseVpTQnZaaUIwYUdVZ1JHVjJhV05sVDNKcFpXNTBZWFJwYjI0Z2MyVnlkbWxqWlNCM2FXeHNJSEpsYzNWc2RDQnBiaUIwYUdVZ2NtVnhkV2x5WlNCd2NtOXRhWE5sSUc1bGRtVnlJR0psYVc1bklISmxjMjlzZG1Wa1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0x5OGdhR1Z1WTJVZ2RHaGxJRVY0Y0dWeWFXMWxiblFnYzNSaGNuUW9LU0J0WlhSb2IyUWdibVYyWlhJZ1kyRnNiR1ZrS1Z4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhSb2FYTXVYMk5vWldOclZHbHRaVzkxZEVsa0lEMGdjMlYwVkdsdFpXOTFkQ2dvS1NBOVBpQnlaWE52YkhabEtIUm9hWE1wTENBMU1EQXBPMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJQ0FnSUNCOUtWeHVJQ0FnSUNBZ0lDQWdJQ0FnTG1OaGRHTm9LR052Ym5OdmJHVXVaWEp5YjNJcE8xeHVJQ0FnSUNBZ0lDQjlJR1ZzYzJVZ2UxeHVJQ0FnSUNBZ0lDQWdJQzh2SUdoaGJtUnNaU0J5WldkMWJHRnlJRzV2YmlCcFQxTWdNVE1ySUdSbGRtbGpaWE5jYmlBZ0lDQWdJQ0FnSUNCM2FXNWtiM2N1WVdSa1JYWmxiblJNYVhOMFpXNWxjaWduWkdWMmFXTmxiM0pwWlc1MFlYUnBiMjRuTENCMGFHbHpMbDl3Y205alpYTnpMQ0JtWVd4elpTazdYRzRnSUNBZ0lDQWdJQ0FnTHk4Z2MyVjBJR1poYkd4aVlXTnJJSFJwYldWdmRYUWdabTl5SUVacGNtVm1iM2dnS0dsMGN5QjNhVzVrYjNjZ2JtVjJaWElnWTJGc2JHbHVaeUIwYUdVZ1JHVjJhV05sVDNKcFpXNTBZWFJwYjI0Z1pYWmxiblFzSUdFZ1hHNGdJQ0FnSUNBZ0lDQWdMeThnY21WeGRXbHlaU0J2WmlCMGFHVWdSR1YyYVdObFQzSnBaVzUwWVhScGIyNGdjMlZ5ZG1salpTQjNhV3hzSUhKbGMzVnNkQ0JwYmlCMGFHVWdjbVZ4ZFdseVpTQndjbTl0YVhObElHNWxkbVZ5SUdKbGFXNW5JSEpsYzI5c2RtVmtYRzRnSUNBZ0lDQWdJQ0FnTHk4Z2FHVnVZMlVnZEdobElFVjRjR1Z5YVcxbGJuUWdjM1JoY25Rb0tTQnRaWFJvYjJRZ2JtVjJaWElnWTJGc2JHVmtLVnh1SUNBZ0lDQWdJQ0FnSUhSb2FYTXVYMk5vWldOclZHbHRaVzkxZEVsa0lEMGdjMlYwVkdsdFpXOTFkQ2dvS1NBOVBpQnlaWE52YkhabEtIUm9hWE1wTENBMU1EQXBPMXh1SUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0I5SUdWc2MyVWdhV1lnS0hSb2FYTXVjbVZ4ZFdseVpXUXViM0pwWlc1MFlYUnBiMjRwSUh0Y2JpQWdJQ0FnSUNBZ2RHaHBjeTVmZEhKNVFXTmpaV3hsY21GMGFXOXVTVzVqYkhWa2FXNW5SM0poZG1sMGVVWmhiR3hpWVdOcktDazdYRzRnSUNBZ0lDQjlJR1ZzYzJVZ2UxeHVJQ0FnSUNBZ0lDQnlaWE52YkhabEtIUm9hWE1wTzF4dUlDQWdJQ0FnZlZ4dUlDQWdJSDBwTzF4dUlDQjlYRzU5WEc1Y2JtVjRjRzl5ZENCa1pXWmhkV3gwSUc1bGR5QkVaWFpwWTJWUGNtbGxiblJoZEdsdmJrMXZaSFZzWlNncE8xeHVJbDE5IiwiJ3VzZSBzdHJpY3QnO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuXG52YXIgX2NyZWF0ZUNsYXNzID0gZnVuY3Rpb24gKCkgeyBmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgcHJvcHMpIHsgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykgeyB2YXIgZGVzY3JpcHRvciA9IHByb3BzW2ldOyBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSBkZXNjcmlwdG9yLmVudW1lcmFibGUgfHwgZmFsc2U7IGRlc2NyaXB0b3IuY29uZmlndXJhYmxlID0gdHJ1ZTsgaWYgKFwidmFsdWVcIiBpbiBkZXNjcmlwdG9yKSBkZXNjcmlwdG9yLndyaXRhYmxlID0gdHJ1ZTsgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgZGVzY3JpcHRvci5rZXksIGRlc2NyaXB0b3IpOyB9IH0gcmV0dXJuIGZ1bmN0aW9uIChDb25zdHJ1Y3RvciwgcHJvdG9Qcm9wcywgc3RhdGljUHJvcHMpIHsgaWYgKHByb3RvUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IucHJvdG90eXBlLCBwcm90b1Byb3BzKTsgaWYgKHN0YXRpY1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLCBzdGF0aWNQcm9wcyk7IHJldHVybiBDb25zdHJ1Y3RvcjsgfTsgfSgpO1xuXG52YXIgX2dldCA9IGZ1bmN0aW9uIGdldChvYmplY3QsIHByb3BlcnR5LCByZWNlaXZlcikgeyBpZiAob2JqZWN0ID09PSBudWxsKSBvYmplY3QgPSBGdW5jdGlvbi5wcm90b3R5cGU7IHZhciBkZXNjID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihvYmplY3QsIHByb3BlcnR5KTsgaWYgKGRlc2MgPT09IHVuZGVmaW5lZCkgeyB2YXIgcGFyZW50ID0gT2JqZWN0LmdldFByb3RvdHlwZU9mKG9iamVjdCk7IGlmIChwYXJlbnQgPT09IG51bGwpIHsgcmV0dXJuIHVuZGVmaW5lZDsgfSBlbHNlIHsgcmV0dXJuIGdldChwYXJlbnQsIHByb3BlcnR5LCByZWNlaXZlcik7IH0gfSBlbHNlIGlmIChcInZhbHVlXCIgaW4gZGVzYykgeyByZXR1cm4gZGVzYy52YWx1ZTsgfSBlbHNlIHsgdmFyIGdldHRlciA9IGRlc2MuZ2V0OyBpZiAoZ2V0dGVyID09PSB1bmRlZmluZWQpIHsgcmV0dXJuIHVuZGVmaW5lZDsgfSByZXR1cm4gZ2V0dGVyLmNhbGwocmVjZWl2ZXIpOyB9IH07XG5cbnZhciBfSW5wdXRNb2R1bGUyID0gcmVxdWlyZSgnLi9JbnB1dE1vZHVsZScpO1xuXG52YXIgX0lucHV0TW9kdWxlMyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX0lucHV0TW9kdWxlMik7XG5cbnZhciBfRE9NRXZlbnRTdWJtb2R1bGUgPSByZXF1aXJlKCcuL0RPTUV2ZW50U3VibW9kdWxlJyk7XG5cbnZhciBfRE9NRXZlbnRTdWJtb2R1bGUyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfRE9NRXZlbnRTdWJtb2R1bGUpO1xuXG52YXIgX01vdGlvbklucHV0ID0gcmVxdWlyZSgnLi9Nb3Rpb25JbnB1dCcpO1xuXG52YXIgX01vdGlvbklucHV0MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX01vdGlvbklucHV0KTtcblxudmFyIF9wbGF0Zm9ybSA9IHJlcXVpcmUoJ3BsYXRmb3JtJyk7XG5cbnZhciBfcGxhdGZvcm0yID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcGxhdGZvcm0pO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG5mdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7IH0gfVxuXG5mdW5jdGlvbiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihzZWxmLCBjYWxsKSB7IGlmICghc2VsZikgeyB0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoXCJ0aGlzIGhhc24ndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuJ3QgYmVlbiBjYWxsZWRcIik7IH0gcmV0dXJuIGNhbGwgJiYgKHR5cGVvZiBjYWxsID09PSBcIm9iamVjdFwiIHx8IHR5cGVvZiBjYWxsID09PSBcImZ1bmN0aW9uXCIpID8gY2FsbCA6IHNlbGY7IH1cblxuZnVuY3Rpb24gX2luaGVyaXRzKHN1YkNsYXNzLCBzdXBlckNsYXNzKSB7IGlmICh0eXBlb2Ygc3VwZXJDbGFzcyAhPT0gXCJmdW5jdGlvblwiICYmIHN1cGVyQ2xhc3MgIT09IG51bGwpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uLCBub3QgXCIgKyB0eXBlb2Ygc3VwZXJDbGFzcyk7IH0gc3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzICYmIHN1cGVyQ2xhc3MucHJvdG90eXBlLCB7IGNvbnN0cnVjdG9yOiB7IHZhbHVlOiBzdWJDbGFzcywgZW51bWVyYWJsZTogZmFsc2UsIHdyaXRhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUgfSB9KTsgaWYgKHN1cGVyQ2xhc3MpIE9iamVjdC5zZXRQcm90b3R5cGVPZiA/IE9iamVjdC5zZXRQcm90b3R5cGVPZihzdWJDbGFzcywgc3VwZXJDbGFzcykgOiBzdWJDbGFzcy5fX3Byb3RvX18gPSBzdXBlckNsYXNzOyB9XG5cbi8qKlxuICogR2V0cyB0aGUgY3VycmVudCBsb2NhbCB0aW1lIGluIHNlY29uZHMuXG4gKiBVc2VzIGB3aW5kb3cucGVyZm9ybWFuY2Uubm93KClgIGlmIGF2YWlsYWJsZSwgYW5kIGBEYXRlLm5vdygpYCBvdGhlcndpc2UuXG4gKlxuICogQHJldHVybiB7bnVtYmVyfVxuICovXG5mdW5jdGlvbiBnZXRMb2NhbFRpbWUoKSB7XG4gIGlmICh3aW5kb3cucGVyZm9ybWFuY2UpIHJldHVybiB3aW5kb3cucGVyZm9ybWFuY2Uubm93KCkgLyAxMDAwO1xuICByZXR1cm4gRGF0ZS5ub3coKSAvIDEwMDA7XG59XG5cbnZhciBjaHJvbWVSZWdFeHAgPSAvQ2hyb21lLztcbnZhciB0b0RlZyA9IDE4MCAvIE1hdGguUEk7XG5cbi8qKlxuICogYERldmljZU1vdGlvbmAgbW9kdWxlIHNpbmdsZXRvbi5cbiAqIFRoZSBgRGV2aWNlTW90aW9uTW9kdWxlYCBzaW5nbGV0b24gcHJvdmlkZXMgdGhlIHJhdyB2YWx1ZXNcbiAqIG9mIHRoZSBhY2NlbGVyYXRpb24gaW5jbHVkaW5nIGdyYXZpdHksIGFjY2VsZXJhdGlvbiwgYW5kIHJvdGF0aW9uXG4gKiByYXRlIHByb3ZpZGVkIGJ5IHRoZSBgRGV2aWNlTW90aW9uYCBldmVudC5cbiAqIEl0IGFsc28gaW5zdGFudGlhdGUgdGhlIGBBY2NlbGVyYXRpb25JbmNsdWRpbmdHcmF2aXR5YCxcbiAqIGBBY2NlbGVyYXRpb25gIGFuZCBgUm90YXRpb25SYXRlYCBzdWJtb2R1bGVzIHRoYXQgdW5pZnkgdGhvc2UgdmFsdWVzXG4gKiBhY3Jvc3MgcGxhdGZvcm1zIGJ5IG1ha2luZyB0aGVtIGNvbXBsaWFudCB3aXRoIHtAbGlua1xuICogaHR0cDovL3d3dy53My5vcmcvVFIvb3JpZW50YXRpb24tZXZlbnQvfHRoZSBXM0Mgc3RhbmRhcmR9LlxuICogV2hlbiByYXcgdmFsdWVzIGFyZSBub3QgcHJvdmlkZWQgYnkgdGhlIHNlbnNvcnMsIHRoaXMgbW9kdWxlcyB0cmllc1xuICogdG8gcmVjYWxjdWxhdGUgdGhlbSBmcm9tIGF2YWlsYWJsZSB2YWx1ZXM6XG4gKiAtIGBhY2NlbGVyYXRpb25gIGlzIGNhbGN1bGF0ZWQgZnJvbSBgYWNjZWxlcmF0aW9uSW5jbHVkaW5nR3Jhdml0eWBcbiAqICAgd2l0aCBhIGhpZ2gtcGFzcyBmaWx0ZXI7XG4gKiAtIChjb21pbmcgc29vbiDigJQgd2FpdGluZyBmb3IgYSBidWcgb24gQ2hyb21lIHRvIGJlIHJlc29sdmVkKVxuICogICBgcm90YXRpb25SYXRlYCBpcyBjYWxjdWxhdGVkIGZyb20gYG9yaWVudGF0aW9uYC5cbiAqXG4gKiBAY2xhc3MgRGV2aWNlTW90aW9uTW9kdWxlXG4gKiBAZXh0ZW5kcyBJbnB1dE1vZHVsZVxuICovXG5cbnZhciBEZXZpY2VNb3Rpb25Nb2R1bGUgPSBmdW5jdGlvbiAoX0lucHV0TW9kdWxlKSB7XG4gIF9pbmhlcml0cyhEZXZpY2VNb3Rpb25Nb2R1bGUsIF9JbnB1dE1vZHVsZSk7XG5cbiAgLyoqXG4gICAqIENyZWF0ZXMgdGhlIGBEZXZpY2VNb3Rpb25gIG1vZHVsZSBpbnN0YW5jZS5cbiAgICpcbiAgICogQGNvbnN0cnVjdG9yXG4gICAqL1xuICBmdW5jdGlvbiBEZXZpY2VNb3Rpb25Nb2R1bGUoKSB7XG4gICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIERldmljZU1vdGlvbk1vZHVsZSk7XG5cbiAgICAvKipcbiAgICAgKiBSYXcgdmFsdWVzIGNvbWluZyBmcm9tIHRoZSBgZGV2aWNlbW90aW9uYCBldmVudCBzZW50IGJ5IHRoaXMgbW9kdWxlLlxuICAgICAqXG4gICAgICogQHRoaXMgRGV2aWNlTW90aW9uTW9kdWxlXG4gICAgICogQHR5cGUge251bWJlcltdfVxuICAgICAqIEBkZWZhdWx0IFtudWxsLCBudWxsLCBudWxsLCBudWxsLCBudWxsLCBudWxsLCBudWxsLCBudWxsLCBudWxsXVxuICAgICAqL1xuICAgIHZhciBfdGhpcyA9IF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIChEZXZpY2VNb3Rpb25Nb2R1bGUuX19wcm90b19fIHx8IE9iamVjdC5nZXRQcm90b3R5cGVPZihEZXZpY2VNb3Rpb25Nb2R1bGUpKS5jYWxsKHRoaXMsICdkZXZpY2Vtb3Rpb24nKSk7XG5cbiAgICBfdGhpcy5ldmVudCA9IFtudWxsLCBudWxsLCBudWxsLCBudWxsLCBudWxsLCBudWxsLCBudWxsLCBudWxsLCBudWxsXTtcblxuICAgIC8qKlxuICAgICAqIFRoZSBgQWNjZWxlcmF0aW9uSW5jbHVkaW5nR3Jhdml0eWAgbW9kdWxlLlxuICAgICAqIFByb3ZpZGVzIHVuaWZpZWQgdmFsdWVzIG9mIHRoZSBhY2NlbGVyYXRpb24gaW5jbHVkaW5nIGdyYXZpdHkuXG4gICAgICpcbiAgICAgKiBAdGhpcyBEZXZpY2VNb3Rpb25Nb2R1bGVcbiAgICAgKiBAdHlwZSB7RE9NRXZlbnRTdWJtb2R1bGV9XG4gICAgICovXG4gICAgX3RoaXMuYWNjZWxlcmF0aW9uSW5jbHVkaW5nR3Jhdml0eSA9IG5ldyBfRE9NRXZlbnRTdWJtb2R1bGUyLmRlZmF1bHQoX3RoaXMsICdhY2NlbGVyYXRpb25JbmNsdWRpbmdHcmF2aXR5Jyk7XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYEFjY2VsZXJhdGlvbmAgc3VibW9kdWxlLlxuICAgICAqIFByb3ZpZGVzIHVuaWZpZWQgdmFsdWVzIG9mIHRoZSBhY2NlbGVyYXRpb24uXG4gICAgICogRXN0aW1hdGVzIHRoZSBhY2NlbGVyYXRpb24gdmFsdWVzIGZyb20gYGFjY2VsZXJhdGlvbkluY2x1ZGluZ0dyYXZpdHlgXG4gICAgICogcmF3IHZhbHVlcyBpZiB0aGUgYWNjZWxlcmF0aW9uIHJhdyB2YWx1ZXMgYXJlIG5vdCBhdmFpbGFibGUgb24gdGhlXG4gICAgICogZGV2aWNlLlxuICAgICAqXG4gICAgICogQHRoaXMgRGV2aWNlTW90aW9uTW9kdWxlXG4gICAgICogQHR5cGUge0RPTUV2ZW50U3VibW9kdWxlfVxuICAgICAqL1xuICAgIF90aGlzLmFjY2VsZXJhdGlvbiA9IG5ldyBfRE9NRXZlbnRTdWJtb2R1bGUyLmRlZmF1bHQoX3RoaXMsICdhY2NlbGVyYXRpb24nKTtcblxuICAgIC8qKlxuICAgICAqIFRoZSBgUm90YXRpb25SYXRlYCBzdWJtb2R1bGUuXG4gICAgICogUHJvdmlkZXMgdW5pZmllZCB2YWx1ZXMgb2YgdGhlIHJvdGF0aW9uIHJhdGUuXG4gICAgICogKGNvbWluZyBzb29uLCB3YWl0aW5nIGZvciBhIGJ1ZyBvbiBDaHJvbWUgdG8gYmUgcmVzb2x2ZWQpXG4gICAgICogRXN0aW1hdGVzIHRoZSByb3RhdGlvbiByYXRlIHZhbHVlcyBmcm9tIGBvcmllbnRhdGlvbmAgdmFsdWVzIGlmXG4gICAgICogdGhlIHJvdGF0aW9uIHJhdGUgcmF3IHZhbHVlcyBhcmUgbm90IGF2YWlsYWJsZSBvbiB0aGUgZGV2aWNlLlxuICAgICAqXG4gICAgICogQHRoaXMgRGV2aWNlTW90aW9uTW9kdWxlXG4gICAgICogQHR5cGUge0RPTUV2ZW50U3VibW9kdWxlfVxuICAgICAqL1xuICAgIF90aGlzLnJvdGF0aW9uUmF0ZSA9IG5ldyBfRE9NRXZlbnRTdWJtb2R1bGUyLmRlZmF1bHQoX3RoaXMsICdyb3RhdGlvblJhdGUnKTtcblxuICAgIC8qKlxuICAgICAqIFJlcXVpcmVkIHN1Ym1vZHVsZXMgLyBldmVudHMuXG4gICAgICpcbiAgICAgKiBAdGhpcyBEZXZpY2VNb3Rpb25Nb2R1bGVcbiAgICAgKiBAdHlwZSB7b2JqZWN0fVxuICAgICAqIEBwcm9wZXJ0eSB7Ym9vbH0gYWNjZWxlcmF0aW9uSW5jbHVkaW5nR3Jhdml0eSAtIEluZGljYXRlcyB3aGV0aGVyIHRoZSBgYWNjZWxlcmF0aW9uSW5jbHVkaW5nR3Jhdml0eWAgdW5pZmllZCB2YWx1ZXMgYXJlIHJlcXVpcmVkIG9yIG5vdCAoZGVmYXVsdHMgdG8gYGZhbHNlYCkuXG4gICAgICogQHByb3BlcnR5IHtib29sfSBhY2NlbGVyYXRpb24gLSBJbmRpY2F0ZXMgd2hldGhlciB0aGUgYGFjY2VsZXJhdGlvbmAgdW5pZmllZCB2YWx1ZXMgYXJlIHJlcXVpcmVkIG9yIG5vdCAoZGVmYXVsdHMgdG8gYGZhbHNlYCkuXG4gICAgICogQHByb3BlcnR5IHtib29sfSByb3RhdGlvblJhdGUgLSBJbmRpY2F0ZXMgd2hldGhlciB0aGUgYHJvdGF0aW9uUmF0ZWAgdW5pZmllZCB2YWx1ZXMgYXJlIHJlcXVpcmVkIG9yIG5vdCAoZGVmYXVsdHMgdG8gYGZhbHNlYCkuXG4gICAgICovXG4gICAgX3RoaXMucmVxdWlyZWQgPSB7XG4gICAgICBhY2NlbGVyYXRpb25JbmNsdWRpbmdHcmF2aXR5OiBmYWxzZSxcbiAgICAgIGFjY2VsZXJhdGlvbjogZmFsc2UsXG4gICAgICByb3RhdGlvblJhdGU6IGZhbHNlXG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIFJlc29sdmUgZnVuY3Rpb24gb2YgdGhlIG1vZHVsZSdzIHByb21pc2UuXG4gICAgICpcbiAgICAgKiBAdGhpcyBEZXZpY2VNb3Rpb25Nb2R1bGVcbiAgICAgKiBAdHlwZSB7ZnVuY3Rpb259XG4gICAgICogQGRlZmF1bHQgbnVsbFxuICAgICAqIEBzZWUgRGV2aWNlTW90aW9uTW9kdWxlI2luaXRcbiAgICAgKi9cbiAgICBfdGhpcy5fcHJvbWlzZVJlc29sdmUgPSBudWxsO1xuXG4gICAgLyoqXG4gICAgICogVW5pZnlpbmcgZmFjdG9yIG9mIHRoZSBtb3Rpb24gZGF0YSB2YWx1ZXMgKGAxYCBvbiBBbmRyb2lkLCBgLTFgIG9uIGlPUykuXG4gICAgICpcbiAgICAgKiBAdGhpcyBEZXZpY2VNb3Rpb25Nb2R1bGVcbiAgICAgKiBAdHlwZSB7bnVtYmVyfVxuICAgICAqL1xuICAgIF90aGlzLl91bmlmeU1vdGlvbkRhdGEgPSBfcGxhdGZvcm0yLmRlZmF1bHQub3MuZmFtaWx5ID09PSAnaU9TJyA/IC0xIDogMTtcblxuICAgIC8qKlxuICAgICAqIFVuaWZ5aW5nIGZhY3RvciBvZiB0aGUgcGVyaW9kIChgMWAgb24gQW5kcm9pZCwgYDFgIG9uIGlPUykuIGluIHNlY1xuICAgICAqIEB0b2RvIC0gdW5pZnkgd2l0aCBlLmludGVydmFsIHNwZWNpZmljYXRpb24gKGluIG1zKSA/XG4gICAgICpcbiAgICAgKiBAdGhpcyBEZXZpY2VNb3Rpb25Nb2R1bGVcbiAgICAgKiBAdHlwZSB7bnVtYmVyfVxuICAgICAqL1xuICAgIF90aGlzLl91bmlmeVBlcmlvZCA9IF9wbGF0Zm9ybTIuZGVmYXVsdC5vcy5mYW1pbHkgPT09ICdBbmRyb2lkJyA/IDAuMDAxIDogMTtcblxuICAgIC8qKlxuICAgICAqIEFjY2VsZXJhdGlvbiBjYWxjdWxhdGVkIGZyb20gdGhlIGBhY2NlbGVyYXRpb25JbmNsdWRpbmdHcmF2aXR5YCByYXcgdmFsdWVzLlxuICAgICAqXG4gICAgICogQHRoaXMgRGV2aWNlTW90aW9uTW9kdWxlXG4gICAgICogQHR5cGUge251bWJlcltdfVxuICAgICAqIEBkZWZhdWx0IFswLCAwLCAwXVxuICAgICAqL1xuICAgIF90aGlzLl9jYWxjdWxhdGVkQWNjZWxlcmF0aW9uID0gWzAsIDAsIDBdO1xuXG4gICAgLyoqXG4gICAgICogVGltZSBjb25zdGFudCAoaGFsZi1saWZlKSBvZiB0aGUgaGlnaC1wYXNzIGZpbHRlciB1c2VkIHRvIHNtb290aCB0aGUgYWNjZWxlcmF0aW9uIHZhbHVlcyBjYWxjdWxhdGVkIGZyb20gdGhlIGFjY2VsZXJhdGlvbiBpbmNsdWRpbmcgZ3Jhdml0eSByYXcgdmFsdWVzIChpbiBzZWNvbmRzKS5cbiAgICAgKlxuICAgICAqIEB0aGlzIERldmljZU1vdGlvbk1vZHVsZVxuICAgICAqIEB0eXBlIHtudW1iZXJ9XG4gICAgICogQGRlZmF1bHQgMC4xXG4gICAgICogQGNvbnN0YW50XG4gICAgICovXG4gICAgX3RoaXMuX2NhbGN1bGF0ZWRBY2NlbGVyYXRpb25UaW1lQ29uc3RhbnQgPSAwLjE7XG5cbiAgICAvKipcbiAgICAgKiBMYXRlc3QgYGFjY2VsZXJhdGlvbkluY2x1ZGluZ0dyYXZpdHlgIHJhdyB2YWx1ZSwgdXNlZCBpbiB0aGUgaGlnaC1wYXNzIGZpbHRlciB0byBjYWxjdWxhdGUgdGhlIGFjY2VsZXJhdGlvbiAoaWYgdGhlIGBhY2NlbGVyYXRpb25gIHZhbHVlcyBhcmUgbm90IHByb3ZpZGVkIGJ5IGAnZGV2aWNlbW90aW9uJ2ApLlxuICAgICAqXG4gICAgICogQHRoaXMgRGV2aWNlTW90aW9uTW9kdWxlXG4gICAgICogQHR5cGUge251bWJlcltdfVxuICAgICAqIEBkZWZhdWx0IFswLCAwLCAwXVxuICAgICAqL1xuICAgIF90aGlzLl9sYXN0QWNjZWxlcmF0aW9uSW5jbHVkaW5nR3Jhdml0eSA9IFswLCAwLCAwXTtcblxuICAgIC8qKlxuICAgICAqIFJvdGF0aW9uIHJhdGUgY2FsY3VsYXRlZCBmcm9tIHRoZSBvcmllbnRhdGlvbiB2YWx1ZXMuXG4gICAgICpcbiAgICAgKiBAdGhpcyBEZXZpY2VNb3Rpb25Nb2R1bGVcbiAgICAgKiBAdHlwZSB7bnVtYmVyW119XG4gICAgICogQGRlZmF1bHQgWzAsIDAsIDBdXG4gICAgICovXG4gICAgX3RoaXMuX2NhbGN1bGF0ZWRSb3RhdGlvblJhdGUgPSBbMCwgMCwgMF07XG5cbiAgICAvKipcbiAgICAgKiBMYXRlc3Qgb3JpZW50YXRpb24gdmFsdWUsIHVzZWQgdG8gY2FsY3VsYXRlIHRoZSByb3RhdGlvbiByYXRlICAoaWYgdGhlIGByb3RhdGlvblJhdGVgIHZhbHVlcyBhcmUgbm90IHByb3ZpZGVkIGJ5IGAnZGV2aWNlbW90aW9uJ2ApLlxuICAgICAqXG4gICAgICogQHRoaXMgRGV2aWNlTW90aW9uTW9kdWxlXG4gICAgICogQHR5cGUge251bWJlcltdfVxuICAgICAqIEBkZWZhdWx0IFswLCAwLCAwXVxuICAgICAqL1xuICAgIF90aGlzLl9sYXN0T3JpZW50YXRpb24gPSBbMCwgMCwgMF07XG5cbiAgICAvKipcbiAgICAgKiBMYXRlc3Qgb3JpZW50YXRpb24gdGltZXN0YW1wcywgdXNlZCB0byBjYWxjdWxhdGUgdGhlIHJvdGF0aW9uIHJhdGUgKGlmIHRoZSBgcm90YXRpb25SYXRlYCB2YWx1ZXMgYXJlIG5vdCBwcm92aWRlZCBieSBgJ2RldmljZW1vdGlvbidgKS5cbiAgICAgKlxuICAgICAqIEB0aGlzIERldmljZU1vdGlvbk1vZHVsZVxuICAgICAqIEB0eXBlIHtudW1iZXJbXX1cbiAgICAgKiBAZGVmYXVsdCBbMCwgMCwgMF1cbiAgICAgKi9cbiAgICBfdGhpcy5fbGFzdE9yaWVudGF0aW9uVGltZXN0YW1wID0gbnVsbDtcblxuICAgIF90aGlzLl9wcm9jZXNzRnVuY3Rpb24gPSBudWxsO1xuICAgIF90aGlzLl9wcm9jZXNzID0gX3RoaXMuX3Byb2Nlc3MuYmluZChfdGhpcyk7XG4gICAgX3RoaXMuX2RldmljZW1vdGlvbkNoZWNrID0gX3RoaXMuX2RldmljZW1vdGlvbkNoZWNrLmJpbmQoX3RoaXMpO1xuICAgIF90aGlzLl9kZXZpY2Vtb3Rpb25MaXN0ZW5lciA9IF90aGlzLl9kZXZpY2Vtb3Rpb25MaXN0ZW5lci5iaW5kKF90aGlzKTtcblxuICAgIF90aGlzLl9jaGVja0NvdW50ZXIgPSAwO1xuICAgIHJldHVybiBfdGhpcztcbiAgfVxuXG4gIC8qKlxuICAgKiBEZWNheSBmYWN0b3Igb2YgdGhlIGhpZ2gtcGFzcyBmaWx0ZXIgdXNlZCB0byBjYWxjdWxhdGUgdGhlIGFjY2VsZXJhdGlvbiBmcm9tIHRoZSBgYWNjZWxlcmF0aW9uSW5jbHVkaW5nR3Jhdml0eWAgcmF3IHZhbHVlcy5cbiAgICpcbiAgICogQHR5cGUge251bWJlcn1cbiAgICogQHJlYWRvbmx5XG4gICAqL1xuXG5cbiAgX2NyZWF0ZUNsYXNzKERldmljZU1vdGlvbk1vZHVsZSwgW3tcbiAgICBrZXk6ICdfZGV2aWNlbW90aW9uQ2hlY2snLFxuXG5cbiAgICAvKipcbiAgICAgKiBTZW5zb3IgY2hlY2sgb24gaW5pdGlhbGl6YXRpb24gb2YgdGhlIG1vZHVsZS5cbiAgICAgKiBUaGlzIG1ldGhvZDpcbiAgICAgKiAtIGNoZWNrcyB3aGV0aGVyIHRoZSBgYWNjZWxlcmF0aW9uSW5jbHVkaW5nR3Jhdml0eWAsIHRoZSBgYWNjZWxlcmF0aW9uYCxcbiAgICAgKiAgIGFuZCB0aGUgYHJvdGF0aW9uUmF0ZWAgdmFsdWVzIGFyZSB2YWxpZCBvciBub3Q7XG4gICAgICogLSBnZXRzIHRoZSBwZXJpb2Qgb2YgdGhlIGAnZGV2aWNlbW90aW9uJ2AgZXZlbnQgYW5kIHNldHMgdGhlIHBlcmlvZCBvZlxuICAgICAqICAgdGhlIGBBY2NlbGVyYXRpb25JbmNsdWRpbmdHcmF2aXR5YCwgYEFjY2VsZXJhdGlvbmAsIGFuZCBgUm90YXRpb25SYXRlYFxuICAgICAqICAgc3VibW9kdWxlcztcbiAgICAgKiAtIChpbiB0aGUgY2FzZSB3aGVyZSBhY2NlbGVyYXRpb24gcmF3IHZhbHVlcyBhcmUgbm90IHByb3ZpZGVkKVxuICAgICAqICAgaW5kaWNhdGVzIHdoZXRoZXIgdGhlIGFjY2VsZXJhdGlvbiBjYW4gYmUgY2FsY3VsYXRlZCBmcm9tIHRoZVxuICAgICAqICAgYGFjY2VsZXJhdGlvbkluY2x1ZGluZ0dyYXZpdHlgIHVuaWZpZWQgdmFsdWVzIG9yIG5vdC5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7RGV2aWNlTW90aW9uRXZlbnR9IGUgLSBUaGUgZmlyc3QgYCdkZXZpY2Vtb3Rpb24nYCBldmVudCBjYXVnaHQuXG4gICAgICovXG4gICAgdmFsdWU6IGZ1bmN0aW9uIF9kZXZpY2Vtb3Rpb25DaGVjayhlKSB7XG4gICAgICAvLyBjbGVhciB0aW1lb3V0IChhbnRpLUZpcmVmb3ggYnVnIHNvbHV0aW9uLCB3aW5kb3cgZXZlbnQgZGV2aWNlb3JpZW50YXRpb24gYmVpbmcgbnZlciBjYWxsZWQpXG4gICAgICAvLyBzZXQgdGhlIHNldCB0aW1lb3V0IGluIGluaXQoKSBmdW5jdGlvblxuICAgICAgY2xlYXJUaW1lb3V0KHRoaXMuX2NoZWNrVGltZW91dElkKTtcblxuICAgICAgdGhpcy5pc1Byb3ZpZGVkID0gdHJ1ZTtcbiAgICAgIHRoaXMucGVyaW9kID0gZS5pbnRlcnZhbCAvIDEwMDA7XG4gICAgICB0aGlzLmludGVydmFsID0gZS5pbnRlcnZhbDtcblxuICAgICAgLy8gU2Vuc29yIGF2YWlsYWJpbGl0eSBmb3IgdGhlIGFjY2VsZXJhdGlvbiBpbmNsdWRpbmcgZ3Jhdml0eVxuICAgICAgdGhpcy5hY2NlbGVyYXRpb25JbmNsdWRpbmdHcmF2aXR5LmlzUHJvdmlkZWQgPSBlLmFjY2VsZXJhdGlvbkluY2x1ZGluZ0dyYXZpdHkgJiYgdHlwZW9mIGUuYWNjZWxlcmF0aW9uSW5jbHVkaW5nR3Jhdml0eS54ID09PSAnbnVtYmVyJyAmJiB0eXBlb2YgZS5hY2NlbGVyYXRpb25JbmNsdWRpbmdHcmF2aXR5LnkgPT09ICdudW1iZXInICYmIHR5cGVvZiBlLmFjY2VsZXJhdGlvbkluY2x1ZGluZ0dyYXZpdHkueiA9PT0gJ251bWJlcic7XG4gICAgICB0aGlzLmFjY2VsZXJhdGlvbkluY2x1ZGluZ0dyYXZpdHkucGVyaW9kID0gZS5pbnRlcnZhbCAqIHRoaXMuX3VuaWZ5UGVyaW9kO1xuXG4gICAgICAvLyBTZW5zb3IgYXZhaWxhYmlsaXR5IGZvciB0aGUgYWNjZWxlcmF0aW9uXG4gICAgICB0aGlzLmFjY2VsZXJhdGlvbi5pc1Byb3ZpZGVkID0gZS5hY2NlbGVyYXRpb24gJiYgdHlwZW9mIGUuYWNjZWxlcmF0aW9uLnggPT09ICdudW1iZXInICYmIHR5cGVvZiBlLmFjY2VsZXJhdGlvbi55ID09PSAnbnVtYmVyJyAmJiB0eXBlb2YgZS5hY2NlbGVyYXRpb24ueiA9PT0gJ251bWJlcic7XG4gICAgICB0aGlzLmFjY2VsZXJhdGlvbi5wZXJpb2QgPSBlLmludGVydmFsICogdGhpcy5fdW5pZnlQZXJpb2Q7XG5cbiAgICAgIC8vIFNlbnNvciBhdmFpbGFiaWxpdHkgZm9yIHRoZSByb3RhdGlvbiByYXRlXG4gICAgICB0aGlzLnJvdGF0aW9uUmF0ZS5pc1Byb3ZpZGVkID0gZS5yb3RhdGlvblJhdGUgJiYgdHlwZW9mIGUucm90YXRpb25SYXRlLmFscGhhID09PSAnbnVtYmVyJyAmJiB0eXBlb2YgZS5yb3RhdGlvblJhdGUuYmV0YSA9PT0gJ251bWJlcicgJiYgdHlwZW9mIGUucm90YXRpb25SYXRlLmdhbW1hID09PSAnbnVtYmVyJztcbiAgICAgIHRoaXMucm90YXRpb25SYXRlLnBlcmlvZCA9IGUuaW50ZXJ2YWwgKiB0aGlzLl91bmlmeVBlcmlvZDtcblxuICAgICAgLy8gaW4gZmlyZWZveCBhbmRyb2lkLCBhY2NlbGVyYXRpb25JbmNsdWRpbmdHcmF2aXR5IHJldHJpZXZlIG51bGwgdmFsdWVzXG4gICAgICAvLyBvbiB0aGUgZmlyc3QgY2FsbGJhY2suIHNvIHdhaXQgYSBzZWNvbmQgY2FsbCB0byBiZSBzdXJlLlxuICAgICAgaWYgKF9wbGF0Zm9ybTIuZGVmYXVsdC5vcy5mYW1pbHkgPT09ICdBbmRyb2lkJyAmJiAvRmlyZWZveC8udGVzdChfcGxhdGZvcm0yLmRlZmF1bHQubmFtZSkgJiYgdGhpcy5fY2hlY2tDb3VudGVyIDwgMSkge1xuICAgICAgICB0aGlzLl9jaGVja0NvdW50ZXIrKztcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIC8vIG5vdyB0aGF0IHRoZSBzZW5zb3JzIGFyZSBjaGVja2VkLCByZXBsYWNlIHRoZSBwcm9jZXNzIGZ1bmN0aW9uIHdpdGhcbiAgICAgICAgLy8gdGhlIGZpbmFsIGxpc3RlbmVyXG4gICAgICAgIHRoaXMuX3Byb2Nlc3NGdW5jdGlvbiA9IHRoaXMuX2RldmljZW1vdGlvbkxpc3RlbmVyO1xuXG4gICAgICAgIC8vIGlmIGFjY2VsZXJhdGlvbiBpcyBub3QgcHJvdmlkZWQgYnkgcmF3IHNlbnNvcnMsIGluZGljYXRlIHdoZXRoZXIgaXRcbiAgICAgICAgLy8gY2FuIGJlIGNhbGN1bGF0ZWQgd2l0aCBgYWNjZWxlcmF0aW9uaW5jbHVkaW5nZ3Jhdml0eWAgb3Igbm90XG4gICAgICAgIGlmICghdGhpcy5hY2NlbGVyYXRpb24uaXNQcm92aWRlZCkgdGhpcy5hY2NlbGVyYXRpb24uaXNDYWxjdWxhdGVkID0gdGhpcy5hY2NlbGVyYXRpb25JbmNsdWRpbmdHcmF2aXR5LmlzUHJvdmlkZWQ7XG5cbiAgICAgICAgLy8gV0FSTklOR1xuICAgICAgICAvLyBUaGUgbGluZXMgb2YgY29kZSBiZWxvdyBhcmUgY29tbWVudGVkIGJlY2F1c2Ugb2YgYSBidWcgb2YgQ2hyb21lXG4gICAgICAgIC8vIG9uIHNvbWUgQW5kcm9pZCBkZXZpY2VzLCB3aGVyZSAnZGV2aWNlbW90aW9uJyBldmVudHMgYXJlIG5vdCBzZW50XG4gICAgICAgIC8vIG9yIGNhdWdodCBpZiB0aGUgbGlzdGVuZXIgaXMgc2V0IHVwIGFmdGVyIGEgJ2RldmljZW9yaWVudGF0aW9uJ1xuICAgICAgICAvLyBsaXN0ZW5lci4gSGVyZSwgdGhlIF90cnlPcmllbnRhdGlvbkZhbGxiYWNrIG1ldGhvZCB3b3VsZCBhZGQgYVxuICAgICAgICAvLyAnZGV2aWNlb3JpZW50YXRpb24nIGxpc3RlbmVyIGFuZCBibG9jayBhbGwgc3Vic2VxdWVudCAnZGV2aWNlbW90aW9uJ1xuICAgICAgICAvLyBldmVudHMgb24gdGhlc2UgZGV2aWNlcy4gQ29tbWVudHMgd2lsbCBiZSByZW1vdmVkIG9uY2UgdGhlIGJ1ZyBvZlxuICAgICAgICAvLyBDaHJvbWUgaXMgY29ycmVjdGVkLlxuXG4gICAgICAgIC8vIGlmICh0aGlzLnJlcXVpcmVkLnJvdGF0aW9uUmF0ZSAmJiAhdGhpcy5yb3RhdGlvblJhdGUuaXNQcm92aWRlZClcbiAgICAgICAgLy8gICB0aGlzLl90cnlPcmllbnRhdGlvbkZhbGxiYWNrKCk7XG4gICAgICAgIC8vIGVsc2VcbiAgICAgICAgdGhpcy5fcHJvbWlzZVJlc29sdmUodGhpcyk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogYCdkZXZpY2Vtb3Rpb24nYCBldmVudCBjYWxsYmFjay5cbiAgICAgKiBUaGlzIG1ldGhvZCBlbWl0cyBhbiBldmVudCB3aXRoIHRoZSByYXcgYCdkZXZpY2Vtb3Rpb24nYCB2YWx1ZXMsIGFuZCBlbWl0c1xuICAgICAqIGV2ZW50cyB3aXRoIHRoZSB1bmlmaWVkIGBhY2NlbGVyYXRpb25JbmNsdWRpbmdHcmF2aXR5YCwgYGFjY2VsZXJhdGlvbmAsXG4gICAgICogYW5kIC8gb3IgYHJvdGF0aW9uUmF0ZWAgdmFsdWVzIGlmIHRoZXkgYXJlIHJlcXVpcmVkLlxuICAgICAqXG4gICAgICogQHBhcmFtIHtEZXZpY2VNb3Rpb25FdmVudH0gZSAtIGAnZGV2aWNlbW90aW9uJ2AgZXZlbnQgdGhlIHZhbHVlcyBhcmUgY2FsY3VsYXRlZCBmcm9tLlxuICAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6ICdfZGV2aWNlbW90aW9uTGlzdGVuZXInLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBfZGV2aWNlbW90aW9uTGlzdGVuZXIoZSkge1xuICAgICAgLy8gJ2RldmljZW1vdGlvbicgZXZlbnQgKHJhdyB2YWx1ZXMpXG4gICAgICBpZiAodGhpcy5saXN0ZW5lcnMuc2l6ZSA+IDApIHRoaXMuX2VtaXREZXZpY2VNb3Rpb25FdmVudChlKTtcblxuICAgICAgLy8gYWxlcnQoYCR7dGhpcy5hY2NlbGVyYXRpb25JbmNsdWRpbmdHcmF2aXR5Lmxpc3RlbmVycy5zaXplfSAtXG4gICAgICAvLyAgICAgJHt0aGlzLnJlcXVpcmVkLmFjY2VsZXJhdGlvbkluY2x1ZGluZ0dyYXZpdHl9IC1cbiAgICAgIC8vICAgICAke3RoaXMuYWNjZWxlcmF0aW9uSW5jbHVkaW5nR3Jhdml0eS5pc1ZhbGlkfVxuICAgICAgLy8gYCk7XG5cbiAgICAgIC8vICdhY2NlbGVyYXRpb24nIGV2ZW50ICh1bmlmaWVkIHZhbHVlcylcbiAgICAgIGlmICh0aGlzLmFjY2VsZXJhdGlvbkluY2x1ZGluZ0dyYXZpdHkubGlzdGVuZXJzLnNpemUgPiAwICYmIHRoaXMucmVxdWlyZWQuYWNjZWxlcmF0aW9uSW5jbHVkaW5nR3Jhdml0eSAmJiB0aGlzLmFjY2VsZXJhdGlvbkluY2x1ZGluZ0dyYXZpdHkuaXNWYWxpZCkge1xuICAgICAgICB0aGlzLl9lbWl0QWNjZWxlcmF0aW9uSW5jbHVkaW5nR3Jhdml0eUV2ZW50KGUpO1xuICAgICAgfVxuXG4gICAgICAvLyAnYWNjZWxlcmF0aW9uSW5jbHVkaW5nR3Jhdml0eScgZXZlbnQgKHVuaWZpZWQgdmFsdWVzKVxuICAgICAgLy8gdGhlIGZhbGxiYWNrIGNhbGN1bGF0aW9uIG9mIHRoZSBhY2NlbGVyYXRpb24gaGFwcGVucyBpbiB0aGVcbiAgICAgIC8vICBgX2VtaXRBY2NlbGVyYXRpb25gIG1ldGhvZCwgc28gd2UgY2hlY2sgaWYgdGhpcy5hY2NlbGVyYXRpb24uaXNWYWxpZFxuICAgICAgaWYgKHRoaXMuYWNjZWxlcmF0aW9uLmxpc3RlbmVycy5zaXplID4gMCAmJiB0aGlzLnJlcXVpcmVkLmFjY2VsZXJhdGlvbiAmJiB0aGlzLmFjY2VsZXJhdGlvbi5pc1ZhbGlkKSB7XG4gICAgICAgIHRoaXMuX2VtaXRBY2NlbGVyYXRpb25FdmVudChlKTtcbiAgICAgIH1cblxuICAgICAgLy8gJ3JvdGF0aW9uUmF0ZScgZXZlbnQgKHVuaWZpZWQgdmFsdWVzKVxuICAgICAgLy8gdGhlIGZhbGxiYWNrIGNhbGN1bGF0aW9uIG9mIHRoZSByb3RhdGlvbiByYXRlIGRvZXMgTk9UIGhhcHBlbiBpbiB0aGVcbiAgICAgIC8vIGBfZW1pdFJvdGF0aW9uUmF0ZWAgbWV0aG9kLCBzbyB3ZSBvbmx5IGNoZWNrIGlmIHRoaXMucm90YXRpb25SYXRlLmlzUHJvdmlkZWRcbiAgICAgIGlmICh0aGlzLnJvdGF0aW9uUmF0ZS5saXN0ZW5lcnMuc2l6ZSA+IDAgJiYgdGhpcy5yZXF1aXJlZC5yb3RhdGlvblJhdGUgJiYgdGhpcy5yb3RhdGlvblJhdGUuaXNQcm92aWRlZCkge1xuICAgICAgICB0aGlzLl9lbWl0Um90YXRpb25SYXRlRXZlbnQoZSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogRW1pdHMgdGhlIGAnZGV2aWNlbW90aW9uJ2AgcmF3IHZhbHVlcy5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7RGV2aWNlTW90aW9uRXZlbnR9IGUgLSBgJ2RldmljZW1vdGlvbidgIGV2ZW50IHRoZSB2YWx1ZXMgYXJlIGNhbGN1bGF0ZWQgZnJvbS5cbiAgICAgKi9cblxuICB9LCB7XG4gICAga2V5OiAnX2VtaXREZXZpY2VNb3Rpb25FdmVudCcsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIF9lbWl0RGV2aWNlTW90aW9uRXZlbnQoZSkge1xuICAgICAgdmFyIG91dEV2ZW50ID0gdGhpcy5ldmVudDtcblxuICAgICAgaWYgKGUuYWNjZWxlcmF0aW9uSW5jbHVkaW5nR3Jhdml0eSkge1xuICAgICAgICBvdXRFdmVudFswXSA9IGUuYWNjZWxlcmF0aW9uSW5jbHVkaW5nR3Jhdml0eS54O1xuICAgICAgICBvdXRFdmVudFsxXSA9IGUuYWNjZWxlcmF0aW9uSW5jbHVkaW5nR3Jhdml0eS55O1xuICAgICAgICBvdXRFdmVudFsyXSA9IGUuYWNjZWxlcmF0aW9uSW5jbHVkaW5nR3Jhdml0eS56O1xuICAgICAgfVxuXG4gICAgICBpZiAoZS5hY2NlbGVyYXRpb24pIHtcbiAgICAgICAgb3V0RXZlbnRbM10gPSBlLmFjY2VsZXJhdGlvbi54O1xuICAgICAgICBvdXRFdmVudFs0XSA9IGUuYWNjZWxlcmF0aW9uLnk7XG4gICAgICAgIG91dEV2ZW50WzVdID0gZS5hY2NlbGVyYXRpb24uejtcbiAgICAgIH1cblxuICAgICAgaWYgKGUucm90YXRpb25SYXRlKSB7XG4gICAgICAgIG91dEV2ZW50WzZdID0gZS5yb3RhdGlvblJhdGUuYWxwaGE7XG4gICAgICAgIG91dEV2ZW50WzddID0gZS5yb3RhdGlvblJhdGUuYmV0YTtcbiAgICAgICAgb3V0RXZlbnRbOF0gPSBlLnJvdGF0aW9uUmF0ZS5nYW1tYTtcbiAgICAgIH1cblxuICAgICAgdGhpcy5lbWl0KG91dEV2ZW50KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBFbWl0cyB0aGUgYGFjY2VsZXJhdGlvbkluY2x1ZGluZ0dyYXZpdHlgIHVuaWZpZWQgdmFsdWVzLlxuICAgICAqXG4gICAgICogQHBhcmFtIHtEZXZpY2VNb3Rpb25FdmVudH0gZSAtIGAnZGV2aWNlbW90aW9uJ2AgZXZlbnQgdGhlIHZhbHVlcyBhcmUgY2FsY3VsYXRlZCBmcm9tLlxuICAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6ICdfZW1pdEFjY2VsZXJhdGlvbkluY2x1ZGluZ0dyYXZpdHlFdmVudCcsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIF9lbWl0QWNjZWxlcmF0aW9uSW5jbHVkaW5nR3Jhdml0eUV2ZW50KGUpIHtcbiAgICAgIHZhciBvdXRFdmVudCA9IHRoaXMuYWNjZWxlcmF0aW9uSW5jbHVkaW5nR3Jhdml0eS5ldmVudDtcblxuICAgICAgb3V0RXZlbnRbMF0gPSBlLmFjY2VsZXJhdGlvbkluY2x1ZGluZ0dyYXZpdHkueCAqIHRoaXMuX3VuaWZ5TW90aW9uRGF0YTtcbiAgICAgIG91dEV2ZW50WzFdID0gZS5hY2NlbGVyYXRpb25JbmNsdWRpbmdHcmF2aXR5LnkgKiB0aGlzLl91bmlmeU1vdGlvbkRhdGE7XG4gICAgICBvdXRFdmVudFsyXSA9IGUuYWNjZWxlcmF0aW9uSW5jbHVkaW5nR3Jhdml0eS56ICogdGhpcy5fdW5pZnlNb3Rpb25EYXRhO1xuXG4gICAgICB0aGlzLmFjY2VsZXJhdGlvbkluY2x1ZGluZ0dyYXZpdHkuZW1pdChvdXRFdmVudCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogRW1pdHMgdGhlIGBhY2NlbGVyYXRpb25gIHVuaWZpZWQgdmFsdWVzLlxuICAgICAqIFdoZW4gdGhlIGBhY2NlbGVyYXRpb25gIHJhdyB2YWx1ZXMgYXJlIG5vdCBhdmFpbGFibGUsIHRoZSBtZXRob2RcbiAgICAgKiBhbHNvIGNhbGN1bGF0ZXMgdGhlIGFjY2VsZXJhdGlvbiBmcm9tIHRoZVxuICAgICAqIGBhY2NlbGVyYXRpb25JbmNsdWRpbmdHcmF2aXR5YCByYXcgdmFsdWVzLlxuICAgICAqXG4gICAgICogQHBhcmFtIHtEZXZpY2VNb3Rpb25FdmVudH0gZSAtIFRoZSBgJ2RldmljZW1vdGlvbidgIGV2ZW50LlxuICAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6ICdfZW1pdEFjY2VsZXJhdGlvbkV2ZW50JyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gX2VtaXRBY2NlbGVyYXRpb25FdmVudChlKSB7XG4gICAgICB2YXIgb3V0RXZlbnQgPSB0aGlzLmFjY2VsZXJhdGlvbi5ldmVudDtcblxuICAgICAgaWYgKHRoaXMuYWNjZWxlcmF0aW9uLmlzUHJvdmlkZWQpIHtcbiAgICAgICAgLy8gSWYgcmF3IGFjY2VsZXJhdGlvbiB2YWx1ZXMgYXJlIHByb3ZpZGVkXG4gICAgICAgIG91dEV2ZW50WzBdID0gZS5hY2NlbGVyYXRpb24ueCAqIHRoaXMuX3VuaWZ5TW90aW9uRGF0YTtcbiAgICAgICAgb3V0RXZlbnRbMV0gPSBlLmFjY2VsZXJhdGlvbi55ICogdGhpcy5fdW5pZnlNb3Rpb25EYXRhO1xuICAgICAgICBvdXRFdmVudFsyXSA9IGUuYWNjZWxlcmF0aW9uLnogKiB0aGlzLl91bmlmeU1vdGlvbkRhdGE7XG4gICAgICB9IGVsc2UgaWYgKHRoaXMuYWNjZWxlcmF0aW9uSW5jbHVkaW5nR3Jhdml0eS5pc1ZhbGlkKSB7XG4gICAgICAgIC8vIE90aGVyd2lzZSwgaWYgYWNjZWxlcmF0aW9uSW5jbHVkaW5nR3Jhdml0eSB2YWx1ZXMgYXJlIHByb3ZpZGVkLFxuICAgICAgICAvLyBlc3RpbWF0ZSB0aGUgYWNjZWxlcmF0aW9uIHdpdGggYSBoaWdoLXBhc3MgZmlsdGVyXG4gICAgICAgIHZhciBhY2NlbGVyYXRpb25JbmNsdWRpbmdHcmF2aXR5ID0gW2UuYWNjZWxlcmF0aW9uSW5jbHVkaW5nR3Jhdml0eS54ICogdGhpcy5fdW5pZnlNb3Rpb25EYXRhLCBlLmFjY2VsZXJhdGlvbkluY2x1ZGluZ0dyYXZpdHkueSAqIHRoaXMuX3VuaWZ5TW90aW9uRGF0YSwgZS5hY2NlbGVyYXRpb25JbmNsdWRpbmdHcmF2aXR5LnogKiB0aGlzLl91bmlmeU1vdGlvbkRhdGFdO1xuICAgICAgICB2YXIgayA9IHRoaXMuX2NhbGN1bGF0ZWRBY2NlbGVyYXRpb25EZWNheTtcblxuICAgICAgICAvLyBIaWdoLXBhc3MgZmlsdGVyIHRvIGVzdGltYXRlIHRoZSBhY2NlbGVyYXRpb24gKHdpdGhvdXQgdGhlIGdyYXZpdHkpXG4gICAgICAgIHRoaXMuX2NhbGN1bGF0ZWRBY2NlbGVyYXRpb25bMF0gPSAoMSArIGspICogMC41ICogKGFjY2VsZXJhdGlvbkluY2x1ZGluZ0dyYXZpdHlbMF0gLSB0aGlzLl9sYXN0QWNjZWxlcmF0aW9uSW5jbHVkaW5nR3Jhdml0eVswXSkgKyBrICogdGhpcy5fY2FsY3VsYXRlZEFjY2VsZXJhdGlvblswXTtcbiAgICAgICAgdGhpcy5fY2FsY3VsYXRlZEFjY2VsZXJhdGlvblsxXSA9ICgxICsgaykgKiAwLjUgKiAoYWNjZWxlcmF0aW9uSW5jbHVkaW5nR3Jhdml0eVsxXSAtIHRoaXMuX2xhc3RBY2NlbGVyYXRpb25JbmNsdWRpbmdHcmF2aXR5WzFdKSArIGsgKiB0aGlzLl9jYWxjdWxhdGVkQWNjZWxlcmF0aW9uWzFdO1xuICAgICAgICB0aGlzLl9jYWxjdWxhdGVkQWNjZWxlcmF0aW9uWzJdID0gKDEgKyBrKSAqIDAuNSAqIChhY2NlbGVyYXRpb25JbmNsdWRpbmdHcmF2aXR5WzJdIC0gdGhpcy5fbGFzdEFjY2VsZXJhdGlvbkluY2x1ZGluZ0dyYXZpdHlbMl0pICsgayAqIHRoaXMuX2NhbGN1bGF0ZWRBY2NlbGVyYXRpb25bMl07XG5cbiAgICAgICAgdGhpcy5fbGFzdEFjY2VsZXJhdGlvbkluY2x1ZGluZ0dyYXZpdHlbMF0gPSBhY2NlbGVyYXRpb25JbmNsdWRpbmdHcmF2aXR5WzBdO1xuICAgICAgICB0aGlzLl9sYXN0QWNjZWxlcmF0aW9uSW5jbHVkaW5nR3Jhdml0eVsxXSA9IGFjY2VsZXJhdGlvbkluY2x1ZGluZ0dyYXZpdHlbMV07XG4gICAgICAgIHRoaXMuX2xhc3RBY2NlbGVyYXRpb25JbmNsdWRpbmdHcmF2aXR5WzJdID0gYWNjZWxlcmF0aW9uSW5jbHVkaW5nR3Jhdml0eVsyXTtcblxuICAgICAgICBvdXRFdmVudFswXSA9IHRoaXMuX2NhbGN1bGF0ZWRBY2NlbGVyYXRpb25bMF07XG4gICAgICAgIG91dEV2ZW50WzFdID0gdGhpcy5fY2FsY3VsYXRlZEFjY2VsZXJhdGlvblsxXTtcbiAgICAgICAgb3V0RXZlbnRbMl0gPSB0aGlzLl9jYWxjdWxhdGVkQWNjZWxlcmF0aW9uWzJdO1xuICAgICAgfVxuXG4gICAgICB0aGlzLmFjY2VsZXJhdGlvbi5lbWl0KG91dEV2ZW50KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBFbWl0cyB0aGUgYHJvdGF0aW9uUmF0ZWAgdW5pZmllZCB2YWx1ZXMuXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge0RldmljZU1vdGlvbkV2ZW50fSBlIC0gYCdkZXZpY2Vtb3Rpb24nYCBldmVudCB0aGUgdmFsdWVzIGFyZSBjYWxjdWxhdGVkIGZyb20uXG4gICAgICovXG5cbiAgfSwge1xuICAgIGtleTogJ19lbWl0Um90YXRpb25SYXRlRXZlbnQnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBfZW1pdFJvdGF0aW9uUmF0ZUV2ZW50KGUpIHtcbiAgICAgIHZhciBvdXRFdmVudCA9IHRoaXMucm90YXRpb25SYXRlLmV2ZW50O1xuXG4gICAgICAvLyBJbiBhbGwgcGxhdGZvcm1zLCByb3RhdGlvbiBheGVzIGFyZSBtZXNzZWQgdXAgYWNjb3JkaW5nIHRvIHRoZSBzcGVjXG4gICAgICAvLyBodHRwczovL3czYy5naXRodWIuaW8vZGV2aWNlb3JpZW50YXRpb24vc3BlYy1zb3VyY2Utb3JpZW50YXRpb24uaHRtbFxuICAgICAgLy9cbiAgICAgIC8vIGdhbW1hIHNob3VsZCBiZSBhbHBoYVxuICAgICAgLy8gYWxwaGEgc2hvdWxkIGJlIGJldGFcbiAgICAgIC8vIGJldGEgc2hvdWxkIGJlIGdhbW1hXG5cbiAgICAgIG91dEV2ZW50WzBdID0gZS5yb3RhdGlvblJhdGUuZ2FtbWE7XG4gICAgICBvdXRFdmVudFsxXSA9IGUucm90YXRpb25SYXRlLmFscGhhLCBvdXRFdmVudFsyXSA9IGUucm90YXRpb25SYXRlLmJldGE7XG5cbiAgICAgIC8vIENocm9tZSBBbmRyb2lkIHJldHJpZXZlIHZhbHVlcyB0aGF0IGFyZSBpbiByYWQvc1xuICAgICAgLy8gY2YuIGh0dHBzOi8vYnVncy5jaHJvbWl1bS5vcmcvcC9jaHJvbWl1bS9pc3N1ZXMvZGV0YWlsP2lkPTU0MTYwN1xuICAgICAgLy9cbiAgICAgIC8vIEZyb20gc3BlYzogXCJUaGUgcm90YXRpb25SYXRlIGF0dHJpYnV0ZSBtdXN0IGJlIGluaXRpYWxpemVkIHdpdGggdGhlIHJhdGVcbiAgICAgIC8vIG9mIHJvdGF0aW9uIG9mIHRoZSBob3N0aW5nIGRldmljZSBpbiBzcGFjZS4gSXQgbXVzdCBiZSBleHByZXNzZWQgYXMgdGhlXG4gICAgICAvLyByYXRlIG9mIGNoYW5nZSBvZiB0aGUgYW5nbGVzIGRlZmluZWQgaW4gc2VjdGlvbiA0LjEgYW5kIG11c3QgYmUgZXhwcmVzc2VkXG4gICAgICAvLyBpbiBkZWdyZWVzIHBlciBzZWNvbmQgKGRlZy9zKS5cIlxuICAgICAgLy9cbiAgICAgIC8vIGZpeGVkIHNpbmNlIENocm9tZSA2NVxuICAgICAgLy8gY2YuIGh0dHBzOi8vZ2l0aHViLmNvbS9pbW1lcnNpdmUtd2ViL3dlYnZyLXBvbHlmaWxsL2lzc3Vlcy8zMDdcbiAgICAgIGlmIChfcGxhdGZvcm0yLmRlZmF1bHQub3MuZmFtaWx5ID09PSAnQW5kcm9pZCcgJiYgY2hyb21lUmVnRXhwLnRlc3QoX3BsYXRmb3JtMi5kZWZhdWx0Lm5hbWUpICYmIHBhcnNlSW50KF9wbGF0Zm9ybTIuZGVmYXVsdC52ZXJzaW9uLnNwbGl0KCcuJylbMF0pIDwgNjUpIHtcbiAgICAgICAgb3V0RXZlbnRbMF0gKj0gdG9EZWc7XG4gICAgICAgIG91dEV2ZW50WzFdICo9IHRvRGVnLCBvdXRFdmVudFsyXSAqPSB0b0RlZztcbiAgICAgIH1cblxuICAgICAgdGhpcy5yb3RhdGlvblJhdGUuZW1pdChvdXRFdmVudCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2FsY3VsYXRlcyBhbmQgZW1pdHMgdGhlIGByb3RhdGlvblJhdGVgIHVuaWZpZWQgdmFsdWVzIGZyb20gdGhlIGBvcmllbnRhdGlvbmAgdmFsdWVzLlxuICAgICAqXG4gICAgICogQHBhcmFtIHtudW1iZXJbXX0gb3JpZW50YXRpb24gLSBMYXRlc3QgYG9yaWVudGF0aW9uYCByYXcgdmFsdWVzLlxuICAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6ICdfY2FsY3VsYXRlUm90YXRpb25SYXRlRnJvbU9yaWVudGF0aW9uJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gX2NhbGN1bGF0ZVJvdGF0aW9uUmF0ZUZyb21PcmllbnRhdGlvbihvcmllbnRhdGlvbikge1xuICAgICAgdmFyIG5vdyA9IGdldExvY2FsVGltZSgpO1xuICAgICAgdmFyIGsgPSAwLjg7IC8vIFRPRE86IGltcHJvdmUgbG93IHBhc3MgZmlsdGVyIChmcmFtZXMgYXJlIG5vdCByZWd1bGFyKVxuICAgICAgdmFyIGFscGhhSXNWYWxpZCA9IHR5cGVvZiBvcmllbnRhdGlvblswXSA9PT0gJ251bWJlcic7XG5cbiAgICAgIGlmICh0aGlzLl9sYXN0T3JpZW50YXRpb25UaW1lc3RhbXApIHtcbiAgICAgICAgdmFyIHJBbHBoYSA9IG51bGw7XG4gICAgICAgIHZhciByQmV0YSA9IHZvaWQgMDtcbiAgICAgICAgdmFyIHJHYW1tYSA9IHZvaWQgMDtcblxuICAgICAgICB2YXIgYWxwaGFEaXNjb250aW51aXR5RmFjdG9yID0gMDtcbiAgICAgICAgdmFyIGJldGFEaXNjb250aW51aXR5RmFjdG9yID0gMDtcbiAgICAgICAgdmFyIGdhbW1hRGlzY29udGludWl0eUZhY3RvciA9IDA7XG5cbiAgICAgICAgdmFyIGRlbHRhVCA9IG5vdyAtIHRoaXMuX2xhc3RPcmllbnRhdGlvblRpbWVzdGFtcDtcblxuICAgICAgICBpZiAoYWxwaGFJc1ZhbGlkKSB7XG4gICAgICAgICAgLy8gYWxwaGEgZGlzY29udGludWl0eSAoKzM2MCAtPiAwIG9yIDAgLT4gKzM2MClcbiAgICAgICAgICBpZiAodGhpcy5fbGFzdE9yaWVudGF0aW9uWzBdID4gMzIwICYmIG9yaWVudGF0aW9uWzBdIDwgNDApIGFscGhhRGlzY29udGludWl0eUZhY3RvciA9IDM2MDtlbHNlIGlmICh0aGlzLl9sYXN0T3JpZW50YXRpb25bMF0gPCA0MCAmJiBvcmllbnRhdGlvblswXSA+IDMyMCkgYWxwaGFEaXNjb250aW51aXR5RmFjdG9yID0gLTM2MDtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIGJldGEgZGlzY29udGludWl0eSAoKzE4MCAtPiAtMTgwIG9yIC0xODAgLT4gKzE4MClcbiAgICAgICAgaWYgKHRoaXMuX2xhc3RPcmllbnRhdGlvblsxXSA+IDE0MCAmJiBvcmllbnRhdGlvblsxXSA8IC0xNDApIGJldGFEaXNjb250aW51aXR5RmFjdG9yID0gMzYwO2Vsc2UgaWYgKHRoaXMuX2xhc3RPcmllbnRhdGlvblsxXSA8IC0xNDAgJiYgb3JpZW50YXRpb25bMV0gPiAxNDApIGJldGFEaXNjb250aW51aXR5RmFjdG9yID0gLTM2MDtcblxuICAgICAgICAvLyBnYW1tYSBkaXNjb250aW51aXRpZXMgKCsxODAgLT4gLTE4MCBvciAtMTgwIC0+ICsxODApXG4gICAgICAgIGlmICh0aGlzLl9sYXN0T3JpZW50YXRpb25bMl0gPiA1MCAmJiBvcmllbnRhdGlvblsyXSA8IC01MCkgZ2FtbWFEaXNjb250aW51aXR5RmFjdG9yID0gMTgwO2Vsc2UgaWYgKHRoaXMuX2xhc3RPcmllbnRhdGlvblsyXSA8IC01MCAmJiBvcmllbnRhdGlvblsyXSA+IDUwKSBnYW1tYURpc2NvbnRpbnVpdHlGYWN0b3IgPSAtMTgwO1xuXG4gICAgICAgIGlmIChkZWx0YVQgPiAwKSB7XG4gICAgICAgICAgLy8gTG93IHBhc3MgZmlsdGVyIHRvIHNtb290aCB0aGUgZGF0YVxuICAgICAgICAgIGlmIChhbHBoYUlzVmFsaWQpIHJBbHBoYSA9IGsgKiB0aGlzLl9jYWxjdWxhdGVkUm90YXRpb25SYXRlWzBdICsgKDEgLSBrKSAqIChvcmllbnRhdGlvblswXSAtIHRoaXMuX2xhc3RPcmllbnRhdGlvblswXSArIGFscGhhRGlzY29udGludWl0eUZhY3RvcikgLyBkZWx0YVQ7XG5cbiAgICAgICAgICByQmV0YSA9IGsgKiB0aGlzLl9jYWxjdWxhdGVkUm90YXRpb25SYXRlWzFdICsgKDEgLSBrKSAqIChvcmllbnRhdGlvblsxXSAtIHRoaXMuX2xhc3RPcmllbnRhdGlvblsxXSArIGJldGFEaXNjb250aW51aXR5RmFjdG9yKSAvIGRlbHRhVDtcbiAgICAgICAgICByR2FtbWEgPSBrICogdGhpcy5fY2FsY3VsYXRlZFJvdGF0aW9uUmF0ZVsyXSArICgxIC0gaykgKiAob3JpZW50YXRpb25bMl0gLSB0aGlzLl9sYXN0T3JpZW50YXRpb25bMl0gKyBnYW1tYURpc2NvbnRpbnVpdHlGYWN0b3IpIC8gZGVsdGFUO1xuXG4gICAgICAgICAgdGhpcy5fY2FsY3VsYXRlZFJvdGF0aW9uUmF0ZVswXSA9IHJBbHBoYTtcbiAgICAgICAgICB0aGlzLl9jYWxjdWxhdGVkUm90YXRpb25SYXRlWzFdID0gckJldGE7XG4gICAgICAgICAgdGhpcy5fY2FsY3VsYXRlZFJvdGF0aW9uUmF0ZVsyXSA9IHJHYW1tYTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIFRPRE86IHJlc2FtcGxlIHRoZSBlbWlzc2lvbiByYXRlIHRvIG1hdGNoIHRoZSBkZXZpY2Vtb3Rpb24gcmF0ZVxuICAgICAgICB0aGlzLnJvdGF0aW9uUmF0ZS5lbWl0KHRoaXMuX2NhbGN1bGF0ZWRSb3RhdGlvblJhdGUpO1xuICAgICAgfVxuXG4gICAgICB0aGlzLl9sYXN0T3JpZW50YXRpb25UaW1lc3RhbXAgPSBub3c7XG4gICAgICB0aGlzLl9sYXN0T3JpZW50YXRpb25bMF0gPSBvcmllbnRhdGlvblswXTtcbiAgICAgIHRoaXMuX2xhc3RPcmllbnRhdGlvblsxXSA9IG9yaWVudGF0aW9uWzFdO1xuICAgICAgdGhpcy5fbGFzdE9yaWVudGF0aW9uWzJdID0gb3JpZW50YXRpb25bMl07XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIHdoZXRoZXIgdGhlIHJvdGF0aW9uIHJhdGUgY2FuIGJlIGNhbGN1bGF0ZWQgZnJvbSB0aGUgYG9yaWVudGF0aW9uYCB2YWx1ZXMgb3Igbm90LlxuICAgICAqXG4gICAgICogQHRvZG8gLSB0aGlzIHNob3VsZCBiZSByZXZpZXdlZCB0byBjb21wbHkgd2l0aCB0aGUgYXhpcyBvcmRlciBkZWZpbmVkXG4gICAgICogIGluIHRoZSBzcGVjXG4gICAgICovXG4gICAgLy8gV0FSTklOR1xuICAgIC8vIFRoZSBsaW5lcyBvZiBjb2RlIGJlbG93IGFyZSBjb21tZW50ZWQgYmVjYXVzZSBvZiBhIGJ1ZyBvZiBDaHJvbWVcbiAgICAvLyBvbiBzb21lIEFuZHJvaWQgZGV2aWNlcywgd2hlcmUgJ2RldmljZW1vdGlvbicgZXZlbnRzIGFyZSBub3Qgc2VudFxuICAgIC8vIG9yIGNhdWdodCBpZiB0aGUgbGlzdGVuZXIgaXMgc2V0IHVwIGFmdGVyIGEgJ2RldmljZW9yaWVudGF0aW9uJ1xuICAgIC8vIGxpc3RlbmVyLiBIZXJlLCB0aGUgX3RyeU9yaWVudGF0aW9uRmFsbGJhY2sgbWV0aG9kIHdvdWxkIGFkZCBhXG4gICAgLy8gJ2RldmljZW9yaWVudGF0aW9uJyBsaXN0ZW5lciBhbmQgYmxvY2sgYWxsIHN1YnNlcXVlbnQgJ2RldmljZW1vdGlvbidcbiAgICAvLyBldmVudHMgb24gdGhlc2UgZGV2aWNlcy4gQ29tbWVudHMgd2lsbCBiZSByZW1vdmVkIG9uY2UgdGhlIGJ1ZyBvZlxuICAgIC8vIENocm9tZSBpcyBjb3JyZWN0ZWQuXG4gICAgLy8gX3RyeU9yaWVudGF0aW9uRmFsbGJhY2soKSB7XG4gICAgLy8gICBNb3Rpb25JbnB1dC5yZXF1aXJlTW9kdWxlKCdvcmllbnRhdGlvbicpXG4gICAgLy8gICAgIC50aGVuKChvcmllbnRhdGlvbikgPT4ge1xuICAgIC8vICAgICAgIGlmIChvcmllbnRhdGlvbi5pc1ZhbGlkKSB7XG4gICAgLy8gICAgICAgICBjb25zb2xlLmxvZyhgXG4gICAgLy8gICAgICAgICAgIFdBUk5JTkcgKG1vdGlvbi1pbnB1dCk6IFRoZSAnZGV2aWNlbW90aW9uJyBldmVudCBkb2VzIG5vdCBleGlzdHMgb3JcbiAgICAvLyAgICAgICAgICAgZG9lcyBub3QgcHJvdmlkZSByb3RhdGlvbiByYXRlIHZhbHVlcyBpbiB5b3VyIGJyb3dzZXIsIHNvIHRoZSByb3RhdGlvblxuICAgIC8vICAgICAgICAgICByYXRlIG9mIHRoZSBkZXZpY2UgaXMgZXN0aW1hdGVkIGZyb20gdGhlICdvcmllbnRhdGlvbicsIGNhbGN1bGF0ZWRcbiAgICAvLyAgICAgICAgICAgZnJvbSB0aGUgJ2RldmljZW9yaWVudGF0aW9uJyBldmVudC4gU2luY2UgdGhlIGNvbXBhc3MgbWlnaHQgbm90XG4gICAgLy8gICAgICAgICAgIGJlIGF2YWlsYWJsZSwgb25seSBcXGBiZXRhXFxgIGFuZCBcXGBnYW1tYVxcYCBhbmdsZXMgbWF5IGJlIHByb3ZpZGVkXG4gICAgLy8gICAgICAgICAgIChcXGBhbHBoYVxcYCB3b3VsZCBiZSBudWxsKS5gXG4gICAgLy8gICAgICAgICApO1xuXG4gICAgLy8gICAgICAgICB0aGlzLnJvdGF0aW9uUmF0ZS5pc0NhbGN1bGF0ZWQgPSB0cnVlO1xuXG4gICAgLy8gICAgICAgICBNb3Rpb25JbnB1dC5hZGRMaXN0ZW5lcignb3JpZW50YXRpb24nLCAob3JpZW50YXRpb24pID0+IHtcbiAgICAvLyAgICAgICAgICAgdGhpcy5fY2FsY3VsYXRlUm90YXRpb25SYXRlRnJvbU9yaWVudGF0aW9uKG9yaWVudGF0aW9uKTtcbiAgICAvLyAgICAgICAgIH0pO1xuICAgIC8vICAgICAgIH1cblxuICAgIC8vICAgICAgIHRoaXMuX3Byb21pc2VSZXNvbHZlKHRoaXMpO1xuICAgIC8vICAgICB9KTtcbiAgICAvLyB9XG5cbiAgfSwge1xuICAgIGtleTogJ19wcm9jZXNzJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gX3Byb2Nlc3MoZGF0YSkge1xuICAgICAgdGhpcy5fcHJvY2Vzc0Z1bmN0aW9uKGRhdGEpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEluaXRpYWxpemVzIG9mIHRoZSBtb2R1bGUuXG4gICAgICpcbiAgICAgKiBAcmV0dXJuIHtwcm9taXNlfVxuICAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6ICdpbml0JyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gaW5pdCgpIHtcbiAgICAgIHZhciBfdGhpczIgPSB0aGlzO1xuXG4gICAgICByZXR1cm4gX2dldChEZXZpY2VNb3Rpb25Nb2R1bGUucHJvdG90eXBlLl9fcHJvdG9fXyB8fCBPYmplY3QuZ2V0UHJvdG90eXBlT2YoRGV2aWNlTW90aW9uTW9kdWxlLnByb3RvdHlwZSksICdpbml0JywgdGhpcykuY2FsbCh0aGlzLCBmdW5jdGlvbiAocmVzb2x2ZSkge1xuICAgICAgICBfdGhpczIuX3Byb21pc2VSZXNvbHZlID0gcmVzb2x2ZTtcblxuICAgICAgICBpZiAod2luZG93LkRldmljZU1vdGlvbkV2ZW50KSB7XG4gICAgICAgICAgX3RoaXMyLl9wcm9jZXNzRnVuY3Rpb24gPSBfdGhpczIuX2RldmljZW1vdGlvbkNoZWNrO1xuICAgICAgICAgIC8vIGZlYXR1cmUgZGV0ZWN0XG4gICAgICAgICAgaWYgKHR5cGVvZiBEZXZpY2VNb3Rpb25FdmVudC5yZXF1ZXN0UGVybWlzc2lvbiA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgRGV2aWNlTW90aW9uRXZlbnQucmVxdWVzdFBlcm1pc3Npb24oKS50aGVuKGZ1bmN0aW9uIChwZXJtaXNzaW9uU3RhdGUpIHtcbiAgICAgICAgICAgICAgaWYgKHBlcm1pc3Npb25TdGF0ZSA9PT0gJ2dyYW50ZWQnKSB7XG4gICAgICAgICAgICAgICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ2RldmljZW1vdGlvbicsIF90aGlzMi5fcHJvY2Vzcyk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pLmNhdGNoKGNvbnNvbGUuZXJyb3IpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAvLyBoYW5kbGUgcmVndWxhciBub24gaU9TIDEzKyBkZXZpY2VzXG4gICAgICAgICAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcignZGV2aWNlbW90aW9uJywgX3RoaXMyLl9wcm9jZXNzKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICAvLyBzZXQgZmFsbGJhY2sgdGltZW91dCBmb3IgRmlyZWZveCBkZXNrdG9wIChpdHMgd2luZG93IG5ldmVyIGNhbGxpbmcgdGhlIERldmljZU9yaWVudGF0aW9uIGV2ZW50LCBhXG4gICAgICAgICAgLy8gcmVxdWlyZSBvZiB0aGUgRGV2aWNlT3JpZW50YXRpb24gc2VydmljZSB3aWxsIHJlc3VsdCBpbiB0aGUgcmVxdWlyZSBwcm9taXNlIG5ldmVyIGJlaW5nIHJlc29sdmVkXG4gICAgICAgICAgLy8gaGVuY2UgdGhlIEV4cGVyaW1lbnQgc3RhcnQoKSBtZXRob2QgbmV2ZXIgY2FsbGVkKVxuICAgICAgICAgIC8vID4gbm90ZSAwMi8wMi8yMDE4OiB0aGlzIHNlZW1zIHRvIGNyZWF0ZSBwcm9ibGVtcyB3aXRoIGlwb2RzIHRoYXRcbiAgICAgICAgICAvLyBkb24ndCBoYXZlIGVub3VnaCB0aW1lIHRvIHN0YXJ0IChzb21ldGltZXMpLCBoZW5jZSBjcmVhdGluZyBmYWxzZVxuICAgICAgICAgIC8vIG5lZ2F0aXZlLiBTbyB3ZSBvbmx5IGFwcGx5IHRvIEZpcmVmb3ggZGVza3RvcCBhbmQgcHV0IGEgcmVhbGx5XG4gICAgICAgICAgLy8gbGFyZ2UgdmFsdWUgKDRzZWMpIGp1c3QgaW4gY2FzZS5cbiAgICAgICAgICBpZiAoX3BsYXRmb3JtMi5kZWZhdWx0Lm5hbWUgPT09ICdGaXJlZm94JyAmJiBfcGxhdGZvcm0yLmRlZmF1bHQub3MuZmFtaWx5ICE9PSAnQW5kcm9pZCcgJiYgX3BsYXRmb3JtMi5kZWZhdWx0Lm9zLmZhbWlseSAhPT0gJ2lPUycpIHtcbiAgICAgICAgICAgIGNvbnNvbGUud2FybignW21vdGlvbi1pbnB1dF0gcmVnaXN0ZXIgdGltZXIgZm9yIEZpcmVmb3ggZGVza3RvcCcpO1xuICAgICAgICAgICAgX3RoaXMyLl9jaGVja1RpbWVvdXRJZCA9IHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICByZXR1cm4gcmVzb2x2ZShfdGhpczIpO1xuICAgICAgICAgICAgfSwgNCAqIDEwMDApO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIC8vIFdBUk5JTkdcbiAgICAgICAgLy8gVGhlIGxpbmVzIG9mIGNvZGUgYmVsb3cgYXJlIGNvbW1lbnRlZCBiZWNhdXNlIG9mIGEgYnVnIG9mIENocm9tZVxuICAgICAgICAvLyBvbiBzb21lIEFuZHJvaWQgZGV2aWNlcywgd2hlcmUgJ2RldmljZW1vdGlvbicgZXZlbnRzIGFyZSBub3Qgc2VudFxuICAgICAgICAvLyBvciBjYXVnaHQgaWYgdGhlIGxpc3RlbmVyIGlzIHNldCB1cCBhZnRlciBhICdkZXZpY2VvcmllbnRhdGlvbidcbiAgICAgICAgLy8gbGlzdGVuZXIuIEhlcmUsIHRoZSBfdHJ5T3JpZW50YXRpb25GYWxsYmFjayBtZXRob2Qgd291bGQgYWRkIGFcbiAgICAgICAgLy8gJ2RldmljZW9yaWVudGF0aW9uJyBsaXN0ZW5lciBhbmQgYmxvY2sgYWxsIHN1YnNlcXVlbnQgJ2RldmljZW1vdGlvbidcbiAgICAgICAgLy8gZXZlbnRzIG9uIHRoZXNlIGRldmljZXMuIENvbW1lbnRzIHdpbGwgYmUgcmVtb3ZlZCBvbmNlIHRoZSBidWcgb2ZcbiAgICAgICAgLy8gQ2hyb21lIGlzIGNvcnJlY3RlZC5cblxuICAgICAgICAvLyBlbHNlIGlmICh0aGlzLnJlcXVpcmVkLnJvdGF0aW9uUmF0ZSlcbiAgICAgICAgLy8gdGhpcy5fdHJ5T3JpZW50YXRpb25GYWxsYmFjaygpO1xuXG4gICAgICAgIGVsc2UgcmVzb2x2ZShfdGhpczIpO1xuICAgICAgfSk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAnX2NhbGN1bGF0ZWRBY2NlbGVyYXRpb25EZWNheScsXG4gICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICByZXR1cm4gTWF0aC5leHAoLTIgKiBNYXRoLlBJICogdGhpcy5hY2NlbGVyYXRpb25JbmNsdWRpbmdHcmF2aXR5LnBlcmlvZCAvIHRoaXMuX2NhbGN1bGF0ZWRBY2NlbGVyYXRpb25UaW1lQ29uc3RhbnQpO1xuICAgIH1cbiAgfV0pO1xuXG4gIHJldHVybiBEZXZpY2VNb3Rpb25Nb2R1bGU7XG59KF9JbnB1dE1vZHVsZTMuZGVmYXVsdCk7XG5cbmV4cG9ydHMuZGVmYXVsdCA9IG5ldyBEZXZpY2VNb3Rpb25Nb2R1bGUoKTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtjaGFyc2V0PXV0Zi04O2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZ6SWpwYklrUmxkbWxqWlUxdmRHbHZiazF2WkhWc1pTNXFjeUpkTENKdVlXMWxjeUk2V3lKblpYUk1iMk5oYkZScGJXVWlMQ0ozYVc1a2IzY2lMQ0p3WlhKbWIzSnRZVzVqWlNJc0ltNXZkeUlzSWtSaGRHVWlMQ0pqYUhKdmJXVlNaV2RGZUhBaUxDSjBiMFJsWnlJc0lrMWhkR2dpTENKUVNTSXNJa1JsZG1salpVMXZkR2x2YmsxdlpIVnNaU0lzSW1WMlpXNTBJaXdpWVdOalpXeGxjbUYwYVc5dVNXNWpiSFZrYVc1blIzSmhkbWwwZVNJc0ltRmpZMlZzWlhKaGRHbHZiaUlzSW5KdmRHRjBhVzl1VW1GMFpTSXNJbkpsY1hWcGNtVmtJaXdpWDNCeWIyMXBjMlZTWlhOdmJIWmxJaXdpWDNWdWFXWjVUVzkwYVc5dVJHRjBZU0lzSW05eklpd2labUZ0YVd4NUlpd2lYM1Z1YVdaNVVHVnlhVzlrSWl3aVgyTmhiR04xYkdGMFpXUkJZMk5sYkdWeVlYUnBiMjRpTENKZlkyRnNZM1ZzWVhSbFpFRmpZMlZzWlhKaGRHbHZibFJwYldWRGIyNXpkR0Z1ZENJc0lsOXNZWE4wUVdOalpXeGxjbUYwYVc5dVNXNWpiSFZrYVc1blIzSmhkbWwwZVNJc0lsOWpZV3hqZFd4aGRHVmtVbTkwWVhScGIyNVNZWFJsSWl3aVgyeGhjM1JQY21sbGJuUmhkR2x2YmlJc0lsOXNZWE4wVDNKcFpXNTBZWFJwYjI1VWFXMWxjM1JoYlhBaUxDSmZjSEp2WTJWemMwWjFibU4wYVc5dUlpd2lYM0J5YjJObGMzTWlMQ0ppYVc1a0lpd2lYMlJsZG1salpXMXZkR2x2YmtOb1pXTnJJaXdpWDJSbGRtbGpaVzF2ZEdsdmJreHBjM1JsYm1WeUlpd2lYMk5vWldOclEyOTFiblJsY2lJc0ltVWlMQ0pqYkdWaGNsUnBiV1Z2ZFhRaUxDSmZZMmhsWTJ0VWFXMWxiM1YwU1dRaUxDSnBjMUJ5YjNacFpHVmtJaXdpY0dWeWFXOWtJaXdpYVc1MFpYSjJZV3dpTENKNElpd2llU0lzSW5vaUxDSmhiSEJvWVNJc0ltSmxkR0VpTENKbllXMXRZU0lzSW5SbGMzUWlMQ0p1WVcxbElpd2lhWE5EWVd4amRXeGhkR1ZrSWl3aWJHbHpkR1Z1WlhKeklpd2ljMmw2WlNJc0lsOWxiV2wwUkdWMmFXTmxUVzkwYVc5dVJYWmxiblFpTENKcGMxWmhiR2xrSWl3aVgyVnRhWFJCWTJObGJHVnlZWFJwYjI1SmJtTnNkV1JwYm1kSGNtRjJhWFI1UlhabGJuUWlMQ0pmWlcxcGRFRmpZMlZzWlhKaGRHbHZia1YyWlc1MElpd2lYMlZ0YVhSU2IzUmhkR2x2YmxKaGRHVkZkbVZ1ZENJc0ltOTFkRVYyWlc1MElpd2laVzFwZENJc0ltc2lMQ0pmWTJGc1kzVnNZWFJsWkVGalkyVnNaWEpoZEdsdmJrUmxZMkY1SWl3aWNHRnljMlZKYm5RaUxDSjJaWEp6YVc5dUlpd2ljM0JzYVhRaUxDSnZjbWxsYm5SaGRHbHZiaUlzSW1Gc2NHaGhTWE5XWVd4cFpDSXNJbkpCYkhCb1lTSXNJbkpDWlhSaElpd2lja2RoYlcxaElpd2lZV3h3YUdGRWFYTmpiMjUwYVc1MWFYUjVSbUZqZEc5eUlpd2lZbVYwWVVScGMyTnZiblJwYm5WcGRIbEdZV04wYjNJaUxDSm5ZVzF0WVVScGMyTnZiblJwYm5WcGRIbEdZV04wYjNJaUxDSmtaV3gwWVZRaUxDSmtZWFJoSWl3aWNtVnpiMngyWlNJc0lrUmxkbWxqWlUxdmRHbHZia1YyWlc1MElpd2ljbVZ4ZFdWemRGQmxjbTFwYzNOcGIyNGlMQ0owYUdWdUlpd2ljR1Z5YldsemMybHZibE4wWVhSbElpd2lZV1JrUlhabGJuUk1hWE4wWlc1bGNpSXNJbU5oZEdOb0lpd2lZMjl1YzI5c1pTSXNJbVZ5Y205eUlpd2lkMkZ5YmlJc0luTmxkRlJwYldWdmRYUWlMQ0psZUhBaVhTd2liV0Z3Y0dsdVozTWlPaUk3T3pzN096czdPenM3UVVGQlFUczdPenRCUVVOQk96czdPMEZCUTBFN096czdRVUZEUVRzN096czdPenM3T3pzN08wRkJSVUU3T3pzN096dEJRVTFCTEZOQlFWTkJMRmxCUVZRc1IwRkJkMEk3UVVGRGRFSXNUVUZCU1VNc1QwRkJUME1zVjBGQldDeEZRVU5GTEU5QlFVOUVMRTlCUVU5RExGZEJRVkFzUTBGQmJVSkRMRWRCUVc1Q0xFdEJRVEpDTEVsQlFXeERPMEZCUTBZc1UwRkJUME1zUzBGQlMwUXNSMEZCVEN4TFFVRmhMRWxCUVhCQ08wRkJRMFE3TzBGQlJVUXNTVUZCVFVVc1pVRkJaU3hSUVVGeVFqdEJRVU5CTEVsQlFVMURMRkZCUVZFc1RVRkJUVU1zUzBGQlMwTXNSVUZCZWtJN08wRkJSVUU3T3pzN096czdPenM3T3pzN096czdPenM3TzBsQmJVSk5ReXhyUWpzN08wRkJSVW83T3pzN08wRkJTMEVzWjBOQlFXTTdRVUZCUVRzN1FVRkhXanM3T3pzN096dEJRVWhaTEhkSlFVTk9MR05CUkUwN08wRkJWVm9zVlVGQlMwTXNTMEZCVEN4SFFVRmhMRU5CUVVNc1NVRkJSQ3hGUVVGUExFbEJRVkFzUlVGQllTeEpRVUZpTEVWQlFXMUNMRWxCUVc1Q0xFVkJRWGxDTEVsQlFYcENMRVZCUVN0Q0xFbEJRUzlDTEVWQlFYRkRMRWxCUVhKRExFVkJRVEpETEVsQlFUTkRMRVZCUVdsRUxFbEJRV3BFTEVOQlFXSTdPMEZCUlVFN096czdPenM3UVVGUFFTeFZRVUZMUXl3MFFrRkJUQ3hIUVVGdlF5eDFRMEZCTkVJc09FSkJRVFZDTEVOQlFYQkRPenRCUVVWQk96czdPenM3T3pzN08wRkJWVUVzVlVGQlMwTXNXVUZCVEN4SFFVRnZRaXgxUTBGQk5FSXNZMEZCTlVJc1EwRkJjRUk3TzBGQlJVRTdPenM3T3pzN096czdRVUZWUVN4VlFVRkxReXhaUVVGTUxFZEJRVzlDTEhWRFFVRTBRaXhqUVVFMVFpeERRVUZ3UWpzN1FVRkZRVHM3T3pzN096czdPMEZCVTBFc1ZVRkJTME1zVVVGQlRDeEhRVUZuUWp0QlFVTmtTQ3h2UTBGQk9FSXNTMEZFYUVJN1FVRkZaRU1zYjBKQlFXTXNTMEZHUVR0QlFVZGtReXh2UWtGQll6dEJRVWhCTEV0QlFXaENPenRCUVUxQk96czdPenM3T3p0QlFWRkJMRlZCUVV0RkxHVkJRVXdzUjBGQmRVSXNTVUZCZGtJN08wRkJSVUU3T3pzN096dEJRVTFCTEZWQlFVdERMR2RDUVVGTUxFZEJRWGxDTEcxQ1FVRlRReXhGUVVGVUxFTkJRVmxETEUxQlFWb3NTMEZCZFVJc1MwRkJlRUlzUjBGQmFVTXNRMEZCUXl4RFFVRnNReXhIUVVGelF5eERRVUU1UkRzN1FVRkZRVHM3T3pzN096dEJRVTlCTEZWQlFVdERMRmxCUVV3c1IwRkJjVUlzYlVKQlFWTkdMRVZCUVZRc1EwRkJXVU1zVFVGQldpeExRVUYxUWl4VFFVRjRRaXhIUVVGeFF5eExRVUZ5UXl4SFFVRTJReXhEUVVGcVJUczdRVUZGUVRzN096czdPenRCUVU5QkxGVkJRVXRGTEhWQ1FVRk1MRWRCUVN0Q0xFTkJRVU1zUTBGQlJDeEZRVUZKTEVOQlFVb3NSVUZCVHl4RFFVRlFMRU5CUVM5Q096dEJRVVZCT3pzN096czdPenRCUVZGQkxGVkJRVXRETEcxRFFVRk1MRWRCUVRKRExFZEJRVE5ET3p0QlFVVkJPenM3T3pzN08wRkJUMEVzVlVGQlMwTXNhVU5CUVV3c1IwRkJlVU1zUTBGQlF5eERRVUZFTEVWQlFVa3NRMEZCU2l4RlFVRlBMRU5CUVZBc1EwRkJla003TzBGQlJVRTdPenM3T3pzN1FVRlBRU3hWUVVGTFF5eDFRa0ZCVEN4SFFVRXJRaXhEUVVGRExFTkJRVVFzUlVGQlNTeERRVUZLTEVWQlFVOHNRMEZCVUN4RFFVRXZRanM3UVVGRlFUczdPenM3T3p0QlFVOUJMRlZCUVV0RExHZENRVUZNTEVkQlFYZENMRU5CUVVNc1EwRkJSQ3hGUVVGSkxFTkJRVW9zUlVGQlR5eERRVUZRTEVOQlFYaENPenRCUVVWQk96czdPenM3TzBGQlQwRXNWVUZCUzBNc2VVSkJRVXdzUjBGQmFVTXNTVUZCYWtNN08wRkJSVUVzVlVGQlMwTXNaMEpCUVV3c1IwRkJkMElzU1VGQmVFSTdRVUZEUVN4VlFVRkxReXhSUVVGTUxFZEJRV2RDTEUxQlFVdEJMRkZCUVV3c1EwRkJZME1zU1VGQlpDeFBRVUZvUWp0QlFVTkJMRlZCUVV0RExHdENRVUZNTEVkQlFUQkNMRTFCUVV0QkxHdENRVUZNTEVOQlFYZENSQ3hKUVVGNFFpeFBRVUV4UWp0QlFVTkJMRlZCUVV0RkxIRkNRVUZNTEVkQlFUWkNMRTFCUVV0QkxIRkNRVUZNTEVOQlFUSkNSaXhKUVVFelFpeFBRVUUzUWpzN1FVRkZRU3hWUVVGTFJ5eGhRVUZNTEVkQlFYRkNMRU5CUVhKQ08wRkJia3BaTzBGQmIwcGlPenRCUVVWRU96czdPenM3T3pzN096czdRVUZWUVRzN096czdPenM3T3pzN096czdkVU5CWTIxQ1F5eERMRVZCUVVjN1FVRkRjRUk3UVVGRFFUdEJRVU5CUXl4dFFrRkJZU3hMUVVGTFF5eGxRVUZzUWpzN1FVRkZRU3hYUVVGTFF5eFZRVUZNTEVkQlFXdENMRWxCUVd4Q08wRkJRMEVzVjBGQlMwTXNUVUZCVEN4SFFVRmpTaXhGUVVGRlN5eFJRVUZHTEVkQlFXRXNTVUZCTTBJN1FVRkRRU3hYUVVGTFFTeFJRVUZNTEVkQlFXZENUQ3hGUVVGRlN5eFJRVUZzUWpzN1FVRkZRVHRCUVVOQkxGZEJRVXN4UWl3MFFrRkJUQ3hEUVVGclEzZENMRlZCUVd4RExFZEJRMFZJTEVWQlFVVnlRaXcwUWtGQlJpeEpRVU5ETEU5QlFVOXhRaXhGUVVGRmNrSXNORUpCUVVZc1EwRkJLMEl5UWl4RFFVRjBReXhMUVVFMFF5eFJRVVEzUXl4SlFVVkRMRTlCUVU5T0xFVkJRVVZ5UWl3MFFrRkJSaXhEUVVFclFqUkNMRU5CUVhSRExFdEJRVFJETEZGQlJqZERMRWxCUjBNc1QwRkJUMUFzUlVGQlJYSkNMRFJDUVVGR0xFTkJRU3RDTmtJc1EwRkJkRU1zUzBGQk5FTXNVVUZLTDBNN1FVRk5RU3hYUVVGTE4wSXNORUpCUVV3c1EwRkJhME41UWl4TlFVRnNReXhIUVVFeVEwb3NSVUZCUlVzc1VVRkJSaXhIUVVGaExFdEJRVXRzUWl4WlFVRTNSRHM3UVVGRlFUdEJRVU5CTEZkQlFVdFFMRmxCUVV3c1EwRkJhMEoxUWl4VlFVRnNRaXhIUVVORlNDeEZRVUZGY0VJc1dVRkJSaXhKUVVORExFOUJRVTl2UWl4RlFVRkZjRUlzV1VGQlJpeERRVUZsTUVJc1EwRkJkRUlzUzBGQk5FSXNVVUZFTjBJc1NVRkZReXhQUVVGUFRpeEZRVUZGY0VJc1dVRkJSaXhEUVVGbE1rSXNRMEZCZEVJc1MwRkJORUlzVVVGR04wSXNTVUZIUXl4UFFVRlBVQ3hGUVVGRmNFSXNXVUZCUml4RFFVRmxORUlzUTBGQmRFSXNTMEZCTkVJc1VVRktMMEk3UVVGTlFTeFhRVUZMTlVJc1dVRkJUQ3hEUVVGclFuZENMRTFCUVd4Q0xFZEJRVEpDU2l4RlFVRkZTeXhSUVVGR0xFZEJRV0VzUzBGQlMyeENMRmxCUVRkRE96dEJRVVZCTzBGQlEwRXNWMEZCUzA0c1dVRkJUQ3hEUVVGclFuTkNMRlZCUVd4Q0xFZEJRMFZJTEVWQlFVVnVRaXhaUVVGR0xFbEJRME1zVDBGQlQyMUNMRVZCUVVWdVFpeFpRVUZHTEVOQlFXVTBRaXhMUVVGMFFpeExRVUZuUXl4UlFVUnFReXhKUVVWRExFOUJRVTlVTEVWQlFVVnVRaXhaUVVGR0xFTkJRV1UyUWl4SlFVRjBRaXhMUVVGblF5eFJRVVpxUXl4SlFVZERMRTlCUVU5V0xFVkJRVVZ1UWl4WlFVRkdMRU5CUVdVNFFpeExRVUYwUWl4TFFVRm5ReXhSUVVwdVF6dEJRVTFCTEZkQlFVczVRaXhaUVVGTUxFTkJRV3RDZFVJc1RVRkJiRUlzUjBGQk1rSktMRVZCUVVWTExGRkJRVVlzUjBGQllTeExRVUZMYkVJc1dVRkJOME03TzBGQlJVRTdRVUZEUVR0QlFVTkJMRlZCUTBVc2JVSkJRVk5HTEVWQlFWUXNRMEZCV1VNc1RVRkJXaXhMUVVGMVFpeFRRVUYyUWl4SlFVTkJMRlZCUVZVd1FpeEpRVUZXTEVOQlFXVXNiVUpCUVZORExFbEJRWGhDTEVOQlJFRXNTVUZGUVN4TFFVRkxaQ3hoUVVGTUxFZEJRWEZDTEVOQlNIWkNMRVZCU1VVN1FVRkRRU3hoUVVGTFFTeGhRVUZNTzBGQlEwUXNUMEZPUkN4TlFVMVBPMEZCUTB3N1FVRkRRVHRCUVVOQkxHRkJRVXRNTEdkQ1FVRk1MRWRCUVhkQ0xFdEJRVXRKTEhGQ1FVRTNRanM3UVVGRlFUdEJRVU5CTzBGQlEwRXNXVUZCU1N4RFFVRkRMRXRCUVV0c1FpeFpRVUZNTEVOQlFXdENkVUlzVlVGQmRrSXNSVUZEUlN4TFFVRkxka0lzV1VGQlRDeERRVUZyUW10RExGbEJRV3hDTEVkQlFXbERMRXRCUVV0dVF5dzBRa0ZCVEN4RFFVRnJRM2RDTEZWQlFXNUZPenRCUVVWR08wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN08wRkJSVUU3UVVGRFFUdEJRVU5CTzBGQlEwRXNZVUZCUzNCQ0xHVkJRVXdzUTBGQmNVSXNTVUZCY2tJN1FVRkRSRHRCUVVOR096dEJRVVZFT3pzN096czdPenM3T3pzd1EwRlJjMEpwUWl4RExFVkJRVWM3UVVGRGRrSTdRVUZEUVN4VlFVRkpMRXRCUVV0bExGTkJRVXdzUTBGQlpVTXNTVUZCWml4SFFVRnpRaXhEUVVFeFFpeEZRVU5GTEV0QlFVdERMSE5DUVVGTUxFTkJRVFJDYWtJc1EwRkJOVUk3TzBGQlJVWTdRVUZEUVR0QlFVTkJPMEZCUTBFN08wRkJSVUU3UVVGRFFTeFZRVUZKTEV0QlFVdHlRaXcwUWtGQlRDeERRVUZyUTI5RExGTkJRV3hETEVOQlFUUkRReXhKUVVFMVF5eEhRVUZ0UkN4RFFVRnVSQ3hKUVVOQkxFdEJRVXRzUXl4UlFVRk1MRU5CUVdOSUxEUkNRVVJrTEVsQlJVRXNTMEZCUzBFc05FSkJRVXdzUTBGQmEwTjFReXhQUVVaMFF5eEZRVWRGTzBGQlEwRXNZVUZCUzBNc2MwTkJRVXdzUTBGQk5FTnVRaXhEUVVFMVF6dEJRVU5FT3p0QlFVVkVPMEZCUTBFN1FVRkRRVHRCUVVOQkxGVkJRVWtzUzBGQlMzQkNMRmxCUVV3c1EwRkJhMEp0UXl4VFFVRnNRaXhEUVVFMFFrTXNTVUZCTlVJc1IwRkJiVU1zUTBGQmJrTXNTVUZEUVN4TFFVRkxiRU1zVVVGQlRDeERRVUZqUml4WlFVUmtMRWxCUlVFc1MwRkJTMEVzV1VGQlRDeERRVUZyUW5ORExFOUJSblJDTEVWQlIwVTdRVUZEUVN4aFFVRkxSU3h6UWtGQlRDeERRVUUwUW5CQ0xFTkJRVFZDTzBGQlEwUTdPMEZCUlVRN1FVRkRRVHRCUVVOQk8wRkJRMEVzVlVGQlNTeExRVUZMYmtJc1dVRkJUQ3hEUVVGclFtdERMRk5CUVd4Q0xFTkJRVFJDUXl4SlFVRTFRaXhIUVVGdFF5eERRVUZ1UXl4SlFVTkJMRXRCUVV0c1F5eFJRVUZNTEVOQlFXTkVMRmxCUkdRc1NVRkZRU3hMUVVGTFFTeFpRVUZNTEVOQlFXdENjMElzVlVGR2RFSXNSVUZIUlR0QlFVTkJMR0ZCUVV0clFpeHpRa0ZCVEN4RFFVRTBRbkpDTEVOQlFUVkNPMEZCUTBRN1FVRkRSanM3UVVGRlJEczdPenM3T3pzN01rTkJTM1ZDUVN4RExFVkJRVWM3UVVGRGVFSXNWVUZCU1hOQ0xGZEJRVmNzUzBGQlN6VkRMRXRCUVhCQ096dEJRVVZCTEZWQlFVbHpRaXhGUVVGRmNrSXNORUpCUVU0c1JVRkJiME03UVVGRGJFTXlReXhwUWtGQlV5eERRVUZVTEVsQlFXTjBRaXhGUVVGRmNrSXNORUpCUVVZc1EwRkJLMEl5UWl4RFFVRTNRenRCUVVOQlowSXNhVUpCUVZNc1EwRkJWQ3hKUVVGamRFSXNSVUZCUlhKQ0xEUkNRVUZHTEVOQlFTdENORUlzUTBGQk4wTTdRVUZEUVdVc2FVSkJRVk1zUTBGQlZDeEpRVUZqZEVJc1JVRkJSWEpDTERSQ1FVRkdMRU5CUVN0Q05rSXNRMEZCTjBNN1FVRkRSRHM3UVVGRlJDeFZRVUZKVWl4RlFVRkZjRUlzV1VGQlRpeEZRVUZ2UWp0QlFVTnNRakJETEdsQ1FVRlRMRU5CUVZRc1NVRkJZM1JDTEVWQlFVVndRaXhaUVVGR0xFTkJRV1V3UWl4RFFVRTNRanRCUVVOQlowSXNhVUpCUVZNc1EwRkJWQ3hKUVVGamRFSXNSVUZCUlhCQ0xGbEJRVVlzUTBGQlpUSkNMRU5CUVRkQ08wRkJRMEZsTEdsQ1FVRlRMRU5CUVZRc1NVRkJZM1JDTEVWQlFVVndRaXhaUVVGR0xFTkJRV1UwUWl4RFFVRTNRanRCUVVORU96dEJRVVZFTEZWQlFVbFNMRVZCUVVWdVFpeFpRVUZPTEVWQlFXOUNPMEZCUTJ4Q2VVTXNhVUpCUVZNc1EwRkJWQ3hKUVVGamRFSXNSVUZCUlc1Q0xGbEJRVVlzUTBGQlpUUkNMRXRCUVRkQ08wRkJRMEZoTEdsQ1FVRlRMRU5CUVZRc1NVRkJZM1JDTEVWQlFVVnVRaXhaUVVGR0xFTkJRV1UyUWl4SlFVRTNRanRCUVVOQldTeHBRa0ZCVXl4RFFVRlVMRWxCUVdOMFFpeEZRVUZGYmtJc1dVRkJSaXhEUVVGbE9FSXNTMEZCTjBJN1FVRkRSRHM3UVVGRlJDeFhRVUZMV1N4SlFVRk1MRU5CUVZWRUxGRkJRVlk3UVVGRFJEczdRVUZGUkRzN096czdPenM3TWtSQlMzVkRkRUlzUXl4RlFVRkhPMEZCUTNoRExGVkJRVWx6UWl4WFFVRlhMRXRCUVVzelF5dzBRa0ZCVEN4RFFVRnJRMFFzUzBGQmFrUTdPMEZCUlVFMFF5eGxRVUZUTEVOQlFWUXNTVUZCWTNSQ0xFVkJRVVZ5UWl3MFFrRkJSaXhEUVVFclFqSkNMRU5CUVM5Q0xFZEJRVzFETEV0QlFVdDBRaXhuUWtGQmRFUTdRVUZEUVhORExHVkJRVk1zUTBGQlZDeEpRVUZqZEVJc1JVRkJSWEpDTERSQ1FVRkdMRU5CUVN0Q05FSXNRMEZCTDBJc1IwRkJiVU1zUzBGQlMzWkNMR2RDUVVGMFJEdEJRVU5CYzBNc1pVRkJVeXhEUVVGVUxFbEJRV04wUWl4RlFVRkZja0lzTkVKQlFVWXNRMEZCSzBJMlFpeERRVUV2UWl4SFFVRnRReXhMUVVGTGVFSXNaMEpCUVhSRU96dEJRVVZCTEZkQlFVdE1MRFJDUVVGTUxFTkJRV3RETkVNc1NVRkJiRU1zUTBGQmRVTkVMRkZCUVhaRE8wRkJRMFE3TzBGQlJVUTdPenM3T3pzN096czdPekpEUVZGMVFuUkNMRU1zUlVGQlJ6dEJRVU40UWl4VlFVRkpjMElzVjBGQlZ5eExRVUZMTVVNc1dVRkJUQ3hEUVVGclFrWXNTMEZCYWtNN08wRkJSVUVzVlVGQlNTeExRVUZMUlN4WlFVRk1MRU5CUVd0Q2RVSXNWVUZCZEVJc1JVRkJhME03UVVGRGFFTTdRVUZEUVcxQ0xHbENRVUZUTEVOQlFWUXNTVUZCWTNSQ0xFVkJRVVZ3UWl4WlFVRkdMRU5CUVdVd1FpeERRVUZtTEVkQlFXMUNMRXRCUVV0MFFpeG5Ra0ZCZEVNN1FVRkRRWE5ETEdsQ1FVRlRMRU5CUVZRc1NVRkJZM1JDTEVWQlFVVndRaXhaUVVGR0xFTkJRV1V5UWl4RFFVRm1MRWRCUVcxQ0xFdEJRVXQyUWl4blFrRkJkRU03UVVGRFFYTkRMR2xDUVVGVExFTkJRVlFzU1VGQlkzUkNMRVZCUVVWd1FpeFpRVUZHTEVOQlFXVTBRaXhEUVVGbUxFZEJRVzFDTEV0QlFVdDRRaXhuUWtGQmRFTTdRVUZEUkN4UFFVeEVMRTFCUzA4c1NVRkJTU3hMUVVGTFRDdzBRa0ZCVEN4RFFVRnJRM1ZETEU5QlFYUkRMRVZCUVN0RE8wRkJRM0JFTzBGQlEwRTdRVUZEUVN4WlFVRk5ka01zSzBKQlFTdENMRU5CUTI1RGNVSXNSVUZCUlhKQ0xEUkNRVUZHTEVOQlFTdENNa0lzUTBGQkwwSXNSMEZCYlVNc1MwRkJTM1JDTEdkQ1FVUk1MRVZCUlc1RFowSXNSVUZCUlhKQ0xEUkNRVUZHTEVOQlFTdENORUlzUTBGQkwwSXNSMEZCYlVNc1MwRkJTM1pDTEdkQ1FVWk1MRVZCUjI1RFowSXNSVUZCUlhKQ0xEUkNRVUZHTEVOQlFTdENOa0lzUTBGQkwwSXNSMEZCYlVNc1MwRkJTM2hDTEdkQ1FVaE1MRU5CUVhKRE8wRkJTMEVzV1VGQlRYZERMRWxCUVVrc1MwRkJTME1zTkVKQlFXWTdPMEZCUlVFN1FVRkRRU3hoUVVGTGNrTXNkVUpCUVV3c1EwRkJOa0lzUTBGQk4wSXNTVUZCYTBNc1EwRkJReXhKUVVGSmIwTXNRMEZCVEN4SlFVRlZMRWRCUVZZc1NVRkJhVUkzUXl3MlFrRkJOa0lzUTBGQk4wSXNTVUZCYTBNc1MwRkJTMWNzYVVOQlFVd3NRMEZCZFVNc1EwRkJka01zUTBGQmJrUXNTVUZCWjBkclF5eEpRVUZKTEV0QlFVdHdReXgxUWtGQlRDeERRVUUyUWl4RFFVRTNRaXhEUVVGMFNUdEJRVU5CTEdGQlFVdEJMSFZDUVVGTUxFTkJRVFpDTEVOQlFUZENMRWxCUVd0RExFTkJRVU1zU1VGQlNXOURMRU5CUVV3c1NVRkJWU3hIUVVGV0xFbEJRV2xDTjBNc05rSkJRVFpDTEVOQlFUZENMRWxCUVd0RExFdEJRVXRYTEdsRFFVRk1MRU5CUVhWRExFTkJRWFpETEVOQlFXNUVMRWxCUVdkSGEwTXNTVUZCU1N4TFFVRkxjRU1zZFVKQlFVd3NRMEZCTmtJc1EwRkJOMElzUTBGQmRFazdRVUZEUVN4aFFVRkxRU3gxUWtGQlRDeERRVUUyUWl4RFFVRTNRaXhKUVVGclF5eERRVUZETEVsQlFVbHZReXhEUVVGTUxFbEJRVlVzUjBGQlZpeEpRVUZwUWpkRExEWkNRVUUyUWl4RFFVRTNRaXhKUVVGclF5eExRVUZMVnl4cFEwRkJUQ3hEUVVGMVF5eERRVUYyUXl4RFFVRnVSQ3hKUVVGblIydERMRWxCUVVrc1MwRkJTM0JETEhWQ1FVRk1MRU5CUVRaQ0xFTkJRVGRDTEVOQlFYUkpPenRCUVVWQkxHRkJRVXRGTEdsRFFVRk1MRU5CUVhWRExFTkJRWFpETEVsQlFUUkRXQ3cyUWtGQk5rSXNRMEZCTjBJc1EwRkJOVU03UVVGRFFTeGhRVUZMVnl4cFEwRkJUQ3hEUVVGMVF5eERRVUYyUXl4SlFVRTBRMWdzTmtKQlFUWkNMRU5CUVRkQ0xFTkJRVFZETzBGQlEwRXNZVUZCUzFjc2FVTkJRVXdzUTBGQmRVTXNRMEZCZGtNc1NVRkJORU5ZTERaQ1FVRTJRaXhEUVVFM1FpeERRVUUxUXpzN1FVRkZRVEpETEdsQ1FVRlRMRU5CUVZRc1NVRkJZeXhMUVVGTGJFTXNkVUpCUVV3c1EwRkJOa0lzUTBGQk4wSXNRMEZCWkR0QlFVTkJhME1zYVVKQlFWTXNRMEZCVkN4SlFVRmpMRXRCUVV0c1F5eDFRa0ZCVEN4RFFVRTJRaXhEUVVFM1FpeERRVUZrTzBGQlEwRnJReXhwUWtGQlV5eERRVUZVTEVsQlFXTXNTMEZCUzJ4RExIVkNRVUZNTEVOQlFUWkNMRU5CUVRkQ0xFTkJRV1E3UVVGRFJEczdRVUZGUkN4WFFVRkxVaXhaUVVGTUxFTkJRV3RDTWtNc1NVRkJiRUlzUTBGQmRVSkVMRkZCUVhaQ08wRkJRMFE3TzBGQlJVUTdPenM3T3pzN096SkRRVXQxUW5SQ0xFTXNSVUZCUnp0QlFVTjRRaXhWUVVGSmMwSXNWMEZCVnl4TFFVRkxla01zV1VGQlRDeERRVUZyUWtnc1MwRkJha003TzBGQlJVRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk96dEJRVVZCTkVNc1pVRkJVeXhEUVVGVUxFbEJRV04wUWl4RlFVRkZia0lzV1VGQlJpeERRVUZsT0VJc1MwRkJOMEk3UVVGRFFWY3NaVUZCVXl4RFFVRlVMRWxCUVdOMFFpeEZRVUZGYmtJc1dVRkJSaXhEUVVGbE5FSXNTMEZCTjBJc1JVRkRRV0VzVTBGQlV5eERRVUZVTEVsQlFXTjBRaXhGUVVGRmJrSXNXVUZCUml4RFFVRmxOa0lzU1VGRU4wSTdPMEZCUjBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRU3hWUVVORkxHMUNRVUZUZWtJc1JVRkJWQ3hEUVVGWlF5eE5RVUZhTEV0QlFYVkNMRk5CUVhaQ0xFbEJRMEZpTEdGQlFXRjFReXhKUVVGaUxFTkJRV3RDTEcxQ1FVRlRReXhKUVVFelFpeERRVVJCTEVsQlJVRmhMRk5CUVZNc2JVSkJRVk5ETEU5QlFWUXNRMEZCYVVKRExFdEJRV3BDTEVOQlFYVkNMRWRCUVhaQ0xFVkJRVFJDTEVOQlFUVkNMRU5CUVZRc1NVRkJNa01zUlVGSU4wTXNSVUZKUlR0QlFVTkJUaXhwUWtGQlV5eERRVUZVTEV0QlFXVm9SQ3hMUVVGbU8wRkJRMEZuUkN4cFFrRkJVeXhEUVVGVUxFdEJRV1ZvUkN4TFFVRm1MRVZCUTBGblJDeFRRVUZUTEVOQlFWUXNTMEZCWldoRUxFdEJSR1k3UVVGRlJEczdRVUZGUkN4WFFVRkxUeXhaUVVGTUxFTkJRV3RDTUVNc1NVRkJiRUlzUTBGQmRVSkVMRkZCUVhaQ08wRkJRMFE3TzBGQlJVUTdPenM3T3pzN096QkVRVXR6UTA4c1Z5eEZRVUZoTzBGQlEycEVMRlZCUVUweFJDeE5RVUZOU0N4alFVRmFPMEZCUTBFc1ZVRkJUWGRFTEVsQlFVa3NSMEZCVml4RFFVWnBSQ3hEUVVWc1F6dEJRVU5tTEZWQlFVMU5MR1ZCUVdkQ0xFOUJRVTlFTEZsQlFWa3NRMEZCV2l4RFFVRlFMRXRCUVRCQ0xGRkJRV2hFT3p0QlFVVkJMRlZCUVVrc1MwRkJTM0JETEhsQ1FVRlVMRVZCUVc5RE8wRkJRMnhETEZsQlFVbHpReXhUUVVGVExFbEJRV0k3UVVGRFFTeFpRVUZKUXl4alFVRktPMEZCUTBFc1dVRkJTVU1zWlVGQlNqczdRVUZGUVN4WlFVRkpReXd5UWtGQk1rSXNRMEZCTDBJN1FVRkRRU3haUVVGSlF5d3dRa0ZCTUVJc1EwRkJPVUk3UVVGRFFTeFpRVUZKUXl3eVFrRkJNa0lzUTBGQkwwSTdPMEZCUlVFc1dVRkJUVU1zVTBGQlUyeEZMRTFCUVUwc1MwRkJTM05DTEhsQ1FVRXhRanM3UVVGRlFTeFpRVUZKY1VNc1dVRkJTaXhGUVVGclFqdEJRVU5vUWp0QlFVTkJMR05CUVVrc1MwRkJTM1JETEdkQ1FVRk1MRU5CUVhOQ0xFTkJRWFJDTEVsQlFUSkNMRWRCUVROQ0xFbEJRV3REY1VNc1dVRkJXU3hEUVVGYUxFbEJRV2xDTEVWQlFYWkVMRVZCUTBWTExESkNRVUV5UWl4SFFVRXpRaXhEUVVSR0xFdEJSVXNzU1VGQlNTeExRVUZMTVVNc1owSkJRVXdzUTBGQmMwSXNRMEZCZEVJc1NVRkJNa0lzUlVGQk0wSXNTVUZCYVVOeFF5eFpRVUZaTEVOQlFWb3NTVUZCYVVJc1IwRkJkRVFzUlVGRFNFc3NNa0pCUVRKQ0xFTkJRVU1zUjBGQk5VSTdRVUZEU0RzN1FVRkZSRHRCUVVOQkxGbEJRVWtzUzBGQlN6RkRMR2RDUVVGTUxFTkJRWE5DTEVOQlFYUkNMRWxCUVRKQ0xFZEJRVE5DTEVsQlFXdERjVU1zV1VGQldTeERRVUZhTEVsQlFXbENMRU5CUVVNc1IwRkJlRVFzUlVGRFJVMHNNRUpCUVRCQ0xFZEJRVEZDTEVOQlJFWXNTMEZGU3l4SlFVRkpMRXRCUVVzelF5eG5Ra0ZCVEN4RFFVRnpRaXhEUVVGMFFpeEpRVUV5UWl4RFFVRkRMRWRCUVRWQ0xFbEJRVzFEY1VNc1dVRkJXU3hEUVVGYUxFbEJRV2xDTEVkQlFYaEVMRVZCUTBoTkxEQkNRVUV3UWl4RFFVRkRMRWRCUVROQ096dEJRVVZHTzBGQlEwRXNXVUZCU1N4TFFVRkxNME1zWjBKQlFVd3NRMEZCYzBJc1EwRkJkRUlzU1VGQk1rSXNSVUZCTTBJc1NVRkJhVU54UXl4WlFVRlpMRU5CUVZvc1NVRkJhVUlzUTBGQlF5eEZRVUYyUkN4RlFVTkZUeXd5UWtGQk1rSXNSMEZCTTBJc1EwRkVSaXhMUVVWTExFbEJRVWtzUzBGQlN6VkRMR2RDUVVGTUxFTkJRWE5DTEVOQlFYUkNMRWxCUVRKQ0xFTkJRVU1zUlVGQk5VSXNTVUZCYTBOeFF5eFpRVUZaTEVOQlFWb3NTVUZCYVVJc1JVRkJka1FzUlVGRFNFOHNNa0pCUVRKQ0xFTkJRVU1zUjBGQk5VSTdPMEZCUlVZc1dVRkJTVU1zVTBGQlV5eERRVUZpTEVWQlFXZENPMEZCUTJRN1FVRkRRU3hqUVVGSlVDeFpRVUZLTEVWQlEwVkRMRk5CUVZOUUxFbEJRVWtzUzBGQlMycERMSFZDUVVGTUxFTkJRVFpDTEVOQlFUZENMRU5CUVVvc1IwRkJjME1zUTBGQlF5eEpRVUZKYVVNc1EwRkJUQ3hMUVVGWFN5eFpRVUZaTEVOQlFWb3NTVUZCYVVJc1MwRkJTM0pETEdkQ1FVRk1MRU5CUVhOQ0xFTkJRWFJDTEVOQlFXcENMRWRCUVRSRE1FTXNkMEpCUVhaRUxFbEJRVzFHUnl4TlFVRnNTVHM3UVVGRlJrd3NhMEpCUVZGU0xFbEJRVWtzUzBGQlMycERMSFZDUVVGTUxFTkJRVFpDTEVOQlFUZENMRU5CUVVvc1IwRkJjME1zUTBGQlF5eEpRVUZKYVVNc1EwRkJUQ3hMUVVGWFN5eFpRVUZaTEVOQlFWb3NTVUZCYVVJc1MwRkJTM0pETEdkQ1FVRk1MRU5CUVhOQ0xFTkJRWFJDTEVOQlFXcENMRWRCUVRSRE1rTXNkVUpCUVhaRUxFbEJRV3RHUlN4TlFVRm9TVHRCUVVOQlNpeHRRa0ZCVTFRc1NVRkJTU3hMUVVGTGFrTXNkVUpCUVV3c1EwRkJOa0lzUTBGQk4wSXNRMEZCU2l4SFFVRnpReXhEUVVGRExFbEJRVWxwUXl4RFFVRk1MRXRCUVZkTExGbEJRVmtzUTBGQldpeEpRVUZwUWl4TFFVRkxja01zWjBKQlFVd3NRMEZCYzBJc1EwRkJkRUlzUTBGQmFrSXNSMEZCTkVNMFF5eDNRa0ZCZGtRc1NVRkJiVVpETEUxQlFXeEpPenRCUVVWQkxHVkJRVXM1UXl4MVFrRkJUQ3hEUVVFMlFpeERRVUUzUWl4SlFVRnJRM2RETEUxQlFXeERPMEZCUTBFc1pVRkJTM2hETEhWQ1FVRk1MRU5CUVRaQ0xFTkJRVGRDTEVsQlFXdERlVU1zUzBGQmJFTTdRVUZEUVN4bFFVRkxla01zZFVKQlFVd3NRMEZCTmtJc1EwRkJOMElzU1VGQmEwTXdReXhOUVVGc1F6dEJRVU5FT3p0QlFVVkVPMEZCUTBFc1lVRkJTM0JFTEZsQlFVd3NRMEZCYTBJd1F5eEpRVUZzUWl4RFFVRjFRaXhMUVVGTGFFTXNkVUpCUVRWQ08wRkJRMFE3TzBGQlJVUXNWMEZCUzBVc2VVSkJRVXdzUjBGQmFVTjBRaXhIUVVGcVF6dEJRVU5CTEZkQlFVdHhRaXhuUWtGQlRDeERRVUZ6UWl4RFFVRjBRaXhKUVVFeVFuRkRMRmxCUVZrc1EwRkJXaXhEUVVFelFqdEJRVU5CTEZkQlFVdHlReXhuUWtGQlRDeERRVUZ6UWl4RFFVRjBRaXhKUVVFeVFuRkRMRmxCUVZrc1EwRkJXaXhEUVVFelFqdEJRVU5CTEZkQlFVdHlReXhuUWtGQlRDeERRVUZ6UWl4RFFVRjBRaXhKUVVFeVFuRkRMRmxCUVZrc1EwRkJXaXhEUVVFelFqdEJRVU5FT3p0QlFVVkVPenM3T3pzN1FVRk5RVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk96dEJRVVZCT3p0QlFVVkJPMEZCUTBFN1FVRkRRVHRCUVVOQk96dEJRVVZCTzBGQlEwRTdRVUZEUVRzN096czJRa0ZGVTFNc1NTeEZRVUZOTzBGQlEySXNWMEZCU3pWRExHZENRVUZNTEVOQlFYTkNORU1zU1VGQmRFSTdRVUZEUkRzN1FVRkZSRHM3T3pzN096czdNa0pCUzA4N1FVRkJRVHM3UVVGRFRDd3dTVUZCYTBJc1ZVRkJRME1zVDBGQlJDeEZRVUZoTzBGQlF6ZENMR1ZCUVV0NFJDeGxRVUZNTEVkQlFYVkNkMFFzVDBGQmRrSTdPMEZCUlVFc1dVRkJTWFJGTEU5QlFVOTFSU3hwUWtGQldDeEZRVUU0UWp0QlFVTTFRaXhwUWtGQlN6bERMR2RDUVVGTUxFZEJRWGRDTEU5QlFVdEhMR3RDUVVFM1FqdEJRVU5CTzBGQlEwRXNZMEZCU1N4UFFVRlBNa01zYTBKQlFXdENReXhwUWtGQmVrSXNTMEZCSzBNc1ZVRkJia1FzUlVGQkswUTdRVUZETjBSRUxEaENRVUZyUWtNc2FVSkJRV3hDTEVkQlEwZERMRWxCUkVnc1EwRkRVU3d5UWtGQmJVSTdRVUZEZGtJc2EwSkJRVWxETEc5Q1FVRnZRaXhUUVVGNFFpeEZRVUZ0UXp0QlFVTnFRekZGTEhWQ1FVRlBNa1VzWjBKQlFWQXNRMEZCZDBJc1kwRkJlRUlzUlVGQmQwTXNUMEZCUzJwRUxGRkJRVGRETzBGQlEwUTdRVUZEUml4aFFVeElMRVZCVFVkclJDeExRVTVJTEVOQlRWTkRMRkZCUVZGRExFdEJUbXBDTzBGQlQwUXNWMEZTUkN4TlFWRlBPMEZCUTB3N1FVRkRRVGxGTEcxQ1FVRlBNa1VzWjBKQlFWQXNRMEZCZDBJc1kwRkJlRUlzUlVGQmQwTXNUMEZCUzJwRUxGRkJRVGRETzBGQlEwUTdPMEZCUlVRN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVN4alFVRkpMRzFDUVVGVGEwSXNTVUZCVkN4TFFVRnJRaXhUUVVGc1FpeEpRVU5HTEcxQ1FVRlROVUlzUlVGQlZDeERRVUZaUXl4TlFVRmFMRXRCUVhWQ0xGTkJSSEpDTEVsQlJVWXNiVUpCUVZORUxFVkJRVlFzUTBGQldVTXNUVUZCV2l4TFFVRjFRaXhMUVVaNlFpeEZRVWRGTzBGQlEwRTBSQ3h2UWtGQlVVVXNTVUZCVWl4RFFVRmhMRzFFUVVGaU8wRkJRMEVzYlVKQlFVczVReXhsUVVGTUxFZEJRWFZDSzBNc1YwRkJWenRCUVVGQkxIRkNRVUZOVml4bFFVRk9PMEZCUVVFc1lVRkJXQ3hGUVVGblF5eEpRVUZKTEVsQlFYQkRMRU5CUVhaQ08wRkJRMFE3UVVGRFJqczdRVUZGUkR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CT3p0QlFVVkJPMEZCUTBFN08wRkJNVU5CTEdGQk5rTkZRVHRCUVVOSUxFOUJha1JFTzBGQmEwUkVPenM3ZDBKQk1XRnJRenRCUVVOcVF5eGhRVUZQYUVVc1MwRkJTekpGTEVkQlFVd3NRMEZCVXl4RFFVRkRMRU5CUVVRc1IwRkJTek5GTEV0QlFVdERMRVZCUVZZc1IwRkJaU3hMUVVGTFJ5dzBRa0ZCVEN4RFFVRnJRM2xDTEUxQlFXcEVMRWRCUVRCRUxFdEJRVXRtTEcxRFFVRjRSU3hEUVVGUU8wRkJRMFE3T3pzN096dHJRa0V5WVZrc1NVRkJTVm9zYTBKQlFVb3NSU0lzSW1acGJHVWlPaUpFWlhacFkyVk5iM1JwYjI1TmIyUjFiR1V1YW5NaUxDSnpiM1Z5WTJWelEyOXVkR1Z1ZENJNld5SnBiWEJ2Y25RZ1NXNXdkWFJOYjJSMWJHVWdabkp2YlNBbkxpOUpibkIxZEUxdlpIVnNaU2M3WEc1cGJYQnZjblFnUkU5TlJYWmxiblJUZFdKdGIyUjFiR1VnWm5KdmJTQW5MaTlFVDAxRmRtVnVkRk4xWW0xdlpIVnNaU2M3WEc1cGJYQnZjblFnVFc5MGFXOXVTVzV3ZFhRZ1puSnZiU0FuTGk5TmIzUnBiMjVKYm5CMWRDYzdYRzVwYlhCdmNuUWdjR3hoZEdadmNtMGdabkp2YlNBbmNHeGhkR1p2Y20wbk8xeHVYRzR2S2lwY2JpQXFJRWRsZEhNZ2RHaGxJR04xY25KbGJuUWdiRzlqWVd3Z2RHbHRaU0JwYmlCelpXTnZibVJ6TGx4dUlDb2dWWE5sY3lCZ2QybHVaRzkzTG5CbGNtWnZjbTFoYm1ObExtNXZkeWdwWUNCcFppQmhkbUZwYkdGaWJHVXNJR0Z1WkNCZ1JHRjBaUzV1YjNjb0tXQWdiM1JvWlhKM2FYTmxMbHh1SUNwY2JpQXFJRUJ5WlhSMWNtNGdlMjUxYldKbGNuMWNiaUFxTDF4dVpuVnVZM1JwYjI0Z1oyVjBURzlqWVd4VWFXMWxLQ2tnZTF4dUlDQnBaaUFvZDJsdVpHOTNMbkJsY21admNtMWhibU5sS1Z4dUlDQWdJSEpsZEhWeWJpQjNhVzVrYjNjdWNHVnlabTl5YldGdVkyVXVibTkzS0NrZ0x5QXhNREF3TzF4dUlDQnlaWFIxY200Z1JHRjBaUzV1YjNjb0tTQXZJREV3TURBN1hHNTlYRzVjYm1OdmJuTjBJR05vY205dFpWSmxaMFY0Y0NBOUlDOURhSEp2YldVdk8xeHVZMjl1YzNRZ2RHOUVaV2NnUFNBeE9EQWdMeUJOWVhSb0xsQkpPMXh1WEc0dktpcGNiaUFxSUdCRVpYWnBZMlZOYjNScGIyNWdJRzF2WkhWc1pTQnphVzVuYkdWMGIyNHVYRzRnS2lCVWFHVWdZRVJsZG1salpVMXZkR2x2YmsxdlpIVnNaV0FnYzJsdVoyeGxkRzl1SUhCeWIzWnBaR1Z6SUhSb1pTQnlZWGNnZG1Gc2RXVnpYRzRnS2lCdlppQjBhR1VnWVdOalpXeGxjbUYwYVc5dUlHbHVZMngxWkdsdVp5Qm5jbUYyYVhSNUxDQmhZMk5sYkdWeVlYUnBiMjRzSUdGdVpDQnliM1JoZEdsdmJseHVJQ29nY21GMFpTQndjbTkyYVdSbFpDQmllU0IwYUdVZ1lFUmxkbWxqWlUxdmRHbHZibUFnWlhabGJuUXVYRzRnS2lCSmRDQmhiSE52SUdsdWMzUmhiblJwWVhSbElIUm9aU0JnUVdOalpXeGxjbUYwYVc5dVNXNWpiSFZrYVc1blIzSmhkbWwwZVdBc1hHNGdLaUJnUVdOalpXeGxjbUYwYVc5dVlDQmhibVFnWUZKdmRHRjBhVzl1VW1GMFpXQWdjM1ZpYlc5a2RXeGxjeUIwYUdGMElIVnVhV1o1SUhSb2IzTmxJSFpoYkhWbGMxeHVJQ29nWVdOeWIzTnpJSEJzWVhSbWIzSnRjeUJpZVNCdFlXdHBibWNnZEdobGJTQmpiMjF3YkdsaGJuUWdkMmwwYUNCN1FHeHBibXRjYmlBcUlHaDBkSEE2THk5M2QzY3Vkek11YjNKbkwxUlNMMjl5YVdWdWRHRjBhVzl1TFdWMlpXNTBMM3gwYUdVZ1Z6TkRJSE4wWVc1a1lYSmtmUzVjYmlBcUlGZG9aVzRnY21GM0lIWmhiSFZsY3lCaGNtVWdibTkwSUhCeWIzWnBaR1ZrSUdKNUlIUm9aU0J6Wlc1emIzSnpMQ0IwYUdseklHMXZaSFZzWlhNZ2RISnBaWE5jYmlBcUlIUnZJSEpsWTJGc1kzVnNZWFJsSUhSb1pXMGdabkp2YlNCaGRtRnBiR0ZpYkdVZ2RtRnNkV1Z6T2x4dUlDb2dMU0JnWVdOalpXeGxjbUYwYVc5dVlDQnBjeUJqWVd4amRXeGhkR1ZrSUdaeWIyMGdZR0ZqWTJWc1pYSmhkR2x2YmtsdVkyeDFaR2x1WjBkeVlYWnBkSGxnWEc0Z0tpQWdJSGRwZEdnZ1lTQm9hV2RvTFhCaGMzTWdabWxzZEdWeU8xeHVJQ29nTFNBb1kyOXRhVzVuSUhOdmIyNGc0b0NVSUhkaGFYUnBibWNnWm05eUlHRWdZblZuSUc5dUlFTm9jbTl0WlNCMGJ5QmlaU0J5WlhOdmJIWmxaQ2xjYmlBcUlDQWdZSEp2ZEdGMGFXOXVVbUYwWldBZ2FYTWdZMkZzWTNWc1lYUmxaQ0JtY205dElHQnZjbWxsYm5SaGRHbHZibUF1WEc0Z0tseHVJQ29nUUdOc1lYTnpJRVJsZG1salpVMXZkR2x2YmsxdlpIVnNaVnh1SUNvZ1FHVjRkR1Z1WkhNZ1NXNXdkWFJOYjJSMWJHVmNiaUFxTDF4dVkyeGhjM01nUkdWMmFXTmxUVzkwYVc5dVRXOWtkV3hsSUdWNGRHVnVaSE1nU1c1d2RYUk5iMlIxYkdVZ2UxeHVYRzRnSUM4cUtseHVJQ0FnS2lCRGNtVmhkR1Z6SUhSb1pTQmdSR1YyYVdObFRXOTBhVzl1WUNCdGIyUjFiR1VnYVc1emRHRnVZMlV1WEc0Z0lDQXFYRzRnSUNBcUlFQmpiMjV6ZEhKMVkzUnZjbHh1SUNBZ0tpOWNiaUFnWTI5dWMzUnlkV04wYjNJb0tTQjdYRzRnSUNBZ2MzVndaWElvSjJSbGRtbGpaVzF2ZEdsdmJpY3BPMXh1WEc0Z0lDQWdMeW9xWEc0Z0lDQWdJQ29nVW1GM0lIWmhiSFZsY3lCamIyMXBibWNnWm5KdmJTQjBhR1VnWUdSbGRtbGpaVzF2ZEdsdmJtQWdaWFpsYm5RZ2MyVnVkQ0JpZVNCMGFHbHpJRzF2WkhWc1pTNWNiaUFnSUNBZ0tseHVJQ0FnSUNBcUlFQjBhR2x6SUVSbGRtbGpaVTF2ZEdsdmJrMXZaSFZzWlZ4dUlDQWdJQ0FxSUVCMGVYQmxJSHR1ZFcxaVpYSmJYWDFjYmlBZ0lDQWdLaUJBWkdWbVlYVnNkQ0JiYm5Wc2JDd2diblZzYkN3Z2JuVnNiQ3dnYm5Wc2JDd2diblZzYkN3Z2JuVnNiQ3dnYm5Wc2JDd2diblZzYkN3Z2JuVnNiRjFjYmlBZ0lDQWdLaTljYmlBZ0lDQjBhR2x6TG1WMlpXNTBJRDBnVzI1MWJHd3NJRzUxYkd3c0lHNTFiR3dzSUc1MWJHd3NJRzUxYkd3c0lHNTFiR3dzSUc1MWJHd3NJRzUxYkd3c0lHNTFiR3hkTzF4dVhHNGdJQ0FnTHlvcVhHNGdJQ0FnSUNvZ1ZHaGxJR0JCWTJObGJHVnlZWFJwYjI1SmJtTnNkV1JwYm1kSGNtRjJhWFI1WUNCdGIyUjFiR1V1WEc0Z0lDQWdJQ29nVUhKdmRtbGtaWE1nZFc1cFptbGxaQ0IyWVd4MVpYTWdiMllnZEdobElHRmpZMlZzWlhKaGRHbHZiaUJwYm1Oc2RXUnBibWNnWjNKaGRtbDBlUzVjYmlBZ0lDQWdLbHh1SUNBZ0lDQXFJRUIwYUdseklFUmxkbWxqWlUxdmRHbHZiazF2WkhWc1pWeHVJQ0FnSUNBcUlFQjBlWEJsSUh0RVQwMUZkbVZ1ZEZOMVltMXZaSFZzWlgxY2JpQWdJQ0FnS2k5Y2JpQWdJQ0IwYUdsekxtRmpZMlZzWlhKaGRHbHZia2x1WTJ4MVpHbHVaMGR5WVhacGRIa2dQU0J1WlhjZ1JFOU5SWFpsYm5SVGRXSnRiMlIxYkdVb2RHaHBjeXdnSjJGalkyVnNaWEpoZEdsdmJrbHVZMngxWkdsdVowZHlZWFpwZEhrbktUdGNibHh1SUNBZ0lDOHFLbHh1SUNBZ0lDQXFJRlJvWlNCZ1FXTmpaV3hsY21GMGFXOXVZQ0J6ZFdKdGIyUjFiR1V1WEc0Z0lDQWdJQ29nVUhKdmRtbGtaWE1nZFc1cFptbGxaQ0IyWVd4MVpYTWdiMllnZEdobElHRmpZMlZzWlhKaGRHbHZiaTVjYmlBZ0lDQWdLaUJGYzNScGJXRjBaWE1nZEdobElHRmpZMlZzWlhKaGRHbHZiaUIyWVd4MVpYTWdabkp2YlNCZ1lXTmpaV3hsY21GMGFXOXVTVzVqYkhWa2FXNW5SM0poZG1sMGVXQmNiaUFnSUNBZ0tpQnlZWGNnZG1Gc2RXVnpJR2xtSUhSb1pTQmhZMk5sYkdWeVlYUnBiMjRnY21GM0lIWmhiSFZsY3lCaGNtVWdibTkwSUdGMllXbHNZV0pzWlNCdmJpQjBhR1ZjYmlBZ0lDQWdLaUJrWlhacFkyVXVYRzRnSUNBZ0lDcGNiaUFnSUNBZ0tpQkFkR2hwY3lCRVpYWnBZMlZOYjNScGIyNU5iMlIxYkdWY2JpQWdJQ0FnS2lCQWRIbHdaU0I3UkU5TlJYWmxiblJUZFdKdGIyUjFiR1Y5WEc0Z0lDQWdJQ292WEc0Z0lDQWdkR2hwY3k1aFkyTmxiR1Z5WVhScGIyNGdQU0J1WlhjZ1JFOU5SWFpsYm5SVGRXSnRiMlIxYkdVb2RHaHBjeXdnSjJGalkyVnNaWEpoZEdsdmJpY3BPMXh1WEc0Z0lDQWdMeW9xWEc0Z0lDQWdJQ29nVkdobElHQlNiM1JoZEdsdmJsSmhkR1ZnSUhOMVltMXZaSFZzWlM1Y2JpQWdJQ0FnS2lCUWNtOTJhV1JsY3lCMWJtbG1hV1ZrSUhaaGJIVmxjeUJ2WmlCMGFHVWdjbTkwWVhScGIyNGdjbUYwWlM1Y2JpQWdJQ0FnS2lBb1kyOXRhVzVuSUhOdmIyNHNJSGRoYVhScGJtY2dabTl5SUdFZ1luVm5JRzl1SUVOb2NtOXRaU0IwYnlCaVpTQnlaWE52YkhabFpDbGNiaUFnSUNBZ0tpQkZjM1JwYldGMFpYTWdkR2hsSUhKdmRHRjBhVzl1SUhKaGRHVWdkbUZzZFdWeklHWnliMjBnWUc5eWFXVnVkR0YwYVc5dVlDQjJZV3gxWlhNZ2FXWmNiaUFnSUNBZ0tpQjBhR1VnY205MFlYUnBiMjRnY21GMFpTQnlZWGNnZG1Gc2RXVnpJR0Z5WlNCdWIzUWdZWFpoYVd4aFlteGxJRzl1SUhSb1pTQmtaWFpwWTJVdVhHNGdJQ0FnSUNwY2JpQWdJQ0FnS2lCQWRHaHBjeUJFWlhacFkyVk5iM1JwYjI1TmIyUjFiR1ZjYmlBZ0lDQWdLaUJBZEhsd1pTQjdSRTlOUlhabGJuUlRkV0p0YjJSMWJHVjlYRzRnSUNBZ0lDb3ZYRzRnSUNBZ2RHaHBjeTV5YjNSaGRHbHZibEpoZEdVZ1BTQnVaWGNnUkU5TlJYWmxiblJUZFdKdGIyUjFiR1VvZEdocGN5d2dKM0p2ZEdGMGFXOXVVbUYwWlNjcE8xeHVYRzRnSUNBZ0x5b3FYRzRnSUNBZ0lDb2dVbVZ4ZFdseVpXUWdjM1ZpYlc5a2RXeGxjeUF2SUdWMlpXNTBjeTVjYmlBZ0lDQWdLbHh1SUNBZ0lDQXFJRUIwYUdseklFUmxkbWxqWlUxdmRHbHZiazF2WkhWc1pWeHVJQ0FnSUNBcUlFQjBlWEJsSUh0dlltcGxZM1I5WEc0Z0lDQWdJQ29nUUhCeWIzQmxjblI1SUh0aWIyOXNmU0JoWTJObGJHVnlZWFJwYjI1SmJtTnNkV1JwYm1kSGNtRjJhWFI1SUMwZ1NXNWthV05oZEdWeklIZG9aWFJvWlhJZ2RHaGxJR0JoWTJObGJHVnlZWFJwYjI1SmJtTnNkV1JwYm1kSGNtRjJhWFI1WUNCMWJtbG1hV1ZrSUhaaGJIVmxjeUJoY21VZ2NtVnhkV2x5WldRZ2IzSWdibTkwSUNoa1pXWmhkV3gwY3lCMGJ5QmdabUZzYzJWZ0tTNWNiaUFnSUNBZ0tpQkFjSEp2Y0dWeWRIa2dlMkp2YjJ4OUlHRmpZMlZzWlhKaGRHbHZiaUF0SUVsdVpHbGpZWFJsY3lCM2FHVjBhR1Z5SUhSb1pTQmdZV05qWld4bGNtRjBhVzl1WUNCMWJtbG1hV1ZrSUhaaGJIVmxjeUJoY21VZ2NtVnhkV2x5WldRZ2IzSWdibTkwSUNoa1pXWmhkV3gwY3lCMGJ5QmdabUZzYzJWZ0tTNWNiaUFnSUNBZ0tpQkFjSEp2Y0dWeWRIa2dlMkp2YjJ4OUlISnZkR0YwYVc5dVVtRjBaU0F0SUVsdVpHbGpZWFJsY3lCM2FHVjBhR1Z5SUhSb1pTQmdjbTkwWVhScGIyNVNZWFJsWUNCMWJtbG1hV1ZrSUhaaGJIVmxjeUJoY21VZ2NtVnhkV2x5WldRZ2IzSWdibTkwSUNoa1pXWmhkV3gwY3lCMGJ5QmdabUZzYzJWZ0tTNWNiaUFnSUNBZ0tpOWNiaUFnSUNCMGFHbHpMbkpsY1hWcGNtVmtJRDBnZTF4dUlDQWdJQ0FnWVdOalpXeGxjbUYwYVc5dVNXNWpiSFZrYVc1blIzSmhkbWwwZVRvZ1ptRnNjMlVzWEc0Z0lDQWdJQ0JoWTJObGJHVnlZWFJwYjI0NklHWmhiSE5sTEZ4dUlDQWdJQ0FnY205MFlYUnBiMjVTWVhSbE9pQm1ZV3h6WlZ4dUlDQWdJSDA3WEc1Y2JpQWdJQ0F2S2lwY2JpQWdJQ0FnS2lCU1pYTnZiSFpsSUdaMWJtTjBhVzl1SUc5bUlIUm9aU0J0YjJSMWJHVW5jeUJ3Y205dGFYTmxMbHh1SUNBZ0lDQXFYRzRnSUNBZ0lDb2dRSFJvYVhNZ1JHVjJhV05sVFc5MGFXOXVUVzlrZFd4bFhHNGdJQ0FnSUNvZ1FIUjVjR1VnZTJaMWJtTjBhVzl1ZlZ4dUlDQWdJQ0FxSUVCa1pXWmhkV3gwSUc1MWJHeGNiaUFnSUNBZ0tpQkFjMlZsSUVSbGRtbGpaVTF2ZEdsdmJrMXZaSFZzWlNOcGJtbDBYRzRnSUNBZ0lDb3ZYRzRnSUNBZ2RHaHBjeTVmY0hKdmJXbHpaVkpsYzI5c2RtVWdQU0J1ZFd4c08xeHVYRzRnSUNBZ0x5b3FYRzRnSUNBZ0lDb2dWVzVwWm5scGJtY2dabUZqZEc5eUlHOW1JSFJvWlNCdGIzUnBiMjRnWkdGMFlTQjJZV3gxWlhNZ0tHQXhZQ0J2YmlCQmJtUnliMmxrTENCZ0xURmdJRzl1SUdsUFV5a3VYRzRnSUNBZ0lDcGNiaUFnSUNBZ0tpQkFkR2hwY3lCRVpYWnBZMlZOYjNScGIyNU5iMlIxYkdWY2JpQWdJQ0FnS2lCQWRIbHdaU0I3Ym5WdFltVnlmVnh1SUNBZ0lDQXFMMXh1SUNBZ0lIUm9hWE11WDNWdWFXWjVUVzkwYVc5dVJHRjBZU0E5SUNod2JHRjBabTl5YlM1dmN5NW1ZVzFwYkhrZ1BUMDlJQ2RwVDFNbktTQS9JQzB4SURvZ01UdGNibHh1SUNBZ0lDOHFLbHh1SUNBZ0lDQXFJRlZ1YVdaNWFXNW5JR1poWTNSdmNpQnZaaUIwYUdVZ2NHVnlhVzlrSUNoZ01XQWdiMjRnUVc1a2NtOXBaQ3dnWURGZ0lHOXVJR2xQVXlrdUlHbHVJSE5sWTF4dUlDQWdJQ0FxSUVCMGIyUnZJQzBnZFc1cFpua2dkMmwwYUNCbExtbHVkR1Z5ZG1Gc0lITndaV05wWm1sallYUnBiMjRnS0dsdUlHMXpLU0EvWEc0Z0lDQWdJQ3BjYmlBZ0lDQWdLaUJBZEdocGN5QkVaWFpwWTJWTmIzUnBiMjVOYjJSMWJHVmNiaUFnSUNBZ0tpQkFkSGx3WlNCN2JuVnRZbVZ5ZlZ4dUlDQWdJQ0FxTDF4dUlDQWdJSFJvYVhNdVgzVnVhV1o1VUdWeWFXOWtJRDBnS0hCc1lYUm1iM0p0TG05ekxtWmhiV2xzZVNBOVBUMGdKMEZ1WkhKdmFXUW5LU0EvSURBdU1EQXhJRG9nTVR0Y2JseHVJQ0FnSUM4cUtseHVJQ0FnSUNBcUlFRmpZMlZzWlhKaGRHbHZiaUJqWVd4amRXeGhkR1ZrSUdaeWIyMGdkR2hsSUdCaFkyTmxiR1Z5WVhScGIyNUpibU5zZFdScGJtZEhjbUYyYVhSNVlDQnlZWGNnZG1Gc2RXVnpMbHh1SUNBZ0lDQXFYRzRnSUNBZ0lDb2dRSFJvYVhNZ1JHVjJhV05sVFc5MGFXOXVUVzlrZFd4bFhHNGdJQ0FnSUNvZ1FIUjVjR1VnZTI1MWJXSmxjbHRkZlZ4dUlDQWdJQ0FxSUVCa1pXWmhkV3gwSUZzd0xDQXdMQ0F3WFZ4dUlDQWdJQ0FxTDF4dUlDQWdJSFJvYVhNdVgyTmhiR04xYkdGMFpXUkJZMk5sYkdWeVlYUnBiMjRnUFNCYk1Dd2dNQ3dnTUYwN1hHNWNiaUFnSUNBdktpcGNiaUFnSUNBZ0tpQlVhVzFsSUdOdmJuTjBZVzUwSUNob1lXeG1MV3hwWm1VcElHOW1JSFJvWlNCb2FXZG9MWEJoYzNNZ1ptbHNkR1Z5SUhWelpXUWdkRzhnYzIxdmIzUm9JSFJvWlNCaFkyTmxiR1Z5WVhScGIyNGdkbUZzZFdWeklHTmhiR04xYkdGMFpXUWdabkp2YlNCMGFHVWdZV05qWld4bGNtRjBhVzl1SUdsdVkyeDFaR2x1WnlCbmNtRjJhWFI1SUhKaGR5QjJZV3gxWlhNZ0tHbHVJSE5sWTI5dVpITXBMbHh1SUNBZ0lDQXFYRzRnSUNBZ0lDb2dRSFJvYVhNZ1JHVjJhV05sVFc5MGFXOXVUVzlrZFd4bFhHNGdJQ0FnSUNvZ1FIUjVjR1VnZTI1MWJXSmxjbjFjYmlBZ0lDQWdLaUJBWkdWbVlYVnNkQ0F3TGpGY2JpQWdJQ0FnS2lCQVkyOXVjM1JoYm5SY2JpQWdJQ0FnS2k5Y2JpQWdJQ0IwYUdsekxsOWpZV3hqZFd4aGRHVmtRV05qWld4bGNtRjBhVzl1VkdsdFpVTnZibk4wWVc1MElEMGdNQzR4TzF4dVhHNGdJQ0FnTHlvcVhHNGdJQ0FnSUNvZ1RHRjBaWE4wSUdCaFkyTmxiR1Z5WVhScGIyNUpibU5zZFdScGJtZEhjbUYyYVhSNVlDQnlZWGNnZG1Gc2RXVXNJSFZ6WldRZ2FXNGdkR2hsSUdocFoyZ3RjR0Z6Y3lCbWFXeDBaWElnZEc4Z1kyRnNZM1ZzWVhSbElIUm9aU0JoWTJObGJHVnlZWFJwYjI0Z0tHbG1JSFJvWlNCZ1lXTmpaV3hsY21GMGFXOXVZQ0IyWVd4MVpYTWdZWEpsSUc1dmRDQndjbTkyYVdSbFpDQmllU0JnSjJSbGRtbGpaVzF2ZEdsdmJpZGdLUzVjYmlBZ0lDQWdLbHh1SUNBZ0lDQXFJRUIwYUdseklFUmxkbWxqWlUxdmRHbHZiazF2WkhWc1pWeHVJQ0FnSUNBcUlFQjBlWEJsSUh0dWRXMWlaWEpiWFgxY2JpQWdJQ0FnS2lCQVpHVm1ZWFZzZENCYk1Dd2dNQ3dnTUYxY2JpQWdJQ0FnS2k5Y2JpQWdJQ0IwYUdsekxsOXNZWE4wUVdOalpXeGxjbUYwYVc5dVNXNWpiSFZrYVc1blIzSmhkbWwwZVNBOUlGc3dMQ0F3TENBd1hUdGNibHh1SUNBZ0lDOHFLbHh1SUNBZ0lDQXFJRkp2ZEdGMGFXOXVJSEpoZEdVZ1kyRnNZM1ZzWVhSbFpDQm1jbTl0SUhSb1pTQnZjbWxsYm5SaGRHbHZiaUIyWVd4MVpYTXVYRzRnSUNBZ0lDcGNiaUFnSUNBZ0tpQkFkR2hwY3lCRVpYWnBZMlZOYjNScGIyNU5iMlIxYkdWY2JpQWdJQ0FnS2lCQWRIbHdaU0I3Ym5WdFltVnlXMTE5WEc0Z0lDQWdJQ29nUUdSbFptRjFiSFFnV3pBc0lEQXNJREJkWEc0Z0lDQWdJQ292WEc0Z0lDQWdkR2hwY3k1ZlkyRnNZM1ZzWVhSbFpGSnZkR0YwYVc5dVVtRjBaU0E5SUZzd0xDQXdMQ0F3WFR0Y2JseHVJQ0FnSUM4cUtseHVJQ0FnSUNBcUlFeGhkR1Z6ZENCdmNtbGxiblJoZEdsdmJpQjJZV3gxWlN3Z2RYTmxaQ0IwYnlCallXeGpkV3hoZEdVZ2RHaGxJSEp2ZEdGMGFXOXVJSEpoZEdVZ0lDaHBaaUIwYUdVZ1lISnZkR0YwYVc5dVVtRjBaV0FnZG1Gc2RXVnpJR0Z5WlNCdWIzUWdjSEp2ZG1sa1pXUWdZbmtnWUNka1pYWnBZMlZ0YjNScGIyNG5ZQ2t1WEc0Z0lDQWdJQ3BjYmlBZ0lDQWdLaUJBZEdocGN5QkVaWFpwWTJWTmIzUnBiMjVOYjJSMWJHVmNiaUFnSUNBZ0tpQkFkSGx3WlNCN2JuVnRZbVZ5VzExOVhHNGdJQ0FnSUNvZ1FHUmxabUYxYkhRZ1d6QXNJREFzSURCZFhHNGdJQ0FnSUNvdlhHNGdJQ0FnZEdocGN5NWZiR0Z6ZEU5eWFXVnVkR0YwYVc5dUlEMGdXekFzSURBc0lEQmRPMXh1WEc0Z0lDQWdMeW9xWEc0Z0lDQWdJQ29nVEdGMFpYTjBJRzl5YVdWdWRHRjBhVzl1SUhScGJXVnpkR0Z0Y0hNc0lIVnpaV1FnZEc4Z1kyRnNZM1ZzWVhSbElIUm9aU0J5YjNSaGRHbHZiaUJ5WVhSbElDaHBaaUIwYUdVZ1lISnZkR0YwYVc5dVVtRjBaV0FnZG1Gc2RXVnpJR0Z5WlNCdWIzUWdjSEp2ZG1sa1pXUWdZbmtnWUNka1pYWnBZMlZ0YjNScGIyNG5ZQ2t1WEc0Z0lDQWdJQ3BjYmlBZ0lDQWdLaUJBZEdocGN5QkVaWFpwWTJWTmIzUnBiMjVOYjJSMWJHVmNiaUFnSUNBZ0tpQkFkSGx3WlNCN2JuVnRZbVZ5VzExOVhHNGdJQ0FnSUNvZ1FHUmxabUYxYkhRZ1d6QXNJREFzSURCZFhHNGdJQ0FnSUNvdlhHNGdJQ0FnZEdocGN5NWZiR0Z6ZEU5eWFXVnVkR0YwYVc5dVZHbHRaWE4wWVcxd0lEMGdiblZzYkR0Y2JseHVJQ0FnSUhSb2FYTXVYM0J5YjJObGMzTkdkVzVqZEdsdmJpQTlJRzUxYkd3N1hHNGdJQ0FnZEdocGN5NWZjSEp2WTJWemN5QTlJSFJvYVhNdVgzQnliMk5sYzNNdVltbHVaQ2gwYUdsektUdGNiaUFnSUNCMGFHbHpMbDlrWlhacFkyVnRiM1JwYjI1RGFHVmpheUE5SUhSb2FYTXVYMlJsZG1salpXMXZkR2x2YmtOb1pXTnJMbUpwYm1Rb2RHaHBjeWs3WEc0Z0lDQWdkR2hwY3k1ZlpHVjJhV05sYlc5MGFXOXVUR2x6ZEdWdVpYSWdQU0IwYUdsekxsOWtaWFpwWTJWdGIzUnBiMjVNYVhOMFpXNWxjaTVpYVc1a0tIUm9hWE1wTzF4dVhHNGdJQ0FnZEdocGN5NWZZMmhsWTJ0RGIzVnVkR1Z5SUQwZ01EdGNiaUFnZlZ4dVhHNGdJQzhxS2x4dUlDQWdLaUJFWldOaGVTQm1ZV04wYjNJZ2IyWWdkR2hsSUdocFoyZ3RjR0Z6Y3lCbWFXeDBaWElnZFhObFpDQjBieUJqWVd4amRXeGhkR1VnZEdobElHRmpZMlZzWlhKaGRHbHZiaUJtY205dElIUm9aU0JnWVdOalpXeGxjbUYwYVc5dVNXNWpiSFZrYVc1blIzSmhkbWwwZVdBZ2NtRjNJSFpoYkhWbGN5NWNiaUFnSUNwY2JpQWdJQ29nUUhSNWNHVWdlMjUxYldKbGNuMWNiaUFnSUNvZ1FISmxZV1J2Ym14NVhHNGdJQ0FxTDF4dUlDQm5aWFFnWDJOaGJHTjFiR0YwWldSQlkyTmxiR1Z5WVhScGIyNUVaV05oZVNncElIdGNiaUFnSUNCeVpYUjFjbTRnVFdGMGFDNWxlSEFvTFRJZ0tpQk5ZWFJvTGxCSklDb2dkR2hwY3k1aFkyTmxiR1Z5WVhScGIyNUpibU5zZFdScGJtZEhjbUYyYVhSNUxuQmxjbWx2WkNBdklIUm9hWE11WDJOaGJHTjFiR0YwWldSQlkyTmxiR1Z5WVhScGIyNVVhVzFsUTI5dWMzUmhiblFwTzF4dUlDQjlYRzVjYmlBZ0x5b3FYRzRnSUNBcUlGTmxibk52Y2lCamFHVmpheUJ2YmlCcGJtbDBhV0ZzYVhwaGRHbHZiaUJ2WmlCMGFHVWdiVzlrZFd4bExseHVJQ0FnS2lCVWFHbHpJRzFsZEdodlpEcGNiaUFnSUNvZ0xTQmphR1ZqYTNNZ2QyaGxkR2hsY2lCMGFHVWdZR0ZqWTJWc1pYSmhkR2x2YmtsdVkyeDFaR2x1WjBkeVlYWnBkSGxnTENCMGFHVWdZR0ZqWTJWc1pYSmhkR2x2Ym1Bc1hHNGdJQ0FxSUNBZ1lXNWtJSFJvWlNCZ2NtOTBZWFJwYjI1U1lYUmxZQ0IyWVd4MVpYTWdZWEpsSUhaaGJHbGtJRzl5SUc1dmREdGNiaUFnSUNvZ0xTQm5aWFJ6SUhSb1pTQndaWEpwYjJRZ2IyWWdkR2hsSUdBblpHVjJhV05sYlc5MGFXOXVKMkFnWlhabGJuUWdZVzVrSUhObGRITWdkR2hsSUhCbGNtbHZaQ0J2Wmx4dUlDQWdLaUFnSUhSb1pTQmdRV05qWld4bGNtRjBhVzl1U1c1amJIVmthVzVuUjNKaGRtbDBlV0FzSUdCQlkyTmxiR1Z5WVhScGIyNWdMQ0JoYm1RZ1lGSnZkR0YwYVc5dVVtRjBaV0JjYmlBZ0lDb2dJQ0J6ZFdKdGIyUjFiR1Z6TzF4dUlDQWdLaUF0SUNocGJpQjBhR1VnWTJGelpTQjNhR1Z5WlNCaFkyTmxiR1Z5WVhScGIyNGdjbUYzSUhaaGJIVmxjeUJoY21VZ2JtOTBJSEJ5YjNacFpHVmtLVnh1SUNBZ0tpQWdJR2x1WkdsallYUmxjeUIzYUdWMGFHVnlJSFJvWlNCaFkyTmxiR1Z5WVhScGIyNGdZMkZ1SUdKbElHTmhiR04xYkdGMFpXUWdabkp2YlNCMGFHVmNiaUFnSUNvZ0lDQmdZV05qWld4bGNtRjBhVzl1U1c1amJIVmthVzVuUjNKaGRtbDBlV0FnZFc1cFptbGxaQ0IyWVd4MVpYTWdiM0lnYm05MExseHVJQ0FnS2x4dUlDQWdLaUJBY0dGeVlXMGdlMFJsZG1salpVMXZkR2x2YmtWMlpXNTBmU0JsSUMwZ1ZHaGxJR1pwY25OMElHQW5aR1YyYVdObGJXOTBhVzl1SjJBZ1pYWmxiblFnWTJGMVoyaDBMbHh1SUNBZ0tpOWNiaUFnWDJSbGRtbGpaVzF2ZEdsdmJrTm9aV05yS0dVcElIdGNiaUFnSUNBdkx5QmpiR1ZoY2lCMGFXMWxiM1YwSUNoaGJuUnBMVVpwY21WbWIzZ2dZblZuSUhOdmJIVjBhVzl1TENCM2FXNWtiM2NnWlhabGJuUWdaR1YyYVdObGIzSnBaVzUwWVhScGIyNGdZbVZwYm1jZ2JuWmxjaUJqWVd4c1pXUXBYRzRnSUNBZ0x5OGdjMlYwSUhSb1pTQnpaWFFnZEdsdFpXOTFkQ0JwYmlCcGJtbDBLQ2tnWm5WdVkzUnBiMjVjYmlBZ0lDQmpiR1ZoY2xScGJXVnZkWFFvZEdocGN5NWZZMmhsWTJ0VWFXMWxiM1YwU1dRcE8xeHVYRzRnSUNBZ2RHaHBjeTVwYzFCeWIzWnBaR1ZrSUQwZ2RISjFaVHRjYmlBZ0lDQjBhR2x6TG5CbGNtbHZaQ0E5SUdVdWFXNTBaWEoyWVd3Z0x5QXhNREF3TzF4dUlDQWdJSFJvYVhNdWFXNTBaWEoyWVd3Z1BTQmxMbWx1ZEdWeWRtRnNPMXh1WEc0Z0lDQWdMeThnVTJWdWMyOXlJR0YyWVdsc1lXSnBiR2wwZVNCbWIzSWdkR2hsSUdGalkyVnNaWEpoZEdsdmJpQnBibU5zZFdScGJtY2daM0poZG1sMGVWeHVJQ0FnSUhSb2FYTXVZV05qWld4bGNtRjBhVzl1U1c1amJIVmthVzVuUjNKaGRtbDBlUzVwYzFCeWIzWnBaR1ZrSUQwZ0tGeHVJQ0FnSUNBZ1pTNWhZMk5sYkdWeVlYUnBiMjVKYm1Oc2RXUnBibWRIY21GMmFYUjVJQ1ltWEc0Z0lDQWdJQ0FvZEhsd1pXOW1JR1V1WVdOalpXeGxjbUYwYVc5dVNXNWpiSFZrYVc1blIzSmhkbWwwZVM1NElEMDlQU0FuYm5WdFltVnlKeWtnSmlaY2JpQWdJQ0FnSUNoMGVYQmxiMllnWlM1aFkyTmxiR1Z5WVhScGIyNUpibU5zZFdScGJtZEhjbUYyYVhSNUxua2dQVDA5SUNkdWRXMWlaWEluS1NBbUpseHVJQ0FnSUNBZ0tIUjVjR1Z2WmlCbExtRmpZMlZzWlhKaGRHbHZia2x1WTJ4MVpHbHVaMGR5WVhacGRIa3VlaUE5UFQwZ0oyNTFiV0psY2ljcFhHNGdJQ0FnS1R0Y2JpQWdJQ0IwYUdsekxtRmpZMlZzWlhKaGRHbHZia2x1WTJ4MVpHbHVaMGR5WVhacGRIa3VjR1Z5YVc5a0lEMGdaUzVwYm5SbGNuWmhiQ0FxSUhSb2FYTXVYM1Z1YVdaNVVHVnlhVzlrTzF4dVhHNGdJQ0FnTHk4Z1UyVnVjMjl5SUdGMllXbHNZV0pwYkdsMGVTQm1iM0lnZEdobElHRmpZMlZzWlhKaGRHbHZibHh1SUNBZ0lIUm9hWE11WVdOalpXeGxjbUYwYVc5dUxtbHpVSEp2ZG1sa1pXUWdQU0FvWEc0Z0lDQWdJQ0JsTG1GalkyVnNaWEpoZEdsdmJpQW1KbHh1SUNBZ0lDQWdLSFI1Y0dWdlppQmxMbUZqWTJWc1pYSmhkR2x2Ymk1NElEMDlQU0FuYm5WdFltVnlKeWtnSmlaY2JpQWdJQ0FnSUNoMGVYQmxiMllnWlM1aFkyTmxiR1Z5WVhScGIyNHVlU0E5UFQwZ0oyNTFiV0psY2ljcElDWW1YRzRnSUNBZ0lDQW9kSGx3Wlc5bUlHVXVZV05qWld4bGNtRjBhVzl1TG5vZ1BUMDlJQ2R1ZFcxaVpYSW5LVnh1SUNBZ0lDazdYRzRnSUNBZ2RHaHBjeTVoWTJObGJHVnlZWFJwYjI0dWNHVnlhVzlrSUQwZ1pTNXBiblJsY25aaGJDQXFJSFJvYVhNdVgzVnVhV1o1VUdWeWFXOWtPMXh1WEc0Z0lDQWdMeThnVTJWdWMyOXlJR0YyWVdsc1lXSnBiR2wwZVNCbWIzSWdkR2hsSUhKdmRHRjBhVzl1SUhKaGRHVmNiaUFnSUNCMGFHbHpMbkp2ZEdGMGFXOXVVbUYwWlM1cGMxQnliM1pwWkdWa0lEMGdLRnh1SUNBZ0lDQWdaUzV5YjNSaGRHbHZibEpoZEdVZ0ppWmNiaUFnSUNBZ0lDaDBlWEJsYjJZZ1pTNXliM1JoZEdsdmJsSmhkR1V1WVd4d2FHRWdQVDA5SUNkdWRXMWlaWEluS1NBbUpseHVJQ0FnSUNBZ0tIUjVjR1Z2WmlCbExuSnZkR0YwYVc5dVVtRjBaUzVpWlhSaElDQTlQVDBnSjI1MWJXSmxjaWNwSUNZbVhHNGdJQ0FnSUNBb2RIbHdaVzltSUdVdWNtOTBZWFJwYjI1U1lYUmxMbWRoYlcxaElEMDlQU0FuYm5WdFltVnlKeWxjYmlBZ0lDQXBPMXh1SUNBZ0lIUm9hWE11Y205MFlYUnBiMjVTWVhSbExuQmxjbWx2WkNBOUlHVXVhVzUwWlhKMllXd2dLaUIwYUdsekxsOTFibWxtZVZCbGNtbHZaRHRjYmx4dUlDQWdJQzh2SUdsdUlHWnBjbVZtYjNnZ1lXNWtjbTlwWkN3Z1lXTmpaV3hsY21GMGFXOXVTVzVqYkhWa2FXNW5SM0poZG1sMGVTQnlaWFJ5YVdWMlpTQnVkV3hzSUhaaGJIVmxjMXh1SUNBZ0lDOHZJRzl1SUhSb1pTQm1hWEp6ZENCallXeHNZbUZqYXk0Z2MyOGdkMkZwZENCaElITmxZMjl1WkNCallXeHNJSFJ2SUdKbElITjFjbVV1WEc0Z0lDQWdhV1lnS0Z4dUlDQWdJQ0FnY0d4aGRHWnZjbTB1YjNNdVptRnRhV3g1SUQwOVBTQW5RVzVrY205cFpDY2dKaVpjYmlBZ0lDQWdJQzlHYVhKbFptOTRMeTUwWlhOMEtIQnNZWFJtYjNKdExtNWhiV1VwSUNZbVhHNGdJQ0FnSUNCMGFHbHpMbDlqYUdWamEwTnZkVzUwWlhJZ1BDQXhYRzRnSUNBZ0tTQjdYRzRnSUNBZ0lDQjBhR2x6TGw5amFHVmphME52ZFc1MFpYSXJLenRjYmlBZ0lDQjlJR1ZzYzJVZ2UxeHVJQ0FnSUNBZ0x5OGdibTkzSUhSb1lYUWdkR2hsSUhObGJuTnZjbk1nWVhKbElHTm9aV05yWldRc0lISmxjR3hoWTJVZ2RHaGxJSEJ5YjJObGMzTWdablZ1WTNScGIyNGdkMmwwYUZ4dUlDQWdJQ0FnTHk4Z2RHaGxJR1pwYm1Gc0lHeHBjM1JsYm1WeVhHNGdJQ0FnSUNCMGFHbHpMbDl3Y205alpYTnpSblZ1WTNScGIyNGdQU0IwYUdsekxsOWtaWFpwWTJWdGIzUnBiMjVNYVhOMFpXNWxjanRjYmx4dUlDQWdJQ0FnTHk4Z2FXWWdZV05qWld4bGNtRjBhVzl1SUdseklHNXZkQ0J3Y205MmFXUmxaQ0JpZVNCeVlYY2djMlZ1YzI5eWN5d2dhVzVrYVdOaGRHVWdkMmhsZEdobGNpQnBkRnh1SUNBZ0lDQWdMeThnWTJGdUlHSmxJR05oYkdOMWJHRjBaV1FnZDJsMGFDQmdZV05qWld4bGNtRjBhVzl1YVc1amJIVmthVzVuWjNKaGRtbDBlV0FnYjNJZ2JtOTBYRzRnSUNBZ0lDQnBaaUFvSVhSb2FYTXVZV05qWld4bGNtRjBhVzl1TG1selVISnZkbWxrWldRcFhHNGdJQ0FnSUNBZ0lIUm9hWE11WVdOalpXeGxjbUYwYVc5dUxtbHpRMkZzWTNWc1lYUmxaQ0E5SUhSb2FYTXVZV05qWld4bGNtRjBhVzl1U1c1amJIVmthVzVuUjNKaGRtbDBlUzVwYzFCeWIzWnBaR1ZrTzF4dVhHNGdJQ0FnSUNBdkx5QlhRVkpPU1U1SFhHNGdJQ0FnSUNBdkx5QlVhR1VnYkdsdVpYTWdiMllnWTI5a1pTQmlaV3h2ZHlCaGNtVWdZMjl0YldWdWRHVmtJR0psWTJGMWMyVWdiMllnWVNCaWRXY2diMllnUTJoeWIyMWxYRzRnSUNBZ0lDQXZMeUJ2YmlCemIyMWxJRUZ1WkhKdmFXUWdaR1YyYVdObGN5d2dkMmhsY21VZ0oyUmxkbWxqWlcxdmRHbHZiaWNnWlhabGJuUnpJR0Z5WlNCdWIzUWdjMlZ1ZEZ4dUlDQWdJQ0FnTHk4Z2IzSWdZMkYxWjJoMElHbG1JSFJvWlNCc2FYTjBaVzVsY2lCcGN5QnpaWFFnZFhBZ1lXWjBaWElnWVNBblpHVjJhV05sYjNKcFpXNTBZWFJwYjI0blhHNGdJQ0FnSUNBdkx5QnNhWE4wWlc1bGNpNGdTR1Z5WlN3Z2RHaGxJRjkwY25sUGNtbGxiblJoZEdsdmJrWmhiR3hpWVdOcklHMWxkR2h2WkNCM2IzVnNaQ0JoWkdRZ1lWeHVJQ0FnSUNBZ0x5OGdKMlJsZG1salpXOXlhV1Z1ZEdGMGFXOXVKeUJzYVhOMFpXNWxjaUJoYm1RZ1lteHZZMnNnWVd4c0lITjFZbk5sY1hWbGJuUWdKMlJsZG1salpXMXZkR2x2YmlkY2JpQWdJQ0FnSUM4dklHVjJaVzUwY3lCdmJpQjBhR1Z6WlNCa1pYWnBZMlZ6TGlCRGIyMXRaVzUwY3lCM2FXeHNJR0psSUhKbGJXOTJaV1FnYjI1alpTQjBhR1VnWW5WbklHOW1YRzRnSUNBZ0lDQXZMeUJEYUhKdmJXVWdhWE1nWTI5eWNtVmpkR1ZrTGx4dVhHNGdJQ0FnSUNBdkx5QnBaaUFvZEdocGN5NXlaWEYxYVhKbFpDNXliM1JoZEdsdmJsSmhkR1VnSmlZZ0lYUm9hWE11Y205MFlYUnBiMjVTWVhSbExtbHpVSEp2ZG1sa1pXUXBYRzRnSUNBZ0lDQXZMeUFnSUhSb2FYTXVYM1J5ZVU5eWFXVnVkR0YwYVc5dVJtRnNiR0poWTJzb0tUdGNiaUFnSUNBZ0lDOHZJR1ZzYzJWY2JpQWdJQ0FnSUhSb2FYTXVYM0J5YjIxcGMyVlNaWE52YkhabEtIUm9hWE1wTzF4dUlDQWdJSDFjYmlBZ2ZWeHVYRzRnSUM4cUtseHVJQ0FnS2lCZ0oyUmxkbWxqWlcxdmRHbHZiaWRnSUdWMlpXNTBJR05oYkd4aVlXTnJMbHh1SUNBZ0tpQlVhR2x6SUcxbGRHaHZaQ0JsYldsMGN5QmhiaUJsZG1WdWRDQjNhWFJvSUhSb1pTQnlZWGNnWUNka1pYWnBZMlZ0YjNScGIyNG5ZQ0IyWVd4MVpYTXNJR0Z1WkNCbGJXbDBjMXh1SUNBZ0tpQmxkbVZ1ZEhNZ2QybDBhQ0IwYUdVZ2RXNXBabWxsWkNCZ1lXTmpaV3hsY21GMGFXOXVTVzVqYkhWa2FXNW5SM0poZG1sMGVXQXNJR0JoWTJObGJHVnlZWFJwYjI1Z0xGeHVJQ0FnS2lCaGJtUWdMeUJ2Y2lCZ2NtOTBZWFJwYjI1U1lYUmxZQ0IyWVd4MVpYTWdhV1lnZEdobGVTQmhjbVVnY21WeGRXbHlaV1F1WEc0Z0lDQXFYRzRnSUNBcUlFQndZWEpoYlNCN1JHVjJhV05sVFc5MGFXOXVSWFpsYm5SOUlHVWdMU0JnSjJSbGRtbGpaVzF2ZEdsdmJpZGdJR1YyWlc1MElIUm9aU0IyWVd4MVpYTWdZWEpsSUdOaGJHTjFiR0YwWldRZ1puSnZiUzVjYmlBZ0lDb3ZYRzRnSUY5a1pYWnBZMlZ0YjNScGIyNU1hWE4wWlc1bGNpaGxLU0I3WEc0Z0lDQWdMeThnSjJSbGRtbGpaVzF2ZEdsdmJpY2daWFpsYm5RZ0tISmhkeUIyWVd4MVpYTXBYRzRnSUNBZ2FXWWdLSFJvYVhNdWJHbHpkR1Z1WlhKekxuTnBlbVVnUGlBd0tWeHVJQ0FnSUNBZ2RHaHBjeTVmWlcxcGRFUmxkbWxqWlUxdmRHbHZia1YyWlc1MEtHVXBPMXh1WEc0Z0lDQWdMeThnWVd4bGNuUW9ZQ1I3ZEdocGN5NWhZMk5sYkdWeVlYUnBiMjVKYm1Oc2RXUnBibWRIY21GMmFYUjVMbXhwYzNSbGJtVnljeTV6YVhwbGZTQXRYRzRnSUNBZ0x5OGdJQ0FnSUNSN2RHaHBjeTV5WlhGMWFYSmxaQzVoWTJObGJHVnlZWFJwYjI1SmJtTnNkV1JwYm1kSGNtRjJhWFI1ZlNBdFhHNGdJQ0FnTHk4Z0lDQWdJQ1I3ZEdocGN5NWhZMk5sYkdWeVlYUnBiMjVKYm1Oc2RXUnBibWRIY21GMmFYUjVMbWx6Vm1Gc2FXUjlYRzRnSUNBZ0x5OGdZQ2s3WEc1Y2JpQWdJQ0F2THlBbllXTmpaV3hsY21GMGFXOXVKeUJsZG1WdWRDQW9kVzVwWm1sbFpDQjJZV3gxWlhNcFhHNGdJQ0FnYVdZZ0tIUm9hWE11WVdOalpXeGxjbUYwYVc5dVNXNWpiSFZrYVc1blIzSmhkbWwwZVM1c2FYTjBaVzVsY25NdWMybDZaU0ErSURBZ0ppWmNiaUFnSUNBZ0lDQWdkR2hwY3k1eVpYRjFhWEpsWkM1aFkyTmxiR1Z5WVhScGIyNUpibU5zZFdScGJtZEhjbUYyYVhSNUlDWW1YRzRnSUNBZ0lDQWdJSFJvYVhNdVlXTmpaV3hsY21GMGFXOXVTVzVqYkhWa2FXNW5SM0poZG1sMGVTNXBjMVpoYkdsa1hHNGdJQ0FnS1NCN1hHNGdJQ0FnSUNCMGFHbHpMbDlsYldsMFFXTmpaV3hsY21GMGFXOXVTVzVqYkhWa2FXNW5SM0poZG1sMGVVVjJaVzUwS0dVcE8xeHVJQ0FnSUgxY2JseHVJQ0FnSUM4dklDZGhZMk5sYkdWeVlYUnBiMjVKYm1Oc2RXUnBibWRIY21GMmFYUjVKeUJsZG1WdWRDQW9kVzVwWm1sbFpDQjJZV3gxWlhNcFhHNGdJQ0FnTHk4Z2RHaGxJR1poYkd4aVlXTnJJR05oYkdOMWJHRjBhVzl1SUc5bUlIUm9aU0JoWTJObGJHVnlZWFJwYjI0Z2FHRndjR1Z1Y3lCcGJpQjBhR1ZjYmlBZ0lDQXZMeUFnWUY5bGJXbDBRV05qWld4bGNtRjBhVzl1WUNCdFpYUm9iMlFzSUhOdklIZGxJR05vWldOcklHbG1JSFJvYVhNdVlXTmpaV3hsY21GMGFXOXVMbWx6Vm1Gc2FXUmNiaUFnSUNCcFppQW9kR2hwY3k1aFkyTmxiR1Z5WVhScGIyNHViR2x6ZEdWdVpYSnpMbk5wZW1VZ1BpQXdJQ1ltWEc0Z0lDQWdJQ0FnSUhSb2FYTXVjbVZ4ZFdseVpXUXVZV05qWld4bGNtRjBhVzl1SUNZbVhHNGdJQ0FnSUNBZ0lIUm9hWE11WVdOalpXeGxjbUYwYVc5dUxtbHpWbUZzYVdSY2JpQWdJQ0FwSUh0Y2JpQWdJQ0FnSUhSb2FYTXVYMlZ0YVhSQlkyTmxiR1Z5WVhScGIyNUZkbVZ1ZENobEtUdGNiaUFnSUNCOVhHNWNiaUFnSUNBdkx5QW5jbTkwWVhScGIyNVNZWFJsSnlCbGRtVnVkQ0FvZFc1cFptbGxaQ0IyWVd4MVpYTXBYRzRnSUNBZ0x5OGdkR2hsSUdaaGJHeGlZV05ySUdOaGJHTjFiR0YwYVc5dUlHOW1JSFJvWlNCeWIzUmhkR2x2YmlCeVlYUmxJR1J2WlhNZ1RrOVVJR2hoY0hCbGJpQnBiaUIwYUdWY2JpQWdJQ0F2THlCZ1gyVnRhWFJTYjNSaGRHbHZibEpoZEdWZ0lHMWxkR2h2WkN3Z2MyOGdkMlVnYjI1c2VTQmphR1ZqYXlCcFppQjBhR2x6TG5KdmRHRjBhVzl1VW1GMFpTNXBjMUJ5YjNacFpHVmtYRzRnSUNBZ2FXWWdLSFJvYVhNdWNtOTBZWFJwYjI1U1lYUmxMbXhwYzNSbGJtVnljeTV6YVhwbElENGdNQ0FtSmx4dUlDQWdJQ0FnSUNCMGFHbHpMbkpsY1hWcGNtVmtMbkp2ZEdGMGFXOXVVbUYwWlNBbUpseHVJQ0FnSUNBZ0lDQjBhR2x6TG5KdmRHRjBhVzl1VW1GMFpTNXBjMUJ5YjNacFpHVmtYRzRnSUNBZ0tTQjdYRzRnSUNBZ0lDQjBhR2x6TGw5bGJXbDBVbTkwWVhScGIyNVNZWFJsUlhabGJuUW9aU2s3WEc0Z0lDQWdmVnh1SUNCOVhHNWNiaUFnTHlvcVhHNGdJQ0FxSUVWdGFYUnpJSFJvWlNCZ0oyUmxkbWxqWlcxdmRHbHZiaWRnSUhKaGR5QjJZV3gxWlhNdVhHNGdJQ0FxWEc0Z0lDQXFJRUJ3WVhKaGJTQjdSR1YyYVdObFRXOTBhVzl1UlhabGJuUjlJR1VnTFNCZ0oyUmxkbWxqWlcxdmRHbHZiaWRnSUdWMlpXNTBJSFJvWlNCMllXeDFaWE1nWVhKbElHTmhiR04xYkdGMFpXUWdabkp2YlM1Y2JpQWdJQ292WEc0Z0lGOWxiV2wwUkdWMmFXTmxUVzkwYVc5dVJYWmxiblFvWlNrZ2UxeHVJQ0FnSUd4bGRDQnZkWFJGZG1WdWRDQTlJSFJvYVhNdVpYWmxiblE3WEc1Y2JpQWdJQ0JwWmlBb1pTNWhZMk5sYkdWeVlYUnBiMjVKYm1Oc2RXUnBibWRIY21GMmFYUjVLU0I3WEc0Z0lDQWdJQ0J2ZFhSRmRtVnVkRnN3WFNBOUlHVXVZV05qWld4bGNtRjBhVzl1U1c1amJIVmthVzVuUjNKaGRtbDBlUzU0TzF4dUlDQWdJQ0FnYjNWMFJYWmxiblJiTVYwZ1BTQmxMbUZqWTJWc1pYSmhkR2x2YmtsdVkyeDFaR2x1WjBkeVlYWnBkSGt1ZVR0Y2JpQWdJQ0FnSUc5MWRFVjJaVzUwV3pKZElEMGdaUzVoWTJObGJHVnlZWFJwYjI1SmJtTnNkV1JwYm1kSGNtRjJhWFI1TG5vN1hHNGdJQ0FnZlZ4dVhHNGdJQ0FnYVdZZ0tHVXVZV05qWld4bGNtRjBhVzl1S1NCN1hHNGdJQ0FnSUNCdmRYUkZkbVZ1ZEZzelhTQTlJR1V1WVdOalpXeGxjbUYwYVc5dUxuZzdYRzRnSUNBZ0lDQnZkWFJGZG1WdWRGczBYU0E5SUdVdVlXTmpaV3hsY21GMGFXOXVMbms3WEc0Z0lDQWdJQ0J2ZFhSRmRtVnVkRnMxWFNBOUlHVXVZV05qWld4bGNtRjBhVzl1TG5vN1hHNGdJQ0FnZlZ4dVhHNGdJQ0FnYVdZZ0tHVXVjbTkwWVhScGIyNVNZWFJsS1NCN1hHNGdJQ0FnSUNCdmRYUkZkbVZ1ZEZzMlhTQTlJR1V1Y205MFlYUnBiMjVTWVhSbExtRnNjR2hoTzF4dUlDQWdJQ0FnYjNWMFJYWmxiblJiTjEwZ1BTQmxMbkp2ZEdGMGFXOXVVbUYwWlM1aVpYUmhPMXh1SUNBZ0lDQWdiM1YwUlhabGJuUmJPRjBnUFNCbExuSnZkR0YwYVc5dVVtRjBaUzVuWVcxdFlUdGNiaUFnSUNCOVhHNWNiaUFnSUNCMGFHbHpMbVZ0YVhRb2IzVjBSWFpsYm5RcE8xeHVJQ0I5WEc1Y2JpQWdMeW9xWEc0Z0lDQXFJRVZ0YVhSeklIUm9aU0JnWVdOalpXeGxjbUYwYVc5dVNXNWpiSFZrYVc1blIzSmhkbWwwZVdBZ2RXNXBabWxsWkNCMllXeDFaWE11WEc0Z0lDQXFYRzRnSUNBcUlFQndZWEpoYlNCN1JHVjJhV05sVFc5MGFXOXVSWFpsYm5SOUlHVWdMU0JnSjJSbGRtbGpaVzF2ZEdsdmJpZGdJR1YyWlc1MElIUm9aU0IyWVd4MVpYTWdZWEpsSUdOaGJHTjFiR0YwWldRZ1puSnZiUzVjYmlBZ0lDb3ZYRzRnSUY5bGJXbDBRV05qWld4bGNtRjBhVzl1U1c1amJIVmthVzVuUjNKaGRtbDBlVVYyWlc1MEtHVXBJSHRjYmlBZ0lDQnNaWFFnYjNWMFJYWmxiblFnUFNCMGFHbHpMbUZqWTJWc1pYSmhkR2x2YmtsdVkyeDFaR2x1WjBkeVlYWnBkSGt1WlhabGJuUTdYRzVjYmlBZ0lDQnZkWFJGZG1WdWRGc3dYU0E5SUdVdVlXTmpaV3hsY21GMGFXOXVTVzVqYkhWa2FXNW5SM0poZG1sMGVTNTRJQ29nZEdocGN5NWZkVzVwWm5sTmIzUnBiMjVFWVhSaE8xeHVJQ0FnSUc5MWRFVjJaVzUwV3pGZElEMGdaUzVoWTJObGJHVnlZWFJwYjI1SmJtTnNkV1JwYm1kSGNtRjJhWFI1TG5rZ0tpQjBhR2x6TGw5MWJtbG1lVTF2ZEdsdmJrUmhkR0U3WEc0Z0lDQWdiM1YwUlhabGJuUmJNbDBnUFNCbExtRmpZMlZzWlhKaGRHbHZia2x1WTJ4MVpHbHVaMGR5WVhacGRIa3VlaUFxSUhSb2FYTXVYM1Z1YVdaNVRXOTBhVzl1UkdGMFlUdGNibHh1SUNBZ0lIUm9hWE11WVdOalpXeGxjbUYwYVc5dVNXNWpiSFZrYVc1blIzSmhkbWwwZVM1bGJXbDBLRzkxZEVWMlpXNTBLVHRjYmlBZ2ZWeHVYRzRnSUM4cUtseHVJQ0FnS2lCRmJXbDBjeUIwYUdVZ1lHRmpZMlZzWlhKaGRHbHZibUFnZFc1cFptbGxaQ0IyWVd4MVpYTXVYRzRnSUNBcUlGZG9aVzRnZEdobElHQmhZMk5sYkdWeVlYUnBiMjVnSUhKaGR5QjJZV3gxWlhNZ1lYSmxJRzV2ZENCaGRtRnBiR0ZpYkdVc0lIUm9aU0J0WlhSb2IyUmNiaUFnSUNvZ1lXeHpieUJqWVd4amRXeGhkR1Z6SUhSb1pTQmhZMk5sYkdWeVlYUnBiMjRnWm5KdmJTQjBhR1ZjYmlBZ0lDb2dZR0ZqWTJWc1pYSmhkR2x2YmtsdVkyeDFaR2x1WjBkeVlYWnBkSGxnSUhKaGR5QjJZV3gxWlhNdVhHNGdJQ0FxWEc0Z0lDQXFJRUJ3WVhKaGJTQjdSR1YyYVdObFRXOTBhVzl1UlhabGJuUjlJR1VnTFNCVWFHVWdZQ2RrWlhacFkyVnRiM1JwYjI0bllDQmxkbVZ1ZEM1Y2JpQWdJQ292WEc0Z0lGOWxiV2wwUVdOalpXeGxjbUYwYVc5dVJYWmxiblFvWlNrZ2UxeHVJQ0FnSUd4bGRDQnZkWFJGZG1WdWRDQTlJSFJvYVhNdVlXTmpaV3hsY21GMGFXOXVMbVYyWlc1ME8xeHVYRzRnSUNBZ2FXWWdLSFJvYVhNdVlXTmpaV3hsY21GMGFXOXVMbWx6VUhKdmRtbGtaV1FwSUh0Y2JpQWdJQ0FnSUM4dklFbG1JSEpoZHlCaFkyTmxiR1Z5WVhScGIyNGdkbUZzZFdWeklHRnlaU0J3Y205MmFXUmxaRnh1SUNBZ0lDQWdiM1YwUlhabGJuUmJNRjBnUFNCbExtRmpZMlZzWlhKaGRHbHZiaTU0SUNvZ2RHaHBjeTVmZFc1cFpubE5iM1JwYjI1RVlYUmhPMXh1SUNBZ0lDQWdiM1YwUlhabGJuUmJNVjBnUFNCbExtRmpZMlZzWlhKaGRHbHZiaTU1SUNvZ2RHaHBjeTVmZFc1cFpubE5iM1JwYjI1RVlYUmhPMXh1SUNBZ0lDQWdiM1YwUlhabGJuUmJNbDBnUFNCbExtRmpZMlZzWlhKaGRHbHZiaTU2SUNvZ2RHaHBjeTVmZFc1cFpubE5iM1JwYjI1RVlYUmhPMXh1SUNBZ0lIMGdaV3h6WlNCcFppQW9kR2hwY3k1aFkyTmxiR1Z5WVhScGIyNUpibU5zZFdScGJtZEhjbUYyYVhSNUxtbHpWbUZzYVdRcElIdGNiaUFnSUNBZ0lDOHZJRTkwYUdWeWQybHpaU3dnYVdZZ1lXTmpaV3hsY21GMGFXOXVTVzVqYkhWa2FXNW5SM0poZG1sMGVTQjJZV3gxWlhNZ1lYSmxJSEJ5YjNacFpHVmtMRnh1SUNBZ0lDQWdMeThnWlhOMGFXMWhkR1VnZEdobElHRmpZMlZzWlhKaGRHbHZiaUIzYVhSb0lHRWdhR2xuYUMxd1lYTnpJR1pwYkhSbGNseHVJQ0FnSUNBZ1kyOXVjM1FnWVdOalpXeGxjbUYwYVc5dVNXNWpiSFZrYVc1blIzSmhkbWwwZVNBOUlGdGNiaUFnSUNBZ0lDQWdaUzVoWTJObGJHVnlZWFJwYjI1SmJtTnNkV1JwYm1kSGNtRjJhWFI1TG5nZ0tpQjBhR2x6TGw5MWJtbG1lVTF2ZEdsdmJrUmhkR0VzWEc0Z0lDQWdJQ0FnSUdVdVlXTmpaV3hsY21GMGFXOXVTVzVqYkhWa2FXNW5SM0poZG1sMGVTNTVJQ29nZEdocGN5NWZkVzVwWm5sTmIzUnBiMjVFWVhSaExGeHVJQ0FnSUNBZ0lDQmxMbUZqWTJWc1pYSmhkR2x2YmtsdVkyeDFaR2x1WjBkeVlYWnBkSGt1ZWlBcUlIUm9hWE11WDNWdWFXWjVUVzkwYVc5dVJHRjBZVnh1SUNBZ0lDQWdYVHRjYmlBZ0lDQWdJR052Ym5OMElHc2dQU0IwYUdsekxsOWpZV3hqZFd4aGRHVmtRV05qWld4bGNtRjBhVzl1UkdWallYazdYRzVjYmlBZ0lDQWdJQzh2SUVocFoyZ3RjR0Z6Y3lCbWFXeDBaWElnZEc4Z1pYTjBhVzFoZEdVZ2RHaGxJR0ZqWTJWc1pYSmhkR2x2YmlBb2QybDBhRzkxZENCMGFHVWdaM0poZG1sMGVTbGNiaUFnSUNBZ0lIUm9hWE11WDJOaGJHTjFiR0YwWldSQlkyTmxiR1Z5WVhScGIyNWJNRjBnUFNBb01TQXJJR3NwSUNvZ01DNDFJQ29nS0dGalkyVnNaWEpoZEdsdmJrbHVZMngxWkdsdVowZHlZWFpwZEhsYk1GMGdMU0IwYUdsekxsOXNZWE4wUVdOalpXeGxjbUYwYVc5dVNXNWpiSFZrYVc1blIzSmhkbWwwZVZzd1hTa2dLeUJySUNvZ2RHaHBjeTVmWTJGc1kzVnNZWFJsWkVGalkyVnNaWEpoZEdsdmJsc3dYVHRjYmlBZ0lDQWdJSFJvYVhNdVgyTmhiR04xYkdGMFpXUkJZMk5sYkdWeVlYUnBiMjViTVYwZ1BTQW9NU0FySUdzcElDb2dNQzQxSUNvZ0tHRmpZMlZzWlhKaGRHbHZia2x1WTJ4MVpHbHVaMGR5WVhacGRIbGJNVjBnTFNCMGFHbHpMbDlzWVhOMFFXTmpaV3hsY21GMGFXOXVTVzVqYkhWa2FXNW5SM0poZG1sMGVWc3hYU2tnS3lCcklDb2dkR2hwY3k1ZlkyRnNZM1ZzWVhSbFpFRmpZMlZzWlhKaGRHbHZibHN4WFR0Y2JpQWdJQ0FnSUhSb2FYTXVYMk5oYkdOMWJHRjBaV1JCWTJObGJHVnlZWFJwYjI1Yk1sMGdQU0FvTVNBcklHc3BJQ29nTUM0MUlDb2dLR0ZqWTJWc1pYSmhkR2x2YmtsdVkyeDFaR2x1WjBkeVlYWnBkSGxiTWwwZ0xTQjBhR2x6TGw5c1lYTjBRV05qWld4bGNtRjBhVzl1U1c1amJIVmthVzVuUjNKaGRtbDBlVnN5WFNrZ0t5QnJJQ29nZEdocGN5NWZZMkZzWTNWc1lYUmxaRUZqWTJWc1pYSmhkR2x2YmxzeVhUdGNibHh1SUNBZ0lDQWdkR2hwY3k1ZmJHRnpkRUZqWTJWc1pYSmhkR2x2YmtsdVkyeDFaR2x1WjBkeVlYWnBkSGxiTUYwZ1BTQmhZMk5sYkdWeVlYUnBiMjVKYm1Oc2RXUnBibWRIY21GMmFYUjVXekJkTzF4dUlDQWdJQ0FnZEdocGN5NWZiR0Z6ZEVGalkyVnNaWEpoZEdsdmJrbHVZMngxWkdsdVowZHlZWFpwZEhsYk1WMGdQU0JoWTJObGJHVnlZWFJwYjI1SmJtTnNkV1JwYm1kSGNtRjJhWFI1V3pGZE8xeHVJQ0FnSUNBZ2RHaHBjeTVmYkdGemRFRmpZMlZzWlhKaGRHbHZia2x1WTJ4MVpHbHVaMGR5WVhacGRIbGJNbDBnUFNCaFkyTmxiR1Z5WVhScGIyNUpibU5zZFdScGJtZEhjbUYyYVhSNVd6SmRPMXh1WEc0Z0lDQWdJQ0J2ZFhSRmRtVnVkRnN3WFNBOUlIUm9hWE11WDJOaGJHTjFiR0YwWldSQlkyTmxiR1Z5WVhScGIyNWJNRjA3WEc0Z0lDQWdJQ0J2ZFhSRmRtVnVkRnN4WFNBOUlIUm9hWE11WDJOaGJHTjFiR0YwWldSQlkyTmxiR1Z5WVhScGIyNWJNVjA3WEc0Z0lDQWdJQ0J2ZFhSRmRtVnVkRnN5WFNBOUlIUm9hWE11WDJOaGJHTjFiR0YwWldSQlkyTmxiR1Z5WVhScGIyNWJNbDA3WEc0Z0lDQWdmVnh1WEc0Z0lDQWdkR2hwY3k1aFkyTmxiR1Z5WVhScGIyNHVaVzFwZENodmRYUkZkbVZ1ZENrN1hHNGdJSDFjYmx4dUlDQXZLaXBjYmlBZ0lDb2dSVzFwZEhNZ2RHaGxJR0J5YjNSaGRHbHZibEpoZEdWZ0lIVnVhV1pwWldRZ2RtRnNkV1Z6TGx4dUlDQWdLbHh1SUNBZ0tpQkFjR0Z5WVcwZ2UwUmxkbWxqWlUxdmRHbHZia1YyWlc1MGZTQmxJQzBnWUNka1pYWnBZMlZ0YjNScGIyNG5ZQ0JsZG1WdWRDQjBhR1VnZG1Gc2RXVnpJR0Z5WlNCallXeGpkV3hoZEdWa0lHWnliMjB1WEc0Z0lDQXFMMXh1SUNCZlpXMXBkRkp2ZEdGMGFXOXVVbUYwWlVWMlpXNTBLR1VwSUh0Y2JpQWdJQ0JzWlhRZ2IzVjBSWFpsYm5RZ1BTQjBhR2x6TG5KdmRHRjBhVzl1VW1GMFpTNWxkbVZ1ZER0Y2JseHVJQ0FnSUM4dklFbHVJR0ZzYkNCd2JHRjBabTl5YlhNc0lISnZkR0YwYVc5dUlHRjRaWE1nWVhKbElHMWxjM05sWkNCMWNDQmhZMk52Y21ScGJtY2dkRzhnZEdobElITndaV05jYmlBZ0lDQXZMeUJvZEhSd2N6b3ZMM2N6WXk1bmFYUm9kV0l1YVc4dlpHVjJhV05sYjNKcFpXNTBZWFJwYjI0dmMzQmxZeTF6YjNWeVkyVXRiM0pwWlc1MFlYUnBiMjR1YUhSdGJGeHVJQ0FnSUM4dlhHNGdJQ0FnTHk4Z1oyRnRiV0VnYzJodmRXeGtJR0psSUdGc2NHaGhYRzRnSUNBZ0x5OGdZV3h3YUdFZ2MyaHZkV3hrSUdKbElHSmxkR0ZjYmlBZ0lDQXZMeUJpWlhSaElITm9iM1ZzWkNCaVpTQm5ZVzF0WVZ4dVhHNGdJQ0FnYjNWMFJYWmxiblJiTUYwZ1BTQmxMbkp2ZEdGMGFXOXVVbUYwWlM1bllXMXRZVHRjYmlBZ0lDQnZkWFJGZG1WdWRGc3hYU0E5SUdVdWNtOTBZWFJwYjI1U1lYUmxMbUZzY0doaExGeHVJQ0FnSUc5MWRFVjJaVzUwV3pKZElEMGdaUzV5YjNSaGRHbHZibEpoZEdVdVltVjBZVHRjYmx4dUlDQWdJQzh2SUVOb2NtOXRaU0JCYm1SeWIybGtJSEpsZEhKcFpYWmxJSFpoYkhWbGN5QjBhR0YwSUdGeVpTQnBiaUJ5WVdRdmMxeHVJQ0FnSUM4dklHTm1MaUJvZEhSd2N6b3ZMMkoxWjNNdVkyaHliMjFwZFcwdWIzSm5MM0F2WTJoeWIyMXBkVzB2YVhOemRXVnpMMlJsZEdGcGJEOXBaRDAxTkRFMk1EZGNiaUFnSUNBdkwxeHVJQ0FnSUM4dklFWnliMjBnYzNCbFl6b2dYQ0pVYUdVZ2NtOTBZWFJwYjI1U1lYUmxJR0YwZEhKcFluVjBaU0J0ZFhOMElHSmxJR2x1YVhScFlXeHBlbVZrSUhkcGRHZ2dkR2hsSUhKaGRHVmNiaUFnSUNBdkx5QnZaaUJ5YjNSaGRHbHZiaUJ2WmlCMGFHVWdhRzl6ZEdsdVp5QmtaWFpwWTJVZ2FXNGdjM0JoWTJVdUlFbDBJRzExYzNRZ1ltVWdaWGh3Y21WemMyVmtJR0Z6SUhSb1pWeHVJQ0FnSUM4dklISmhkR1VnYjJZZ1kyaGhibWRsSUc5bUlIUm9aU0JoYm1kc1pYTWdaR1ZtYVc1bFpDQnBiaUJ6WldOMGFXOXVJRFF1TVNCaGJtUWdiWFZ6ZENCaVpTQmxlSEJ5WlhOelpXUmNiaUFnSUNBdkx5QnBiaUJrWldkeVpXVnpJSEJsY2lCelpXTnZibVFnS0dSbFp5OXpLUzVjSWx4dUlDQWdJQzh2WEc0Z0lDQWdMeThnWm1sNFpXUWdjMmx1WTJVZ1EyaHliMjFsSURZMVhHNGdJQ0FnTHk4Z1kyWXVJR2gwZEhCek9pOHZaMmwwYUhWaUxtTnZiUzlwYlcxbGNuTnBkbVV0ZDJWaUwzZGxZblp5TFhCdmJIbG1hV3hzTDJsemMzVmxjeTh6TURkY2JpQWdJQ0JwWmlBb1hHNGdJQ0FnSUNCd2JHRjBabTl5YlM1dmN5NW1ZVzFwYkhrZ1BUMDlJQ2RCYm1SeWIybGtKeUFtSmx4dUlDQWdJQ0FnWTJoeWIyMWxVbVZuUlhod0xuUmxjM1FvY0d4aGRHWnZjbTB1Ym1GdFpTa2dKaVpjYmlBZ0lDQWdJSEJoY25ObFNXNTBLSEJzWVhSbWIzSnRMblpsY25OcGIyNHVjM0JzYVhRb0p5NG5LVnN3WFNrZ1BDQTJOVnh1SUNBZ0lDa2dlMXh1SUNBZ0lDQWdiM1YwUlhabGJuUmJNRjBnS2owZ2RHOUVaV2M3WEc0Z0lDQWdJQ0J2ZFhSRmRtVnVkRnN4WFNBcVBTQjBiMFJsWnl4Y2JpQWdJQ0FnSUc5MWRFVjJaVzUwV3pKZElDbzlJSFJ2UkdWbk8xeHVJQ0FnSUgxY2JseHVJQ0FnSUhSb2FYTXVjbTkwWVhScGIyNVNZWFJsTG1WdGFYUW9iM1YwUlhabGJuUXBPMXh1SUNCOVhHNWNiaUFnTHlvcVhHNGdJQ0FxSUVOaGJHTjFiR0YwWlhNZ1lXNWtJR1Z0YVhSeklIUm9aU0JnY205MFlYUnBiMjVTWVhSbFlDQjFibWxtYVdWa0lIWmhiSFZsY3lCbWNtOXRJSFJvWlNCZ2IzSnBaVzUwWVhScGIyNWdJSFpoYkhWbGN5NWNiaUFnSUNwY2JpQWdJQ29nUUhCaGNtRnRJSHR1ZFcxaVpYSmJYWDBnYjNKcFpXNTBZWFJwYjI0Z0xTQk1ZWFJsYzNRZ1lHOXlhV1Z1ZEdGMGFXOXVZQ0J5WVhjZ2RtRnNkV1Z6TGx4dUlDQWdLaTljYmlBZ1gyTmhiR04xYkdGMFpWSnZkR0YwYVc5dVVtRjBaVVp5YjIxUGNtbGxiblJoZEdsdmJpaHZjbWxsYm5SaGRHbHZiaWtnZTF4dUlDQWdJR052Ym5OMElHNXZkeUE5SUdkbGRFeHZZMkZzVkdsdFpTZ3BPMXh1SUNBZ0lHTnZibk4wSUdzZ1BTQXdMamc3SUM4dklGUlBSRTg2SUdsdGNISnZkbVVnYkc5M0lIQmhjM01nWm1sc2RHVnlJQ2htY21GdFpYTWdZWEpsSUc1dmRDQnlaV2QxYkdGeUtWeHVJQ0FnSUdOdmJuTjBJR0ZzY0doaFNYTldZV3hwWkNBOUlDaDBlWEJsYjJZZ2IzSnBaVzUwWVhScGIyNWJNRjBnUFQwOUlDZHVkVzFpWlhJbktUdGNibHh1SUNBZ0lHbG1JQ2gwYUdsekxsOXNZWE4wVDNKcFpXNTBZWFJwYjI1VWFXMWxjM1JoYlhBcElIdGNiaUFnSUNBZ0lHeGxkQ0J5UVd4d2FHRWdQU0J1ZFd4c08xeHVJQ0FnSUNBZ2JHVjBJSEpDWlhSaE8xeHVJQ0FnSUNBZ2JHVjBJSEpIWVcxdFlUdGNibHh1SUNBZ0lDQWdiR1YwSUdGc2NHaGhSR2x6WTI5dWRHbHVkV2wwZVVaaFkzUnZjaUE5SURBN1hHNGdJQ0FnSUNCc1pYUWdZbVYwWVVScGMyTnZiblJwYm5WcGRIbEdZV04wYjNJZ1BTQXdPMXh1SUNBZ0lDQWdiR1YwSUdkaGJXMWhSR2x6WTI5dWRHbHVkV2wwZVVaaFkzUnZjaUE5SURBN1hHNWNiaUFnSUNBZ0lHTnZibk4wSUdSbGJIUmhWQ0E5SUc1dmR5QXRJSFJvYVhNdVgyeGhjM1JQY21sbGJuUmhkR2x2YmxScGJXVnpkR0Z0Y0R0Y2JseHVJQ0FnSUNBZ2FXWWdLR0ZzY0doaFNYTldZV3hwWkNrZ2UxeHVJQ0FnSUNBZ0lDQXZMeUJoYkhCb1lTQmthWE5qYjI1MGFXNTFhWFI1SUNnck16WXdJQzArSURBZ2IzSWdNQ0F0UGlBck16WXdLVnh1SUNBZ0lDQWdJQ0JwWmlBb2RHaHBjeTVmYkdGemRFOXlhV1Z1ZEdGMGFXOXVXekJkSUQ0Z016SXdJQ1ltSUc5eWFXVnVkR0YwYVc5dVd6QmRJRHdnTkRBcFhHNGdJQ0FnSUNBZ0lDQWdZV3h3YUdGRWFYTmpiMjUwYVc1MWFYUjVSbUZqZEc5eUlEMGdNell3TzF4dUlDQWdJQ0FnSUNCbGJITmxJR2xtSUNoMGFHbHpMbDlzWVhOMFQzSnBaVzUwWVhScGIyNWJNRjBnUENBME1DQW1KaUJ2Y21sbGJuUmhkR2x2Ymxzd1hTQStJRE15TUNsY2JpQWdJQ0FnSUNBZ0lDQmhiSEJvWVVScGMyTnZiblJwYm5WcGRIbEdZV04wYjNJZ1BTQXRNell3TzF4dUlDQWdJQ0FnZlZ4dVhHNGdJQ0FnSUNBdkx5QmlaWFJoSUdScGMyTnZiblJwYm5WcGRIa2dLQ3N4T0RBZ0xUNGdMVEU0TUNCdmNpQXRNVGd3SUMwK0lDc3hPREFwWEc0Z0lDQWdJQ0JwWmlBb2RHaHBjeTVmYkdGemRFOXlhV1Z1ZEdGMGFXOXVXekZkSUQ0Z01UUXdJQ1ltSUc5eWFXVnVkR0YwYVc5dVd6RmRJRHdnTFRFME1DbGNiaUFnSUNBZ0lDQWdZbVYwWVVScGMyTnZiblJwYm5WcGRIbEdZV04wYjNJZ1BTQXpOakE3WEc0Z0lDQWdJQ0JsYkhObElHbG1JQ2gwYUdsekxsOXNZWE4wVDNKcFpXNTBZWFJwYjI1Yk1WMGdQQ0F0TVRRd0lDWW1JRzl5YVdWdWRHRjBhVzl1V3pGZElENGdNVFF3S1Z4dUlDQWdJQ0FnSUNCaVpYUmhSR2x6WTI5dWRHbHVkV2wwZVVaaFkzUnZjaUE5SUMwek5qQTdYRzVjYmlBZ0lDQWdJQzh2SUdkaGJXMWhJR1JwYzJOdmJuUnBiblZwZEdsbGN5QW9LekU0TUNBdFBpQXRNVGd3SUc5eUlDMHhPREFnTFQ0Z0t6RTRNQ2xjYmlBZ0lDQWdJR2xtSUNoMGFHbHpMbDlzWVhOMFQzSnBaVzUwWVhScGIyNWJNbDBnUGlBMU1DQW1KaUJ2Y21sbGJuUmhkR2x2YmxzeVhTQThJQzAxTUNsY2JpQWdJQ0FnSUNBZ1oyRnRiV0ZFYVhOamIyNTBhVzUxYVhSNVJtRmpkRzl5SUQwZ01UZ3dPMXh1SUNBZ0lDQWdaV3h6WlNCcFppQW9kR2hwY3k1ZmJHRnpkRTl5YVdWdWRHRjBhVzl1V3pKZElEd2dMVFV3SUNZbUlHOXlhV1Z1ZEdGMGFXOXVXekpkSUQ0Z05UQXBYRzRnSUNBZ0lDQWdJR2RoYlcxaFJHbHpZMjl1ZEdsdWRXbDBlVVpoWTNSdmNpQTlJQzB4T0RBN1hHNWNiaUFnSUNBZ0lHbG1JQ2hrWld4MFlWUWdQaUF3S1NCN1hHNGdJQ0FnSUNBZ0lDOHZJRXh2ZHlCd1lYTnpJR1pwYkhSbGNpQjBieUJ6Ylc5dmRHZ2dkR2hsSUdSaGRHRmNiaUFnSUNBZ0lDQWdhV1lnS0dGc2NHaGhTWE5XWVd4cFpDbGNiaUFnSUNBZ0lDQWdJQ0J5UVd4d2FHRWdQU0JySUNvZ2RHaHBjeTVmWTJGc1kzVnNZWFJsWkZKdmRHRjBhVzl1VW1GMFpWc3dYU0FySUNneElDMGdheWtnS2lBb2IzSnBaVzUwWVhScGIyNWJNRjBnTFNCMGFHbHpMbDlzWVhOMFQzSnBaVzUwWVhScGIyNWJNRjBnS3lCaGJIQm9ZVVJwYzJOdmJuUnBiblZwZEhsR1lXTjBiM0lwSUM4Z1pHVnNkR0ZVTzF4dVhHNGdJQ0FnSUNBZ0lISkNaWFJoSUQwZ2F5QXFJSFJvYVhNdVgyTmhiR04xYkdGMFpXUlNiM1JoZEdsdmJsSmhkR1ZiTVYwZ0t5QW9NU0F0SUdzcElDb2dLRzl5YVdWdWRHRjBhVzl1V3pGZElDMGdkR2hwY3k1ZmJHRnpkRTl5YVdWdWRHRjBhVzl1V3pGZElDc2dZbVYwWVVScGMyTnZiblJwYm5WcGRIbEdZV04wYjNJcElDOGdaR1ZzZEdGVU8xeHVJQ0FnSUNBZ0lDQnlSMkZ0YldFZ1BTQnJJQ29nZEdocGN5NWZZMkZzWTNWc1lYUmxaRkp2ZEdGMGFXOXVVbUYwWlZzeVhTQXJJQ2d4SUMwZ2F5a2dLaUFvYjNKcFpXNTBZWFJwYjI1Yk1sMGdMU0IwYUdsekxsOXNZWE4wVDNKcFpXNTBZWFJwYjI1Yk1sMGdLeUJuWVcxdFlVUnBjMk52Ym5ScGJuVnBkSGxHWVdOMGIzSXBJQzhnWkdWc2RHRlVPMXh1WEc0Z0lDQWdJQ0FnSUhSb2FYTXVYMk5oYkdOMWJHRjBaV1JTYjNSaGRHbHZibEpoZEdWYk1GMGdQU0J5UVd4d2FHRTdYRzRnSUNBZ0lDQWdJSFJvYVhNdVgyTmhiR04xYkdGMFpXUlNiM1JoZEdsdmJsSmhkR1ZiTVYwZ1BTQnlRbVYwWVR0Y2JpQWdJQ0FnSUNBZ2RHaHBjeTVmWTJGc1kzVnNZWFJsWkZKdmRHRjBhVzl1VW1GMFpWc3lYU0E5SUhKSFlXMXRZVHRjYmlBZ0lDQWdJSDFjYmx4dUlDQWdJQ0FnTHk4Z1ZFOUVUem9nY21WellXMXdiR1VnZEdobElHVnRhWE56YVc5dUlISmhkR1VnZEc4Z2JXRjBZMmdnZEdobElHUmxkbWxqWlcxdmRHbHZiaUJ5WVhSbFhHNGdJQ0FnSUNCMGFHbHpMbkp2ZEdGMGFXOXVVbUYwWlM1bGJXbDBLSFJvYVhNdVgyTmhiR04xYkdGMFpXUlNiM1JoZEdsdmJsSmhkR1VwTzF4dUlDQWdJSDFjYmx4dUlDQWdJSFJvYVhNdVgyeGhjM1JQY21sbGJuUmhkR2x2YmxScGJXVnpkR0Z0Y0NBOUlHNXZkenRjYmlBZ0lDQjBhR2x6TGw5c1lYTjBUM0pwWlc1MFlYUnBiMjViTUYwZ1BTQnZjbWxsYm5SaGRHbHZibHN3WFR0Y2JpQWdJQ0IwYUdsekxsOXNZWE4wVDNKcFpXNTBZWFJwYjI1Yk1WMGdQU0J2Y21sbGJuUmhkR2x2YmxzeFhUdGNiaUFnSUNCMGFHbHpMbDlzWVhOMFQzSnBaVzUwWVhScGIyNWJNbDBnUFNCdmNtbGxiblJoZEdsdmJsc3lYVHRjYmlBZ2ZWeHVYRzRnSUM4cUtseHVJQ0FnS2lCRGFHVmphM01nZDJobGRHaGxjaUIwYUdVZ2NtOTBZWFJwYjI0Z2NtRjBaU0JqWVc0Z1ltVWdZMkZzWTNWc1lYUmxaQ0JtY205dElIUm9aU0JnYjNKcFpXNTBZWFJwYjI1Z0lIWmhiSFZsY3lCdmNpQnViM1F1WEc0Z0lDQXFYRzRnSUNBcUlFQjBiMlJ2SUMwZ2RHaHBjeUJ6YUc5MWJHUWdZbVVnY21WMmFXVjNaV1FnZEc4Z1kyOXRjR3g1SUhkcGRHZ2dkR2hsSUdGNGFYTWdiM0prWlhJZ1pHVm1hVzVsWkZ4dUlDQWdLaUFnYVc0Z2RHaGxJSE53WldOY2JpQWdJQ292WEc0Z0lDOHZJRmRCVWs1SlRrZGNiaUFnTHk4Z1ZHaGxJR3hwYm1WeklHOW1JR052WkdVZ1ltVnNiM2NnWVhKbElHTnZiVzFsYm5SbFpDQmlaV05oZFhObElHOW1JR0VnWW5WbklHOW1JRU5vY205dFpWeHVJQ0F2THlCdmJpQnpiMjFsSUVGdVpISnZhV1FnWkdWMmFXTmxjeXdnZDJobGNtVWdKMlJsZG1salpXMXZkR2x2YmljZ1pYWmxiblJ6SUdGeVpTQnViM1FnYzJWdWRGeHVJQ0F2THlCdmNpQmpZWFZuYUhRZ2FXWWdkR2hsSUd4cGMzUmxibVZ5SUdseklITmxkQ0IxY0NCaFpuUmxjaUJoSUNka1pYWnBZMlZ2Y21sbGJuUmhkR2x2YmlkY2JpQWdMeThnYkdsemRHVnVaWEl1SUVobGNtVXNJSFJvWlNCZmRISjVUM0pwWlc1MFlYUnBiMjVHWVd4c1ltRmpheUJ0WlhSb2IyUWdkMjkxYkdRZ1lXUmtJR0ZjYmlBZ0x5OGdKMlJsZG1salpXOXlhV1Z1ZEdGMGFXOXVKeUJzYVhOMFpXNWxjaUJoYm1RZ1lteHZZMnNnWVd4c0lITjFZbk5sY1hWbGJuUWdKMlJsZG1salpXMXZkR2x2YmlkY2JpQWdMeThnWlhabGJuUnpJRzl1SUhSb1pYTmxJR1JsZG1salpYTXVJRU52YlcxbGJuUnpJSGRwYkd3Z1ltVWdjbVZ0YjNabFpDQnZibU5sSUhSb1pTQmlkV2NnYjJaY2JpQWdMeThnUTJoeWIyMWxJR2x6SUdOdmNuSmxZM1JsWkM1Y2JpQWdMeThnWDNSeWVVOXlhV1Z1ZEdGMGFXOXVSbUZzYkdKaFkyc29LU0I3WEc0Z0lDOHZJQ0FnVFc5MGFXOXVTVzV3ZFhRdWNtVnhkV2x5WlUxdlpIVnNaU2duYjNKcFpXNTBZWFJwYjI0bktWeHVJQ0F2THlBZ0lDQWdMblJvWlc0b0tHOXlhV1Z1ZEdGMGFXOXVLU0E5UGlCN1hHNGdJQzh2SUNBZ0lDQWdJR2xtSUNodmNtbGxiblJoZEdsdmJpNXBjMVpoYkdsa0tTQjdYRzRnSUM4dklDQWdJQ0FnSUNBZ1kyOXVjMjlzWlM1c2IyY29ZRnh1SUNBdkx5QWdJQ0FnSUNBZ0lDQWdWMEZTVGtsT1J5QW9iVzkwYVc5dUxXbHVjSFYwS1RvZ1ZHaGxJQ2RrWlhacFkyVnRiM1JwYjI0bklHVjJaVzUwSUdSdlpYTWdibTkwSUdWNGFYTjBjeUJ2Y2x4dUlDQXZMeUFnSUNBZ0lDQWdJQ0FnWkc5bGN5QnViM1FnY0hKdmRtbGtaU0J5YjNSaGRHbHZiaUJ5WVhSbElIWmhiSFZsY3lCcGJpQjViM1Z5SUdKeWIzZHpaWElzSUhOdklIUm9aU0J5YjNSaGRHbHZibHh1SUNBdkx5QWdJQ0FnSUNBZ0lDQWdjbUYwWlNCdlppQjBhR1VnWkdWMmFXTmxJR2x6SUdWemRHbHRZWFJsWkNCbWNtOXRJSFJvWlNBbmIzSnBaVzUwWVhScGIyNG5MQ0JqWVd4amRXeGhkR1ZrWEc0Z0lDOHZJQ0FnSUNBZ0lDQWdJQ0JtY205dElIUm9aU0FuWkdWMmFXTmxiM0pwWlc1MFlYUnBiMjRuSUdWMlpXNTBMaUJUYVc1alpTQjBhR1VnWTI5dGNHRnpjeUJ0YVdkb2RDQnViM1JjYmlBZ0x5OGdJQ0FnSUNBZ0lDQWdJR0psSUdGMllXbHNZV0pzWlN3Z2IyNXNlU0JjWEdCaVpYUmhYRnhnSUdGdVpDQmNYR0JuWVcxdFlWeGNZQ0JoYm1kc1pYTWdiV0Y1SUdKbElIQnliM1pwWkdWa1hHNGdJQzh2SUNBZ0lDQWdJQ0FnSUNBb1hGeGdZV3h3YUdGY1hHQWdkMjkxYkdRZ1ltVWdiblZzYkNrdVlGeHVJQ0F2THlBZ0lDQWdJQ0FnSUNrN1hHNWNiaUFnTHk4Z0lDQWdJQ0FnSUNCMGFHbHpMbkp2ZEdGMGFXOXVVbUYwWlM1cGMwTmhiR04xYkdGMFpXUWdQU0IwY25WbE8xeHVYRzRnSUM4dklDQWdJQ0FnSUNBZ1RXOTBhVzl1U1c1d2RYUXVZV1JrVEdsemRHVnVaWElvSjI5eWFXVnVkR0YwYVc5dUp5d2dLRzl5YVdWdWRHRjBhVzl1S1NBOVBpQjdYRzRnSUM4dklDQWdJQ0FnSUNBZ0lDQjBhR2x6TGw5allXeGpkV3hoZEdWU2IzUmhkR2x2YmxKaGRHVkdjbTl0VDNKcFpXNTBZWFJwYjI0b2IzSnBaVzUwWVhScGIyNHBPMXh1SUNBdkx5QWdJQ0FnSUNBZ0lIMHBPMXh1SUNBdkx5QWdJQ0FnSUNCOVhHNWNiaUFnTHk4Z0lDQWdJQ0FnZEdocGN5NWZjSEp2YldselpWSmxjMjlzZG1Vb2RHaHBjeWs3WEc0Z0lDOHZJQ0FnSUNCOUtUdGNiaUFnTHk4Z2ZWeHVYRzRnSUY5d2NtOWpaWE56S0dSaGRHRXBJSHRjYmlBZ0lDQjBhR2x6TGw5d2NtOWpaWE56Um5WdVkzUnBiMjRvWkdGMFlTazdYRzRnSUgxY2JseHVJQ0F2S2lwY2JpQWdJQ29nU1c1cGRHbGhiR2w2WlhNZ2IyWWdkR2hsSUcxdlpIVnNaUzVjYmlBZ0lDcGNiaUFnSUNvZ1FISmxkSFZ5YmlCN2NISnZiV2x6WlgxY2JpQWdJQ292WEc0Z0lHbHVhWFFvS1NCN1hHNGdJQ0FnY21WMGRYSnVJSE4xY0dWeUxtbHVhWFFvS0hKbGMyOXNkbVVwSUQwK0lIdGNiaUFnSUNBZ0lIUm9hWE11WDNCeWIyMXBjMlZTWlhOdmJIWmxJRDBnY21WemIyeDJaVHRjYmx4dUlDQWdJQ0FnYVdZZ0tIZHBibVJ2ZHk1RVpYWnBZMlZOYjNScGIyNUZkbVZ1ZENrZ2UxeHVJQ0FnSUNBZ0lDQjBhR2x6TGw5d2NtOWpaWE56Um5WdVkzUnBiMjRnUFNCMGFHbHpMbDlrWlhacFkyVnRiM1JwYjI1RGFHVmphenRjYmlBZ0lDQWdJQ0FnTHk4Z1ptVmhkSFZ5WlNCa1pYUmxZM1JjYmlBZ0lDQWdJQ0FnYVdZZ0tIUjVjR1Z2WmlCRVpYWnBZMlZOYjNScGIyNUZkbVZ1ZEM1eVpYRjFaWE4wVUdWeWJXbHpjMmx2YmlBOVBUMGdKMloxYm1OMGFXOXVKeWtnZTF4dUlDQWdJQ0FnSUNBZ0lFUmxkbWxqWlUxdmRHbHZia1YyWlc1MExuSmxjWFZsYzNSUVpYSnRhWE56YVc5dUtDbGNiaUFnSUNBZ0lDQWdJQ0FnSUM1MGFHVnVLSEJsY20xcGMzTnBiMjVUZEdGMFpTQTlQaUI3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJR2xtSUNod1pYSnRhWE56YVc5dVUzUmhkR1VnUFQwOUlDZG5jbUZ1ZEdWa0p5a2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSGRwYm1SdmR5NWhaR1JGZG1WdWRFeHBjM1JsYm1WeUtDZGtaWFpwWTJWdGIzUnBiMjRuTENCMGFHbHpMbDl3Y205alpYTnpLVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0FnSUNBZ2ZTbGNiaUFnSUNBZ0lDQWdJQ0FnSUM1allYUmphQ2hqYjI1emIyeGxMbVZ5Y205eUtUdGNiaUFnSUNBZ0lDQWdmU0JsYkhObElIdGNiaUFnSUNBZ0lDQWdJQ0F2THlCb1lXNWtiR1VnY21WbmRXeGhjaUJ1YjI0Z2FVOVRJREV6S3lCa1pYWnBZMlZ6WEc0Z0lDQWdJQ0FnSUNBZ2QybHVaRzkzTG1Ga1pFVjJaVzUwVEdsemRHVnVaWElvSjJSbGRtbGpaVzF2ZEdsdmJpY3NJSFJvYVhNdVgzQnliMk5sYzNNcE8xeHVJQ0FnSUNBZ0lDQjlYRzVjYmlBZ0lDQWdJQ0FnTHk4Z2MyVjBJR1poYkd4aVlXTnJJSFJwYldWdmRYUWdabTl5SUVacGNtVm1iM2dnWkdWemEzUnZjQ0FvYVhSeklIZHBibVJ2ZHlCdVpYWmxjaUJqWVd4c2FXNW5JSFJvWlNCRVpYWnBZMlZQY21sbGJuUmhkR2x2YmlCbGRtVnVkQ3dnWVZ4dUlDQWdJQ0FnSUNBdkx5QnlaWEYxYVhKbElHOW1JSFJvWlNCRVpYWnBZMlZQY21sbGJuUmhkR2x2YmlCelpYSjJhV05sSUhkcGJHd2djbVZ6ZFd4MElHbHVJSFJvWlNCeVpYRjFhWEpsSUhCeWIyMXBjMlVnYm1WMlpYSWdZbVZwYm1jZ2NtVnpiMngyWldSY2JpQWdJQ0FnSUNBZ0x5OGdhR1Z1WTJVZ2RHaGxJRVY0Y0dWeWFXMWxiblFnYzNSaGNuUW9LU0J0WlhSb2IyUWdibVYyWlhJZ1kyRnNiR1ZrS1Z4dUlDQWdJQ0FnSUNBdkx5QStJRzV2ZEdVZ01ESXZNREl2TWpBeE9Eb2dkR2hwY3lCelpXVnRjeUIwYnlCamNtVmhkR1VnY0hKdllteGxiWE1nZDJsMGFDQnBjRzlrY3lCMGFHRjBYRzRnSUNBZ0lDQWdJQzh2SUdSdmJpZDBJR2hoZG1VZ1pXNXZkV2RvSUhScGJXVWdkRzhnYzNSaGNuUWdLSE52YldWMGFXMWxjeWtzSUdobGJtTmxJR055WldGMGFXNW5JR1poYkhObFhHNGdJQ0FnSUNBZ0lDOHZJRzVsWjJGMGFYWmxMaUJUYnlCM1pTQnZibXg1SUdGd2NHeDVJSFJ2SUVacGNtVm1iM2dnWkdWemEzUnZjQ0JoYm1RZ2NIVjBJR0VnY21WaGJHeDVYRzRnSUNBZ0lDQWdJQzh2SUd4aGNtZGxJSFpoYkhWbElDZzBjMlZqS1NCcWRYTjBJR2x1SUdOaGMyVXVYRzRnSUNBZ0lDQWdJR2xtSUNod2JHRjBabTl5YlM1dVlXMWxJRDA5UFNBblJtbHlaV1p2ZUNjZ0ppWmNiaUFnSUNBZ0lDQWdJQ0J3YkdGMFptOXliUzV2Y3k1bVlXMXBiSGtnSVQwOUlDZEJibVJ5YjJsa0p5QW1KbHh1SUNBZ0lDQWdJQ0FnSUhCc1lYUm1iM0p0TG05ekxtWmhiV2xzZVNBaFBUMGdKMmxQVXlkY2JpQWdJQ0FnSUNBZ0tTQjdYRzRnSUNBZ0lDQWdJQ0FnWTI5dWMyOXNaUzUzWVhKdUtDZGJiVzkwYVc5dUxXbHVjSFYwWFNCeVpXZHBjM1JsY2lCMGFXMWxjaUJtYjNJZ1JtbHlaV1p2ZUNCa1pYTnJkRzl3SnlrN1hHNGdJQ0FnSUNBZ0lDQWdkR2hwY3k1ZlkyaGxZMnRVYVcxbGIzVjBTV1FnUFNCelpYUlVhVzFsYjNWMEtDZ3BJRDArSUhKbGMyOXNkbVVvZEdocGN5a3NJRFFnS2lBeE1EQXdLVHRjYmlBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnZlZ4dVhHNGdJQ0FnSUNBdkx5QlhRVkpPU1U1SFhHNGdJQ0FnSUNBdkx5QlVhR1VnYkdsdVpYTWdiMllnWTI5a1pTQmlaV3h2ZHlCaGNtVWdZMjl0YldWdWRHVmtJR0psWTJGMWMyVWdiMllnWVNCaWRXY2diMllnUTJoeWIyMWxYRzRnSUNBZ0lDQXZMeUJ2YmlCemIyMWxJRUZ1WkhKdmFXUWdaR1YyYVdObGN5d2dkMmhsY21VZ0oyUmxkbWxqWlcxdmRHbHZiaWNnWlhabGJuUnpJR0Z5WlNCdWIzUWdjMlZ1ZEZ4dUlDQWdJQ0FnTHk4Z2IzSWdZMkYxWjJoMElHbG1JSFJvWlNCc2FYTjBaVzVsY2lCcGN5QnpaWFFnZFhBZ1lXWjBaWElnWVNBblpHVjJhV05sYjNKcFpXNTBZWFJwYjI0blhHNGdJQ0FnSUNBdkx5QnNhWE4wWlc1bGNpNGdTR1Z5WlN3Z2RHaGxJRjkwY25sUGNtbGxiblJoZEdsdmJrWmhiR3hpWVdOcklHMWxkR2h2WkNCM2IzVnNaQ0JoWkdRZ1lWeHVJQ0FnSUNBZ0x5OGdKMlJsZG1salpXOXlhV1Z1ZEdGMGFXOXVKeUJzYVhOMFpXNWxjaUJoYm1RZ1lteHZZMnNnWVd4c0lITjFZbk5sY1hWbGJuUWdKMlJsZG1salpXMXZkR2x2YmlkY2JpQWdJQ0FnSUM4dklHVjJaVzUwY3lCdmJpQjBhR1Z6WlNCa1pYWnBZMlZ6TGlCRGIyMXRaVzUwY3lCM2FXeHNJR0psSUhKbGJXOTJaV1FnYjI1alpTQjBhR1VnWW5WbklHOW1YRzRnSUNBZ0lDQXZMeUJEYUhKdmJXVWdhWE1nWTI5eWNtVmpkR1ZrTGx4dVhHNGdJQ0FnSUNBdkx5QmxiSE5sSUdsbUlDaDBhR2x6TG5KbGNYVnBjbVZrTG5KdmRHRjBhVzl1VW1GMFpTbGNiaUFnSUNBZ0lDOHZJSFJvYVhNdVgzUnllVTl5YVdWdWRHRjBhVzl1Um1Gc2JHSmhZMnNvS1R0Y2JseHVJQ0FnSUNBZ1pXeHpaVnh1SUNBZ0lDQWdJQ0J5WlhOdmJIWmxLSFJvYVhNcE8xeHVJQ0FnSUgwcE8xeHVJQ0I5WEc1OVhHNWNibVY0Y0c5eWRDQmtaV1poZFd4MElHNWxkeUJFWlhacFkyVk5iM1JwYjI1TmIyUjFiR1VvS1R0Y2JpSmRmUT09IiwiJ3VzZSBzdHJpY3QnO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuXG52YXIgX3NsaWNlZFRvQXJyYXkgPSBmdW5jdGlvbiAoKSB7IGZ1bmN0aW9uIHNsaWNlSXRlcmF0b3IoYXJyLCBpKSB7IHZhciBfYXJyID0gW107IHZhciBfbiA9IHRydWU7IHZhciBfZCA9IGZhbHNlOyB2YXIgX2UgPSB1bmRlZmluZWQ7IHRyeSB7IGZvciAodmFyIF9pID0gYXJyW1N5bWJvbC5pdGVyYXRvcl0oKSwgX3M7ICEoX24gPSAoX3MgPSBfaS5uZXh0KCkpLmRvbmUpOyBfbiA9IHRydWUpIHsgX2Fyci5wdXNoKF9zLnZhbHVlKTsgaWYgKGkgJiYgX2Fyci5sZW5ndGggPT09IGkpIGJyZWFrOyB9IH0gY2F0Y2ggKGVycikgeyBfZCA9IHRydWU7IF9lID0gZXJyOyB9IGZpbmFsbHkgeyB0cnkgeyBpZiAoIV9uICYmIF9pW1wicmV0dXJuXCJdKSBfaVtcInJldHVyblwiXSgpOyB9IGZpbmFsbHkgeyBpZiAoX2QpIHRocm93IF9lOyB9IH0gcmV0dXJuIF9hcnI7IH0gcmV0dXJuIGZ1bmN0aW9uIChhcnIsIGkpIHsgaWYgKEFycmF5LmlzQXJyYXkoYXJyKSkgeyByZXR1cm4gYXJyOyB9IGVsc2UgaWYgKFN5bWJvbC5pdGVyYXRvciBpbiBPYmplY3QoYXJyKSkgeyByZXR1cm4gc2xpY2VJdGVyYXRvcihhcnIsIGkpOyB9IGVsc2UgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiSW52YWxpZCBhdHRlbXB0IHRvIGRlc3RydWN0dXJlIG5vbi1pdGVyYWJsZSBpbnN0YW5jZVwiKTsgfSB9OyB9KCk7XG5cbnZhciBfY3JlYXRlQ2xhc3MgPSBmdW5jdGlvbiAoKSB7IGZ1bmN0aW9uIGRlZmluZVByb3BlcnRpZXModGFyZ2V0LCBwcm9wcykgeyBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7IHZhciBkZXNjcmlwdG9yID0gcHJvcHNbaV07IGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IGRlc2NyaXB0b3IuZW51bWVyYWJsZSB8fCBmYWxzZTsgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlOyBpZiAoXCJ2YWx1ZVwiIGluIGRlc2NyaXB0b3IpIGRlc2NyaXB0b3Iud3JpdGFibGUgPSB0cnVlOyBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBkZXNjcmlwdG9yLmtleSwgZGVzY3JpcHRvcik7IH0gfSByZXR1cm4gZnVuY3Rpb24gKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykgeyBpZiAocHJvdG9Qcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpOyBpZiAoc3RhdGljUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTsgcmV0dXJuIENvbnN0cnVjdG9yOyB9OyB9KCk7XG5cbnZhciBfZ2V0ID0gZnVuY3Rpb24gZ2V0KG9iamVjdCwgcHJvcGVydHksIHJlY2VpdmVyKSB7IGlmIChvYmplY3QgPT09IG51bGwpIG9iamVjdCA9IEZ1bmN0aW9uLnByb3RvdHlwZTsgdmFyIGRlc2MgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKG9iamVjdCwgcHJvcGVydHkpOyBpZiAoZGVzYyA9PT0gdW5kZWZpbmVkKSB7IHZhciBwYXJlbnQgPSBPYmplY3QuZ2V0UHJvdG90eXBlT2Yob2JqZWN0KTsgaWYgKHBhcmVudCA9PT0gbnVsbCkgeyByZXR1cm4gdW5kZWZpbmVkOyB9IGVsc2UgeyByZXR1cm4gZ2V0KHBhcmVudCwgcHJvcGVydHksIHJlY2VpdmVyKTsgfSB9IGVsc2UgaWYgKFwidmFsdWVcIiBpbiBkZXNjKSB7IHJldHVybiBkZXNjLnZhbHVlOyB9IGVsc2UgeyB2YXIgZ2V0dGVyID0gZGVzYy5nZXQ7IGlmIChnZXR0ZXIgPT09IHVuZGVmaW5lZCkgeyByZXR1cm4gdW5kZWZpbmVkOyB9IHJldHVybiBnZXR0ZXIuY2FsbChyZWNlaXZlcik7IH0gfTtcblxudmFyIF9JbnB1dE1vZHVsZTIgPSByZXF1aXJlKCcuL0lucHV0TW9kdWxlJyk7XG5cbnZhciBfSW5wdXRNb2R1bGUzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfSW5wdXRNb2R1bGUyKTtcblxudmFyIF9Nb3Rpb25JbnB1dCA9IHJlcXVpcmUoJy4vTW90aW9uSW5wdXQnKTtcblxudmFyIF9Nb3Rpb25JbnB1dDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9Nb3Rpb25JbnB1dCk7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cbmZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTsgfSB9XG5cbmZ1bmN0aW9uIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHNlbGYsIGNhbGwpIHsgaWYgKCFzZWxmKSB7IHRocm93IG5ldyBSZWZlcmVuY2VFcnJvcihcInRoaXMgaGFzbid0IGJlZW4gaW5pdGlhbGlzZWQgLSBzdXBlcigpIGhhc24ndCBiZWVuIGNhbGxlZFwiKTsgfSByZXR1cm4gY2FsbCAmJiAodHlwZW9mIGNhbGwgPT09IFwib2JqZWN0XCIgfHwgdHlwZW9mIGNhbGwgPT09IFwiZnVuY3Rpb25cIikgPyBjYWxsIDogc2VsZjsgfVxuXG5mdW5jdGlvbiBfaW5oZXJpdHMoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIHsgaWYgKHR5cGVvZiBzdXBlckNsYXNzICE9PSBcImZ1bmN0aW9uXCIgJiYgc3VwZXJDbGFzcyAhPT0gbnVsbCkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb24sIG5vdCBcIiArIHR5cGVvZiBzdXBlckNsYXNzKTsgfSBzdWJDbGFzcy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ2xhc3MgJiYgc3VwZXJDbGFzcy5wcm90b3R5cGUsIHsgY29uc3RydWN0b3I6IHsgdmFsdWU6IHN1YkNsYXNzLCBlbnVtZXJhYmxlOiBmYWxzZSwgd3JpdGFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSB9IH0pOyBpZiAoc3VwZXJDbGFzcykgT2JqZWN0LnNldFByb3RvdHlwZU9mID8gT2JqZWN0LnNldFByb3RvdHlwZU9mKHN1YkNsYXNzLCBzdXBlckNsYXNzKSA6IHN1YkNsYXNzLl9fcHJvdG9fXyA9IHN1cGVyQ2xhc3M7IH1cblxuLyoqXG4gKiBFbmVyZ3kgbW9kdWxlIHNpbmdsZXRvbi5cbiAqIFRoZSBlbmVyZ3kgbW9kdWxlIHNpbmdsZXRvbiBwcm92aWRlcyBlbmVyZ3kgdmFsdWVzIChiZXR3ZWVuIDAgYW5kIDEpXG4gKiBiYXNlZCBvbiB0aGUgYWNjZWxlcmF0aW9uIGFuZCB0aGUgcm90YXRpb24gcmF0ZSBvZiB0aGUgZGV2aWNlLlxuICogVGhlIHBlcmlvZCBvZiB0aGUgZW5lcmd5IHZhbHVlcyBpcyB0aGUgc2FtZSBhcyB0aGUgcGVyaW9kIG9mIHRoZVxuICogYWNjZWxlcmF0aW9uIGFuZCB0aGUgcm90YXRpb24gcmF0ZSB2YWx1ZXMuXG4gKlxuICogQGNsYXNzIEVuZXJneU1vZHVsZVxuICogQGV4dGVuZHMgSW5wdXRNb2R1bGVcbiAqL1xudmFyIEVuZXJneU1vZHVsZSA9IGZ1bmN0aW9uIChfSW5wdXRNb2R1bGUpIHtcbiAgX2luaGVyaXRzKEVuZXJneU1vZHVsZSwgX0lucHV0TW9kdWxlKTtcblxuICAvKipcbiAgICogQ3JlYXRlcyB0aGUgZW5lcmd5IG1vZHVsZSBpbnN0YW5jZS5cbiAgICpcbiAgICogQGNvbnN0cnVjdG9yXG4gICAqL1xuICBmdW5jdGlvbiBFbmVyZ3lNb2R1bGUoKSB7XG4gICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIEVuZXJneU1vZHVsZSk7XG5cbiAgICAvKipcbiAgICAgKiBFdmVudCBjb250YWluaW5nIHRoZSB2YWx1ZSBvZiB0aGUgZW5lcmd5LCBzZW50IGJ5IHRoZSBlbmVyZ3kgbW9kdWxlLlxuICAgICAqXG4gICAgICogQHRoaXMgRW5lcmd5TW9kdWxlXG4gICAgICogQHR5cGUge251bWJlcn1cbiAgICAgKiBAZGVmYXVsdCAwXG4gICAgICovXG4gICAgdmFyIF90aGlzID0gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgKEVuZXJneU1vZHVsZS5fX3Byb3RvX18gfHwgT2JqZWN0LmdldFByb3RvdHlwZU9mKEVuZXJneU1vZHVsZSkpLmNhbGwodGhpcywgJ2VuZXJneScpKTtcblxuICAgIF90aGlzLmV2ZW50ID0gMDtcblxuICAgIC8qKlxuICAgICAqIFRoZSBhY2NlbGVyYXRpb24gbW9kdWxlLCB1c2VkIGluIHRoZSBjYWxjdWxhdGlvbiBvZiB0aGUgZW5lcmd5LlxuICAgICAqXG4gICAgICogQHRoaXMgRW5lcmd5TW9kdWxlXG4gICAgICogQHR5cGUge0RPTUV2ZW50U3VibW9kdWxlfVxuICAgICAqIEBkZWZhdWx0IG51bGxcbiAgICAgKiBAc2VlIERldmljZW1vdGlvbk1vZHVsZVxuICAgICAqL1xuICAgIF90aGlzLl9hY2NlbGVyYXRpb25Nb2R1bGUgPSBudWxsO1xuXG4gICAgLyoqXG4gICAgICogTGF0ZXN0IGFjY2VsZXJhdGlvbiB2YWx1ZSBzZW50IGJ5IHRoZSBhY2NlbGVyYXRpb24gbW9kdWxlLlxuICAgICAqXG4gICAgICogQHRoaXMgRW5lcmd5TW9kdWxlXG4gICAgICogQHR5cGUge251bWJlcltdfVxuICAgICAqIEBkZWZhdWx0IG51bGxcbiAgICAgKi9cbiAgICBfdGhpcy5fYWNjZWxlcmF0aW9uVmFsdWVzID0gbnVsbDtcblxuICAgIC8qKlxuICAgICAqIE1heGltdW0gdmFsdWUgcmVhY2hlZCBieSB0aGUgYWNjZWxlcmF0aW9uIG1hZ25pdHVkZSwgY2xpcHBlZCBhdCBgdGhpcy5fYWNjZWxlcmF0aW9uTWFnbml0dWRlVGhyZXNob2xkYC5cbiAgICAgKlxuICAgICAqIEB0aGlzIEVuZXJneU1vZHVsZVxuICAgICAqIEB0eXBlIHtudW1iZXJ9XG4gICAgICogQGRlZmF1bHQgOS44MVxuICAgICAqL1xuICAgIF90aGlzLl9hY2NlbGVyYXRpb25NYWduaXR1ZGVDdXJyZW50TWF4ID0gMSAqIDkuODE7XG5cbiAgICAvKipcbiAgICAgKiBDbGlwcGluZyB2YWx1ZSBvZiB0aGUgYWNjZWxlcmF0aW9uIG1hZ25pdHVkZS5cbiAgICAgKlxuICAgICAqIEB0aGlzIEVuZXJneU1vZHVsZVxuICAgICAqIEB0eXBlIHtudW1iZXJ9XG4gICAgICogQGRlZmF1bHQgMjBcbiAgICAgKiBAY29uc3RhbnRcbiAgICAgKi9cbiAgICBfdGhpcy5fYWNjZWxlcmF0aW9uTWFnbml0dWRlVGhyZXNob2xkID0gNCAqIDkuODE7XG5cbiAgICAvKipcbiAgICAgKiBUaGUgcm90YXRpb24gcmF0ZSBtb2R1bGUsIHVzZWQgaW4gdGhlIGNhbGN1bGF0aW9uIG9mIHRoZSBlbmVyZ3kuXG4gICAgICpcbiAgICAgKiBAdGhpcyBFbmVyZ3lNb2R1bGVcbiAgICAgKiBAdHlwZSB7RE9NRXZlbnRTdWJtb2R1bGV9XG4gICAgICogQGRlZmF1bHQgbnVsbFxuICAgICAqIEBzZWUgRGV2aWNlbW90aW9uTW9kdWxlXG4gICAgICovXG4gICAgX3RoaXMuX3JvdGF0aW9uUmF0ZU1vZHVsZSA9IG51bGw7XG5cbiAgICAvKipcbiAgICAgKiBMYXRlc3Qgcm90YXRpb24gcmF0ZSB2YWx1ZSBzZW50IGJ5IHRoZSByb3RhdGlvbiByYXRlIG1vZHVsZS5cbiAgICAgKlxuICAgICAqIEB0aGlzIEVuZXJneU1vZHVsZVxuICAgICAqIEB0eXBlIHtudW1iZXJbXX1cbiAgICAgKiBAZGVmYXVsdCBudWxsXG4gICAgICovXG4gICAgX3RoaXMuX3JvdGF0aW9uUmF0ZVZhbHVlcyA9IG51bGw7XG5cbiAgICAvKipcbiAgICAgKiBNYXhpbXVtIHZhbHVlIHJlYWNoZWQgYnkgdGhlIHJvdGF0aW9uIHJhdGUgbWFnbml0dWRlLCBjbGlwcGVkIGF0IGB0aGlzLl9yb3RhdGlvblJhdGVNYWduaXR1ZGVUaHJlc2hvbGRgLlxuICAgICAqXG4gICAgICogQHRoaXMgRW5lcmd5TW9kdWxlXG4gICAgICogQHR5cGUge251bWJlcn1cbiAgICAgKiBAZGVmYXVsdCA0MDBcbiAgICAgKi9cbiAgICBfdGhpcy5fcm90YXRpb25SYXRlTWFnbml0dWRlQ3VycmVudE1heCA9IDQwMDtcblxuICAgIC8qKlxuICAgICAqIENsaXBwaW5nIHZhbHVlIG9mIHRoZSByb3RhdGlvbiByYXRlIG1hZ25pdHVkZS5cbiAgICAgKlxuICAgICAqIEB0aGlzIEVuZXJneU1vZHVsZVxuICAgICAqIEB0eXBlIHtudW1iZXJ9XG4gICAgICogQGRlZmF1bHQgNjAwXG4gICAgICogQGNvbnN0YW50XG4gICAgICovXG4gICAgX3RoaXMuX3JvdGF0aW9uUmF0ZU1hZ25pdHVkZVRocmVzaG9sZCA9IDYwMDtcblxuICAgIC8qKlxuICAgICAqIFRpbWUgY29uc3RhbnQgKGhhbGYtbGlmZSkgb2YgdGhlIGxvdy1wYXNzIGZpbHRlciB1c2VkIHRvIHNtb290aCB0aGUgZW5lcmd5IHZhbHVlcyAoaW4gc2Vjb25kcykuXG4gICAgICpcbiAgICAgKiBAdGhpcyBFbmVyZ3lNb2R1bGVcbiAgICAgKiBAdHlwZSB7bnVtYmVyfVxuICAgICAqIEBkZWZhdWx0IDAuMVxuICAgICAqIEBjb25zdGFudFxuICAgICAqL1xuICAgIF90aGlzLl9lbmVyZ3lUaW1lQ29uc3RhbnQgPSAwLjE7XG5cbiAgICBfdGhpcy5fb25BY2NlbGVyYXRpb24gPSBfdGhpcy5fb25BY2NlbGVyYXRpb24uYmluZChfdGhpcyk7XG4gICAgX3RoaXMuX29uUm90YXRpb25SYXRlID0gX3RoaXMuX29uUm90YXRpb25SYXRlLmJpbmQoX3RoaXMpO1xuICAgIHJldHVybiBfdGhpcztcbiAgfVxuXG4gIC8qKlxuICAgKiBEZWNheSBmYWN0b3Igb2YgdGhlIGxvdy1wYXNzIGZpbHRlciB1c2VkIHRvIHNtb290aCB0aGUgZW5lcmd5IHZhbHVlcy5cbiAgICpcbiAgICogQHR5cGUge251bWJlcn1cbiAgICogQHJlYWRvbmx5XG4gICAqL1xuXG5cbiAgX2NyZWF0ZUNsYXNzKEVuZXJneU1vZHVsZSwgW3tcbiAgICBrZXk6ICdpbml0JyxcblxuXG4gICAgLyoqXG4gICAgICogSW5pdGlhbGl6ZXMgb2YgdGhlIG1vZHVsZS5cbiAgICAgKlxuICAgICAqIEByZXR1cm4ge1Byb21pc2V9XG4gICAgICovXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGluaXQoKSB7XG4gICAgICB2YXIgX3RoaXMyID0gdGhpcztcblxuICAgICAgcmV0dXJuIF9nZXQoRW5lcmd5TW9kdWxlLnByb3RvdHlwZS5fX3Byb3RvX18gfHwgT2JqZWN0LmdldFByb3RvdHlwZU9mKEVuZXJneU1vZHVsZS5wcm90b3R5cGUpLCAnaW5pdCcsIHRoaXMpLmNhbGwodGhpcywgZnVuY3Rpb24gKHJlc29sdmUpIHtcbiAgICAgICAgLy8gVGhlIGVuZXJneSBtb2R1bGUgcmVxdWlyZXMgdGhlIGFjY2VsZXJhdGlvbiBhbmQgdGhlIHJvdGF0aW9uIHJhdGUgbW9kdWxlc1xuICAgICAgICBQcm9taXNlLmFsbChbX01vdGlvbklucHV0Mi5kZWZhdWx0LnJlcXVpcmVNb2R1bGUoJ2FjY2VsZXJhdGlvbicpLCBfTW90aW9uSW5wdXQyLmRlZmF1bHQucmVxdWlyZU1vZHVsZSgncm90YXRpb25SYXRlJyldKS50aGVuKGZ1bmN0aW9uIChtb2R1bGVzKSB7XG4gICAgICAgICAgdmFyIF9tb2R1bGVzID0gX3NsaWNlZFRvQXJyYXkobW9kdWxlcywgMiksXG4gICAgICAgICAgICAgIGFjY2VsZXJhdGlvbiA9IF9tb2R1bGVzWzBdLFxuICAgICAgICAgICAgICByb3RhdGlvblJhdGUgPSBfbW9kdWxlc1sxXTtcblxuICAgICAgICAgIF90aGlzMi5fYWNjZWxlcmF0aW9uTW9kdWxlID0gYWNjZWxlcmF0aW9uO1xuICAgICAgICAgIF90aGlzMi5fcm90YXRpb25SYXRlTW9kdWxlID0gcm90YXRpb25SYXRlO1xuICAgICAgICAgIF90aGlzMi5pc0NhbGN1bGF0ZWQgPSBfdGhpczIuX2FjY2VsZXJhdGlvbk1vZHVsZS5pc1ZhbGlkIHx8IF90aGlzMi5fcm90YXRpb25SYXRlTW9kdWxlLmlzVmFsaWQ7XG5cbiAgICAgICAgICBpZiAoX3RoaXMyLl9hY2NlbGVyYXRpb25Nb2R1bGUuaXNWYWxpZCkgX3RoaXMyLnBlcmlvZCA9IF90aGlzMi5fYWNjZWxlcmF0aW9uTW9kdWxlLnBlcmlvZDtlbHNlIGlmIChfdGhpczIuX3JvdGF0aW9uUmF0ZU1vZHVsZS5pc1ZhbGlkKSBfdGhpczIucGVyaW9kID0gX3RoaXMyLl9yb3RhdGlvblJhdGVNb2R1bGUucGVyaW9kO1xuXG4gICAgICAgICAgcmVzb2x2ZShfdGhpczIpO1xuICAgICAgICB9KTtcbiAgICAgIH0pO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ2FkZExpc3RlbmVyJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gYWRkTGlzdGVuZXIobGlzdGVuZXIpIHtcbiAgICAgIGlmICh0aGlzLmxpc3RlbmVycy5zaXplID09PSAwKSB7XG4gICAgICAgIGlmICh0aGlzLl9hY2NlbGVyYXRpb25Nb2R1bGUuaXNWYWxpZCkgdGhpcy5fYWNjZWxlcmF0aW9uTW9kdWxlLmFkZExpc3RlbmVyKHRoaXMuX29uQWNjZWxlcmF0aW9uKTtcbiAgICAgICAgaWYgKHRoaXMuX3JvdGF0aW9uUmF0ZU1vZHVsZS5pc1ZhbGlkKSB0aGlzLl9yb3RhdGlvblJhdGVNb2R1bGUuYWRkTGlzdGVuZXIodGhpcy5fb25Sb3RhdGlvblJhdGUpO1xuICAgICAgfVxuXG4gICAgICBfZ2V0KEVuZXJneU1vZHVsZS5wcm90b3R5cGUuX19wcm90b19fIHx8IE9iamVjdC5nZXRQcm90b3R5cGVPZihFbmVyZ3lNb2R1bGUucHJvdG90eXBlKSwgJ2FkZExpc3RlbmVyJywgdGhpcykuY2FsbCh0aGlzLCBsaXN0ZW5lcik7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAncmVtb3ZlTGlzdGVuZXInLFxuICAgIHZhbHVlOiBmdW5jdGlvbiByZW1vdmVMaXN0ZW5lcihsaXN0ZW5lcikge1xuICAgICAgX2dldChFbmVyZ3lNb2R1bGUucHJvdG90eXBlLl9fcHJvdG9fXyB8fCBPYmplY3QuZ2V0UHJvdG90eXBlT2YoRW5lcmd5TW9kdWxlLnByb3RvdHlwZSksICdyZW1vdmVMaXN0ZW5lcicsIHRoaXMpLmNhbGwodGhpcywgbGlzdGVuZXIpO1xuXG4gICAgICBpZiAodGhpcy5saXN0ZW5lcnMuc2l6ZSA9PT0gMCkge1xuICAgICAgICBpZiAodGhpcy5fYWNjZWxlcmF0aW9uTW9kdWxlLmlzVmFsaWQpIHRoaXMuX2FjY2VsZXJhdGlvbk1vZHVsZS5yZW1vdmVMaXN0ZW5lcih0aGlzLl9vbkFjY2VsZXJhdGlvbik7XG4gICAgICAgIGlmICh0aGlzLl9yb3RhdGlvblJhdGVNb2R1bGUuaXNWYWxpZCkgdGhpcy5fcm90YXRpb25SYXRlTW9kdWxlLnJlbW92ZUxpc3RlbmVyKHRoaXMuX29uUm90YXRpb25SYXRlKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBBY2NlbGVyYXRpb24gdmFsdWVzIGhhbmRsZXIuXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge251bWJlcltdfSBhY2NlbGVyYXRpb24gLSBMYXRlc3QgYWNjZWxlcmF0aW9uIHZhbHVlLlxuICAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6ICdfb25BY2NlbGVyYXRpb24nLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBfb25BY2NlbGVyYXRpb24oYWNjZWxlcmF0aW9uKSB7XG4gICAgICB0aGlzLl9hY2NlbGVyYXRpb25WYWx1ZXMgPSBhY2NlbGVyYXRpb247XG5cbiAgICAgIC8vIElmIHRoZSByb3RhdGlvbiByYXRlIHZhbHVlcyBhcmUgbm90IGF2YWlsYWJsZSwgd2UgY2FsY3VsYXRlIHRoZSBlbmVyZ3kgcmlnaHQgYXdheS5cbiAgICAgIGlmICghdGhpcy5fcm90YXRpb25SYXRlTW9kdWxlLmlzVmFsaWQpIHRoaXMuX2NhbGN1bGF0ZUVuZXJneSgpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFJvdGF0aW9uIHJhdGUgdmFsdWVzIGhhbmRsZXIuXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge251bWJlcltdfSByb3RhdGlvblJhdGUgLSBMYXRlc3Qgcm90YXRpb24gcmF0ZSB2YWx1ZS5cbiAgICAgKi9cblxuICB9LCB7XG4gICAga2V5OiAnX29uUm90YXRpb25SYXRlJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gX29uUm90YXRpb25SYXRlKHJvdGF0aW9uUmF0ZSkge1xuICAgICAgdGhpcy5fcm90YXRpb25SYXRlVmFsdWVzID0gcm90YXRpb25SYXRlO1xuXG4gICAgICAvLyBXZSBrbm93IHRoYXQgdGhlIGFjY2VsZXJhdGlvbiBhbmQgcm90YXRpb24gcmF0ZSB2YWx1ZXMgY29taW5nIGZyb20gdGhlXG4gICAgICAvLyBzYW1lIGBkZXZpY2Vtb3Rpb25gIGV2ZW50IGFyZSBzZW50IGluIHRoYXQgb3JkZXIgKGFjY2VsZXJhdGlvbiA+IHJvdGF0aW9uIHJhdGUpXG4gICAgICAvLyBzbyB3aGVuIHRoZSByb3RhdGlvbiByYXRlIGlzIHByb3ZpZGVkLCB3ZSBjYWxjdWxhdGUgdGhlIGVuZXJneSB2YWx1ZSBvZiB0aGVcbiAgICAgIC8vIGxhdGVzdCBgZGV2aWNlbW90aW9uYCBldmVudCB3aGVuIHdlIHJlY2VpdmUgdGhlIHJvdGF0aW9uIHJhdGUgdmFsdWVzLlxuICAgICAgdGhpcy5fY2FsY3VsYXRlRW5lcmd5KCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogRW5lcmd5IGNhbGN1bGF0aW9uOiBlbWl0cyBhbiBlbmVyZ3kgdmFsdWUgYmV0d2VlbiAwIGFuZCAxLlxuICAgICAqXG4gICAgICogVGhpcyBtZXRob2QgY2hlY2tzIGlmIHRoZSBhY2NlbGVyYXRpb24gbW9kdWxlcyBpcyB2YWxpZC4gSWYgdGhhdCBpcyB0aGUgY2FzZSxcbiAgICAgKiBpdCBjYWxjdWxhdGVzIGFuIGVzdGltYXRpb24gb2YgdGhlIGVuZXJneSAoYmV0d2VlbiAwIGFuZCAxKSBiYXNlZCBvbiB0aGUgcmF0aW9cbiAgICAgKiBvZiB0aGUgY3VycmVudCBhY2NlbGVyYXRpb24gbWFnbml0dWRlIGFuZCB0aGUgbWF4aW11bSBhY2NlbGVyYXRpb24gbWFnbml0dWRlXG4gICAgICogcmVhY2hlZCBzbyBmYXIgKGNsaXBwZWQgYXQgdGhlIGB0aGlzLl9hY2NlbGVyYXRpb25NYWduaXR1ZGVUaHJlc2hvbGRgIHZhbHVlKS5cbiAgICAgKiAoV2UgdXNlIHRoaXMgdHJpY2sgdG8gZ2V0IHVuaWZvcm0gYmVoYXZpb3JzIGFtb25nIGRldmljZXMuIElmIHdlIGNhbGN1bGF0ZWRcbiAgICAgKiB0aGUgcmF0aW8gYmFzZWQgb24gYSBmaXhlZCB2YWx1ZSBpbmRlcGVuZGVudCBvZiB3aGF0IHRoZSBkZXZpY2UgaXMgY2FwYWJsZSBvZlxuICAgICAqIHByb3ZpZGluZywgd2UgY291bGQgZ2V0IGluY29uc2lzdGVudCBiZWhhdmlvcnMuIEZvciBpbnN0YW5jZSwgdGhlIGRldmljZXNcbiAgICAgKiB3aG9zZSBhY2NlbGVyb21ldGVycyBhcmUgbGltaXRlZCBhdCAyZyB3b3VsZCBhbHdheXMgcHJvdmlkZSB2ZXJ5IGxvdyB2YWx1ZXNcbiAgICAgKiBjb21wYXJlZCB0byBkZXZpY2VzIHdpdGggYWNjZWxlcm9tZXRlcnMgY2FwYWJsZSBvZiBtZWFzdXJpbmcgNGcgYWNjZWxlcmF0aW9ucy4pXG4gICAgICogVGhlIHNhbWUgY2hlY2tzIGFuZCBjYWxjdWxhdGlvbnMgYXJlIG1hZGUgb24gdGhlIHJvdGF0aW9uIHJhdGUgbW9kdWxlLlxuICAgICAqIEZpbmFsbHksIHRoZSBlbmVyZ3kgdmFsdWUgaXMgdGhlIG1heGltdW0gYmV0d2VlbiB0aGUgZW5lcmd5IHZhbHVlIGVzdGltYXRlZFxuICAgICAqIGZyb20gdGhlIGFjY2VsZXJhdGlvbiwgYW5kIHRoZSBvbmUgZXN0aW1hdGVkIGZyb20gdGhlIHJvdGF0aW9uIHJhdGUuIEl0IGlzXG4gICAgICogc21vb3RoZWQgdGhyb3VnaCBhIGxvdy1wYXNzIGZpbHRlci5cbiAgICAgKi9cblxuICB9LCB7XG4gICAga2V5OiAnX2NhbGN1bGF0ZUVuZXJneScsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIF9jYWxjdWxhdGVFbmVyZ3koKSB7XG4gICAgICB2YXIgYWNjZWxlcmF0aW9uRW5lcmd5ID0gMDtcbiAgICAgIHZhciByb3RhdGlvblJhdGVFbmVyZ3kgPSAwO1xuXG4gICAgICAvLyBDaGVjayB0aGUgYWNjZWxlcmF0aW9uIG1vZHVsZSBhbmQgY2FsY3VsYXRlIGFuIGVzdGltYXRpb24gb2YgdGhlIGVuZXJneSB2YWx1ZSBmcm9tIHRoZSBsYXRlc3QgYWNjZWxlcmF0aW9uIHZhbHVlXG4gICAgICBpZiAodGhpcy5fYWNjZWxlcmF0aW9uTW9kdWxlLmlzVmFsaWQpIHtcbiAgICAgICAgdmFyIGFYID0gdGhpcy5fYWNjZWxlcmF0aW9uVmFsdWVzWzBdO1xuICAgICAgICB2YXIgYVkgPSB0aGlzLl9hY2NlbGVyYXRpb25WYWx1ZXNbMV07XG4gICAgICAgIHZhciBhWiA9IHRoaXMuX2FjY2VsZXJhdGlvblZhbHVlc1syXTtcbiAgICAgICAgdmFyIGFjY2VsZXJhdGlvbk1hZ25pdHVkZSA9IE1hdGguc3FydChhWCAqIGFYICsgYVkgKiBhWSArIGFaICogYVopO1xuXG4gICAgICAgIC8vIFN0b3JlIHRoZSBtYXhpbXVtIGFjY2VsZXJhdGlvbiBtYWduaXR1ZGUgcmVhY2hlZCBzbyBmYXIsIGNsaXBwZWQgYXQgYHRoaXMuX2FjY2VsZXJhdGlvbk1hZ25pdHVkZVRocmVzaG9sZGBcbiAgICAgICAgaWYgKHRoaXMuX2FjY2VsZXJhdGlvbk1hZ25pdHVkZUN1cnJlbnRNYXggPCBhY2NlbGVyYXRpb25NYWduaXR1ZGUpIHRoaXMuX2FjY2VsZXJhdGlvbk1hZ25pdHVkZUN1cnJlbnRNYXggPSBNYXRoLm1pbihhY2NlbGVyYXRpb25NYWduaXR1ZGUsIHRoaXMuX2FjY2VsZXJhdGlvbk1hZ25pdHVkZVRocmVzaG9sZCk7XG4gICAgICAgIC8vIFRPRE8oPyk6IHJlbW92ZSBvdWxpZXJzIC0tLSBvbiBzb21lIEFuZHJvaWQgZGV2aWNlcywgdGhlIG1hZ25pdHVkZSBpcyB2ZXJ5IGhpZ2ggb24gYSBmZXcgaXNvbGF0ZWQgZGF0YXBvaW50cyxcbiAgICAgICAgLy8gd2hpY2ggbWFrZSB0aGUgdGhyZXNob2xkIHZlcnkgaGlnaCBhcyB3ZWxsID0+IHRoZSBlbmVyZ3kgcmVtYWlucyBhcm91bmQgMC41LCBldmVuIHdoZW4geW91IHNoYWtlIHZlcnkgaGFyZC5cblxuICAgICAgICBhY2NlbGVyYXRpb25FbmVyZ3kgPSBNYXRoLm1pbihhY2NlbGVyYXRpb25NYWduaXR1ZGUgLyB0aGlzLl9hY2NlbGVyYXRpb25NYWduaXR1ZGVDdXJyZW50TWF4LCAxKTtcbiAgICAgIH1cblxuICAgICAgLy8gQ2hlY2sgdGhlIHJvdGF0aW9uIHJhdGUgbW9kdWxlIGFuZCBjYWxjdWxhdGUgYW4gZXN0aW1hdGlvbiBvZiB0aGUgZW5lcmd5IHZhbHVlIGZyb20gdGhlIGxhdGVzdCByb3RhdGlvbiByYXRlIHZhbHVlXG4gICAgICBpZiAodGhpcy5fcm90YXRpb25SYXRlTW9kdWxlLmlzVmFsaWQpIHtcbiAgICAgICAgdmFyIHJBID0gdGhpcy5fcm90YXRpb25SYXRlVmFsdWVzWzBdO1xuICAgICAgICB2YXIgckIgPSB0aGlzLl9yb3RhdGlvblJhdGVWYWx1ZXNbMV07XG4gICAgICAgIHZhciByRyA9IHRoaXMuX3JvdGF0aW9uUmF0ZVZhbHVlc1syXTtcbiAgICAgICAgdmFyIHJvdGF0aW9uUmF0ZU1hZ25pdHVkZSA9IE1hdGguc3FydChyQSAqIHJBICsgckIgKiByQiArIHJHICogckcpO1xuXG4gICAgICAgIC8vIFN0b3JlIHRoZSBtYXhpbXVtIHJvdGF0aW9uIHJhdGUgbWFnbml0dWRlIHJlYWNoZWQgc28gZmFyLCBjbGlwcGVkIGF0IGB0aGlzLl9yb3RhdGlvblJhdGVNYWduaXR1ZGVUaHJlc2hvbGRgXG4gICAgICAgIGlmICh0aGlzLl9yb3RhdGlvblJhdGVNYWduaXR1ZGVDdXJyZW50TWF4IDwgcm90YXRpb25SYXRlTWFnbml0dWRlKSB0aGlzLl9yb3RhdGlvblJhdGVNYWduaXR1ZGVDdXJyZW50TWF4ID0gTWF0aC5taW4ocm90YXRpb25SYXRlTWFnbml0dWRlLCB0aGlzLl9yb3RhdGlvblJhdGVNYWduaXR1ZGVUaHJlc2hvbGQpO1xuXG4gICAgICAgIHJvdGF0aW9uUmF0ZUVuZXJneSA9IE1hdGgubWluKHJvdGF0aW9uUmF0ZU1hZ25pdHVkZSAvIHRoaXMuX3JvdGF0aW9uUmF0ZU1hZ25pdHVkZUN1cnJlbnRNYXgsIDEpO1xuICAgICAgfVxuXG4gICAgICB2YXIgZW5lcmd5ID0gTWF0aC5tYXgoYWNjZWxlcmF0aW9uRW5lcmd5LCByb3RhdGlvblJhdGVFbmVyZ3kpO1xuXG4gICAgICAvLyBMb3ctcGFzcyBmaWx0ZXIgdG8gc21vb3RoIHRoZSBlbmVyZ3kgdmFsdWVzXG4gICAgICB2YXIgayA9IHRoaXMuX2VuZXJneURlY2F5O1xuICAgICAgdGhpcy5ldmVudCA9IGsgKiB0aGlzLmV2ZW50ICsgKDEgLSBrKSAqIGVuZXJneTtcblxuICAgICAgLy8gRW1pdCB0aGUgZW5lcmd5IHZhbHVlXG4gICAgICB0aGlzLmVtaXQodGhpcy5ldmVudCk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAnX2VuZXJneURlY2F5JyxcbiAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgIHJldHVybiBNYXRoLmV4cCgtMiAqIE1hdGguUEkgKiB0aGlzLnBlcmlvZCAvIHRoaXMuX2VuZXJneVRpbWVDb25zdGFudCk7XG4gICAgfVxuICB9XSk7XG5cbiAgcmV0dXJuIEVuZXJneU1vZHVsZTtcbn0oX0lucHV0TW9kdWxlMy5kZWZhdWx0KTtcblxuZXhwb3J0cy5kZWZhdWx0ID0gbmV3IEVuZXJneU1vZHVsZSgpO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2NoYXJzZXQ9dXRmLTg7YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSWtWdVpYSm5lVTF2WkhWc1pTNXFjeUpkTENKdVlXMWxjeUk2V3lKRmJtVnlaM2xOYjJSMWJHVWlMQ0psZG1WdWRDSXNJbDloWTJObGJHVnlZWFJwYjI1TmIyUjFiR1VpTENKZllXTmpaV3hsY21GMGFXOXVWbUZzZFdWeklpd2lYMkZqWTJWc1pYSmhkR2x2YmsxaFoyNXBkSFZrWlVOMWNuSmxiblJOWVhnaUxDSmZZV05qWld4bGNtRjBhVzl1VFdGbmJtbDBkV1JsVkdoeVpYTm9iMnhrSWl3aVgzSnZkR0YwYVc5dVVtRjBaVTF2WkhWc1pTSXNJbDl5YjNSaGRHbHZibEpoZEdWV1lXeDFaWE1pTENKZmNtOTBZWFJwYjI1U1lYUmxUV0ZuYm1sMGRXUmxRM1Z5Y21WdWRFMWhlQ0lzSWw5eWIzUmhkR2x2YmxKaGRHVk5ZV2R1YVhSMVpHVlVhSEpsYzJodmJHUWlMQ0pmWlc1bGNtZDVWR2x0WlVOdmJuTjBZVzUwSWl3aVgyOXVRV05qWld4bGNtRjBhVzl1SWl3aVltbHVaQ0lzSWw5dmJsSnZkR0YwYVc5dVVtRjBaU0lzSW5KbGMyOXNkbVVpTENKUWNtOXRhWE5sSWl3aVlXeHNJaXdpY21WeGRXbHlaVTF2WkhWc1pTSXNJblJvWlc0aUxDSnRiMlIxYkdWeklpd2lZV05qWld4bGNtRjBhVzl1SWl3aWNtOTBZWFJwYjI1U1lYUmxJaXdpYVhORFlXeGpkV3hoZEdWa0lpd2lhWE5XWVd4cFpDSXNJbkJsY21sdlpDSXNJbXhwYzNSbGJtVnlJaXdpYkdsemRHVnVaWEp6SWl3aWMybDZaU0lzSW1Ga1pFeHBjM1JsYm1WeUlpd2ljbVZ0YjNabFRHbHpkR1Z1WlhJaUxDSmZZMkZzWTNWc1lYUmxSVzVsY21kNUlpd2lZV05qWld4bGNtRjBhVzl1Ulc1bGNtZDVJaXdpY205MFlYUnBiMjVTWVhSbFJXNWxjbWQ1SWl3aVlWZ2lMQ0poV1NJc0ltRmFJaXdpWVdOalpXeGxjbUYwYVc5dVRXRm5ibWwwZFdSbElpd2lUV0YwYUNJc0luTnhjblFpTENKdGFXNGlMQ0p5UVNJc0luSkNJaXdpY2tjaUxDSnliM1JoZEdsdmJsSmhkR1ZOWVdkdWFYUjFaR1VpTENKbGJtVnlaM2tpTENKdFlYZ2lMQ0pySWl3aVgyVnVaWEpuZVVSbFkyRjVJaXdpWlcxcGRDSXNJbVY0Y0NJc0lsQkpJbDBzSW0xaGNIQnBibWR6SWpvaU96czdPenM3T3pzN096czdRVUZCUVRzN096dEJRVU5CT3pzN096czdPenM3T3pzN1FVRkZRVHM3T3pzN096czdPenRKUVZWTlFTeFpPenM3UVVGRlNqczdPenM3UVVGTFFTd3dRa0ZCWXp0QlFVRkJPenRCUVVkYU96czdPenM3TzBGQlNGa3NORWhCUTA0c1VVRkVUVHM3UVVGVldpeFZRVUZMUXl4TFFVRk1MRWRCUVdFc1EwRkJZanM3UVVGRlFUczdPenM3T3pzN1FVRlJRU3hWUVVGTFF5eHRRa0ZCVEN4SFFVRXlRaXhKUVVFelFqczdRVUZGUVRzN096czdPenRCUVU5QkxGVkJRVXRETEcxQ1FVRk1MRWRCUVRKQ0xFbEJRVE5DT3p0QlFVVkJPenM3T3pzN08wRkJUMEVzVlVGQlMwTXNaME5CUVV3c1IwRkJkME1zU1VGQlNTeEpRVUUxUXpzN1FVRkZRVHM3T3pzN096czdRVUZSUVN4VlFVRkxReXdyUWtGQlRDeEhRVUYxUXl4SlFVRkpMRWxCUVRORE96dEJRVVZCT3pzN096czdPenRCUVZGQkxGVkJRVXRETEcxQ1FVRk1MRWRCUVRKQ0xFbEJRVE5DT3p0QlFVVkJPenM3T3pzN08wRkJUMEVzVlVGQlMwTXNiVUpCUVV3c1IwRkJNa0lzU1VGQk0wSTdPMEZCUlVFN096czdPenM3UVVGUFFTeFZRVUZMUXl4blEwRkJUQ3hIUVVGM1F5eEhRVUY0UXpzN1FVRkZRVHM3T3pzN096czdRVUZSUVN4VlFVRkxReXdyUWtGQlRDeEhRVUYxUXl4SFFVRjJRenM3UVVGRlFUczdPenM3T3pzN1FVRlJRU3hWUVVGTFF5eHRRa0ZCVEN4SFFVRXlRaXhIUVVFelFqczdRVUZGUVN4VlFVRkxReXhsUVVGTUxFZEJRWFZDTEUxQlFVdEJMR1ZCUVV3c1EwRkJjVUpETEVsQlFYSkNMRTlCUVhaQ08wRkJRMEVzVlVGQlMwTXNaVUZCVEN4SFFVRjFRaXhOUVVGTFFTeGxRVUZNTEVOQlFYRkNSQ3hKUVVGeVFpeFBRVUYyUWp0QlFXNUhXVHRCUVc5SFlqczdRVUZGUkRzN096czdPenM3T3pzN08wRkJWVUU3T3pzN096SkNRVXRQTzBGQlFVRTdPMEZCUTB3c09FaEJRV3RDTEZWQlFVTkZMRTlCUVVRc1JVRkJZVHRCUVVNM1FqdEJRVU5CUXl4blFrRkJVVU1zUjBGQlVpeERRVUZaTEVOQlFVTXNjMEpCUVZsRExHRkJRVm9zUTBGQk1FSXNZMEZCTVVJc1EwRkJSQ3hGUVVFMFF5eHpRa0ZCV1VFc1lVRkJXaXhEUVVFd1FpeGpRVUV4UWl4RFFVRTFReXhEUVVGYUxFVkJRMGRETEVsQlJFZ3NRMEZEVVN4VlFVRkRReXhQUVVGRUxFVkJRV0U3UVVGQlFTeDNRMEZEYjBKQkxFOUJSSEJDTzBGQlFVRXNZMEZEVmtNc1dVRkVWVHRCUVVGQkxHTkJRMGxETEZsQlJFbzdPMEZCUjJwQ0xHbENRVUZMYmtJc2JVSkJRVXdzUjBGQk1rSnJRaXhaUVVFelFqdEJRVU5CTEdsQ1FVRkxaQ3h0UWtGQlRDeEhRVUV5UW1Vc1dVRkJNMEk3UVVGRFFTeHBRa0ZCUzBNc1dVRkJUQ3hIUVVGdlFpeFBRVUZMY0VJc2JVSkJRVXdzUTBGQmVVSnhRaXhQUVVGNlFpeEpRVUZ2UXl4UFFVRkxha0lzYlVKQlFVd3NRMEZCZVVKcFFpeFBRVUZxUmpzN1FVRkZRU3hqUVVGSkxFOUJRVXR5UWl4dFFrRkJUQ3hEUVVGNVFuRkNMRTlCUVRkQ0xFVkJRMFVzVDBGQlMwTXNUVUZCVEN4SFFVRmpMRTlCUVV0MFFpeHRRa0ZCVEN4RFFVRjVRbk5DTEUxQlFYWkRMRU5CUkVZc1MwRkZTeXhKUVVGSkxFOUJRVXRzUWl4dFFrRkJUQ3hEUVVGNVFtbENMRTlCUVRkQ0xFVkJRMGdzVDBGQlMwTXNUVUZCVEN4SFFVRmpMRTlCUVV0c1FpeHRRa0ZCVEN4RFFVRjVRbXRDTEUxQlFYWkRPenRCUVVWR1ZqdEJRVU5FTEZOQlpFZzdRVUZsUkN4UFFXcENSRHRCUVd0Q1JEczdPMmREUVVWWFZ5eFJMRVZCUVZVN1FVRkRjRUlzVlVGQlNTeExRVUZMUXl4VFFVRk1MRU5CUVdWRExFbEJRV1lzUzBGQmQwSXNRMEZCTlVJc1JVRkJLMEk3UVVGRE4wSXNXVUZCU1N4TFFVRkxla0lzYlVKQlFVd3NRMEZCZVVKeFFpeFBRVUUzUWl4RlFVTkZMRXRCUVV0eVFpeHRRa0ZCVEN4RFFVRjVRakJDTEZkQlFYcENMRU5CUVhGRExFdEJRVXRxUWl4bFFVRXhRenRCUVVOR0xGbEJRVWtzUzBGQlMwd3NiVUpCUVV3c1EwRkJlVUpwUWl4UFFVRTNRaXhGUVVORkxFdEJRVXRxUWl4dFFrRkJUQ3hEUVVGNVFuTkNMRmRCUVhwQ0xFTkJRWEZETEV0QlFVdG1MR1ZCUVRGRE8wRkJRMGc3TzBGQlJVUXNPRWhCUVd0Q1dTeFJRVUZzUWp0QlFVTkVPenM3YlVOQlJXTkJMRkVzUlVGQlZUdEJRVU4yUWl4cFNVRkJjVUpCTEZGQlFYSkNPenRCUVVWQkxGVkJRVWtzUzBGQlMwTXNVMEZCVEN4RFFVRmxReXhKUVVGbUxFdEJRWGRDTEVOQlFUVkNMRVZCUVN0Q08wRkJRemRDTEZsQlFVa3NTMEZCUzNwQ0xHMUNRVUZNTEVOQlFYbENjVUlzVDBGQk4wSXNSVUZEUlN4TFFVRkxja0lzYlVKQlFVd3NRMEZCZVVJeVFpeGpRVUY2UWl4RFFVRjNReXhMUVVGTGJFSXNaVUZCTjBNN1FVRkRSaXhaUVVGSkxFdEJRVXRNTEcxQ1FVRk1MRU5CUVhsQ2FVSXNUMEZCTjBJc1JVRkRSU3hMUVVGTGFrSXNiVUpCUVV3c1EwRkJlVUoxUWl4alFVRjZRaXhEUVVGM1F5eExRVUZMYUVJc1pVRkJOME03UVVGRFNEdEJRVU5HT3p0QlFVVkVPenM3T3pzN096dHZRMEZMWjBKUExGa3NSVUZCWXp0QlFVTTFRaXhYUVVGTGFrSXNiVUpCUVV3c1IwRkJNa0pwUWl4WlFVRXpRanM3UVVGRlFUdEJRVU5CTEZWQlFVa3NRMEZCUXl4TFFVRkxaQ3h0UWtGQlRDeERRVUY1UW1sQ0xFOUJRVGxDTEVWQlEwVXNTMEZCUzA4c1owSkJRVXc3UVVGRFNEczdRVUZGUkRzN096czdPenM3YjBOQlMyZENWQ3haTEVWQlFXTTdRVUZETlVJc1YwRkJTMlFzYlVKQlFVd3NSMEZCTWtKakxGbEJRVE5DT3p0QlFVVkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEVzVjBGQlMxTXNaMEpCUVV3N1FVRkRSRHM3UVVGRlJEczdPenM3T3pzN096czdPenM3T3pzN096czdkVU5CYVVKdFFqdEJRVU5xUWl4VlFVRkpReXh4UWtGQmNVSXNRMEZCZWtJN1FVRkRRU3hWUVVGSlF5eHhRa0ZCY1VJc1EwRkJla0k3TzBGQlJVRTdRVUZEUVN4VlFVRkpMRXRCUVVzNVFpeHRRa0ZCVEN4RFFVRjVRbkZDTEU5QlFUZENMRVZCUVhORE8wRkJRM0JETEZsQlFVbFZMRXRCUVVzc1MwRkJTemxDTEcxQ1FVRk1MRU5CUVhsQ0xFTkJRWHBDTEVOQlFWUTdRVUZEUVN4WlFVRkpLMElzUzBGQlN5eExRVUZMTDBJc2JVSkJRVXdzUTBGQmVVSXNRMEZCZWtJc1EwRkJWRHRCUVVOQkxGbEJRVWxuUXl4TFFVRkxMRXRCUVV0b1F5eHRRa0ZCVEN4RFFVRjVRaXhEUVVGNlFpeERRVUZVTzBGQlEwRXNXVUZCU1dsRExIZENRVUYzUWtNc1MwRkJTME1zU1VGQlRDeERRVUZWVEN4TFFVRkxRU3hGUVVGTUxFZEJRVlZETEV0QlFVdEJMRVZCUVdZc1IwRkJiMEpETEV0QlFVdEJMRVZCUVc1RExFTkJRVFZDT3p0QlFVVkJPMEZCUTBFc1dVRkJTU3hMUVVGTEwwSXNaME5CUVV3c1IwRkJkME5uUXl4eFFrRkJOVU1zUlVGRFJTeExRVUZMYUVNc1owTkJRVXdzUjBGQmQwTnBReXhMUVVGTFJTeEhRVUZNTEVOQlFWTklMSEZDUVVGVUxFVkJRV2RETEV0QlFVc3ZRaXdyUWtGQmNrTXNRMEZCZUVNN1FVRkRSanRCUVVOQk96dEJRVVZCTUVJc05rSkJRWEZDVFN4TFFVRkxSU3hIUVVGTUxFTkJRVk5JTEhkQ1FVRjNRaXhMUVVGTGFFTXNaME5CUVhSRExFVkJRWGRGTEVOQlFYaEZMRU5CUVhKQ08wRkJRMFE3TzBGQlJVUTdRVUZEUVN4VlFVRkpMRXRCUVV0RkxHMUNRVUZNTEVOQlFYbENhVUlzVDBGQk4wSXNSVUZCYzBNN1FVRkRjRU1zV1VGQlNXbENMRXRCUVVzc1MwRkJTMnBETEcxQ1FVRk1MRU5CUVhsQ0xFTkJRWHBDTEVOQlFWUTdRVUZEUVN4WlFVRkphME1zUzBGQlN5eExRVUZMYkVNc2JVSkJRVXdzUTBGQmVVSXNRMEZCZWtJc1EwRkJWRHRCUVVOQkxGbEJRVWx0UXl4TFFVRkxMRXRCUVV0dVF5eHRRa0ZCVEN4RFFVRjVRaXhEUVVGNlFpeERRVUZVTzBGQlEwRXNXVUZCU1c5RExIZENRVUYzUWs0c1MwRkJTME1zU1VGQlRDeERRVUZWUlN4TFFVRkxRU3hGUVVGTUxFZEJRVlZETEV0QlFVdEJMRVZCUVdZc1IwRkJiMEpETEV0QlFVdEJMRVZCUVc1RExFTkJRVFZDT3p0QlFVVkJPMEZCUTBFc1dVRkJTU3hMUVVGTGJFTXNaME5CUVV3c1IwRkJkME50UXl4eFFrRkJOVU1zUlVGRFJTeExRVUZMYmtNc1owTkJRVXdzUjBGQmQwTTJRaXhMUVVGTFJTeEhRVUZNTEVOQlFWTkpMSEZDUVVGVUxFVkJRV2RETEV0QlFVdHNReXdyUWtGQmNrTXNRMEZCZUVNN08wRkJSVVoxUWl3MlFrRkJjVUpMTEV0QlFVdEZMRWRCUVV3c1EwRkJVMGtzZDBKQlFYZENMRXRCUVV0dVF5eG5RMEZCZEVNc1JVRkJkMFVzUTBGQmVFVXNRMEZCY2tJN1FVRkRSRHM3UVVGRlJDeFZRVUZKYjBNc1UwRkJVMUFzUzBGQlMxRXNSMEZCVEN4RFFVRlRaQ3hyUWtGQlZDeEZRVUUyUWtNc2EwSkJRVGRDTEVOQlFXSTdPMEZCUlVFN1FVRkRRU3hWUVVGTll5eEpRVUZKTEV0QlFVdERMRmxCUVdZN1FVRkRRU3hYUVVGTE9VTXNTMEZCVEN4SFFVRmhOa01zU1VGQlNTeExRVUZMTjBNc1MwRkJWQ3hIUVVGcFFpeERRVUZETEVsQlFVazJReXhEUVVGTUxFbEJRVlZHTEUxQlFYaERPenRCUVVWQk8wRkJRMEVzVjBGQlMwa3NTVUZCVEN4RFFVRlZMRXRCUVVzdlF5eExRVUZtTzBGQlEwUTdPenQzUWtFelNXdENPMEZCUTJwQ0xHRkJRVTl2UXl4TFFVRkxXU3hIUVVGTUxFTkJRVk1zUTBGQlF5eERRVUZFTEVkQlFVdGFMRXRCUVV0aExFVkJRVllzUjBGQlpTeExRVUZMTVVJc1RVRkJjRUlzUjBGQk5rSXNTMEZCUzJRc2JVSkJRVE5ETEVOQlFWQTdRVUZEUkRzN096czdPMnRDUVRSSldTeEpRVUZKVml4WlFVRktMRVVpTENKbWFXeGxJam9pUlc1bGNtZDVUVzlrZFd4bExtcHpJaXdpYzI5MWNtTmxjME52Ym5SbGJuUWlPbHNpYVcxd2IzSjBJRWx1Y0hWMFRXOWtkV3hsSUdaeWIyMGdKeTR2U1c1d2RYUk5iMlIxYkdVbk8xeHVhVzF3YjNKMElHMXZkR2x2YmtsdWNIVjBJR1p5YjIwZ0p5NHZUVzkwYVc5dVNXNXdkWFFuTzF4dVhHNHZLaXBjYmlBcUlFVnVaWEpuZVNCdGIyUjFiR1VnYzJsdVoyeGxkRzl1TGx4dUlDb2dWR2hsSUdWdVpYSm5lU0J0YjJSMWJHVWdjMmx1WjJ4bGRHOXVJSEJ5YjNacFpHVnpJR1Z1WlhKbmVTQjJZV3gxWlhNZ0tHSmxkSGRsWlc0Z01DQmhibVFnTVNsY2JpQXFJR0poYzJWa0lHOXVJSFJvWlNCaFkyTmxiR1Z5WVhScGIyNGdZVzVrSUhSb1pTQnliM1JoZEdsdmJpQnlZWFJsSUc5bUlIUm9aU0JrWlhacFkyVXVYRzRnS2lCVWFHVWdjR1Z5YVc5a0lHOW1JSFJvWlNCbGJtVnlaM2tnZG1Gc2RXVnpJR2x6SUhSb1pTQnpZVzFsSUdGeklIUm9aU0J3WlhKcGIyUWdiMllnZEdobFhHNGdLaUJoWTJObGJHVnlZWFJwYjI0Z1lXNWtJSFJvWlNCeWIzUmhkR2x2YmlCeVlYUmxJSFpoYkhWbGN5NWNiaUFxWEc0Z0tpQkFZMnhoYzNNZ1JXNWxjbWQ1VFc5a2RXeGxYRzRnS2lCQVpYaDBaVzVrY3lCSmJuQjFkRTF2WkhWc1pWeHVJQ292WEc1amJHRnpjeUJGYm1WeVozbE5iMlIxYkdVZ1pYaDBaVzVrY3lCSmJuQjFkRTF2WkhWc1pTQjdYRzVjYmlBZ0x5b3FYRzRnSUNBcUlFTnlaV0YwWlhNZ2RHaGxJR1Z1WlhKbmVTQnRiMlIxYkdVZ2FXNXpkR0Z1WTJVdVhHNGdJQ0FxWEc0Z0lDQXFJRUJqYjI1emRISjFZM1J2Y2x4dUlDQWdLaTljYmlBZ1kyOXVjM1J5ZFdOMGIzSW9LU0I3WEc0Z0lDQWdjM1Z3WlhJb0oyVnVaWEpuZVNjcE8xeHVYRzRnSUNBZ0x5b3FYRzRnSUNBZ0lDb2dSWFpsYm5RZ1kyOXVkR0ZwYm1sdVp5QjBhR1VnZG1Gc2RXVWdiMllnZEdobElHVnVaWEpuZVN3Z2MyVnVkQ0JpZVNCMGFHVWdaVzVsY21kNUlHMXZaSFZzWlM1Y2JpQWdJQ0FnS2x4dUlDQWdJQ0FxSUVCMGFHbHpJRVZ1WlhKbmVVMXZaSFZzWlZ4dUlDQWdJQ0FxSUVCMGVYQmxJSHR1ZFcxaVpYSjlYRzRnSUNBZ0lDb2dRR1JsWm1GMWJIUWdNRnh1SUNBZ0lDQXFMMXh1SUNBZ0lIUm9hWE11WlhabGJuUWdQU0F3TzF4dVhHNGdJQ0FnTHlvcVhHNGdJQ0FnSUNvZ1ZHaGxJR0ZqWTJWc1pYSmhkR2x2YmlCdGIyUjFiR1VzSUhWelpXUWdhVzRnZEdobElHTmhiR04xYkdGMGFXOXVJRzltSUhSb1pTQmxibVZ5WjNrdVhHNGdJQ0FnSUNwY2JpQWdJQ0FnS2lCQWRHaHBjeUJGYm1WeVozbE5iMlIxYkdWY2JpQWdJQ0FnS2lCQWRIbHdaU0I3UkU5TlJYWmxiblJUZFdKdGIyUjFiR1Y5WEc0Z0lDQWdJQ29nUUdSbFptRjFiSFFnYm5Wc2JGeHVJQ0FnSUNBcUlFQnpaV1VnUkdWMmFXTmxiVzkwYVc5dVRXOWtkV3hsWEc0Z0lDQWdJQ292WEc0Z0lDQWdkR2hwY3k1ZllXTmpaV3hsY21GMGFXOXVUVzlrZFd4bElEMGdiblZzYkR0Y2JseHVJQ0FnSUM4cUtseHVJQ0FnSUNBcUlFeGhkR1Z6ZENCaFkyTmxiR1Z5WVhScGIyNGdkbUZzZFdVZ2MyVnVkQ0JpZVNCMGFHVWdZV05qWld4bGNtRjBhVzl1SUcxdlpIVnNaUzVjYmlBZ0lDQWdLbHh1SUNBZ0lDQXFJRUIwYUdseklFVnVaWEpuZVUxdlpIVnNaVnh1SUNBZ0lDQXFJRUIwZVhCbElIdHVkVzFpWlhKYlhYMWNiaUFnSUNBZ0tpQkFaR1ZtWVhWc2RDQnVkV3hzWEc0Z0lDQWdJQ292WEc0Z0lDQWdkR2hwY3k1ZllXTmpaV3hsY21GMGFXOXVWbUZzZFdWeklEMGdiblZzYkR0Y2JseHVJQ0FnSUM4cUtseHVJQ0FnSUNBcUlFMWhlR2x0ZFcwZ2RtRnNkV1VnY21WaFkyaGxaQ0JpZVNCMGFHVWdZV05qWld4bGNtRjBhVzl1SUcxaFoyNXBkSFZrWlN3Z1kyeHBjSEJsWkNCaGRDQmdkR2hwY3k1ZllXTmpaV3hsY21GMGFXOXVUV0ZuYm1sMGRXUmxWR2h5WlhOb2IyeGtZQzVjYmlBZ0lDQWdLbHh1SUNBZ0lDQXFJRUIwYUdseklFVnVaWEpuZVUxdlpIVnNaVnh1SUNBZ0lDQXFJRUIwZVhCbElIdHVkVzFpWlhKOVhHNGdJQ0FnSUNvZ1FHUmxabUYxYkhRZ09TNDRNVnh1SUNBZ0lDQXFMMXh1SUNBZ0lIUm9hWE11WDJGalkyVnNaWEpoZEdsdmJrMWhaMjVwZEhWa1pVTjFjbkpsYm5STllYZ2dQU0F4SUNvZ09TNDRNVHRjYmx4dUlDQWdJQzhxS2x4dUlDQWdJQ0FxSUVOc2FYQndhVzVuSUhaaGJIVmxJRzltSUhSb1pTQmhZMk5sYkdWeVlYUnBiMjRnYldGbmJtbDBkV1JsTGx4dUlDQWdJQ0FxWEc0Z0lDQWdJQ29nUUhSb2FYTWdSVzVsY21kNVRXOWtkV3hsWEc0Z0lDQWdJQ29nUUhSNWNHVWdlMjUxYldKbGNuMWNiaUFnSUNBZ0tpQkFaR1ZtWVhWc2RDQXlNRnh1SUNBZ0lDQXFJRUJqYjI1emRHRnVkRnh1SUNBZ0lDQXFMMXh1SUNBZ0lIUm9hWE11WDJGalkyVnNaWEpoZEdsdmJrMWhaMjVwZEhWa1pWUm9jbVZ6YUc5c1pDQTlJRFFnS2lBNUxqZ3hPMXh1WEc0Z0lDQWdMeW9xWEc0Z0lDQWdJQ29nVkdobElISnZkR0YwYVc5dUlISmhkR1VnYlc5a2RXeGxMQ0IxYzJWa0lHbHVJSFJvWlNCallXeGpkV3hoZEdsdmJpQnZaaUIwYUdVZ1pXNWxjbWQ1TGx4dUlDQWdJQ0FxWEc0Z0lDQWdJQ29nUUhSb2FYTWdSVzVsY21kNVRXOWtkV3hsWEc0Z0lDQWdJQ29nUUhSNWNHVWdlMFJQVFVWMlpXNTBVM1ZpYlc5a2RXeGxmVnh1SUNBZ0lDQXFJRUJrWldaaGRXeDBJRzUxYkd4Y2JpQWdJQ0FnS2lCQWMyVmxJRVJsZG1salpXMXZkR2x2YmsxdlpIVnNaVnh1SUNBZ0lDQXFMMXh1SUNBZ0lIUm9hWE11WDNKdmRHRjBhVzl1VW1GMFpVMXZaSFZzWlNBOUlHNTFiR3c3WEc1Y2JpQWdJQ0F2S2lwY2JpQWdJQ0FnS2lCTVlYUmxjM1FnY205MFlYUnBiMjRnY21GMFpTQjJZV3gxWlNCelpXNTBJR0o1SUhSb1pTQnliM1JoZEdsdmJpQnlZWFJsSUcxdlpIVnNaUzVjYmlBZ0lDQWdLbHh1SUNBZ0lDQXFJRUIwYUdseklFVnVaWEpuZVUxdlpIVnNaVnh1SUNBZ0lDQXFJRUIwZVhCbElIdHVkVzFpWlhKYlhYMWNiaUFnSUNBZ0tpQkFaR1ZtWVhWc2RDQnVkV3hzWEc0Z0lDQWdJQ292WEc0Z0lDQWdkR2hwY3k1ZmNtOTBZWFJwYjI1U1lYUmxWbUZzZFdWeklEMGdiblZzYkR0Y2JseHVJQ0FnSUM4cUtseHVJQ0FnSUNBcUlFMWhlR2x0ZFcwZ2RtRnNkV1VnY21WaFkyaGxaQ0JpZVNCMGFHVWdjbTkwWVhScGIyNGdjbUYwWlNCdFlXZHVhWFIxWkdVc0lHTnNhWEJ3WldRZ1lYUWdZSFJvYVhNdVgzSnZkR0YwYVc5dVVtRjBaVTFoWjI1cGRIVmtaVlJvY21WemFHOXNaR0F1WEc0Z0lDQWdJQ3BjYmlBZ0lDQWdLaUJBZEdocGN5QkZibVZ5WjNsTmIyUjFiR1ZjYmlBZ0lDQWdLaUJBZEhsd1pTQjdiblZ0WW1WeWZWeHVJQ0FnSUNBcUlFQmtaV1poZFd4MElEUXdNRnh1SUNBZ0lDQXFMMXh1SUNBZ0lIUm9hWE11WDNKdmRHRjBhVzl1VW1GMFpVMWhaMjVwZEhWa1pVTjFjbkpsYm5STllYZ2dQU0EwTURBN1hHNWNiaUFnSUNBdktpcGNiaUFnSUNBZ0tpQkRiR2x3Y0dsdVp5QjJZV3gxWlNCdlppQjBhR1VnY205MFlYUnBiMjRnY21GMFpTQnRZV2R1YVhSMVpHVXVYRzRnSUNBZ0lDcGNiaUFnSUNBZ0tpQkFkR2hwY3lCRmJtVnlaM2xOYjJSMWJHVmNiaUFnSUNBZ0tpQkFkSGx3WlNCN2JuVnRZbVZ5ZlZ4dUlDQWdJQ0FxSUVCa1pXWmhkV3gwSURZd01GeHVJQ0FnSUNBcUlFQmpiMjV6ZEdGdWRGeHVJQ0FnSUNBcUwxeHVJQ0FnSUhSb2FYTXVYM0p2ZEdGMGFXOXVVbUYwWlUxaFoyNXBkSFZrWlZSb2NtVnphRzlzWkNBOUlEWXdNRHRjYmx4dUlDQWdJQzhxS2x4dUlDQWdJQ0FxSUZScGJXVWdZMjl1YzNSaGJuUWdLR2hoYkdZdGJHbG1aU2tnYjJZZ2RHaGxJR3h2ZHkxd1lYTnpJR1pwYkhSbGNpQjFjMlZrSUhSdklITnRiMjkwYUNCMGFHVWdaVzVsY21kNUlIWmhiSFZsY3lBb2FXNGdjMlZqYjI1a2N5a3VYRzRnSUNBZ0lDcGNiaUFnSUNBZ0tpQkFkR2hwY3lCRmJtVnlaM2xOYjJSMWJHVmNiaUFnSUNBZ0tpQkFkSGx3WlNCN2JuVnRZbVZ5ZlZ4dUlDQWdJQ0FxSUVCa1pXWmhkV3gwSURBdU1WeHVJQ0FnSUNBcUlFQmpiMjV6ZEdGdWRGeHVJQ0FnSUNBcUwxeHVJQ0FnSUhSb2FYTXVYMlZ1WlhKbmVWUnBiV1ZEYjI1emRHRnVkQ0E5SURBdU1UdGNibHh1SUNBZ0lIUm9hWE11WDI5dVFXTmpaV3hsY21GMGFXOXVJRDBnZEdocGN5NWZiMjVCWTJObGJHVnlZWFJwYjI0dVltbHVaQ2gwYUdsektUdGNiaUFnSUNCMGFHbHpMbDl2YmxKdmRHRjBhVzl1VW1GMFpTQTlJSFJvYVhNdVgyOXVVbTkwWVhScGIyNVNZWFJsTG1KcGJtUW9kR2hwY3lrN1hHNGdJSDFjYmx4dUlDQXZLaXBjYmlBZ0lDb2dSR1ZqWVhrZ1ptRmpkRzl5SUc5bUlIUm9aU0JzYjNjdGNHRnpjeUJtYVd4MFpYSWdkWE5sWkNCMGJ5QnpiVzl2ZEdnZ2RHaGxJR1Z1WlhKbmVTQjJZV3gxWlhNdVhHNGdJQ0FxWEc0Z0lDQXFJRUIwZVhCbElIdHVkVzFpWlhKOVhHNGdJQ0FxSUVCeVpXRmtiMjVzZVZ4dUlDQWdLaTljYmlBZ1oyVjBJRjlsYm1WeVozbEVaV05oZVNncElIdGNiaUFnSUNCeVpYUjFjbTRnVFdGMGFDNWxlSEFvTFRJZ0tpQk5ZWFJvTGxCSklDb2dkR2hwY3k1d1pYSnBiMlFnTHlCMGFHbHpMbDlsYm1WeVozbFVhVzFsUTI5dWMzUmhiblFwTzF4dUlDQjlYRzVjYmlBZ0x5b3FYRzRnSUNBcUlFbHVhWFJwWVd4cGVtVnpJRzltSUhSb1pTQnRiMlIxYkdVdVhHNGdJQ0FxWEc0Z0lDQXFJRUJ5WlhSMWNtNGdlMUJ5YjIxcGMyVjlYRzRnSUNBcUwxeHVJQ0JwYm1sMEtDa2dlMXh1SUNBZ0lISmxkSFZ5YmlCemRYQmxjaTVwYm1sMEtDaHlaWE52YkhabEtTQTlQaUI3WEc0Z0lDQWdJQ0F2THlCVWFHVWdaVzVsY21kNUlHMXZaSFZzWlNCeVpYRjFhWEpsY3lCMGFHVWdZV05qWld4bGNtRjBhVzl1SUdGdVpDQjBhR1VnY205MFlYUnBiMjRnY21GMFpTQnRiMlIxYkdWelhHNGdJQ0FnSUNCUWNtOXRhWE5sTG1Gc2JDaGJiVzkwYVc5dVNXNXdkWFF1Y21WeGRXbHlaVTF2WkhWc1pTZ25ZV05qWld4bGNtRjBhVzl1Snlrc0lHMXZkR2x2YmtsdWNIVjBMbkpsY1hWcGNtVk5iMlIxYkdVb0ozSnZkR0YwYVc5dVVtRjBaU2NwWFNsY2JpQWdJQ0FnSUNBZ0xuUm9aVzRvS0cxdlpIVnNaWE1wSUQwK0lIdGNiaUFnSUNBZ0lDQWdJQ0JqYjI1emRDQmJZV05qWld4bGNtRjBhVzl1TENCeWIzUmhkR2x2YmxKaGRHVmRJRDBnYlc5a2RXeGxjenRjYmx4dUlDQWdJQ0FnSUNBZ0lIUm9hWE11WDJGalkyVnNaWEpoZEdsdmJrMXZaSFZzWlNBOUlHRmpZMlZzWlhKaGRHbHZianRjYmlBZ0lDQWdJQ0FnSUNCMGFHbHpMbDl5YjNSaGRHbHZibEpoZEdWTmIyUjFiR1VnUFNCeWIzUmhkR2x2YmxKaGRHVTdYRzRnSUNBZ0lDQWdJQ0FnZEdocGN5NXBjME5oYkdOMWJHRjBaV1FnUFNCMGFHbHpMbDloWTJObGJHVnlZWFJwYjI1TmIyUjFiR1V1YVhOV1lXeHBaQ0I4ZkNCMGFHbHpMbDl5YjNSaGRHbHZibEpoZEdWTmIyUjFiR1V1YVhOV1lXeHBaRHRjYmx4dUlDQWdJQ0FnSUNBZ0lHbG1JQ2gwYUdsekxsOWhZMk5sYkdWeVlYUnBiMjVOYjJSMWJHVXVhWE5XWVd4cFpDbGNiaUFnSUNBZ0lDQWdJQ0FnSUhSb2FYTXVjR1Z5YVc5a0lEMGdkR2hwY3k1ZllXTmpaV3hsY21GMGFXOXVUVzlrZFd4bExuQmxjbWx2WkR0Y2JpQWdJQ0FnSUNBZ0lDQmxiSE5sSUdsbUlDaDBhR2x6TGw5eWIzUmhkR2x2YmxKaGRHVk5iMlIxYkdVdWFYTldZV3hwWkNsY2JpQWdJQ0FnSUNBZ0lDQWdJSFJvYVhNdWNHVnlhVzlrSUQwZ2RHaHBjeTVmY205MFlYUnBiMjVTWVhSbFRXOWtkV3hsTG5CbGNtbHZaRHRjYmx4dUlDQWdJQ0FnSUNBZ0lISmxjMjlzZG1Vb2RHaHBjeWs3WEc0Z0lDQWdJQ0FnSUgwcE8xeHVJQ0FnSUgwcE8xeHVJQ0I5WEc1Y2JpQWdZV1JrVEdsemRHVnVaWElvYkdsemRHVnVaWElwSUh0Y2JpQWdJQ0JwWmlBb2RHaHBjeTVzYVhOMFpXNWxjbk11YzJsNlpTQTlQVDBnTUNrZ2UxeHVJQ0FnSUNBZ2FXWWdLSFJvYVhNdVgyRmpZMlZzWlhKaGRHbHZiazF2WkhWc1pTNXBjMVpoYkdsa0tWeHVJQ0FnSUNBZ0lDQjBhR2x6TGw5aFkyTmxiR1Z5WVhScGIyNU5iMlIxYkdVdVlXUmtUR2x6ZEdWdVpYSW9kR2hwY3k1ZmIyNUJZMk5sYkdWeVlYUnBiMjRwTzF4dUlDQWdJQ0FnYVdZZ0tIUm9hWE11WDNKdmRHRjBhVzl1VW1GMFpVMXZaSFZzWlM1cGMxWmhiR2xrS1Z4dUlDQWdJQ0FnSUNCMGFHbHpMbDl5YjNSaGRHbHZibEpoZEdWTmIyUjFiR1V1WVdSa1RHbHpkR1Z1WlhJb2RHaHBjeTVmYjI1U2IzUmhkR2x2YmxKaGRHVXBPMXh1SUNBZ0lIMWNibHh1SUNBZ0lITjFjR1Z5TG1Ga1pFeHBjM1JsYm1WeUtHeHBjM1JsYm1WeUtUdGNiaUFnZlZ4dVhHNGdJSEpsYlc5MlpVeHBjM1JsYm1WeUtHeHBjM1JsYm1WeUtTQjdYRzRnSUNBZ2MzVndaWEl1Y21WdGIzWmxUR2x6ZEdWdVpYSW9iR2x6ZEdWdVpYSXBPMXh1WEc0Z0lDQWdhV1lnS0hSb2FYTXViR2x6ZEdWdVpYSnpMbk5wZW1VZ1BUMDlJREFwSUh0Y2JpQWdJQ0FnSUdsbUlDaDBhR2x6TGw5aFkyTmxiR1Z5WVhScGIyNU5iMlIxYkdVdWFYTldZV3hwWkNsY2JpQWdJQ0FnSUNBZ2RHaHBjeTVmWVdOalpXeGxjbUYwYVc5dVRXOWtkV3hsTG5KbGJXOTJaVXhwYzNSbGJtVnlLSFJvYVhNdVgyOXVRV05qWld4bGNtRjBhVzl1S1R0Y2JpQWdJQ0FnSUdsbUlDaDBhR2x6TGw5eWIzUmhkR2x2YmxKaGRHVk5iMlIxYkdVdWFYTldZV3hwWkNsY2JpQWdJQ0FnSUNBZ2RHaHBjeTVmY205MFlYUnBiMjVTWVhSbFRXOWtkV3hsTG5KbGJXOTJaVXhwYzNSbGJtVnlLSFJvYVhNdVgyOXVVbTkwWVhScGIyNVNZWFJsS1R0Y2JpQWdJQ0I5WEc0Z0lIMWNibHh1SUNBdktpcGNiaUFnSUNvZ1FXTmpaV3hsY21GMGFXOXVJSFpoYkhWbGN5Qm9ZVzVrYkdWeUxseHVJQ0FnS2x4dUlDQWdLaUJBY0dGeVlXMGdlMjUxYldKbGNsdGRmU0JoWTJObGJHVnlZWFJwYjI0Z0xTQk1ZWFJsYzNRZ1lXTmpaV3hsY21GMGFXOXVJSFpoYkhWbExseHVJQ0FnS2k5Y2JpQWdYMjl1UVdOalpXeGxjbUYwYVc5dUtHRmpZMlZzWlhKaGRHbHZiaWtnZTF4dUlDQWdJSFJvYVhNdVgyRmpZMlZzWlhKaGRHbHZibFpoYkhWbGN5QTlJR0ZqWTJWc1pYSmhkR2x2Ymp0Y2JseHVJQ0FnSUM4dklFbG1JSFJvWlNCeWIzUmhkR2x2YmlCeVlYUmxJSFpoYkhWbGN5QmhjbVVnYm05MElHRjJZV2xzWVdKc1pTd2dkMlVnWTJGc1kzVnNZWFJsSUhSb1pTQmxibVZ5WjNrZ2NtbG5hSFFnWVhkaGVTNWNiaUFnSUNCcFppQW9JWFJvYVhNdVgzSnZkR0YwYVc5dVVtRjBaVTF2WkhWc1pTNXBjMVpoYkdsa0tWeHVJQ0FnSUNBZ2RHaHBjeTVmWTJGc1kzVnNZWFJsUlc1bGNtZDVLQ2s3WEc0Z0lIMWNibHh1SUNBdktpcGNiaUFnSUNvZ1VtOTBZWFJwYjI0Z2NtRjBaU0IyWVd4MVpYTWdhR0Z1Wkd4bGNpNWNiaUFnSUNwY2JpQWdJQ29nUUhCaGNtRnRJSHR1ZFcxaVpYSmJYWDBnY205MFlYUnBiMjVTWVhSbElDMGdUR0YwWlhOMElISnZkR0YwYVc5dUlISmhkR1VnZG1Gc2RXVXVYRzRnSUNBcUwxeHVJQ0JmYjI1U2IzUmhkR2x2YmxKaGRHVW9jbTkwWVhScGIyNVNZWFJsS1NCN1hHNGdJQ0FnZEdocGN5NWZjbTkwWVhScGIyNVNZWFJsVm1Gc2RXVnpJRDBnY205MFlYUnBiMjVTWVhSbE8xeHVYRzRnSUNBZ0x5OGdWMlVnYTI1dmR5QjBhR0YwSUhSb1pTQmhZMk5sYkdWeVlYUnBiMjRnWVc1a0lISnZkR0YwYVc5dUlISmhkR1VnZG1Gc2RXVnpJR052YldsdVp5Qm1jbTl0SUhSb1pWeHVJQ0FnSUM4dklITmhiV1VnWUdSbGRtbGpaVzF2ZEdsdmJtQWdaWFpsYm5RZ1lYSmxJSE5sYm5RZ2FXNGdkR2hoZENCdmNtUmxjaUFvWVdOalpXeGxjbUYwYVc5dUlENGdjbTkwWVhScGIyNGdjbUYwWlNsY2JpQWdJQ0F2THlCemJ5QjNhR1Z1SUhSb1pTQnliM1JoZEdsdmJpQnlZWFJsSUdseklIQnliM1pwWkdWa0xDQjNaU0JqWVd4amRXeGhkR1VnZEdobElHVnVaWEpuZVNCMllXeDFaU0J2WmlCMGFHVmNiaUFnSUNBdkx5QnNZWFJsYzNRZ1lHUmxkbWxqWlcxdmRHbHZibUFnWlhabGJuUWdkMmhsYmlCM1pTQnlaV05sYVhabElIUm9aU0J5YjNSaGRHbHZiaUJ5WVhSbElIWmhiSFZsY3k1Y2JpQWdJQ0IwYUdsekxsOWpZV3hqZFd4aGRHVkZibVZ5WjNrb0tUdGNiaUFnZlZ4dVhHNGdJQzhxS2x4dUlDQWdLaUJGYm1WeVoza2dZMkZzWTNWc1lYUnBiMjQ2SUdWdGFYUnpJR0Z1SUdWdVpYSm5lU0IyWVd4MVpTQmlaWFIzWldWdUlEQWdZVzVrSURFdVhHNGdJQ0FxWEc0Z0lDQXFJRlJvYVhNZ2JXVjBhRzlrSUdOb1pXTnJjeUJwWmlCMGFHVWdZV05qWld4bGNtRjBhVzl1SUcxdlpIVnNaWE1nYVhNZ2RtRnNhV1F1SUVsbUlIUm9ZWFFnYVhNZ2RHaGxJR05oYzJVc1hHNGdJQ0FxSUdsMElHTmhiR04xYkdGMFpYTWdZVzRnWlhOMGFXMWhkR2x2YmlCdlppQjBhR1VnWlc1bGNtZDVJQ2hpWlhSM1pXVnVJREFnWVc1a0lERXBJR0poYzJWa0lHOXVJSFJvWlNCeVlYUnBiMXh1SUNBZ0tpQnZaaUIwYUdVZ1kzVnljbVZ1ZENCaFkyTmxiR1Z5WVhScGIyNGdiV0ZuYm1sMGRXUmxJR0Z1WkNCMGFHVWdiV0Y0YVcxMWJTQmhZMk5sYkdWeVlYUnBiMjRnYldGbmJtbDBkV1JsWEc0Z0lDQXFJSEpsWVdOb1pXUWdjMjhnWm1GeUlDaGpiR2x3Y0dWa0lHRjBJSFJvWlNCZ2RHaHBjeTVmWVdOalpXeGxjbUYwYVc5dVRXRm5ibWwwZFdSbFZHaHlaWE5vYjJ4a1lDQjJZV3gxWlNrdVhHNGdJQ0FxSUNoWFpTQjFjMlVnZEdocGN5QjBjbWxqYXlCMGJ5Qm5aWFFnZFc1cFptOXliU0JpWldoaGRtbHZjbk1nWVcxdmJtY2daR1YyYVdObGN5NGdTV1lnZDJVZ1kyRnNZM1ZzWVhSbFpGeHVJQ0FnS2lCMGFHVWdjbUYwYVc4Z1ltRnpaV1FnYjI0Z1lTQm1hWGhsWkNCMllXeDFaU0JwYm1SbGNHVnVaR1Z1ZENCdlppQjNhR0YwSUhSb1pTQmtaWFpwWTJVZ2FYTWdZMkZ3WVdKc1pTQnZabHh1SUNBZ0tpQndjbTkyYVdScGJtY3NJSGRsSUdOdmRXeGtJR2RsZENCcGJtTnZibk5wYzNSbGJuUWdZbVZvWVhacGIzSnpMaUJHYjNJZ2FXNXpkR0Z1WTJVc0lIUm9aU0JrWlhacFkyVnpYRzRnSUNBcUlIZG9iM05sSUdGalkyVnNaWEp2YldWMFpYSnpJR0Z5WlNCc2FXMXBkR1ZrSUdGMElESm5JSGR2ZFd4a0lHRnNkMkY1Y3lCd2NtOTJhV1JsSUhabGNua2diRzkzSUhaaGJIVmxjMXh1SUNBZ0tpQmpiMjF3WVhKbFpDQjBieUJrWlhacFkyVnpJSGRwZEdnZ1lXTmpaV3hsY205dFpYUmxjbk1nWTJGd1lXSnNaU0J2WmlCdFpXRnpkWEpwYm1jZ05HY2dZV05qWld4bGNtRjBhVzl1Y3k0cFhHNGdJQ0FxSUZSb1pTQnpZVzFsSUdOb1pXTnJjeUJoYm1RZ1kyRnNZM1ZzWVhScGIyNXpJR0Z5WlNCdFlXUmxJRzl1SUhSb1pTQnliM1JoZEdsdmJpQnlZWFJsSUcxdlpIVnNaUzVjYmlBZ0lDb2dSbWx1WVd4c2VTd2dkR2hsSUdWdVpYSm5lU0IyWVd4MVpTQnBjeUIwYUdVZ2JXRjRhVzExYlNCaVpYUjNaV1Z1SUhSb1pTQmxibVZ5WjNrZ2RtRnNkV1VnWlhOMGFXMWhkR1ZrWEc0Z0lDQXFJR1p5YjIwZ2RHaGxJR0ZqWTJWc1pYSmhkR2x2Yml3Z1lXNWtJSFJvWlNCdmJtVWdaWE4wYVcxaGRHVmtJR1p5YjIwZ2RHaGxJSEp2ZEdGMGFXOXVJSEpoZEdVdUlFbDBJR2x6WEc0Z0lDQXFJSE50YjI5MGFHVmtJSFJvY205MVoyZ2dZU0JzYjNjdGNHRnpjeUJtYVd4MFpYSXVYRzRnSUNBcUwxeHVJQ0JmWTJGc1kzVnNZWFJsUlc1bGNtZDVLQ2tnZTF4dUlDQWdJR3hsZENCaFkyTmxiR1Z5WVhScGIyNUZibVZ5WjNrZ1BTQXdPMXh1SUNBZ0lHeGxkQ0J5YjNSaGRHbHZibEpoZEdWRmJtVnlaM2tnUFNBd08xeHVYRzRnSUNBZ0x5OGdRMmhsWTJzZ2RHaGxJR0ZqWTJWc1pYSmhkR2x2YmlCdGIyUjFiR1VnWVc1a0lHTmhiR04xYkdGMFpTQmhiaUJsYzNScGJXRjBhVzl1SUc5bUlIUm9aU0JsYm1WeVoza2dkbUZzZFdVZ1puSnZiU0IwYUdVZ2JHRjBaWE4wSUdGalkyVnNaWEpoZEdsdmJpQjJZV3gxWlZ4dUlDQWdJR2xtSUNoMGFHbHpMbDloWTJObGJHVnlZWFJwYjI1TmIyUjFiR1V1YVhOV1lXeHBaQ2tnZTF4dUlDQWdJQ0FnYkdWMElHRllJRDBnZEdocGN5NWZZV05qWld4bGNtRjBhVzl1Vm1Gc2RXVnpXekJkTzF4dUlDQWdJQ0FnYkdWMElHRlpJRDBnZEdocGN5NWZZV05qWld4bGNtRjBhVzl1Vm1Gc2RXVnpXekZkTzF4dUlDQWdJQ0FnYkdWMElHRmFJRDBnZEdocGN5NWZZV05qWld4bGNtRjBhVzl1Vm1Gc2RXVnpXekpkTzF4dUlDQWdJQ0FnYkdWMElHRmpZMlZzWlhKaGRHbHZiazFoWjI1cGRIVmtaU0E5SUUxaGRHZ3VjM0Z5ZENoaFdDQXFJR0ZZSUNzZ1lWa2dLaUJoV1NBcklHRmFJQ29nWVZvcE8xeHVYRzRnSUNBZ0lDQXZMeUJUZEc5eVpTQjBhR1VnYldGNGFXMTFiU0JoWTJObGJHVnlZWFJwYjI0Z2JXRm5ibWwwZFdSbElISmxZV05vWldRZ2MyOGdabUZ5TENCamJHbHdjR1ZrSUdGMElHQjBhR2x6TGw5aFkyTmxiR1Z5WVhScGIyNU5ZV2R1YVhSMVpHVlVhSEpsYzJodmJHUmdYRzRnSUNBZ0lDQnBaaUFvZEdocGN5NWZZV05qWld4bGNtRjBhVzl1VFdGbmJtbDBkV1JsUTNWeWNtVnVkRTFoZUNBOElHRmpZMlZzWlhKaGRHbHZiazFoWjI1cGRIVmtaU2xjYmlBZ0lDQWdJQ0FnZEdocGN5NWZZV05qWld4bGNtRjBhVzl1VFdGbmJtbDBkV1JsUTNWeWNtVnVkRTFoZUNBOUlFMWhkR2d1YldsdUtHRmpZMlZzWlhKaGRHbHZiazFoWjI1cGRIVmtaU3dnZEdocGN5NWZZV05qWld4bGNtRjBhVzl1VFdGbmJtbDBkV1JsVkdoeVpYTm9iMnhrS1R0Y2JpQWdJQ0FnSUM4dklGUlBSRThvUHlrNklISmxiVzkyWlNCdmRXeHBaWEp6SUMwdExTQnZiaUJ6YjIxbElFRnVaSEp2YVdRZ1pHVjJhV05sY3l3Z2RHaGxJRzFoWjI1cGRIVmtaU0JwY3lCMlpYSjVJR2hwWjJnZ2IyNGdZU0JtWlhjZ2FYTnZiR0YwWldRZ1pHRjBZWEJ2YVc1MGN5eGNiaUFnSUNBZ0lDOHZJSGRvYVdOb0lHMWhhMlVnZEdobElIUm9jbVZ6YUc5c1pDQjJaWEo1SUdocFoyZ2dZWE1nZDJWc2JDQTlQaUIwYUdVZ1pXNWxjbWQ1SUhKbGJXRnBibk1nWVhKdmRXNWtJREF1TlN3Z1pYWmxiaUIzYUdWdUlIbHZkU0J6YUdGclpTQjJaWEo1SUdoaGNtUXVYRzVjYmlBZ0lDQWdJR0ZqWTJWc1pYSmhkR2x2YmtWdVpYSm5lU0E5SUUxaGRHZ3ViV2x1S0dGalkyVnNaWEpoZEdsdmJrMWhaMjVwZEhWa1pTQXZJSFJvYVhNdVgyRmpZMlZzWlhKaGRHbHZiazFoWjI1cGRIVmtaVU4xY25KbGJuUk5ZWGdzSURFcE8xeHVJQ0FnSUgxY2JseHVJQ0FnSUM4dklFTm9aV05ySUhSb1pTQnliM1JoZEdsdmJpQnlZWFJsSUcxdlpIVnNaU0JoYm1RZ1kyRnNZM1ZzWVhSbElHRnVJR1Z6ZEdsdFlYUnBiMjRnYjJZZ2RHaGxJR1Z1WlhKbmVTQjJZV3gxWlNCbWNtOXRJSFJvWlNCc1lYUmxjM1FnY205MFlYUnBiMjRnY21GMFpTQjJZV3gxWlZ4dUlDQWdJR2xtSUNoMGFHbHpMbDl5YjNSaGRHbHZibEpoZEdWTmIyUjFiR1V1YVhOV1lXeHBaQ2tnZTF4dUlDQWdJQ0FnYkdWMElISkJJRDBnZEdocGN5NWZjbTkwWVhScGIyNVNZWFJsVm1Gc2RXVnpXekJkTzF4dUlDQWdJQ0FnYkdWMElISkNJRDBnZEdocGN5NWZjbTkwWVhScGIyNVNZWFJsVm1Gc2RXVnpXekZkTzF4dUlDQWdJQ0FnYkdWMElISkhJRDBnZEdocGN5NWZjbTkwWVhScGIyNVNZWFJsVm1Gc2RXVnpXekpkTzF4dUlDQWdJQ0FnYkdWMElISnZkR0YwYVc5dVVtRjBaVTFoWjI1cGRIVmtaU0E5SUUxaGRHZ3VjM0Z5ZENoeVFTQXFJSEpCSUNzZ2NrSWdLaUJ5UWlBcklISkhJQ29nY2tjcE8xeHVYRzRnSUNBZ0lDQXZMeUJUZEc5eVpTQjBhR1VnYldGNGFXMTFiU0J5YjNSaGRHbHZiaUJ5WVhSbElHMWhaMjVwZEhWa1pTQnlaV0ZqYUdWa0lITnZJR1poY2l3Z1kyeHBjSEJsWkNCaGRDQmdkR2hwY3k1ZmNtOTBZWFJwYjI1U1lYUmxUV0ZuYm1sMGRXUmxWR2h5WlhOb2IyeGtZRnh1SUNBZ0lDQWdhV1lnS0hSb2FYTXVYM0p2ZEdGMGFXOXVVbUYwWlUxaFoyNXBkSFZrWlVOMWNuSmxiblJOWVhnZ1BDQnliM1JoZEdsdmJsSmhkR1ZOWVdkdWFYUjFaR1VwWEc0Z0lDQWdJQ0FnSUhSb2FYTXVYM0p2ZEdGMGFXOXVVbUYwWlUxaFoyNXBkSFZrWlVOMWNuSmxiblJOWVhnZ1BTQk5ZWFJvTG0xcGJpaHliM1JoZEdsdmJsSmhkR1ZOWVdkdWFYUjFaR1VzSUhSb2FYTXVYM0p2ZEdGMGFXOXVVbUYwWlUxaFoyNXBkSFZrWlZSb2NtVnphRzlzWkNrN1hHNWNiaUFnSUNBZ0lISnZkR0YwYVc5dVVtRjBaVVZ1WlhKbmVTQTlJRTFoZEdndWJXbHVLSEp2ZEdGMGFXOXVVbUYwWlUxaFoyNXBkSFZrWlNBdklIUm9hWE11WDNKdmRHRjBhVzl1VW1GMFpVMWhaMjVwZEhWa1pVTjFjbkpsYm5STllYZ3NJREVwTzF4dUlDQWdJSDFjYmx4dUlDQWdJR3hsZENCbGJtVnlaM2tnUFNCTllYUm9MbTFoZUNoaFkyTmxiR1Z5WVhScGIyNUZibVZ5WjNrc0lISnZkR0YwYVc5dVVtRjBaVVZ1WlhKbmVTazdYRzVjYmlBZ0lDQXZMeUJNYjNjdGNHRnpjeUJtYVd4MFpYSWdkRzhnYzIxdmIzUm9JSFJvWlNCbGJtVnlaM2tnZG1Gc2RXVnpYRzRnSUNBZ1kyOXVjM1FnYXlBOUlIUm9hWE11WDJWdVpYSm5lVVJsWTJGNU8xeHVJQ0FnSUhSb2FYTXVaWFpsYm5RZ1BTQnJJQ29nZEdocGN5NWxkbVZ1ZENBcklDZ3hJQzBnYXlrZ0tpQmxibVZ5WjNrN1hHNWNiaUFnSUNBdkx5QkZiV2wwSUhSb1pTQmxibVZ5WjNrZ2RtRnNkV1ZjYmlBZ0lDQjBhR2x6TG1WdGFYUW9kR2hwY3k1bGRtVnVkQ2s3WEc0Z0lIMWNibjFjYmx4dVpYaHdiM0owSUdSbFptRjFiSFFnYm1WM0lFVnVaWEpuZVUxdlpIVnNaU2dwTzF4dUlsMTkiLCIndXNlIHN0cmljdCc7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5cbnZhciBfTW90aW9uSW5wdXQgPSByZXF1aXJlKCcuL01vdGlvbklucHV0Jyk7XG5cbnZhciBfTW90aW9uSW5wdXQyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfTW90aW9uSW5wdXQpO1xuXG52YXIgX0RldmljZU9yaWVudGF0aW9uTW9kdWxlID0gcmVxdWlyZSgnLi9EZXZpY2VPcmllbnRhdGlvbk1vZHVsZScpO1xuXG52YXIgX0RldmljZU9yaWVudGF0aW9uTW9kdWxlMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX0RldmljZU9yaWVudGF0aW9uTW9kdWxlKTtcblxudmFyIF9EZXZpY2VNb3Rpb25Nb2R1bGUgPSByZXF1aXJlKCcuL0RldmljZU1vdGlvbk1vZHVsZScpO1xuXG52YXIgX0RldmljZU1vdGlvbk1vZHVsZTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9EZXZpY2VNb3Rpb25Nb2R1bGUpO1xuXG52YXIgX0VuZXJneU1vZHVsZSA9IHJlcXVpcmUoJy4vRW5lcmd5TW9kdWxlJyk7XG5cbnZhciBfRW5lcmd5TW9kdWxlMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX0VuZXJneU1vZHVsZSk7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cbi8qKlxuICogVGhlIG1vdGlvbiBpbnB1dCBtb2R1bGUgY2FuIGJlIHVzZWQgYXMgZm9sbG93c1xuICpcbiAqIEBleGFtcGxlXG4gKiBpbXBvcnQgbW90aW9uSW5wdXQgZnJvbSAnbW90aW9uLWlucHV0JztcbiAqIGNvbnN0IHJlcXVpcmVkRXZlbnRzID0gO1xuICpcbiAqIG1vdGlvbklucHV0XG4gKiAgLmluaXQoWydhY2NlbGVyYXRpb24nLCAnb3JpZW50YXRpb24nLCAnZW5lcmd5J10pXG4gKiAgLnRoZW4oKFthY2NlbGVyYXRpb24sIG9yaWVudGF0aW9uLCBlbmVyZ3ldKSA9PiB7XG4gKiAgICBpZiAoYWNjZWxlcmF0aW9uLmlzVmFsaWQpIHtcbiAqICAgICAgYWNjZWxlcmF0aW9uLmFkZExpc3RlbmVyKChkYXRhKSA9PiB7XG4gKiAgICAgICAgY29uc29sZS5sb2coJ2FjY2VsZXJhdGlvbicsIGRhdGEpO1xuICogICAgICAgIC8vIGRvIHNvbWV0aGluZyB3aXRoIHRoZSBhY2NlbGVyYXRpb24gdmFsdWVzXG4gKiAgICAgIH0pO1xuICogICAgfVxuICpcbiAqICAgIC8vIC4uLlxuICogIH0pO1xuICovXG5fTW90aW9uSW5wdXQyLmRlZmF1bHQuYWRkTW9kdWxlKCdkZXZpY2Vtb3Rpb24nLCBfRGV2aWNlTW90aW9uTW9kdWxlMi5kZWZhdWx0KTtcbl9Nb3Rpb25JbnB1dDIuZGVmYXVsdC5hZGRNb2R1bGUoJ2RldmljZW9yaWVudGF0aW9uJywgX0RldmljZU9yaWVudGF0aW9uTW9kdWxlMi5kZWZhdWx0KTtcbl9Nb3Rpb25JbnB1dDIuZGVmYXVsdC5hZGRNb2R1bGUoJ2FjY2VsZXJhdGlvbkluY2x1ZGluZ0dyYXZpdHknLCBfRGV2aWNlTW90aW9uTW9kdWxlMi5kZWZhdWx0LmFjY2VsZXJhdGlvbkluY2x1ZGluZ0dyYXZpdHkpO1xuX01vdGlvbklucHV0Mi5kZWZhdWx0LmFkZE1vZHVsZSgnYWNjZWxlcmF0aW9uJywgX0RldmljZU1vdGlvbk1vZHVsZTIuZGVmYXVsdC5hY2NlbGVyYXRpb24pO1xuX01vdGlvbklucHV0Mi5kZWZhdWx0LmFkZE1vZHVsZSgncm90YXRpb25SYXRlJywgX0RldmljZU1vdGlvbk1vZHVsZTIuZGVmYXVsdC5yb3RhdGlvblJhdGUpO1xuX01vdGlvbklucHV0Mi5kZWZhdWx0LmFkZE1vZHVsZSgnb3JpZW50YXRpb24nLCBfRGV2aWNlT3JpZW50YXRpb25Nb2R1bGUyLmRlZmF1bHQub3JpZW50YXRpb24pO1xuX01vdGlvbklucHV0Mi5kZWZhdWx0LmFkZE1vZHVsZSgnb3JpZW50YXRpb25BbHQnLCBfRGV2aWNlT3JpZW50YXRpb25Nb2R1bGUyLmRlZmF1bHQub3JpZW50YXRpb25BbHQpO1xuX01vdGlvbklucHV0Mi5kZWZhdWx0LmFkZE1vZHVsZSgnZW5lcmd5JywgX0VuZXJneU1vZHVsZTIuZGVmYXVsdCk7XG5cbmV4cG9ydHMuZGVmYXVsdCA9IF9Nb3Rpb25JbnB1dDIuZGVmYXVsdDtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtjaGFyc2V0PXV0Zi04O2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZ6SWpwYkltbHVaR1Y0TG1weklsMHNJbTVoYldWeklqcGJJbUZrWkUxdlpIVnNaU0lzSW1GalkyVnNaWEpoZEdsdmJrbHVZMngxWkdsdVowZHlZWFpwZEhraUxDSmhZMk5sYkdWeVlYUnBiMjRpTENKeWIzUmhkR2x2YmxKaGRHVWlMQ0p2Y21sbGJuUmhkR2x2YmlJc0ltOXlhV1Z1ZEdGMGFXOXVRV3gwSWwwc0ltMWhjSEJwYm1keklqb2lPenM3T3pzN1FVRnZRa0U3T3pzN1FVRkRRVHM3T3p0QlFVTkJPenM3TzBGQlEwRTdPenM3T3p0QlFYWkNRVHM3T3pzN096czdPenM3T3pzN096czdPenM3UVVGNVFrRXNjMEpCUVZsQkxGTkJRVm9zUTBGQmMwSXNZMEZCZEVJN1FVRkRRU3h6UWtGQldVRXNVMEZCV2l4RFFVRnpRaXh0UWtGQmRFSTdRVUZEUVN4elFrRkJXVUVzVTBGQldpeERRVUZ6UWl3NFFrRkJkRUlzUlVGQmMwUXNOa0pCUVcxQ1F5dzBRa0ZCZWtVN1FVRkRRU3h6UWtGQldVUXNVMEZCV2l4RFFVRnpRaXhqUVVGMFFpeEZRVUZ6UXl3MlFrRkJiVUpGTEZsQlFYcEVPMEZCUTBFc2MwSkJRVmxHTEZOQlFWb3NRMEZCYzBJc1kwRkJkRUlzUlVGQmMwTXNOa0pCUVcxQ1J5eFpRVUY2UkR0QlFVTkJMSE5DUVVGWlNDeFRRVUZhTEVOQlFYTkNMR0ZCUVhSQ0xFVkJRWEZETEd0RFFVRjNRa2tzVjBGQk4wUTdRVUZEUVN4elFrRkJXVW9zVTBGQldpeERRVUZ6UWl4blFrRkJkRUlzUlVGQmQwTXNhME5CUVhkQ1N5eGpRVUZvUlR0QlFVTkJMSE5DUVVGWlRDeFRRVUZhTEVOQlFYTkNMRkZCUVhSQ0lpd2labWxzWlNJNkltbHVaR1Y0TG1weklpd2ljMjkxY21ObGMwTnZiblJsYm5RaU9sc2lMeW9xWEc0Z0tpQlVhR1VnYlc5MGFXOXVJR2x1Y0hWMElHMXZaSFZzWlNCallXNGdZbVVnZFhObFpDQmhjeUJtYjJ4c2IzZHpYRzRnS2x4dUlDb2dRR1Y0WVcxd2JHVmNiaUFxSUdsdGNHOXlkQ0J0YjNScGIyNUpibkIxZENCbWNtOXRJQ2R0YjNScGIyNHRhVzV3ZFhRbk8xeHVJQ29nWTI5dWMzUWdjbVZ4ZFdseVpXUkZkbVZ1ZEhNZ1BTQTdYRzRnS2x4dUlDb2diVzkwYVc5dVNXNXdkWFJjYmlBcUlDQXVhVzVwZENoYkoyRmpZMlZzWlhKaGRHbHZiaWNzSUNkdmNtbGxiblJoZEdsdmJpY3NJQ2RsYm1WeVoza25YU2xjYmlBcUlDQXVkR2hsYmlnb1cyRmpZMlZzWlhKaGRHbHZiaXdnYjNKcFpXNTBZWFJwYjI0c0lHVnVaWEpuZVYwcElEMCtJSHRjYmlBcUlDQWdJR2xtSUNoaFkyTmxiR1Z5WVhScGIyNHVhWE5XWVd4cFpDa2dlMXh1SUNvZ0lDQWdJQ0JoWTJObGJHVnlZWFJwYjI0dVlXUmtUR2x6ZEdWdVpYSW9LR1JoZEdFcElEMCtJSHRjYmlBcUlDQWdJQ0FnSUNCamIyNXpiMnhsTG14dlp5Z25ZV05qWld4bGNtRjBhVzl1Snl3Z1pHRjBZU2s3WEc0Z0tpQWdJQ0FnSUNBZ0x5OGdaRzhnYzI5dFpYUm9hVzVuSUhkcGRHZ2dkR2hsSUdGalkyVnNaWEpoZEdsdmJpQjJZV3gxWlhOY2JpQXFJQ0FnSUNBZ2ZTazdYRzRnS2lBZ0lDQjlYRzRnS2x4dUlDb2dJQ0FnTHk4Z0xpNHVYRzRnS2lBZ2ZTazdYRzRnS2k5Y2JtbHRjRzl5ZENCdGIzUnBiMjVKYm5CMWRDQm1jbTl0SUNjdUwwMXZkR2x2YmtsdWNIVjBKenRjYm1sdGNHOXlkQ0JrWlhacFkyVnZjbWxsYm5SaGRHbHZiazF2WkhWc1pTQm1jbTl0SUNjdUwwUmxkbWxqWlU5eWFXVnVkR0YwYVc5dVRXOWtkV3hsSnp0Y2JtbHRjRzl5ZENCa1pYWnBZMlZ0YjNScGIyNU5iMlIxYkdVZ1puSnZiU0FuTGk5RVpYWnBZMlZOYjNScGIyNU5iMlIxYkdVbk8xeHVhVzF3YjNKMElHVnVaWEpuZVNCbWNtOXRJQ2N1TDBWdVpYSm5lVTF2WkhWc1pTYzdYRzVjYm0xdmRHbHZia2x1Y0hWMExtRmtaRTF2WkhWc1pTZ25aR1YyYVdObGJXOTBhVzl1Snl3Z1pHVjJhV05sYlc5MGFXOXVUVzlrZFd4bEtUdGNibTF2ZEdsdmJrbHVjSFYwTG1Ga1pFMXZaSFZzWlNnblpHVjJhV05sYjNKcFpXNTBZWFJwYjI0bkxDQmtaWFpwWTJWdmNtbGxiblJoZEdsdmJrMXZaSFZzWlNrN1hHNXRiM1JwYjI1SmJuQjFkQzVoWkdSTmIyUjFiR1VvSjJGalkyVnNaWEpoZEdsdmJrbHVZMngxWkdsdVowZHlZWFpwZEhrbkxDQmtaWFpwWTJWdGIzUnBiMjVOYjJSMWJHVXVZV05qWld4bGNtRjBhVzl1U1c1amJIVmthVzVuUjNKaGRtbDBlU2s3WEc1dGIzUnBiMjVKYm5CMWRDNWhaR1JOYjJSMWJHVW9KMkZqWTJWc1pYSmhkR2x2Ymljc0lHUmxkbWxqWlcxdmRHbHZiazF2WkhWc1pTNWhZMk5sYkdWeVlYUnBiMjRwTzF4dWJXOTBhVzl1U1c1d2RYUXVZV1JrVFc5a2RXeGxLQ2R5YjNSaGRHbHZibEpoZEdVbkxDQmtaWFpwWTJWdGIzUnBiMjVOYjJSMWJHVXVjbTkwWVhScGIyNVNZWFJsS1R0Y2JtMXZkR2x2YmtsdWNIVjBMbUZrWkUxdlpIVnNaU2duYjNKcFpXNTBZWFJwYjI0bkxDQmtaWFpwWTJWdmNtbGxiblJoZEdsdmJrMXZaSFZzWlM1dmNtbGxiblJoZEdsdmJpazdYRzV0YjNScGIyNUpibkIxZEM1aFpHUk5iMlIxYkdVb0oyOXlhV1Z1ZEdGMGFXOXVRV3gwSnl3Z1pHVjJhV05sYjNKcFpXNTBZWFJwYjI1TmIyUjFiR1V1YjNKcFpXNTBZWFJwYjI1QmJIUXBPMXh1Ylc5MGFXOXVTVzV3ZFhRdVlXUmtUVzlrZFd4bEtDZGxibVZ5WjNrbkxDQmxibVZ5WjNrcE8xeHVYRzVsZUhCdmNuUWdaR1ZtWVhWc2RDQnRiM1JwYjI1SmJuQjFkRHRjYmlKZGZRPT0iLCJpbXBvcnQgeyBkZWZhdWx0IGFzIGF1ZGlvIH0gZnJvbSAnd2F2ZXMtYXVkaW8nO1xuaW1wb3J0IG1vdGlvbklucHV0IGZyb20gJ21vdGlvbi1pbnB1dCc7XG5cbmNvbnN0IGF1ZGlvQ29udGV4dCA9IGF1ZGlvLmF1ZGlvQ29udGV4dDtcblxuZnVuY3Rpb24gc2V0dXBPdmVybGF5KGlkLCBoYXNCdXR0b24gPSB0cnVlLCBjYWxsYmFjayA9IG51bGwpIHtcbiAgY29uc3Qgb3ZlcmxheSA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKGAke2lkfS1vdmVybGF5YCk7XG4gIG92ZXJsYXkuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCAoKSA9PiB7XG4gICAgaWYgKGNhbGxiYWNrKVxuICAgICAgY2FsbGJhY2soKTtcbiAgICBlbHNlXG4gICAgICBvdmVybGF5LmNsYXNzTGlzdC5yZW1vdmUoJ29wZW4nKTtcbiAgfSk7XG5cbiAgaWYgKGhhc0J1dHRvbikge1xuICAgIGNvbnN0IGJ1dHRvbiA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKGAke2lkfS1idXR0b25gKTtcbiAgICBidXR0b24uYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCAoKSA9PiBvdmVybGF5LmNsYXNzTGlzdC5hZGQoJ29wZW4nKSk7XG4gIH0gZWxzZSB7XG4gICAgb3ZlcmxheS5jbGFzc0xpc3QuYWRkKCdvcGVuJyk7XG4gIH1cblxuICByZXR1cm4gb3ZlcmxheTtcbn1cblxuZnVuY3Rpb24gc2V0dXBNb3Rpb25JbnB1dChtb2R1bGVOYW1lKSB7XG4gIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgY29uc3QgdGltZW91dCA9IHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgcmVqZWN0KCdjYW5ub3QgZmluZCBhbnkgbW90aW9uIHNlbnNvcnMnKTtcbiAgICB9LCA1MDApXG5cbiAgICBjb25zdCBpbml0TW90aW9uSW5wdXQgPSAoKSA9PiB7XG4gICAgICBtb3Rpb25JbnB1dC5pbml0KG1vZHVsZU5hbWUpXG4gICAgICAgIC50aGVuKChtb2R1bGVzKSA9PiB7XG4gICAgICAgICAgY29uc3QgW21vdGlvbk1vZHVsZV0gPSBtb2R1bGVzO1xuXG4gICAgICAgICAgY2xlYXJUaW1lb3V0KHRpbWVvdXQpO1xuXG4gICAgICAgICAgaWYgKG1vdGlvbk1vZHVsZSAmJiBtb3Rpb25Nb2R1bGUuaXNWYWxpZClcbiAgICAgICAgICAgIHJlc29sdmUobW90aW9uTW9kdWxlKTtcbiAgICAgICAgICBlbHNlXG4gICAgICAgICAgICByZWplY3QoJ2Nhbm5vdCBnZXQgcmVxdWVzdGVkIG1vdGlvbiBzZW5zb3Igc3RyZWFtJyk7XG4gICAgICAgIH0pO1xuICAgIH07XG5cbiAgICBpZiAodHlwZW9mIERldmljZU1vdGlvbkV2ZW50ICE9PSAndW5kZWZpbmVkJyAmJiB0eXBlb2YgRGV2aWNlTW90aW9uRXZlbnQucmVxdWVzdFBlcm1pc3Npb24gPT09ICdmdW5jdGlvbicpIHtcbiAgICAgIGNsZWFyVGltZW91dCh0aW1lb3V0KTtcblxuICAgICAgRGV2aWNlTW90aW9uRXZlbnQucmVxdWVzdFBlcm1pc3Npb24oKVxuICAgICAgICAudGhlbihmdW5jdGlvbihwZXJtaXNzaW9uU3RhdGUpIHtcbiAgICAgICAgICBpZiAocGVybWlzc2lvblN0YXRlID09PSAnZ3JhbnRlZCcpIHtcbiAgICAgICAgICAgIGluaXRNb3Rpb25JbnB1dCgpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBjbGVhclRpbWVvdXQodGltZW91dCk7XG4gICAgICAgICAgICByZWplY3QoJ2FjY2VzcyB0byBtb3Rpb24gc2Vuc29ycyBkZW5pZWQnKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0pLmNhdGNoKChlKSA9PiByZWplY3QoJ2Nhbm5vdCBhY2Nlc3MgbW90aW9uIHNlbnNvcnMnKSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGluaXRNb3Rpb25JbnB1dCgpO1xuICAgIH1cbiAgfSk7XG59XG5cbmZ1bmN0aW9uIHNldHVwQXVkaW9JbnB1dCgpIHtcbiAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICBpZiAobmF2aWdhdG9yLm1lZGlhRGV2aWNlcykge1xuICAgICAgbmF2aWdhdG9yLm1lZGlhRGV2aWNlcy5nZXRVc2VyTWVkaWEoeyBhdWRpbzogdHJ1ZSB9KVxuICAgICAgICAudGhlbigoc3RyZWFtKSA9PiB7XG4gICAgICAgICAgcmVzb2x2ZShzdHJlYW0pO1xuICAgICAgICB9KVxuICAgICAgICAuY2F0Y2goKGUpID0+IHJlamVjdCgnY2Fubm90IGFjY2VzcyBhdWRpbyBpbnB1dCcpKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmVqZWN0KCdjYW5ub3QgZmluZCBhdWRpbyBpbnB1dCcpO1xuICAgIH1cbiAgfSk7XG59XG5cblxuZnVuY3Rpb24gcmVzdW1lQXVkaW9Db250ZXh0KCkge1xuICBpZiAoYXVkaW9Db250ZXh0KSB7XG4gICAgaWYgKGF1ZGlvQ29udGV4dC5zdGF0ZSA9PT0gJ3N1c3BlbmRlZCcpIHtcbiAgICAgIHJldHVybiBhdWRpb0NvbnRleHQucmVzdW1lKCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUoKTtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIFByb21pc2UucmVqZWN0KCdhdWRpbyB1bmF2YWlsYWJsZScpO1xuICB9XG59XG5cbmV4cG9ydCB7IHNldHVwT3ZlcmxheSwgc2V0dXBNb3Rpb25JbnB1dCwgc2V0dXBBdWRpb0lucHV0LCByZXN1bWVBdWRpb0NvbnRleHQgfTtcbiIsImV4cG9ydCBkZWZhdWx0IFt7XG4gIGlkOiBbXG4gICAgMjczMC4wMDAsXG4gICAgMjI3NS4wMDAsXG4gIF0sXG4gIHJlOiBbXG4gICAgMjEwLjAwMCxcbiAgICAyMTIuMzE3LFxuICAgIDIxMi41NjMsXG4gICAgMjEyLjgwOSxcbiAgXSxcbn0sIHtcbiAgaWQ6IFtcbiAgICA1NjE2LjAwMCxcbiAgICA0NjgwLjAwMCxcbiAgXSxcbiAgcmU6IFtcbiAgICA0MzIuMDAwLFxuICAgIDQzNy4yNzIsXG4gICAgNDM3Ljc3OCxcbiAgICA0MzguMDMxLFxuICBdLFxufSwge1xuICBpZDogW1xuICAgIDg1MjguMDAwLFxuICAgIDcxMDYuNjY3LFxuICBdLFxuICByZTogW1xuICAgIDY1Ni4wMDAsXG4gICAgNjYzLjIzOSxcbiAgICA2NjQuMDA2LFxuICAgIDY2NC43NzMsXG4gIF0sXG59LCB7XG4gIGlkOiBbXG4gICAgMTE0NDAuMDAwLFxuICAgIDk1MzMuMzMzLFxuICBdLFxuICByZTogW1xuICAgIDg4MC4wMDAsXG4gICAgODkwLjczOSxcbiAgICA4OTEuNzY5LFxuICAgIDg5Mi4yODQsXG4gIF0sXG59LCB7XG4gIGlkOiBbXG4gICAgNDA5NS4wMDAsXG4gICAgMzQxMi41MDAsXG4gIF0sXG4gIHJlOiBbXG4gICAgMzE1LjAwMCxcbiAgICAzMTguNDc2LFxuICAgIDMxOC44NDQsXG4gICAgMzE5LjIxMyxcbiAgXSxcbn0sIHtcbiAgaWQ6IFtcbiAgICA4NDI0LjAwMCxcbiAgICA3MDIwLjAwMCxcbiAgXSxcbiAgcmU6IFtcbiAgICA2NDguMDAwLFxuICAgIDY1NS45MDgsXG4gICAgNjU2LjY2NixcbiAgICA2NTcuMDQ2LFxuICBdLFxufSwge1xuICBpZDogW1xuICAgIDEyNzkyLjAwMCxcbiAgICAxMDY2MC4wMDAsXG4gIF0sXG4gIHJlOiBbXG4gICAgOTg0LjAwMCxcbiAgICA5OTQuODU5LFxuICAgIDk5Ni4wMDksXG4gICAgOTk3LjE2MCxcbiAgXSxcbn0sIHtcbiAgaWQ6IFtcbiAgICAxNzE2MC4wMDAsXG4gICAgMTQzMDAuMDAwLFxuICBdLFxuICByZTogW1xuICAgIDEzMjAuMDAwLFxuICAgIDEzMzYuMTA5LFxuICAgIDEzMzcuNjU0LFxuICAgIDEzMzguNDI3LFxuICBdLFxufSwge1xuICBpZDogW1xuICAgIDM0MTIuNTAwLFxuICAgIDI4NDMuNzUwLFxuICBdLFxuICByZTogW1xuICAgIDI2Mi41MDAsXG4gICAgMjY1LjM5NyxcbiAgICAyNjUuNzA0LFxuICAgIDI2Ni4wMTEsXG4gIF0sXG59LCB7XG4gIGlkOiBbXG4gICAgNzAyMC4wMDAsXG4gICAgNTg1MC4wMDAsXG4gIF0sXG4gIHJlOiBbXG4gICAgNTQwLjAwMCxcbiAgICA1NDYuNTkwLFxuICAgIDU0Ny4yMjIsXG4gICAgNTQ3LjUzOCxcbiAgXSxcbn0sIHtcbiAgaWQ6IFtcbiAgICAxMDY2MC4wMDAsXG4gICAgODg4My4zMzMsXG4gIF0sXG4gIHJlOiBbXG4gICAgODIwLjAwMCxcbiAgICA4MjkuMDQ5LFxuICAgIDgzMC4wMDcsXG4gICAgODMwLjk2NyxcbiAgXSxcbn0sIHtcbiAgaWQ6IFtcbiAgICAxNDMwMC4wMDAsXG4gICAgMTE5MTYuNjY3LFxuICBdLFxuICByZTogW1xuICAgIDExMDAuMDAwLFxuICAgIDExMTMuNDI0LFxuICAgIDExMTQuNzExLFxuICAgIDExMTUuMzU1LFxuICBdLFxufV07XG4iLCJpbXBvcnQgJ0BiYWJlbC9wb2x5ZmlsbCc7XG5pbXBvcnQgeyBkZWZhdWx0IGFzIGF1ZGlvIH0gZnJvbSAnd2F2ZXMtYXVkaW8nO1xuaW1wb3J0IE1vYmlsZURldGVjdCBmcm9tICdtb2JpbGUtZGV0ZWN0JztcbmltcG9ydCBTZWxlY3RvckJ1dHRvbnMgZnJvbSAnLi91dGlscy9TZWxlY3RvckJ1dHRvbnMnO1xuaW1wb3J0IFRvbmVTeW50aCBmcm9tICcuL3V0aWxzL1RvbmVTeW50aCc7XG5pbXBvcnQgUHVsc2VTeW50aCBmcm9tICcuL3V0aWxzL1B1bHNlU3ludGgnO1xuaW1wb3J0IFNwZWN0cnVtQW5hbHlzZXIgZnJvbSAnLi91dGlscy9TcGVjdHJ1bUFuYWx5c2VyJztcbmltcG9ydCB7IHNldHVwT3ZlcmxheSwgcmVzdW1lQXVkaW9Db250ZXh0LCBzZXR1cEF1ZGlvSW5wdXQgfSBmcm9tICcuL3V0aWxzL2hlbHBlcnMnO1xuaW1wb3J0IHsgZGVmYXVsdCBhcyBzZXR1cCB9IGZyb20gJy4vc2V0dXAnO1xuXG5sZXQgb3MgPSBudWxsO1xubGV0IHJ1bm5pbmdPbk1vYmlsZSA9IHRydWU7XG5cbmxldCBzZWxlY3RvckJ1dHRvbnMgPSBudWxsO1xubGV0IGluaXRpYWxpemVkQXVkaW9JbnB1dCA9IGZhbHNlO1xubGV0IHdlbGNvbWVPdmVybGF5ID0gbnVsbDtcbmxldCBlcnJvck92ZXJsYXkgPSBudWxsO1xubGV0IGN1cnJlbnRJbmRleCA9IC0xO1xubGV0IGN1cnJlbnRJZEZyZXFzID0gbnVsbDtcblxuY29uc3QgYXVkaW9Db250ZXh0ID0gYXVkaW8uYXVkaW9Db250ZXh0O1xubGV0IHN0cmVhbSA9IG51bGw7XG5sZXQgaWRTeW50aCA9IG51bGw7XG5sZXQgcmVTeW50aCA9IG51bGw7XG5sZXQgYW5hbHlzZXIgPSBudWxsO1xuY29uc3QgYW5hbHlzZXJNaW4gPSAtMTIwO1xuY29uc3QgYW5hbHlzZXJNYXggPSAxMjtcbmNvbnN0IGFuYWx5c2VyU2NhbGUgPSAxIC8gKGFuYWx5c2VyTWF4IC0gYW5hbHlzZXJNaW4pO1xuXG5sZXQgY2FudmFzQ29udGFpbmVyID0gbnVsbDtcbmxldCBjYW52YXMgPSBudWxsO1xubGV0IHJlbmRlcmVyID0gbnVsbDtcblxuY29uc3QgZmZ0U2l6ZSA9IDIwNDg7XG5cbmxldCBpZEZyZXFzID0gW107XG5cbmZvciAobGV0IHMgb2Ygc2V0dXApIHtcbiAgZm9yIChsZXQgZnJlcSBvZiBzLmlkKVxuICAgIGlkRnJlcXMucHVzaChmcmVxKTtcbn1cblxuaWRGcmVxcy5zb3J0KChhLCBiKSA9PiBhIC0gYik7XG5cbmNvbnNvbGUubG9nKGlkRnJlcXMpO1xuXG5mdW5jdGlvbiBsaW5lYXJUb0RlY2liZWwodmFsKSB7XG4gIHJldHVybiA4LjY4NTg4OTYzODA2NTAzNSAqIE1hdGgubG9nKHZhbCk7IC8vIDIwICogbG9nMTAodmFsKVxufTtcblxuZnVuY3Rpb24gZGVjaWJlbFRvTGluZWFyKHZhbCkge1xuICByZXR1cm4gTWF0aC5leHAoMC4xMTUxMjkyNTQ2NDk3MDIyOSAqIHZhbCk7IC8vIHBvdygxMCwgdmFsIC8gMjApXG59O1xuXG5mdW5jdGlvbiBwb3dlclRvRGVjaWJlbCh2YWwpIHtcbiAgcmV0dXJuIDQuMzQyOTQ0ODE5MDMyNTE3NSAqIE1hdGgubG9nKHZhbCk7IC8vIDEwICogbG9nMTAodmFsKVxufTtcblxuZnVuY3Rpb24gZGVjaWJlbFRvUG93ZXIodmFsKSB7XG4gIHJldHVybiBNYXRoLmV4cCgwLjIzMDI1ODUwOTI5OTQwNDU4ICogdmFsKTsgLy8gcG93KDEwLCB2YWwgLyAxMClcbn07XG5cbmZ1bmN0aW9uIGluaXRBdWRpb0lucHV0KCkge1xuICBQcm9taXNlLmFsbChbcmVzdW1lQXVkaW9Db250ZXh0KCksIHNldHVwQXVkaW9JbnB1dCgpXSlcbiAgICAudGhlbigoW3VuZGVmaW5lZCwgc3RyZWFtXSkgPT4ge1xuICAgICAgYW5hbHlzZXIgPSBuZXcgU3BlY3RydW1BbmFseXNlcihmZnRTaXplLCBpZEZyZXFzLCAwLjIsIHVwZGF0ZVNwZWN0cnVtKTtcbiAgICAgIGFuYWx5c2VyLnN0YXJ0KCk7XG5cbiAgICAgIGNvbnN0IG1lZGlhU3RyZWFtU291cmNlID0gYXVkaW9Db250ZXh0LmNyZWF0ZU1lZGlhU3RyZWFtU291cmNlKHN0cmVhbSk7XG4gICAgICBtZWRpYVN0cmVhbVNvdXJjZS5jb25uZWN0KGFuYWx5c2VyLmlucHV0KTtcblxuICAgICAgd2VsY29tZU92ZXJsYXkuY2xhc3NMaXN0LnJlbW92ZSgnb3BlbicpOyAgICAgIFxuICAgIH0pXG4gICAgLmNhdGNoKChlcnIpID0+IHtcbiAgICAgIC8vIGlkU3ludGguc3RvcCgpO1xuICAgICAgLy8gcmVTeW50aC5zdG9wKCk7XG4gICAgICAvLyBzZWxlY3RvckJ1dHRvbnMuZGVzZWxlY3QoKTtcblxuICAgICAgZXJyb3JPdmVybGF5LmlubmVySFRNTCA9IGBPb3BzLCAke2Vycn0gKCR7ZXJyLnN0YWNrfSkuYDtcbiAgICAgIGVycm9yT3ZlcmxheS5jbGFzc0xpc3QuYWRkKCdvcGVuJyk7XG4gICAgfSk7XG59XG5cbmZ1bmN0aW9uIG9uU3RhcnQoaW5kZXgpIHtcbiAgaWYgKGluZGV4ICE9PSBjdXJyZW50SW5kZXgpIHtcbiAgICBvblN0b3AoY3VycmVudEluZGV4KTtcblxuICAgIC8vIGlmICghaW5pdGlhbGl6ZWRBdWRpb0lucHV0KSB7XG4gICAgLy8gICBpbml0aWFsaXplZEF1ZGlvSW5wdXQgPSB0cnVlO1xuICAgIC8vICAgaW5pdEF1ZGlvSW5wdXQoaW5kZXgpO1xuICAgIC8vIH1cblxuICAgIGNvbnN0IGN1cnJlbnRTZXQgPSBzZXR1cFtpbmRleF1cblxuICAgIGlkU3ludGguc3RhcnQoY3VycmVudFNldC5pZCwgMC4xKTtcbiAgICByZVN5bnRoLnN0YXJ0KGN1cnJlbnRTZXQucmUsIDApO1xuXG4gICAgY3VycmVudEluZGV4ID0gaW5kZXg7XG4gICAgY3VycmVudElkRnJlcXMgPSBjdXJyZW50U2V0LmlkO1xuICB9XG59XG5cbmZ1bmN0aW9uIG9uU3RvcChpbmRleCkge1xuICBpZFN5bnRoLnN0b3AoKTtcbiAgcmVTeW50aC5zdG9wKCk7XG5cbiAgY3VycmVudEluZGV4ID0gLTE7XG4gIGN1cnJlbnRJZEZyZXFzID0gbnVsbDtcbn1cblxuZnVuY3Rpb24gZGlzcGxheVNwZWN0cnVtKGFycmF5KSB7XG4gIGNvbnN0IGN0eCA9IGNhbnZhcy5nZXRDb250ZXh0KCcyZCcpO1xuICBjb25zdCB3aWR0aCA9IGFycmF5Lmxlbmd0aDtcbiAgY29uc3QgaGVpZ2h0ID0gY2FudmFzLmhlaWdodDtcblxuICBjYW52YXMud2lkdGggPSB3aWR0aDtcblxuICBjdHguc3Ryb2tlU3R5bGUgPSAnI2ZmZic7XG4gIGN0eC5saW5lV2lkdGggPSAxO1xuICBjdHguZ2xvYmFsQWxwaGEgPSAxO1xuXG4gIGN0eC5jbGVhclJlY3QoMCwgMCwgd2lkdGgsIGhlaWdodCk7XG5cbiAgZm9yIChsZXQgaSA9IDA7IGkgPCB3aWR0aDsgaSsrKSB7XG4gICAgY29uc3QgeSA9IGFuYWx5c2VyU2NhbGUgKiAoYXJyYXlbaV0gLSBhbmFseXNlck1pbik7XG5cbiAgICBjdHguYmVnaW5QYXRoKCk7XG4gICAgY3R4Lm1vdmVUbyhpLCBjYW52YXMuaGVpZ2h0KTtcbiAgICBjdHgubGluZVRvKGksIGNhbnZhcy5oZWlnaHQgKiAoMSAtIHkpKTtcbiAgICBjdHguc3Ryb2tlKCk7XG4gIH1cbn1cblxuZnVuY3Rpb24gZGlzcGxheVBlYWtzKHBlYWtzKSB7XG4gIGNvbnN0IGN0eCA9IGNhbnZhcy5nZXRDb250ZXh0KCcyZCcpO1xuXG4gIGN0eC5saW5lV2lkdGggPSAxO1xuICBjdHguZ2xvYmFsQWxwaGEgPSAxO1xuXG4gIGZvciAobGV0IHBlYWsgb2YgcGVha3MpIHtcbiAgICBjb25zdCBmcmVxID0gcGVhay5mcmVxO1xuXG4gICAgaWYgKCFjdXJyZW50SWRGcmVxcyB8fCAoZnJlcSAhPT0gY3VycmVudElkRnJlcXNbMF0gJiYgZnJlcSAhPT0gY3VycmVudElkRnJlcXNbMV0pKVxuICAgICAgY3R4LnN0cm9rZVN0eWxlID0gJyNmMDAnO1xuICAgIGVsc2VcbiAgICAgIGN0eC5zdHJva2VTdHlsZSA9ICcjMGYwJztcblxuICAgIGNvbnN0IHggPSBwZWFrLmJpbjtcbiAgICBjb25zdCB5ID0gYW5hbHlzZXJTY2FsZSAqIChwZWFrLmxldmVsIC0gYW5hbHlzZXJNaW4pO1xuXG4gICAgY3R4LmJlZ2luUGF0aCgpO1xuICAgIGN0eC5tb3ZlVG8oeCwgY2FudmFzLmhlaWdodCk7XG4gICAgY3R4LmxpbmVUbyh4LCBjYW52YXMuaGVpZ2h0ICogKDEgLSB5KSk7XG4gICAgY3R4LnN0cm9rZSgpO1xuICB9XG59XG5cbmZ1bmN0aW9uIHVwZGF0ZVNwZWN0cnVtKGFycmF5LCBwZWFrcykge1xuICBpZiAoIXJ1bm5pbmdPbk1vYmlsZSkge1xuICAgIGRpc3BsYXlTcGVjdHJ1bShhcnJheSk7XG4gICAgZGlzcGxheVBlYWtzKHBlYWtzKTtcbiAgfVxuXG4gIGxldCBwb3dlciA9IDA7XG5cbiAgZm9yIChsZXQgcGVhayBvZiBwZWFrcykge1xuICAgIGNvbnN0IGZyZXEgPSBwZWFrLmZyZXE7XG5cbiAgICBpZiAoIWN1cnJlbnRJZEZyZXFzIHx8IChmcmVxICE9PSBjdXJyZW50SWRGcmVxc1swXSAmJiBmcmVxICE9PSBjdXJyZW50SWRGcmVxc1sxXSkpXG4gICAgICBwb3dlciArPSBkZWNpYmVsVG9Qb3dlcihwZWFrLmxldmVsKTtcbiAgfVxuXG4gIGNvbnN0IGFtcCA9IE1hdGgubWF4KDAsIE1hdGgubWluKDAuNSwgMTAwMCAqIE1hdGguc3FydChwb3dlcikpKTtcbiAgcmVTeW50aC5nYWluID0gYW1wO1xufVxuXG5mdW5jdGlvbiBtYWluKCkge1xuICBjb25zdCB1YSA9IHdpbmRvdy5uYXZpZ2F0b3IudXNlckFnZW50O1xuICBjb25zdCBtZCA9IG5ldyBNb2JpbGVEZXRlY3QodWEpO1xuXG4gIG9zID0gbWQub3MoKTtcbiAgcnVubmluZ09uTW9iaWxlID0gKG9zID09PSAnQW5kcm9pZE9TJyB8fCBvcyA9PT0gJ2lPUycpO1xuXG4gIGNhbnZhc0NvbnRhaW5lciA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdjYW52YXMtY29udGFpbmVyJyk7XG4gIGNhbnZhcyA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdzcGVjdHJ1bS1jYW52YXMnKTtcbiAgY2FudmFzLmhlaWdodCA9IGFuYWx5c2VyTWF4IC0gYW5hbHlzZXJNaW47XG5cbiAgaWRTeW50aCA9IG5ldyBQdWxzZVN5bnRoKCk7XG4gIHJlU3ludGggPSBuZXcgVG9uZVN5bnRoKCk7XG5cbiAgc2VsZWN0b3JCdXR0b25zID0gbmV3IFNlbGVjdG9yQnV0dG9ucygnYnV0dG9uLWNvbnRhaW5lcicsIG9uU3RhcnQsIG9uU3RvcCk7XG5cbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBzZXR1cC5sZW5ndGg7IGkrKykge1xuICAgIGNvbnN0IGJ1dHRvbkluZGV4ID0gaSArIDE7XG4gICAgc2VsZWN0b3JCdXR0b25zLmFkZChidXR0b25JbmRleC50b1N0cmluZygpKTtcbiAgfVxuXG4gIHNlbGVjdG9yQnV0dG9ucy5lbmFibGUoKTtcblxuICB3ZWxjb21lT3ZlcmxheSA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCd3ZWxjb21lLW92ZXJsYXknKTtcbiAgZXJyb3JPdmVybGF5ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2Vycm9yLW92ZXJsYXknKTtcbiAgc2V0dXBPdmVybGF5KCd3ZWxjb21lJywgZmFsc2UsIGluaXRBdWRpb0lucHV0KTtcbiAgc2V0dXBPdmVybGF5KCdoZWxwJyk7XG4gIHNldHVwT3ZlcmxheSgnaW5mbycpO1xufVxuXG53aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcignbG9hZCcsIG1haW4pO1xuIl0sIm5hbWVzIjpbImdsb2JhbCIsIm1vZHVsZSIsIndpbmRvdyIsIk1hdGgiLCJzZWxmIiwiRnVuY3Rpb24iLCJfX2ciLCJoYXNPd25Qcm9wZXJ0eSIsIml0Iiwia2V5IiwiY2FsbCIsImV4ZWMiLCJlIiwicmVxdWlyZSQkMCIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZ2V0IiwiYSIsImNvcmUiLCJ2ZXJzaW9uIiwiX19lIiwiaXNPYmplY3QiLCJUeXBlRXJyb3IiLCJkb2N1bWVudCIsImlzIiwiY3JlYXRlRWxlbWVudCIsInJlcXVpcmUkJDEiLCJyZXF1aXJlJCQyIiwiUyIsImZuIiwidmFsIiwidG9TdHJpbmciLCJ2YWx1ZU9mIiwiZFAiLCJPIiwiUCIsIkF0dHJpYnV0ZXMiLCJhbk9iamVjdCIsInRvUHJpbWl0aXZlIiwiSUU4X0RPTV9ERUZJTkUiLCJ2YWx1ZSIsImJpdG1hcCIsImVudW1lcmFibGUiLCJjb25maWd1cmFibGUiLCJ3cml0YWJsZSIsIm9iamVjdCIsImYiLCJjcmVhdGVEZXNjIiwiaWQiLCJweCIsInJhbmRvbSIsImNvbmNhdCIsInVuZGVmaW5lZCIsIlNIQVJFRCIsInN0b3JlIiwicHVzaCIsIm1vZGUiLCJjb3B5cmlnaHQiLCJTUkMiLCJUT19TVFJJTkciLCJUUEwiLCIkdG9TdHJpbmciLCJzcGxpdCIsImluc3BlY3RTb3VyY2UiLCJzYWZlIiwiaXNGdW5jdGlvbiIsImhhcyIsImhpZGUiLCJqb2luIiwiU3RyaW5nIiwicHJvdG90eXBlIiwidGhhdCIsImxlbmd0aCIsImFGdW5jdGlvbiIsImIiLCJjIiwiYXBwbHkiLCJhcmd1bWVudHMiLCJQUk9UT1RZUEUiLCIkZXhwb3J0IiwidHlwZSIsIm5hbWUiLCJzb3VyY2UiLCJJU19GT1JDRUQiLCJGIiwiSVNfR0xPQkFMIiwiRyIsIklTX1NUQVRJQyIsIklTX1BST1RPIiwiSVNfQklORCIsIkIiLCJ0YXJnZXQiLCJleHBvcnRzIiwiZXhwUHJvdG8iLCJvd24iLCJvdXQiLCJleHAiLCJjdHgiLCJyZWRlZmluZSIsIlUiLCJXIiwiUiIsIk1FVEEiLCJzZXREZXNjIiwiaXNFeHRlbnNpYmxlIiwiRlJFRVpFIiwicHJldmVudEV4dGVuc2lvbnMiLCJzZXRNZXRhIiwiaSIsInciLCJmYXN0S2V5IiwiY3JlYXRlIiwiZ2V0V2VhayIsIm9uRnJlZXplIiwibWV0YSIsIk5FRUQiLCJLRVkiLCJTeW1ib2wiLCJVU0VfU1lNQk9MIiwiJGV4cG9ydHMiLCJ1aWQiLCJkZWYiLCJUQUciLCJ0YWciLCJzdGF0IiwiJFN5bWJvbCIsIkxJQlJBUlkiLCJjaGFyQXQiLCJ3a3NFeHQiLCJzbGljZSIsInByb3BlcnR5SXNFbnVtZXJhYmxlIiwiY29mIiwiSU9iamVjdCIsImRlZmluZWQiLCJjZWlsIiwiZmxvb3IiLCJpc05hTiIsIm1pbiIsInRvSW50ZWdlciIsIm1heCIsImluZGV4IiwiSVNfSU5DTFVERVMiLCIkdGhpcyIsImVsIiwiZnJvbUluZGV4IiwidG9JT2JqZWN0IiwidG9MZW5ndGgiLCJ0b0Fic29sdXRlSW5kZXgiLCJzaGFyZWQiLCJhcnJheUluZGV4T2YiLCJJRV9QUk9UTyIsIm5hbWVzIiwicmVzdWx0Iiwia2V5cyIsIiRrZXlzIiwiZW51bUJ1Z0tleXMiLCJnZXRPd25Qcm9wZXJ0eVN5bWJvbHMiLCJnZXRLZXlzIiwiZ2V0U3ltYm9scyIsImdPUFMiLCJzeW1ib2xzIiwiaXNFbnVtIiwicElFIiwiQXJyYXkiLCJpc0FycmF5IiwiYXJnIiwiZGVmaW5lUHJvcGVydGllcyIsIlByb3BlcnRpZXMiLCJkb2N1bWVudEVsZW1lbnQiLCJFbXB0eSIsImNyZWF0ZURpY3QiLCJpZnJhbWUiLCJsdCIsImd0IiwiaWZyYW1lRG9jdW1lbnQiLCJzdHlsZSIsImRpc3BsYXkiLCJhcHBlbmRDaGlsZCIsInNyYyIsImNvbnRlbnRXaW5kb3ciLCJvcGVuIiwid3JpdGUiLCJjbG9zZSIsImRQcyIsImhpZGRlbktleXMiLCJnZXRPd25Qcm9wZXJ0eU5hbWVzIiwiZ09QTiIsIndpbmRvd05hbWVzIiwiZ2V0V2luZG93TmFtZXMiLCJnT1BEIiwiZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yIiwiJEdPUEQiLCIkRFAiLCJnT1BORXh0IiwiJEpTT04iLCJKU09OIiwiX3N0cmluZ2lmeSIsInN0cmluZ2lmeSIsIkhJRERFTiIsIndrcyIsIlRPX1BSSU1JVElWRSIsIlN5bWJvbFJlZ2lzdHJ5IiwiQWxsU3ltYm9scyIsIk9QU3ltYm9scyIsIk9iamVjdFByb3RvIiwiVVNFX05BVElWRSIsIiRHT1BTIiwiUU9iamVjdCIsInNldHRlciIsImZpbmRDaGlsZCIsInNldFN5bWJvbERlc2MiLCJERVNDUklQVE9SUyIsIiRmYWlscyIsIl9jcmVhdGUiLCJEIiwicHJvdG9EZXNjIiwid3JhcCIsInN5bSIsIl9rIiwiaXNTeW1ib2wiLCJpdGVyYXRvciIsIiRkZWZpbmVQcm9wZXJ0eSIsIiRkZWZpbmVQcm9wZXJ0aWVzIiwiZW51bUtleXMiLCJsIiwiJGNyZWF0ZSIsIiRwcm9wZXJ0eUlzRW51bWVyYWJsZSIsIkUiLCIkZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yIiwiJGdldE93blByb3BlcnR5TmFtZXMiLCIkZ2V0T3duUHJvcGVydHlTeW1ib2xzIiwiSVNfT1AiLCIkc2V0Iiwic2V0IiwicmVxdWlyZSQkMyIsImVzNlN5bWJvbHMiLCJqIiwid2VsbEtub3duU3ltYm9scyIsImsiLCJ3a3NEZWZpbmUiLCJrZXlGb3IiLCJ1c2VTZXR0ZXIiLCJ1c2VTaW1wbGUiLCJGQUlMU19PTl9QUklNSVRJVkVTIiwidG9PYmplY3QiLCJhcmdzIiwicmVwbGFjZXIiLCIkcmVwbGFjZXIiLCJyZXF1aXJlJCQ0Iiwic2V0VG9TdHJpbmdUYWciLCJmYWlscyIsImdldFByb3RvdHlwZU9mIiwiY29uc3RydWN0b3IiLCIkZ2V0UHJvdG90eXBlT2YiLCIkZnJlZXplIiwiZnJlZXplIiwiJHNlYWwiLCJzZWFsIiwiJHByZXZlbnRFeHRlbnNpb25zIiwiJGlzRnJvemVuIiwiaXNGcm96ZW4iLCIkaXNTZWFsZWQiLCJpc1NlYWxlZCIsIiRpc0V4dGVuc2libGUiLCIkYXNzaWduIiwiYXNzaWduIiwiQSIsIksiLCJmb3JFYWNoIiwiVCIsImFMZW4iLCJ4IiwieSIsImNoZWNrIiwicHJvdG8iLCJzZXRQcm90b3R5cGVPZiIsInRlc3QiLCJidWdneSIsIl9fcHJvdG9fXyIsIkFSRyIsInRyeUdldCIsImNhbGxlZSIsImNsYXNzb2YiLCJ1biIsImFycmF5U2xpY2UiLCJmYWN0b3JpZXMiLCJjb25zdHJ1Y3QiLCJsZW4iLCJuIiwiYmluZCIsInBhcnRBcmdzIiwiYm91bmQiLCJpbnZva2UiLCJGUHJvdG8iLCJuYW1lUkUiLCJOQU1FIiwibWF0Y2giLCJIQVNfSU5TVEFOQ0UiLCJGdW5jdGlvblByb3RvIiwic3BhY2UiLCJzcGFjZXMiLCJub24iLCJsdHJpbSIsIlJlZ0V4cCIsInJ0cmltIiwiZXhwb3J0ZXIiLCJBTElBUyIsIkZPUkNFIiwidHJpbSIsInN0cmluZyIsIlRZUEUiLCJyZXBsYWNlIiwiJHBhcnNlSW50IiwicGFyc2VJbnQiLCIkdHJpbSIsImhleCIsIndzIiwic3RyIiwicmFkaXgiLCIkcGFyc2VGbG9hdCIsInBhcnNlRmxvYXQiLCJJbmZpbml0eSIsIkMiLCJOVU1CRVIiLCIkTnVtYmVyIiwiQmFzZSIsIkJST0tFTl9DT0YiLCJUUklNIiwidG9OdW1iZXIiLCJhcmd1bWVudCIsImZpcnN0IiwiY2hhckNvZGVBdCIsInRoaXJkIiwibWF4Q29kZSIsIk5hTiIsImRpZ2l0cyIsImNvZGUiLCJOdW1iZXIiLCJpbmhlcml0SWZSZXF1aXJlZCIsInJlcXVpcmUkJDUiLCJyZXF1aXJlJCQ2IiwibXNnIiwicmVwZWF0IiwiY291bnQiLCJyZXMiLCJSYW5nZUVycm9yIiwiJHRvRml4ZWQiLCJ0b0ZpeGVkIiwiZGF0YSIsIkVSUk9SIiwiWkVSTyIsIm11bHRpcGx5IiwiYzIiLCJkaXZpZGUiLCJudW1Ub1N0cmluZyIsInMiLCJ0IiwicG93IiwiYWNjIiwibG9nIiwieDIiLCJmcmFjdGlvbkRpZ2l0cyIsImFOdW1iZXJWYWx1ZSIsIm0iLCJ6IiwiJHRvUHJlY2lzaW9uIiwidG9QcmVjaXNpb24iLCJwcmVjaXNpb24iLCJFUFNJTE9OIiwiX2lzRmluaXRlIiwiaXNGaW5pdGUiLCJpc0ludGVnZXIiLCJudW1iZXIiLCJhYnMiLCJpc1NhZmVJbnRlZ2VyIiwiTUFYX1NBRkVfSU5URUdFUiIsIk1JTl9TQUZFX0lOVEVHRVIiLCJsb2cxcCIsInNxcnQiLCIkYWNvc2giLCJhY29zaCIsIk1BWF9WQUxVRSIsIkxOMiIsIiRhc2luaCIsImFzaW5oIiwiJGF0YW5oIiwiYXRhbmgiLCJzaWduIiwiY2JydCIsImNsejMyIiwiTE9HMkUiLCJjb3NoIiwiJGV4cG0xIiwiZXhwbTEiLCJFUFNJTE9OMzIiLCJNQVgzMiIsIk1JTjMyIiwicm91bmRUaWVzVG9FdmVuIiwiZnJvdW5kIiwiJGFicyIsIiRzaWduIiwiaHlwb3QiLCJ2YWx1ZTEiLCJ2YWx1ZTIiLCJzdW0iLCJsYXJnIiwiZGl2IiwiJGltdWwiLCJpbXVsIiwiVUlOVDE2IiwieG4iLCJ5biIsInhsIiwieWwiLCJsb2cxMCIsIkxPRzEwRSIsImxvZzIiLCJzaW5oIiwidGFuaCIsInRydW5jIiwiZnJvbUNoYXJDb2RlIiwiJGZyb21Db2RlUG9pbnQiLCJmcm9tQ29kZVBvaW50IiwicmF3IiwiY2FsbFNpdGUiLCJ0cGwiLCJwb3MiLCJJdGVyYXRvclByb3RvdHlwZSIsIkNvbnN0cnVjdG9yIiwibmV4dCIsImRlc2NyaXB0b3IiLCJJVEVSQVRPUiIsIkJVR0dZIiwiRkZfSVRFUkFUT1IiLCJLRVlTIiwiVkFMVUVTIiwicmV0dXJuVGhpcyIsIkRFRkFVTFQiLCJJU19TRVQiLCJGT1JDRUQiLCIkaXRlckNyZWF0ZSIsImdldE1ldGhvZCIsImtpbmQiLCJ2YWx1ZXMiLCJlbnRyaWVzIiwiREVGX1ZBTFVFUyIsIlZBTFVFU19CVUciLCIkbmF0aXZlIiwiJGRlZmF1bHQiLCIkZW50cmllcyIsIiRhbnlOYXRpdmUiLCJtZXRob2RzIiwiSXRlcmF0b3JzIiwiJGF0IiwiaXRlcmF0ZWQiLCJfdCIsIl9pIiwicG9pbnQiLCJkb25lIiwiY29kZVBvaW50QXQiLCJNQVRDSCIsImlzUmVnRXhwIiwic2VhcmNoU3RyaW5nIiwicmUiLCJFTkRTX1dJVEgiLCIkZW5kc1dpdGgiLCJlbmRzV2l0aCIsImNvbnRleHQiLCJlbmRQb3NpdGlvbiIsImVuZCIsInNlYXJjaCIsIklOQ0xVREVTIiwiaW5jbHVkZXMiLCJpbmRleE9mIiwiU1RBUlRTX1dJVEgiLCIkc3RhcnRzV2l0aCIsInN0YXJ0c1dpdGgiLCJxdW90IiwiY3JlYXRlSFRNTCIsImF0dHJpYnV0ZSIsInAxIiwidG9Mb3dlckNhc2UiLCJhbmNob3IiLCJiaWciLCJibGluayIsImJvbGQiLCJmaXhlZCIsImZvbnRjb2xvciIsImNvbG9yIiwiZm9udHNpemUiLCJzaXplIiwiaXRhbGljcyIsImxpbmsiLCJ1cmwiLCJzbWFsbCIsInN0cmlrZSIsInN1YiIsInN1cCIsIm5vdyIsIkRhdGUiLCJnZXRUaW1lIiwidG9KU09OIiwidG9JU09TdHJpbmciLCJwdiIsIiR0b0lTT1N0cmluZyIsImx6IiwibnVtIiwiZCIsImdldFVUQ0Z1bGxZZWFyIiwiZ2V0VVRDTWlsbGlzZWNvbmRzIiwiZ2V0VVRDTW9udGgiLCJnZXRVVENEYXRlIiwiZ2V0VVRDSG91cnMiLCJnZXRVVENNaW51dGVzIiwiZ2V0VVRDU2Vjb25kcyIsIkRhdGVQcm90byIsIklOVkFMSURfREFURSIsImhpbnQiLCJyZXQiLCJBcnJheVByb3RvIiwiZ2V0SXRlcmF0b3JNZXRob2QiLCJTQUZFX0NMT1NJTkciLCJyaXRlciIsImZyb20iLCJza2lwQ2xvc2luZyIsImFyciIsIml0ZXIiLCJhcnJheUxpa2UiLCJtYXBmbiIsIm1hcHBpbmciLCJpdGVyRm4iLCJnZXRJdGVyRm4iLCJzdGVwIiwiaXNBcnJheUl0ZXIiLCJjcmVhdGVQcm9wZXJ0eSIsIm9mIiwibWV0aG9kIiwiYXJyYXlKb2luIiwic2VwYXJhdG9yIiwiaHRtbCIsImJlZ2luIiwia2xhc3MiLCJzdGFydCIsInVwVG8iLCJjbG9uZWQiLCIkc29ydCIsInNvcnQiLCJjb21wYXJlZm4iLCJTUEVDSUVTIiwib3JpZ2luYWwiLCJzcGVjaWVzQ29uc3RydWN0b3IiLCJJU19NQVAiLCJJU19GSUxURVIiLCJJU19TT01FIiwiSVNfRVZFUlkiLCJJU19GSU5EX0lOREVYIiwiTk9fSE9MRVMiLCJhc2MiLCJjYWxsYmFja2ZuIiwiJGZvckVhY2giLCJTVFJJQ1QiLCIkbWFwIiwibWFwIiwiJGZpbHRlciIsImZpbHRlciIsIiRzb21lIiwic29tZSIsIiRldmVyeSIsImV2ZXJ5IiwibWVtbyIsImlzUmlnaHQiLCJyZWR1Y2UiLCIkcmVkdWNlIiwicmVkdWNlUmlnaHQiLCIkaW5kZXhPZiIsIk5FR0FUSVZFX1pFUk8iLCJzZWFyY2hFbGVtZW50IiwibGFzdEluZGV4T2YiLCJjb3B5V2l0aGluIiwidG8iLCJpbmMiLCJVTlNDT1BBQkxFUyIsImZpbGwiLCJlbmRQb3MiLCIkZmluZCIsImZvcmNlZCIsImZpbmQiLCJmaW5kSW5kZXgiLCJBcmd1bWVudHMiLCJhZGRUb1Vuc2NvcGFibGVzIiwiaWdub3JlQ2FzZSIsIm11bHRpbGluZSIsInVuaWNvZGUiLCJzdGlja3kiLCIkUmVnRXhwIiwicmUxIiwicmUyIiwiQ09SUkVDVF9ORVciLCJwIiwidGlSRSIsInBpUkUiLCJmaVUiLCIkZmxhZ3MiLCJwcm94eSIsIm5hdGl2ZUV4ZWMiLCJuYXRpdmVSZXBsYWNlIiwicGF0Y2hlZEV4ZWMiLCJMQVNUX0lOREVYIiwiVVBEQVRFU19MQVNUX0lOREVYX1dST05HIiwiTlBDR19JTkNMVURFRCIsIlBBVENIIiwibGFzdEluZGV4IiwicmVDb3B5IiwicmVnZXhwRmxhZ3MiLCJyZWdleHBFeGVjIiwiZmxhZ3MiLCJkZWZpbmUiLCJhdCIsImJ1aWx0aW5FeGVjIiwiUkVQTEFDRV9TVVBQT1JUU19OQU1FRF9HUk9VUFMiLCJncm91cHMiLCJTUExJVF9XT1JLU19XSVRIX09WRVJXUklUVEVOX0VYRUMiLCJvcmlnaW5hbEV4ZWMiLCJTWU1CT0wiLCJERUxFR0FURVNfVE9fU1lNQk9MIiwiREVMRUdBVEVTX1RPX0VYRUMiLCJleGVjQ2FsbGVkIiwibmF0aXZlUmVnRXhwTWV0aG9kIiwiZm5zIiwibWF5YmVDYWxsTmF0aXZlIiwibmF0aXZlTWV0aG9kIiwicmVnZXhwIiwiYXJnMiIsImZvcmNlU3RyaW5nTWV0aG9kIiwic3RyZm4iLCJyeGZuIiwiJG1hdGNoIiwicngiLCJyZWdFeHBFeGVjIiwiZnVsbFVuaWNvZGUiLCJtYXRjaFN0ciIsImFkdmFuY2VTdHJpbmdJbmRleCIsIlNVQlNUSVRVVElPTl9TWU1CT0xTIiwiU1VCU1RJVFVUSU9OX1NZTUJPTFNfTk9fTkFNRUQiLCJtYXliZVRvU3RyaW5nIiwiUkVQTEFDRSIsIiRyZXBsYWNlIiwic2VhcmNoVmFsdWUiLCJyZXBsYWNlVmFsdWUiLCJmdW5jdGlvbmFsUmVwbGFjZSIsInJlc3VsdHMiLCJhY2N1bXVsYXRlZFJlc3VsdCIsIm5leHRTb3VyY2VQb3NpdGlvbiIsIm1hdGNoZWQiLCJwb3NpdGlvbiIsImNhcHR1cmVzIiwibmFtZWRDYXB0dXJlcyIsInJlcGxhY2VyQXJncyIsInJlcGxhY2VtZW50IiwiZ2V0U3Vic3RpdHV0aW9uIiwidGFpbFBvcyIsImNoIiwiY2FwdHVyZSIsIlNFQVJDSCIsIiRzZWFyY2giLCJwcmV2aW91c0xhc3RJbmRleCIsInNhbWVWYWx1ZSIsIiRtaW4iLCIkcHVzaCIsIiRTUExJVCIsIkxFTkdUSCIsIk1BWF9VSU5UMzIiLCJTVVBQT1JUU19ZIiwiU1BMSVQiLCIkc3BsaXQiLCJpbnRlcm5hbFNwbGl0IiwibGltaXQiLCJvdXRwdXQiLCJsYXN0TGFzdEluZGV4Iiwic3BsaXRMaW1pdCIsInNlcGFyYXRvckNvcHkiLCJsYXN0TGVuZ3RoIiwic3BsaXR0ZXIiLCJ1bmljb2RlTWF0Y2hpbmciLCJsaW0iLCJjYWxsUmVnRXhwRXhlYyIsInEiLCJmb3JiaWRkZW5GaWVsZCIsIkJSRUFLIiwiUkVUVVJOIiwiaXRlcmFibGUiLCJwcm9jZXNzIiwic2V0VGFzayIsInNldEltbWVkaWF0ZSIsImNsZWFyVGFzayIsImNsZWFySW1tZWRpYXRlIiwiTWVzc2FnZUNoYW5uZWwiLCJEaXNwYXRjaCIsImNvdW50ZXIiLCJxdWV1ZSIsIk9OUkVBRFlTVEFURUNIQU5HRSIsImRlZmVyIiwiY2hhbm5lbCIsInBvcnQiLCJydW4iLCJsaXN0ZW5lciIsImV2ZW50IiwibmV4dFRpY2siLCJwb3J0MiIsInBvcnQxIiwib25tZXNzYWdlIiwicG9zdE1lc3NhZ2UiLCJhZGRFdmVudExpc3RlbmVyIiwiaW1wb3J0U2NyaXB0cyIsImNlbCIsInJlbW92ZUNoaWxkIiwic2V0VGltZW91dCIsImNsZWFyIiwibWFjcm90YXNrIiwiT2JzZXJ2ZXIiLCJNdXRhdGlvbk9ic2VydmVyIiwiV2ViS2l0TXV0YXRpb25PYnNlcnZlciIsIlByb21pc2UiLCJpc05vZGUiLCJoZWFkIiwibGFzdCIsIm5vdGlmeSIsImZsdXNoIiwicGFyZW50IiwiZG9tYWluIiwiZXhpdCIsImVudGVyIiwibmF2aWdhdG9yIiwic3RhbmRhbG9uZSIsInRvZ2dsZSIsIm5vZGUiLCJjcmVhdGVUZXh0Tm9kZSIsIm9ic2VydmUiLCJjaGFyYWN0ZXJEYXRhIiwicmVzb2x2ZSIsInByb21pc2UiLCJ0aGVuIiwidGFzayIsIlByb21pc2VDYXBhYmlsaXR5IiwicmVqZWN0IiwiJCRyZXNvbHZlIiwiJCRyZWplY3QiLCJ2IiwidXNlckFnZW50IiwicHJvbWlzZUNhcGFiaWxpdHkiLCJuZXdQcm9taXNlQ2FwYWJpbGl0eSIsIm1pY3JvdGFzayIsIlBST01JU0UiLCJ2ZXJzaW9ucyIsInY4IiwiJFByb21pc2UiLCJlbXB0eSIsIkludGVybmFsIiwibmV3R2VuZXJpY1Byb21pc2VDYXBhYmlsaXR5IiwiT3duUHJvbWlzZUNhcGFiaWxpdHkiLCJXcmFwcGVyIiwibmV3UHJvbWlzZUNhcGFiaWxpdHlNb2R1bGUiLCJGYWtlUHJvbWlzZSIsIlByb21pc2VSZWplY3Rpb25FdmVudCIsImlzVGhlbmFibGUiLCJpc1JlamVjdCIsIl9uIiwiY2hhaW4iLCJfYyIsIl92Iiwib2siLCJfcyIsInJlYWN0aW9uIiwiaGFuZGxlciIsImZhaWwiLCJleGl0ZWQiLCJfaCIsIm9uSGFuZGxlVW5oYW5kbGVkIiwib25VbmhhbmRsZWQiLCJ1bmhhbmRsZWQiLCJpc1VuaGFuZGxlZCIsImNvbnNvbGUiLCJwZXJmb3JtIiwiZW1pdCIsIm9udW5oYW5kbGVkcmVqZWN0aW9uIiwicmVhc29uIiwiZXJyb3IiLCJfYSIsIm9ucmVqZWN0aW9uaGFuZGxlZCIsIiRyZWplY3QiLCJfZCIsIl93IiwiJHJlc29sdmUiLCJ3cmFwcGVyIiwiZXhlY3V0b3IiLCJhbkluc3RhbmNlIiwiZXJyIiwib25GdWxmaWxsZWQiLCJvblJlamVjdGVkIiwiciIsImNhcGFiaWxpdHkiLCJwcm9taXNlUmVzb2x2ZSIsInJlcXVpcmUkJDciLCJhbGwiLCJyZW1haW5pbmciLCJmb3JPZiIsIiRpbmRleCIsImFscmVhZHlDYWxsZWQiLCJyYWNlIiwiU0laRSIsImdldEVudHJ5IiwiZW50cnkiLCJfZiIsImdldENvbnN0cnVjdG9yIiwiQURERVIiLCJfbCIsInJlZGVmaW5lQWxsIiwidmFsaWRhdGUiLCJwcmV2Iiwic2V0U3Ryb25nIiwiJGl0ZXJEZWZpbmUiLCJzZXRTcGVjaWVzIiwiY29tbW9uIiwiSVNfV0VBSyIsImZpeE1ldGhvZCIsImFkZCIsImluc3RhbmNlIiwiSEFTTlRfQ0hBSU5JTkciLCJUSFJPV1NfT05fUFJJTUlUSVZFUyIsIkFDQ0VQVF9JVEVSQUJMRVMiLCIkaXRlckRldGVjdCIsIkJVR0dZX1pFUk8iLCIkaW5zdGFuY2UiLCJNQVAiLCJNYXAiLCJzdHJvbmciLCJTRVQiLCJTZXQiLCJhcnJheUZpbmQiLCJjcmVhdGVBcnJheU1ldGhvZCIsImFycmF5RmluZEluZGV4IiwidW5jYXVnaHRGcm96ZW5TdG9yZSIsIlVuY2F1Z2h0RnJvemVuU3RvcmUiLCJmaW5kVW5jYXVnaHRGcm96ZW4iLCJzcGxpY2UiLCIkaGFzIiwidWZzdG9yZSIsImVhY2giLCJOQVRJVkVfV0VBS19NQVAiLCJJU19JRTExIiwiQWN0aXZlWE9iamVjdCIsIldFQUtfTUFQIiwid2VhayIsIkludGVybmFsTWFwIiwiV2Vha01hcCIsIiRXZWFrTWFwIiwiV0VBS19TRVQiLCJXZWFrU2V0IiwiVFlQRUQiLCJWSUVXIiwiQUJWIiwiQXJyYXlCdWZmZXIiLCJEYXRhVmlldyIsIkNPTlNUUiIsIlR5cGVkIiwiVHlwZWRBcnJheUNvbnN0cnVjdG9ycyIsIkFSUkFZX0JVRkZFUiIsIkRBVEFfVklFVyIsIldST05HX0xFTkdUSCIsIldST05HX0lOREVYIiwiJEFycmF5QnVmZmVyIiwiJERhdGFWaWV3IiwiQmFzZUJ1ZmZlciIsIkJVRkZFUiIsIkJZVEVfTEVOR1RIIiwiQllURV9PRkZTRVQiLCIkQlVGRkVSIiwiJExFTkdUSCIsIiRPRkZTRVQiLCJwYWNrSUVFRTc1NCIsIm1MZW4iLCJuQnl0ZXMiLCJidWZmZXIiLCJlTGVuIiwiZU1heCIsImVCaWFzIiwicnQiLCJ1bnBhY2tJRUVFNzU0IiwibkJpdHMiLCJ1bnBhY2tJMzIiLCJieXRlcyIsInBhY2tJOCIsInBhY2tJMTYiLCJwYWNrSTMyIiwicGFja0Y2NCIsInBhY2tGMzIiLCJhZGRHZXR0ZXIiLCJpbnRlcm5hbCIsInZpZXciLCJpc0xpdHRsZUVuZGlhbiIsIm51bUluZGV4IiwiaW50SW5kZXgiLCJ0b0luZGV4IiwiX2IiLCJwYWNrIiwicmV2ZXJzZSIsImNvbnZlcnNpb24iLCIkdHlwZWQiLCJieXRlTGVuZ3RoIiwiYXJyYXlGaWxsIiwiYnl0ZU9mZnNldCIsImJ1ZmZlckxlbmd0aCIsIm9mZnNldCIsImdldEludDgiLCJnZXRVaW50OCIsImdldEludDE2IiwiZ2V0VWludDE2IiwiZ2V0SW50MzIiLCJnZXRVaW50MzIiLCJnZXRGbG9hdDMyIiwiZ2V0RmxvYXQ2NCIsInNldEludDgiLCJzZXRVaW50OCIsInNldEludDE2Iiwic2V0VWludDE2Iiwic2V0SW50MzIiLCJzZXRVaW50MzIiLCJzZXRGbG9hdDMyIiwic2V0RmxvYXQ2NCIsIkFycmF5QnVmZmVyUHJvdG8iLCIkc2V0SW50OCIsIiRpc1ZpZXciLCJpc1ZpZXciLCIkc2xpY2UiLCJmaW4iLCJ2aWV3UyIsInZpZXdUIiwiJGJ1ZmZlciIsInJlcXVpcmUkJDgiLCJwcm9wZXJ0eURlc2MiLCJyZXF1aXJlJCQ5IiwicmVxdWlyZSQkMTAiLCJyZXF1aXJlJCQxMSIsInJlcXVpcmUkJDEyIiwicmVxdWlyZSQkMTMiLCJyZXF1aXJlJCQxNCIsInJlcXVpcmUkJDE1IiwicmVxdWlyZSQkMTYiLCJyZXF1aXJlJCQxNyIsInJlcXVpcmUkJDE4IiwicmVxdWlyZSQkMTkiLCJyZXF1aXJlJCQyMCIsInJlcXVpcmUkJDIxIiwicmVxdWlyZSQkMjIiLCJyZXF1aXJlJCQyMyIsInJlcXVpcmUkJDI0IiwicmVxdWlyZSQkMjUiLCJyZXF1aXJlJCQyNiIsInJlcXVpcmUkJDI3IiwicmVxdWlyZSQkMjgiLCJjcmVhdGVBcnJheUluY2x1ZGVzIiwicmVxdWlyZSQkMjkiLCJyZXF1aXJlJCQzMCIsIkFycmF5SXRlcmF0b3JzIiwicmVxdWlyZSQkMzEiLCJyZXF1aXJlJCQzMiIsInJlcXVpcmUkJDMzIiwicmVxdWlyZSQkMzQiLCJyZXF1aXJlJCQzNSIsImFycmF5Q29weVdpdGhpbiIsInJlcXVpcmUkJDM2IiwicmVxdWlyZSQkMzciLCJyZXF1aXJlJCQzOCIsIlVpbnQ4QXJyYXkiLCJTSEFSRURfQlVGRkVSIiwiQllURVNfUEVSX0VMRU1FTlQiLCJhcnJheUZvckVhY2giLCJhcnJheUZpbHRlciIsImFycmF5U29tZSIsImFycmF5RXZlcnkiLCJhcnJheUluY2x1ZGVzIiwiYXJyYXlWYWx1ZXMiLCJhcnJheUtleXMiLCJhcnJheUVudHJpZXMiLCJhcnJheUxhc3RJbmRleE9mIiwiYXJyYXlSZWR1Y2UiLCJhcnJheVJlZHVjZVJpZ2h0IiwiYXJyYXlTb3J0IiwiYXJyYXlUb1N0cmluZyIsImFycmF5VG9Mb2NhbGVTdHJpbmciLCJ0b0xvY2FsZVN0cmluZyIsIlRZUEVEX0NPTlNUUlVDVE9SIiwiREVGX0NPTlNUUlVDVE9SIiwiQUxMX0NPTlNUUlVDVE9SUyIsIlRZUEVEX0FSUkFZIiwiYWxsb2NhdGUiLCJMSVRUTEVfRU5ESUFOIiwiVWludDE2QXJyYXkiLCJGT1JDRURfU0VUIiwidG9PZmZzZXQiLCJCWVRFUyIsInNwZWNpZXNGcm9tTGlzdCIsImxpc3QiLCJmcm9tTGlzdCIsIiRmcm9tIiwiJG9mIiwiVE9fTE9DQUxFX0JVRyIsIiR0b0xvY2FsZVN0cmluZyIsInByZWRpY2F0ZSIsIm1pZGRsZSIsInN1YmFycmF5IiwiJGJlZ2luIiwiJGl0ZXJhdG9ycyIsImlzVEFJbmRleCIsIiRnZXREZXNjIiwiJHNldERlc2MiLCJkZXNjIiwiJFR5cGVkQXJyYXlQcm90b3R5cGUkIiwiQ0xBTVBFRCIsIkdFVFRFUiIsIlNFVFRFUiIsIlR5cGVkQXJyYXkiLCJUQUMiLCJUeXBlZEFycmF5UHJvdG90eXBlIiwiZ2V0dGVyIiwibyIsInJvdW5kIiwiYWRkRWxlbWVudCIsIiRvZmZzZXQiLCIkbGVuZ3RoIiwiJGxlbiIsIiRuYXRpdmVJdGVyYXRvciIsIkNPUlJFQ1RfSVRFUl9OQU1FIiwiJGl0ZXJhdG9yIiwiaW5pdCIsIkludDhBcnJheSIsIlVpbnQ4Q2xhbXBlZEFycmF5IiwiSW50MTZBcnJheSIsIkludDMyQXJyYXkiLCJVaW50MzJBcnJheSIsIkZsb2F0MzJBcnJheSIsIkZsb2F0NjRBcnJheSIsInJBcHBseSIsIlJlZmxlY3QiLCJmQXBwbHkiLCJ0aGlzQXJndW1lbnQiLCJhcmd1bWVudHNMaXN0IiwiTCIsInJDb25zdHJ1Y3QiLCJORVdfVEFSR0VUX0JVRyIsIkFSR1NfQlVHIiwiVGFyZ2V0IiwibmV3VGFyZ2V0IiwiJGFyZ3MiLCJwcm9wZXJ0eUtleSIsImF0dHJpYnV0ZXMiLCJkZWxldGVQcm9wZXJ0eSIsIkVudW1lcmF0ZSIsImVudW1lcmF0ZSIsInJlY2VpdmVyIiwiZ2V0UHJvdG8iLCJvd25LZXlzIiwiViIsIm93bkRlc2MiLCJleGlzdGluZ0Rlc2NyaXB0b3IiLCJzZXRQcm90byIsIiRpbmNsdWRlcyIsIklTX0NPTkNBVF9TUFJFQURBQkxFIiwiZmxhdHRlbkludG9BcnJheSIsInNvdXJjZUxlbiIsImRlcHRoIiwibWFwcGVyIiwidGhpc0FyZyIsInRhcmdldEluZGV4Iiwic291cmNlSW5kZXgiLCJtYXBGbiIsImVsZW1lbnQiLCJzcHJlYWRhYmxlIiwiZmxhdE1hcCIsImFycmF5U3BlY2llc0NyZWF0ZSIsIm1heExlbmd0aCIsImZpbGxTdHJpbmciLCJsZWZ0Iiwic3RyaW5nTGVuZ3RoIiwiZmlsbFN0ciIsImludE1heExlbmd0aCIsImZpbGxMZW4iLCJzdHJpbmdGaWxsZXIiLCJXRUJLSVRfQlVHIiwicGFkU3RhcnQiLCIkcGFkIiwicGFkRW5kIiwidHJpbUxlZnQiLCJ0cmltUmlnaHQiLCJnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JzIiwiZ2V0RGVzYyIsImlzRW50cmllcyIsIiR2YWx1ZXMiLCJvbkZpbmFsbHkiLCJNU0lFIiwidGltZSIsImJvdW5kQXJncyIsInNldEludGVydmFsIiwiJHRhc2siLCJUT19TVFJJTkdfVEFHIiwiQXJyYXlWYWx1ZXMiLCJET01JdGVyYWJsZXMiLCJDU1NSdWxlTGlzdCIsIkNTU1N0eWxlRGVjbGFyYXRpb24iLCJDU1NWYWx1ZUxpc3QiLCJDbGllbnRSZWN0TGlzdCIsIkRPTVJlY3RMaXN0IiwiRE9NU3RyaW5nTGlzdCIsIkRPTVRva2VuTGlzdCIsIkRhdGFUcmFuc2Zlckl0ZW1MaXN0IiwiRmlsZUxpc3QiLCJIVE1MQWxsQ29sbGVjdGlvbiIsIkhUTUxDb2xsZWN0aW9uIiwiSFRNTEZvcm1FbGVtZW50IiwiSFRNTFNlbGVjdEVsZW1lbnQiLCJNZWRpYUxpc3QiLCJNaW1lVHlwZUFycmF5IiwiTmFtZWROb2RlTWFwIiwiTm9kZUxpc3QiLCJQYWludFJlcXVlc3RMaXN0IiwiUGx1Z2luIiwiUGx1Z2luQXJyYXkiLCJTVkdMZW5ndGhMaXN0IiwiU1ZHTnVtYmVyTGlzdCIsIlNWR1BhdGhTZWdMaXN0IiwiU1ZHUG9pbnRMaXN0IiwiU1ZHU3RyaW5nTGlzdCIsIlNWR1RyYW5zZm9ybUxpc3QiLCJTb3VyY2VCdWZmZXJMaXN0IiwiU3R5bGVTaGVldExpc3QiLCJUZXh0VHJhY2tDdWVMaXN0IiwiVGV4dFRyYWNrTGlzdCIsIlRvdWNoTGlzdCIsImNvbGxlY3Rpb25zIiwiZXhwbGljaXQiLCJDb2xsZWN0aW9uIiwicnVudGltZSIsIk9wIiwiaGFzT3duIiwiaXRlcmF0b3JTeW1ib2wiLCJhc3luY0l0ZXJhdG9yU3ltYm9sIiwiYXN5bmNJdGVyYXRvciIsInRvU3RyaW5nVGFnU3ltYm9sIiwidG9TdHJpbmdUYWciLCJvYmoiLCJpbm5lckZuIiwib3V0ZXJGbiIsInRyeUxvY3NMaXN0IiwicHJvdG9HZW5lcmF0b3IiLCJHZW5lcmF0b3IiLCJnZW5lcmF0b3IiLCJDb250ZXh0IiwiX2ludm9rZSIsIm1ha2VJbnZva2VNZXRob2QiLCJ0cnlDYXRjaCIsIkdlblN0YXRlU3VzcGVuZGVkU3RhcnQiLCJHZW5TdGF0ZVN1c3BlbmRlZFlpZWxkIiwiR2VuU3RhdGVFeGVjdXRpbmciLCJHZW5TdGF0ZUNvbXBsZXRlZCIsIkNvbnRpbnVlU2VudGluZWwiLCJHZW5lcmF0b3JGdW5jdGlvbiIsIkdlbmVyYXRvckZ1bmN0aW9uUHJvdG90eXBlIiwiTmF0aXZlSXRlcmF0b3JQcm90b3R5cGUiLCJHcCIsImRpc3BsYXlOYW1lIiwiZGVmaW5lSXRlcmF0b3JNZXRob2RzIiwiaXNHZW5lcmF0b3JGdW5jdGlvbiIsImdlbkZ1biIsImN0b3IiLCJtYXJrIiwiYXdyYXAiLCJfX2F3YWl0IiwiQXN5bmNJdGVyYXRvciIsIlByb21pc2VJbXBsIiwicmVjb3JkIiwidW53cmFwcGVkIiwicHJldmlvdXNQcm9taXNlIiwiZW5xdWV1ZSIsImNhbGxJbnZva2VXaXRoTWV0aG9kQW5kQXJnIiwiYXN5bmMiLCJzdGF0ZSIsIkVycm9yIiwiZG9uZVJlc3VsdCIsImRlbGVnYXRlIiwiZGVsZWdhdGVSZXN1bHQiLCJtYXliZUludm9rZURlbGVnYXRlIiwic2VudCIsIl9zZW50IiwiZGlzcGF0Y2hFeGNlcHRpb24iLCJhYnJ1cHQiLCJpbmZvIiwicmVzdWx0TmFtZSIsIm5leHRMb2MiLCJwdXNoVHJ5RW50cnkiLCJsb2NzIiwidHJ5TG9jIiwiY2F0Y2hMb2MiLCJmaW5hbGx5TG9jIiwiYWZ0ZXJMb2MiLCJ0cnlFbnRyaWVzIiwicmVzZXRUcnlFbnRyeSIsImNvbXBsZXRpb24iLCJyZXNldCIsInBvcCIsIml0ZXJhdG9yTWV0aG9kIiwic2tpcFRlbXBSZXNldCIsInN0b3AiLCJyb290RW50cnkiLCJyb290UmVjb3JkIiwicnZhbCIsImV4Y2VwdGlvbiIsImhhbmRsZSIsImxvYyIsImNhdWdodCIsImhhc0NhdGNoIiwiaGFzRmluYWxseSIsImZpbmFsbHlFbnRyeSIsImNvbXBsZXRlIiwiZmluaXNoIiwidGhyb3duIiwiZGVsZWdhdGVZaWVsZCIsInJlZ2VuZXJhdG9yUnVudGltZSIsImFjY2lkZW50YWxTdHJpY3RNb2RlIiwiSVNfV1JBUCIsInZpcnR1YWwiLCJfZ2xvYmFsIiwiX2ludGVyb3BSZXF1aXJlRGVmYXVsdCIsIl9fZXNNb2R1bGUiLCJfYmFiZWxQb2x5ZmlsbCIsIndhcm4iLCIkT2JqZWN0IiwiX2RlZmluZVByb3BlcnR5MiIsIl9kZWZpbmVQcm9wZXJ0eSIsImRlZmF1bHQiLCJwcm9wcyIsInByb3RvUHJvcHMiLCJzdGF0aWNQcm9wcyIsIl9pdGVyYXRvcjIiLCJfaXRlcmF0b3IiLCJfc3ltYm9sMiIsIl9zeW1ib2wiLCJfdHlwZW9mIiwiX3R5cGVvZjMiLCJfdHlwZW9mMiIsIlJlZmVyZW5jZUVycm9yIiwiX3NldFByb3RvdHlwZU9mMiIsIl9zZXRQcm90b3R5cGVPZiIsIl9jcmVhdGUyIiwic3ViQ2xhc3MiLCJzdXBlckNsYXNzIiwiY2hpbGQyIiwiZ2V0SXRlcmF0b3IiLCJJU19BRERFUiIsIkNPTExFQ1RJT04iLCJjYiIsIm5leHRJdGVtIiwiZW5naW5lIiwiX19lbmdpbmVzIiwiX2dldFByb3RvdHlwZU9mMiIsIl9nZXRQcm90b3R5cGVPZiIsIl9nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IyIiwiX2dldE93blByb3BlcnR5RGVzY3JpcHRvciIsInByb3BlcnR5IiwicGxheUNvbnRyb2wiLCJQbGF5Q29udHJvbGxlZFRyYW5zcG9ydGVkIiwibmV4dFBvc2l0aW9uIiwibG9vcFN0YXJ0IiwiZW5hYmxlIiwiX19zY2hlZHVsZXIiLCJfX2xvb3BTdGFydCIsIl9faXNSdW5uaW5nIiwiX19lbmdpbmUiLCJUcmFuc3BvcnRlZFRyYW5zcG9ydGVkIiwiX19zY2hlZHVsaW5nUXVldWUiLCJyZXNldFRpbWUiLCJyZXNldFBvc2l0aW9uIiwiZGVmYXVsdFNldFRpbW91dCIsImRlZmF1bHRDbGVhclRpbWVvdXQiLCJjYWNoZWRTZXRUaW1lb3V0IiwiY2FjaGVkQ2xlYXJUaW1lb3V0IiwiY2xlYXJUaW1lb3V0IiwicnVuVGltZW91dCIsImZ1biIsInJ1bkNsZWFyVGltZW91dCIsIm1hcmtlciIsImRyYWluaW5nIiwiY3VycmVudFF1ZXVlIiwicXVldWVJbmRleCIsImNsZWFuVXBOZXh0VGljayIsImRyYWluUXVldWUiLCJ0aW1lb3V0IiwiSXRlbSIsImFycmF5IiwidGl0bGUiLCJwbGF0Zm9ybSIsImJyb3dzZXIiLCJlbnYiLCJhcmd2IiwicmVsZWFzZSIsImNvbmZpZyIsIm5vb3AiLCJvbiIsImFkZExpc3RlbmVyIiwib25jZSIsIm9mZiIsInJlbW92ZUxpc3RlbmVyIiwicmVtb3ZlQWxsTGlzdGVuZXJzIiwiYmluZGluZyIsImN3ZCIsImNoZGlyIiwiZGlyIiwidW1hc2siLCJwZXJmb3JtYW5jZSIsInBlcmZvcm1hbmNlTm93IiwibW96Tm93IiwibXNOb3ciLCJvTm93Iiwid2Via2l0Tm93IiwiaHJ0aW1lIiwicHJldmlvdXNUaW1lc3RhbXAiLCJjbG9ja3RpbWUiLCJzZWNvbmRzIiwibmFub3NlY29uZHMiLCJzdGFydFRpbWUiLCJ1cHRpbWUiLCJjdXJyZW50VGltZSIsImRpZiIsImgiLCJvcHRpb25zIiwicGFyc2UiLCJsb25nIiwiZm10TG9uZyIsImZtdFNob3J0IiwibXMiLCJwbHVyYWwiLCJjcmVhdGVEZWJ1ZyIsImRlYnVnIiwiY29lcmNlIiwiZGlzYWJsZSIsImVuYWJsZWQiLCJwcmV2VGltZSIsInNlbGVjdENvbG9yIiwibmFtZXNwYWNlIiwiaGFzaCIsImNvbG9ycyIsImN1cnIiLCJkaWZmIiwidW5zaGlmdCIsImZvcm1hdCIsImZvcm1hdHRlciIsImZvcm1hdHRlcnMiLCJmb3JtYXRBcmdzIiwibG9nRm4iLCJ1c2VDb2xvcnMiLCJuYW1lc3BhY2VzIiwic2F2ZSIsInNraXBzIiwic3Vic3RyIiwic3RhY2siLCJtZXNzYWdlIiwibG9hZCIsImNocm9tZSIsInN0b3JhZ2UiLCJsb2NhbCIsImxvY2Fsc3RvcmFnZSIsIldlYmtpdEFwcGVhcmFuY2UiLCJmaXJlYnVnIiwidGFibGUiLCIkMSIsImh1bWFuaXplIiwibGFzdEMiLCJyZW1vdmVJdGVtIiwiREVCVUciLCJsb2NhbFN0b3JhZ2UiLCJpc2F0dHkiLCJSZWFkU3RyZWFtIiwiV3JpdGVTdHJlYW0iLCJsb29rdXAiLCJyZXZMb29rdXAiLCJBcnIiLCJpbml0ZWQiLCJ0b0J5dGVBcnJheSIsImI2NCIsInRtcCIsInBsYWNlSG9sZGVycyIsInRyaXBsZXRUb0Jhc2U2NCIsImVuY29kZUNodW5rIiwidWludDgiLCJmcm9tQnl0ZUFycmF5IiwiZXh0cmFCeXRlcyIsInBhcnRzIiwibWF4Q2h1bmtMZW5ndGgiLCJsZW4yIiwicmVhZCIsImlzTEUiLCJJTlNQRUNUX01BWF9CWVRFUyIsIkJ1ZmZlciIsIlRZUEVEX0FSUkFZX1NVUFBPUlQiLCJrTWF4TGVuZ3RoIiwiY3JlYXRlQnVmZmVyIiwiZW5jb2RpbmdPck9mZnNldCIsImFsbG9jVW5zYWZlIiwicG9vbFNpemUiLCJfYXVnbWVudCIsImZyb21BcnJheUJ1ZmZlciIsImZyb21TdHJpbmciLCJmcm9tT2JqZWN0IiwiYXNzZXJ0U2l6ZSIsImFsbG9jIiwiZW5jb2RpbmciLCJjaGVja2VkIiwiYWxsb2NVbnNhZmVTbG93IiwiaXNFbmNvZGluZyIsImFjdHVhbCIsImZyb21BcnJheUxpa2UiLCJpbnRlcm5hbElzQnVmZmVyIiwiY29weSIsImlzbmFuIiwiaXNCdWZmZXIiLCJfaXNCdWZmZXIiLCJjb21wYXJlIiwiYnVmIiwibG93ZXJlZENhc2UiLCJ1dGY4VG9CeXRlcyIsImJhc2U2NFRvQnl0ZXMiLCJzbG93VG9TdHJpbmciLCJoZXhTbGljZSIsInV0ZjhTbGljZSIsImFzY2lpU2xpY2UiLCJsYXRpbjFTbGljZSIsImJhc2U2NFNsaWNlIiwidXRmMTZsZVNsaWNlIiwic3dhcCIsInN3YXAxNiIsInN3YXAzMiIsInN3YXA2NCIsImVxdWFscyIsImluc3BlY3QiLCJ0aGlzU3RhcnQiLCJ0aGlzRW5kIiwidGhpc0NvcHkiLCJ0YXJnZXRDb3B5IiwiYmlkaXJlY3Rpb25hbEluZGV4T2YiLCJpbmRleFNpemUiLCJhcnJMZW5ndGgiLCJ2YWxMZW5ndGgiLCJyZWFkVUludDE2QkUiLCJmb3VuZEluZGV4IiwiZm91bmQiLCJoZXhXcml0ZSIsInN0ckxlbiIsInBhcnNlZCIsInV0ZjhXcml0ZSIsImJsaXRCdWZmZXIiLCJhc2NpaVdyaXRlIiwiYXNjaWlUb0J5dGVzIiwibGF0aW4xV3JpdGUiLCJiYXNlNjRXcml0ZSIsInVjczJXcml0ZSIsInV0ZjE2bGVUb0J5dGVzIiwiX2FyciIsImJhc2U2NCIsImZpcnN0Qnl0ZSIsImNvZGVQb2ludCIsImJ5dGVzUGVyU2VxdWVuY2UiLCJzZWNvbmRCeXRlIiwidGhpcmRCeXRlIiwiZm91cnRoQnl0ZSIsInRlbXBDb2RlUG9pbnQiLCJkZWNvZGVDb2RlUG9pbnRzQXJyYXkiLCJNQVhfQVJHVU1FTlRTX0xFTkdUSCIsImNvZGVQb2ludHMiLCJ0b0hleCIsIm5ld0J1ZiIsInNsaWNlTGVuIiwiY2hlY2tPZmZzZXQiLCJleHQiLCJyZWFkVUludExFIiwibm9Bc3NlcnQiLCJtdWwiLCJyZWFkVUludEJFIiwicmVhZFVJbnQ4IiwicmVhZFVJbnQxNkxFIiwicmVhZFVJbnQzMkxFIiwicmVhZFVJbnQzMkJFIiwicmVhZEludExFIiwicmVhZEludEJFIiwicmVhZEludDgiLCJyZWFkSW50MTZMRSIsInJlYWRJbnQxNkJFIiwicmVhZEludDMyTEUiLCJyZWFkSW50MzJCRSIsInJlYWRGbG9hdExFIiwiaWVlZTc1NCIsInJlYWRGbG9hdEJFIiwicmVhZERvdWJsZUxFIiwicmVhZERvdWJsZUJFIiwiY2hlY2tJbnQiLCJ3cml0ZVVJbnRMRSIsIm1heEJ5dGVzIiwid3JpdGVVSW50QkUiLCJ3cml0ZVVJbnQ4Iiwib2JqZWN0V3JpdGVVSW50MTYiLCJsaXR0bGVFbmRpYW4iLCJ3cml0ZVVJbnQxNkxFIiwid3JpdGVVSW50MTZCRSIsIm9iamVjdFdyaXRlVUludDMyIiwid3JpdGVVSW50MzJMRSIsIndyaXRlVUludDMyQkUiLCJ3cml0ZUludExFIiwid3JpdGVJbnRCRSIsIndyaXRlSW50OCIsIndyaXRlSW50MTZMRSIsIndyaXRlSW50MTZCRSIsIndyaXRlSW50MzJMRSIsIndyaXRlSW50MzJCRSIsImNoZWNrSUVFRTc1NCIsIndyaXRlRmxvYXQiLCJ3cml0ZUZsb2F0TEUiLCJ3cml0ZUZsb2F0QkUiLCJ3cml0ZURvdWJsZSIsIndyaXRlRG91YmxlTEUiLCJ3cml0ZURvdWJsZUJFIiwidGFyZ2V0U3RhcnQiLCJJTlZBTElEX0JBU0U2NF9SRSIsImJhc2U2NGNsZWFuIiwic3RyaW5ndHJpbSIsInVuaXRzIiwibGVhZFN1cnJvZ2F0ZSIsImJ5dGVBcnJheSIsImhpIiwibG8iLCJkc3QiLCJpc0Zhc3RCdWZmZXIiLCJpc1Nsb3dCdWZmZXIiLCJpbmhlcml0cyIsInN1cGVyQ3RvciIsInN1cGVyXyIsIlRlbXBDdG9yIiwiZm9ybWF0UmVnRXhwIiwiaXNTdHJpbmciLCJvYmplY3RzIiwiXyIsImlzTnVsbCIsImRlcHJlY2F0ZSIsImlzVW5kZWZpbmVkIiwibm9EZXByZWNhdGlvbiIsIndhcm5lZCIsImRlcHJlY2F0ZWQiLCJ0aHJvd0RlcHJlY2F0aW9uIiwidHJhY2VEZXByZWNhdGlvbiIsInRyYWNlIiwiZGVidWdzIiwiZGVidWdFbnZpcm9uIiwiZGVidWdsb2ciLCJOT0RFX0RFQlVHIiwidG9VcHBlckNhc2UiLCJwaWQiLCJvcHRzIiwic2VlbiIsInN0eWxpemUiLCJzdHlsaXplTm9Db2xvciIsImlzQm9vbGVhbiIsInNob3dIaWRkZW4iLCJfZXh0ZW5kIiwiY3VzdG9tSW5zcGVjdCIsInN0eWxpemVXaXRoQ29sb3IiLCJmb3JtYXRWYWx1ZSIsInN0eWxlcyIsInN0eWxlVHlwZSIsImFycmF5VG9IYXNoIiwiaWR4IiwicmVjdXJzZVRpbWVzIiwicHJpbWl0aXZlIiwiZm9ybWF0UHJpbWl0aXZlIiwidmlzaWJsZUtleXMiLCJpc0Vycm9yIiwiZm9ybWF0RXJyb3IiLCJpc0RhdGUiLCJiYXNlIiwiYnJhY2VzIiwidG9VVENTdHJpbmciLCJmb3JtYXRBcnJheSIsImZvcm1hdFByb3BlcnR5IiwicmVkdWNlVG9TaW5nbGVTdHJpbmciLCJzaW1wbGUiLCJpc051bWJlciIsImxpbmUiLCJjdXIiLCJudW1MaW5lc0VzdCIsImFyIiwiaXNOdWxsT3JVbmRlZmluZWQiLCJvYmplY3RUb1N0cmluZyIsImlzUHJpbWl0aXZlIiwibWF5YmVCdWYiLCJwYWQiLCJtb250aHMiLCJ0aW1lc3RhbXAiLCJnZXRIb3VycyIsImdldE1pbnV0ZXMiLCJnZXRTZWNvbmRzIiwiZ2V0RGF0ZSIsImdldE1vbnRoIiwib3JpZ2luIiwicHJvcCIsInN1YnN0cmluZyIsImZkIiwiREVCVUdfRkQiLCJ1dGlsIiwic3RyZWFtIiwic3Rkb3V0Iiwic3RkZXJyIiwiY3JlYXRlV3JpdGFibGVTdGRpb1N0cmVhbSIsImluc3BlY3RPcHRzIiwiQm9vbGVhbiIsInR0eSIsInByZWZpeCIsInR0eV93cmFwIiwiZ3Vlc3NIYW5kbGVUeXBlIiwiX3R5cGUiLCJfaGFuZGxlIiwidW5yZWYiLCJmcyIsIlN5bmNXcml0ZVN0cmVhbSIsImF1dG9DbG9zZSIsIm5ldCIsIlNvY2tldCIsInJlYWRhYmxlIiwiX2lzU3RkaW8iLCJfX3RpbWVvdXQiLCJfX3Vuc2NoZWR1bGVFbmdpbmUiLCJidWZmZXJEdXJhdGlvbiIsInJlbGVhc2VBYnMiLCJhdHRhY2siLCJlbnZlbG9wZSIsIm9zYyIsIl9fcGVyaW9kIiwibG9vcEVuZCIsImludGVyU2VnbWVudERpc3RhbmNlIiwic2VnbWVudER1cmF0aW9uIiwic2VnbWVudFBvc2l0aW9uIiwic2VnbWVudFRpbWUiLCJQbGF5Q29udHJvbCIsImltcGwiLCJtb2JpbGVEZXRlY3RSdWxlcyIsImRldGVjdE1vYmlsZUJyb3dzZXJzIiwiZnVsbFBhdHRlcm4iLCJzaG9ydFBhdHRlcm4iLCJ0YWJsZXRQYXR0ZXJuIiwiaGFzT3duUHJvcCIsIkZBTExCQUNLX1BIT05FIiwiRkFMTEJBQ0tfVEFCTEVUIiwiRkFMTEJBQ0tfTU9CSUxFIiwiZXF1YWxJQyIsImNvbnRhaW5zSUMiLCJ2YWx1ZUxDIiwiY29udmVydFByb3BzVG9SZWdFeHAiLCJwcmVwYXJlVXNlckFnZW50IiwidmVyUG9zIiwib3NzIiwicGhvbmVzIiwidGFibGV0cyIsInVhcyIsInV0aWxzIiwib3NzMCIsIldpbmRvd3NQaG9uZU9TIiwiV2luZG93c01vYmlsZU9TIiwiZmluZE1hdGNoIiwicnVsZXMiLCJmaW5kTWF0Y2hlcyIsImdldFZlcnNpb25TdHIiLCJwcm9wZXJ0eU5hbWUiLCJwYXR0ZXJucyIsImdldFZlcnNpb24iLCJwcmVwYXJlVmVyc2lvbk5vIiwibnVtYmVycyIsInNoaWZ0IiwiaXNNb2JpbGVGYWxsYmFjayIsImlzVGFibGV0RmFsbGJhY2siLCJwcmVwYXJlRGV0ZWN0aW9uQ2FjaGUiLCJjYWNoZSIsIm1heFBob25lV2lkdGgiLCJtb2JpbGUiLCJwaG9uZSIsInRhYmxldCIsInBob25lU2l6ZWQiLCJNb2JpbGVEZXRlY3QiLCJpc1Bob25lU2l6ZWQiLCJtb2JpbGVHcmFkZSIsIiRpc01vYmlsZSIsIm9zIiwiZGV0ZWN0T1MiLCJ1YSIsImdldERldmljZVNtYWxsZXJTaWRlIiwic2NyZWVuIiwid2lkdGgiLCJoZWlnaHQiLCJfY2FjaGUiLCJ1c2VyQWdlbnRzIiwidmVyc2lvblN0ciIsInBhdHRlcm4iLCJncmFkZSIsIl9pbXBsIiwiZmFjdG9yeSIsImFtZCIsIlNlbGVjdG9yQnV0dG9ucyIsIm9uT24iLCJvbk9mZiIsImNvbnRhaW5lciIsImdldEVsZW1lbnRCeUlkIiwic2VsZWN0ZWRJbmRleCIsIl9vbkNsaWNrIiwiYnV0dG9uIiwiY2xhc3NMaXN0IiwiaW5uZXJIVE1MIiwic2V0QXR0cmlidXRlIiwicmVtb3ZlIiwicmVtb3ZlRXZlbnRMaXN0ZW5lciIsImRhdGFzZXQiLCJkZXNlbGVjdCIsInNlbGVjdCIsImF1ZGlvQ29udGV4dCIsImF1ZGlvIiwiUXVhZFN5bnRoIiwiX29zY3MiLCJfZ2FpbiIsIl9hbXAiLCJmYWRlVGltZSIsImZyZXFzIiwiYW1wIiwiZ2FpbiIsImNyZWF0ZUdhaW4iLCJjb25uZWN0IiwiZGVzdGluYXRpb24iLCJzZXRWYWx1ZUF0VGltZSIsImxpbmVhclJhbXBUb1ZhbHVlQXRUaW1lIiwiZnJlcSIsImNyZWF0ZU9zY2lsbGF0b3IiLCJmcmVxdWVuY3kiLCJfbW9kcyIsIl9sZm9zIiwibW9kIiwibGZvIiwicG93ZXJUb0RlY2liZWwiLCJkZWNpYmVsVG9Qb3dlciIsImZyZXFUb2xlcmFuY2UiLCJsZXZlbFRocmVzaG9sZCIsImxwQjEiLCJscEEiLCJTcGVjdHJ1bUFuYWx5c2VyIiwiZmZ0U2l6ZSIsInBlcmlvZCIsImNhbGxiYWNrIiwiYW5hbHlzZXIiLCJjcmVhdGVBbmFseXNlciIsInNtb290aGluZ1RpbWVDb25zdGFudCIsImRlbHRhRnJlcSIsInNhbXBsZVJhdGUiLCJudW1CaW5zIiwiZnJlcXVlbmN5QmluQ291bnQiLCJzdGFydEJpbiIsImVuZEJpbiIsInBlYWtzIiwiYmluIiwibGV2ZWwiLCJpbnB1dCIsImFuYWx5c2UiLCJiaW5zIiwibnVtRnJlcXMiLCJnZXRGbG9hdEZyZXF1ZW5jeURhdGEiLCJ0b3RhbFBvd2VyIiwicG93ZXIiLCJncm91bmRMZXZlbCIsImNlbnRlciIsInJpZ2h0IiwibWluTGV2ZWwiLCJmcmFjIiwicGVha0xldmVsIiwicGVha0luZGV4IiwibGlzdGVuZXJzIiwib2JqZWN0VHlwZXMiLCJyb290Iiwib2xkUm9vdCIsImZyZWVFeHBvcnRzIiwiZnJlZU1vZHVsZSIsIm5vZGVUeXBlIiwiZnJlZUdsb2JhbCIsIm1heFNhZmVJbnRlZ2VyIiwicmVPcGVyYSIsInRoaXNCaW5kaW5nIiwib2JqZWN0UHJvdG8iLCJjYXBpdGFsaXplIiwiY2xlYW51cE9TIiwibGFiZWwiLCJmb3JPd24iLCJnZXRDbGFzc09mIiwiaXNIb3N0VHlwZSIsInF1YWxpZnkiLCJhY2N1bXVsYXRvciIsImlzQ3VzdG9tQ29udGV4dCIsIm5hdiIsImlzTW9kdWxlU2NvcGUiLCJsaWtlQ2hyb21lIiwib2JqZWN0Q2xhc3MiLCJhaXJSdW50aW1lQ2xhc3MiLCJlbnZpcm9DbGFzcyIsImphdmFDbGFzcyIsImphdmEiLCJwaGFudG9tQ2xhc3MiLCJyaGlubyIsImVudmlyb25tZW50IiwiYWxwaGEiLCJiZXRhIiwiZG9jIiwib3BlcmEiLCJvcGVyYW1pbmkiLCJvcGVyYUNsYXNzIiwiYXJjaCIsImRlc2NyaXB0aW9uIiwicHJlcmVsZWFzZSIsInVzZUZlYXR1cmVzIiwiaXNTcGVjaWFsQ2FzZWRPUyIsImxheW91dCIsImdldExheW91dCIsImdldE5hbWUiLCJwcm9kdWN0IiwiZ2V0UHJvZHVjdCIsIm1hbnVmYWN0dXJlciIsImdldE1hbnVmYWN0dXJlciIsImdldE9TIiwiZ3Vlc3NlcyIsImd1ZXNzIiwidG9TdHJpbmdQbGF0Zm9ybSIsImxhbmciLCJTeXN0ZW0iLCJnZXRQcm9wZXJ0eSIsInN5c3RlbSIsInJlcXVpcmUiLCJlbGVjdHJvbiIsIm53IiwiZmxhc2giLCJDYXBhYmlsaXRpZXMiLCJwaGFudG9tIiwibWFqb3IiLCJtaW5vciIsInBhdGNoIiwiZG9jdW1lbnRNb2RlIiwiYXBwTWlub3JWZXJzaW9uIiwiZXh0ZXJuYWwiLCJmYW1pbHkiLCJhcmNoaXRlY3R1cmUiLCJjcHVDbGFzcyIsInRoaXMiLCJnYW1tYSIsInJhZFRvRGVnIiwiZXVsZXJBbmdsZSIsIm9yaWVudGF0aW9uIiwicmF3VmFsdWVzUHJvdmlkZWQiLCJvdXRFdmVudCIsImFjY2VsZXJhdGlvbkluY2x1ZGluZ0dyYXZpdHkiLCJhbHBoYUlzVmFsaWQiLCJEZXZpY2VNb3Rpb25FdmVudCIsImRpc3QiLCJjb21tb25qc0hlbHBlcnMuY3JlYXRlQ29tbW9uanNNb2R1bGUiLCJzZXR1cE92ZXJsYXkiLCJoYXNCdXR0b24iLCJvdmVybGF5Iiwic2V0dXBBdWRpb0lucHV0IiwibWVkaWFEZXZpY2VzIiwiZ2V0VXNlck1lZGlhIiwiY2F0Y2giLCJyZXN1bWVBdWRpb0NvbnRleHQiLCJyZXN1bWUiLCJydW5uaW5nT25Nb2JpbGUiLCJzZWxlY3RvckJ1dHRvbnMiLCJ3ZWxjb21lT3ZlcmxheSIsImVycm9yT3ZlcmxheSIsImN1cnJlbnRJbmRleCIsImN1cnJlbnRJZEZyZXFzIiwiaWRTeW50aCIsInJlU3ludGgiLCJhbmFseXNlck1pbiIsImFuYWx5c2VyTWF4IiwiYW5hbHlzZXJTY2FsZSIsImNhbnZhc0NvbnRhaW5lciIsImNhbnZhcyIsImlkRnJlcXMiLCJzZXR1cCIsImluaXRBdWRpb0lucHV0IiwidXBkYXRlU3BlY3RydW0iLCJtZWRpYVN0cmVhbVNvdXJjZSIsImNyZWF0ZU1lZGlhU3RyZWFtU291cmNlIiwib25TdGFydCIsIm9uU3RvcCIsImN1cnJlbnRTZXQiLCJkaXNwbGF5U3BlY3RydW0iLCJnZXRDb250ZXh0Iiwic3Ryb2tlU3R5bGUiLCJsaW5lV2lkdGgiLCJnbG9iYWxBbHBoYSIsImNsZWFyUmVjdCIsImJlZ2luUGF0aCIsIm1vdmVUbyIsImxpbmVUbyIsInN0cm9rZSIsImRpc3BsYXlQZWFrcyIsInBlYWsiLCJtYWluIiwibWQiLCJQdWxzZVN5bnRoIiwiVG9uZVN5bnRoIiwiYnV0dG9uSW5kZXgiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0VBQUE7RUFDQSxNQUFJQSxNQUFNLEdBQUdDLGNBQUEsR0FBaUIsT0FBT0MsTUFBUCxJQUFpQixXQUFqQixJQUFnQ0EsTUFBTSxDQUFDQyxJQUFQLElBQWVBLElBQS9DLEdBQzFCRCxNQUQwQixHQUNqQixPQUFPRSxJQUFQLElBQWUsV0FBZixJQUE4QkEsSUFBSSxDQUFDRCxJQUFMLElBQWFBLElBQTNDLEdBQWtEQyxJQUFsRDtFQUFBLElBRVRDLFFBQVEsQ0FBQyxhQUFELENBQVIsRUFISjtFQUlBLE1BQUksT0FBT0MsR0FBUCxJQUFjLFFBQWxCLEVBQTRCQSxHQUFHLEdBQUdOLE1BQU47OztFQ0w1QixJQUFJTyxjQUFjLEdBQUcsR0FBR0EsY0FBeEI7O0VBQ0EsUUFBYyxHQUFHLGFBQUEsQ0FBVUMsRUFBVixFQUFjQyxHQUFkLEVBQW1CO0VBQ2xDLFNBQU9GLGNBQWMsQ0FBQ0csSUFBZixDQUFvQkYsRUFBcEIsRUFBd0JDLEdBQXhCLENBQVA7RUFDRCxDQUZEOztFQ0RBLFVBQWMsR0FBRyxlQUFBLENBQVVFLElBQVYsRUFBZ0I7RUFDL0IsTUFBSTtFQUNGLFdBQU8sQ0FBQyxDQUFDQSxJQUFJLEVBQWI7RUFDRCxHQUZELENBRUUsT0FBT0MsQ0FBUCxFQUFVO0VBQ1YsV0FBTyxJQUFQO0VBQ0Q7RUFDRixDQU5EOztFQ0NBLGdCQUFjLEdBQUcsQ0FBQ0MsTUFBbUIsQ0FBQyxZQUFZO0VBQ2hELFNBQU9DLE1BQU0sQ0FBQ0MsY0FB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
