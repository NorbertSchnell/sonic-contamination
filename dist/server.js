'use strict';

function _interopDefault (ex) { return (ex && (typeof ex === 'object') && 'default' in ex) ? ex['default'] : ex; }

require('@babel/polyfill');
var path = _interopDefault(require('path'));
var url = _interopDefault(require('url'));
var connect = _interopDefault(require('connect'));
var serveStatic = _interopDefault(require('serve-static'));
var livereload = _interopDefault(require('livereload'));

var statusEnum = ['before', 'running', 'end'];
var status = 'before';
var publicDir = path.join(process.cwd(), 'public');
var lrserver = livereload.createServer();
lrserver.watch(publicDir);

function handleControl(request, response, next) {
  switch (request.method) {
    case 'GET':
      handleGET(request, response);
      break;

    case 'PUT':
      handlePUT(request, response);
      break;
  }
}

function handleGET(request, response) {
  var parsedURL = url.parse(request.url, true);
  var param = parsedURL.path;
  response.setHeader("content-type", "text/html; charset=utf-8");
  response.setHeader("Access-Control-Allow-Origin", "*");

  switch (param) {
    case '/status':
      response.write(status);
      break;
  }

  response.end();
}

function handlePUT(request, response) {
  var parsedURL = url.parse(request.url, true);
  var query = parsedURL.query;
  response.setHeader("content-type", "text/html; charset=utf-8");
  response.setHeader("Access-Control-Allow-Origin", "*");

  for (var param in query) {
    var value = query[param];
    var success = false;

    switch (param) {
      case 'status':
        success = updateStatus(value);
        break;
    }

    if (!success) break;
  }

  response.end();
}

function updateStatus(value) {
  if (statusEnum.indexOf(value) >= 0) {
    status = value;
    console.log("status = ".concat(value));
    return true;
  }

  return false;
} //const port = process.env.PORT || 3000;


var port = 3000;
var ip = '0.0.0.0';
var app = connect().use('/control', handleControl).use(serveStatic(publicDir)).listen(port, ip, function () {
  return console.log("> server running on http://".concat(ip, ":").concat(port));
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2VydmVyLmpzIiwic291cmNlcyI6WyIuLi9zcmMvc2VydmVyLmpzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCAnQGJhYmVsL3BvbHlmaWxsJztcbmltcG9ydCBwYXRoIGZyb20gJ3BhdGgnO1xuaW1wb3J0IHVybCBmcm9tICd1cmwnO1xuaW1wb3J0IGNvbm5lY3QgZnJvbSAnY29ubmVjdCc7XG5pbXBvcnQgc2VydmVTdGF0aWMgZnJvbSAnc2VydmUtc3RhdGljJztcbmltcG9ydCBsaXZlcmVsb2FkIGZyb20gJ2xpdmVyZWxvYWQnO1xuXG5jb25zdCBzdGF0dXNFbnVtID0gWydiZWZvcmUnLCAncnVubmluZycsICdlbmQnXTtcbmxldCBzdGF0dXMgPSAnYmVmb3JlJztcblxuY29uc3QgcHVibGljRGlyID0gcGF0aC5qb2luKHByb2Nlc3MuY3dkKCksICdwdWJsaWMnKTtcblxuY29uc3QgbHJzZXJ2ZXIgPSBsaXZlcmVsb2FkLmNyZWF0ZVNlcnZlcigpO1xubHJzZXJ2ZXIud2F0Y2gocHVibGljRGlyKTtcblxuZnVuY3Rpb24gaGFuZGxlQ29udHJvbChyZXF1ZXN0LCByZXNwb25zZSwgbmV4dCkge1xuICBzd2l0Y2ggKHJlcXVlc3QubWV0aG9kKSB7XG4gICAgY2FzZSAnR0VUJzpcbiAgICAgIGhhbmRsZUdFVChyZXF1ZXN0LCByZXNwb25zZSk7XG4gICAgICBicmVhaztcblxuICAgIGNhc2UgJ1BVVCc6XG4gICAgICBoYW5kbGVQVVQocmVxdWVzdCwgcmVzcG9uc2UpO1xuICAgICAgYnJlYWs7XG4gIH1cbn1cblxuZnVuY3Rpb24gaGFuZGxlR0VUKHJlcXVlc3QsIHJlc3BvbnNlKSB7XG4gIGNvbnN0IHBhcnNlZFVSTCA9IHVybC5wYXJzZShyZXF1ZXN0LnVybCwgdHJ1ZSk7XG4gIGNvbnN0IHBhcmFtID0gcGFyc2VkVVJMLnBhdGg7XG5cbiAgcmVzcG9uc2Uuc2V0SGVhZGVyKFwiY29udGVudC10eXBlXCIsIFwidGV4dC9odG1sOyBjaGFyc2V0PXV0Zi04XCIpO1xuICByZXNwb25zZS5zZXRIZWFkZXIoXCJBY2Nlc3MtQ29udHJvbC1BbGxvdy1PcmlnaW5cIiwgXCIqXCIpO1xuXG4gIHN3aXRjaCAocGFyYW0pIHtcbiAgICBjYXNlICcvc3RhdHVzJzpcbiAgICAgIHJlc3BvbnNlLndyaXRlKHN0YXR1cyk7XG4gICAgICBicmVhaztcbiAgfVxuXG4gIHJlc3BvbnNlLmVuZCgpO1xufVxuXG5mdW5jdGlvbiBoYW5kbGVQVVQocmVxdWVzdCwgcmVzcG9uc2UpIHtcbiAgY29uc3QgcGFyc2VkVVJMID0gdXJsLnBhcnNlKHJlcXVlc3QudXJsLCB0cnVlKTtcbiAgY29uc3QgcXVlcnkgPSBwYXJzZWRVUkwucXVlcnk7XG5cbiAgcmVzcG9uc2Uuc2V0SGVhZGVyKFwiY29udGVudC10eXBlXCIsIFwidGV4dC9odG1sOyBjaGFyc2V0PXV0Zi04XCIpO1xuICByZXNwb25zZS5zZXRIZWFkZXIoXCJBY2Nlc3MtQ29udHJvbC1BbGxvdy1PcmlnaW5cIiwgXCIqXCIpO1xuXG4gIGZvciAoY29uc3QgcGFyYW0gaW4gcXVlcnkpIHtcbiAgICBjb25zdCB2YWx1ZSA9IHF1ZXJ5W3BhcmFtXTtcbiAgICBsZXQgc3VjY2VzcyA9IGZhbHNlO1xuXG4gICAgc3dpdGNoIChwYXJhbSkge1xuICAgICAgY2FzZSAnc3RhdHVzJzpcbiAgICAgICAgc3VjY2VzcyA9IHVwZGF0ZVN0YXR1cyh2YWx1ZSk7XG4gICAgICAgIGJyZWFrO1xuICAgIH1cblxuICAgIGlmICghc3VjY2VzcylcbiAgICAgIGJyZWFrO1xuICB9XG5cbiAgcmVzcG9uc2UuZW5kKCk7XG59XG5cbmZ1bmN0aW9uIHVwZGF0ZVN0YXR1cyh2YWx1ZSkge1xuICBpZiAoc3RhdHVzRW51bS5pbmRleE9mKHZhbHVlKSA+PSAwKSB7XG4gICAgc3RhdHVzID0gdmFsdWU7XG4gICAgY29uc29sZS5sb2coYHN0YXR1cyA9ICR7dmFsdWV9YCk7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cblxuICByZXR1cm4gZmFsc2U7XG59XG5cbi8vY29uc3QgcG9ydCA9IHByb2Nlc3MuZW52LlBPUlQgfHwgMzAwMDtcbmNvbnN0IHBvcnQgPSAzMDAwO1xuY29uc3QgaXAgPSAnMC4wLjAuMCc7XG5jb25zdCBhcHAgPSBjb25uZWN0KClcbiAgLnVzZSgnL2NvbnRyb2wnLCBoYW5kbGVDb250cm9sKVxuICAudXNlKHNlcnZlU3RhdGljKHB1YmxpY0RpcikpXG4gIC5saXN0ZW4ocG9ydCwgaXAsICgpID0+IGNvbnNvbGUubG9nKGA+IHNlcnZlciBydW5uaW5nIG9uIGh0dHA6Ly8ke2lwfToke3BvcnR9YCkpO1xuIl0sIm5hbWVzIjpbInN0YXR1c0VudW0iLCJzdGF0dXMiLCJwdWJsaWNEaXIiLCJwYXRoIiwiam9pbiIsInByb2Nlc3MiLCJjd2QiLCJscnNlcnZlciIsImxpdmVyZWxvYWQiLCJjcmVhdGVTZXJ2ZXIiLCJ3YXRjaCIsImhhbmRsZUNvbnRyb2wiLCJyZXF1ZXN0IiwicmVzcG9uc2UiLCJuZXh0IiwibWV0aG9kIiwiaGFuZGxlR0VUIiwiaGFuZGxlUFVUIiwicGFyc2VkVVJMIiwidXJsIiwicGFyc2UiLCJwYXJhbSIsInNldEhlYWRlciIsIndyaXRlIiwiZW5kIiwicXVlcnkiLCJ2YWx1ZSIsInN1Y2Nlc3MiLCJ1cGRhdGVTdGF0dXMiLCJpbmRleE9mIiwiY29uc29sZSIsImxvZyIsInBvcnQiLCJpcCIsImFwcCIsImNvbm5lY3QiLCJ1c2UiLCJzZXJ2ZVN0YXRpYyIsImxpc3RlbiJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7QUFPQSxJQUFNQSxVQUFVLEdBQUcsQ0FBQyxRQUFELEVBQVcsU0FBWCxFQUFzQixLQUF0QixDQUFuQjtBQUNBLElBQUlDLE1BQU0sR0FBRyxRQUFiO0FBRUEsSUFBTUMsU0FBUyxHQUFHQyxJQUFJLENBQUNDLElBQUwsQ0FBVUMsT0FBTyxDQUFDQyxHQUFSLEVBQVYsRUFBeUIsUUFBekIsQ0FBbEI7QUFFQSxJQUFNQyxRQUFRLEdBQUdDLFVBQVUsQ0FBQ0MsWUFBWCxFQUFqQjtBQUNBRixRQUFRLENBQUNHLEtBQVQs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
