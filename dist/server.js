'use strict';

function _interopDefault (ex) { return (ex && (typeof ex === 'object') && 'default' in ex) ? ex['default'] : ex; }

var path = _interopDefault(require('path'));
var url = _interopDefault(require('url'));
var connect = _interopDefault(require('connect'));
var serveStatic = _interopDefault(require('serve-static'));
var portfinder = _interopDefault(require('portfinder'));
var livereload = _interopDefault(require('livereload'));

// import '@babel/polyfill';
var statusEnum = ['running', 'off'];
var status = 'running';
var publicDir = path.join(process.cwd(), 'public');
var lrserver = livereload.createServer();
lrserver.watch(publicDir);

function handleControl(request, response, next) {
  switch (request.method) {
    case 'GET':
      handleGET(request, response);
      break;

    case 'PUT':
      handlePUT(request, response);
      break;
  }
}

function handleGET(request, response) {
  var parsedURL = url.parse(request.url, true);
  var param = parsedURL.path;

  switch (param) {
    case '/status':
      response.setHeader("content-type", "text/html; charset=utf-8");
      response.write(status);
      break;
  }

  response.end();
}

function handlePUT(request, response) {
  var parsedURL = url.parse(request.url, true);
  var query = parsedURL.query;

  for (var param in query) {
    var value = query[param];
    var success = false;

    switch (param) {
      case 'status':
        success = updateStatus(value);
        break;
    }

    if (!success) break;
  }

  response.end();
}

function updateStatus(value) {
  if (statusEnum.indexOf(value) >= 0) {
    status = value;
    console.log("status = ".concat(value));
    return true;
  }

  return false;
} // static file server


portfinder.basePort = 3000;
portfinder.getPortPromise().then(function (port) {
  connect().use('/control', handleControl).use(serveStatic(publicDir)).listen(port, function () {
    return console.log("> server running on http://127.0.0.1:".concat(port));
  });
}).catch(function (err) {
  console.error('no available port');
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2VydmVyLmpzIiwic291cmNlcyI6WyIuLi9zcmMvc2VydmVyLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIGltcG9ydCAnQGJhYmVsL3BvbHlmaWxsJztcbmltcG9ydCBwYXRoIGZyb20gJ3BhdGgnO1xuaW1wb3J0IHVybCBmcm9tICd1cmwnO1xuaW1wb3J0IGNvbm5lY3QgZnJvbSAnY29ubmVjdCc7XG5pbXBvcnQgc2VydmVTdGF0aWMgZnJvbSAnc2VydmUtc3RhdGljJztcbmltcG9ydCBwb3J0ZmluZGVyIGZyb20gJ3BvcnRmaW5kZXInO1xuaW1wb3J0IGxpdmVyZWxvYWQgZnJvbSAnbGl2ZXJlbG9hZCc7XG5cbmNvbnN0IHN0YXR1c0VudW0gPSBbJ3J1bm5pbmcnLCAnb2ZmJ107XG5sZXQgc3RhdHVzID0gJ3J1bm5pbmcnO1xuXG5jb25zdCBwdWJsaWNEaXIgPSBwYXRoLmpvaW4ocHJvY2Vzcy5jd2QoKSwgJ3B1YmxpYycpO1xuXG5jb25zdCBscnNlcnZlciA9IGxpdmVyZWxvYWQuY3JlYXRlU2VydmVyKCk7XG5scnNlcnZlci53YXRjaChwdWJsaWNEaXIpO1xuXG5mdW5jdGlvbiBoYW5kbGVDb250cm9sKHJlcXVlc3QsIHJlc3BvbnNlLCBuZXh0KSB7XG4gIHN3aXRjaCAocmVxdWVzdC5tZXRob2QpIHtcbiAgICBjYXNlICdHRVQnOlxuICAgICAgaGFuZGxlR0VUKHJlcXVlc3QsIHJlc3BvbnNlKTtcbiAgICAgIGJyZWFrO1xuXG4gICAgY2FzZSAnUFVUJzpcbiAgICAgIGhhbmRsZVBVVChyZXF1ZXN0LCByZXNwb25zZSk7XG4gICAgICBicmVhaztcblxuICB9XG59XG5cbmZ1bmN0aW9uIGhhbmRsZUdFVChyZXF1ZXN0LCByZXNwb25zZSkge1xuICBjb25zdCBwYXJzZWRVUkwgPSB1cmwucGFyc2UocmVxdWVzdC51cmwsIHRydWUpO1xuICBjb25zdCBwYXJhbSA9IHBhcnNlZFVSTC5wYXRoO1xuXG4gIHN3aXRjaChwYXJhbSkge1xuICAgIGNhc2UgJy9zdGF0dXMnOlxuICAgIHJlc3BvbnNlLnNldEhlYWRlcihcImNvbnRlbnQtdHlwZVwiLCBcInRleHQvaHRtbDsgY2hhcnNldD11dGYtOFwiKTtcbiAgICByZXNwb25zZS53cml0ZShzdGF0dXMpO1xuICAgIGJyZWFrO1xuICB9XG5cbiAgcmVzcG9uc2UuZW5kKCk7XG59XG5cbmZ1bmN0aW9uIGhhbmRsZVBVVChyZXF1ZXN0LCByZXNwb25zZSkge1xuICBjb25zdCBwYXJzZWRVUkwgPSB1cmwucGFyc2UocmVxdWVzdC51cmwsIHRydWUpO1xuICBjb25zdCBxdWVyeSA9IHBhcnNlZFVSTC5xdWVyeTtcblxuICBmb3IgKGNvbnN0IHBhcmFtIGluIHF1ZXJ5KSB7XG4gICAgY29uc3QgdmFsdWUgPSBxdWVyeVtwYXJhbV07XG4gICAgbGV0IHN1Y2Nlc3MgPSBmYWxzZTtcblxuICAgIHN3aXRjaCAocGFyYW0pIHtcbiAgICAgIGNhc2UgJ3N0YXR1cyc6XG4gICAgICBzdWNjZXNzID0gdXBkYXRlU3RhdHVzKHZhbHVlKTtcbiAgICAgIGJyZWFrO1xuICAgIH1cblxuICAgIGlmICghc3VjY2VzcylcbiAgICAgIGJyZWFrO1xuICB9XG5cbiAgcmVzcG9uc2UuZW5kKCk7XG59XG5cbmZ1bmN0aW9uIHVwZGF0ZVN0YXR1cyh2YWx1ZSkge1xuICBpZiAoc3RhdHVzRW51bS5pbmRleE9mKHZhbHVlKSA+PSAwKSB7XG4gICAgc3RhdHVzID0gdmFsdWU7XG4gICAgY29uc29sZS5sb2coYHN0YXR1cyA9ICR7dmFsdWV9YCk7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cblxuICByZXR1cm4gZmFsc2U7XG59XG5cbi8vIHN0YXRpYyBmaWxlIHNlcnZlclxucG9ydGZpbmRlci5iYXNlUG9ydCA9IDMwMDA7XG5wb3J0ZmluZGVyLmdldFBvcnRQcm9taXNlKClcbiAgLnRoZW4ocG9ydCA9PiB7XG4gICAgY29ubmVjdCgpXG4gICAgICAudXNlKCcvY29udHJvbCcsIGhhbmRsZUNvbnRyb2wpXG4gICAgICAudXNlKHNlcnZlU3RhdGljKHB1YmxpY0RpcikpXG4gICAgICAubGlzdGVuKHBvcnQsICgpID0+IGNvbnNvbGUubG9nKGA+IHNlcnZlciBydW5uaW5nIG9uIGh0dHA6Ly8xMjcuMC4wLjE6JHtwb3J0fWApKTtcbiAgfSlcbiAgLmNhdGNoKChlcnIpID0+IHtcbiAgICBjb25zb2xlLmVycm9yKCdubyBhdmFpbGFibGUgcG9ydCcpO1xuICB9KTtcbiJdLCJuYW1lcyI6WyJzdGF0dXNFbnVtIiwic3RhdHVzIiwicHVibGljRGlyIiwicGF0aCIsImpvaW4iLCJwcm9jZXNzIiwiY3dkIiwibHJzZXJ2ZXIiLCJsaXZlcmVsb2FkIiwiY3JlYXRlU2VydmVyIiwid2F0Y2giLCJoYW5kbGVDb250cm9sIiwicmVxdWVzdCIsInJlc3BvbnNlIiwibmV4dCIsIm1ldGhvZCIsImhhbmRsZUdFVCIsImhhbmRsZVBVVCIsInBhcnNlZFVSTCIsInVybCIsInBhcnNlIiwicGFyYW0iLCJzZXRIZWFkZXIiLCJ3cml0ZSIsImVuZCIsInF1ZXJ5IiwidmFsdWUiLCJzdWNjZXNzIiwidXBkYXRlU3RhdHVzIiwiaW5kZXhPZiIsImNvbnNvbGUiLCJsb2ciLCJwb3J0ZmluZGVyIiwiYmFzZVBvcnQiLCJnZXRQb3J0UHJvbWlzZSIsInRoZW4iLCJwb3J0IiwiY29ubmVjdCIsInVzZSIsInNlcnZlU3RhdGljIiwibGlzdGVuIiwiY2F0Y2giLCJlcnIiLCJlcnJvciJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7QUFBQTtBQVFBLElBQU1BLFVBQVUsR0FBRyxDQUFDLFNBQUQsRUFBWSxLQUFaLENBQW5CO0FBQ0EsSUFBSUMsTUFBTSxHQUFHLFNBQWI7QUFFQSxJQUFNQyxTQUFTLEdBQUdDLElBQUksQ0FBQ0MsSUFBTCxDQUFVQyxPQUFPLENBQUNDLEdBQVIsRUFBVixFQUF5QixRQUF6QixDQUFsQjtBQUVBLElBQU1DLFFBQVEsR0FBR0MsVUFBVSxDQUFDQyxZQUFYLEVBQWpCO0FBQ0FGLFFBQVEsQ0FBQ0csS0FBVCxDQUFlUixTQUFmOztBQUVBLFNBQVNTLGFBQVQs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
